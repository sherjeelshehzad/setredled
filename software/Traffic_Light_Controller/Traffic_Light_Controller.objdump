
Traffic_Light_Controller.elf:     file format elf32-littlenios2
Traffic_Light_Controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000142ac memsz 0x000142ac flags r-x
    LOAD off    0x000152cc vaddr 0x008142cc paddr 0x00815fc8 align 2**12
         filesz 0x00001cfc memsz 0x00001cfc flags rw-
    LOAD off    0x00017cc4 vaddr 0x00817cc4 paddr 0x00817cc4 align 2**12
         filesz 0x00000000 memsz 0x00000220 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013974  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000714  00813bb8  00813bb8  00014bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cfc  008142cc  00815fc8  000152cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000220  00817cc4  00817cc4  00017cc4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00817ee4  00817ee4  00016fc8  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01080000  01080000  00016fc8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00016fc8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001258  00000000  00000000  00016ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002fa7f  00000000  00000000  00018248  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000bf38  00000000  00000000  00047cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e7d7  00000000  00000000  00053bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002b44  00000000  00000000  000623d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000469a  00000000  00000000  00064f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00019165  00000000  00000000  000695b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0008271c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b18  00000000  00000000  00082780  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00088229  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0008822c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008822f  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00088230  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00088231  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00088235  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00088239  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0008823d  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00088246  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0008824f  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  00088258  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000059  00000000  00000000  00088264  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006b318  00000000  00000000  000882bd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00813bb8 l    d  .rodata	00000000 .rodata
008142cc l    d  .rwdata	00000000 .rwdata
00817cc4 l    d  .bss	00000000 .bss
00817ee4 l    d  .sdram	00000000 .sdram
01080000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Traffic_Light_Controller_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 findfp.c
008020d8 l     F .text	00000008 __fp_unlock
008020ec l     F .text	0000019c __sinit.part.1
00802288 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
008142cc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00803a0c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
00813d86 l     O .rodata	00000010 zeroes.4404
008063d0 l     F .text	000000bc __sbprintf
00813d96 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
00813ea7 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00806694 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00814b18 l     O .rwdata	00000020 lc_ctype_charset
00814af8 l     O .rwdata	00000020 lc_message_charset
00814b38 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00814044 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080a9f4 l     F .text	000000fc __sprint_r.part.0
00814178 l     O .rodata	00000010 blanks.4348
00814168 l     O .rodata	00000010 zeroes.4349
0080bf80 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080fa40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080fb4c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080fb78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080fde4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080fec4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080ffb0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00810184 l     F .text	0000003c alt_get_errno
008101c0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
008103d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00815fb8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
008107c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
008108fc l     F .text	00000034 alt_dev_reg
00814d18 l     O .rwdata	00001060 jtag_uart
00815d78 l     O .rwdata	00000120 lcd
00815e98 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00810c28 l     F .text	0000020c altera_avalon_jtag_uart_irq
00810e34 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00815fc4 l     O .rwdata	00000004 colstart
0081146c l     F .text	000000b8 lcd_write_command
00811524 l     F .text	000000d8 lcd_write_data
008115fc l     F .text	000000d0 lcd_clear_screen
008116cc l     F .text	000001ec lcd_repaint_screen
008118b8 l     F .text	000000cc lcd_scroll_up
00811984 l     F .text	000002ac lcd_handle_escape
00812108 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00812348 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
008125f8 l     F .text	0000009c altera_avalon_uart_irq
00812694 l     F .text	000000e4 altera_avalon_uart_rxirq
00812778 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00812914 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00812b2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00812d5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0081340c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00817d3c g     O .bss	00000004 alt_instruction_exception_handler
00803920 g     F .text	00000018 putchar
0080a000 g     F .text	00000074 _mprec_log10
00800d0c g     F .text	00000080 lcd_set_mode
0080a0ec g     F .text	0000008c __any_on
00808c64 g     F .text	00000054 _isatty_r
00814050 g     O .rodata	00000028 __mprec_tinytens
00817ce8 g     O .bss	00000004 current_state4
008100c0 g     F .text	0000007c alt_main
00817cf8 g     O .bss	00000004 vehicle_cross
00803938 g     F .text	000000c0 _puts_r
00817de4 g     O .bss	00000100 alt_irq
00808d94 g     F .text	00000060 _lseek_r
00815f70 g     O .rwdata	00000004 t3
00815fc8 g       *ABS*	00000000 __flash_rwdata_start
008082c8 g     F .text	000000ac __sflags
0080e440 g     F .text	00000088 .hidden __eqdf2
00817cf4 g     O .bss	00000004 pedEW
00817ee4 g       *ABS*	00000000 __alt_heap_start
00803f60 g     F .text	00000008 strtok_r
008038dc g     F .text	0000003c printf
0080c460 g     F .text	0000009c _wcrtomb_r
00803db0 g     F .text	0000005c __sseek
00802428 g     F .text	00000010 __sinit
0080c03c g     F .text	00000140 __swbuf_r
00817cd4 g     O .bss	00000004 previous_state1
00817d00 g     O .bss	00000004 lcd
00808cb8 g     F .text	0000007c _setlocale_r
00802290 g     F .text	00000068 __sfmoreglue
00810160 g     F .text	00000024 __malloc_unlock
00809020 g     F .text	0000015c memmove
00802410 g     F .text	00000018 _cleanup
0080917c g     F .text	000000a8 _Balloc
00803ec4 g     F .text	0000009c __strtok_r
0080e4c8 g     F .text	000000dc .hidden __gtdf2
0081357c g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00815f78 g     O .rwdata	00000004 t5
00802a50 g     F .text	0000005c _fstat_r
00817d08 g     O .bss	00000004 errno
00803c70 g     F .text	00000014 __srget
00815f60 g     O .rwdata	00000004 mode_display
00803d2c g     F .text	00000008 __seofread
00817d2c g     O .bss	00000004 alt_argv
0081df5c g       *ABS*	00000000 _gp
0081354c g     F .text	00000030 usleep
00814b98 g     O .rwdata	00000180 alt_fd_list
00803918 g     F .text	00000008 _putchar_r
00812efc g     F .text	00000090 alt_find_dev
00808ed8 g     F .text	00000148 memcpy
00800a84 g     F .text	0000004c camera_timer_isr
008003a0 g     F .text	00000254 pedestrian_tlc_timer_isr
008020e0 g     F .text	0000000c _cleanup_r
0080f72c g     F .text	000000dc .hidden __floatsidf
008134d0 g     F .text	0000007c alt_io_redirect
0080e5a4 g     F .text	000000f4 .hidden __ltdf2
00817cf0 g     O .bss	00000004 pedNS
00813bb8 g       *ABS*	00000000 __DTOR_END__
008039f8 g     F .text	00000014 puts
00800ad0 g     F .text	00000030 vehicle_timer_isr
00813788 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080a8a4 g     F .text	00000074 __fpclassifyd
00809f5c g     F .text	000000a4 __ratio
0080bf64 g     F .text	0000001c __vfiprintf_internal
00800f78 g     F .text	00000284 pedestrian_tlc
0081102c g     F .text	0000021c altera_avalon_jtag_uart_read
00802ef0 g     F .text	00000014 malloc
008038ac g     F .text	00000030 _printf_r
0080d1f0 g     F .text	00000064 .hidden __udivsi3
0080fe20 g     F .text	000000a4 isatty
008140a0 g     O .rodata	000000c8 __mprec_tens
00808d34 g     F .text	0000000c __locale_charset
008136f8 g     F .text	00000090 alt_icache_flush
00817d14 g     O .bss	00000004 __malloc_top_pad
00815f94 g     O .rwdata	00000004 __mb_cur_max
00808d64 g     F .text	0000000c _localeconv_r
00809588 g     F .text	0000003c __i2b
008087a8 g     F .text	000004bc __sfvwrite_r
00815f5c g     O .rwdata	00000004 current_mode
00803c84 g     F .text	00000054 _sbrk_r
008011fc g     F .text	000005ac configurable_tlc
0080a2e0 g     F .text	00000060 _read_r
00815fac g     O .rwdata	00000004 alt_max_fd
00807f1c g     F .text	000000f0 _fclose_r
00815f6c g     O .rwdata	00000004 t2
00808298 g     F .text	00000030 fflush
00817d10 g     O .bss	00000004 __malloc_max_sbrked_mem
0080fc64 g     F .text	00000180 alt_irq_register
00801fe0 g     F .text	00000070 _fgetc_r
0080d2ac g     F .text	000008ac .hidden __adddf3
00809d04 g     F .text	0000010c __b2d
0080cbc0 g     F .text	00000538 .hidden __umoddi3
0080ffec g     F .text	000000d4 lseek
00815f80 g     O .rwdata	00000004 _global_impure_ptr
0080a340 g     F .text	00000564 _realloc_r
00817ee4 g       *ABS*	00000000 __bss_end
0081331c g     F .text	000000f0 alt_iic_isr_register
008106c0 g     F .text	00000108 alt_tick
0080c648 g     F .text	00000578 .hidden __udivdi3
0080c3bc g     F .text	00000024 _fputwc_r
00814078 g     O .rodata	00000028 __mprec_bigtens
0080936c g     F .text	00000104 __s2b
0080f808 g     F .text	000000a8 .hidden __floatunsidf
00809a44 g     F .text	00000060 __mcmp
0081254c g     F .text	000000ac altera_avalon_uart_init
00802448 g     F .text	00000018 __fp_lock_all
008132d0 g     F .text	0000004c alt_ic_irq_enabled
00810624 g     F .text	0000009c alt_alarm_stop
008017a8 g     F .text	000005bc camera_tlc
008041a0 g     F .text	0000001c strtol
00817d24 g     O .bss	00000004 alt_irq_active
008025f0 g     F .text	00000444 _fseeko_r
01080000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00814b70 g     O .rwdata	00000028 alt_dev_null
00817d68 g     O .bss	00000018 timer_simple
00812d14 g     F .text	00000048 alt_dcache_flush_all
00809470 g     F .text	00000068 __hi0bits
0080f6ac g     F .text	00000080 .hidden __fixdfsi
00815f74 g     O .rwdata	00000004 t4
00815fc8 g       *ABS*	00000000 __ram_rwdata_end
00815fa4 g     O .rwdata	00000008 alt_dev_list
00810804 g     F .text	000000f8 write
0080a178 g     F .text	000000a0 _putc_r
008142cc g       *ABS*	00000000 __ram_rodata_end
0080fbb4 g     F .text	000000b0 fstat
008025ac g     F .text	00000024 fprintf
0080e5a4 g     F .text	000000f4 .hidden __ledf2
008097bc g     F .text	00000140 __pow5mult
0080ab08 g     F .text	0000145c ___vfiprintf_internal_r
00817d20 g     O .bss	00000004 __nlocale_changed
0080d254 g     F .text	00000058 .hidden __umodsi3
00817ee4 g       *ABS*	00000000 end
00811c30 g     F .text	000004d8 altera_avalon_lcd_16207_write
00802a34 g     F .text	0000001c fseeko
00812b68 g     F .text	000001ac altera_avalon_uart_write
008025d4 g     F .text	0000001c fseek
00810b68 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00813bb8 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008123c0 g     F .text	0000007c alt_avalon_timer_sc_init
0081249c g     F .text	00000060 altera_avalon_uart_write_fd
0080f8b0 g     F .text	00000064 .hidden __clzsi2
008124fc g     F .text	00000050 altera_avalon_uart_close_fd
00811248 g     F .text	00000224 altera_avalon_jtag_uart_write
00802438 g     F .text	00000004 __sfp_lock_acquire
00808df4 g     F .text	000000e4 memchr
008041bc g     F .text	000021f8 ___vfprintf_internal_r
00808498 g     F .text	00000310 _free_r
00808d40 g     F .text	00000010 __locale_mb_cur_max
00813a04 g     F .text	00000180 __call_exitprocs
00803bfc g     F .text	00000074 __srget_r
00817ce4 g     O .bss	00000004 previous_state3
00817d1c g     O .bss	00000004 __mlocale_changed
00815f88 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00817d34 g     O .bss	00000004 _alt_tick_rate
008005f4 g     F .text	00000248 configurable_tlc_timer_isr
008098fc g     F .text	00000148 __lshift
00817d38 g     O .bss	00000004 _alt_nticks
00810414 g     F .text	000000fc read
00810968 g     F .text	0000009c alt_sys_init
0080384c g     F .text	00000060 _open_r
008138ec g     F .text	00000118 __register_exitproc
008095c4 g     F .text	000001f8 __multiply
00810ed4 g     F .text	00000068 altera_avalon_jtag_uart_close
00817d80 g     O .bss	00000018 timer_vehicle
008142cc g       *ABS*	00000000 __ram_rwdata_start
00813bb8 g       *ABS*	00000000 __ram_rodata_start
00817d40 g     O .bss	00000028 __malloc_current_mallinfo
00809e10 g     F .text	0000014c __d2b
00817cd8 g     O .bss	00000004 current_state2
00817cc8 g     O .bss	00000004 camera_timer_has_started
00815f64 g     O .rwdata	00000002 comma
00810a04 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00813094 g     F .text	000000a4 alt_get_fd
008135a0 g     F .text	00000158 alt_busy_sleep
00806640 g     F .text	00000054 _close_r
00803eac g     F .text	00000018 strtok
00813870 g     F .text	0000007c memcmp
00810ac4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00817ee4 g       *ABS*	00000000 __alt_stack_base
00810b14 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00802c34 g     F .text	000000cc _fwrite_r
008064ec g     F .text	00000154 __swsetup_r
0080db58 g     F .text	000008e8 .hidden __divdf3
008022f8 g     F .text	00000118 __sfp
0080a074 g     F .text	00000078 __copybits
008146f0 g     O .rwdata	00000408 __malloc_av_
00802444 g     F .text	00000004 __sinit_lock_release
0080e698 g     F .text	00000718 .hidden __muldf3
00803cd8 g     F .text	00000054 __sread
00812f8c g     F .text	00000108 alt_find_file
00812d98 g     F .text	000000a4 alt_dev_llist_insert
0081013c g     F .text	00000024 __malloc_lock
00802584 g     F .text	00000028 _fprintf_r
00810574 g     F .text	000000b0 sbrk
0080823c g     F .text	0000005c _fflush_r
0080c194 g     F .text	000000c4 _calloc_r
00815f68 g     O .rwdata	00000004 t1
0080256c g     F .text	00000018 fopen
00817cc4 g       *ABS*	00000000 __bss_start
00803724 g     F .text	00000128 memset
00801d64 g     F .text	0000027c main
00817d30 g     O .bss	00000004 alt_envp
00817d0c g     O .bss	00000004 __malloc_max_total_mem
00810a64 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080c17c g     F .text	00000018 __swbuf
008121b4 g     F .text	00000134 altera_avalon_lcd_16207_init
00803e0c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080800c g     F .text	00000014 fclose
00803f68 g     F .text	00000238 _strtol_r
00806894 g     F .text	00001688 _dtoa_r
00802f18 g     F .text	0000080c _malloc_r
00817cc4 g     O .bss	00000004 timer_has_started
0080c5bc g     F .text	00000030 __ascii_wctomb
00815fb0 g     O .rwdata	00000004 alt_errno
00802aac g     F .text	000000c4 _fwalk
00817ce0 g     O .bss	00000004 current_state3
0080083c g     F .text	00000248 camera_tlc_timer_isr
0080a218 g     F .text	000000c8 putc
0080d0f8 g     F .text	00000084 .hidden __divsi3
00808374 g     F .text	00000124 _malloc_trim_r
00813bb8 g       *ABS*	00000000 __CTOR_END__
0080a918 g     F .text	000000dc strcmp
00813bb8 g       *ABS*	00000000 __flash_rodata_start
00813bb8 g       *ABS*	00000000 __DTOR_LIST__
00817cfc g     O .bss	00000004 count
00817ccc g     O .bss	00000004 mode_request
0080e440 g     F .text	00000088 .hidden __nedf2
00810930 g     F .text	00000038 alt_irq_init
00810510 g     F .text	00000064 alt_release_fd
00802050 g     F .text	00000088 fgetc
00814188 g     O .rodata	00000100 .hidden __clz_tab
00817d18 g     O .bss	00000004 _PathLocale
00813824 g     F .text	00000014 atexit
0080648c g     F .text	00000060 _write_r
00808d70 g     F .text	00000018 setlocale
00815f84 g     O .rwdata	00000004 _impure_ptr
00817d28 g     O .bss	00000004 alt_argc
00808020 g     F .text	0000021c __sflush_r
00812e9c g     F .text	00000060 _do_dtors
00808d5c g     F .text	00000008 __locale_cjk_lang
008025d0 g     F .text	00000004 _fseek_r
00803a28 g     F .text	000001d4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00809ca0 g     F .text	00000064 __ulp
00802460 g     F .text	00000018 __fp_unlock_all
008122e8 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00815f9c g     O .rwdata	00000008 alt_fs_list
00817cec g     O .bss	00000004 previous_state4
00800290 g     F .text	00000080 reset_volatiles
00800020 g       *ABS*	00000000 __ram_exceptions_start
00808d88 g     F .text	0000000c localeconv
00815f7c g     O .rwdata	00000004 t6
0081316c g     F .text	00000050 alt_ic_isr_register
00802d00 g     F .text	00000034 fwrite
00815fc8 g       *ABS*	00000000 _edata
0081243c g     F .text	00000060 altera_avalon_uart_read_fd
00800b00 g     F .text	0000020c button_interrupt
00817ee4 g       *ABS*	00000000 _end
00817d98 g     O .bss	00000018 timer_camera
00800310 g     F .text	00000090 simple_tlc_timer_isr
0080c258 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
00810f3c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00813244 g     F .text	0000008c alt_ic_irq_disable
00803d34 g     F .text	0000007c __swrite
00815f8c g     O .rwdata	00000004 __malloc_trim_threshold
00808d50 g     F .text	0000000c __locale_msgcharset
00813838 g     F .text	00000038 exit
00802b70 g     F .text	000000c4 _fwalk_reent
00809aa4 g     F .text	000001fc __mdiff
00800d8c g     F .text	000001ec simple_tlc
0080d17c g     F .text	00000074 .hidden __modsi3
00815f90 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00817d04 g     O .bss	00000004 uart
0080243c g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00813da6 g     O .rodata	00000101 _ctype_
008128c0 g     F .text	00000054 altera_avalon_uart_close
00802478 g     F .text	000000f4 _fopen_r
00813b84 g     F .text	00000034 _exit
0080f914 g     F .text	0000012c alt_alarm_start
00802d34 g     F .text	000001bc __smakebuf_r
00817db0 g     O .bss	00000032 config_values
00803e14 g     F .text	00000098 strlen
00810284 g     F .text	00000154 open
0080e4c8 g     F .text	000000dc .hidden __gedf2
00817cd0 g     O .bss	00000004 current_state1
00815f98 g     O .rwdata	00000004 __wctomb
0080aaf0 g     F .text	00000018 __sprint_r
00813138 g     F .text	00000034 alt_icache_flush_all
00815fb4 g     O .rwdata	00000004 alt_priority_mask
008131bc g     F .text	00000088 alt_ic_irq_enable
008063b4 g     F .text	0000001c __vfprintf_internal
00812950 g     F .text	000001dc altera_avalon_uart_read
0080c5ec g     F .text	0000005c _wctomb_r
00817cdc g     O .bss	00000004 previous_state2
0080edb0 g     F .text	000008fc .hidden __subdf3
008094d8 g     F .text	000000b0 __lo0bits
00815fbc g     O .rwdata	00000008 alt_alarm_list
00812e3c g     F .text	00000060 _do_ctors
0080c4fc g     F .text	000000c0 wcrtomb
0080fa7c g     F .text	000000d0 close
0080ff2c g     F .text	00000084 alt_load
0080c3e0 g     F .text	00000080 fputwc
00802f04 g     F .text	00000014 free
00802440 g     F .text	00000004 __sinit_lock_acquire
0080924c g     F .text	00000120 __multadd
00809224 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff780004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	109f7904 	addi	r2,r2,32228
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	109f7904 	addi	r2,r2,32228
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff78012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff780120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a77817 	ldw	r2,-25120(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a77817 	ldw	r2,-25120(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff780248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6b7d714 	ori	gp,gp,57180
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	109f3114 	ori	r2,r2,31940

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18dfb914 	ori	r3,r3,32484

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff780278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080ff2c0 	call	80ff2c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	08100c00 	call	8100c0 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff78028c>

00800290 <reset_volatiles>:
volatile unsigned int t4 = rrrr;
volatile unsigned int t5 = grrg;
volatile unsigned int t6 = yrry;

//helper function to reset volatile variables on mode change
void reset_volatiles(){
  800290:	deffff04 	addi	sp,sp,-4
  800294:	df000015 	stw	fp,0(sp)
  800298:	d839883a 	mov	fp,sp
	current_state1 = 0;
  80029c:	d0275d15 	stw	zero,-25228(gp)
	current_state2 = 0;
  8002a0:	d0275f15 	stw	zero,-25220(gp)
	current_state3 = 0;
  8002a4:	d0276115 	stw	zero,-25212(gp)
	current_state4 = 0;
  8002a8:	d0276315 	stw	zero,-25204(gp)
	previous_state1 = 0;
  8002ac:	d0275e15 	stw	zero,-25224(gp)
	previous_state2 = 0;
  8002b0:	d0276015 	stw	zero,-25216(gp)
	previous_state3 = 0;
  8002b4:	d0276215 	stw	zero,-25208(gp)
	previous_state4 = 0;
  8002b8:	d0276415 	stw	zero,-25200(gp)
	pedNS = 0;
  8002bc:	d0276515 	stw	zero,-25196(gp)
	pedEW = 0;
  8002c0:	d0276615 	stw	zero,-25192(gp)
	vehicle_cross = 0;
  8002c4:	d0276715 	stw	zero,-25188(gp)
	count = 0;
  8002c8:	d0276815 	stw	zero,-25184(gp)
	t1 = rrrr;
  8002cc:	00807d04 	movi	r2,500
  8002d0:	d0a00315 	stw	r2,-32756(gp)
	t2 = grrg;
  8002d4:	0085dc04 	movi	r2,6000
  8002d8:	d0a00415 	stw	r2,-32752(gp)
	t3 = yrry;
  8002dc:	0081f404 	movi	r2,2000
  8002e0:	d0a00515 	stw	r2,-32748(gp)
	t4 = rrrr;
  8002e4:	00807d04 	movi	r2,500
  8002e8:	d0a00615 	stw	r2,-32744(gp)
	t5 = grrg;
  8002ec:	0085dc04 	movi	r2,6000
  8002f0:	d0a00715 	stw	r2,-32740(gp)
	t6 = yrry;
  8002f4:	0081f404 	movi	r2,2000
  8002f8:	d0a00815 	stw	r2,-32736(gp)
}
  8002fc:	0001883a 	nop
  800300:	e037883a 	mov	sp,fp
  800304:	df000017 	ldw	fp,0(sp)
  800308:	dec00104 	addi	sp,sp,4
  80030c:	f800283a 	ret

00800310 <simple_tlc_timer_isr>:

alt_u32 simple_tlc_timer_isr(void* context){
  800310:	defffd04 	addi	sp,sp,-12
  800314:	dfc00215 	stw	ra,8(sp)
  800318:	df000115 	stw	fp,4(sp)
  80031c:	df000104 	addi	fp,sp,4
  800320:	e13fff15 	stw	r4,-4(fp)
	//if there is a pending mode request and we are in a safe state, do not run any output logic and kill the timer
	if (mode_request != current_mode){
  800324:	d0e75c17 	ldw	r3,-25232(gp)
  800328:	d0a00017 	ldw	r2,-32768(gp)
  80032c:	18800726 	beq	r3,r2,80034c <simple_tlc_timer_isr+0x3c>
		if ((current_state1 == rr1_1) || (current_state1 == rr2_1))
  800330:	d0a75d17 	ldw	r2,-25228(gp)
  800334:	10000326 	beq	r2,zero,800344 <simple_tlc_timer_isr+0x34>
  800338:	d0a75d17 	ldw	r2,-25228(gp)
  80033c:	108000d8 	cmpnei	r2,r2,3
  800340:	1000021e 	bne	r2,zero,80034c <simple_tlc_timer_isr+0x3c>
			return 0;
  800344:	0005883a 	mov	r2,zero
  800348:	00001006 	br	80038c <simple_tlc_timer_isr+0x7c>
	}

	previous_state1 = current_state1; //save previous state for output transition logic
  80034c:	d0a75d17 	ldw	r2,-25228(gp)
  800350:	d0a75e15 	stw	r2,-25224(gp)
	current_state1++; //move to the next state
  800354:	d0a75d17 	ldw	r2,-25228(gp)
  800358:	10800044 	addi	r2,r2,1
  80035c:	d0a75d15 	stw	r2,-25228(gp)
	if (current_state1 == buffer_1) //if at final state, loop back to initial state using a buffer state
  800360:	d0a75d17 	ldw	r2,-25228(gp)
  800364:	10800198 	cmpnei	r2,r2,6
  800368:	1000011e 	bne	r2,zero,800370 <simple_tlc_timer_isr+0x60>
		current_state1 = rr1_1;
  80036c:	d0275d15 	stw	zero,-25228(gp)
	printf("current state simple_timer %d\n", current_state1);
  800370:	d0a75d17 	ldw	r2,-25228(gp)
  800374:	100b883a 	mov	r5,r2
  800378:	01002074 	movhi	r4,129
  80037c:	210eee04 	addi	r4,r4,15288
  800380:	08038dc0 	call	8038dc <printf>
	timer_has_started = 0; //reset timer_started flag
  800384:	d0275a15 	stw	zero,-25240(gp)
	return 0;
  800388:	0005883a 	mov	r2,zero
}
  80038c:	e037883a 	mov	sp,fp
  800390:	dfc00117 	ldw	ra,4(sp)
  800394:	df000017 	ldw	fp,0(sp)
  800398:	dec00204 	addi	sp,sp,8
  80039c:	f800283a 	ret

008003a0 <pedestrian_tlc_timer_isr>:

alt_u32 pedestrian_tlc_timer_isr(void* context){
  8003a0:	defffd04 	addi	sp,sp,-12
  8003a4:	dfc00215 	stw	ra,8(sp)
  8003a8:	df000115 	stw	fp,4(sp)
  8003ac:	df000104 	addi	fp,sp,4
  8003b0:	e13fff15 	stw	r4,-4(fp)
	//if there is a pending mode request and we are in a safe state, do not run any output logic and kill the timer
	if (mode_request != current_mode){
  8003b4:	d0e75c17 	ldw	r3,-25232(gp)
  8003b8:	d0a00017 	ldw	r2,-32768(gp)
  8003bc:	18800a26 	beq	r3,r2,8003e8 <pedestrian_tlc_timer_isr+0x48>
		if ((current_state2 == rr1_2) | (current_state2 == rr2_2))
  8003c0:	d0a75f17 	ldw	r2,-25220(gp)
  8003c4:	1005003a 	cmpeq	r2,r2,zero
  8003c8:	1007883a 	mov	r3,r2
  8003cc:	d0a75f17 	ldw	r2,-25220(gp)
  8003d0:	10800120 	cmpeqi	r2,r2,4
  8003d4:	1884b03a 	or	r2,r3,r2
  8003d8:	10803fcc 	andi	r2,r2,255
  8003dc:	10000226 	beq	r2,zero,8003e8 <pedestrian_tlc_timer_isr+0x48>
			return 0;
  8003e0:	0005883a 	mov	r2,zero
  8003e4:	00007e06 	br	8005e0 <pedestrian_tlc_timer_isr+0x240>
	}

	previous_state2 = current_state2; //save previous state for output transition logic
  8003e8:	d0a75f17 	ldw	r2,-25220(gp)
  8003ec:	d0a76015 	stw	r2,-25216(gp)
	if ((pedEW) && (pedNS)){
  8003f0:	d0a76617 	ldw	r2,-25192(gp)
  8003f4:	10002026 	beq	r2,zero,800478 <pedestrian_tlc_timer_isr+0xd8>
  8003f8:	d0a76517 	ldw	r2,-25196(gp)
  8003fc:	10001e26 	beq	r2,zero,800478 <pedestrian_tlc_timer_isr+0xd8>
		//handle pedestrians at either of the RED-RED states because
		if ((current_state2 == rr1_2) | (current_state2 == rr2_2))
  800400:	d0a75f17 	ldw	r2,-25220(gp)
  800404:	1005003a 	cmpeq	r2,r2,zero
  800408:	1007883a 	mov	r3,r2
  80040c:	d0a75f17 	ldw	r2,-25220(gp)
  800410:	10800120 	cmpeqi	r2,r2,4
  800414:	1884b03a 	or	r2,r3,r2
  800418:	10803fcc 	andi	r2,r2,255
  80041c:	10000426 	beq	r2,zero,800430 <pedestrian_tlc_timer_isr+0x90>
			current_state2 += 2;
  800420:	d0a75f17 	ldw	r2,-25220(gp)
  800424:	10800084 	addi	r2,r2,2
  800428:	d0a75f15 	stw	r2,-25220(gp)
	}

	previous_state2 = current_state2; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state2 == rr1_2) | (current_state2 == rr2_2))
  80042c:	00005806 	br	800590 <pedestrian_tlc_timer_isr+0x1f0>
			current_state2 += 2;
		//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
		else if (current_state2 == gr_2)
  800430:	d0a75f17 	ldw	r2,-25220(gp)
  800434:	10800058 	cmpnei	r2,r2,1
  800438:	1000041e 	bne	r2,zero,80044c <pedestrian_tlc_timer_isr+0xac>
			current_state2 += 2;
  80043c:	d0a75f17 	ldw	r2,-25220(gp)
  800440:	10800084 	addi	r2,r2,2
  800444:	d0a75f15 	stw	r2,-25220(gp)
	}

	previous_state2 = current_state2; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state2 == rr1_2) | (current_state2 == rr2_2))
  800448:	00005106 	br	800590 <pedestrian_tlc_timer_isr+0x1f0>
			current_state2 += 2;
		//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
		else if (current_state2 == gr_2)
			current_state2 += 2;
		//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
		else if (current_state2 == rg_2)
  80044c:	d0a75f17 	ldw	r2,-25220(gp)
  800450:	10800158 	cmpnei	r2,r2,5
  800454:	1000041e 	bne	r2,zero,800468 <pedestrian_tlc_timer_isr+0xc8>
			current_state2 += 2;
  800458:	d0a75f17 	ldw	r2,-25220(gp)
  80045c:	10800084 	addi	r2,r2,2
  800460:	d0a75f15 	stw	r2,-25220(gp)
	}

	previous_state2 = current_state2; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state2 == rr1_2) | (current_state2 == rr2_2))
  800464:	00004a06 	br	800590 <pedestrian_tlc_timer_isr+0x1f0>
			current_state2 += 2;
		//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
		else if (current_state2 == rg_2)
			current_state2 += 2;
		else
			current_state2++;
  800468:	d0a75f17 	ldw	r2,-25220(gp)
  80046c:	10800044 	addi	r2,r2,1
  800470:	d0a75f15 	stw	r2,-25220(gp)
	}

	previous_state2 = current_state2; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state2 == rr1_2) | (current_state2 == rr2_2))
  800474:	00004606 	br	800590 <pedestrian_tlc_timer_isr+0x1f0>
		else if (current_state2 == rg_2)
			current_state2 += 2;
		else
			current_state2++;
	}
	else if (pedNS){
  800478:	d0a76517 	ldw	r2,-25196(gp)
  80047c:	10001826 	beq	r2,zero,8004e0 <pedestrian_tlc_timer_isr+0x140>
		//we are at state RED-RED (1), handle NS pedestrians
		if (current_state2 == rr1_2)
  800480:	d0a75f17 	ldw	r2,-25220(gp)
  800484:	1000041e 	bne	r2,zero,800498 <pedestrian_tlc_timer_isr+0xf8>
			current_state2 += 2;
  800488:	d0a75f17 	ldw	r2,-25220(gp)
  80048c:	10800084 	addi	r2,r2,2
  800490:	d0a75f15 	stw	r2,-25220(gp)
  800494:	00003e06 	br	800590 <pedestrian_tlc_timer_isr+0x1f0>
		//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
		else if (current_state2 == gr_2)
  800498:	d0a75f17 	ldw	r2,-25220(gp)
  80049c:	10800058 	cmpnei	r2,r2,1
  8004a0:	1000041e 	bne	r2,zero,8004b4 <pedestrian_tlc_timer_isr+0x114>
			current_state2 += 2;
  8004a4:	d0a75f17 	ldw	r2,-25220(gp)
  8004a8:	10800084 	addi	r2,r2,2
  8004ac:	d0a75f15 	stw	r2,-25220(gp)
  8004b0:	00003706 	br	800590 <pedestrian_tlc_timer_isr+0x1f0>
		//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
		else if (current_state2 == rg_2)
  8004b4:	d0a75f17 	ldw	r2,-25220(gp)
  8004b8:	10800158 	cmpnei	r2,r2,5
  8004bc:	1000041e 	bne	r2,zero,8004d0 <pedestrian_tlc_timer_isr+0x130>
			current_state2 += 2;
  8004c0:	d0a75f17 	ldw	r2,-25220(gp)
  8004c4:	10800084 	addi	r2,r2,2
  8004c8:	d0a75f15 	stw	r2,-25220(gp)
  8004cc:	00003006 	br	800590 <pedestrian_tlc_timer_isr+0x1f0>
		else
			current_state2++;
  8004d0:	d0a75f17 	ldw	r2,-25220(gp)
  8004d4:	10800044 	addi	r2,r2,1
  8004d8:	d0a75f15 	stw	r2,-25220(gp)
  8004dc:	00002c06 	br	800590 <pedestrian_tlc_timer_isr+0x1f0>
	}
	else if (pedEW){
  8004e0:	d0a76617 	ldw	r2,-25192(gp)
  8004e4:	10001926 	beq	r2,zero,80054c <pedestrian_tlc_timer_isr+0x1ac>
		//we are at state RED-RED (2), handle EW pedestrians
		if (current_state2 == rr2_2)
  8004e8:	d0a75f17 	ldw	r2,-25220(gp)
  8004ec:	10800118 	cmpnei	r2,r2,4
  8004f0:	1000041e 	bne	r2,zero,800504 <pedestrian_tlc_timer_isr+0x164>
			current_state2 += 2;
  8004f4:	d0a75f17 	ldw	r2,-25220(gp)
  8004f8:	10800084 	addi	r2,r2,2
  8004fc:	d0a75f15 	stw	r2,-25220(gp)
  800500:	00002306 	br	800590 <pedestrian_tlc_timer_isr+0x1f0>
		//we are at state RED-GREEN, too late to handle EW pedestrians so skip past PED state
		else if (current_state2 == rg_2)
  800504:	d0a75f17 	ldw	r2,-25220(gp)
  800508:	10800158 	cmpnei	r2,r2,5
  80050c:	1000041e 	bne	r2,zero,800520 <pedestrian_tlc_timer_isr+0x180>
			current_state2 += 2;
  800510:	d0a75f17 	ldw	r2,-25220(gp)
  800514:	10800084 	addi	r2,r2,2
  800518:	d0a75f15 	stw	r2,-25220(gp)
  80051c:	00001c06 	br	800590 <pedestrian_tlc_timer_isr+0x1f0>
		//we are at state GREEN-RED, cannot handle EW pedestrians here so skip past PED state
		else if (current_state2 == gr_2)
  800520:	d0a75f17 	ldw	r2,-25220(gp)
  800524:	10800058 	cmpnei	r2,r2,1
  800528:	1000041e 	bne	r2,zero,80053c <pedestrian_tlc_timer_isr+0x19c>
			current_state2 += 2;
  80052c:	d0a75f17 	ldw	r2,-25220(gp)
  800530:	10800084 	addi	r2,r2,2
  800534:	d0a75f15 	stw	r2,-25220(gp)
  800538:	00001506 	br	800590 <pedestrian_tlc_timer_isr+0x1f0>
		else
			current_state2++;
  80053c:	d0a75f17 	ldw	r2,-25220(gp)
  800540:	10800044 	addi	r2,r2,1
  800544:	d0a75f15 	stw	r2,-25220(gp)
  800548:	00001106 	br	800590 <pedestrian_tlc_timer_isr+0x1f0>
	}
	//if no PED interrupt flags, skip past PED states from GREEN-RED and RED-GREEN
	else if (current_state2 == gr_2)
  80054c:	d0a75f17 	ldw	r2,-25220(gp)
  800550:	10800058 	cmpnei	r2,r2,1
  800554:	1000041e 	bne	r2,zero,800568 <pedestrian_tlc_timer_isr+0x1c8>
		current_state2 += 2;
  800558:	d0a75f17 	ldw	r2,-25220(gp)
  80055c:	10800084 	addi	r2,r2,2
  800560:	d0a75f15 	stw	r2,-25220(gp)
  800564:	00000a06 	br	800590 <pedestrian_tlc_timer_isr+0x1f0>
	else if (current_state2 == rg_2)
  800568:	d0a75f17 	ldw	r2,-25220(gp)
  80056c:	10800158 	cmpnei	r2,r2,5
  800570:	1000041e 	bne	r2,zero,800584 <pedestrian_tlc_timer_isr+0x1e4>
		current_state2 += 2;
  800574:	d0a75f17 	ldw	r2,-25220(gp)
  800578:	10800084 	addi	r2,r2,2
  80057c:	d0a75f15 	stw	r2,-25220(gp)
  800580:	00000306 	br	800590 <pedestrian_tlc_timer_isr+0x1f0>
	else
		current_state2++; //move to the next state if no special condition has been met
  800584:	d0a75f17 	ldw	r2,-25220(gp)
  800588:	10800044 	addi	r2,r2,1
  80058c:	d0a75f15 	stw	r2,-25220(gp)

	//reset the NS/EW pedestrian button interrupt flag when we have changed state (NS/EWHandled = 1)
	if (previous_state2 == grp1_2)
  800590:	d0a76017 	ldw	r2,-25216(gp)
  800594:	10800098 	cmpnei	r2,r2,2
  800598:	1000021e 	bne	r2,zero,8005a4 <pedestrian_tlc_timer_isr+0x204>
		pedNS = 0;
  80059c:	d0276515 	stw	zero,-25196(gp)
  8005a0:	00000406 	br	8005b4 <pedestrian_tlc_timer_isr+0x214>
	else if (previous_state2 == rgp2_2)
  8005a4:	d0a76017 	ldw	r2,-25216(gp)
  8005a8:	10800198 	cmpnei	r2,r2,6
  8005ac:	1000011e 	bne	r2,zero,8005b4 <pedestrian_tlc_timer_isr+0x214>
		pedEW = 0;
  8005b0:	d0276615 	stw	zero,-25192(gp)

	if (current_state2 == buffer_2) //if at final state, loop back to initial state using buffer state
  8005b4:	d0a75f17 	ldw	r2,-25220(gp)
  8005b8:	10800218 	cmpnei	r2,r2,8
  8005bc:	1000011e 	bne	r2,zero,8005c4 <pedestrian_tlc_timer_isr+0x224>
		current_state2 = rr1_2;
  8005c0:	d0275f15 	stw	zero,-25220(gp)
	printf("current state ped_timer %d\n", current_state2);
  8005c4:	d0a75f17 	ldw	r2,-25220(gp)
  8005c8:	100b883a 	mov	r5,r2
  8005cc:	01002074 	movhi	r4,129
  8005d0:	210ef604 	addi	r4,r4,15320
  8005d4:	08038dc0 	call	8038dc <printf>

	timer_has_started = 0; //reset timer_started flag
  8005d8:	d0275a15 	stw	zero,-25240(gp)
return 0;
  8005dc:	0005883a 	mov	r2,zero
}
  8005e0:	e037883a 	mov	sp,fp
  8005e4:	dfc00117 	ldw	ra,4(sp)
  8005e8:	df000017 	ldw	fp,0(sp)
  8005ec:	dec00204 	addi	sp,sp,8
  8005f0:	f800283a 	ret

008005f4 <configurable_tlc_timer_isr>:

//timer ISR (and system state transition logic) for configurable timer
alt_u32 configurable_tlc_timer_isr(void* context){
  8005f4:	defffd04 	addi	sp,sp,-12
  8005f8:	dfc00215 	stw	ra,8(sp)
  8005fc:	df000115 	stw	fp,4(sp)
  800600:	df000104 	addi	fp,sp,4
  800604:	e13fff15 	stw	r4,-4(fp)
	//if there is a pending mode request and we are in a safe state, do not run any output logic and kill the timer
	if (mode_request != current_mode){
  800608:	d0e75c17 	ldw	r3,-25232(gp)
  80060c:	d0a00017 	ldw	r2,-32768(gp)
  800610:	18800726 	beq	r3,r2,800630 <configurable_tlc_timer_isr+0x3c>
		if ((current_state3 == rr1_3) || (current_state3 == rr2_3))
  800614:	d0a76117 	ldw	r2,-25212(gp)
  800618:	10000326 	beq	r2,zero,800628 <configurable_tlc_timer_isr+0x34>
  80061c:	d0a76117 	ldw	r2,-25212(gp)
  800620:	10800118 	cmpnei	r2,r2,4
  800624:	1000021e 	bne	r2,zero,800630 <configurable_tlc_timer_isr+0x3c>
			return 0;
  800628:	0005883a 	mov	r2,zero
  80062c:	00007e06 	br	800828 <configurable_tlc_timer_isr+0x234>
	}

	previous_state3 = current_state3; //save previous state for output transition logic
  800630:	d0a76117 	ldw	r2,-25212(gp)
  800634:	d0a76215 	stw	r2,-25208(gp)
	if ((pedEW) && (pedNS)){
  800638:	d0a76617 	ldw	r2,-25192(gp)
  80063c:	10002026 	beq	r2,zero,8006c0 <configurable_tlc_timer_isr+0xcc>
  800640:	d0a76517 	ldw	r2,-25196(gp)
  800644:	10001e26 	beq	r2,zero,8006c0 <configurable_tlc_timer_isr+0xcc>
		//handle pedestrians at either of the RED-RED states because
		if ((current_state3 == rr1_3) | (current_state3 == rr2_3))
  800648:	d0a76117 	ldw	r2,-25212(gp)
  80064c:	1005003a 	cmpeq	r2,r2,zero
  800650:	1007883a 	mov	r3,r2
  800654:	d0a76117 	ldw	r2,-25212(gp)
  800658:	10800120 	cmpeqi	r2,r2,4
  80065c:	1884b03a 	or	r2,r3,r2
  800660:	10803fcc 	andi	r2,r2,255
  800664:	10000426 	beq	r2,zero,800678 <configurable_tlc_timer_isr+0x84>
			current_state3 += 2;
  800668:	d0a76117 	ldw	r2,-25212(gp)
  80066c:	10800084 	addi	r2,r2,2
  800670:	d0a76115 	stw	r2,-25212(gp)
	}

	previous_state3 = current_state3; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state3 == rr1_3) | (current_state3 == rr2_3))
  800674:	00005806 	br	8007d8 <configurable_tlc_timer_isr+0x1e4>
			current_state3 += 2;
		//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
		else if (current_state3 == gr_3)
  800678:	d0a76117 	ldw	r2,-25212(gp)
  80067c:	10800058 	cmpnei	r2,r2,1
  800680:	1000041e 	bne	r2,zero,800694 <configurable_tlc_timer_isr+0xa0>
			current_state3 += 2;
  800684:	d0a76117 	ldw	r2,-25212(gp)
  800688:	10800084 	addi	r2,r2,2
  80068c:	d0a76115 	stw	r2,-25212(gp)
	}

	previous_state3 = current_state3; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state3 == rr1_3) | (current_state3 == rr2_3))
  800690:	00005106 	br	8007d8 <configurable_tlc_timer_isr+0x1e4>
			current_state3 += 2;
		//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
		else if (current_state3 == gr_3)
			current_state3 += 2;
		//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
		else if (current_state3 == rg_3)
  800694:	d0a76117 	ldw	r2,-25212(gp)
  800698:	10800158 	cmpnei	r2,r2,5
  80069c:	1000041e 	bne	r2,zero,8006b0 <configurable_tlc_timer_isr+0xbc>
			current_state3 += 2;
  8006a0:	d0a76117 	ldw	r2,-25212(gp)
  8006a4:	10800084 	addi	r2,r2,2
  8006a8:	d0a76115 	stw	r2,-25212(gp)
	}

	previous_state3 = current_state3; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state3 == rr1_3) | (current_state3 == rr2_3))
  8006ac:	00004a06 	br	8007d8 <configurable_tlc_timer_isr+0x1e4>
			current_state3 += 2;
		//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
		else if (current_state3 == rg_3)
			current_state3 += 2;
		else
			current_state3++;
  8006b0:	d0a76117 	ldw	r2,-25212(gp)
  8006b4:	10800044 	addi	r2,r2,1
  8006b8:	d0a76115 	stw	r2,-25212(gp)
	}

	previous_state3 = current_state3; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state3 == rr1_3) | (current_state3 == rr2_3))
  8006bc:	00004606 	br	8007d8 <configurable_tlc_timer_isr+0x1e4>
		else if (current_state3 == rg_3)
			current_state3 += 2;
		else
			current_state3++;
	}
	else if (pedNS){
  8006c0:	d0a76517 	ldw	r2,-25196(gp)
  8006c4:	10001826 	beq	r2,zero,800728 <configurable_tlc_timer_isr+0x134>
		//we are at state RED-RED (1), handle NS pedestrians
		if (current_state3 == rr1_3)
  8006c8:	d0a76117 	ldw	r2,-25212(gp)
  8006cc:	1000041e 	bne	r2,zero,8006e0 <configurable_tlc_timer_isr+0xec>
			current_state3 += 2;
  8006d0:	d0a76117 	ldw	r2,-25212(gp)
  8006d4:	10800084 	addi	r2,r2,2
  8006d8:	d0a76115 	stw	r2,-25212(gp)
  8006dc:	00003e06 	br	8007d8 <configurable_tlc_timer_isr+0x1e4>
		//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
		else if (current_state3 == gr_3)
  8006e0:	d0a76117 	ldw	r2,-25212(gp)
  8006e4:	10800058 	cmpnei	r2,r2,1
  8006e8:	1000041e 	bne	r2,zero,8006fc <configurable_tlc_timer_isr+0x108>
			current_state3 += 2;
  8006ec:	d0a76117 	ldw	r2,-25212(gp)
  8006f0:	10800084 	addi	r2,r2,2
  8006f4:	d0a76115 	stw	r2,-25212(gp)
  8006f8:	00003706 	br	8007d8 <configurable_tlc_timer_isr+0x1e4>
		//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
		else if (current_state3 == rg_3)
  8006fc:	d0a76117 	ldw	r2,-25212(gp)
  800700:	10800158 	cmpnei	r2,r2,5
  800704:	1000041e 	bne	r2,zero,800718 <configurable_tlc_timer_isr+0x124>
			current_state3 += 2;
  800708:	d0a76117 	ldw	r2,-25212(gp)
  80070c:	10800084 	addi	r2,r2,2
  800710:	d0a76115 	stw	r2,-25212(gp)
  800714:	00003006 	br	8007d8 <configurable_tlc_timer_isr+0x1e4>
		else
			current_state3++;
  800718:	d0a76117 	ldw	r2,-25212(gp)
  80071c:	10800044 	addi	r2,r2,1
  800720:	d0a76115 	stw	r2,-25212(gp)
  800724:	00002c06 	br	8007d8 <configurable_tlc_timer_isr+0x1e4>
	}
	else if (pedEW){
  800728:	d0a76617 	ldw	r2,-25192(gp)
  80072c:	10001926 	beq	r2,zero,800794 <configurable_tlc_timer_isr+0x1a0>
		//we are at state RED-RED (2), handle EW pedestrians
		if (current_state3 == rr2_3)
  800730:	d0a76117 	ldw	r2,-25212(gp)
  800734:	10800118 	cmpnei	r2,r2,4
  800738:	1000041e 	bne	r2,zero,80074c <configurable_tlc_timer_isr+0x158>
			current_state3 += 2;
  80073c:	d0a76117 	ldw	r2,-25212(gp)
  800740:	10800084 	addi	r2,r2,2
  800744:	d0a76115 	stw	r2,-25212(gp)
  800748:	00002306 	br	8007d8 <configurable_tlc_timer_isr+0x1e4>
		//we are at state RED-GREEN, too late to handle EW pedestrians so skip past PED state
		else if (current_state3 == rg_3)
  80074c:	d0a76117 	ldw	r2,-25212(gp)
  800750:	10800158 	cmpnei	r2,r2,5
  800754:	1000041e 	bne	r2,zero,800768 <configurable_tlc_timer_isr+0x174>
			current_state3 += 2;
  800758:	d0a76117 	ldw	r2,-25212(gp)
  80075c:	10800084 	addi	r2,r2,2
  800760:	d0a76115 	stw	r2,-25212(gp)
  800764:	00001c06 	br	8007d8 <configurable_tlc_timer_isr+0x1e4>
		//we are at state GREEN-RED, cannot handle EW pedestrians here so skip past PED state
		else if (current_state3 == gr_3)
  800768:	d0a76117 	ldw	r2,-25212(gp)
  80076c:	10800058 	cmpnei	r2,r2,1
  800770:	1000041e 	bne	r2,zero,800784 <configurable_tlc_timer_isr+0x190>
			current_state3 += 2;
  800774:	d0a76117 	ldw	r2,-25212(gp)
  800778:	10800084 	addi	r2,r2,2
  80077c:	d0a76115 	stw	r2,-25212(gp)
  800780:	00001506 	br	8007d8 <configurable_tlc_timer_isr+0x1e4>
		else
			current_state3++;
  800784:	d0a76117 	ldw	r2,-25212(gp)
  800788:	10800044 	addi	r2,r2,1
  80078c:	d0a76115 	stw	r2,-25212(gp)
  800790:	00001106 	br	8007d8 <configurable_tlc_timer_isr+0x1e4>
	}
	//if no PED interrupt flags, skip past PED states from GREEN-RED and RED-GREEN
	else if (current_state3 == gr_3)
  800794:	d0a76117 	ldw	r2,-25212(gp)
  800798:	10800058 	cmpnei	r2,r2,1
  80079c:	1000041e 	bne	r2,zero,8007b0 <configurable_tlc_timer_isr+0x1bc>
		current_state3 += 2;
  8007a0:	d0a76117 	ldw	r2,-25212(gp)
  8007a4:	10800084 	addi	r2,r2,2
  8007a8:	d0a76115 	stw	r2,-25212(gp)
  8007ac:	00000a06 	br	8007d8 <configurable_tlc_timer_isr+0x1e4>
	else if (current_state3 == rg_3)
  8007b0:	d0a76117 	ldw	r2,-25212(gp)
  8007b4:	10800158 	cmpnei	r2,r2,5
  8007b8:	1000041e 	bne	r2,zero,8007cc <configurable_tlc_timer_isr+0x1d8>
		current_state3 += 2;
  8007bc:	d0a76117 	ldw	r2,-25212(gp)
  8007c0:	10800084 	addi	r2,r2,2
  8007c4:	d0a76115 	stw	r2,-25212(gp)
  8007c8:	00000306 	br	8007d8 <configurable_tlc_timer_isr+0x1e4>
	else
		current_state3++; //move to the next state if no
  8007cc:	d0a76117 	ldw	r2,-25212(gp)
  8007d0:	10800044 	addi	r2,r2,1
  8007d4:	d0a76115 	stw	r2,-25212(gp)

	//reset the NS/EW pedestrian button interrupt flag when we have changed state (NS/EWHandled = 1)
	if (previous_state3 == grp1_3)
  8007d8:	d0a76217 	ldw	r2,-25208(gp)
  8007dc:	10800098 	cmpnei	r2,r2,2
  8007e0:	1000021e 	bne	r2,zero,8007ec <configurable_tlc_timer_isr+0x1f8>
		pedNS = 0;
  8007e4:	d0276515 	stw	zero,-25196(gp)
  8007e8:	00000406 	br	8007fc <configurable_tlc_timer_isr+0x208>
	else if (previous_state3 == rgp2_3)
  8007ec:	d0a76217 	ldw	r2,-25208(gp)
  8007f0:	10800198 	cmpnei	r2,r2,6
  8007f4:	1000011e 	bne	r2,zero,8007fc <configurable_tlc_timer_isr+0x208>
		pedEW = 0;
  8007f8:	d0276615 	stw	zero,-25192(gp)

	if (current_state3 == buffer_3) //if at final state, loop back to initial state using buffer state
  8007fc:	d0a76117 	ldw	r2,-25212(gp)
  800800:	10800218 	cmpnei	r2,r2,8
  800804:	1000011e 	bne	r2,zero,80080c <configurable_tlc_timer_isr+0x218>
		current_state3 = rr1_3;
  800808:	d0276115 	stw	zero,-25212(gp)
	printf("current state config_timer %d\n", current_state3);
  80080c:	d0a76117 	ldw	r2,-25212(gp)
  800810:	100b883a 	mov	r5,r2
  800814:	01002074 	movhi	r4,129
  800818:	210efd04 	addi	r4,r4,15348
  80081c:	08038dc0 	call	8038dc <printf>

	timer_has_started = 0; //reset timer_started flag
  800820:	d0275a15 	stw	zero,-25240(gp)
return 0;
  800824:	0005883a 	mov	r2,zero
}
  800828:	e037883a 	mov	sp,fp
  80082c:	dfc00117 	ldw	ra,4(sp)
  800830:	df000017 	ldw	fp,0(sp)
  800834:	dec00204 	addi	sp,sp,8
  800838:	f800283a 	ret

0080083c <camera_tlc_timer_isr>:

//timer ISR (and system state transition logic) for configurable timer
alt_u32 camera_tlc_timer_isr(void* context){
  80083c:	defffd04 	addi	sp,sp,-12
  800840:	dfc00215 	stw	ra,8(sp)
  800844:	df000115 	stw	fp,4(sp)
  800848:	df000104 	addi	fp,sp,4
  80084c:	e13fff15 	stw	r4,-4(fp)
	//if there is a pending mode request and we are in a safe state, do not run any output logic and kill the timer
	if (mode_request != current_mode){
  800850:	d0e75c17 	ldw	r3,-25232(gp)
  800854:	d0a00017 	ldw	r2,-32768(gp)
  800858:	18800726 	beq	r3,r2,800878 <camera_tlc_timer_isr+0x3c>
		if ((current_state4 == rr1_4) || (current_state4 == rr2_4))
  80085c:	d0a76317 	ldw	r2,-25204(gp)
  800860:	10000326 	beq	r2,zero,800870 <camera_tlc_timer_isr+0x34>
  800864:	d0a76317 	ldw	r2,-25204(gp)
  800868:	10800118 	cmpnei	r2,r2,4
  80086c:	1000021e 	bne	r2,zero,800878 <camera_tlc_timer_isr+0x3c>
			return 0;
  800870:	0005883a 	mov	r2,zero
  800874:	00007e06 	br	800a70 <camera_tlc_timer_isr+0x234>
	}

	previous_state4 = current_state4; //save previous state for output transition logic
  800878:	d0a76317 	ldw	r2,-25204(gp)
  80087c:	d0a76415 	stw	r2,-25200(gp)
	if ((pedEW) && (pedNS)){
  800880:	d0a76617 	ldw	r2,-25192(gp)
  800884:	10002026 	beq	r2,zero,800908 <camera_tlc_timer_isr+0xcc>
  800888:	d0a76517 	ldw	r2,-25196(gp)
  80088c:	10001e26 	beq	r2,zero,800908 <camera_tlc_timer_isr+0xcc>
		//handle pedestrians at either of the RED-RED states because
		if ((current_state4 == rr1_4) | (current_state4 == rr2_4))
  800890:	d0a76317 	ldw	r2,-25204(gp)
  800894:	1005003a 	cmpeq	r2,r2,zero
  800898:	1007883a 	mov	r3,r2
  80089c:	d0a76317 	ldw	r2,-25204(gp)
  8008a0:	10800120 	cmpeqi	r2,r2,4
  8008a4:	1884b03a 	or	r2,r3,r2
  8008a8:	10803fcc 	andi	r2,r2,255
  8008ac:	10000426 	beq	r2,zero,8008c0 <camera_tlc_timer_isr+0x84>
			current_state4 += 2;
  8008b0:	d0a76317 	ldw	r2,-25204(gp)
  8008b4:	10800084 	addi	r2,r2,2
  8008b8:	d0a76315 	stw	r2,-25204(gp)
	}

	previous_state4 = current_state4; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state4 == rr1_4) | (current_state4 == rr2_4))
  8008bc:	00005806 	br	800a20 <camera_tlc_timer_isr+0x1e4>
			current_state4 += 2;
		//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
		else if (current_state4 == gr_4)
  8008c0:	d0a76317 	ldw	r2,-25204(gp)
  8008c4:	10800058 	cmpnei	r2,r2,1
  8008c8:	1000041e 	bne	r2,zero,8008dc <camera_tlc_timer_isr+0xa0>
			current_state4 += 2;
  8008cc:	d0a76317 	ldw	r2,-25204(gp)
  8008d0:	10800084 	addi	r2,r2,2
  8008d4:	d0a76315 	stw	r2,-25204(gp)
	}

	previous_state4 = current_state4; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state4 == rr1_4) | (current_state4 == rr2_4))
  8008d8:	00005106 	br	800a20 <camera_tlc_timer_isr+0x1e4>
			current_state4 += 2;
		//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
		else if (current_state4 == gr_4)
			current_state4 += 2;
		//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
		else if (current_state4 == rg_4)
  8008dc:	d0a76317 	ldw	r2,-25204(gp)
  8008e0:	10800158 	cmpnei	r2,r2,5
  8008e4:	1000041e 	bne	r2,zero,8008f8 <camera_tlc_timer_isr+0xbc>
			current_state4 += 2;
  8008e8:	d0a76317 	ldw	r2,-25204(gp)
  8008ec:	10800084 	addi	r2,r2,2
  8008f0:	d0a76315 	stw	r2,-25204(gp)
	}

	previous_state4 = current_state4; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state4 == rr1_4) | (current_state4 == rr2_4))
  8008f4:	00004a06 	br	800a20 <camera_tlc_timer_isr+0x1e4>
			current_state4 += 2;
		//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
		else if (current_state4 == rg_4)
			current_state4 += 2;
		else
			current_state4++;
  8008f8:	d0a76317 	ldw	r2,-25204(gp)
  8008fc:	10800044 	addi	r2,r2,1
  800900:	d0a76315 	stw	r2,-25204(gp)
	}

	previous_state4 = current_state4; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state4 == rr1_4) | (current_state4 == rr2_4))
  800904:	00004606 	br	800a20 <camera_tlc_timer_isr+0x1e4>
		else if (current_state4 == rg_4)
			current_state4 += 2;
		else
			current_state4++;
	}
	else if (pedNS){
  800908:	d0a76517 	ldw	r2,-25196(gp)
  80090c:	10001826 	beq	r2,zero,800970 <camera_tlc_timer_isr+0x134>
		//we are at state RED-RED (1), handle NS pedestrians
		if (current_state4 == rr1_4)
  800910:	d0a76317 	ldw	r2,-25204(gp)
  800914:	1000041e 	bne	r2,zero,800928 <camera_tlc_timer_isr+0xec>
			current_state4 += 2;
  800918:	d0a76317 	ldw	r2,-25204(gp)
  80091c:	10800084 	addi	r2,r2,2
  800920:	d0a76315 	stw	r2,-25204(gp)
  800924:	00003e06 	br	800a20 <camera_tlc_timer_isr+0x1e4>
		//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
		else if (current_state4 == gr_4)
  800928:	d0a76317 	ldw	r2,-25204(gp)
  80092c:	10800058 	cmpnei	r2,r2,1
  800930:	1000041e 	bne	r2,zero,800944 <camera_tlc_timer_isr+0x108>
			current_state4 += 2;
  800934:	d0a76317 	ldw	r2,-25204(gp)
  800938:	10800084 	addi	r2,r2,2
  80093c:	d0a76315 	stw	r2,-25204(gp)
  800940:	00003706 	br	800a20 <camera_tlc_timer_isr+0x1e4>
		//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
		else if (current_state4 == rg_4)
  800944:	d0a76317 	ldw	r2,-25204(gp)
  800948:	10800158 	cmpnei	r2,r2,5
  80094c:	1000041e 	bne	r2,zero,800960 <camera_tlc_timer_isr+0x124>
			current_state4 += 2;
  800950:	d0a76317 	ldw	r2,-25204(gp)
  800954:	10800084 	addi	r2,r2,2
  800958:	d0a76315 	stw	r2,-25204(gp)
  80095c:	00003006 	br	800a20 <camera_tlc_timer_isr+0x1e4>
		else
			current_state4++;
  800960:	d0a76317 	ldw	r2,-25204(gp)
  800964:	10800044 	addi	r2,r2,1
  800968:	d0a76315 	stw	r2,-25204(gp)
  80096c:	00002c06 	br	800a20 <camera_tlc_timer_isr+0x1e4>
	}
	else if (pedEW){
  800970:	d0a76617 	ldw	r2,-25192(gp)
  800974:	10001926 	beq	r2,zero,8009dc <camera_tlc_timer_isr+0x1a0>
		//we are at state RED-RED (2), handle EW pedestrians
		if (current_state4 == rr2_4)
  800978:	d0a76317 	ldw	r2,-25204(gp)
  80097c:	10800118 	cmpnei	r2,r2,4
  800980:	1000041e 	bne	r2,zero,800994 <camera_tlc_timer_isr+0x158>
			current_state4 += 2;
  800984:	d0a76317 	ldw	r2,-25204(gp)
  800988:	10800084 	addi	r2,r2,2
  80098c:	d0a76315 	stw	r2,-25204(gp)
  800990:	00002306 	br	800a20 <camera_tlc_timer_isr+0x1e4>
		//we are at state RED-GREEN, too late to handle EW pedestrians so skip past PED state
		else if (current_state4 == rg_4)
  800994:	d0a76317 	ldw	r2,-25204(gp)
  800998:	10800158 	cmpnei	r2,r2,5
  80099c:	1000041e 	bne	r2,zero,8009b0 <camera_tlc_timer_isr+0x174>
			current_state4 += 2;
  8009a0:	d0a76317 	ldw	r2,-25204(gp)
  8009a4:	10800084 	addi	r2,r2,2
  8009a8:	d0a76315 	stw	r2,-25204(gp)
  8009ac:	00001c06 	br	800a20 <camera_tlc_timer_isr+0x1e4>
		//we are at state GREEN-RED, cannot handle EW pedestrians here so skip past PED state
		else if (current_state4 == gr_4)
  8009b0:	d0a76317 	ldw	r2,-25204(gp)
  8009b4:	10800058 	cmpnei	r2,r2,1
  8009b8:	1000041e 	bne	r2,zero,8009cc <camera_tlc_timer_isr+0x190>
			current_state4 += 2;
  8009bc:	d0a76317 	ldw	r2,-25204(gp)
  8009c0:	10800084 	addi	r2,r2,2
  8009c4:	d0a76315 	stw	r2,-25204(gp)
  8009c8:	00001506 	br	800a20 <camera_tlc_timer_isr+0x1e4>
		else
			current_state4++;
  8009cc:	d0a76317 	ldw	r2,-25204(gp)
  8009d0:	10800044 	addi	r2,r2,1
  8009d4:	d0a76315 	stw	r2,-25204(gp)
  8009d8:	00001106 	br	800a20 <camera_tlc_timer_isr+0x1e4>
	}
	//if no PED interrupt flags, skip past PED states from GREEN-RED and RED-GREEN
	else if (current_state4 == gr_4)
  8009dc:	d0a76317 	ldw	r2,-25204(gp)
  8009e0:	10800058 	cmpnei	r2,r2,1
  8009e4:	1000041e 	bne	r2,zero,8009f8 <camera_tlc_timer_isr+0x1bc>
		current_state4 += 2;
  8009e8:	d0a76317 	ldw	r2,-25204(gp)
  8009ec:	10800084 	addi	r2,r2,2
  8009f0:	d0a76315 	stw	r2,-25204(gp)
  8009f4:	00000a06 	br	800a20 <camera_tlc_timer_isr+0x1e4>
	else if (current_state4 == rg_4)
  8009f8:	d0a76317 	ldw	r2,-25204(gp)
  8009fc:	10800158 	cmpnei	r2,r2,5
  800a00:	1000041e 	bne	r2,zero,800a14 <camera_tlc_timer_isr+0x1d8>
		current_state4 += 2;
  800a04:	d0a76317 	ldw	r2,-25204(gp)
  800a08:	10800084 	addi	r2,r2,2
  800a0c:	d0a76315 	stw	r2,-25204(gp)
  800a10:	00000306 	br	800a20 <camera_tlc_timer_isr+0x1e4>
	else
		current_state4++; //move to the next state if no
  800a14:	d0a76317 	ldw	r2,-25204(gp)
  800a18:	10800044 	addi	r2,r2,1
  800a1c:	d0a76315 	stw	r2,-25204(gp)

	//reset the NS/EW pedestrian button interrupt flag when we have changed state (NS/EWHandled = 1)
	if (previous_state4 == grp1_4) {
  800a20:	d0a76417 	ldw	r2,-25200(gp)
  800a24:	10800098 	cmpnei	r2,r2,2
  800a28:	1000021e 	bne	r2,zero,800a34 <camera_tlc_timer_isr+0x1f8>
		pedNS = 0;
  800a2c:	d0276515 	stw	zero,-25196(gp)
  800a30:	00000406 	br	800a44 <camera_tlc_timer_isr+0x208>
	}
	else if (previous_state4 == rgp2_4) {
  800a34:	d0a76417 	ldw	r2,-25200(gp)
  800a38:	10800198 	cmpnei	r2,r2,6
  800a3c:	1000011e 	bne	r2,zero,800a44 <camera_tlc_timer_isr+0x208>
		pedEW = 0;
  800a40:	d0276615 	stw	zero,-25192(gp)
	}

	if (current_state4 == buffer_4) //if at final state, loop back to initial state using buffer state
  800a44:	d0a76317 	ldw	r2,-25204(gp)
  800a48:	10800218 	cmpnei	r2,r2,8
  800a4c:	1000011e 	bne	r2,zero,800a54 <camera_tlc_timer_isr+0x218>
		current_state4 = rr1_4;
  800a50:	d0276315 	stw	zero,-25204(gp)
	printf("current state camera_timer %d\n", current_state4);
  800a54:	d0a76317 	ldw	r2,-25204(gp)
  800a58:	100b883a 	mov	r5,r2
  800a5c:	01002074 	movhi	r4,129
  800a60:	210f0504 	addi	r4,r4,15380
  800a64:	08038dc0 	call	8038dc <printf>

	timer_has_started = 0; //reset timer_started flag
  800a68:	d0275a15 	stw	zero,-25240(gp)
return 0;
  800a6c:	0005883a 	mov	r2,zero
}
  800a70:	e037883a 	mov	sp,fp
  800a74:	dfc00117 	ldw	ra,4(sp)
  800a78:	df000017 	ldw	fp,0(sp)
  800a7c:	dec00204 	addi	sp,sp,8
  800a80:	f800283a 	ret

00800a84 <camera_timer_isr>:

alt_u32 camera_timer_isr(void* context){
  800a84:	defffd04 	addi	sp,sp,-12
  800a88:	dfc00215 	stw	ra,8(sp)
  800a8c:	df000115 	stw	fp,4(sp)
  800a90:	df000104 	addi	fp,sp,4
  800a94:	e13fff15 	stw	r4,-4(fp)
	fprintf(uart,"Snapshot taken\r\n");
  800a98:	d0a76a17 	ldw	r2,-25176(gp)
  800a9c:	100f883a 	mov	r7,r2
  800aa0:	01800404 	movi	r6,16
  800aa4:	01400044 	movi	r5,1
  800aa8:	01002074 	movhi	r4,129
  800aac:	210f0d04 	addi	r4,r4,15412
  800ab0:	0802d000 	call	802d00 <fwrite>
	camera_timer_has_started = 0;
  800ab4:	d0275b15 	stw	zero,-25236(gp)
	return 0;
  800ab8:	0005883a 	mov	r2,zero
}
  800abc:	e037883a 	mov	sp,fp
  800ac0:	dfc00117 	ldw	ra,4(sp)
  800ac4:	df000017 	ldw	fp,0(sp)
  800ac8:	dec00204 	addi	sp,sp,8
  800acc:	f800283a 	ret

00800ad0 <vehicle_timer_isr>:

alt_u32 vehicle_timer_isr(void* context){
  800ad0:	defffe04 	addi	sp,sp,-8
  800ad4:	df000115 	stw	fp,4(sp)
  800ad8:	df000104 	addi	fp,sp,4
  800adc:	e13fff15 	stw	r4,-4(fp)
	count++;
  800ae0:	d0a76817 	ldw	r2,-25184(gp)
  800ae4:	10800044 	addi	r2,r2,1
  800ae8:	d0a76815 	stw	r2,-25184(gp)
	return 1;
  800aec:	00800044 	movi	r2,1
}
  800af0:	e037883a 	mov	sp,fp
  800af4:	df000017 	ldw	fp,0(sp)
  800af8:	dec00104 	addi	sp,sp,4
  800afc:	f800283a 	ret

00800b00 <button_interrupt>:

//button interrupt function for pedestrian buttons and
void button_interrupt(void* context, alt_u32 id) {
  800b00:	defff904 	addi	sp,sp,-28
  800b04:	dfc00615 	stw	ra,24(sp)
  800b08:	df000515 	stw	fp,20(sp)
  800b0c:	df000504 	addi	fp,sp,20
  800b10:	e13ffe15 	stw	r4,-8(fp)
  800b14:	e17fff15 	stw	r5,-4(fp)
	//read edge capture register and button value
	unsigned int edgeCapture = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
  800b18:	00804434 	movhi	r2,272
  800b1c:	10842b04 	addi	r2,r2,4268
  800b20:	10800037 	ldwio	r2,0(r2)
  800b24:	e0bffb15 	stw	r2,-20(fp)
	unsigned int uiButtonsValue = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
  800b28:	00804434 	movhi	r2,272
  800b2c:	10842804 	addi	r2,r2,4256
  800b30:	10800037 	ldwio	r2,0(r2)
  800b34:	e0bffc15 	stw	r2,-16(fp)
	void* timerContext = 0;
  800b38:	e03ffd15 	stw	zero,-12(fp)

	//only allows the pedestrian inputs in mode 2,3 and 4
	if ((!(uiButtonsValue & 1<<0)) && !((current_mode == 1) || (current_mode == 0)))
  800b3c:	e0bffc17 	ldw	r2,-16(fp)
  800b40:	1080004c 	andi	r2,r2,1
  800b44:	1000071e 	bne	r2,zero,800b64 <button_interrupt+0x64>
  800b48:	d0a00017 	ldw	r2,-32768(gp)
  800b4c:	10800060 	cmpeqi	r2,r2,1
  800b50:	1000041e 	bne	r2,zero,800b64 <button_interrupt+0x64>
  800b54:	d0a00017 	ldw	r2,-32768(gp)
  800b58:	10000226 	beq	r2,zero,800b64 <button_interrupt+0x64>
		pedNS = 1;
  800b5c:	00800044 	movi	r2,1
  800b60:	d0a76515 	stw	r2,-25196(gp)
	if ((!(uiButtonsValue & 1<<1)) && !((current_mode == 1) || (current_mode == 0)))
  800b64:	e0bffc17 	ldw	r2,-16(fp)
  800b68:	1080008c 	andi	r2,r2,2
  800b6c:	1000071e 	bne	r2,zero,800b8c <button_interrupt+0x8c>
  800b70:	d0a00017 	ldw	r2,-32768(gp)
  800b74:	10800060 	cmpeqi	r2,r2,1
  800b78:	1000041e 	bne	r2,zero,800b8c <button_interrupt+0x8c>
  800b7c:	d0a00017 	ldw	r2,-32768(gp)
  800b80:	10000226 	beq	r2,zero,800b8c <button_interrupt+0x8c>
		pedEW = 1;
  800b84:	00800044 	movi	r2,1
  800b88:	d0a76615 	stw	r2,-25192(gp)
	//vehicle crossing interrupt
	if (current_mode == 4){
  800b8c:	d0a00017 	ldw	r2,-32768(gp)
  800b90:	10800118 	cmpnei	r2,r2,4
  800b94:	1000531e 	bne	r2,zero,800ce4 <button_interrupt+0x1e4>
		if ((edgeCapture & 1<<2)) {
  800b98:	e0bffb17 	ldw	r2,-20(fp)
  800b9c:	1080010c 	andi	r2,r2,4
  800ba0:	10005026 	beq	r2,zero,800ce4 <button_interrupt+0x1e4>
			++vehicle_cross;
  800ba4:	d0a76717 	ldw	r2,-25188(gp)
  800ba8:	10800044 	addi	r2,r2,1
  800bac:	d0a76715 	stw	r2,-25188(gp)
			if (vehicle_cross % 2){
  800bb0:	d0a76717 	ldw	r2,-25188(gp)
  800bb4:	1080004c 	andi	r2,r2,1
  800bb8:	10003426 	beq	r2,zero,800c8c <button_interrupt+0x18c>
				alt_alarm_start(&timer_vehicle,1,vehicle_timer_isr,timerContext);
  800bbc:	e1fffd17 	ldw	r7,-12(fp)
  800bc0:	01802034 	movhi	r6,128
  800bc4:	3182b404 	addi	r6,r6,2768
  800bc8:	01400044 	movi	r5,1
  800bcc:	01002074 	movhi	r4,129
  800bd0:	211f6004 	addi	r4,r4,32128
  800bd4:	080f9140 	call	80f914 <alt_alarm_start>
				if ((current_state4 == yr_4) || (current_state4 == ry_4)){
  800bd8:	d0a76317 	ldw	r2,-25204(gp)
  800bdc:	108000e0 	cmpeqi	r2,r2,3
  800be0:	1000031e 	bne	r2,zero,800bf0 <button_interrupt+0xf0>
  800be4:	d0a76317 	ldw	r2,-25204(gp)
  800be8:	108001d8 	cmpnei	r2,r2,7
  800bec:	1000131e 	bne	r2,zero,800c3c <button_interrupt+0x13c>
					//prevent crashes by checking if timer has already started
					if (!camera_timer_has_started){
  800bf0:	d0a75b17 	ldw	r2,-25236(gp)
  800bf4:	10003b1e 	bne	r2,zero,800ce4 <button_interrupt+0x1e4>
						fprintf(uart,"Camera activated\r\n");
  800bf8:	d0a76a17 	ldw	r2,-25176(gp)
  800bfc:	100f883a 	mov	r7,r2
  800c00:	01800484 	movi	r6,18
  800c04:	01400044 	movi	r5,1
  800c08:	01002074 	movhi	r4,129
  800c0c:	210f1204 	addi	r4,r4,15432
  800c10:	0802d000 	call	802d00 <fwrite>
						camera_timer_has_started = 1;
  800c14:	00800044 	movi	r2,1
  800c18:	d0a75b15 	stw	r2,-25236(gp)
						alt_alarm_start(&timer_camera,camera_timeout,camera_timer_isr,timerContext);
  800c1c:	e1fffd17 	ldw	r7,-12(fp)
  800c20:	01802034 	movhi	r6,128
  800c24:	3182a104 	addi	r6,r6,2692
  800c28:	0141f404 	movi	r5,2000
  800c2c:	01002074 	movhi	r4,129
  800c30:	211f6604 	addi	r4,r4,32152
  800c34:	080f9140 	call	80f914 <alt_alarm_start>
			++vehicle_cross;
			if (vehicle_cross % 2){
				alt_alarm_start(&timer_vehicle,1,vehicle_timer_isr,timerContext);
				if ((current_state4 == yr_4) || (current_state4 == ry_4)){
					//prevent crashes by checking if timer has already started
					if (!camera_timer_has_started){
  800c38:	00002a06 	br	800ce4 <button_interrupt+0x1e4>
						fprintf(uart,"Camera activated\r\n");
						camera_timer_has_started = 1;
						alt_alarm_start(&timer_camera,camera_timeout,camera_timer_isr,timerContext);
					}
				}
				else if ((current_state4 == rr1_4) || (current_state4 == rr2_4)){
  800c3c:	d0a76317 	ldw	r2,-25204(gp)
  800c40:	10000326 	beq	r2,zero,800c50 <button_interrupt+0x150>
  800c44:	d0a76317 	ldw	r2,-25204(gp)
  800c48:	10800118 	cmpnei	r2,r2,4
  800c4c:	1000251e 	bne	r2,zero,800ce4 <button_interrupt+0x1e4>
					fprintf(uart,"Camera activated\r\n");
  800c50:	d0a76a17 	ldw	r2,-25176(gp)
  800c54:	100f883a 	mov	r7,r2
  800c58:	01800484 	movi	r6,18
  800c5c:	01400044 	movi	r5,1
  800c60:	01002074 	movhi	r4,129
  800c64:	210f1204 	addi	r4,r4,15432
  800c68:	0802d000 	call	802d00 <fwrite>
					fprintf(uart,"Snapshot taken\r\n");
  800c6c:	d0a76a17 	ldw	r2,-25176(gp)
  800c70:	100f883a 	mov	r7,r2
  800c74:	01800404 	movi	r6,16
  800c78:	01400044 	movi	r5,1
  800c7c:	01002074 	movhi	r4,129
  800c80:	210f0d04 	addi	r4,r4,15412
  800c84:	0802d000 	call	802d00 <fwrite>
  800c88:	00001606 	br	800ce4 <button_interrupt+0x1e4>
				}
			}
			else{
				alt_alarm_stop(&timer_camera);
  800c8c:	01002074 	movhi	r4,129
  800c90:	211f6604 	addi	r4,r4,32152
  800c94:	08106240 	call	810624 <alt_alarm_stop>
				alt_alarm_stop(&timer_vehicle);
  800c98:	01002074 	movhi	r4,129
  800c9c:	211f6004 	addi	r4,r4,32128
  800ca0:	08106240 	call	810624 <alt_alarm_stop>
				camera_timer_has_started = 0;
  800ca4:	d0275b15 	stw	zero,-25236(gp)
				fprintf(uart,"Vehicle left\r\n");
  800ca8:	d0a76a17 	ldw	r2,-25176(gp)
  800cac:	100f883a 	mov	r7,r2
  800cb0:	01800384 	movi	r6,14
  800cb4:	01400044 	movi	r5,1
  800cb8:	01002074 	movhi	r4,129
  800cbc:	210f1704 	addi	r4,r4,15452
  800cc0:	0802d000 	call	802d00 <fwrite>
				fprintf(uart,"Vehicle was in the intersection for %d ms.\r\n",count);
  800cc4:	d0a76a17 	ldw	r2,-25176(gp)
  800cc8:	d0e76817 	ldw	r3,-25184(gp)
  800ccc:	180d883a 	mov	r6,r3
  800cd0:	01402074 	movhi	r5,129
  800cd4:	294f1b04 	addi	r5,r5,15468
  800cd8:	1009883a 	mov	r4,r2
  800cdc:	08025ac0 	call	8025ac <fprintf>
				count = 0;
  800ce0:	d0276815 	stw	zero,-25184(gp)
			}
		}
	}

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
  800ce4:	0007883a 	mov	r3,zero
  800ce8:	00804434 	movhi	r2,272
  800cec:	10842b04 	addi	r2,r2,4268
  800cf0:	10c00035 	stwio	r3,0(r2)
}
  800cf4:	0001883a 	nop
  800cf8:	e037883a 	mov	sp,fp
  800cfc:	dfc00117 	ldw	ra,4(sp)
  800d00:	df000017 	ldw	fp,0(sp)
  800d04:	dec00204 	addi	sp,sp,8
  800d08:	f800283a 	ret

00800d0c <lcd_set_mode>:

//LCD writing function, pass in the current mode
int lcd_set_mode(int mode){
  800d0c:	defffd04 	addi	sp,sp,-12
  800d10:	dfc00215 	stw	ra,8(sp)
  800d14:	df000115 	stw	fp,4(sp)
  800d18:	df000104 	addi	fp,sp,4
  800d1c:	e13fff15 	stw	r4,-4(fp)
	if (mode != mode_display) {
  800d20:	d0a00117 	ldw	r2,-32764(gp)
  800d24:	e0ffff17 	ldw	r3,-4(fp)
  800d28:	18801226 	beq	r3,r2,800d74 <lcd_set_mode+0x68>
		if(lcd != NULL){
  800d2c:	d0a76917 	ldw	r2,-25180(gp)
  800d30:	10001026 	beq	r2,zero,800d74 <lcd_set_mode+0x68>
			#define ESC 27
			#define CLEAR_LCD_STRING "[2J"
			fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  800d34:	d0a76917 	ldw	r2,-25180(gp)
  800d38:	01c02074 	movhi	r7,129
  800d3c:	39cf2704 	addi	r7,r7,15516
  800d40:	018006c4 	movi	r6,27
  800d44:	01402074 	movhi	r5,129
  800d48:	294f2804 	addi	r5,r5,15520
  800d4c:	1009883a 	mov	r4,r2
  800d50:	08025ac0 	call	8025ac <fprintf>
			fprintf(lcd, "CURRENT MODE: %d\n", mode);
  800d54:	d0a76917 	ldw	r2,-25180(gp)
  800d58:	e1bfff17 	ldw	r6,-4(fp)
  800d5c:	01402074 	movhi	r5,129
  800d60:	294f2a04 	addi	r5,r5,15528
  800d64:	1009883a 	mov	r4,r2
  800d68:	08025ac0 	call	8025ac <fprintf>
			mode_display = mode; //set mode display state to prevent LCD flickering
  800d6c:	e0bfff17 	ldw	r2,-4(fp)
  800d70:	d0a00115 	stw	r2,-32764(gp)
		}
	}
	return 0;
  800d74:	0005883a 	mov	r2,zero
}
  800d78:	e037883a 	mov	sp,fp
  800d7c:	dfc00117 	ldw	ra,4(sp)
  800d80:	df000017 	ldw	fp,0(sp)
  800d84:	dec00204 	addi	sp,sp,8
  800d88:	f800283a 	ret

00800d8c <simple_tlc>:

// Mode 1
// Simple controller with automatic lights
int simple_tlc(){
  800d8c:	defffd04 	addi	sp,sp,-12
  800d90:	dfc00215 	stw	ra,8(sp)
  800d94:	df000115 	stw	fp,4(sp)
  800d98:	df000104 	addi	fp,sp,4
	void* timerContext = 0;
  800d9c:	e03fff15 	stw	zero,-4(fp)
	//loop through all states, starting timer on current state and setting outputs
	if (current_state1 == rr1_1){
  800da0:	d0a75d17 	ldw	r2,-25228(gp)
  800da4:	1000101e 	bne	r2,zero,800de8 <simple_tlc+0x5c>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100100); //turn RED-RED on
  800da8:	00c00904 	movi	r3,36
  800dac:	00804434 	movhi	r2,272
  800db0:	10841c04 	addi	r2,r2,4208
  800db4:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800db8:	d0a75a17 	ldw	r2,-25240(gp)
  800dbc:	1000681e 	bne	r2,zero,800f60 <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, rrrr, simple_tlc_timer_isr, timerContext);
  800dc0:	e1ffff17 	ldw	r7,-4(fp)
  800dc4:	01802034 	movhi	r6,128
  800dc8:	3180c404 	addi	r6,r6,784
  800dcc:	01407d04 	movi	r5,500
  800dd0:	01002074 	movhi	r4,129
  800dd4:	211f5a04 	addi	r4,r4,32104
  800dd8:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  800ddc:	00800044 	movi	r2,1
  800de0:	d0a75a15 	stw	r2,-25240(gp)
  800de4:	00005e06 	br	800f60 <simple_tlc+0x1d4>
		}
	}
	else if (current_state1 == gr_1){
  800de8:	d0a75d17 	ldw	r2,-25228(gp)
  800dec:	10800058 	cmpnei	r2,r2,1
  800df0:	1000101e 	bne	r2,zero,800e34 <simple_tlc+0xa8>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100001); //turn GREEN-RED on
  800df4:	00c00844 	movi	r3,33
  800df8:	00804434 	movhi	r2,272
  800dfc:	10841c04 	addi	r2,r2,4208
  800e00:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800e04:	d0a75a17 	ldw	r2,-25240(gp)
  800e08:	1000551e 	bne	r2,zero,800f60 <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, grrg, simple_tlc_timer_isr, timerContext);
  800e0c:	e1ffff17 	ldw	r7,-4(fp)
  800e10:	01802034 	movhi	r6,128
  800e14:	3180c404 	addi	r6,r6,784
  800e18:	0145dc04 	movi	r5,6000
  800e1c:	01002074 	movhi	r4,129
  800e20:	211f5a04 	addi	r4,r4,32104
  800e24:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  800e28:	00800044 	movi	r2,1
  800e2c:	d0a75a15 	stw	r2,-25240(gp)
  800e30:	00004b06 	br	800f60 <simple_tlc+0x1d4>
		}
	}
	else if (current_state1 == yr_1){
  800e34:	d0a75d17 	ldw	r2,-25228(gp)
  800e38:	10800098 	cmpnei	r2,r2,2
  800e3c:	1000101e 	bne	r2,zero,800e80 <simple_tlc+0xf4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100010); //turn YELLOW-RED on
  800e40:	00c00884 	movi	r3,34
  800e44:	00804434 	movhi	r2,272
  800e48:	10841c04 	addi	r2,r2,4208
  800e4c:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800e50:	d0a75a17 	ldw	r2,-25240(gp)
  800e54:	1000421e 	bne	r2,zero,800f60 <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, yrry, simple_tlc_timer_isr, timerContext);
  800e58:	e1ffff17 	ldw	r7,-4(fp)
  800e5c:	01802034 	movhi	r6,128
  800e60:	3180c404 	addi	r6,r6,784
  800e64:	0141f404 	movi	r5,2000
  800e68:	01002074 	movhi	r4,129
  800e6c:	211f5a04 	addi	r4,r4,32104
  800e70:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  800e74:	00800044 	movi	r2,1
  800e78:	d0a75a15 	stw	r2,-25240(gp)
  800e7c:	00003806 	br	800f60 <simple_tlc+0x1d4>
		}
	}
	else if (current_state1 == rr2_1){
  800e80:	d0a75d17 	ldw	r2,-25228(gp)
  800e84:	108000d8 	cmpnei	r2,r2,3
  800e88:	1000101e 	bne	r2,zero,800ecc <simple_tlc+0x140>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100100); //turn RED-RED on
  800e8c:	00c00904 	movi	r3,36
  800e90:	00804434 	movhi	r2,272
  800e94:	10841c04 	addi	r2,r2,4208
  800e98:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800e9c:	d0a75a17 	ldw	r2,-25240(gp)
  800ea0:	10002f1e 	bne	r2,zero,800f60 <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, rrrr, simple_tlc_timer_isr, timerContext);
  800ea4:	e1ffff17 	ldw	r7,-4(fp)
  800ea8:	01802034 	movhi	r6,128
  800eac:	3180c404 	addi	r6,r6,784
  800eb0:	01407d04 	movi	r5,500
  800eb4:	01002074 	movhi	r4,129
  800eb8:	211f5a04 	addi	r4,r4,32104
  800ebc:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  800ec0:	00800044 	movi	r2,1
  800ec4:	d0a75a15 	stw	r2,-25240(gp)
  800ec8:	00002506 	br	800f60 <simple_tlc+0x1d4>
		}
	}
	else if (current_state1 == rg_1){
  800ecc:	d0a75d17 	ldw	r2,-25228(gp)
  800ed0:	10800118 	cmpnei	r2,r2,4
  800ed4:	1000101e 	bne	r2,zero,800f18 <simple_tlc+0x18c>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b001100); //turn RED-GREEN on
  800ed8:	00c00304 	movi	r3,12
  800edc:	00804434 	movhi	r2,272
  800ee0:	10841c04 	addi	r2,r2,4208
  800ee4:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800ee8:	d0a75a17 	ldw	r2,-25240(gp)
  800eec:	10001c1e 	bne	r2,zero,800f60 <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, grrg, simple_tlc_timer_isr, timerContext);
  800ef0:	e1ffff17 	ldw	r7,-4(fp)
  800ef4:	01802034 	movhi	r6,128
  800ef8:	3180c404 	addi	r6,r6,784
  800efc:	0145dc04 	movi	r5,6000
  800f00:	01002074 	movhi	r4,129
  800f04:	211f5a04 	addi	r4,r4,32104
  800f08:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  800f0c:	00800044 	movi	r2,1
  800f10:	d0a75a15 	stw	r2,-25240(gp)
  800f14:	00001206 	br	800f60 <simple_tlc+0x1d4>
		}
	}
	else if (current_state1 == ry_1){
  800f18:	d0a75d17 	ldw	r2,-25228(gp)
  800f1c:	10800158 	cmpnei	r2,r2,5
  800f20:	10000f1e 	bne	r2,zero,800f60 <simple_tlc+0x1d4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b010100); //turn RED-YELLOW on
  800f24:	00c00504 	movi	r3,20
  800f28:	00804434 	movhi	r2,272
  800f2c:	10841c04 	addi	r2,r2,4208
  800f30:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800f34:	d0a75a17 	ldw	r2,-25240(gp)
  800f38:	1000091e 	bne	r2,zero,800f60 <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, yrry, simple_tlc_timer_isr, timerContext);
  800f3c:	e1ffff17 	ldw	r7,-4(fp)
  800f40:	01802034 	movhi	r6,128
  800f44:	3180c404 	addi	r6,r6,784
  800f48:	0141f404 	movi	r5,2000
  800f4c:	01002074 	movhi	r4,129
  800f50:	211f5a04 	addi	r4,r4,32104
  800f54:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  800f58:	00800044 	movi	r2,1
  800f5c:	d0a75a15 	stw	r2,-25240(gp)
		}
	}
	return 0;
  800f60:	0005883a 	mov	r2,zero
}
  800f64:	e037883a 	mov	sp,fp
  800f68:	dfc00117 	ldw	ra,4(sp)
  800f6c:	df000017 	ldw	fp,0(sp)
  800f70:	dec00204 	addi	sp,sp,8
  800f74:	f800283a 	ret

00800f78 <pedestrian_tlc>:

// Mode 2
// Allows Pedestrian Inputs
int pedestrian_tlc() {
  800f78:	defffd04 	addi	sp,sp,-12
  800f7c:	dfc00215 	stw	ra,8(sp)
  800f80:	df000115 	stw	fp,4(sp)
  800f84:	df000104 	addi	fp,sp,4
	void* timerContext = 0;
  800f88:	e03fff15 	stw	zero,-4(fp)
	//loop through all states, starting timer on current state and setting outputs
	if (current_state2 == rr1_2){
  800f8c:	d0a75f17 	ldw	r2,-25220(gp)
  800f90:	1000101e 	bne	r2,zero,800fd4 <pedestrian_tlc+0x5c>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
  800f94:	00c00904 	movi	r3,36
  800f98:	00804434 	movhi	r2,272
  800f9c:	10841c04 	addi	r2,r2,4208
  800fa0:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800fa4:	d0a75a17 	ldw	r2,-25240(gp)
  800fa8:	10008e1e 	bne	r2,zero,8011e4 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, rrrr, pedestrian_tlc_timer_isr, timerContext);
  800fac:	e1ffff17 	ldw	r7,-4(fp)
  800fb0:	01802034 	movhi	r6,128
  800fb4:	3180e804 	addi	r6,r6,928
  800fb8:	01407d04 	movi	r5,500
  800fbc:	01002074 	movhi	r4,129
  800fc0:	211f5a04 	addi	r4,r4,32104
  800fc4:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  800fc8:	00800044 	movi	r2,1
  800fcc:	d0a75a15 	stw	r2,-25240(gp)
  800fd0:	00008406 	br	8011e4 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == gr_2){
  800fd4:	d0a75f17 	ldw	r2,-25220(gp)
  800fd8:	10800058 	cmpnei	r2,r2,1
  800fdc:	1000101e 	bne	r2,zero,801020 <pedestrian_tlc+0xa8>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100001); //turn GREEN-RED on
  800fe0:	00c00844 	movi	r3,33
  800fe4:	00804434 	movhi	r2,272
  800fe8:	10841c04 	addi	r2,r2,4208
  800fec:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800ff0:	d0a75a17 	ldw	r2,-25240(gp)
  800ff4:	10007b1e 	bne	r2,zero,8011e4 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, grrg, pedestrian_tlc_timer_isr, timerContext);
  800ff8:	e1ffff17 	ldw	r7,-4(fp)
  800ffc:	01802034 	movhi	r6,128
  801000:	3180e804 	addi	r6,r6,928
  801004:	0145dc04 	movi	r5,6000
  801008:	01002074 	movhi	r4,129
  80100c:	211f5a04 	addi	r4,r4,32104
  801010:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  801014:	00800044 	movi	r2,1
  801018:	d0a75a15 	stw	r2,-25240(gp)
  80101c:	00007106 	br	8011e4 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == grp1_2){
  801020:	d0a75f17 	ldw	r2,-25220(gp)
  801024:	10800098 	cmpnei	r2,r2,2
  801028:	1000101e 	bne	r2,zero,80106c <pedestrian_tlc+0xf4>
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b01100001); //turn GREEN-RED and PEDNS on
  80102c:	00c01844 	movi	r3,97
  801030:	00804434 	movhi	r2,272
  801034:	10841c04 	addi	r2,r2,4208
  801038:	10c00035 	stwio	r3,0(r2)
			if (!(timer_has_started)){
  80103c:	d0a75a17 	ldw	r2,-25240(gp)
  801040:	1000681e 	bne	r2,zero,8011e4 <pedestrian_tlc+0x26c>
				alt_alarm_start(&timer_simple, grrg, pedestrian_tlc_timer_isr, timerContext);
  801044:	e1ffff17 	ldw	r7,-4(fp)
  801048:	01802034 	movhi	r6,128
  80104c:	3180e804 	addi	r6,r6,928
  801050:	0145dc04 	movi	r5,6000
  801054:	01002074 	movhi	r4,129
  801058:	211f5a04 	addi	r4,r4,32104
  80105c:	080f9140 	call	80f914 <alt_alarm_start>
				timer_has_started = 1;
  801060:	00800044 	movi	r2,1
  801064:	d0a75a15 	stw	r2,-25240(gp)
  801068:	00005e06 	br	8011e4 <pedestrian_tlc+0x26c>
			}
	}
	else if (current_state2 == yr_2){
  80106c:	d0a75f17 	ldw	r2,-25220(gp)
  801070:	108000d8 	cmpnei	r2,r2,3
  801074:	1000101e 	bne	r2,zero,8010b8 <pedestrian_tlc+0x140>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100010); //turn YELLOW-RED on
  801078:	00c00884 	movi	r3,34
  80107c:	00804434 	movhi	r2,272
  801080:	10841c04 	addi	r2,r2,4208
  801084:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801088:	d0a75a17 	ldw	r2,-25240(gp)
  80108c:	1000551e 	bne	r2,zero,8011e4 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, yrry, pedestrian_tlc_timer_isr, timerContext);
  801090:	e1ffff17 	ldw	r7,-4(fp)
  801094:	01802034 	movhi	r6,128
  801098:	3180e804 	addi	r6,r6,928
  80109c:	0141f404 	movi	r5,2000
  8010a0:	01002074 	movhi	r4,129
  8010a4:	211f5a04 	addi	r4,r4,32104
  8010a8:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  8010ac:	00800044 	movi	r2,1
  8010b0:	d0a75a15 	stw	r2,-25240(gp)
  8010b4:	00004b06 	br	8011e4 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == rr2_2){
  8010b8:	d0a75f17 	ldw	r2,-25220(gp)
  8010bc:	10800118 	cmpnei	r2,r2,4
  8010c0:	1000101e 	bne	r2,zero,801104 <pedestrian_tlc+0x18c>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
  8010c4:	00c00904 	movi	r3,36
  8010c8:	00804434 	movhi	r2,272
  8010cc:	10841c04 	addi	r2,r2,4208
  8010d0:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  8010d4:	d0a75a17 	ldw	r2,-25240(gp)
  8010d8:	1000421e 	bne	r2,zero,8011e4 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, rrrr, pedestrian_tlc_timer_isr, timerContext);
  8010dc:	e1ffff17 	ldw	r7,-4(fp)
  8010e0:	01802034 	movhi	r6,128
  8010e4:	3180e804 	addi	r6,r6,928
  8010e8:	01407d04 	movi	r5,500
  8010ec:	01002074 	movhi	r4,129
  8010f0:	211f5a04 	addi	r4,r4,32104
  8010f4:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  8010f8:	00800044 	movi	r2,1
  8010fc:	d0a75a15 	stw	r2,-25240(gp)
  801100:	00003806 	br	8011e4 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == rg_2){
  801104:	d0a75f17 	ldw	r2,-25220(gp)
  801108:	10800158 	cmpnei	r2,r2,5
  80110c:	1000101e 	bne	r2,zero,801150 <pedestrian_tlc+0x1d8>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00001100); //turn RED-GREEN on
  801110:	00c00304 	movi	r3,12
  801114:	00804434 	movhi	r2,272
  801118:	10841c04 	addi	r2,r2,4208
  80111c:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801120:	d0a75a17 	ldw	r2,-25240(gp)
  801124:	10002f1e 	bne	r2,zero,8011e4 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, grrg, pedestrian_tlc_timer_isr, timerContext);
  801128:	e1ffff17 	ldw	r7,-4(fp)
  80112c:	01802034 	movhi	r6,128
  801130:	3180e804 	addi	r6,r6,928
  801134:	0145dc04 	movi	r5,6000
  801138:	01002074 	movhi	r4,129
  80113c:	211f5a04 	addi	r4,r4,32104
  801140:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  801144:	00800044 	movi	r2,1
  801148:	d0a75a15 	stw	r2,-25240(gp)
  80114c:	00002506 	br	8011e4 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == rgp2_2){
  801150:	d0a75f17 	ldw	r2,-25220(gp)
  801154:	10800198 	cmpnei	r2,r2,6
  801158:	1000101e 	bne	r2,zero,80119c <pedestrian_tlc+0x224>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b10001100); //turn RED-GREEN and PEDEW on
  80115c:	00c02304 	movi	r3,140
  801160:	00804434 	movhi	r2,272
  801164:	10841c04 	addi	r2,r2,4208
  801168:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  80116c:	d0a75a17 	ldw	r2,-25240(gp)
  801170:	10001c1e 	bne	r2,zero,8011e4 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, grrg, pedestrian_tlc_timer_isr, timerContext);
  801174:	e1ffff17 	ldw	r7,-4(fp)
  801178:	01802034 	movhi	r6,128
  80117c:	3180e804 	addi	r6,r6,928
  801180:	0145dc04 	movi	r5,6000
  801184:	01002074 	movhi	r4,129
  801188:	211f5a04 	addi	r4,r4,32104
  80118c:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  801190:	00800044 	movi	r2,1
  801194:	d0a75a15 	stw	r2,-25240(gp)
  801198:	00001206 	br	8011e4 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == ry_2){
  80119c:	d0a75f17 	ldw	r2,-25220(gp)
  8011a0:	108001d8 	cmpnei	r2,r2,7
  8011a4:	10000f1e 	bne	r2,zero,8011e4 <pedestrian_tlc+0x26c>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00010100); //turn RED-YELLOW on
  8011a8:	00c00504 	movi	r3,20
  8011ac:	00804434 	movhi	r2,272
  8011b0:	10841c04 	addi	r2,r2,4208
  8011b4:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  8011b8:	d0a75a17 	ldw	r2,-25240(gp)
  8011bc:	1000091e 	bne	r2,zero,8011e4 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, yrry, pedestrian_tlc_timer_isr, timerContext);
  8011c0:	e1ffff17 	ldw	r7,-4(fp)
  8011c4:	01802034 	movhi	r6,128
  8011c8:	3180e804 	addi	r6,r6,928
  8011cc:	0141f404 	movi	r5,2000
  8011d0:	01002074 	movhi	r4,129
  8011d4:	211f5a04 	addi	r4,r4,32104
  8011d8:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  8011dc:	00800044 	movi	r2,1
  8011e0:	d0a75a15 	stw	r2,-25240(gp)
		}
	}
	return 0;
  8011e4:	0005883a 	mov	r2,zero
}
  8011e8:	e037883a 	mov	sp,fp
  8011ec:	dfc00117 	ldw	ra,4(sp)
  8011f0:	df000017 	ldw	fp,0(sp)
  8011f4:	dec00204 	addi	sp,sp,8
  8011f8:	f800283a 	ret

008011fc <configurable_tlc>:

// Mode 3
// Allows the timer to be change in PuTTY
int configurable_tlc(){
  8011fc:	deffea04 	addi	sp,sp,-88
  801200:	dfc01515 	stw	ra,84(sp)
  801204:	df001415 	stw	fp,80(sp)
  801208:	dc001315 	stw	r16,76(sp)
  80120c:	df001404 	addi	fp,sp,80
	void* timerContext = 0;
  801210:	e03ff215 	stw	zero,-56(fp)
	unsigned int switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  801214:	00804434 	movhi	r2,272
  801218:	10842404 	addi	r2,r2,4240
  80121c:	10800037 	ldwio	r2,0(r2)
  801220:	e0bff315 	stw	r2,-52(fp)

	//loop through all states, starting timer on current state and setting outputs
	if (current_state3 == rr1_3){
  801224:	d0a76117 	ldw	r2,-25212(gp)
  801228:	1000cd1e 	bne	r2,zero,801560 <configurable_tlc+0x364>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
  80122c:	00c00904 	movi	r3,36
  801230:	00804434 	movhi	r2,272
  801234:	10841c04 	addi	r2,r2,4208
  801238:	10c00035 	stwio	r3,0(r2)
		//check switch value to see if there are new timer values
		switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  80123c:	00804434 	movhi	r2,272
  801240:	10842404 	addi	r2,r2,4240
  801244:	10800037 	ldwio	r2,0(r2)
  801248:	e0bff315 	stw	r2,-52(fp)

		if (switch_value & (1<<17)){
  80124c:	e0bff317 	ldw	r2,-52(fp)
  801250:	108000ac 	andhi	r2,r2,2
  801254:	1000b526 	beq	r2,zero,80152c <configurable_tlc+0x330>
			//if switch 17 indicates configuration mode, block until complete valid string is received
			unsigned int strcomplete = 0;
  801258:	e03fec15 	stw	zero,-80(fp)
			unsigned int i = 0; //index for string retrieved from UART
  80125c:	e03fed15 	stw	zero,-76(fp)
			char **splitstrings; //pointer to array of c-strings
			int numbers[10]; //array to store timeout values received from UART

			//allocate enough memory for array of c-strings
			splitstrings = (char**)malloc(10);
  801260:	01000284 	movi	r4,10
  801264:	0802ef00 	call	802ef0 <malloc>
  801268:	e0bff415 	stw	r2,-48(fp)
			//allocate enough memory for each c-string in array
			for (int j = 0; j < sizeof(splitstrings); ++j) {
  80126c:	e03fee15 	stw	zero,-72(fp)
  801270:	00000c06 	br	8012a4 <configurable_tlc+0xa8>
				splitstrings[j] = (char*)malloc(10);
  801274:	e0bfee17 	ldw	r2,-72(fp)
  801278:	1085883a 	add	r2,r2,r2
  80127c:	1085883a 	add	r2,r2,r2
  801280:	1007883a 	mov	r3,r2
  801284:	e0bff417 	ldw	r2,-48(fp)
  801288:	10e1883a 	add	r16,r2,r3
  80128c:	01000284 	movi	r4,10
  801290:	0802ef00 	call	802ef0 <malloc>
  801294:	80800015 	stw	r2,0(r16)
			int numbers[10]; //array to store timeout values received from UART

			//allocate enough memory for array of c-strings
			splitstrings = (char**)malloc(10);
			//allocate enough memory for each c-string in array
			for (int j = 0; j < sizeof(splitstrings); ++j) {
  801298:	e0bfee17 	ldw	r2,-72(fp)
  80129c:	10800044 	addi	r2,r2,1
  8012a0:	e0bfee15 	stw	r2,-72(fp)
  8012a4:	e0bfee17 	ldw	r2,-72(fp)
  8012a8:	10800130 	cmpltui	r2,r2,4
  8012ac:	103ff11e 	bne	r2,zero,801274 <__alt_mem_onchip_mem+0xff781274>
				splitstrings[j] = (char*)malloc(10);
			}
			//block code and get input from UART stream
			while (strcomplete == 0){
  8012b0:	00009006 	br	8014f4 <configurable_tlc+0x2f8>
				config_values[i] = fgetc(uart);
  8012b4:	d0a76a17 	ldw	r2,-25176(gp)
  8012b8:	1009883a 	mov	r4,r2
  8012bc:	08020500 	call	802050 <fgetc>
  8012c0:	1009883a 	mov	r4,r2
  8012c4:	00802074 	movhi	r2,129
  8012c8:	109f6c04 	addi	r2,r2,32176
  8012cc:	e0ffed17 	ldw	r3,-76(fp)
  8012d0:	10c5883a 	add	r2,r2,r3
  8012d4:	11000005 	stb	r4,0(r2)
				printf("%c",config_values[i]);
  8012d8:	00802074 	movhi	r2,129
  8012dc:	109f6c04 	addi	r2,r2,32176
  8012e0:	e0ffed17 	ldw	r3,-76(fp)
  8012e4:	10c5883a 	add	r2,r2,r3
  8012e8:	10800003 	ldbu	r2,0(r2)
  8012ec:	10803fcc 	andi	r2,r2,255
  8012f0:	1080201c 	xori	r2,r2,128
  8012f4:	10bfe004 	addi	r2,r2,-128
  8012f8:	1009883a 	mov	r4,r2
  8012fc:	08039200 	call	803920 <putchar>
				++i;
  801300:	e0bfed17 	ldw	r2,-76(fp)
  801304:	10800044 	addi	r2,r2,1
  801308:	e0bfed15 	stw	r2,-76(fp)
				if (config_values[i-1] == '\n'){
  80130c:	e0bfed17 	ldw	r2,-76(fp)
  801310:	10ffffc4 	addi	r3,r2,-1
  801314:	00802074 	movhi	r2,129
  801318:	109f6c04 	addi	r2,r2,32176
  80131c:	10c5883a 	add	r2,r2,r3
  801320:	10800003 	ldbu	r2,0(r2)
  801324:	10803fcc 	andi	r2,r2,255
  801328:	1080201c 	xori	r2,r2,128
  80132c:	10bfe004 	addi	r2,r2,-128
  801330:	10800298 	cmpnei	r2,r2,10
  801334:	10006f1e 	bne	r2,zero,8014f4 <configurable_tlc+0x2f8>

					//add NULL to end of string to indicate end of string
					config_values[i] = '\0';
  801338:	00802074 	movhi	r2,129
  80133c:	109f6c04 	addi	r2,r2,32176
  801340:	e0ffed17 	ldw	r3,-76(fp)
  801344:	10c5883a 	add	r2,r2,r3
  801348:	10000005 	stb	zero,0(r2)
					//move iterator to position 0 (effectively flushing the buffer)
					i = 0;
  80134c:	e03fed15 	stw	zero,-76(fp)
					unsigned int k = 1; //iterator for array of c-strings
  801350:	00800044 	movi	r2,1
  801354:	e0bfef15 	stw	r2,-68(fp)

					//use strtok to split the UART string into separate strings from between the commas
					splitstrings[0] = strtok(config_values,comma);
  801358:	d1600204 	addi	r5,gp,-32760
  80135c:	01002074 	movhi	r4,129
  801360:	211f6c04 	addi	r4,r4,32176
  801364:	0803eac0 	call	803eac <strtok>
  801368:	1007883a 	mov	r3,r2
  80136c:	e0bff417 	ldw	r2,-48(fp)
  801370:	10c00015 	stw	r3,0(r2)
					while (splitstrings[k-1] != NULL) {
  801374:	00000d06 	br	8013ac <configurable_tlc+0x1b0>
							splitstrings[k] = strtok(NULL, comma);
  801378:	e0bfef17 	ldw	r2,-68(fp)
  80137c:	1085883a 	add	r2,r2,r2
  801380:	1085883a 	add	r2,r2,r2
  801384:	1007883a 	mov	r3,r2
  801388:	e0bff417 	ldw	r2,-48(fp)
  80138c:	10e1883a 	add	r16,r2,r3
  801390:	d1600204 	addi	r5,gp,-32760
  801394:	0009883a 	mov	r4,zero
  801398:	0803eac0 	call	803eac <strtok>
  80139c:	80800015 	stw	r2,0(r16)
							++k;
  8013a0:	e0bfef17 	ldw	r2,-68(fp)
  8013a4:	10800044 	addi	r2,r2,1
  8013a8:	e0bfef15 	stw	r2,-68(fp)
					i = 0;
					unsigned int k = 1; //iterator for array of c-strings

					//use strtok to split the UART string into separate strings from between the commas
					splitstrings[0] = strtok(config_values,comma);
					while (splitstrings[k-1] != NULL) {
  8013ac:	e0ffef17 	ldw	r3,-68(fp)
  8013b0:	00900034 	movhi	r2,16384
  8013b4:	10bfffc4 	addi	r2,r2,-1
  8013b8:	1885883a 	add	r2,r3,r2
  8013bc:	1085883a 	add	r2,r2,r2
  8013c0:	1085883a 	add	r2,r2,r2
  8013c4:	1007883a 	mov	r3,r2
  8013c8:	e0bff417 	ldw	r2,-48(fp)
  8013cc:	10c5883a 	add	r2,r2,r3
  8013d0:	10800017 	ldw	r2,0(r2)
  8013d4:	103fe81e 	bne	r2,zero,801378 <__alt_mem_onchip_mem+0xff781378>
							splitstrings[k] = strtok(NULL, comma);
							++k;
					}

					k = 0; //reset iterator for array of c-strings
  8013d8:	e03fef15 	stw	zero,-68(fp)
					//do base-10 conversion of split strings to integers using strtol
					//this returns 0 for an invalid integer, so we are assuming a 0ms timeout is invalid
					while (splitstrings[k] != NULL){
  8013dc:	00001606 	br	801438 <configurable_tlc+0x23c>
						numbers[k] = strtol(splitstrings[k],NULL,10);
  8013e0:	e0bfef17 	ldw	r2,-68(fp)
  8013e4:	1085883a 	add	r2,r2,r2
  8013e8:	1085883a 	add	r2,r2,r2
  8013ec:	1007883a 	mov	r3,r2
  8013f0:	e0bff417 	ldw	r2,-48(fp)
  8013f4:	10c5883a 	add	r2,r2,r3
  8013f8:	10800017 	ldw	r2,0(r2)
  8013fc:	01800284 	movi	r6,10
  801400:	000b883a 	mov	r5,zero
  801404:	1009883a 	mov	r4,r2
  801408:	08041a00 	call	8041a0 <strtol>
  80140c:	1007883a 	mov	r3,r2
  801410:	e0bfef17 	ldw	r2,-68(fp)
  801414:	1085883a 	add	r2,r2,r2
  801418:	1085883a 	add	r2,r2,r2
  80141c:	e13fec04 	addi	r4,fp,-80
  801420:	2085883a 	add	r2,r4,r2
  801424:	10800904 	addi	r2,r2,36
  801428:	10c00015 	stw	r3,0(r2)
						++k;
  80142c:	e0bfef17 	ldw	r2,-68(fp)
  801430:	10800044 	addi	r2,r2,1
  801434:	e0bfef15 	stw	r2,-68(fp)
					}

					k = 0; //reset iterator for array of c-strings
					//do base-10 conversion of split strings to integers using strtol
					//this returns 0 for an invalid integer, so we are assuming a 0ms timeout is invalid
					while (splitstrings[k] != NULL){
  801438:	e0bfef17 	ldw	r2,-68(fp)
  80143c:	1085883a 	add	r2,r2,r2
  801440:	1085883a 	add	r2,r2,r2
  801444:	1007883a 	mov	r3,r2
  801448:	e0bff417 	ldw	r2,-48(fp)
  80144c:	10c5883a 	add	r2,r2,r3
  801450:	10800017 	ldw	r2,0(r2)
  801454:	103fe21e 	bne	r2,zero,8013e0 <__alt_mem_onchip_mem+0xff7813e0>
						numbers[k] = strtol(splitstrings[k],NULL,10);
						++k;
					}

					if (k == 6){
  801458:	e0bfef17 	ldw	r2,-68(fp)
  80145c:	10800198 	cmpnei	r2,r2,6
  801460:	1000241e 	bne	r2,zero,8014f4 <configurable_tlc+0x2f8>
						unsigned int notinrange = 0;
  801464:	e03ff015 	stw	zero,-64(fp)
						for (int j = 0; j < 6; ++j){
  801468:	e03ff115 	stw	zero,-60(fp)
  80146c:	00001a06 	br	8014d8 <configurable_tlc+0x2dc>
							if ((numbers[j] <= 0) || (numbers[j] > 9999)){
  801470:	e0bff117 	ldw	r2,-60(fp)
  801474:	1085883a 	add	r2,r2,r2
  801478:	1085883a 	add	r2,r2,r2
  80147c:	e0ffec04 	addi	r3,fp,-80
  801480:	1885883a 	add	r2,r3,r2
  801484:	10800904 	addi	r2,r2,36
  801488:	10800017 	ldw	r2,0(r2)
  80148c:	0080090e 	bge	zero,r2,8014b4 <configurable_tlc+0x2b8>
  801490:	e0bff117 	ldw	r2,-60(fp)
  801494:	1085883a 	add	r2,r2,r2
  801498:	1085883a 	add	r2,r2,r2
  80149c:	e13fec04 	addi	r4,fp,-80
  8014a0:	2085883a 	add	r2,r4,r2
  8014a4:	10800904 	addi	r2,r2,36
  8014a8:	10800017 	ldw	r2,0(r2)
  8014ac:	1089c410 	cmplti	r2,r2,10000
  8014b0:	1000061e 	bne	r2,zero,8014cc <configurable_tlc+0x2d0>
								notinrange = 1;
  8014b4:	00800044 	movi	r2,1
  8014b8:	e0bff015 	stw	r2,-64(fp)
								printf("Numbers out of range, please re-enter numbers \n");
  8014bc:	01002074 	movhi	r4,129
  8014c0:	210f2f04 	addi	r4,r4,15548
  8014c4:	08039f80 	call	8039f8 <puts>
								break;
  8014c8:	00000606 	br	8014e4 <configurable_tlc+0x2e8>
						++k;
					}

					if (k == 6){
						unsigned int notinrange = 0;
						for (int j = 0; j < 6; ++j){
  8014cc:	e0bff117 	ldw	r2,-60(fp)
  8014d0:	10800044 	addi	r2,r2,1
  8014d4:	e0bff115 	stw	r2,-60(fp)
  8014d8:	e0bff117 	ldw	r2,-60(fp)
  8014dc:	10800190 	cmplti	r2,r2,6
  8014e0:	103fe31e 	bne	r2,zero,801470 <__alt_mem_onchip_mem+0xff781470>
								notinrange = 1;
								printf("Numbers out of range, please re-enter numbers \n");
								break;
							}
						}
						if (!(notinrange)){
  8014e4:	e0bff017 	ldw	r2,-64(fp)
  8014e8:	1000021e 	bne	r2,zero,8014f4 <configurable_tlc+0x2f8>
							strcomplete = 1;
  8014ec:	00800044 	movi	r2,1
  8014f0:	e0bfec15 	stw	r2,-80(fp)
			//allocate enough memory for each c-string in array
			for (int j = 0; j < sizeof(splitstrings); ++j) {
				splitstrings[j] = (char*)malloc(10);
			}
			//block code and get input from UART stream
			while (strcomplete == 0){
  8014f4:	e0bfec17 	ldw	r2,-80(fp)
  8014f8:	103f6e26 	beq	r2,zero,8012b4 <__alt_mem_onchip_mem+0xff7812b4>
						}
					}
				}
			}
			//since numbers have been discovered to be valid, assign them to the timer controlling variables
			t1 = numbers[0];
  8014fc:	e0bff517 	ldw	r2,-44(fp)
  801500:	d0a00315 	stw	r2,-32756(gp)
			t2 = numbers[1];
  801504:	e0bff617 	ldw	r2,-40(fp)
  801508:	d0a00415 	stw	r2,-32752(gp)
			t3 = numbers[2];
  80150c:	e0bff717 	ldw	r2,-36(fp)
  801510:	d0a00515 	stw	r2,-32748(gp)
			t4 = numbers[3];
  801514:	e0bff817 	ldw	r2,-32(fp)
  801518:	d0a00615 	stw	r2,-32744(gp)
			t5 = numbers[4];
  80151c:	e0bff917 	ldw	r2,-28(fp)
  801520:	d0a00715 	stw	r2,-32740(gp)
			t6 = numbers[5];
  801524:	e0bffa17 	ldw	r2,-24(fp)
  801528:	d0a00815 	stw	r2,-32736(gp)
		}
		if (!(timer_has_started)){
  80152c:	d0a75a17 	ldw	r2,-25240(gp)
  801530:	1000961e 	bne	r2,zero,80178c <configurable_tlc+0x590>
			alt_alarm_start(&timer_simple, t1, configurable_tlc_timer_isr, timerContext);
  801534:	d0a00317 	ldw	r2,-32756(gp)
  801538:	e1fff217 	ldw	r7,-56(fp)
  80153c:	01802034 	movhi	r6,128
  801540:	31817d04 	addi	r6,r6,1524
  801544:	100b883a 	mov	r5,r2
  801548:	01002074 	movhi	r4,129
  80154c:	211f5a04 	addi	r4,r4,32104
  801550:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  801554:	00800044 	movi	r2,1
  801558:	d0a75a15 	stw	r2,-25240(gp)
  80155c:	00008b06 	br	80178c <configurable_tlc+0x590>
		}
	}
	else if (current_state3 == gr_3){
  801560:	d0a76117 	ldw	r2,-25212(gp)
  801564:	10800058 	cmpnei	r2,r2,1
  801568:	1000111e 	bne	r2,zero,8015b0 <configurable_tlc+0x3b4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100001); //turn GREEN-RED on
  80156c:	00c00844 	movi	r3,33
  801570:	00804434 	movhi	r2,272
  801574:	10841c04 	addi	r2,r2,4208
  801578:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  80157c:	d0a75a17 	ldw	r2,-25240(gp)
  801580:	1000821e 	bne	r2,zero,80178c <configurable_tlc+0x590>
			alt_alarm_start(&timer_simple, t2, configurable_tlc_timer_isr, timerContext);
  801584:	d0a00417 	ldw	r2,-32752(gp)
  801588:	e1fff217 	ldw	r7,-56(fp)
  80158c:	01802034 	movhi	r6,128
  801590:	31817d04 	addi	r6,r6,1524
  801594:	100b883a 	mov	r5,r2
  801598:	01002074 	movhi	r4,129
  80159c:	211f5a04 	addi	r4,r4,32104
  8015a0:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  8015a4:	00800044 	movi	r2,1
  8015a8:	d0a75a15 	stw	r2,-25240(gp)
  8015ac:	00007706 	br	80178c <configurable_tlc+0x590>
		}
	}
	else if (current_state3 == grp1_3){
  8015b0:	d0a76117 	ldw	r2,-25212(gp)
  8015b4:	10800098 	cmpnei	r2,r2,2
  8015b8:	1000111e 	bne	r2,zero,801600 <configurable_tlc+0x404>
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b01100001); //turn GREEN-RED and PEDNS on
  8015bc:	00c01844 	movi	r3,97
  8015c0:	00804434 	movhi	r2,272
  8015c4:	10841c04 	addi	r2,r2,4208
  8015c8:	10c00035 	stwio	r3,0(r2)
			if (!(timer_has_started)){
  8015cc:	d0a75a17 	ldw	r2,-25240(gp)
  8015d0:	10006e1e 	bne	r2,zero,80178c <configurable_tlc+0x590>
				alt_alarm_start(&timer_simple, t2, configurable_tlc_timer_isr, timerContext);
  8015d4:	d0a00417 	ldw	r2,-32752(gp)
  8015d8:	e1fff217 	ldw	r7,-56(fp)
  8015dc:	01802034 	movhi	r6,128
  8015e0:	31817d04 	addi	r6,r6,1524
  8015e4:	100b883a 	mov	r5,r2
  8015e8:	01002074 	movhi	r4,129
  8015ec:	211f5a04 	addi	r4,r4,32104
  8015f0:	080f9140 	call	80f914 <alt_alarm_start>
				timer_has_started = 1;
  8015f4:	00800044 	movi	r2,1
  8015f8:	d0a75a15 	stw	r2,-25240(gp)
  8015fc:	00006306 	br	80178c <configurable_tlc+0x590>
			}
	}
	else if (current_state3 == yr_3){
  801600:	d0a76117 	ldw	r2,-25212(gp)
  801604:	108000d8 	cmpnei	r2,r2,3
  801608:	1000111e 	bne	r2,zero,801650 <configurable_tlc+0x454>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100010); //turn YELLOW-RED on
  80160c:	00c00884 	movi	r3,34
  801610:	00804434 	movhi	r2,272
  801614:	10841c04 	addi	r2,r2,4208
  801618:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  80161c:	d0a75a17 	ldw	r2,-25240(gp)
  801620:	10005a1e 	bne	r2,zero,80178c <configurable_tlc+0x590>
			alt_alarm_start(&timer_simple, t3, configurable_tlc_timer_isr, timerContext);
  801624:	d0a00517 	ldw	r2,-32748(gp)
  801628:	e1fff217 	ldw	r7,-56(fp)
  80162c:	01802034 	movhi	r6,128
  801630:	31817d04 	addi	r6,r6,1524
  801634:	100b883a 	mov	r5,r2
  801638:	01002074 	movhi	r4,129
  80163c:	211f5a04 	addi	r4,r4,32104
  801640:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  801644:	00800044 	movi	r2,1
  801648:	d0a75a15 	stw	r2,-25240(gp)
  80164c:	00004f06 	br	80178c <configurable_tlc+0x590>
		}
	}
	else if (current_state3 == rr2_3){
  801650:	d0a76117 	ldw	r2,-25212(gp)
  801654:	10800118 	cmpnei	r2,r2,4
  801658:	1000111e 	bne	r2,zero,8016a0 <configurable_tlc+0x4a4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
  80165c:	00c00904 	movi	r3,36
  801660:	00804434 	movhi	r2,272
  801664:	10841c04 	addi	r2,r2,4208
  801668:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  80166c:	d0a75a17 	ldw	r2,-25240(gp)
  801670:	1000461e 	bne	r2,zero,80178c <configurable_tlc+0x590>
			alt_alarm_start(&timer_simple, t4, configurable_tlc_timer_isr, timerContext);
  801674:	d0a00617 	ldw	r2,-32744(gp)
  801678:	e1fff217 	ldw	r7,-56(fp)
  80167c:	01802034 	movhi	r6,128
  801680:	31817d04 	addi	r6,r6,1524
  801684:	100b883a 	mov	r5,r2
  801688:	01002074 	movhi	r4,129
  80168c:	211f5a04 	addi	r4,r4,32104
  801690:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  801694:	00800044 	movi	r2,1
  801698:	d0a75a15 	stw	r2,-25240(gp)
  80169c:	00003b06 	br	80178c <configurable_tlc+0x590>
		}
	}
	else if (current_state3 == rg_3){
  8016a0:	d0a76117 	ldw	r2,-25212(gp)
  8016a4:	10800158 	cmpnei	r2,r2,5
  8016a8:	1000111e 	bne	r2,zero,8016f0 <configurable_tlc+0x4f4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00001100); //turn RED-GREEN on
  8016ac:	00c00304 	movi	r3,12
  8016b0:	00804434 	movhi	r2,272
  8016b4:	10841c04 	addi	r2,r2,4208
  8016b8:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  8016bc:	d0a75a17 	ldw	r2,-25240(gp)
  8016c0:	1000321e 	bne	r2,zero,80178c <configurable_tlc+0x590>
			alt_alarm_start(&timer_simple, t5, configurable_tlc_timer_isr, timerContext);
  8016c4:	d0a00717 	ldw	r2,-32740(gp)
  8016c8:	e1fff217 	ldw	r7,-56(fp)
  8016cc:	01802034 	movhi	r6,128
  8016d0:	31817d04 	addi	r6,r6,1524
  8016d4:	100b883a 	mov	r5,r2
  8016d8:	01002074 	movhi	r4,129
  8016dc:	211f5a04 	addi	r4,r4,32104
  8016e0:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  8016e4:	00800044 	movi	r2,1
  8016e8:	d0a75a15 	stw	r2,-25240(gp)
  8016ec:	00002706 	br	80178c <configurable_tlc+0x590>
		}
	}
	else if (current_state3 == rgp2_3){
  8016f0:	d0a76117 	ldw	r2,-25212(gp)
  8016f4:	10800198 	cmpnei	r2,r2,6
  8016f8:	1000111e 	bne	r2,zero,801740 <configurable_tlc+0x544>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b10001100); //turn RED-GREEN and PEDEW on
  8016fc:	00c02304 	movi	r3,140
  801700:	00804434 	movhi	r2,272
  801704:	10841c04 	addi	r2,r2,4208
  801708:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  80170c:	d0a75a17 	ldw	r2,-25240(gp)
  801710:	10001e1e 	bne	r2,zero,80178c <configurable_tlc+0x590>
			alt_alarm_start(&timer_simple, t5, configurable_tlc_timer_isr, timerContext);
  801714:	d0a00717 	ldw	r2,-32740(gp)
  801718:	e1fff217 	ldw	r7,-56(fp)
  80171c:	01802034 	movhi	r6,128
  801720:	31817d04 	addi	r6,r6,1524
  801724:	100b883a 	mov	r5,r2
  801728:	01002074 	movhi	r4,129
  80172c:	211f5a04 	addi	r4,r4,32104
  801730:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  801734:	00800044 	movi	r2,1
  801738:	d0a75a15 	stw	r2,-25240(gp)
  80173c:	00001306 	br	80178c <configurable_tlc+0x590>
		}
	}
	else if (current_state3 == ry_3){
  801740:	d0a76117 	ldw	r2,-25212(gp)
  801744:	108001d8 	cmpnei	r2,r2,7
  801748:	1000101e 	bne	r2,zero,80178c <configurable_tlc+0x590>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00010100); //turn RED-YELLOW on
  80174c:	00c00504 	movi	r3,20
  801750:	00804434 	movhi	r2,272
  801754:	10841c04 	addi	r2,r2,4208
  801758:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  80175c:	d0a75a17 	ldw	r2,-25240(gp)
  801760:	10000a1e 	bne	r2,zero,80178c <configurable_tlc+0x590>
			alt_alarm_start(&timer_simple, t6, configurable_tlc_timer_isr, timerContext);
  801764:	d0a00817 	ldw	r2,-32736(gp)
  801768:	e1fff217 	ldw	r7,-56(fp)
  80176c:	01802034 	movhi	r6,128
  801770:	31817d04 	addi	r6,r6,1524
  801774:	100b883a 	mov	r5,r2
  801778:	01002074 	movhi	r4,129
  80177c:	211f5a04 	addi	r4,r4,32104
  801780:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  801784:	00800044 	movi	r2,1
  801788:	d0a75a15 	stw	r2,-25240(gp)
		}
	}
	return 0;
  80178c:	0005883a 	mov	r2,zero
}
  801790:	e6ffff04 	addi	sp,fp,-4
  801794:	dfc00217 	ldw	ra,8(sp)
  801798:	df000117 	ldw	fp,4(sp)
  80179c:	dc000017 	ldw	r16,0(sp)
  8017a0:	dec00304 	addi	sp,sp,12
  8017a4:	f800283a 	ret

008017a8 <camera_tlc>:

// Mode 4
// Includes a Camera
int camera_tlc(){
  8017a8:	deffea04 	addi	sp,sp,-88
  8017ac:	dfc01515 	stw	ra,84(sp)
  8017b0:	df001415 	stw	fp,80(sp)
  8017b4:	dc001315 	stw	r16,76(sp)
  8017b8:	df001404 	addi	fp,sp,80
	void* timerContext = 0;
  8017bc:	e03ff215 	stw	zero,-56(fp)
	unsigned int switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  8017c0:	00804434 	movhi	r2,272
  8017c4:	10842404 	addi	r2,r2,4240
  8017c8:	10800037 	ldwio	r2,0(r2)
  8017cc:	e0bff315 	stw	r2,-52(fp)

	//loop through all states, starting timer on current state and setting outputs
	if (current_state4 == rr1_4){
  8017d0:	d0a76317 	ldw	r2,-25204(gp)
  8017d4:	1000d11e 	bne	r2,zero,801b1c <camera_tlc+0x374>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
  8017d8:	00c00904 	movi	r3,36
  8017dc:	00804434 	movhi	r2,272
  8017e0:	10841c04 	addi	r2,r2,4208
  8017e4:	10c00035 	stwio	r3,0(r2)
		//check switch value to see if there are new timer values
		switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  8017e8:	00804434 	movhi	r2,272
  8017ec:	10842404 	addi	r2,r2,4240
  8017f0:	10800037 	ldwio	r2,0(r2)
  8017f4:	e0bff315 	stw	r2,-52(fp)

		if (switch_value & (1<<17)){
  8017f8:	e0bff317 	ldw	r2,-52(fp)
  8017fc:	108000ac 	andhi	r2,r2,2
  801800:	1000b926 	beq	r2,zero,801ae8 <camera_tlc+0x340>
			//if switch 17 indicates configuration mode, block until complete valid string is received
			unsigned int strcomplete = 0;
  801804:	e03fec15 	stw	zero,-80(fp)
			unsigned int i = 0; //index for string retrieved from UART
  801808:	e03fed15 	stw	zero,-76(fp)
			char **splitstrings; //pointer to array of c-strings
			int numbers[10]; //array to store timeout values received from UART

			//allocate enough memory for array of c-strings
			splitstrings = (char**)malloc(10);
  80180c:	01000284 	movi	r4,10
  801810:	0802ef00 	call	802ef0 <malloc>
  801814:	e0bff415 	stw	r2,-48(fp)
			//allocate enough memory for each c-string in array
			for (int j = 0; j < sizeof(splitstrings); ++j) {
  801818:	e03fee15 	stw	zero,-72(fp)
  80181c:	00000c06 	br	801850 <camera_tlc+0xa8>
				splitstrings[j] = (char*)malloc(10);
  801820:	e0bfee17 	ldw	r2,-72(fp)
  801824:	1085883a 	add	r2,r2,r2
  801828:	1085883a 	add	r2,r2,r2
  80182c:	1007883a 	mov	r3,r2
  801830:	e0bff417 	ldw	r2,-48(fp)
  801834:	10e1883a 	add	r16,r2,r3
  801838:	01000284 	movi	r4,10
  80183c:	0802ef00 	call	802ef0 <malloc>
  801840:	80800015 	stw	r2,0(r16)
			int numbers[10]; //array to store timeout values received from UART

			//allocate enough memory for array of c-strings
			splitstrings = (char**)malloc(10);
			//allocate enough memory for each c-string in array
			for (int j = 0; j < sizeof(splitstrings); ++j) {
  801844:	e0bfee17 	ldw	r2,-72(fp)
  801848:	10800044 	addi	r2,r2,1
  80184c:	e0bfee15 	stw	r2,-72(fp)
  801850:	e0bfee17 	ldw	r2,-72(fp)
  801854:	10800130 	cmpltui	r2,r2,4
  801858:	103ff11e 	bne	r2,zero,801820 <__alt_mem_onchip_mem+0xff781820>
				splitstrings[j] = (char*)malloc(10);
			}
			//block code and get input from UART stream
			while (strcomplete == 0){
  80185c:	00009406 	br	801ab0 <camera_tlc+0x308>
				config_values[i] = fgetc(uart);
  801860:	d0a76a17 	ldw	r2,-25176(gp)
  801864:	1009883a 	mov	r4,r2
  801868:	08020500 	call	802050 <fgetc>
  80186c:	1009883a 	mov	r4,r2
  801870:	00802074 	movhi	r2,129
  801874:	109f6c04 	addi	r2,r2,32176
  801878:	e0ffed17 	ldw	r3,-76(fp)
  80187c:	10c5883a 	add	r2,r2,r3
  801880:	11000005 	stb	r4,0(r2)
				printf("%c",config_values[i]);
  801884:	00802074 	movhi	r2,129
  801888:	109f6c04 	addi	r2,r2,32176
  80188c:	e0ffed17 	ldw	r3,-76(fp)
  801890:	10c5883a 	add	r2,r2,r3
  801894:	10800003 	ldbu	r2,0(r2)
  801898:	10803fcc 	andi	r2,r2,255
  80189c:	1080201c 	xori	r2,r2,128
  8018a0:	10bfe004 	addi	r2,r2,-128
  8018a4:	1009883a 	mov	r4,r2
  8018a8:	08039200 	call	803920 <putchar>
				++i;
  8018ac:	e0bfed17 	ldw	r2,-76(fp)
  8018b0:	10800044 	addi	r2,r2,1
  8018b4:	e0bfed15 	stw	r2,-76(fp)
				if (config_values[i-1] == '\n'){
  8018b8:	e0bfed17 	ldw	r2,-76(fp)
  8018bc:	10ffffc4 	addi	r3,r2,-1
  8018c0:	00802074 	movhi	r2,129
  8018c4:	109f6c04 	addi	r2,r2,32176
  8018c8:	10c5883a 	add	r2,r2,r3
  8018cc:	10800003 	ldbu	r2,0(r2)
  8018d0:	10803fcc 	andi	r2,r2,255
  8018d4:	1080201c 	xori	r2,r2,128
  8018d8:	10bfe004 	addi	r2,r2,-128
  8018dc:	10800298 	cmpnei	r2,r2,10
  8018e0:	1000731e 	bne	r2,zero,801ab0 <camera_tlc+0x308>

					//add NULL to end of string to indicate end of string
					config_values[i] = '\0';
  8018e4:	00802074 	movhi	r2,129
  8018e8:	109f6c04 	addi	r2,r2,32176
  8018ec:	e0ffed17 	ldw	r3,-76(fp)
  8018f0:	10c5883a 	add	r2,r2,r3
  8018f4:	10000005 	stb	zero,0(r2)
					//move iterator to position 0 (effectively flushing the buffer)
					i = 0;
  8018f8:	e03fed15 	stw	zero,-76(fp)
					unsigned int k = 1; //iterator for array of c-strings
  8018fc:	00800044 	movi	r2,1
  801900:	e0bfef15 	stw	r2,-68(fp)

					//use strtok to split the UART string into separate strings from between the commas
					splitstrings[0] = strtok(config_values,comma);
  801904:	d1600204 	addi	r5,gp,-32760
  801908:	01002074 	movhi	r4,129
  80190c:	211f6c04 	addi	r4,r4,32176
  801910:	0803eac0 	call	803eac <strtok>
  801914:	1007883a 	mov	r3,r2
  801918:	e0bff417 	ldw	r2,-48(fp)
  80191c:	10c00015 	stw	r3,0(r2)
					while (splitstrings[k-1] != NULL) {
  801920:	00000d06 	br	801958 <camera_tlc+0x1b0>
							splitstrings[k] = strtok(NULL, comma);
  801924:	e0bfef17 	ldw	r2,-68(fp)
  801928:	1085883a 	add	r2,r2,r2
  80192c:	1085883a 	add	r2,r2,r2
  801930:	1007883a 	mov	r3,r2
  801934:	e0bff417 	ldw	r2,-48(fp)
  801938:	10e1883a 	add	r16,r2,r3
  80193c:	d1600204 	addi	r5,gp,-32760
  801940:	0009883a 	mov	r4,zero
  801944:	0803eac0 	call	803eac <strtok>
  801948:	80800015 	stw	r2,0(r16)
							++k;
  80194c:	e0bfef17 	ldw	r2,-68(fp)
  801950:	10800044 	addi	r2,r2,1
  801954:	e0bfef15 	stw	r2,-68(fp)
					i = 0;
					unsigned int k = 1; //iterator for array of c-strings

					//use strtok to split the UART string into separate strings from between the commas
					splitstrings[0] = strtok(config_values,comma);
					while (splitstrings[k-1] != NULL) {
  801958:	e0ffef17 	ldw	r3,-68(fp)
  80195c:	00900034 	movhi	r2,16384
  801960:	10bfffc4 	addi	r2,r2,-1
  801964:	1885883a 	add	r2,r3,r2
  801968:	1085883a 	add	r2,r2,r2
  80196c:	1085883a 	add	r2,r2,r2
  801970:	1007883a 	mov	r3,r2
  801974:	e0bff417 	ldw	r2,-48(fp)
  801978:	10c5883a 	add	r2,r2,r3
  80197c:	10800017 	ldw	r2,0(r2)
  801980:	103fe81e 	bne	r2,zero,801924 <__alt_mem_onchip_mem+0xff781924>
							splitstrings[k] = strtok(NULL, comma);
							++k;
					}

					k = 0; //reset iterator for array of c-strings
  801984:	e03fef15 	stw	zero,-68(fp)
					//do base-10 conversion of split strings to integers using strtol
					//this returns 0 for an invalid integer, so we are assuming a 0ms timeout is invalid
					while (splitstrings[k] != NULL){
  801988:	00001606 	br	8019e4 <camera_tlc+0x23c>
						numbers[k] = strtol(splitstrings[k],NULL,10);
  80198c:	e0bfef17 	ldw	r2,-68(fp)
  801990:	1085883a 	add	r2,r2,r2
  801994:	1085883a 	add	r2,r2,r2
  801998:	1007883a 	mov	r3,r2
  80199c:	e0bff417 	ldw	r2,-48(fp)
  8019a0:	10c5883a 	add	r2,r2,r3
  8019a4:	10800017 	ldw	r2,0(r2)
  8019a8:	01800284 	movi	r6,10
  8019ac:	000b883a 	mov	r5,zero
  8019b0:	1009883a 	mov	r4,r2
  8019b4:	08041a00 	call	8041a0 <strtol>
  8019b8:	1007883a 	mov	r3,r2
  8019bc:	e0bfef17 	ldw	r2,-68(fp)
  8019c0:	1085883a 	add	r2,r2,r2
  8019c4:	1085883a 	add	r2,r2,r2
  8019c8:	e13fec04 	addi	r4,fp,-80
  8019cc:	2085883a 	add	r2,r4,r2
  8019d0:	10800904 	addi	r2,r2,36
  8019d4:	10c00015 	stw	r3,0(r2)
						++k;
  8019d8:	e0bfef17 	ldw	r2,-68(fp)
  8019dc:	10800044 	addi	r2,r2,1
  8019e0:	e0bfef15 	stw	r2,-68(fp)
					}

					k = 0; //reset iterator for array of c-strings
					//do base-10 conversion of split strings to integers using strtol
					//this returns 0 for an invalid integer, so we are assuming a 0ms timeout is invalid
					while (splitstrings[k] != NULL){
  8019e4:	e0bfef17 	ldw	r2,-68(fp)
  8019e8:	1085883a 	add	r2,r2,r2
  8019ec:	1085883a 	add	r2,r2,r2
  8019f0:	1007883a 	mov	r3,r2
  8019f4:	e0bff417 	ldw	r2,-48(fp)
  8019f8:	10c5883a 	add	r2,r2,r3
  8019fc:	10800017 	ldw	r2,0(r2)
  801a00:	103fe21e 	bne	r2,zero,80198c <__alt_mem_onchip_mem+0xff78198c>
						numbers[k] = strtol(splitstrings[k],NULL,10);
						++k;
					}

					if (k == 6){
  801a04:	e0bfef17 	ldw	r2,-68(fp)
  801a08:	10800198 	cmpnei	r2,r2,6
  801a0c:	1000281e 	bne	r2,zero,801ab0 <camera_tlc+0x308>
						unsigned int notinrange = 0;
  801a10:	e03ff015 	stw	zero,-64(fp)
						for (int j = 0; j < 6; ++j){
  801a14:	e03ff115 	stw	zero,-60(fp)
  801a18:	00001e06 	br	801a94 <camera_tlc+0x2ec>
							if ((numbers[j] <= 0) || (numbers[j] > 9999)){
  801a1c:	e0bff117 	ldw	r2,-60(fp)
  801a20:	1085883a 	add	r2,r2,r2
  801a24:	1085883a 	add	r2,r2,r2
  801a28:	e0ffec04 	addi	r3,fp,-80
  801a2c:	1885883a 	add	r2,r3,r2
  801a30:	10800904 	addi	r2,r2,36
  801a34:	10800017 	ldw	r2,0(r2)
  801a38:	0080090e 	bge	zero,r2,801a60 <camera_tlc+0x2b8>
  801a3c:	e0bff117 	ldw	r2,-60(fp)
  801a40:	1085883a 	add	r2,r2,r2
  801a44:	1085883a 	add	r2,r2,r2
  801a48:	e13fec04 	addi	r4,fp,-80
  801a4c:	2085883a 	add	r2,r4,r2
  801a50:	10800904 	addi	r2,r2,36
  801a54:	10800017 	ldw	r2,0(r2)
  801a58:	1089c410 	cmplti	r2,r2,10000
  801a5c:	10000a1e 	bne	r2,zero,801a88 <camera_tlc+0x2e0>
								notinrange = 1;
  801a60:	00800044 	movi	r2,1
  801a64:	e0bff015 	stw	r2,-64(fp)
								fprintf(uart,"Numbers out of range, please re-enter numbers\r\n");
  801a68:	d0a76a17 	ldw	r2,-25176(gp)
  801a6c:	100f883a 	mov	r7,r2
  801a70:	01800bc4 	movi	r6,47
  801a74:	01400044 	movi	r5,1
  801a78:	01002074 	movhi	r4,129
  801a7c:	210f3b04 	addi	r4,r4,15596
  801a80:	0802d000 	call	802d00 <fwrite>
								break;
  801a84:	00000606 	br	801aa0 <camera_tlc+0x2f8>
						++k;
					}

					if (k == 6){
						unsigned int notinrange = 0;
						for (int j = 0; j < 6; ++j){
  801a88:	e0bff117 	ldw	r2,-60(fp)
  801a8c:	10800044 	addi	r2,r2,1
  801a90:	e0bff115 	stw	r2,-60(fp)
  801a94:	e0bff117 	ldw	r2,-60(fp)
  801a98:	10800190 	cmplti	r2,r2,6
  801a9c:	103fdf1e 	bne	r2,zero,801a1c <__alt_mem_onchip_mem+0xff781a1c>
								notinrange = 1;
								fprintf(uart,"Numbers out of range, please re-enter numbers\r\n");
								break;
							}
						}
						if (!(notinrange)){
  801aa0:	e0bff017 	ldw	r2,-64(fp)
  801aa4:	1000021e 	bne	r2,zero,801ab0 <camera_tlc+0x308>
							strcomplete = 1;
  801aa8:	00800044 	movi	r2,1
  801aac:	e0bfec15 	stw	r2,-80(fp)
			//allocate enough memory for each c-string in array
			for (int j = 0; j < sizeof(splitstrings); ++j) {
				splitstrings[j] = (char*)malloc(10);
			}
			//block code and get input from UART stream
			while (strcomplete == 0){
  801ab0:	e0bfec17 	ldw	r2,-80(fp)
  801ab4:	103f6a26 	beq	r2,zero,801860 <__alt_mem_onchip_mem+0xff781860>
						}
					}
				}
			}
			//since numbers have been discovered to be valid, assign them to the timer controlling variables
			t1 = numbers[0];
  801ab8:	e0bff517 	ldw	r2,-44(fp)
  801abc:	d0a00315 	stw	r2,-32756(gp)
			t2 = numbers[1];
  801ac0:	e0bff617 	ldw	r2,-40(fp)
  801ac4:	d0a00415 	stw	r2,-32752(gp)
			t3 = numbers[2];
  801ac8:	e0bff717 	ldw	r2,-36(fp)
  801acc:	d0a00515 	stw	r2,-32748(gp)
			t4 = numbers[3];
  801ad0:	e0bff817 	ldw	r2,-32(fp)
  801ad4:	d0a00615 	stw	r2,-32744(gp)
			t5 = numbers[4];
  801ad8:	e0bff917 	ldw	r2,-28(fp)
  801adc:	d0a00715 	stw	r2,-32740(gp)
			t6 = numbers[5];
  801ae0:	e0bffa17 	ldw	r2,-24(fp)
  801ae4:	d0a00815 	stw	r2,-32736(gp)
		}

		if (!(timer_has_started)){
  801ae8:	d0a75a17 	ldw	r2,-25240(gp)
  801aec:	1000961e 	bne	r2,zero,801d48 <camera_tlc+0x5a0>
			alt_alarm_start(&timer_simple, t1, camera_tlc_timer_isr, timerContext);
  801af0:	d0a00317 	ldw	r2,-32756(gp)
  801af4:	e1fff217 	ldw	r7,-56(fp)
  801af8:	01802034 	movhi	r6,128
  801afc:	31820f04 	addi	r6,r6,2108
  801b00:	100b883a 	mov	r5,r2
  801b04:	01002074 	movhi	r4,129
  801b08:	211f5a04 	addi	r4,r4,32104
  801b0c:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  801b10:	00800044 	movi	r2,1
  801b14:	d0a75a15 	stw	r2,-25240(gp)
  801b18:	00008b06 	br	801d48 <camera_tlc+0x5a0>
		}
	}
	else if (current_state4 == gr_4){
  801b1c:	d0a76317 	ldw	r2,-25204(gp)
  801b20:	10800058 	cmpnei	r2,r2,1
  801b24:	1000111e 	bne	r2,zero,801b6c <camera_tlc+0x3c4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100001); //turn GREEN-RED on
  801b28:	00c00844 	movi	r3,33
  801b2c:	00804434 	movhi	r2,272
  801b30:	10841c04 	addi	r2,r2,4208
  801b34:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801b38:	d0a75a17 	ldw	r2,-25240(gp)
  801b3c:	1000821e 	bne	r2,zero,801d48 <camera_tlc+0x5a0>
			alt_alarm_start(&timer_simple, t2, camera_tlc_timer_isr, timerContext);
  801b40:	d0a00417 	ldw	r2,-32752(gp)
  801b44:	e1fff217 	ldw	r7,-56(fp)
  801b48:	01802034 	movhi	r6,128
  801b4c:	31820f04 	addi	r6,r6,2108
  801b50:	100b883a 	mov	r5,r2
  801b54:	01002074 	movhi	r4,129
  801b58:	211f5a04 	addi	r4,r4,32104
  801b5c:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  801b60:	00800044 	movi	r2,1
  801b64:	d0a75a15 	stw	r2,-25240(gp)
  801b68:	00007706 	br	801d48 <camera_tlc+0x5a0>
		}
	}
	else if (current_state4 == grp1_4){
  801b6c:	d0a76317 	ldw	r2,-25204(gp)
  801b70:	10800098 	cmpnei	r2,r2,2
  801b74:	1000111e 	bne	r2,zero,801bbc <camera_tlc+0x414>
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b01100001); //turn GREEN-RED and PEDNS on
  801b78:	00c01844 	movi	r3,97
  801b7c:	00804434 	movhi	r2,272
  801b80:	10841c04 	addi	r2,r2,4208
  801b84:	10c00035 	stwio	r3,0(r2)
			if (!(timer_has_started)){
  801b88:	d0a75a17 	ldw	r2,-25240(gp)
  801b8c:	10006e1e 	bne	r2,zero,801d48 <camera_tlc+0x5a0>
				alt_alarm_start(&timer_simple, t2, camera_tlc_timer_isr, timerContext);
  801b90:	d0a00417 	ldw	r2,-32752(gp)
  801b94:	e1fff217 	ldw	r7,-56(fp)
  801b98:	01802034 	movhi	r6,128
  801b9c:	31820f04 	addi	r6,r6,2108
  801ba0:	100b883a 	mov	r5,r2
  801ba4:	01002074 	movhi	r4,129
  801ba8:	211f5a04 	addi	r4,r4,32104
  801bac:	080f9140 	call	80f914 <alt_alarm_start>
				timer_has_started = 1;
  801bb0:	00800044 	movi	r2,1
  801bb4:	d0a75a15 	stw	r2,-25240(gp)
  801bb8:	00006306 	br	801d48 <camera_tlc+0x5a0>
			}
	}
	else if (current_state4 == yr_4){
  801bbc:	d0a76317 	ldw	r2,-25204(gp)
  801bc0:	108000d8 	cmpnei	r2,r2,3
  801bc4:	1000111e 	bne	r2,zero,801c0c <camera_tlc+0x464>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100010); //turn YELLOW-RED on
  801bc8:	00c00884 	movi	r3,34
  801bcc:	00804434 	movhi	r2,272
  801bd0:	10841c04 	addi	r2,r2,4208
  801bd4:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801bd8:	d0a75a17 	ldw	r2,-25240(gp)
  801bdc:	10005a1e 	bne	r2,zero,801d48 <camera_tlc+0x5a0>
			alt_alarm_start(&timer_simple, t3, camera_tlc_timer_isr, timerContext);
  801be0:	d0a00517 	ldw	r2,-32748(gp)
  801be4:	e1fff217 	ldw	r7,-56(fp)
  801be8:	01802034 	movhi	r6,128
  801bec:	31820f04 	addi	r6,r6,2108
  801bf0:	100b883a 	mov	r5,r2
  801bf4:	01002074 	movhi	r4,129
  801bf8:	211f5a04 	addi	r4,r4,32104
  801bfc:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  801c00:	00800044 	movi	r2,1
  801c04:	d0a75a15 	stw	r2,-25240(gp)
  801c08:	00004f06 	br	801d48 <camera_tlc+0x5a0>
		}
	}
	else if (current_state4 == rr2_4){
  801c0c:	d0a76317 	ldw	r2,-25204(gp)
  801c10:	10800118 	cmpnei	r2,r2,4
  801c14:	1000111e 	bne	r2,zero,801c5c <camera_tlc+0x4b4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
  801c18:	00c00904 	movi	r3,36
  801c1c:	00804434 	movhi	r2,272
  801c20:	10841c04 	addi	r2,r2,4208
  801c24:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801c28:	d0a75a17 	ldw	r2,-25240(gp)
  801c2c:	1000461e 	bne	r2,zero,801d48 <camera_tlc+0x5a0>
			alt_alarm_start(&timer_simple, t4, camera_tlc_timer_isr, timerContext);
  801c30:	d0a00617 	ldw	r2,-32744(gp)
  801c34:	e1fff217 	ldw	r7,-56(fp)
  801c38:	01802034 	movhi	r6,128
  801c3c:	31820f04 	addi	r6,r6,2108
  801c40:	100b883a 	mov	r5,r2
  801c44:	01002074 	movhi	r4,129
  801c48:	211f5a04 	addi	r4,r4,32104
  801c4c:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  801c50:	00800044 	movi	r2,1
  801c54:	d0a75a15 	stw	r2,-25240(gp)
  801c58:	00003b06 	br	801d48 <camera_tlc+0x5a0>
		}
	}
	else if (current_state4 == rg_4){
  801c5c:	d0a76317 	ldw	r2,-25204(gp)
  801c60:	10800158 	cmpnei	r2,r2,5
  801c64:	1000111e 	bne	r2,zero,801cac <camera_tlc+0x504>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00001100); //turn RED-GREEN on
  801c68:	00c00304 	movi	r3,12
  801c6c:	00804434 	movhi	r2,272
  801c70:	10841c04 	addi	r2,r2,4208
  801c74:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801c78:	d0a75a17 	ldw	r2,-25240(gp)
  801c7c:	1000321e 	bne	r2,zero,801d48 <camera_tlc+0x5a0>
			alt_alarm_start(&timer_simple, t5, camera_tlc_timer_isr, timerContext);
  801c80:	d0a00717 	ldw	r2,-32740(gp)
  801c84:	e1fff217 	ldw	r7,-56(fp)
  801c88:	01802034 	movhi	r6,128
  801c8c:	31820f04 	addi	r6,r6,2108
  801c90:	100b883a 	mov	r5,r2
  801c94:	01002074 	movhi	r4,129
  801c98:	211f5a04 	addi	r4,r4,32104
  801c9c:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  801ca0:	00800044 	movi	r2,1
  801ca4:	d0a75a15 	stw	r2,-25240(gp)
  801ca8:	00002706 	br	801d48 <camera_tlc+0x5a0>
		}
	}
	else if (current_state4 == rgp2_4){
  801cac:	d0a76317 	ldw	r2,-25204(gp)
  801cb0:	10800198 	cmpnei	r2,r2,6
  801cb4:	1000111e 	bne	r2,zero,801cfc <camera_tlc+0x554>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b10001100); //turn RED-GREEN and PEDEW on
  801cb8:	00c02304 	movi	r3,140
  801cbc:	00804434 	movhi	r2,272
  801cc0:	10841c04 	addi	r2,r2,4208
  801cc4:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801cc8:	d0a75a17 	ldw	r2,-25240(gp)
  801ccc:	10001e1e 	bne	r2,zero,801d48 <camera_tlc+0x5a0>
			alt_alarm_start(&timer_simple, t5, camera_tlc_timer_isr, timerContext);
  801cd0:	d0a00717 	ldw	r2,-32740(gp)
  801cd4:	e1fff217 	ldw	r7,-56(fp)
  801cd8:	01802034 	movhi	r6,128
  801cdc:	31820f04 	addi	r6,r6,2108
  801ce0:	100b883a 	mov	r5,r2
  801ce4:	01002074 	movhi	r4,129
  801ce8:	211f5a04 	addi	r4,r4,32104
  801cec:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  801cf0:	00800044 	movi	r2,1
  801cf4:	d0a75a15 	stw	r2,-25240(gp)
  801cf8:	00001306 	br	801d48 <camera_tlc+0x5a0>
		}
	}
	else if (current_state4 == ry_4){
  801cfc:	d0a76317 	ldw	r2,-25204(gp)
  801d00:	108001d8 	cmpnei	r2,r2,7
  801d04:	1000101e 	bne	r2,zero,801d48 <camera_tlc+0x5a0>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00010100); //turn RED-YELLOW on
  801d08:	00c00504 	movi	r3,20
  801d0c:	00804434 	movhi	r2,272
  801d10:	10841c04 	addi	r2,r2,4208
  801d14:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801d18:	d0a75a17 	ldw	r2,-25240(gp)
  801d1c:	10000a1e 	bne	r2,zero,801d48 <camera_tlc+0x5a0>
			alt_alarm_start(&timer_simple, t6, camera_tlc_timer_isr, timerContext);
  801d20:	d0a00817 	ldw	r2,-32736(gp)
  801d24:	e1fff217 	ldw	r7,-56(fp)
  801d28:	01802034 	movhi	r6,128
  801d2c:	31820f04 	addi	r6,r6,2108
  801d30:	100b883a 	mov	r5,r2
  801d34:	01002074 	movhi	r4,129
  801d38:	211f5a04 	addi	r4,r4,32104
  801d3c:	080f9140 	call	80f914 <alt_alarm_start>
			timer_has_started = 1;
  801d40:	00800044 	movi	r2,1
  801d44:	d0a75a15 	stw	r2,-25240(gp)
		}
	}
	return 0;
  801d48:	0005883a 	mov	r2,zero
}
  801d4c:	e6ffff04 	addi	sp,fp,-4
  801d50:	dfc00217 	ldw	ra,8(sp)
  801d54:	df000117 	ldw	fp,4(sp)
  801d58:	dc000017 	ldw	r16,0(sp)
  801d5c:	dec00304 	addi	sp,sp,12
  801d60:	f800283a 	ret

00801d64 <main>:

int main() {
  801d64:	defffc04 	addi	sp,sp,-16
  801d68:	dfc00315 	stw	ra,12(sp)
  801d6c:	df000215 	stw	fp,8(sp)
  801d70:	df000204 	addi	fp,sp,8
	unsigned int switch_value = 0;
  801d74:	e03ffe15 	stw	zero,-8(fp)
	void* context = 0;
  801d78:	e03fff15 	stw	zero,-4(fp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
  801d7c:	0007883a 	mov	r3,zero
  801d80:	00804434 	movhi	r2,272
  801d84:	10842b04 	addi	r2,r2,4268
  801d88:	10c00035 	stwio	r3,0(r2)
	//enable interrupts for all buttons
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0x7);
  801d8c:	00c001c4 	movi	r3,7
  801d90:	00804434 	movhi	r2,272
  801d94:	10842a04 	addi	r2,r2,4264
  801d98:	10c00035 	stwio	r3,0(r2)
	//register the button interrupt ISR
	alt_irq_register(BUTTONS_IRQ, context, button_interrupt);
  801d9c:	01802034 	movhi	r6,128
  801da0:	3182c004 	addi	r6,r6,2816
  801da4:	e17fff17 	ldw	r5,-4(fp)
  801da8:	01000104 	movi	r4,4
  801dac:	080fc640 	call	80fc64 <alt_irq_register>
	//turn on the LCD
	lcd = fopen(LCD_NAME, "w");
  801db0:	01402074 	movhi	r5,129
  801db4:	294f4704 	addi	r5,r5,15644
  801db8:	01002074 	movhi	r4,129
  801dbc:	210f4804 	addi	r4,r4,15648
  801dc0:	080256c0 	call	80256c <fopen>
  801dc4:	d0a76915 	stw	r2,-25180(gp)
	uart = fopen(UART_NAME, "r+"); //Open an existing file for both reading and writing.
  801dc8:	01402074 	movhi	r5,129
  801dcc:	294f4b04 	addi	r5,r5,15660
  801dd0:	01002074 	movhi	r4,129
  801dd4:	210f4c04 	addi	r4,r4,15664
  801dd8:	080256c0 	call	80256c <fopen>
  801ddc:	d0a76a15 	stw	r2,-25176(gp)
	//The initial contents of the file are unchanged and the initial file position is at the beginning of the file.

	while(1) {
		//read switch value and bitmask to check specific switches (descending priority)
		switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  801de0:	00804434 	movhi	r2,272
  801de4:	10842404 	addi	r2,r2,4240
  801de8:	10800037 	ldwio	r2,0(r2)
  801dec:	e0bffe15 	stw	r2,-8(fp)
		//set mode request depending on switch configuration
		//priority encoded (descending order, i.e. mode 4 is highest and mode 1 is lowest)
		if ((1<<3 & switch_value)) {
  801df0:	e0bffe17 	ldw	r2,-8(fp)
  801df4:	1080020c 	andi	r2,r2,8
  801df8:	10000326 	beq	r2,zero,801e08 <main+0xa4>
			mode_request = 4;
  801dfc:	00800104 	movi	r2,4
  801e00:	d0a75c15 	stw	r2,-25232(gp)
  801e04:	00001306 	br	801e54 <main+0xf0>
		}
		else if ((1<<2 & switch_value)) {
  801e08:	e0bffe17 	ldw	r2,-8(fp)
  801e0c:	1080010c 	andi	r2,r2,4
  801e10:	10000326 	beq	r2,zero,801e20 <main+0xbc>
			mode_request = 3;
  801e14:	008000c4 	movi	r2,3
  801e18:	d0a75c15 	stw	r2,-25232(gp)
  801e1c:	00000d06 	br	801e54 <main+0xf0>
		}
		else if ((1<<1 & switch_value)) {
  801e20:	e0bffe17 	ldw	r2,-8(fp)
  801e24:	1080008c 	andi	r2,r2,2
  801e28:	10000326 	beq	r2,zero,801e38 <main+0xd4>
			mode_request = 2;
  801e2c:	00800084 	movi	r2,2
  801e30:	d0a75c15 	stw	r2,-25232(gp)
  801e34:	00000706 	br	801e54 <main+0xf0>
		}
		else if ((1<<0 & switch_value)) {
  801e38:	e0bffe17 	ldw	r2,-8(fp)
  801e3c:	1080004c 	andi	r2,r2,1
  801e40:	10000326 	beq	r2,zero,801e50 <main+0xec>
			mode_request = 1;
  801e44:	00800044 	movi	r2,1
  801e48:	d0a75c15 	stw	r2,-25232(gp)
  801e4c:	00000106 	br	801e54 <main+0xf0>
		}
		else
			mode_request = 0;
  801e50:	d0275c15 	stw	zero,-25232(gp)

		//if there is a new mode request:
		//check if we are at a safe state (corresponding to the mode we are in)
		//if safe, then change mode (and make sure to reset all states and interrupt flags)
		if (current_mode != mode_request) {
  801e54:	d0e00017 	ldw	r3,-32768(gp)
  801e58:	d0a75c17 	ldw	r2,-25232(gp)
  801e5c:	18803c26 	beq	r3,r2,801f50 <main+0x1ec>
			switch(current_mode){
  801e60:	d0a00017 	ldw	r2,-32768(gp)
  801e64:	10c000a0 	cmpeqi	r3,r2,2
  801e68:	1800131e 	bne	r3,zero,801eb8 <main+0x154>
  801e6c:	10c000c8 	cmpgei	r3,r2,3
  801e70:	1800031e 	bne	r3,zero,801e80 <main+0x11c>
  801e74:	10800060 	cmpeqi	r2,r2,1
  801e78:	1000061e 	bne	r2,zero,801e94 <main+0x130>
  801e7c:	00002906 	br	801f24 <main+0x1c0>
  801e80:	10c000e0 	cmpeqi	r3,r2,3
  801e84:	1800151e 	bne	r3,zero,801edc <main+0x178>
  801e88:	10800120 	cmpeqi	r2,r2,4
  801e8c:	10001c1e 	bne	r2,zero,801f00 <main+0x19c>
  801e90:	00002406 	br	801f24 <main+0x1c0>
			case 1:
				if ((current_state1 == rr1_1) || (current_state1 == rr2_1)){
  801e94:	d0a75d17 	ldw	r2,-25228(gp)
  801e98:	10000326 	beq	r2,zero,801ea8 <main+0x144>
  801e9c:	d0a75d17 	ldw	r2,-25228(gp)
  801ea0:	108000d8 	cmpnei	r2,r2,3
  801ea4:	1000231e 	bne	r2,zero,801f34 <main+0x1d0>
					current_mode = mode_request;
  801ea8:	d0a75c17 	ldw	r2,-25232(gp)
  801eac:	d0a00015 	stw	r2,-32768(gp)
					reset_volatiles();
  801eb0:	08002900 	call	800290 <reset_volatiles>
				}
				break;
  801eb4:	00001f06 	br	801f34 <main+0x1d0>
			case 2:
				if ((current_state2 == rr1_2) || (current_state2 == rr2_2)){
  801eb8:	d0a75f17 	ldw	r2,-25220(gp)
  801ebc:	10000326 	beq	r2,zero,801ecc <main+0x168>
  801ec0:	d0a75f17 	ldw	r2,-25220(gp)
  801ec4:	10800118 	cmpnei	r2,r2,4
  801ec8:	10001c1e 	bne	r2,zero,801f3c <main+0x1d8>
					current_mode = mode_request;
  801ecc:	d0a75c17 	ldw	r2,-25232(gp)
  801ed0:	d0a00015 	stw	r2,-32768(gp)
					reset_volatiles();
  801ed4:	08002900 	call	800290 <reset_volatiles>
				}
				break;
  801ed8:	00001806 	br	801f3c <main+0x1d8>
			case 3:
				if ((current_state3 == rr1_3) || (current_state3 == rr2_3)){
  801edc:	d0a76117 	ldw	r2,-25212(gp)
  801ee0:	10000326 	beq	r2,zero,801ef0 <main+0x18c>
  801ee4:	d0a76117 	ldw	r2,-25212(gp)
  801ee8:	10800118 	cmpnei	r2,r2,4
  801eec:	1000151e 	bne	r2,zero,801f44 <main+0x1e0>
					current_mode = mode_request;
  801ef0:	d0a75c17 	ldw	r2,-25232(gp)
  801ef4:	d0a00015 	stw	r2,-32768(gp)
					reset_volatiles();
  801ef8:	08002900 	call	800290 <reset_volatiles>
				}
				break;
  801efc:	00001106 	br	801f44 <main+0x1e0>
			case 4:
				if ((current_state4 == rr1_4) || (current_state4 == rr2_4)){
  801f00:	d0a76317 	ldw	r2,-25204(gp)
  801f04:	10000326 	beq	r2,zero,801f14 <main+0x1b0>
  801f08:	d0a76317 	ldw	r2,-25204(gp)
  801f0c:	10800118 	cmpnei	r2,r2,4
  801f10:	10000e1e 	bne	r2,zero,801f4c <main+0x1e8>
					current_mode = mode_request;
  801f14:	d0a75c17 	ldw	r2,-25232(gp)
  801f18:	d0a00015 	stw	r2,-32768(gp)
					reset_volatiles();
  801f1c:	08002900 	call	800290 <reset_volatiles>
				}
				break;
  801f20:	00000a06 	br	801f4c <main+0x1e8>
			default: //starting state
				current_mode = mode_request;
  801f24:	d0a75c17 	ldw	r2,-25232(gp)
  801f28:	d0a00015 	stw	r2,-32768(gp)
				reset_volatiles();
  801f2c:	08002900 	call	800290 <reset_volatiles>
  801f30:	00000706 	br	801f50 <main+0x1ec>
			case 1:
				if ((current_state1 == rr1_1) || (current_state1 == rr2_1)){
					current_mode = mode_request;
					reset_volatiles();
				}
				break;
  801f34:	0001883a 	nop
  801f38:	00000506 	br	801f50 <main+0x1ec>
			case 2:
				if ((current_state2 == rr1_2) || (current_state2 == rr2_2)){
					current_mode = mode_request;
					reset_volatiles();
				}
				break;
  801f3c:	0001883a 	nop
  801f40:	00000306 	br	801f50 <main+0x1ec>
			case 3:
				if ((current_state3 == rr1_3) || (current_state3 == rr2_3)){
					current_mode = mode_request;
					reset_volatiles();
				}
				break;
  801f44:	0001883a 	nop
  801f48:	00000106 	br	801f50 <main+0x1ec>
			case 4:
				if ((current_state4 == rr1_4) || (current_state4 == rr2_4)){
					current_mode = mode_request;
					reset_volatiles();
				}
				break;
  801f4c:	0001883a 	nop
				reset_volatiles();
			}
		}


		switch(current_mode){
  801f50:	d0a00017 	ldw	r2,-32768(gp)
  801f54:	10c000a0 	cmpeqi	r3,r2,2
  801f58:	18000e1e 	bne	r3,zero,801f94 <main+0x230>
  801f5c:	10c000c8 	cmpgei	r3,r2,3
  801f60:	1800031e 	bne	r3,zero,801f70 <main+0x20c>
  801f64:	10800060 	cmpeqi	r2,r2,1
  801f68:	1000061e 	bne	r2,zero,801f84 <main+0x220>
  801f6c:	00001506 	br	801fc4 <main+0x260>
  801f70:	10c000e0 	cmpeqi	r3,r2,3
  801f74:	18000b1e 	bne	r3,zero,801fa4 <main+0x240>
  801f78:	10800120 	cmpeqi	r2,r2,4
  801f7c:	10000d1e 	bne	r2,zero,801fb4 <main+0x250>
  801f80:	00001006 	br	801fc4 <main+0x260>
		case 1:
			simple_tlc();
  801f84:	0800d8c0 	call	800d8c <simple_tlc>
			lcd_set_mode(1);
  801f88:	01000044 	movi	r4,1
  801f8c:	0800d0c0 	call	800d0c <lcd_set_mode>
			break;
  801f90:	00001206 	br	801fdc <main+0x278>
		case 2:
			pedestrian_tlc();
  801f94:	0800f780 	call	800f78 <pedestrian_tlc>
			lcd_set_mode(2);
  801f98:	01000084 	movi	r4,2
  801f9c:	0800d0c0 	call	800d0c <lcd_set_mode>
			break;
  801fa0:	00000e06 	br	801fdc <main+0x278>
		case 3:
			configurable_tlc();
  801fa4:	08011fc0 	call	8011fc <configurable_tlc>
			lcd_set_mode(3);
  801fa8:	010000c4 	movi	r4,3
  801fac:	0800d0c0 	call	800d0c <lcd_set_mode>
			break;
  801fb0:	00000a06 	br	801fdc <main+0x278>
		case 4:
			camera_tlc();
  801fb4:	08017a80 	call	8017a8 <camera_tlc>
			lcd_set_mode(4);
  801fb8:	01000104 	movi	r4,4
  801fbc:	0800d0c0 	call	800d0c <lcd_set_mode>
			break;
  801fc0:	00000606 	br	801fdc <main+0x278>
		default:
			lcd_set_mode(0);
  801fc4:	0009883a 	mov	r4,zero
  801fc8:	0800d0c0 	call	800d0c <lcd_set_mode>
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b111111); //all LEDs on
  801fcc:	00c00fc4 	movi	r3,63
  801fd0:	00804434 	movhi	r2,272
  801fd4:	10841c04 	addi	r2,r2,4208
  801fd8:	10c00035 	stwio	r3,0(r2)
		}
	}
  801fdc:	003f8006 	br	801de0 <__alt_mem_onchip_mem+0xff781de0>

00801fe0 <_fgetc_r>:
  801fe0:	defffd04 	addi	sp,sp,-12
  801fe4:	dc000115 	stw	r16,4(sp)
  801fe8:	dfc00215 	stw	ra,8(sp)
  801fec:	2021883a 	mov	r16,r4
  801ff0:	20000226 	beq	r4,zero,801ffc <_fgetc_r+0x1c>
  801ff4:	20800e17 	ldw	r2,56(r4)
  801ff8:	10000c26 	beq	r2,zero,80202c <_fgetc_r+0x4c>
  801ffc:	28800117 	ldw	r2,4(r5)
  802000:	10bfffc4 	addi	r2,r2,-1
  802004:	28800115 	stw	r2,4(r5)
  802008:	10000c16 	blt	r2,zero,80203c <_fgetc_r+0x5c>
  80200c:	28800017 	ldw	r2,0(r5)
  802010:	10c00044 	addi	r3,r2,1
  802014:	28c00015 	stw	r3,0(r5)
  802018:	10800003 	ldbu	r2,0(r2)
  80201c:	dfc00217 	ldw	ra,8(sp)
  802020:	dc000117 	ldw	r16,4(sp)
  802024:	dec00304 	addi	sp,sp,12
  802028:	f800283a 	ret
  80202c:	d9400015 	stw	r5,0(sp)
  802030:	08024280 	call	802428 <__sinit>
  802034:	d9400017 	ldw	r5,0(sp)
  802038:	003ff006 	br	801ffc <__alt_mem_onchip_mem+0xff781ffc>
  80203c:	8009883a 	mov	r4,r16
  802040:	dfc00217 	ldw	ra,8(sp)
  802044:	dc000117 	ldw	r16,4(sp)
  802048:	dec00304 	addi	sp,sp,12
  80204c:	0803bfc1 	jmpi	803bfc <__srget_r>

00802050 <fgetc>:
  802050:	00802074 	movhi	r2,129
  802054:	defffd04 	addi	sp,sp,-12
  802058:	1097e104 	addi	r2,r2,24452
  80205c:	dc400115 	stw	r17,4(sp)
  802060:	14400017 	ldw	r17,0(r2)
  802064:	dc000015 	stw	r16,0(sp)
  802068:	dfc00215 	stw	ra,8(sp)
  80206c:	2021883a 	mov	r16,r4
  802070:	88000226 	beq	r17,zero,80207c <fgetc+0x2c>
  802074:	88800e17 	ldw	r2,56(r17)
  802078:	10000d26 	beq	r2,zero,8020b0 <fgetc+0x60>
  80207c:	80800117 	ldw	r2,4(r16)
  802080:	10bfffc4 	addi	r2,r2,-1
  802084:	80800115 	stw	r2,4(r16)
  802088:	10000c16 	blt	r2,zero,8020bc <fgetc+0x6c>
  80208c:	80800017 	ldw	r2,0(r16)
  802090:	10c00044 	addi	r3,r2,1
  802094:	80c00015 	stw	r3,0(r16)
  802098:	10800003 	ldbu	r2,0(r2)
  80209c:	dfc00217 	ldw	ra,8(sp)
  8020a0:	dc400117 	ldw	r17,4(sp)
  8020a4:	dc000017 	ldw	r16,0(sp)
  8020a8:	dec00304 	addi	sp,sp,12
  8020ac:	f800283a 	ret
  8020b0:	8809883a 	mov	r4,r17
  8020b4:	08024280 	call	802428 <__sinit>
  8020b8:	003ff006 	br	80207c <__alt_mem_onchip_mem+0xff78207c>
  8020bc:	800b883a 	mov	r5,r16
  8020c0:	8809883a 	mov	r4,r17
  8020c4:	dfc00217 	ldw	ra,8(sp)
  8020c8:	dc400117 	ldw	r17,4(sp)
  8020cc:	dc000017 	ldw	r16,0(sp)
  8020d0:	dec00304 	addi	sp,sp,12
  8020d4:	0803bfc1 	jmpi	803bfc <__srget_r>

008020d8 <__fp_unlock>:
  8020d8:	0005883a 	mov	r2,zero
  8020dc:	f800283a 	ret

008020e0 <_cleanup_r>:
  8020e0:	01402034 	movhi	r5,128
  8020e4:	295fc704 	addi	r5,r5,32540
  8020e8:	0802b701 	jmpi	802b70 <_fwalk_reent>

008020ec <__sinit.part.1>:
  8020ec:	defff704 	addi	sp,sp,-36
  8020f0:	00c02034 	movhi	r3,128
  8020f4:	dfc00815 	stw	ra,32(sp)
  8020f8:	ddc00715 	stw	r23,28(sp)
  8020fc:	dd800615 	stw	r22,24(sp)
  802100:	dd400515 	stw	r21,20(sp)
  802104:	dd000415 	stw	r20,16(sp)
  802108:	dcc00315 	stw	r19,12(sp)
  80210c:	dc800215 	stw	r18,8(sp)
  802110:	dc400115 	stw	r17,4(sp)
  802114:	dc000015 	stw	r16,0(sp)
  802118:	18c83804 	addi	r3,r3,8416
  80211c:	24000117 	ldw	r16,4(r4)
  802120:	20c00f15 	stw	r3,60(r4)
  802124:	2080bb04 	addi	r2,r4,748
  802128:	00c000c4 	movi	r3,3
  80212c:	20c0b915 	stw	r3,740(r4)
  802130:	2080ba15 	stw	r2,744(r4)
  802134:	2000b815 	stw	zero,736(r4)
  802138:	05c00204 	movi	r23,8
  80213c:	00800104 	movi	r2,4
  802140:	2025883a 	mov	r18,r4
  802144:	b80d883a 	mov	r6,r23
  802148:	81001704 	addi	r4,r16,92
  80214c:	000b883a 	mov	r5,zero
  802150:	80000015 	stw	zero,0(r16)
  802154:	80000115 	stw	zero,4(r16)
  802158:	80000215 	stw	zero,8(r16)
  80215c:	8080030d 	sth	r2,12(r16)
  802160:	80001915 	stw	zero,100(r16)
  802164:	8000038d 	sth	zero,14(r16)
  802168:	80000415 	stw	zero,16(r16)
  80216c:	80000515 	stw	zero,20(r16)
  802170:	80000615 	stw	zero,24(r16)
  802174:	08037240 	call	803724 <memset>
  802178:	05802034 	movhi	r22,128
  80217c:	94400217 	ldw	r17,8(r18)
  802180:	05402034 	movhi	r21,128
  802184:	05002034 	movhi	r20,128
  802188:	04c02034 	movhi	r19,128
  80218c:	b58f3604 	addi	r22,r22,15576
  802190:	ad4f4d04 	addi	r21,r21,15668
  802194:	a50f6c04 	addi	r20,r20,15792
  802198:	9ccf8304 	addi	r19,r19,15884
  80219c:	85800815 	stw	r22,32(r16)
  8021a0:	85400915 	stw	r21,36(r16)
  8021a4:	85000a15 	stw	r20,40(r16)
  8021a8:	84c00b15 	stw	r19,44(r16)
  8021ac:	84000715 	stw	r16,28(r16)
  8021b0:	00800284 	movi	r2,10
  8021b4:	8880030d 	sth	r2,12(r17)
  8021b8:	00800044 	movi	r2,1
  8021bc:	b80d883a 	mov	r6,r23
  8021c0:	89001704 	addi	r4,r17,92
  8021c4:	000b883a 	mov	r5,zero
  8021c8:	88000015 	stw	zero,0(r17)
  8021cc:	88000115 	stw	zero,4(r17)
  8021d0:	88000215 	stw	zero,8(r17)
  8021d4:	88001915 	stw	zero,100(r17)
  8021d8:	8880038d 	sth	r2,14(r17)
  8021dc:	88000415 	stw	zero,16(r17)
  8021e0:	88000515 	stw	zero,20(r17)
  8021e4:	88000615 	stw	zero,24(r17)
  8021e8:	08037240 	call	803724 <memset>
  8021ec:	94000317 	ldw	r16,12(r18)
  8021f0:	00800484 	movi	r2,18
  8021f4:	8c400715 	stw	r17,28(r17)
  8021f8:	8d800815 	stw	r22,32(r17)
  8021fc:	8d400915 	stw	r21,36(r17)
  802200:	8d000a15 	stw	r20,40(r17)
  802204:	8cc00b15 	stw	r19,44(r17)
  802208:	8080030d 	sth	r2,12(r16)
  80220c:	00800084 	movi	r2,2
  802210:	80000015 	stw	zero,0(r16)
  802214:	80000115 	stw	zero,4(r16)
  802218:	80000215 	stw	zero,8(r16)
  80221c:	80001915 	stw	zero,100(r16)
  802220:	8080038d 	sth	r2,14(r16)
  802224:	80000415 	stw	zero,16(r16)
  802228:	80000515 	stw	zero,20(r16)
  80222c:	80000615 	stw	zero,24(r16)
  802230:	b80d883a 	mov	r6,r23
  802234:	000b883a 	mov	r5,zero
  802238:	81001704 	addi	r4,r16,92
  80223c:	08037240 	call	803724 <memset>
  802240:	00800044 	movi	r2,1
  802244:	84000715 	stw	r16,28(r16)
  802248:	85800815 	stw	r22,32(r16)
  80224c:	85400915 	stw	r21,36(r16)
  802250:	85000a15 	stw	r20,40(r16)
  802254:	84c00b15 	stw	r19,44(r16)
  802258:	90800e15 	stw	r2,56(r18)
  80225c:	dfc00817 	ldw	ra,32(sp)
  802260:	ddc00717 	ldw	r23,28(sp)
  802264:	dd800617 	ldw	r22,24(sp)
  802268:	dd400517 	ldw	r21,20(sp)
  80226c:	dd000417 	ldw	r20,16(sp)
  802270:	dcc00317 	ldw	r19,12(sp)
  802274:	dc800217 	ldw	r18,8(sp)
  802278:	dc400117 	ldw	r17,4(sp)
  80227c:	dc000017 	ldw	r16,0(sp)
  802280:	dec00904 	addi	sp,sp,36
  802284:	f800283a 	ret

00802288 <__fp_lock>:
  802288:	0005883a 	mov	r2,zero
  80228c:	f800283a 	ret

00802290 <__sfmoreglue>:
  802290:	defffc04 	addi	sp,sp,-16
  802294:	dc400115 	stw	r17,4(sp)
  802298:	2c7fffc4 	addi	r17,r5,-1
  80229c:	8c401a24 	muli	r17,r17,104
  8022a0:	dc800215 	stw	r18,8(sp)
  8022a4:	2825883a 	mov	r18,r5
  8022a8:	89401d04 	addi	r5,r17,116
  8022ac:	dc000015 	stw	r16,0(sp)
  8022b0:	dfc00315 	stw	ra,12(sp)
  8022b4:	0802f180 	call	802f18 <_malloc_r>
  8022b8:	1021883a 	mov	r16,r2
  8022bc:	10000726 	beq	r2,zero,8022dc <__sfmoreglue+0x4c>
  8022c0:	11000304 	addi	r4,r2,12
  8022c4:	10000015 	stw	zero,0(r2)
  8022c8:	14800115 	stw	r18,4(r2)
  8022cc:	11000215 	stw	r4,8(r2)
  8022d0:	89801a04 	addi	r6,r17,104
  8022d4:	000b883a 	mov	r5,zero
  8022d8:	08037240 	call	803724 <memset>
  8022dc:	8005883a 	mov	r2,r16
  8022e0:	dfc00317 	ldw	ra,12(sp)
  8022e4:	dc800217 	ldw	r18,8(sp)
  8022e8:	dc400117 	ldw	r17,4(sp)
  8022ec:	dc000017 	ldw	r16,0(sp)
  8022f0:	dec00404 	addi	sp,sp,16
  8022f4:	f800283a 	ret

008022f8 <__sfp>:
  8022f8:	defffb04 	addi	sp,sp,-20
  8022fc:	dc000015 	stw	r16,0(sp)
  802300:	04002074 	movhi	r16,129
  802304:	8417e004 	addi	r16,r16,24448
  802308:	dcc00315 	stw	r19,12(sp)
  80230c:	2027883a 	mov	r19,r4
  802310:	81000017 	ldw	r4,0(r16)
  802314:	dfc00415 	stw	ra,16(sp)
  802318:	dc800215 	stw	r18,8(sp)
  80231c:	20800e17 	ldw	r2,56(r4)
  802320:	dc400115 	stw	r17,4(sp)
  802324:	1000021e 	bne	r2,zero,802330 <__sfp+0x38>
  802328:	08020ec0 	call	8020ec <__sinit.part.1>
  80232c:	81000017 	ldw	r4,0(r16)
  802330:	2480b804 	addi	r18,r4,736
  802334:	047fffc4 	movi	r17,-1
  802338:	91000117 	ldw	r4,4(r18)
  80233c:	94000217 	ldw	r16,8(r18)
  802340:	213fffc4 	addi	r4,r4,-1
  802344:	20000a16 	blt	r4,zero,802370 <__sfp+0x78>
  802348:	8080030f 	ldh	r2,12(r16)
  80234c:	10000c26 	beq	r2,zero,802380 <__sfp+0x88>
  802350:	80c01d04 	addi	r3,r16,116
  802354:	00000206 	br	802360 <__sfp+0x68>
  802358:	18bfe60f 	ldh	r2,-104(r3)
  80235c:	10000826 	beq	r2,zero,802380 <__sfp+0x88>
  802360:	213fffc4 	addi	r4,r4,-1
  802364:	1c3ffd04 	addi	r16,r3,-12
  802368:	18c01a04 	addi	r3,r3,104
  80236c:	247ffa1e 	bne	r4,r17,802358 <__alt_mem_onchip_mem+0xff782358>
  802370:	90800017 	ldw	r2,0(r18)
  802374:	10001d26 	beq	r2,zero,8023ec <__sfp+0xf4>
  802378:	1025883a 	mov	r18,r2
  80237c:	003fee06 	br	802338 <__alt_mem_onchip_mem+0xff782338>
  802380:	00bfffc4 	movi	r2,-1
  802384:	8080038d 	sth	r2,14(r16)
  802388:	00800044 	movi	r2,1
  80238c:	8080030d 	sth	r2,12(r16)
  802390:	80001915 	stw	zero,100(r16)
  802394:	80000015 	stw	zero,0(r16)
  802398:	80000215 	stw	zero,8(r16)
  80239c:	80000115 	stw	zero,4(r16)
  8023a0:	80000415 	stw	zero,16(r16)
  8023a4:	80000515 	stw	zero,20(r16)
  8023a8:	80000615 	stw	zero,24(r16)
  8023ac:	01800204 	movi	r6,8
  8023b0:	000b883a 	mov	r5,zero
  8023b4:	81001704 	addi	r4,r16,92
  8023b8:	08037240 	call	803724 <memset>
  8023bc:	8005883a 	mov	r2,r16
  8023c0:	80000c15 	stw	zero,48(r16)
  8023c4:	80000d15 	stw	zero,52(r16)
  8023c8:	80001115 	stw	zero,68(r16)
  8023cc:	80001215 	stw	zero,72(r16)
  8023d0:	dfc00417 	ldw	ra,16(sp)
  8023d4:	dcc00317 	ldw	r19,12(sp)
  8023d8:	dc800217 	ldw	r18,8(sp)
  8023dc:	dc400117 	ldw	r17,4(sp)
  8023e0:	dc000017 	ldw	r16,0(sp)
  8023e4:	dec00504 	addi	sp,sp,20
  8023e8:	f800283a 	ret
  8023ec:	01400104 	movi	r5,4
  8023f0:	9809883a 	mov	r4,r19
  8023f4:	08022900 	call	802290 <__sfmoreglue>
  8023f8:	90800015 	stw	r2,0(r18)
  8023fc:	103fde1e 	bne	r2,zero,802378 <__alt_mem_onchip_mem+0xff782378>
  802400:	00800304 	movi	r2,12
  802404:	98800015 	stw	r2,0(r19)
  802408:	0005883a 	mov	r2,zero
  80240c:	003ff006 	br	8023d0 <__alt_mem_onchip_mem+0xff7823d0>

00802410 <_cleanup>:
  802410:	00802074 	movhi	r2,129
  802414:	1097e004 	addi	r2,r2,24448
  802418:	11000017 	ldw	r4,0(r2)
  80241c:	01402034 	movhi	r5,128
  802420:	295fc704 	addi	r5,r5,32540
  802424:	0802b701 	jmpi	802b70 <_fwalk_reent>

00802428 <__sinit>:
  802428:	20800e17 	ldw	r2,56(r4)
  80242c:	10000126 	beq	r2,zero,802434 <__sinit+0xc>
  802430:	f800283a 	ret
  802434:	08020ec1 	jmpi	8020ec <__sinit.part.1>

00802438 <__sfp_lock_acquire>:
  802438:	f800283a 	ret

0080243c <__sfp_lock_release>:
  80243c:	f800283a 	ret

00802440 <__sinit_lock_acquire>:
  802440:	f800283a 	ret

00802444 <__sinit_lock_release>:
  802444:	f800283a 	ret

00802448 <__fp_lock_all>:
  802448:	00802074 	movhi	r2,129
  80244c:	1097e104 	addi	r2,r2,24452
  802450:	11000017 	ldw	r4,0(r2)
  802454:	01402034 	movhi	r5,128
  802458:	2948a204 	addi	r5,r5,8840
  80245c:	0802aac1 	jmpi	802aac <_fwalk>

00802460 <__fp_unlock_all>:
  802460:	00802074 	movhi	r2,129
  802464:	1097e104 	addi	r2,r2,24452
  802468:	11000017 	ldw	r4,0(r2)
  80246c:	01402034 	movhi	r5,128
  802470:	29483604 	addi	r5,r5,8408
  802474:	0802aac1 	jmpi	802aac <_fwalk>

00802478 <_fopen_r>:
  802478:	defffa04 	addi	sp,sp,-24
  80247c:	3005883a 	mov	r2,r6
  802480:	dcc00415 	stw	r19,16(sp)
  802484:	d80d883a 	mov	r6,sp
  802488:	2827883a 	mov	r19,r5
  80248c:	100b883a 	mov	r5,r2
  802490:	dc800315 	stw	r18,12(sp)
  802494:	dfc00515 	stw	ra,20(sp)
  802498:	dc400215 	stw	r17,8(sp)
  80249c:	dc000115 	stw	r16,4(sp)
  8024a0:	2025883a 	mov	r18,r4
  8024a4:	08082c80 	call	8082c8 <__sflags>
  8024a8:	10002726 	beq	r2,zero,802548 <_fopen_r+0xd0>
  8024ac:	9009883a 	mov	r4,r18
  8024b0:	1023883a 	mov	r17,r2
  8024b4:	08022f80 	call	8022f8 <__sfp>
  8024b8:	1021883a 	mov	r16,r2
  8024bc:	10002226 	beq	r2,zero,802548 <_fopen_r+0xd0>
  8024c0:	d9800017 	ldw	r6,0(sp)
  8024c4:	01c06d84 	movi	r7,438
  8024c8:	980b883a 	mov	r5,r19
  8024cc:	9009883a 	mov	r4,r18
  8024d0:	080384c0 	call	80384c <_open_r>
  8024d4:	10001916 	blt	r2,zero,80253c <_fopen_r+0xc4>
  8024d8:	8080038d 	sth	r2,14(r16)
  8024dc:	00802034 	movhi	r2,128
  8024e0:	108f3604 	addi	r2,r2,15576
  8024e4:	80800815 	stw	r2,32(r16)
  8024e8:	00802034 	movhi	r2,128
  8024ec:	108f4d04 	addi	r2,r2,15668
  8024f0:	80800915 	stw	r2,36(r16)
  8024f4:	00802034 	movhi	r2,128
  8024f8:	108f6c04 	addi	r2,r2,15792
  8024fc:	80800a15 	stw	r2,40(r16)
  802500:	00802034 	movhi	r2,128
  802504:	108f8304 	addi	r2,r2,15884
  802508:	8440030d 	sth	r17,12(r16)
  80250c:	84000715 	stw	r16,28(r16)
  802510:	80800b15 	stw	r2,44(r16)
  802514:	8c40400c 	andi	r17,r17,256
  802518:	88000d1e 	bne	r17,zero,802550 <_fopen_r+0xd8>
  80251c:	8005883a 	mov	r2,r16
  802520:	dfc00517 	ldw	ra,20(sp)
  802524:	dcc00417 	ldw	r19,16(sp)
  802528:	dc800317 	ldw	r18,12(sp)
  80252c:	dc400217 	ldw	r17,8(sp)
  802530:	dc000117 	ldw	r16,4(sp)
  802534:	dec00604 	addi	sp,sp,24
  802538:	f800283a 	ret
  80253c:	08024380 	call	802438 <__sfp_lock_acquire>
  802540:	8000030d 	sth	zero,12(r16)
  802544:	080243c0 	call	80243c <__sfp_lock_release>
  802548:	0005883a 	mov	r2,zero
  80254c:	003ff406 	br	802520 <__alt_mem_onchip_mem+0xff782520>
  802550:	01c00084 	movi	r7,2
  802554:	000d883a 	mov	r6,zero
  802558:	800b883a 	mov	r5,r16
  80255c:	9009883a 	mov	r4,r18
  802560:	08025d00 	call	8025d0 <_fseek_r>
  802564:	8005883a 	mov	r2,r16
  802568:	003fed06 	br	802520 <__alt_mem_onchip_mem+0xff782520>

0080256c <fopen>:
  80256c:	00802074 	movhi	r2,129
  802570:	1097e104 	addi	r2,r2,24452
  802574:	280d883a 	mov	r6,r5
  802578:	200b883a 	mov	r5,r4
  80257c:	11000017 	ldw	r4,0(r2)
  802580:	08024781 	jmpi	802478 <_fopen_r>

00802584 <_fprintf_r>:
  802584:	defffe04 	addi	sp,sp,-8
  802588:	2809883a 	mov	r4,r5
  80258c:	300b883a 	mov	r5,r6
  802590:	dfc00015 	stw	ra,0(sp)
  802594:	d9c00115 	stw	r7,4(sp)
  802598:	d9800104 	addi	r6,sp,4
  80259c:	08063b40 	call	8063b4 <__vfprintf_internal>
  8025a0:	dfc00017 	ldw	ra,0(sp)
  8025a4:	dec00204 	addi	sp,sp,8
  8025a8:	f800283a 	ret

008025ac <fprintf>:
  8025ac:	defffd04 	addi	sp,sp,-12
  8025b0:	dfc00015 	stw	ra,0(sp)
  8025b4:	d9800115 	stw	r6,4(sp)
  8025b8:	d9c00215 	stw	r7,8(sp)
  8025bc:	d9800104 	addi	r6,sp,4
  8025c0:	08063b40 	call	8063b4 <__vfprintf_internal>
  8025c4:	dfc00017 	ldw	ra,0(sp)
  8025c8:	dec00304 	addi	sp,sp,12
  8025cc:	f800283a 	ret

008025d0 <_fseek_r>:
  8025d0:	08025f01 	jmpi	8025f0 <_fseeko_r>

008025d4 <fseek>:
  8025d4:	00802074 	movhi	r2,129
  8025d8:	1097e104 	addi	r2,r2,24452
  8025dc:	300f883a 	mov	r7,r6
  8025e0:	280d883a 	mov	r6,r5
  8025e4:	200b883a 	mov	r5,r4
  8025e8:	11000017 	ldw	r4,0(r2)
  8025ec:	08025f01 	jmpi	8025f0 <_fseeko_r>

008025f0 <_fseeko_r>:
  8025f0:	deffe804 	addi	sp,sp,-96
  8025f4:	dd401415 	stw	r21,80(sp)
  8025f8:	dc801115 	stw	r18,68(sp)
  8025fc:	dc401015 	stw	r17,64(sp)
  802600:	dc000f15 	stw	r16,60(sp)
  802604:	dfc01715 	stw	ra,92(sp)
  802608:	ddc01615 	stw	r23,88(sp)
  80260c:	dd801515 	stw	r22,84(sp)
  802610:	dd001315 	stw	r20,76(sp)
  802614:	dcc01215 	stw	r19,72(sp)
  802618:	2023883a 	mov	r17,r4
  80261c:	2821883a 	mov	r16,r5
  802620:	302b883a 	mov	r21,r6
  802624:	3825883a 	mov	r18,r7
  802628:	20000226 	beq	r4,zero,802634 <_fseeko_r+0x44>
  80262c:	20800e17 	ldw	r2,56(r4)
  802630:	10005a26 	beq	r2,zero,80279c <_fseeko_r+0x1ac>
  802634:	8080030b 	ldhu	r2,12(r16)
  802638:	00c04204 	movi	r3,264
  80263c:	1080420c 	andi	r2,r2,264
  802640:	10c05b26 	beq	r2,r3,8027b0 <_fseeko_r+0x1c0>
  802644:	85000a17 	ldw	r20,40(r16)
  802648:	a000f626 	beq	r20,zero,802a24 <_fseeko_r+0x434>
  80264c:	00800044 	movi	r2,1
  802650:	90803e26 	beq	r18,r2,80274c <_fseeko_r+0x15c>
  802654:	00800084 	movi	r2,2
  802658:	90801026 	beq	r18,r2,80269c <_fseeko_r+0xac>
  80265c:	90000f26 	beq	r18,zero,80269c <_fseeko_r+0xac>
  802660:	00800584 	movi	r2,22
  802664:	88800015 	stw	r2,0(r17)
  802668:	04ffffc4 	movi	r19,-1
  80266c:	9805883a 	mov	r2,r19
  802670:	dfc01717 	ldw	ra,92(sp)
  802674:	ddc01617 	ldw	r23,88(sp)
  802678:	dd801517 	ldw	r22,84(sp)
  80267c:	dd401417 	ldw	r21,80(sp)
  802680:	dd001317 	ldw	r20,76(sp)
  802684:	dcc01217 	ldw	r19,72(sp)
  802688:	dc801117 	ldw	r18,68(sp)
  80268c:	dc401017 	ldw	r17,64(sp)
  802690:	dc000f17 	ldw	r16,60(sp)
  802694:	dec01804 	addi	sp,sp,96
  802698:	f800283a 	ret
  80269c:	80800417 	ldw	r2,16(r16)
  8026a0:	002f883a 	mov	r23,zero
  8026a4:	0027883a 	mov	r19,zero
  8026a8:	1000cb26 	beq	r2,zero,8029d8 <_fseeko_r+0x3e8>
  8026ac:	8080030b 	ldhu	r2,12(r16)
  8026b0:	10c2068c 	andi	r3,r2,2074
  8026b4:	1800071e 	bne	r3,zero,8026d4 <_fseeko_r+0xe4>
  8026b8:	10c1000c 	andi	r3,r2,1024
  8026bc:	1800451e 	bne	r3,zero,8027d4 <_fseeko_r+0x1e4>
  8026c0:	00c02034 	movhi	r3,128
  8026c4:	18cf6c04 	addi	r3,r3,15792
  8026c8:	a0c0b726 	beq	r20,r3,8029a8 <_fseeko_r+0x3b8>
  8026cc:	10820014 	ori	r2,r2,2048
  8026d0:	8080030d 	sth	r2,12(r16)
  8026d4:	800b883a 	mov	r5,r16
  8026d8:	8809883a 	mov	r4,r17
  8026dc:	080823c0 	call	80823c <_fflush_r>
  8026e0:	1027883a 	mov	r19,r2
  8026e4:	103fe01e 	bne	r2,zero,802668 <__alt_mem_onchip_mem+0xff782668>
  8026e8:	81400717 	ldw	r5,28(r16)
  8026ec:	900f883a 	mov	r7,r18
  8026f0:	a80d883a 	mov	r6,r21
  8026f4:	8809883a 	mov	r4,r17
  8026f8:	a03ee83a 	callr	r20
  8026fc:	00ffffc4 	movi	r3,-1
  802700:	10ffd926 	beq	r2,r3,802668 <__alt_mem_onchip_mem+0xff782668>
  802704:	81400c17 	ldw	r5,48(r16)
  802708:	28000526 	beq	r5,zero,802720 <_fseeko_r+0x130>
  80270c:	80801004 	addi	r2,r16,64
  802710:	28800226 	beq	r5,r2,80271c <_fseeko_r+0x12c>
  802714:	8809883a 	mov	r4,r17
  802718:	08084980 	call	808498 <_free_r>
  80271c:	80000c15 	stw	zero,48(r16)
  802720:	8080030b 	ldhu	r2,12(r16)
  802724:	80c00417 	ldw	r3,16(r16)
  802728:	80000115 	stw	zero,4(r16)
  80272c:	10bdf7cc 	andi	r2,r2,63455
  802730:	80c00015 	stw	r3,0(r16)
  802734:	8080030d 	sth	r2,12(r16)
  802738:	01800204 	movi	r6,8
  80273c:	000b883a 	mov	r5,zero
  802740:	81001704 	addi	r4,r16,92
  802744:	08037240 	call	803724 <memset>
  802748:	003fc806 	br	80266c <__alt_mem_onchip_mem+0xff78266c>
  80274c:	800b883a 	mov	r5,r16
  802750:	8809883a 	mov	r4,r17
  802754:	080823c0 	call	80823c <_fflush_r>
  802758:	8080030b 	ldhu	r2,12(r16)
  80275c:	10c4000c 	andi	r3,r2,4096
  802760:	18008726 	beq	r3,zero,802980 <_fseeko_r+0x390>
  802764:	84c01417 	ldw	r19,80(r16)
  802768:	10c0010c 	andi	r3,r2,4
  80276c:	1800431e 	bne	r3,zero,80287c <_fseeko_r+0x28c>
  802770:	1080020c 	andi	r2,r2,8
  802774:	10008026 	beq	r2,zero,802978 <_fseeko_r+0x388>
  802778:	80c00017 	ldw	r3,0(r16)
  80277c:	80800417 	ldw	r2,16(r16)
  802780:	18000226 	beq	r3,zero,80278c <_fseeko_r+0x19c>
  802784:	1887c83a 	sub	r3,r3,r2
  802788:	98e7883a 	add	r19,r19,r3
  80278c:	aceb883a 	add	r21,r21,r19
  802790:	05c00044 	movi	r23,1
  802794:	0025883a 	mov	r18,zero
  802798:	003fc306 	br	8026a8 <__alt_mem_onchip_mem+0xff7826a8>
  80279c:	08024280 	call	802428 <__sinit>
  8027a0:	8080030b 	ldhu	r2,12(r16)
  8027a4:	00c04204 	movi	r3,264
  8027a8:	1080420c 	andi	r2,r2,264
  8027ac:	10ffa51e 	bne	r2,r3,802644 <__alt_mem_onchip_mem+0xff782644>
  8027b0:	800b883a 	mov	r5,r16
  8027b4:	8809883a 	mov	r4,r17
  8027b8:	080823c0 	call	80823c <_fflush_r>
  8027bc:	003fa106 	br	802644 <__alt_mem_onchip_mem+0xff782644>
  8027c0:	8080030b 	ldhu	r2,12(r16)
  8027c4:	00c10004 	movi	r3,1024
  8027c8:	80c01315 	stw	r3,76(r16)
  8027cc:	10c4b03a 	or	r2,r2,r3
  8027d0:	8080030d 	sth	r2,12(r16)
  8027d4:	9000311e 	bne	r18,zero,80289c <_fseeko_r+0x2ac>
  8027d8:	a82d883a 	mov	r22,r21
  8027dc:	b800371e 	bne	r23,zero,8028bc <_fseeko_r+0x2cc>
  8027e0:	8080030b 	ldhu	r2,12(r16)
  8027e4:	1084000c 	andi	r2,r2,4096
  8027e8:	10007f26 	beq	r2,zero,8029e8 <_fseeko_r+0x3f8>
  8027ec:	80801417 	ldw	r2,80(r16)
  8027f0:	81800117 	ldw	r6,4(r16)
  8027f4:	81400c17 	ldw	r5,48(r16)
  8027f8:	11a7c83a 	sub	r19,r2,r6
  8027fc:	28008226 	beq	r5,zero,802a08 <_fseeko_r+0x418>
  802800:	81c00f17 	ldw	r7,60(r16)
  802804:	99e7c83a 	sub	r19,r19,r7
  802808:	81000e17 	ldw	r4,56(r16)
  80280c:	80800417 	ldw	r2,16(r16)
  802810:	99a7883a 	add	r19,r19,r6
  802814:	2087c83a 	sub	r3,r4,r2
  802818:	98e7c83a 	sub	r19,r19,r3
  80281c:	38c7883a 	add	r3,r7,r3
  802820:	b4c02b16 	blt	r22,r19,8028d0 <_fseeko_r+0x2e0>
  802824:	98c9883a 	add	r4,r19,r3
  802828:	b100292e 	bgeu	r22,r4,8028d0 <_fseeko_r+0x2e0>
  80282c:	b4e7c83a 	sub	r19,r22,r19
  802830:	14c5883a 	add	r2,r2,r19
  802834:	1ce7c83a 	sub	r19,r3,r19
  802838:	80800015 	stw	r2,0(r16)
  80283c:	84c00115 	stw	r19,4(r16)
  802840:	28000526 	beq	r5,zero,802858 <_fseeko_r+0x268>
  802844:	80801004 	addi	r2,r16,64
  802848:	28800226 	beq	r5,r2,802854 <_fseeko_r+0x264>
  80284c:	8809883a 	mov	r4,r17
  802850:	08084980 	call	808498 <_free_r>
  802854:	80000c15 	stw	zero,48(r16)
  802858:	8080030b 	ldhu	r2,12(r16)
  80285c:	01800204 	movi	r6,8
  802860:	000b883a 	mov	r5,zero
  802864:	10bff7cc 	andi	r2,r2,65503
  802868:	8080030d 	sth	r2,12(r16)
  80286c:	81001704 	addi	r4,r16,92
  802870:	08037240 	call	803724 <memset>
  802874:	0027883a 	mov	r19,zero
  802878:	003f7c06 	br	80266c <__alt_mem_onchip_mem+0xff78266c>
  80287c:	80c00117 	ldw	r3,4(r16)
  802880:	80800c17 	ldw	r2,48(r16)
  802884:	98e7c83a 	sub	r19,r19,r3
  802888:	10003b26 	beq	r2,zero,802978 <_fseeko_r+0x388>
  80288c:	80c00f17 	ldw	r3,60(r16)
  802890:	80800417 	ldw	r2,16(r16)
  802894:	98e7c83a 	sub	r19,r19,r3
  802898:	003fbc06 	br	80278c <__alt_mem_onchip_mem+0xff78278c>
  80289c:	8140038f 	ldh	r5,14(r16)
  8028a0:	d80d883a 	mov	r6,sp
  8028a4:	8809883a 	mov	r4,r17
  8028a8:	0802a500 	call	802a50 <_fstat_r>
  8028ac:	103f891e 	bne	r2,zero,8026d4 <__alt_mem_onchip_mem+0xff7826d4>
  8028b0:	dd800417 	ldw	r22,16(sp)
  8028b4:	adad883a 	add	r22,r21,r22
  8028b8:	b83fc926 	beq	r23,zero,8027e0 <__alt_mem_onchip_mem+0xff7827e0>
  8028bc:	81400c17 	ldw	r5,48(r16)
  8028c0:	81800117 	ldw	r6,4(r16)
  8028c4:	28005026 	beq	r5,zero,802a08 <_fseeko_r+0x418>
  8028c8:	81c00f17 	ldw	r7,60(r16)
  8028cc:	003fce06 	br	802808 <__alt_mem_onchip_mem+0xff782808>
  8028d0:	84c01317 	ldw	r19,76(r16)
  8028d4:	81400717 	ldw	r5,28(r16)
  8028d8:	000f883a 	mov	r7,zero
  8028dc:	04e7c83a 	sub	r19,zero,r19
  8028e0:	9da6703a 	and	r19,r19,r22
  8028e4:	980d883a 	mov	r6,r19
  8028e8:	8809883a 	mov	r4,r17
  8028ec:	a03ee83a 	callr	r20
  8028f0:	00ffffc4 	movi	r3,-1
  8028f4:	10ff7726 	beq	r2,r3,8026d4 <__alt_mem_onchip_mem+0xff7826d4>
  8028f8:	80800417 	ldw	r2,16(r16)
  8028fc:	81400c17 	ldw	r5,48(r16)
  802900:	80000115 	stw	zero,4(r16)
  802904:	80800015 	stw	r2,0(r16)
  802908:	28000526 	beq	r5,zero,802920 <_fseeko_r+0x330>
  80290c:	80801004 	addi	r2,r16,64
  802910:	28800226 	beq	r5,r2,80291c <_fseeko_r+0x32c>
  802914:	8809883a 	mov	r4,r17
  802918:	08084980 	call	808498 <_free_r>
  80291c:	80000c15 	stw	zero,48(r16)
  802920:	8080030b 	ldhu	r2,12(r16)
  802924:	b4e7c83a 	sub	r19,r22,r19
  802928:	10bff7cc 	andi	r2,r2,65503
  80292c:	8080030d 	sth	r2,12(r16)
  802930:	98000b26 	beq	r19,zero,802960 <_fseeko_r+0x370>
  802934:	800b883a 	mov	r5,r16
  802938:	8809883a 	mov	r4,r17
  80293c:	0803a280 	call	803a28 <__srefill_r>
  802940:	103f641e 	bne	r2,zero,8026d4 <__alt_mem_onchip_mem+0xff7826d4>
  802944:	80800117 	ldw	r2,4(r16)
  802948:	14ff6236 	bltu	r2,r19,8026d4 <__alt_mem_onchip_mem+0xff7826d4>
  80294c:	80c00017 	ldw	r3,0(r16)
  802950:	14c5c83a 	sub	r2,r2,r19
  802954:	80800115 	stw	r2,4(r16)
  802958:	1ce7883a 	add	r19,r3,r19
  80295c:	84c00015 	stw	r19,0(r16)
  802960:	01800204 	movi	r6,8
  802964:	000b883a 	mov	r5,zero
  802968:	81001704 	addi	r4,r16,92
  80296c:	08037240 	call	803724 <memset>
  802970:	0027883a 	mov	r19,zero
  802974:	003f3d06 	br	80266c <__alt_mem_onchip_mem+0xff78266c>
  802978:	80800417 	ldw	r2,16(r16)
  80297c:	003f8306 	br	80278c <__alt_mem_onchip_mem+0xff78278c>
  802980:	81400717 	ldw	r5,28(r16)
  802984:	900f883a 	mov	r7,r18
  802988:	000d883a 	mov	r6,zero
  80298c:	8809883a 	mov	r4,r17
  802990:	a03ee83a 	callr	r20
  802994:	1027883a 	mov	r19,r2
  802998:	00bfffc4 	movi	r2,-1
  80299c:	98bf3226 	beq	r19,r2,802668 <__alt_mem_onchip_mem+0xff782668>
  8029a0:	8080030b 	ldhu	r2,12(r16)
  8029a4:	003f7006 	br	802768 <__alt_mem_onchip_mem+0xff782768>
  8029a8:	8140038f 	ldh	r5,14(r16)
  8029ac:	283f4716 	blt	r5,zero,8026cc <__alt_mem_onchip_mem+0xff7826cc>
  8029b0:	d80d883a 	mov	r6,sp
  8029b4:	8809883a 	mov	r4,r17
  8029b8:	0802a500 	call	802a50 <_fstat_r>
  8029bc:	1000041e 	bne	r2,zero,8029d0 <_fseeko_r+0x3e0>
  8029c0:	d8800117 	ldw	r2,4(sp)
  8029c4:	00e00014 	movui	r3,32768
  8029c8:	10bc000c 	andi	r2,r2,61440
  8029cc:	10ff7c26 	beq	r2,r3,8027c0 <__alt_mem_onchip_mem+0xff7827c0>
  8029d0:	8080030b 	ldhu	r2,12(r16)
  8029d4:	003f3d06 	br	8026cc <__alt_mem_onchip_mem+0xff7826cc>
  8029d8:	800b883a 	mov	r5,r16
  8029dc:	8809883a 	mov	r4,r17
  8029e0:	0802d340 	call	802d34 <__smakebuf_r>
  8029e4:	003f3106 	br	8026ac <__alt_mem_onchip_mem+0xff7826ac>
  8029e8:	81400717 	ldw	r5,28(r16)
  8029ec:	01c00044 	movi	r7,1
  8029f0:	000d883a 	mov	r6,zero
  8029f4:	8809883a 	mov	r4,r17
  8029f8:	a03ee83a 	callr	r20
  8029fc:	00ffffc4 	movi	r3,-1
  802a00:	10ff7b1e 	bne	r2,r3,8027f0 <__alt_mem_onchip_mem+0xff7827f0>
  802a04:	003f3306 	br	8026d4 <__alt_mem_onchip_mem+0xff7826d4>
  802a08:	80c00017 	ldw	r3,0(r16)
  802a0c:	80800417 	ldw	r2,16(r16)
  802a10:	000b883a 	mov	r5,zero
  802a14:	1887c83a 	sub	r3,r3,r2
  802a18:	98e7c83a 	sub	r19,r19,r3
  802a1c:	30c7883a 	add	r3,r6,r3
  802a20:	003f7f06 	br	802820 <__alt_mem_onchip_mem+0xff782820>
  802a24:	00800744 	movi	r2,29
  802a28:	88800015 	stw	r2,0(r17)
  802a2c:	04ffffc4 	movi	r19,-1
  802a30:	003f0e06 	br	80266c <__alt_mem_onchip_mem+0xff78266c>

00802a34 <fseeko>:
  802a34:	00802074 	movhi	r2,129
  802a38:	1097e104 	addi	r2,r2,24452
  802a3c:	300f883a 	mov	r7,r6
  802a40:	280d883a 	mov	r6,r5
  802a44:	200b883a 	mov	r5,r4
  802a48:	11000017 	ldw	r4,0(r2)
  802a4c:	08025f01 	jmpi	8025f0 <_fseeko_r>

00802a50 <_fstat_r>:
  802a50:	defffd04 	addi	sp,sp,-12
  802a54:	2805883a 	mov	r2,r5
  802a58:	dc000015 	stw	r16,0(sp)
  802a5c:	04002074 	movhi	r16,129
  802a60:	dc400115 	stw	r17,4(sp)
  802a64:	841f4204 	addi	r16,r16,32008
  802a68:	2023883a 	mov	r17,r4
  802a6c:	300b883a 	mov	r5,r6
  802a70:	1009883a 	mov	r4,r2
  802a74:	dfc00215 	stw	ra,8(sp)
  802a78:	80000015 	stw	zero,0(r16)
  802a7c:	080fbb40 	call	80fbb4 <fstat>
  802a80:	00ffffc4 	movi	r3,-1
  802a84:	10c00526 	beq	r2,r3,802a9c <_fstat_r+0x4c>
  802a88:	dfc00217 	ldw	ra,8(sp)
  802a8c:	dc400117 	ldw	r17,4(sp)
  802a90:	dc000017 	ldw	r16,0(sp)
  802a94:	dec00304 	addi	sp,sp,12
  802a98:	f800283a 	ret
  802a9c:	80c00017 	ldw	r3,0(r16)
  802aa0:	183ff926 	beq	r3,zero,802a88 <__alt_mem_onchip_mem+0xff782a88>
  802aa4:	88c00015 	stw	r3,0(r17)
  802aa8:	003ff706 	br	802a88 <__alt_mem_onchip_mem+0xff782a88>

00802aac <_fwalk>:
  802aac:	defff704 	addi	sp,sp,-36
  802ab0:	dd000415 	stw	r20,16(sp)
  802ab4:	dfc00815 	stw	ra,32(sp)
  802ab8:	ddc00715 	stw	r23,28(sp)
  802abc:	dd800615 	stw	r22,24(sp)
  802ac0:	dd400515 	stw	r21,20(sp)
  802ac4:	dcc00315 	stw	r19,12(sp)
  802ac8:	dc800215 	stw	r18,8(sp)
  802acc:	dc400115 	stw	r17,4(sp)
  802ad0:	dc000015 	stw	r16,0(sp)
  802ad4:	2500b804 	addi	r20,r4,736
  802ad8:	a0002326 	beq	r20,zero,802b68 <_fwalk+0xbc>
  802adc:	282b883a 	mov	r21,r5
  802ae0:	002f883a 	mov	r23,zero
  802ae4:	05800044 	movi	r22,1
  802ae8:	04ffffc4 	movi	r19,-1
  802aec:	a4400117 	ldw	r17,4(r20)
  802af0:	a4800217 	ldw	r18,8(r20)
  802af4:	8c7fffc4 	addi	r17,r17,-1
  802af8:	88000d16 	blt	r17,zero,802b30 <_fwalk+0x84>
  802afc:	94000304 	addi	r16,r18,12
  802b00:	94800384 	addi	r18,r18,14
  802b04:	8080000b 	ldhu	r2,0(r16)
  802b08:	8c7fffc4 	addi	r17,r17,-1
  802b0c:	813ffd04 	addi	r4,r16,-12
  802b10:	b080042e 	bgeu	r22,r2,802b24 <_fwalk+0x78>
  802b14:	9080000f 	ldh	r2,0(r18)
  802b18:	14c00226 	beq	r2,r19,802b24 <_fwalk+0x78>
  802b1c:	a83ee83a 	callr	r21
  802b20:	b8aeb03a 	or	r23,r23,r2
  802b24:	84001a04 	addi	r16,r16,104
  802b28:	94801a04 	addi	r18,r18,104
  802b2c:	8cfff51e 	bne	r17,r19,802b04 <__alt_mem_onchip_mem+0xff782b04>
  802b30:	a5000017 	ldw	r20,0(r20)
  802b34:	a03fed1e 	bne	r20,zero,802aec <__alt_mem_onchip_mem+0xff782aec>
  802b38:	b805883a 	mov	r2,r23
  802b3c:	dfc00817 	ldw	ra,32(sp)
  802b40:	ddc00717 	ldw	r23,28(sp)
  802b44:	dd800617 	ldw	r22,24(sp)
  802b48:	dd400517 	ldw	r21,20(sp)
  802b4c:	dd000417 	ldw	r20,16(sp)
  802b50:	dcc00317 	ldw	r19,12(sp)
  802b54:	dc800217 	ldw	r18,8(sp)
  802b58:	dc400117 	ldw	r17,4(sp)
  802b5c:	dc000017 	ldw	r16,0(sp)
  802b60:	dec00904 	addi	sp,sp,36
  802b64:	f800283a 	ret
  802b68:	002f883a 	mov	r23,zero
  802b6c:	003ff206 	br	802b38 <__alt_mem_onchip_mem+0xff782b38>

00802b70 <_fwalk_reent>:
  802b70:	defff704 	addi	sp,sp,-36
  802b74:	dd000415 	stw	r20,16(sp)
  802b78:	dfc00815 	stw	ra,32(sp)
  802b7c:	ddc00715 	stw	r23,28(sp)
  802b80:	dd800615 	stw	r22,24(sp)
  802b84:	dd400515 	stw	r21,20(sp)
  802b88:	dcc00315 	stw	r19,12(sp)
  802b8c:	dc800215 	stw	r18,8(sp)
  802b90:	dc400115 	stw	r17,4(sp)
  802b94:	dc000015 	stw	r16,0(sp)
  802b98:	2500b804 	addi	r20,r4,736
  802b9c:	a0002326 	beq	r20,zero,802c2c <_fwalk_reent+0xbc>
  802ba0:	282b883a 	mov	r21,r5
  802ba4:	2027883a 	mov	r19,r4
  802ba8:	002f883a 	mov	r23,zero
  802bac:	05800044 	movi	r22,1
  802bb0:	04bfffc4 	movi	r18,-1
  802bb4:	a4400117 	ldw	r17,4(r20)
  802bb8:	a4000217 	ldw	r16,8(r20)
  802bbc:	8c7fffc4 	addi	r17,r17,-1
  802bc0:	88000c16 	blt	r17,zero,802bf4 <_fwalk_reent+0x84>
  802bc4:	84000304 	addi	r16,r16,12
  802bc8:	8080000b 	ldhu	r2,0(r16)
  802bcc:	8c7fffc4 	addi	r17,r17,-1
  802bd0:	817ffd04 	addi	r5,r16,-12
  802bd4:	b080052e 	bgeu	r22,r2,802bec <_fwalk_reent+0x7c>
  802bd8:	8080008f 	ldh	r2,2(r16)
  802bdc:	9809883a 	mov	r4,r19
  802be0:	14800226 	beq	r2,r18,802bec <_fwalk_reent+0x7c>
  802be4:	a83ee83a 	callr	r21
  802be8:	b8aeb03a 	or	r23,r23,r2
  802bec:	84001a04 	addi	r16,r16,104
  802bf0:	8cbff51e 	bne	r17,r18,802bc8 <__alt_mem_onchip_mem+0xff782bc8>
  802bf4:	a5000017 	ldw	r20,0(r20)
  802bf8:	a03fee1e 	bne	r20,zero,802bb4 <__alt_mem_onchip_mem+0xff782bb4>
  802bfc:	b805883a 	mov	r2,r23
  802c00:	dfc00817 	ldw	ra,32(sp)
  802c04:	ddc00717 	ldw	r23,28(sp)
  802c08:	dd800617 	ldw	r22,24(sp)
  802c0c:	dd400517 	ldw	r21,20(sp)
  802c10:	dd000417 	ldw	r20,16(sp)
  802c14:	dcc00317 	ldw	r19,12(sp)
  802c18:	dc800217 	ldw	r18,8(sp)
  802c1c:	dc400117 	ldw	r17,4(sp)
  802c20:	dc000017 	ldw	r16,0(sp)
  802c24:	dec00904 	addi	sp,sp,36
  802c28:	f800283a 	ret
  802c2c:	002f883a 	mov	r23,zero
  802c30:	003ff206 	br	802bfc <__alt_mem_onchip_mem+0xff782bfc>

00802c34 <_fwrite_r>:
  802c34:	defff504 	addi	sp,sp,-44
  802c38:	dc800815 	stw	r18,32(sp)
  802c3c:	39a5383a 	mul	r18,r7,r6
  802c40:	d8800304 	addi	r2,sp,12
  802c44:	d8800015 	stw	r2,0(sp)
  802c48:	00800044 	movi	r2,1
  802c4c:	dcc00915 	stw	r19,36(sp)
  802c50:	dc400715 	stw	r17,28(sp)
  802c54:	dc000615 	stw	r16,24(sp)
  802c58:	d9400315 	stw	r5,12(sp)
  802c5c:	dfc00a15 	stw	ra,40(sp)
  802c60:	dc800415 	stw	r18,16(sp)
  802c64:	dc800215 	stw	r18,8(sp)
  802c68:	d8800115 	stw	r2,4(sp)
  802c6c:	3027883a 	mov	r19,r6
  802c70:	3821883a 	mov	r16,r7
  802c74:	2023883a 	mov	r17,r4
  802c78:	d9400b17 	ldw	r5,44(sp)
  802c7c:	20000226 	beq	r4,zero,802c88 <_fwrite_r+0x54>
  802c80:	20800e17 	ldw	r2,56(r4)
  802c84:	10001a26 	beq	r2,zero,802cf0 <_fwrite_r+0xbc>
  802c88:	2880030b 	ldhu	r2,12(r5)
  802c8c:	10c8000c 	andi	r3,r2,8192
  802c90:	1800061e 	bne	r3,zero,802cac <_fwrite_r+0x78>
  802c94:	29001917 	ldw	r4,100(r5)
  802c98:	00f7ffc4 	movi	r3,-8193
  802c9c:	10880014 	ori	r2,r2,8192
  802ca0:	20c6703a 	and	r3,r4,r3
  802ca4:	2880030d 	sth	r2,12(r5)
  802ca8:	28c01915 	stw	r3,100(r5)
  802cac:	d80d883a 	mov	r6,sp
  802cb0:	8809883a 	mov	r4,r17
  802cb4:	08087a80 	call	8087a8 <__sfvwrite_r>
  802cb8:	10000b26 	beq	r2,zero,802ce8 <_fwrite_r+0xb4>
  802cbc:	d9000217 	ldw	r4,8(sp)
  802cc0:	980b883a 	mov	r5,r19
  802cc4:	9109c83a 	sub	r4,r18,r4
  802cc8:	080d1f00 	call	80d1f0 <__udivsi3>
  802ccc:	dfc00a17 	ldw	ra,40(sp)
  802cd0:	dcc00917 	ldw	r19,36(sp)
  802cd4:	dc800817 	ldw	r18,32(sp)
  802cd8:	dc400717 	ldw	r17,28(sp)
  802cdc:	dc000617 	ldw	r16,24(sp)
  802ce0:	dec00b04 	addi	sp,sp,44
  802ce4:	f800283a 	ret
  802ce8:	8005883a 	mov	r2,r16
  802cec:	003ff706 	br	802ccc <__alt_mem_onchip_mem+0xff782ccc>
  802cf0:	d9400515 	stw	r5,20(sp)
  802cf4:	08024280 	call	802428 <__sinit>
  802cf8:	d9400517 	ldw	r5,20(sp)
  802cfc:	003fe206 	br	802c88 <__alt_mem_onchip_mem+0xff782c88>

00802d00 <fwrite>:
  802d00:	defffe04 	addi	sp,sp,-8
  802d04:	00802074 	movhi	r2,129
  802d08:	d9c00015 	stw	r7,0(sp)
  802d0c:	1097e104 	addi	r2,r2,24452
  802d10:	300f883a 	mov	r7,r6
  802d14:	280d883a 	mov	r6,r5
  802d18:	200b883a 	mov	r5,r4
  802d1c:	11000017 	ldw	r4,0(r2)
  802d20:	dfc00115 	stw	ra,4(sp)
  802d24:	0802c340 	call	802c34 <_fwrite_r>
  802d28:	dfc00117 	ldw	ra,4(sp)
  802d2c:	dec00204 	addi	sp,sp,8
  802d30:	f800283a 	ret

00802d34 <__smakebuf_r>:
  802d34:	2880030b 	ldhu	r2,12(r5)
  802d38:	10c0008c 	andi	r3,r2,2
  802d3c:	1800411e 	bne	r3,zero,802e44 <__smakebuf_r+0x110>
  802d40:	deffec04 	addi	sp,sp,-80
  802d44:	dc000f15 	stw	r16,60(sp)
  802d48:	2821883a 	mov	r16,r5
  802d4c:	2940038f 	ldh	r5,14(r5)
  802d50:	dc401015 	stw	r17,64(sp)
  802d54:	dfc01315 	stw	ra,76(sp)
  802d58:	dcc01215 	stw	r19,72(sp)
  802d5c:	dc801115 	stw	r18,68(sp)
  802d60:	2023883a 	mov	r17,r4
  802d64:	28001c16 	blt	r5,zero,802dd8 <__smakebuf_r+0xa4>
  802d68:	d80d883a 	mov	r6,sp
  802d6c:	0802a500 	call	802a50 <_fstat_r>
  802d70:	10001816 	blt	r2,zero,802dd4 <__smakebuf_r+0xa0>
  802d74:	d8800117 	ldw	r2,4(sp)
  802d78:	00e00014 	movui	r3,32768
  802d7c:	10bc000c 	andi	r2,r2,61440
  802d80:	14c80020 	cmpeqi	r19,r2,8192
  802d84:	10c03726 	beq	r2,r3,802e64 <__smakebuf_r+0x130>
  802d88:	80c0030b 	ldhu	r3,12(r16)
  802d8c:	18c20014 	ori	r3,r3,2048
  802d90:	80c0030d 	sth	r3,12(r16)
  802d94:	00c80004 	movi	r3,8192
  802d98:	10c0521e 	bne	r2,r3,802ee4 <__smakebuf_r+0x1b0>
  802d9c:	8140038f 	ldh	r5,14(r16)
  802da0:	8809883a 	mov	r4,r17
  802da4:	0808c640 	call	808c64 <_isatty_r>
  802da8:	10004c26 	beq	r2,zero,802edc <__smakebuf_r+0x1a8>
  802dac:	8080030b 	ldhu	r2,12(r16)
  802db0:	80c010c4 	addi	r3,r16,67
  802db4:	80c00015 	stw	r3,0(r16)
  802db8:	10800054 	ori	r2,r2,1
  802dbc:	8080030d 	sth	r2,12(r16)
  802dc0:	00800044 	movi	r2,1
  802dc4:	80c00415 	stw	r3,16(r16)
  802dc8:	80800515 	stw	r2,20(r16)
  802dcc:	04810004 	movi	r18,1024
  802dd0:	00000706 	br	802df0 <__smakebuf_r+0xbc>
  802dd4:	8080030b 	ldhu	r2,12(r16)
  802dd8:	10c0200c 	andi	r3,r2,128
  802ddc:	18001f1e 	bne	r3,zero,802e5c <__smakebuf_r+0x128>
  802de0:	04810004 	movi	r18,1024
  802de4:	10820014 	ori	r2,r2,2048
  802de8:	8080030d 	sth	r2,12(r16)
  802dec:	0027883a 	mov	r19,zero
  802df0:	900b883a 	mov	r5,r18
  802df4:	8809883a 	mov	r4,r17
  802df8:	0802f180 	call	802f18 <_malloc_r>
  802dfc:	10002c26 	beq	r2,zero,802eb0 <__smakebuf_r+0x17c>
  802e00:	80c0030b 	ldhu	r3,12(r16)
  802e04:	01002034 	movhi	r4,128
  802e08:	21083804 	addi	r4,r4,8416
  802e0c:	89000f15 	stw	r4,60(r17)
  802e10:	18c02014 	ori	r3,r3,128
  802e14:	80c0030d 	sth	r3,12(r16)
  802e18:	80800015 	stw	r2,0(r16)
  802e1c:	80800415 	stw	r2,16(r16)
  802e20:	84800515 	stw	r18,20(r16)
  802e24:	98001a1e 	bne	r19,zero,802e90 <__smakebuf_r+0x15c>
  802e28:	dfc01317 	ldw	ra,76(sp)
  802e2c:	dcc01217 	ldw	r19,72(sp)
  802e30:	dc801117 	ldw	r18,68(sp)
  802e34:	dc401017 	ldw	r17,64(sp)
  802e38:	dc000f17 	ldw	r16,60(sp)
  802e3c:	dec01404 	addi	sp,sp,80
  802e40:	f800283a 	ret
  802e44:	288010c4 	addi	r2,r5,67
  802e48:	28800015 	stw	r2,0(r5)
  802e4c:	28800415 	stw	r2,16(r5)
  802e50:	00800044 	movi	r2,1
  802e54:	28800515 	stw	r2,20(r5)
  802e58:	f800283a 	ret
  802e5c:	04801004 	movi	r18,64
  802e60:	003fe006 	br	802de4 <__alt_mem_onchip_mem+0xff782de4>
  802e64:	81000a17 	ldw	r4,40(r16)
  802e68:	00c02034 	movhi	r3,128
  802e6c:	18cf6c04 	addi	r3,r3,15792
  802e70:	20ffc51e 	bne	r4,r3,802d88 <__alt_mem_onchip_mem+0xff782d88>
  802e74:	8080030b 	ldhu	r2,12(r16)
  802e78:	04810004 	movi	r18,1024
  802e7c:	84801315 	stw	r18,76(r16)
  802e80:	1484b03a 	or	r2,r2,r18
  802e84:	8080030d 	sth	r2,12(r16)
  802e88:	0027883a 	mov	r19,zero
  802e8c:	003fd806 	br	802df0 <__alt_mem_onchip_mem+0xff782df0>
  802e90:	8140038f 	ldh	r5,14(r16)
  802e94:	8809883a 	mov	r4,r17
  802e98:	0808c640 	call	808c64 <_isatty_r>
  802e9c:	103fe226 	beq	r2,zero,802e28 <__alt_mem_onchip_mem+0xff782e28>
  802ea0:	8080030b 	ldhu	r2,12(r16)
  802ea4:	10800054 	ori	r2,r2,1
  802ea8:	8080030d 	sth	r2,12(r16)
  802eac:	003fde06 	br	802e28 <__alt_mem_onchip_mem+0xff782e28>
  802eb0:	8080030b 	ldhu	r2,12(r16)
  802eb4:	10c0800c 	andi	r3,r2,512
  802eb8:	183fdb1e 	bne	r3,zero,802e28 <__alt_mem_onchip_mem+0xff782e28>
  802ebc:	10800094 	ori	r2,r2,2
  802ec0:	80c010c4 	addi	r3,r16,67
  802ec4:	8080030d 	sth	r2,12(r16)
  802ec8:	00800044 	movi	r2,1
  802ecc:	80c00015 	stw	r3,0(r16)
  802ed0:	80c00415 	stw	r3,16(r16)
  802ed4:	80800515 	stw	r2,20(r16)
  802ed8:	003fd306 	br	802e28 <__alt_mem_onchip_mem+0xff782e28>
  802edc:	04810004 	movi	r18,1024
  802ee0:	003fc306 	br	802df0 <__alt_mem_onchip_mem+0xff782df0>
  802ee4:	0027883a 	mov	r19,zero
  802ee8:	04810004 	movi	r18,1024
  802eec:	003fc006 	br	802df0 <__alt_mem_onchip_mem+0xff782df0>

00802ef0 <malloc>:
  802ef0:	00802074 	movhi	r2,129
  802ef4:	1097e104 	addi	r2,r2,24452
  802ef8:	200b883a 	mov	r5,r4
  802efc:	11000017 	ldw	r4,0(r2)
  802f00:	0802f181 	jmpi	802f18 <_malloc_r>

00802f04 <free>:
  802f04:	00802074 	movhi	r2,129
  802f08:	1097e104 	addi	r2,r2,24452
  802f0c:	200b883a 	mov	r5,r4
  802f10:	11000017 	ldw	r4,0(r2)
  802f14:	08084981 	jmpi	808498 <_free_r>

00802f18 <_malloc_r>:
  802f18:	defff504 	addi	sp,sp,-44
  802f1c:	dc800315 	stw	r18,12(sp)
  802f20:	dfc00a15 	stw	ra,40(sp)
  802f24:	df000915 	stw	fp,36(sp)
  802f28:	ddc00815 	stw	r23,32(sp)
  802f2c:	dd800715 	stw	r22,28(sp)
  802f30:	dd400615 	stw	r21,24(sp)
  802f34:	dd000515 	stw	r20,20(sp)
  802f38:	dcc00415 	stw	r19,16(sp)
  802f3c:	dc400215 	stw	r17,8(sp)
  802f40:	dc000115 	stw	r16,4(sp)
  802f44:	288002c4 	addi	r2,r5,11
  802f48:	00c00584 	movi	r3,22
  802f4c:	2025883a 	mov	r18,r4
  802f50:	18807f2e 	bgeu	r3,r2,803150 <_malloc_r+0x238>
  802f54:	047ffe04 	movi	r17,-8
  802f58:	1462703a 	and	r17,r2,r17
  802f5c:	8800a316 	blt	r17,zero,8031ec <_malloc_r+0x2d4>
  802f60:	8940a236 	bltu	r17,r5,8031ec <_malloc_r+0x2d4>
  802f64:	081013c0 	call	81013c <__malloc_lock>
  802f68:	00807dc4 	movi	r2,503
  802f6c:	1441e92e 	bgeu	r2,r17,803714 <_malloc_r+0x7fc>
  802f70:	8804d27a 	srli	r2,r17,9
  802f74:	1000a126 	beq	r2,zero,8031fc <_malloc_r+0x2e4>
  802f78:	00c00104 	movi	r3,4
  802f7c:	18811e36 	bltu	r3,r2,8033f8 <_malloc_r+0x4e0>
  802f80:	8804d1ba 	srli	r2,r17,6
  802f84:	12000e44 	addi	r8,r2,57
  802f88:	11c00e04 	addi	r7,r2,56
  802f8c:	4209883a 	add	r4,r8,r8
  802f90:	04c02074 	movhi	r19,129
  802f94:	2109883a 	add	r4,r4,r4
  802f98:	9cd1bc04 	addi	r19,r19,18160
  802f9c:	2109883a 	add	r4,r4,r4
  802fa0:	9909883a 	add	r4,r19,r4
  802fa4:	24000117 	ldw	r16,4(r4)
  802fa8:	213ffe04 	addi	r4,r4,-8
  802fac:	24009726 	beq	r4,r16,80320c <_malloc_r+0x2f4>
  802fb0:	80800117 	ldw	r2,4(r16)
  802fb4:	01bfff04 	movi	r6,-4
  802fb8:	014003c4 	movi	r5,15
  802fbc:	1184703a 	and	r2,r2,r6
  802fc0:	1447c83a 	sub	r3,r2,r17
  802fc4:	28c00716 	blt	r5,r3,802fe4 <_malloc_r+0xcc>
  802fc8:	1800920e 	bge	r3,zero,803214 <_malloc_r+0x2fc>
  802fcc:	84000317 	ldw	r16,12(r16)
  802fd0:	24008e26 	beq	r4,r16,80320c <_malloc_r+0x2f4>
  802fd4:	80800117 	ldw	r2,4(r16)
  802fd8:	1184703a 	and	r2,r2,r6
  802fdc:	1447c83a 	sub	r3,r2,r17
  802fe0:	28fff90e 	bge	r5,r3,802fc8 <__alt_mem_onchip_mem+0xff782fc8>
  802fe4:	3809883a 	mov	r4,r7
  802fe8:	01802074 	movhi	r6,129
  802fec:	9c000417 	ldw	r16,16(r19)
  802ff0:	3191bc04 	addi	r6,r6,18160
  802ff4:	32000204 	addi	r8,r6,8
  802ff8:	82013426 	beq	r16,r8,8034cc <_malloc_r+0x5b4>
  802ffc:	80c00117 	ldw	r3,4(r16)
  803000:	00bfff04 	movi	r2,-4
  803004:	188e703a 	and	r7,r3,r2
  803008:	3c45c83a 	sub	r2,r7,r17
  80300c:	00c003c4 	movi	r3,15
  803010:	18811f16 	blt	r3,r2,803490 <_malloc_r+0x578>
  803014:	32000515 	stw	r8,20(r6)
  803018:	32000415 	stw	r8,16(r6)
  80301c:	10007f0e 	bge	r2,zero,80321c <_malloc_r+0x304>
  803020:	00807fc4 	movi	r2,511
  803024:	11c0fd36 	bltu	r2,r7,80341c <_malloc_r+0x504>
  803028:	3806d0fa 	srli	r3,r7,3
  80302c:	01c00044 	movi	r7,1
  803030:	30800117 	ldw	r2,4(r6)
  803034:	19400044 	addi	r5,r3,1
  803038:	294b883a 	add	r5,r5,r5
  80303c:	1807d0ba 	srai	r3,r3,2
  803040:	294b883a 	add	r5,r5,r5
  803044:	294b883a 	add	r5,r5,r5
  803048:	298b883a 	add	r5,r5,r6
  80304c:	38c6983a 	sll	r3,r7,r3
  803050:	29c00017 	ldw	r7,0(r5)
  803054:	2a7ffe04 	addi	r9,r5,-8
  803058:	1886b03a 	or	r3,r3,r2
  80305c:	82400315 	stw	r9,12(r16)
  803060:	81c00215 	stw	r7,8(r16)
  803064:	30c00115 	stw	r3,4(r6)
  803068:	2c000015 	stw	r16,0(r5)
  80306c:	3c000315 	stw	r16,12(r7)
  803070:	2005d0ba 	srai	r2,r4,2
  803074:	01400044 	movi	r5,1
  803078:	288a983a 	sll	r5,r5,r2
  80307c:	19406f36 	bltu	r3,r5,80323c <_malloc_r+0x324>
  803080:	28c4703a 	and	r2,r5,r3
  803084:	10000a1e 	bne	r2,zero,8030b0 <_malloc_r+0x198>
  803088:	00bfff04 	movi	r2,-4
  80308c:	294b883a 	add	r5,r5,r5
  803090:	2088703a 	and	r4,r4,r2
  803094:	28c4703a 	and	r2,r5,r3
  803098:	21000104 	addi	r4,r4,4
  80309c:	1000041e 	bne	r2,zero,8030b0 <_malloc_r+0x198>
  8030a0:	294b883a 	add	r5,r5,r5
  8030a4:	28c4703a 	and	r2,r5,r3
  8030a8:	21000104 	addi	r4,r4,4
  8030ac:	103ffc26 	beq	r2,zero,8030a0 <__alt_mem_onchip_mem+0xff7830a0>
  8030b0:	02bfff04 	movi	r10,-4
  8030b4:	024003c4 	movi	r9,15
  8030b8:	21800044 	addi	r6,r4,1
  8030bc:	318d883a 	add	r6,r6,r6
  8030c0:	318d883a 	add	r6,r6,r6
  8030c4:	318d883a 	add	r6,r6,r6
  8030c8:	998d883a 	add	r6,r19,r6
  8030cc:	333ffe04 	addi	r12,r6,-8
  8030d0:	2017883a 	mov	r11,r4
  8030d4:	31800104 	addi	r6,r6,4
  8030d8:	34000017 	ldw	r16,0(r6)
  8030dc:	31fffd04 	addi	r7,r6,-12
  8030e0:	81c0041e 	bne	r16,r7,8030f4 <_malloc_r+0x1dc>
  8030e4:	0000fb06 	br	8034d4 <_malloc_r+0x5bc>
  8030e8:	1801030e 	bge	r3,zero,8034f8 <_malloc_r+0x5e0>
  8030ec:	84000317 	ldw	r16,12(r16)
  8030f0:	81c0f826 	beq	r16,r7,8034d4 <_malloc_r+0x5bc>
  8030f4:	80800117 	ldw	r2,4(r16)
  8030f8:	1284703a 	and	r2,r2,r10
  8030fc:	1447c83a 	sub	r3,r2,r17
  803100:	48fff90e 	bge	r9,r3,8030e8 <__alt_mem_onchip_mem+0xff7830e8>
  803104:	80800317 	ldw	r2,12(r16)
  803108:	81000217 	ldw	r4,8(r16)
  80310c:	89400054 	ori	r5,r17,1
  803110:	81400115 	stw	r5,4(r16)
  803114:	20800315 	stw	r2,12(r4)
  803118:	11000215 	stw	r4,8(r2)
  80311c:	8463883a 	add	r17,r16,r17
  803120:	9c400515 	stw	r17,20(r19)
  803124:	9c400415 	stw	r17,16(r19)
  803128:	18800054 	ori	r2,r3,1
  80312c:	88800115 	stw	r2,4(r17)
  803130:	8a000315 	stw	r8,12(r17)
  803134:	8a000215 	stw	r8,8(r17)
  803138:	88e3883a 	add	r17,r17,r3
  80313c:	88c00015 	stw	r3,0(r17)
  803140:	9009883a 	mov	r4,r18
  803144:	08101600 	call	810160 <__malloc_unlock>
  803148:	80800204 	addi	r2,r16,8
  80314c:	00001b06 	br	8031bc <_malloc_r+0x2a4>
  803150:	04400404 	movi	r17,16
  803154:	89402536 	bltu	r17,r5,8031ec <_malloc_r+0x2d4>
  803158:	081013c0 	call	81013c <__malloc_lock>
  80315c:	00800184 	movi	r2,6
  803160:	01000084 	movi	r4,2
  803164:	04c02074 	movhi	r19,129
  803168:	1085883a 	add	r2,r2,r2
  80316c:	9cd1bc04 	addi	r19,r19,18160
  803170:	1085883a 	add	r2,r2,r2
  803174:	9885883a 	add	r2,r19,r2
  803178:	14000117 	ldw	r16,4(r2)
  80317c:	10fffe04 	addi	r3,r2,-8
  803180:	80c0d926 	beq	r16,r3,8034e8 <_malloc_r+0x5d0>
  803184:	80c00117 	ldw	r3,4(r16)
  803188:	81000317 	ldw	r4,12(r16)
  80318c:	00bfff04 	movi	r2,-4
  803190:	1884703a 	and	r2,r3,r2
  803194:	81400217 	ldw	r5,8(r16)
  803198:	8085883a 	add	r2,r16,r2
  80319c:	10c00117 	ldw	r3,4(r2)
  8031a0:	29000315 	stw	r4,12(r5)
  8031a4:	21400215 	stw	r5,8(r4)
  8031a8:	18c00054 	ori	r3,r3,1
  8031ac:	10c00115 	stw	r3,4(r2)
  8031b0:	9009883a 	mov	r4,r18
  8031b4:	08101600 	call	810160 <__malloc_unlock>
  8031b8:	80800204 	addi	r2,r16,8
  8031bc:	dfc00a17 	ldw	ra,40(sp)
  8031c0:	df000917 	ldw	fp,36(sp)
  8031c4:	ddc00817 	ldw	r23,32(sp)
  8031c8:	dd800717 	ldw	r22,28(sp)
  8031cc:	dd400617 	ldw	r21,24(sp)
  8031d0:	dd000517 	ldw	r20,20(sp)
  8031d4:	dcc00417 	ldw	r19,16(sp)
  8031d8:	dc800317 	ldw	r18,12(sp)
  8031dc:	dc400217 	ldw	r17,8(sp)
  8031e0:	dc000117 	ldw	r16,4(sp)
  8031e4:	dec00b04 	addi	sp,sp,44
  8031e8:	f800283a 	ret
  8031ec:	00800304 	movi	r2,12
  8031f0:	90800015 	stw	r2,0(r18)
  8031f4:	0005883a 	mov	r2,zero
  8031f8:	003ff006 	br	8031bc <__alt_mem_onchip_mem+0xff7831bc>
  8031fc:	01002004 	movi	r4,128
  803200:	02001004 	movi	r8,64
  803204:	01c00fc4 	movi	r7,63
  803208:	003f6106 	br	802f90 <__alt_mem_onchip_mem+0xff782f90>
  80320c:	4009883a 	mov	r4,r8
  803210:	003f7506 	br	802fe8 <__alt_mem_onchip_mem+0xff782fe8>
  803214:	81000317 	ldw	r4,12(r16)
  803218:	003fde06 	br	803194 <__alt_mem_onchip_mem+0xff783194>
  80321c:	81c5883a 	add	r2,r16,r7
  803220:	11400117 	ldw	r5,4(r2)
  803224:	9009883a 	mov	r4,r18
  803228:	29400054 	ori	r5,r5,1
  80322c:	11400115 	stw	r5,4(r2)
  803230:	08101600 	call	810160 <__malloc_unlock>
  803234:	80800204 	addi	r2,r16,8
  803238:	003fe006 	br	8031bc <__alt_mem_onchip_mem+0xff7831bc>
  80323c:	9c000217 	ldw	r16,8(r19)
  803240:	00bfff04 	movi	r2,-4
  803244:	85800117 	ldw	r22,4(r16)
  803248:	b0ac703a 	and	r22,r22,r2
  80324c:	b4400336 	bltu	r22,r17,80325c <_malloc_r+0x344>
  803250:	b445c83a 	sub	r2,r22,r17
  803254:	00c003c4 	movi	r3,15
  803258:	18805d16 	blt	r3,r2,8033d0 <_malloc_r+0x4b8>
  80325c:	05c02074 	movhi	r23,129
  803260:	00802074 	movhi	r2,129
  803264:	109f4504 	addi	r2,r2,32020
  803268:	bdd7e204 	addi	r23,r23,24456
  80326c:	15400017 	ldw	r21,0(r2)
  803270:	b8c00017 	ldw	r3,0(r23)
  803274:	00bfffc4 	movi	r2,-1
  803278:	858d883a 	add	r6,r16,r22
  80327c:	8d6b883a 	add	r21,r17,r21
  803280:	1880ea26 	beq	r3,r2,80362c <_malloc_r+0x714>
  803284:	ad4403c4 	addi	r21,r21,4111
  803288:	00bc0004 	movi	r2,-4096
  80328c:	a8aa703a 	and	r21,r21,r2
  803290:	a80b883a 	mov	r5,r21
  803294:	9009883a 	mov	r4,r18
  803298:	d9800015 	stw	r6,0(sp)
  80329c:	0803c840 	call	803c84 <_sbrk_r>
  8032a0:	1029883a 	mov	r20,r2
  8032a4:	00bfffc4 	movi	r2,-1
  8032a8:	d9800017 	ldw	r6,0(sp)
  8032ac:	a080e826 	beq	r20,r2,803650 <_malloc_r+0x738>
  8032b0:	a180a636 	bltu	r20,r6,80354c <_malloc_r+0x634>
  8032b4:	07002074 	movhi	fp,129
  8032b8:	e71f5004 	addi	fp,fp,32064
  8032bc:	e0800017 	ldw	r2,0(fp)
  8032c0:	a887883a 	add	r3,r21,r2
  8032c4:	e0c00015 	stw	r3,0(fp)
  8032c8:	3500e626 	beq	r6,r20,803664 <_malloc_r+0x74c>
  8032cc:	b9000017 	ldw	r4,0(r23)
  8032d0:	00bfffc4 	movi	r2,-1
  8032d4:	2080ee26 	beq	r4,r2,803690 <_malloc_r+0x778>
  8032d8:	a185c83a 	sub	r2,r20,r6
  8032dc:	10c5883a 	add	r2,r2,r3
  8032e0:	e0800015 	stw	r2,0(fp)
  8032e4:	a0c001cc 	andi	r3,r20,7
  8032e8:	1800bc26 	beq	r3,zero,8035dc <_malloc_r+0x6c4>
  8032ec:	a0e9c83a 	sub	r20,r20,r3
  8032f0:	00840204 	movi	r2,4104
  8032f4:	a5000204 	addi	r20,r20,8
  8032f8:	10c7c83a 	sub	r3,r2,r3
  8032fc:	a545883a 	add	r2,r20,r21
  803300:	1083ffcc 	andi	r2,r2,4095
  803304:	18abc83a 	sub	r21,r3,r2
  803308:	a80b883a 	mov	r5,r21
  80330c:	9009883a 	mov	r4,r18
  803310:	0803c840 	call	803c84 <_sbrk_r>
  803314:	00ffffc4 	movi	r3,-1
  803318:	10c0e126 	beq	r2,r3,8036a0 <_malloc_r+0x788>
  80331c:	1505c83a 	sub	r2,r2,r20
  803320:	1545883a 	add	r2,r2,r21
  803324:	10800054 	ori	r2,r2,1
  803328:	e0c00017 	ldw	r3,0(fp)
  80332c:	9d000215 	stw	r20,8(r19)
  803330:	a0800115 	stw	r2,4(r20)
  803334:	a8c7883a 	add	r3,r21,r3
  803338:	e0c00015 	stw	r3,0(fp)
  80333c:	84c00e26 	beq	r16,r19,803378 <_malloc_r+0x460>
  803340:	018003c4 	movi	r6,15
  803344:	3580a72e 	bgeu	r6,r22,8035e4 <_malloc_r+0x6cc>
  803348:	81400117 	ldw	r5,4(r16)
  80334c:	013ffe04 	movi	r4,-8
  803350:	b0bffd04 	addi	r2,r22,-12
  803354:	1104703a 	and	r2,r2,r4
  803358:	2900004c 	andi	r4,r5,1
  80335c:	2088b03a 	or	r4,r4,r2
  803360:	81000115 	stw	r4,4(r16)
  803364:	01400144 	movi	r5,5
  803368:	8089883a 	add	r4,r16,r2
  80336c:	21400115 	stw	r5,4(r4)
  803370:	21400215 	stw	r5,8(r4)
  803374:	3080cd36 	bltu	r6,r2,8036ac <_malloc_r+0x794>
  803378:	00802074 	movhi	r2,129
  80337c:	109f4404 	addi	r2,r2,32016
  803380:	11000017 	ldw	r4,0(r2)
  803384:	20c0012e 	bgeu	r4,r3,80338c <_malloc_r+0x474>
  803388:	10c00015 	stw	r3,0(r2)
  80338c:	00802074 	movhi	r2,129
  803390:	109f4304 	addi	r2,r2,32012
  803394:	11000017 	ldw	r4,0(r2)
  803398:	9c000217 	ldw	r16,8(r19)
  80339c:	20c0012e 	bgeu	r4,r3,8033a4 <_malloc_r+0x48c>
  8033a0:	10c00015 	stw	r3,0(r2)
  8033a4:	80c00117 	ldw	r3,4(r16)
  8033a8:	00bfff04 	movi	r2,-4
  8033ac:	1886703a 	and	r3,r3,r2
  8033b0:	1c45c83a 	sub	r2,r3,r17
  8033b4:	1c400236 	bltu	r3,r17,8033c0 <_malloc_r+0x4a8>
  8033b8:	00c003c4 	movi	r3,15
  8033bc:	18800416 	blt	r3,r2,8033d0 <_malloc_r+0x4b8>
  8033c0:	9009883a 	mov	r4,r18
  8033c4:	08101600 	call	810160 <__malloc_unlock>
  8033c8:	0005883a 	mov	r2,zero
  8033cc:	003f7b06 	br	8031bc <__alt_mem_onchip_mem+0xff7831bc>
  8033d0:	88c00054 	ori	r3,r17,1
  8033d4:	80c00115 	stw	r3,4(r16)
  8033d8:	8463883a 	add	r17,r16,r17
  8033dc:	10800054 	ori	r2,r2,1
  8033e0:	9c400215 	stw	r17,8(r19)
  8033e4:	88800115 	stw	r2,4(r17)
  8033e8:	9009883a 	mov	r4,r18
  8033ec:	08101600 	call	810160 <__malloc_unlock>
  8033f0:	80800204 	addi	r2,r16,8
  8033f4:	003f7106 	br	8031bc <__alt_mem_onchip_mem+0xff7831bc>
  8033f8:	00c00504 	movi	r3,20
  8033fc:	18804a2e 	bgeu	r3,r2,803528 <_malloc_r+0x610>
  803400:	00c01504 	movi	r3,84
  803404:	18806e36 	bltu	r3,r2,8035c0 <_malloc_r+0x6a8>
  803408:	8804d33a 	srli	r2,r17,12
  80340c:	12001bc4 	addi	r8,r2,111
  803410:	11c01b84 	addi	r7,r2,110
  803414:	4209883a 	add	r4,r8,r8
  803418:	003edd06 	br	802f90 <__alt_mem_onchip_mem+0xff782f90>
  80341c:	3804d27a 	srli	r2,r7,9
  803420:	00c00104 	movi	r3,4
  803424:	1880442e 	bgeu	r3,r2,803538 <_malloc_r+0x620>
  803428:	00c00504 	movi	r3,20
  80342c:	18808136 	bltu	r3,r2,803634 <_malloc_r+0x71c>
  803430:	11401704 	addi	r5,r2,92
  803434:	10c016c4 	addi	r3,r2,91
  803438:	294b883a 	add	r5,r5,r5
  80343c:	294b883a 	add	r5,r5,r5
  803440:	294b883a 	add	r5,r5,r5
  803444:	994b883a 	add	r5,r19,r5
  803448:	28800017 	ldw	r2,0(r5)
  80344c:	01802074 	movhi	r6,129
  803450:	297ffe04 	addi	r5,r5,-8
  803454:	3191bc04 	addi	r6,r6,18160
  803458:	28806526 	beq	r5,r2,8035f0 <_malloc_r+0x6d8>
  80345c:	01bfff04 	movi	r6,-4
  803460:	10c00117 	ldw	r3,4(r2)
  803464:	1986703a 	and	r3,r3,r6
  803468:	38c0022e 	bgeu	r7,r3,803474 <_malloc_r+0x55c>
  80346c:	10800217 	ldw	r2,8(r2)
  803470:	28bffb1e 	bne	r5,r2,803460 <__alt_mem_onchip_mem+0xff783460>
  803474:	11400317 	ldw	r5,12(r2)
  803478:	98c00117 	ldw	r3,4(r19)
  80347c:	81400315 	stw	r5,12(r16)
  803480:	80800215 	stw	r2,8(r16)
  803484:	2c000215 	stw	r16,8(r5)
  803488:	14000315 	stw	r16,12(r2)
  80348c:	003ef806 	br	803070 <__alt_mem_onchip_mem+0xff783070>
  803490:	88c00054 	ori	r3,r17,1
  803494:	80c00115 	stw	r3,4(r16)
  803498:	8463883a 	add	r17,r16,r17
  80349c:	34400515 	stw	r17,20(r6)
  8034a0:	34400415 	stw	r17,16(r6)
  8034a4:	10c00054 	ori	r3,r2,1
  8034a8:	8a000315 	stw	r8,12(r17)
  8034ac:	8a000215 	stw	r8,8(r17)
  8034b0:	88c00115 	stw	r3,4(r17)
  8034b4:	88a3883a 	add	r17,r17,r2
  8034b8:	88800015 	stw	r2,0(r17)
  8034bc:	9009883a 	mov	r4,r18
  8034c0:	08101600 	call	810160 <__malloc_unlock>
  8034c4:	80800204 	addi	r2,r16,8
  8034c8:	003f3c06 	br	8031bc <__alt_mem_onchip_mem+0xff7831bc>
  8034cc:	30c00117 	ldw	r3,4(r6)
  8034d0:	003ee706 	br	803070 <__alt_mem_onchip_mem+0xff783070>
  8034d4:	5ac00044 	addi	r11,r11,1
  8034d8:	588000cc 	andi	r2,r11,3
  8034dc:	31800204 	addi	r6,r6,8
  8034e0:	103efd1e 	bne	r2,zero,8030d8 <__alt_mem_onchip_mem+0xff7830d8>
  8034e4:	00002406 	br	803578 <_malloc_r+0x660>
  8034e8:	14000317 	ldw	r16,12(r2)
  8034ec:	143f251e 	bne	r2,r16,803184 <__alt_mem_onchip_mem+0xff783184>
  8034f0:	21000084 	addi	r4,r4,2
  8034f4:	003ebc06 	br	802fe8 <__alt_mem_onchip_mem+0xff782fe8>
  8034f8:	8085883a 	add	r2,r16,r2
  8034fc:	10c00117 	ldw	r3,4(r2)
  803500:	81000317 	ldw	r4,12(r16)
  803504:	81400217 	ldw	r5,8(r16)
  803508:	18c00054 	ori	r3,r3,1
  80350c:	10c00115 	stw	r3,4(r2)
  803510:	29000315 	stw	r4,12(r5)
  803514:	21400215 	stw	r5,8(r4)
  803518:	9009883a 	mov	r4,r18
  80351c:	08101600 	call	810160 <__malloc_unlock>
  803520:	80800204 	addi	r2,r16,8
  803524:	003f2506 	br	8031bc <__alt_mem_onchip_mem+0xff7831bc>
  803528:	12001704 	addi	r8,r2,92
  80352c:	11c016c4 	addi	r7,r2,91
  803530:	4209883a 	add	r4,r8,r8
  803534:	003e9606 	br	802f90 <__alt_mem_onchip_mem+0xff782f90>
  803538:	3804d1ba 	srli	r2,r7,6
  80353c:	11400e44 	addi	r5,r2,57
  803540:	10c00e04 	addi	r3,r2,56
  803544:	294b883a 	add	r5,r5,r5
  803548:	003fbc06 	br	80343c <__alt_mem_onchip_mem+0xff78343c>
  80354c:	84ff5926 	beq	r16,r19,8032b4 <__alt_mem_onchip_mem+0xff7832b4>
  803550:	00802074 	movhi	r2,129
  803554:	1091bc04 	addi	r2,r2,18160
  803558:	14000217 	ldw	r16,8(r2)
  80355c:	00bfff04 	movi	r2,-4
  803560:	80c00117 	ldw	r3,4(r16)
  803564:	1886703a 	and	r3,r3,r2
  803568:	003f9106 	br	8033b0 <__alt_mem_onchip_mem+0xff7833b0>
  80356c:	60800217 	ldw	r2,8(r12)
  803570:	213fffc4 	addi	r4,r4,-1
  803574:	1300651e 	bne	r2,r12,80370c <_malloc_r+0x7f4>
  803578:	208000cc 	andi	r2,r4,3
  80357c:	633ffe04 	addi	r12,r12,-8
  803580:	103ffa1e 	bne	r2,zero,80356c <__alt_mem_onchip_mem+0xff78356c>
  803584:	98800117 	ldw	r2,4(r19)
  803588:	0146303a 	nor	r3,zero,r5
  80358c:	1884703a 	and	r2,r3,r2
  803590:	98800115 	stw	r2,4(r19)
  803594:	294b883a 	add	r5,r5,r5
  803598:	117f2836 	bltu	r2,r5,80323c <__alt_mem_onchip_mem+0xff78323c>
  80359c:	283f2726 	beq	r5,zero,80323c <__alt_mem_onchip_mem+0xff78323c>
  8035a0:	2886703a 	and	r3,r5,r2
  8035a4:	5809883a 	mov	r4,r11
  8035a8:	183ec31e 	bne	r3,zero,8030b8 <__alt_mem_onchip_mem+0xff7830b8>
  8035ac:	294b883a 	add	r5,r5,r5
  8035b0:	2886703a 	and	r3,r5,r2
  8035b4:	21000104 	addi	r4,r4,4
  8035b8:	183ffc26 	beq	r3,zero,8035ac <__alt_mem_onchip_mem+0xff7835ac>
  8035bc:	003ebe06 	br	8030b8 <__alt_mem_onchip_mem+0xff7830b8>
  8035c0:	00c05504 	movi	r3,340
  8035c4:	18801236 	bltu	r3,r2,803610 <_malloc_r+0x6f8>
  8035c8:	8804d3fa 	srli	r2,r17,15
  8035cc:	12001e04 	addi	r8,r2,120
  8035d0:	11c01dc4 	addi	r7,r2,119
  8035d4:	4209883a 	add	r4,r8,r8
  8035d8:	003e6d06 	br	802f90 <__alt_mem_onchip_mem+0xff782f90>
  8035dc:	00c40004 	movi	r3,4096
  8035e0:	003f4606 	br	8032fc <__alt_mem_onchip_mem+0xff7832fc>
  8035e4:	00800044 	movi	r2,1
  8035e8:	a0800115 	stw	r2,4(r20)
  8035ec:	003f7406 	br	8033c0 <__alt_mem_onchip_mem+0xff7833c0>
  8035f0:	1805d0ba 	srai	r2,r3,2
  8035f4:	01c00044 	movi	r7,1
  8035f8:	30c00117 	ldw	r3,4(r6)
  8035fc:	388e983a 	sll	r7,r7,r2
  803600:	2805883a 	mov	r2,r5
  803604:	38c6b03a 	or	r3,r7,r3
  803608:	30c00115 	stw	r3,4(r6)
  80360c:	003f9b06 	br	80347c <__alt_mem_onchip_mem+0xff78347c>
  803610:	00c15504 	movi	r3,1364
  803614:	18801a36 	bltu	r3,r2,803680 <_malloc_r+0x768>
  803618:	8804d4ba 	srli	r2,r17,18
  80361c:	12001f44 	addi	r8,r2,125
  803620:	11c01f04 	addi	r7,r2,124
  803624:	4209883a 	add	r4,r8,r8
  803628:	003e5906 	br	802f90 <__alt_mem_onchip_mem+0xff782f90>
  80362c:	ad400404 	addi	r21,r21,16
  803630:	003f1706 	br	803290 <__alt_mem_onchip_mem+0xff783290>
  803634:	00c01504 	movi	r3,84
  803638:	18802336 	bltu	r3,r2,8036c8 <_malloc_r+0x7b0>
  80363c:	3804d33a 	srli	r2,r7,12
  803640:	11401bc4 	addi	r5,r2,111
  803644:	10c01b84 	addi	r3,r2,110
  803648:	294b883a 	add	r5,r5,r5
  80364c:	003f7b06 	br	80343c <__alt_mem_onchip_mem+0xff78343c>
  803650:	9c000217 	ldw	r16,8(r19)
  803654:	00bfff04 	movi	r2,-4
  803658:	80c00117 	ldw	r3,4(r16)
  80365c:	1886703a 	and	r3,r3,r2
  803660:	003f5306 	br	8033b0 <__alt_mem_onchip_mem+0xff7833b0>
  803664:	3083ffcc 	andi	r2,r6,4095
  803668:	103f181e 	bne	r2,zero,8032cc <__alt_mem_onchip_mem+0xff7832cc>
  80366c:	99000217 	ldw	r4,8(r19)
  803670:	b545883a 	add	r2,r22,r21
  803674:	10800054 	ori	r2,r2,1
  803678:	20800115 	stw	r2,4(r4)
  80367c:	003f3e06 	br	803378 <__alt_mem_onchip_mem+0xff783378>
  803680:	01003f84 	movi	r4,254
  803684:	02001fc4 	movi	r8,127
  803688:	01c01f84 	movi	r7,126
  80368c:	003e4006 	br	802f90 <__alt_mem_onchip_mem+0xff782f90>
  803690:	00802074 	movhi	r2,129
  803694:	1097e204 	addi	r2,r2,24456
  803698:	15000015 	stw	r20,0(r2)
  80369c:	003f1106 	br	8032e4 <__alt_mem_onchip_mem+0xff7832e4>
  8036a0:	00800044 	movi	r2,1
  8036a4:	002b883a 	mov	r21,zero
  8036a8:	003f1f06 	br	803328 <__alt_mem_onchip_mem+0xff783328>
  8036ac:	81400204 	addi	r5,r16,8
  8036b0:	9009883a 	mov	r4,r18
  8036b4:	08084980 	call	808498 <_free_r>
  8036b8:	00802074 	movhi	r2,129
  8036bc:	109f5004 	addi	r2,r2,32064
  8036c0:	10c00017 	ldw	r3,0(r2)
  8036c4:	003f2c06 	br	803378 <__alt_mem_onchip_mem+0xff783378>
  8036c8:	00c05504 	movi	r3,340
  8036cc:	18800536 	bltu	r3,r2,8036e4 <_malloc_r+0x7cc>
  8036d0:	3804d3fa 	srli	r2,r7,15
  8036d4:	11401e04 	addi	r5,r2,120
  8036d8:	10c01dc4 	addi	r3,r2,119
  8036dc:	294b883a 	add	r5,r5,r5
  8036e0:	003f5606 	br	80343c <__alt_mem_onchip_mem+0xff78343c>
  8036e4:	00c15504 	movi	r3,1364
  8036e8:	18800536 	bltu	r3,r2,803700 <_malloc_r+0x7e8>
  8036ec:	3804d4ba 	srli	r2,r7,18
  8036f0:	11401f44 	addi	r5,r2,125
  8036f4:	10c01f04 	addi	r3,r2,124
  8036f8:	294b883a 	add	r5,r5,r5
  8036fc:	003f4f06 	br	80343c <__alt_mem_onchip_mem+0xff78343c>
  803700:	01403f84 	movi	r5,254
  803704:	00c01f84 	movi	r3,126
  803708:	003f4c06 	br	80343c <__alt_mem_onchip_mem+0xff78343c>
  80370c:	98800117 	ldw	r2,4(r19)
  803710:	003fa006 	br	803594 <__alt_mem_onchip_mem+0xff783594>
  803714:	8808d0fa 	srli	r4,r17,3
  803718:	20800044 	addi	r2,r4,1
  80371c:	1085883a 	add	r2,r2,r2
  803720:	003e9006 	br	803164 <__alt_mem_onchip_mem+0xff783164>

00803724 <memset>:
  803724:	20c000cc 	andi	r3,r4,3
  803728:	2005883a 	mov	r2,r4
  80372c:	18004426 	beq	r3,zero,803840 <memset+0x11c>
  803730:	31ffffc4 	addi	r7,r6,-1
  803734:	30004026 	beq	r6,zero,803838 <memset+0x114>
  803738:	2813883a 	mov	r9,r5
  80373c:	200d883a 	mov	r6,r4
  803740:	2007883a 	mov	r3,r4
  803744:	00000406 	br	803758 <memset+0x34>
  803748:	3a3fffc4 	addi	r8,r7,-1
  80374c:	31800044 	addi	r6,r6,1
  803750:	38003926 	beq	r7,zero,803838 <memset+0x114>
  803754:	400f883a 	mov	r7,r8
  803758:	18c00044 	addi	r3,r3,1
  80375c:	32400005 	stb	r9,0(r6)
  803760:	1a0000cc 	andi	r8,r3,3
  803764:	403ff81e 	bne	r8,zero,803748 <__alt_mem_onchip_mem+0xff783748>
  803768:	010000c4 	movi	r4,3
  80376c:	21c02d2e 	bgeu	r4,r7,803824 <memset+0x100>
  803770:	29003fcc 	andi	r4,r5,255
  803774:	200c923a 	slli	r6,r4,8
  803778:	3108b03a 	or	r4,r6,r4
  80377c:	200c943a 	slli	r6,r4,16
  803780:	218cb03a 	or	r6,r4,r6
  803784:	010003c4 	movi	r4,15
  803788:	21c0182e 	bgeu	r4,r7,8037ec <memset+0xc8>
  80378c:	3b3ffc04 	addi	r12,r7,-16
  803790:	6018d13a 	srli	r12,r12,4
  803794:	1a000104 	addi	r8,r3,4
  803798:	1ac00204 	addi	r11,r3,8
  80379c:	6008913a 	slli	r4,r12,4
  8037a0:	1a800304 	addi	r10,r3,12
  8037a4:	1813883a 	mov	r9,r3
  8037a8:	21000504 	addi	r4,r4,20
  8037ac:	1909883a 	add	r4,r3,r4
  8037b0:	49800015 	stw	r6,0(r9)
  8037b4:	41800015 	stw	r6,0(r8)
  8037b8:	59800015 	stw	r6,0(r11)
  8037bc:	51800015 	stw	r6,0(r10)
  8037c0:	42000404 	addi	r8,r8,16
  8037c4:	4a400404 	addi	r9,r9,16
  8037c8:	5ac00404 	addi	r11,r11,16
  8037cc:	52800404 	addi	r10,r10,16
  8037d0:	413ff71e 	bne	r8,r4,8037b0 <__alt_mem_onchip_mem+0xff7837b0>
  8037d4:	63000044 	addi	r12,r12,1
  8037d8:	6018913a 	slli	r12,r12,4
  8037dc:	39c003cc 	andi	r7,r7,15
  8037e0:	010000c4 	movi	r4,3
  8037e4:	1b07883a 	add	r3,r3,r12
  8037e8:	21c00e2e 	bgeu	r4,r7,803824 <memset+0x100>
  8037ec:	1813883a 	mov	r9,r3
  8037f0:	3811883a 	mov	r8,r7
  8037f4:	010000c4 	movi	r4,3
  8037f8:	49800015 	stw	r6,0(r9)
  8037fc:	423fff04 	addi	r8,r8,-4
  803800:	4a400104 	addi	r9,r9,4
  803804:	223ffc36 	bltu	r4,r8,8037f8 <__alt_mem_onchip_mem+0xff7837f8>
  803808:	393fff04 	addi	r4,r7,-4
  80380c:	2008d0ba 	srli	r4,r4,2
  803810:	39c000cc 	andi	r7,r7,3
  803814:	21000044 	addi	r4,r4,1
  803818:	2109883a 	add	r4,r4,r4
  80381c:	2109883a 	add	r4,r4,r4
  803820:	1907883a 	add	r3,r3,r4
  803824:	38000526 	beq	r7,zero,80383c <memset+0x118>
  803828:	19cf883a 	add	r7,r3,r7
  80382c:	19400005 	stb	r5,0(r3)
  803830:	18c00044 	addi	r3,r3,1
  803834:	38fffd1e 	bne	r7,r3,80382c <__alt_mem_onchip_mem+0xff78382c>
  803838:	f800283a 	ret
  80383c:	f800283a 	ret
  803840:	2007883a 	mov	r3,r4
  803844:	300f883a 	mov	r7,r6
  803848:	003fc706 	br	803768 <__alt_mem_onchip_mem+0xff783768>

0080384c <_open_r>:
  80384c:	defffd04 	addi	sp,sp,-12
  803850:	2805883a 	mov	r2,r5
  803854:	dc000015 	stw	r16,0(sp)
  803858:	04002074 	movhi	r16,129
  80385c:	dc400115 	stw	r17,4(sp)
  803860:	300b883a 	mov	r5,r6
  803864:	841f4204 	addi	r16,r16,32008
  803868:	2023883a 	mov	r17,r4
  80386c:	380d883a 	mov	r6,r7
  803870:	1009883a 	mov	r4,r2
  803874:	dfc00215 	stw	ra,8(sp)
  803878:	80000015 	stw	zero,0(r16)
  80387c:	08102840 	call	810284 <open>
  803880:	00ffffc4 	movi	r3,-1
  803884:	10c00526 	beq	r2,r3,80389c <_open_r+0x50>
  803888:	dfc00217 	ldw	ra,8(sp)
  80388c:	dc400117 	ldw	r17,4(sp)
  803890:	dc000017 	ldw	r16,0(sp)
  803894:	dec00304 	addi	sp,sp,12
  803898:	f800283a 	ret
  80389c:	80c00017 	ldw	r3,0(r16)
  8038a0:	183ff926 	beq	r3,zero,803888 <__alt_mem_onchip_mem+0xff783888>
  8038a4:	88c00015 	stw	r3,0(r17)
  8038a8:	003ff706 	br	803888 <__alt_mem_onchip_mem+0xff783888>

008038ac <_printf_r>:
  8038ac:	defffd04 	addi	sp,sp,-12
  8038b0:	2805883a 	mov	r2,r5
  8038b4:	dfc00015 	stw	ra,0(sp)
  8038b8:	d9800115 	stw	r6,4(sp)
  8038bc:	d9c00215 	stw	r7,8(sp)
  8038c0:	21400217 	ldw	r5,8(r4)
  8038c4:	d9c00104 	addi	r7,sp,4
  8038c8:	100d883a 	mov	r6,r2
  8038cc:	08041bc0 	call	8041bc <___vfprintf_internal_r>
  8038d0:	dfc00017 	ldw	ra,0(sp)
  8038d4:	dec00304 	addi	sp,sp,12
  8038d8:	f800283a 	ret

008038dc <printf>:
  8038dc:	defffc04 	addi	sp,sp,-16
  8038e0:	dfc00015 	stw	ra,0(sp)
  8038e4:	d9400115 	stw	r5,4(sp)
  8038e8:	d9800215 	stw	r6,8(sp)
  8038ec:	d9c00315 	stw	r7,12(sp)
  8038f0:	00802074 	movhi	r2,129
  8038f4:	1097e104 	addi	r2,r2,24452
  8038f8:	10800017 	ldw	r2,0(r2)
  8038fc:	200b883a 	mov	r5,r4
  803900:	d9800104 	addi	r6,sp,4
  803904:	11000217 	ldw	r4,8(r2)
  803908:	08063b40 	call	8063b4 <__vfprintf_internal>
  80390c:	dfc00017 	ldw	ra,0(sp)
  803910:	dec00404 	addi	sp,sp,16
  803914:	f800283a 	ret

00803918 <_putchar_r>:
  803918:	21800217 	ldw	r6,8(r4)
  80391c:	080a1781 	jmpi	80a178 <_putc_r>

00803920 <putchar>:
  803920:	00802074 	movhi	r2,129
  803924:	1097e104 	addi	r2,r2,24452
  803928:	200b883a 	mov	r5,r4
  80392c:	11000017 	ldw	r4,0(r2)
  803930:	21800217 	ldw	r6,8(r4)
  803934:	080a1781 	jmpi	80a178 <_putc_r>

00803938 <_puts_r>:
  803938:	defff604 	addi	sp,sp,-40
  80393c:	dc000715 	stw	r16,28(sp)
  803940:	2021883a 	mov	r16,r4
  803944:	2809883a 	mov	r4,r5
  803948:	dc400815 	stw	r17,32(sp)
  80394c:	dfc00915 	stw	ra,36(sp)
  803950:	2823883a 	mov	r17,r5
  803954:	0803e140 	call	803e14 <strlen>
  803958:	10c00044 	addi	r3,r2,1
  80395c:	d8800115 	stw	r2,4(sp)
  803960:	00802074 	movhi	r2,129
  803964:	108f5004 	addi	r2,r2,15680
  803968:	d8800215 	stw	r2,8(sp)
  80396c:	00800044 	movi	r2,1
  803970:	d8800315 	stw	r2,12(sp)
  803974:	00800084 	movi	r2,2
  803978:	dc400015 	stw	r17,0(sp)
  80397c:	d8c00615 	stw	r3,24(sp)
  803980:	dec00415 	stw	sp,16(sp)
  803984:	d8800515 	stw	r2,20(sp)
  803988:	80000226 	beq	r16,zero,803994 <_puts_r+0x5c>
  80398c:	80800e17 	ldw	r2,56(r16)
  803990:	10001426 	beq	r2,zero,8039e4 <_puts_r+0xac>
  803994:	81400217 	ldw	r5,8(r16)
  803998:	2880030b 	ldhu	r2,12(r5)
  80399c:	10c8000c 	andi	r3,r2,8192
  8039a0:	1800061e 	bne	r3,zero,8039bc <_puts_r+0x84>
  8039a4:	29001917 	ldw	r4,100(r5)
  8039a8:	00f7ffc4 	movi	r3,-8193
  8039ac:	10880014 	ori	r2,r2,8192
  8039b0:	20c6703a 	and	r3,r4,r3
  8039b4:	2880030d 	sth	r2,12(r5)
  8039b8:	28c01915 	stw	r3,100(r5)
  8039bc:	d9800404 	addi	r6,sp,16
  8039c0:	8009883a 	mov	r4,r16
  8039c4:	08087a80 	call	8087a8 <__sfvwrite_r>
  8039c8:	1000091e 	bne	r2,zero,8039f0 <_puts_r+0xb8>
  8039cc:	00800284 	movi	r2,10
  8039d0:	dfc00917 	ldw	ra,36(sp)
  8039d4:	dc400817 	ldw	r17,32(sp)
  8039d8:	dc000717 	ldw	r16,28(sp)
  8039dc:	dec00a04 	addi	sp,sp,40
  8039e0:	f800283a 	ret
  8039e4:	8009883a 	mov	r4,r16
  8039e8:	08024280 	call	802428 <__sinit>
  8039ec:	003fe906 	br	803994 <__alt_mem_onchip_mem+0xff783994>
  8039f0:	00bfffc4 	movi	r2,-1
  8039f4:	003ff606 	br	8039d0 <__alt_mem_onchip_mem+0xff7839d0>

008039f8 <puts>:
  8039f8:	00802074 	movhi	r2,129
  8039fc:	1097e104 	addi	r2,r2,24452
  803a00:	200b883a 	mov	r5,r4
  803a04:	11000017 	ldw	r4,0(r2)
  803a08:	08039381 	jmpi	803938 <_puts_r>

00803a0c <lflush>:
  803a0c:	2080030b 	ldhu	r2,12(r4)
  803a10:	00c00244 	movi	r3,9
  803a14:	1080024c 	andi	r2,r2,9
  803a18:	10c00226 	beq	r2,r3,803a24 <lflush+0x18>
  803a1c:	0005883a 	mov	r2,zero
  803a20:	f800283a 	ret
  803a24:	08082981 	jmpi	808298 <fflush>

00803a28 <__srefill_r>:
  803a28:	defffc04 	addi	sp,sp,-16
  803a2c:	dc400115 	stw	r17,4(sp)
  803a30:	dc000015 	stw	r16,0(sp)
  803a34:	dfc00315 	stw	ra,12(sp)
  803a38:	dc800215 	stw	r18,8(sp)
  803a3c:	2023883a 	mov	r17,r4
  803a40:	2821883a 	mov	r16,r5
  803a44:	20000226 	beq	r4,zero,803a50 <__srefill_r+0x28>
  803a48:	20800e17 	ldw	r2,56(r4)
  803a4c:	10003c26 	beq	r2,zero,803b40 <__srefill_r+0x118>
  803a50:	80c0030b 	ldhu	r3,12(r16)
  803a54:	1908000c 	andi	r4,r3,8192
  803a58:	1805883a 	mov	r2,r3
  803a5c:	2000071e 	bne	r4,zero,803a7c <__srefill_r+0x54>
  803a60:	81001917 	ldw	r4,100(r16)
  803a64:	18880014 	ori	r2,r3,8192
  803a68:	00f7ffc4 	movi	r3,-8193
  803a6c:	20c8703a 	and	r4,r4,r3
  803a70:	8080030d 	sth	r2,12(r16)
  803a74:	1007883a 	mov	r3,r2
  803a78:	81001915 	stw	r4,100(r16)
  803a7c:	80000115 	stw	zero,4(r16)
  803a80:	1100080c 	andi	r4,r2,32
  803a84:	2000571e 	bne	r4,zero,803be4 <__srefill_r+0x1bc>
  803a88:	1100010c 	andi	r4,r2,4
  803a8c:	20001f26 	beq	r4,zero,803b0c <__srefill_r+0xe4>
  803a90:	81400c17 	ldw	r5,48(r16)
  803a94:	28000826 	beq	r5,zero,803ab8 <__srefill_r+0x90>
  803a98:	80801004 	addi	r2,r16,64
  803a9c:	28800226 	beq	r5,r2,803aa8 <__srefill_r+0x80>
  803aa0:	8809883a 	mov	r4,r17
  803aa4:	08084980 	call	808498 <_free_r>
  803aa8:	80800f17 	ldw	r2,60(r16)
  803aac:	80000c15 	stw	zero,48(r16)
  803ab0:	80800115 	stw	r2,4(r16)
  803ab4:	1000391e 	bne	r2,zero,803b9c <__srefill_r+0x174>
  803ab8:	80800417 	ldw	r2,16(r16)
  803abc:	10004b26 	beq	r2,zero,803bec <__srefill_r+0x1c4>
  803ac0:	8480030b 	ldhu	r18,12(r16)
  803ac4:	908000cc 	andi	r2,r18,3
  803ac8:	10001f1e 	bne	r2,zero,803b48 <__srefill_r+0x120>
  803acc:	81800417 	ldw	r6,16(r16)
  803ad0:	80800817 	ldw	r2,32(r16)
  803ad4:	81c00517 	ldw	r7,20(r16)
  803ad8:	81400717 	ldw	r5,28(r16)
  803adc:	81800015 	stw	r6,0(r16)
  803ae0:	8809883a 	mov	r4,r17
  803ae4:	103ee83a 	callr	r2
  803ae8:	80800115 	stw	r2,4(r16)
  803aec:	00800e0e 	bge	zero,r2,803b28 <__srefill_r+0x100>
  803af0:	0005883a 	mov	r2,zero
  803af4:	dfc00317 	ldw	ra,12(sp)
  803af8:	dc800217 	ldw	r18,8(sp)
  803afc:	dc400117 	ldw	r17,4(sp)
  803b00:	dc000017 	ldw	r16,0(sp)
  803b04:	dec00404 	addi	sp,sp,16
  803b08:	f800283a 	ret
  803b0c:	1100040c 	andi	r4,r2,16
  803b10:	20003026 	beq	r4,zero,803bd4 <__srefill_r+0x1ac>
  803b14:	1080020c 	andi	r2,r2,8
  803b18:	1000241e 	bne	r2,zero,803bac <__srefill_r+0x184>
  803b1c:	18c00114 	ori	r3,r3,4
  803b20:	80c0030d 	sth	r3,12(r16)
  803b24:	003fe406 	br	803ab8 <__alt_mem_onchip_mem+0xff783ab8>
  803b28:	80c0030b 	ldhu	r3,12(r16)
  803b2c:	1000161e 	bne	r2,zero,803b88 <__srefill_r+0x160>
  803b30:	18c00814 	ori	r3,r3,32
  803b34:	00bfffc4 	movi	r2,-1
  803b38:	80c0030d 	sth	r3,12(r16)
  803b3c:	003fed06 	br	803af4 <__alt_mem_onchip_mem+0xff783af4>
  803b40:	08024280 	call	802428 <__sinit>
  803b44:	003fc206 	br	803a50 <__alt_mem_onchip_mem+0xff783a50>
  803b48:	00802074 	movhi	r2,129
  803b4c:	1097e004 	addi	r2,r2,24448
  803b50:	11000017 	ldw	r4,0(r2)
  803b54:	01402034 	movhi	r5,128
  803b58:	00800044 	movi	r2,1
  803b5c:	294e8304 	addi	r5,r5,14860
  803b60:	8080030d 	sth	r2,12(r16)
  803b64:	0802aac0 	call	802aac <_fwalk>
  803b68:	00800244 	movi	r2,9
  803b6c:	8480030d 	sth	r18,12(r16)
  803b70:	9480024c 	andi	r18,r18,9
  803b74:	90bfd51e 	bne	r18,r2,803acc <__alt_mem_onchip_mem+0xff783acc>
  803b78:	800b883a 	mov	r5,r16
  803b7c:	8809883a 	mov	r4,r17
  803b80:	08080200 	call	808020 <__sflush_r>
  803b84:	003fd106 	br	803acc <__alt_mem_onchip_mem+0xff783acc>
  803b88:	18c01014 	ori	r3,r3,64
  803b8c:	80000115 	stw	zero,4(r16)
  803b90:	00bfffc4 	movi	r2,-1
  803b94:	80c0030d 	sth	r3,12(r16)
  803b98:	003fd606 	br	803af4 <__alt_mem_onchip_mem+0xff783af4>
  803b9c:	80c00e17 	ldw	r3,56(r16)
  803ba0:	0005883a 	mov	r2,zero
  803ba4:	80c00015 	stw	r3,0(r16)
  803ba8:	003fd206 	br	803af4 <__alt_mem_onchip_mem+0xff783af4>
  803bac:	800b883a 	mov	r5,r16
  803bb0:	8809883a 	mov	r4,r17
  803bb4:	080823c0 	call	80823c <_fflush_r>
  803bb8:	10000a1e 	bne	r2,zero,803be4 <__srefill_r+0x1bc>
  803bbc:	8080030b 	ldhu	r2,12(r16)
  803bc0:	00fffdc4 	movi	r3,-9
  803bc4:	80000215 	stw	zero,8(r16)
  803bc8:	1886703a 	and	r3,r3,r2
  803bcc:	80000615 	stw	zero,24(r16)
  803bd0:	003fd206 	br	803b1c <__alt_mem_onchip_mem+0xff783b1c>
  803bd4:	00800244 	movi	r2,9
  803bd8:	88800015 	stw	r2,0(r17)
  803bdc:	18c01014 	ori	r3,r3,64
  803be0:	80c0030d 	sth	r3,12(r16)
  803be4:	00bfffc4 	movi	r2,-1
  803be8:	003fc206 	br	803af4 <__alt_mem_onchip_mem+0xff783af4>
  803bec:	800b883a 	mov	r5,r16
  803bf0:	8809883a 	mov	r4,r17
  803bf4:	0802d340 	call	802d34 <__smakebuf_r>
  803bf8:	003fb106 	br	803ac0 <__alt_mem_onchip_mem+0xff783ac0>

00803bfc <__srget_r>:
  803bfc:	defffd04 	addi	sp,sp,-12
  803c00:	dc400115 	stw	r17,4(sp)
  803c04:	dc000015 	stw	r16,0(sp)
  803c08:	dfc00215 	stw	ra,8(sp)
  803c0c:	2023883a 	mov	r17,r4
  803c10:	2821883a 	mov	r16,r5
  803c14:	20000226 	beq	r4,zero,803c20 <__srget_r+0x24>
  803c18:	20800e17 	ldw	r2,56(r4)
  803c1c:	10001026 	beq	r2,zero,803c60 <__srget_r+0x64>
  803c20:	800b883a 	mov	r5,r16
  803c24:	8809883a 	mov	r4,r17
  803c28:	0803a280 	call	803a28 <__srefill_r>
  803c2c:	10000e1e 	bne	r2,zero,803c68 <__srget_r+0x6c>
  803c30:	80c00017 	ldw	r3,0(r16)
  803c34:	80800117 	ldw	r2,4(r16)
  803c38:	19000044 	addi	r4,r3,1
  803c3c:	10bfffc4 	addi	r2,r2,-1
  803c40:	80800115 	stw	r2,4(r16)
  803c44:	81000015 	stw	r4,0(r16)
  803c48:	18800003 	ldbu	r2,0(r3)
  803c4c:	dfc00217 	ldw	ra,8(sp)
  803c50:	dc400117 	ldw	r17,4(sp)
  803c54:	dc000017 	ldw	r16,0(sp)
  803c58:	dec00304 	addi	sp,sp,12
  803c5c:	f800283a 	ret
  803c60:	08024280 	call	802428 <__sinit>
  803c64:	003fee06 	br	803c20 <__alt_mem_onchip_mem+0xff783c20>
  803c68:	00bfffc4 	movi	r2,-1
  803c6c:	003ff706 	br	803c4c <__alt_mem_onchip_mem+0xff783c4c>

00803c70 <__srget>:
  803c70:	00802074 	movhi	r2,129
  803c74:	1097e104 	addi	r2,r2,24452
  803c78:	200b883a 	mov	r5,r4
  803c7c:	11000017 	ldw	r4,0(r2)
  803c80:	0803bfc1 	jmpi	803bfc <__srget_r>

00803c84 <_sbrk_r>:
  803c84:	defffd04 	addi	sp,sp,-12
  803c88:	dc000015 	stw	r16,0(sp)
  803c8c:	04002074 	movhi	r16,129
  803c90:	dc400115 	stw	r17,4(sp)
  803c94:	841f4204 	addi	r16,r16,32008
  803c98:	2023883a 	mov	r17,r4
  803c9c:	2809883a 	mov	r4,r5
  803ca0:	dfc00215 	stw	ra,8(sp)
  803ca4:	80000015 	stw	zero,0(r16)
  803ca8:	08105740 	call	810574 <sbrk>
  803cac:	00ffffc4 	movi	r3,-1
  803cb0:	10c00526 	beq	r2,r3,803cc8 <_sbrk_r+0x44>
  803cb4:	dfc00217 	ldw	ra,8(sp)
  803cb8:	dc400117 	ldw	r17,4(sp)
  803cbc:	dc000017 	ldw	r16,0(sp)
  803cc0:	dec00304 	addi	sp,sp,12
  803cc4:	f800283a 	ret
  803cc8:	80c00017 	ldw	r3,0(r16)
  803ccc:	183ff926 	beq	r3,zero,803cb4 <__alt_mem_onchip_mem+0xff783cb4>
  803cd0:	88c00015 	stw	r3,0(r17)
  803cd4:	003ff706 	br	803cb4 <__alt_mem_onchip_mem+0xff783cb4>

00803cd8 <__sread>:
  803cd8:	defffe04 	addi	sp,sp,-8
  803cdc:	dc000015 	stw	r16,0(sp)
  803ce0:	2821883a 	mov	r16,r5
  803ce4:	2940038f 	ldh	r5,14(r5)
  803ce8:	dfc00115 	stw	ra,4(sp)
  803cec:	080a2e00 	call	80a2e0 <_read_r>
  803cf0:	10000716 	blt	r2,zero,803d10 <__sread+0x38>
  803cf4:	80c01417 	ldw	r3,80(r16)
  803cf8:	1887883a 	add	r3,r3,r2
  803cfc:	80c01415 	stw	r3,80(r16)
  803d00:	dfc00117 	ldw	ra,4(sp)
  803d04:	dc000017 	ldw	r16,0(sp)
  803d08:	dec00204 	addi	sp,sp,8
  803d0c:	f800283a 	ret
  803d10:	80c0030b 	ldhu	r3,12(r16)
  803d14:	18fbffcc 	andi	r3,r3,61439
  803d18:	80c0030d 	sth	r3,12(r16)
  803d1c:	dfc00117 	ldw	ra,4(sp)
  803d20:	dc000017 	ldw	r16,0(sp)
  803d24:	dec00204 	addi	sp,sp,8
  803d28:	f800283a 	ret

00803d2c <__seofread>:
  803d2c:	0005883a 	mov	r2,zero
  803d30:	f800283a 	ret

00803d34 <__swrite>:
  803d34:	2880030b 	ldhu	r2,12(r5)
  803d38:	defffb04 	addi	sp,sp,-20
  803d3c:	dcc00315 	stw	r19,12(sp)
  803d40:	dc800215 	stw	r18,8(sp)
  803d44:	dc400115 	stw	r17,4(sp)
  803d48:	dc000015 	stw	r16,0(sp)
  803d4c:	dfc00415 	stw	ra,16(sp)
  803d50:	10c0400c 	andi	r3,r2,256
  803d54:	2821883a 	mov	r16,r5
  803d58:	2023883a 	mov	r17,r4
  803d5c:	3025883a 	mov	r18,r6
  803d60:	3827883a 	mov	r19,r7
  803d64:	18000526 	beq	r3,zero,803d7c <__swrite+0x48>
  803d68:	2940038f 	ldh	r5,14(r5)
  803d6c:	01c00084 	movi	r7,2
  803d70:	000d883a 	mov	r6,zero
  803d74:	0808d940 	call	808d94 <_lseek_r>
  803d78:	8080030b 	ldhu	r2,12(r16)
  803d7c:	8140038f 	ldh	r5,14(r16)
  803d80:	10bbffcc 	andi	r2,r2,61439
  803d84:	980f883a 	mov	r7,r19
  803d88:	900d883a 	mov	r6,r18
  803d8c:	8809883a 	mov	r4,r17
  803d90:	8080030d 	sth	r2,12(r16)
  803d94:	dfc00417 	ldw	ra,16(sp)
  803d98:	dcc00317 	ldw	r19,12(sp)
  803d9c:	dc800217 	ldw	r18,8(sp)
  803da0:	dc400117 	ldw	r17,4(sp)
  803da4:	dc000017 	ldw	r16,0(sp)
  803da8:	dec00504 	addi	sp,sp,20
  803dac:	080648c1 	jmpi	80648c <_write_r>

00803db0 <__sseek>:
  803db0:	defffe04 	addi	sp,sp,-8
  803db4:	dc000015 	stw	r16,0(sp)
  803db8:	2821883a 	mov	r16,r5
  803dbc:	2940038f 	ldh	r5,14(r5)
  803dc0:	dfc00115 	stw	ra,4(sp)
  803dc4:	0808d940 	call	808d94 <_lseek_r>
  803dc8:	00ffffc4 	movi	r3,-1
  803dcc:	10c00826 	beq	r2,r3,803df0 <__sseek+0x40>
  803dd0:	80c0030b 	ldhu	r3,12(r16)
  803dd4:	80801415 	stw	r2,80(r16)
  803dd8:	18c40014 	ori	r3,r3,4096
  803ddc:	80c0030d 	sth	r3,12(r16)
  803de0:	dfc00117 	ldw	ra,4(sp)
  803de4:	dc000017 	ldw	r16,0(sp)
  803de8:	dec00204 	addi	sp,sp,8
  803dec:	f800283a 	ret
  803df0:	80c0030b 	ldhu	r3,12(r16)
  803df4:	18fbffcc 	andi	r3,r3,61439
  803df8:	80c0030d 	sth	r3,12(r16)
  803dfc:	dfc00117 	ldw	ra,4(sp)
  803e00:	dc000017 	ldw	r16,0(sp)
  803e04:	dec00204 	addi	sp,sp,8
  803e08:	f800283a 	ret

00803e0c <__sclose>:
  803e0c:	2940038f 	ldh	r5,14(r5)
  803e10:	08066401 	jmpi	806640 <_close_r>

00803e14 <strlen>:
  803e14:	208000cc 	andi	r2,r4,3
  803e18:	10002026 	beq	r2,zero,803e9c <strlen+0x88>
  803e1c:	20800007 	ldb	r2,0(r4)
  803e20:	10002026 	beq	r2,zero,803ea4 <strlen+0x90>
  803e24:	2005883a 	mov	r2,r4
  803e28:	00000206 	br	803e34 <strlen+0x20>
  803e2c:	10c00007 	ldb	r3,0(r2)
  803e30:	18001826 	beq	r3,zero,803e94 <strlen+0x80>
  803e34:	10800044 	addi	r2,r2,1
  803e38:	10c000cc 	andi	r3,r2,3
  803e3c:	183ffb1e 	bne	r3,zero,803e2c <__alt_mem_onchip_mem+0xff783e2c>
  803e40:	10c00017 	ldw	r3,0(r2)
  803e44:	01ffbff4 	movhi	r7,65279
  803e48:	39ffbfc4 	addi	r7,r7,-257
  803e4c:	00ca303a 	nor	r5,zero,r3
  803e50:	01a02074 	movhi	r6,32897
  803e54:	19c7883a 	add	r3,r3,r7
  803e58:	31a02004 	addi	r6,r6,-32640
  803e5c:	1946703a 	and	r3,r3,r5
  803e60:	1986703a 	and	r3,r3,r6
  803e64:	1800091e 	bne	r3,zero,803e8c <strlen+0x78>
  803e68:	10800104 	addi	r2,r2,4
  803e6c:	10c00017 	ldw	r3,0(r2)
  803e70:	19cb883a 	add	r5,r3,r7
  803e74:	00c6303a 	nor	r3,zero,r3
  803e78:	28c6703a 	and	r3,r5,r3
  803e7c:	1986703a 	and	r3,r3,r6
  803e80:	183ff926 	beq	r3,zero,803e68 <__alt_mem_onchip_mem+0xff783e68>
  803e84:	00000106 	br	803e8c <strlen+0x78>
  803e88:	10800044 	addi	r2,r2,1
  803e8c:	10c00007 	ldb	r3,0(r2)
  803e90:	183ffd1e 	bne	r3,zero,803e88 <__alt_mem_onchip_mem+0xff783e88>
  803e94:	1105c83a 	sub	r2,r2,r4
  803e98:	f800283a 	ret
  803e9c:	2005883a 	mov	r2,r4
  803ea0:	003fe706 	br	803e40 <__alt_mem_onchip_mem+0xff783e40>
  803ea4:	0005883a 	mov	r2,zero
  803ea8:	f800283a 	ret

00803eac <strtok>:
  803eac:	00802074 	movhi	r2,129
  803eb0:	1097e104 	addi	r2,r2,24452
  803eb4:	11800017 	ldw	r6,0(r2)
  803eb8:	01c00044 	movi	r7,1
  803ebc:	31801704 	addi	r6,r6,92
  803ec0:	0803ec41 	jmpi	803ec4 <__strtok_r>

00803ec4 <__strtok_r>:
  803ec4:	20001f26 	beq	r4,zero,803f44 <__strtok_r+0x80>
  803ec8:	2005883a 	mov	r2,r4
  803ecc:	22400007 	ldb	r9,0(r4)
  803ed0:	2807883a 	mov	r3,r5
  803ed4:	21000044 	addi	r4,r4,1
  803ed8:	00000106 	br	803ee0 <__strtok_r+0x1c>
  803edc:	4a001226 	beq	r9,r8,803f28 <__strtok_r+0x64>
  803ee0:	1a000007 	ldb	r8,0(r3)
  803ee4:	18c00044 	addi	r3,r3,1
  803ee8:	403ffc1e 	bne	r8,zero,803edc <__alt_mem_onchip_mem+0xff783edc>
  803eec:	48001926 	beq	r9,zero,803f54 <__strtok_r+0x90>
  803ef0:	22000007 	ldb	r8,0(r4)
  803ef4:	2013883a 	mov	r9,r4
  803ef8:	21000044 	addi	r4,r4,1
  803efc:	2015883a 	mov	r10,r4
  803f00:	2807883a 	mov	r3,r5
  803f04:	00000106 	br	803f0c <__strtok_r+0x48>
  803f08:	383ff926 	beq	r7,zero,803ef0 <__alt_mem_onchip_mem+0xff783ef0>
  803f0c:	19c00007 	ldb	r7,0(r3)
  803f10:	18c00044 	addi	r3,r3,1
  803f14:	41fffc1e 	bne	r8,r7,803f08 <__alt_mem_onchip_mem+0xff783f08>
  803f18:	40000726 	beq	r8,zero,803f38 <__strtok_r+0x74>
  803f1c:	48000005 	stb	zero,0(r9)
  803f20:	32800015 	stw	r10,0(r6)
  803f24:	f800283a 	ret
  803f28:	383fe71e 	bne	r7,zero,803ec8 <__alt_mem_onchip_mem+0xff783ec8>
  803f2c:	31000015 	stw	r4,0(r6)
  803f30:	10000005 	stb	zero,0(r2)
  803f34:	f800283a 	ret
  803f38:	0015883a 	mov	r10,zero
  803f3c:	32800015 	stw	r10,0(r6)
  803f40:	f800283a 	ret
  803f44:	31000017 	ldw	r4,0(r6)
  803f48:	203fdf1e 	bne	r4,zero,803ec8 <__alt_mem_onchip_mem+0xff783ec8>
  803f4c:	0005883a 	mov	r2,zero
  803f50:	f800283a 	ret
  803f54:	30000015 	stw	zero,0(r6)
  803f58:	0005883a 	mov	r2,zero
  803f5c:	f800283a 	ret

00803f60 <strtok_r>:
  803f60:	01c00044 	movi	r7,1
  803f64:	0803ec41 	jmpi	803ec4 <__strtok_r>

00803f68 <_strtol_r>:
  803f68:	00802074 	movhi	r2,129
  803f6c:	defff404 	addi	sp,sp,-48
  803f70:	1097e404 	addi	r2,r2,24464
  803f74:	dd400715 	stw	r21,28(sp)
  803f78:	15400017 	ldw	r21,0(r2)
  803f7c:	dd800815 	stw	r22,32(sp)
  803f80:	dd000615 	stw	r20,24(sp)
  803f84:	dcc00515 	stw	r19,20(sp)
  803f88:	d9000015 	stw	r4,0(sp)
  803f8c:	dfc00b15 	stw	ra,44(sp)
  803f90:	df000a15 	stw	fp,40(sp)
  803f94:	ddc00915 	stw	r23,36(sp)
  803f98:	dc800415 	stw	r18,16(sp)
  803f9c:	dc400315 	stw	r17,12(sp)
  803fa0:	dc000215 	stw	r16,8(sp)
  803fa4:	2829883a 	mov	r20,r5
  803fa8:	3027883a 	mov	r19,r6
  803fac:	382d883a 	mov	r22,r7
  803fb0:	2809883a 	mov	r4,r5
  803fb4:	24000003 	ldbu	r16,0(r4)
  803fb8:	24400044 	addi	r17,r4,1
  803fbc:	2007883a 	mov	r3,r4
  803fc0:	ac05883a 	add	r2,r21,r16
  803fc4:	10800043 	ldbu	r2,1(r2)
  803fc8:	8809883a 	mov	r4,r17
  803fcc:	1080020c 	andi	r2,r2,8
  803fd0:	103ff81e 	bne	r2,zero,803fb4 <__alt_mem_onchip_mem+0xff783fb4>
  803fd4:	00800b44 	movi	r2,45
  803fd8:	80805826 	beq	r16,r2,80413c <_strtol_r+0x1d4>
  803fdc:	00800ac4 	movi	r2,43
  803fe0:	80805a26 	beq	r16,r2,80414c <_strtol_r+0x1e4>
  803fe4:	0039883a 	mov	fp,zero
  803fe8:	b0004426 	beq	r22,zero,8040fc <_strtol_r+0x194>
  803fec:	00800404 	movi	r2,16
  803ff0:	b0806026 	beq	r22,r2,804174 <_strtol_r+0x20c>
  803ff4:	b02f883a 	mov	r23,r22
  803ff8:	00a00034 	movhi	r2,32768
  803ffc:	e025003a 	cmpeq	r18,fp,zero
  804000:	14a5c83a 	sub	r18,r2,r18
  804004:	b80b883a 	mov	r5,r23
  804008:	9009883a 	mov	r4,r18
  80400c:	080d2540 	call	80d254 <__umodsi3>
  804010:	b80b883a 	mov	r5,r23
  804014:	9009883a 	mov	r4,r18
  804018:	d8800115 	stw	r2,4(sp)
  80401c:	080d1f00 	call	80d1f0 <__udivsi3>
  804020:	ac07883a 	add	r3,r21,r16
  804024:	18c00043 	ldbu	r3,1(r3)
  804028:	880b883a 	mov	r5,r17
  80402c:	000d883a 	mov	r6,zero
  804030:	1a00010c 	andi	r8,r3,4
  804034:	0009883a 	mov	r4,zero
  804038:	02800044 	movi	r10,1
  80403c:	027fffc4 	movi	r9,-1
  804040:	d9c00117 	ldw	r7,4(sp)
  804044:	40000e26 	beq	r8,zero,804080 <_strtol_r+0x118>
  804048:	843ff404 	addi	r16,r16,-48
  80404c:	8580120e 	bge	r16,r22,804098 <_strtol_r+0x130>
  804050:	32400526 	beq	r6,r9,804068 <_strtol_r+0x100>
  804054:	11002536 	bltu	r2,r4,8040ec <_strtol_r+0x184>
  804058:	20802326 	beq	r4,r2,8040e8 <_strtol_r+0x180>
  80405c:	25c9383a 	mul	r4,r4,r23
  804060:	01800044 	movi	r6,1
  804064:	8109883a 	add	r4,r16,r4
  804068:	2c000003 	ldbu	r16,0(r5)
  80406c:	29400044 	addi	r5,r5,1
  804070:	ac07883a 	add	r3,r21,r16
  804074:	18c00043 	ldbu	r3,1(r3)
  804078:	1a00010c 	andi	r8,r3,4
  80407c:	403ff21e 	bne	r8,zero,804048 <__alt_mem_onchip_mem+0xff784048>
  804080:	18c000cc 	andi	r3,r3,3
  804084:	18000426 	beq	r3,zero,804098 <_strtol_r+0x130>
  804088:	1a801a26 	beq	r3,r10,8040f4 <_strtol_r+0x18c>
  80408c:	00c015c4 	movi	r3,87
  804090:	80e1c83a 	sub	r16,r16,r3
  804094:	85bfee16 	blt	r16,r22,804050 <__alt_mem_onchip_mem+0xff784050>
  804098:	00bfffc4 	movi	r2,-1
  80409c:	30801e26 	beq	r6,r2,804118 <_strtol_r+0x1b0>
  8040a0:	e0001b1e 	bne	fp,zero,804110 <_strtol_r+0x1a8>
  8040a4:	2005883a 	mov	r2,r4
  8040a8:	98000326 	beq	r19,zero,8040b8 <_strtol_r+0x150>
  8040ac:	3000211e 	bne	r6,zero,804134 <_strtol_r+0x1cc>
  8040b0:	a00b883a 	mov	r5,r20
  8040b4:	99400015 	stw	r5,0(r19)
  8040b8:	dfc00b17 	ldw	ra,44(sp)
  8040bc:	df000a17 	ldw	fp,40(sp)
  8040c0:	ddc00917 	ldw	r23,36(sp)
  8040c4:	dd800817 	ldw	r22,32(sp)
  8040c8:	dd400717 	ldw	r21,28(sp)
  8040cc:	dd000617 	ldw	r20,24(sp)
  8040d0:	dcc00517 	ldw	r19,20(sp)
  8040d4:	dc800417 	ldw	r18,16(sp)
  8040d8:	dc400317 	ldw	r17,12(sp)
  8040dc:	dc000217 	ldw	r16,8(sp)
  8040e0:	dec00c04 	addi	sp,sp,48
  8040e4:	f800283a 	ret
  8040e8:	3c3fdc0e 	bge	r7,r16,80405c <__alt_mem_onchip_mem+0xff78405c>
  8040ec:	01bfffc4 	movi	r6,-1
  8040f0:	003fdd06 	br	804068 <__alt_mem_onchip_mem+0xff784068>
  8040f4:	00c00dc4 	movi	r3,55
  8040f8:	003fe506 	br	804090 <__alt_mem_onchip_mem+0xff784090>
  8040fc:	00800c04 	movi	r2,48
  804100:	80801626 	beq	r16,r2,80415c <_strtol_r+0x1f4>
  804104:	05800284 	movi	r22,10
  804108:	b02f883a 	mov	r23,r22
  80410c:	003fba06 	br	803ff8 <__alt_mem_onchip_mem+0xff783ff8>
  804110:	0109c83a 	sub	r4,zero,r4
  804114:	003fe306 	br	8040a4 <__alt_mem_onchip_mem+0xff7840a4>
  804118:	d9000017 	ldw	r4,0(sp)
  80411c:	00c00884 	movi	r3,34
  804120:	e005003a 	cmpeq	r2,fp,zero
  804124:	20c00015 	stw	r3,0(r4)
  804128:	00e00034 	movhi	r3,32768
  80412c:	1885c83a 	sub	r2,r3,r2
  804130:	983fe126 	beq	r19,zero,8040b8 <__alt_mem_onchip_mem+0xff7840b8>
  804134:	297fffc4 	addi	r5,r5,-1
  804138:	003fde06 	br	8040b4 <__alt_mem_onchip_mem+0xff7840b4>
  80413c:	1c400084 	addi	r17,r3,2
  804140:	1c000043 	ldbu	r16,1(r3)
  804144:	07000044 	movi	fp,1
  804148:	003fa706 	br	803fe8 <__alt_mem_onchip_mem+0xff783fe8>
  80414c:	1c400084 	addi	r17,r3,2
  804150:	1c000043 	ldbu	r16,1(r3)
  804154:	0039883a 	mov	fp,zero
  804158:	003fa306 	br	803fe8 <__alt_mem_onchip_mem+0xff783fe8>
  80415c:	88800003 	ldbu	r2,0(r17)
  804160:	00c01604 	movi	r3,88
  804164:	108037cc 	andi	r2,r2,223
  804168:	10c00826 	beq	r2,r3,80418c <_strtol_r+0x224>
  80416c:	05800204 	movi	r22,8
  804170:	003fa006 	br	803ff4 <__alt_mem_onchip_mem+0xff783ff4>
  804174:	00800c04 	movi	r2,48
  804178:	80bf9e1e 	bne	r16,r2,803ff4 <__alt_mem_onchip_mem+0xff783ff4>
  80417c:	88800003 	ldbu	r2,0(r17)
  804180:	00c01604 	movi	r3,88
  804184:	108037cc 	andi	r2,r2,223
  804188:	10ff9a1e 	bne	r2,r3,803ff4 <__alt_mem_onchip_mem+0xff783ff4>
  80418c:	05c00404 	movi	r23,16
  804190:	8c000043 	ldbu	r16,1(r17)
  804194:	b82d883a 	mov	r22,r23
  804198:	8c400084 	addi	r17,r17,2
  80419c:	003f9606 	br	803ff8 <__alt_mem_onchip_mem+0xff783ff8>

008041a0 <strtol>:
  8041a0:	00802074 	movhi	r2,129
  8041a4:	1097e104 	addi	r2,r2,24452
  8041a8:	300f883a 	mov	r7,r6
  8041ac:	280d883a 	mov	r6,r5
  8041b0:	200b883a 	mov	r5,r4
  8041b4:	11000017 	ldw	r4,0(r2)
  8041b8:	0803f681 	jmpi	803f68 <_strtol_r>

008041bc <___vfprintf_internal_r>:
  8041bc:	deffb804 	addi	sp,sp,-288
  8041c0:	dfc04715 	stw	ra,284(sp)
  8041c4:	ddc04515 	stw	r23,276(sp)
  8041c8:	dd404315 	stw	r21,268(sp)
  8041cc:	d9002c15 	stw	r4,176(sp)
  8041d0:	282f883a 	mov	r23,r5
  8041d4:	302b883a 	mov	r21,r6
  8041d8:	d9c02d15 	stw	r7,180(sp)
  8041dc:	df004615 	stw	fp,280(sp)
  8041e0:	dd804415 	stw	r22,272(sp)
  8041e4:	dd004215 	stw	r20,264(sp)
  8041e8:	dcc04115 	stw	r19,260(sp)
  8041ec:	dc804015 	stw	r18,256(sp)
  8041f0:	dc403f15 	stw	r17,252(sp)
  8041f4:	dc003e15 	stw	r16,248(sp)
  8041f8:	0808d640 	call	808d64 <_localeconv_r>
  8041fc:	10800017 	ldw	r2,0(r2)
  804200:	1009883a 	mov	r4,r2
  804204:	d8803415 	stw	r2,208(sp)
  804208:	0803e140 	call	803e14 <strlen>
  80420c:	d8803715 	stw	r2,220(sp)
  804210:	d8802c17 	ldw	r2,176(sp)
  804214:	10000226 	beq	r2,zero,804220 <___vfprintf_internal_r+0x64>
  804218:	10800e17 	ldw	r2,56(r2)
  80421c:	1000f926 	beq	r2,zero,804604 <___vfprintf_internal_r+0x448>
  804220:	b880030b 	ldhu	r2,12(r23)
  804224:	10c8000c 	andi	r3,r2,8192
  804228:	1800061e 	bne	r3,zero,804244 <___vfprintf_internal_r+0x88>
  80422c:	b9001917 	ldw	r4,100(r23)
  804230:	00f7ffc4 	movi	r3,-8193
  804234:	10880014 	ori	r2,r2,8192
  804238:	20c6703a 	and	r3,r4,r3
  80423c:	b880030d 	sth	r2,12(r23)
  804240:	b8c01915 	stw	r3,100(r23)
  804244:	10c0020c 	andi	r3,r2,8
  804248:	1800c126 	beq	r3,zero,804550 <___vfprintf_internal_r+0x394>
  80424c:	b8c00417 	ldw	r3,16(r23)
  804250:	1800bf26 	beq	r3,zero,804550 <___vfprintf_internal_r+0x394>
  804254:	1080068c 	andi	r2,r2,26
  804258:	00c00284 	movi	r3,10
  80425c:	10c0c426 	beq	r2,r3,804570 <___vfprintf_internal_r+0x3b4>
  804260:	d8c00404 	addi	r3,sp,16
  804264:	05002074 	movhi	r20,129
  804268:	d9001e04 	addi	r4,sp,120
  80426c:	a50f6184 	addi	r20,r20,15750
  804270:	d8c01e15 	stw	r3,120(sp)
  804274:	d8002015 	stw	zero,128(sp)
  804278:	d8001f15 	stw	zero,124(sp)
  80427c:	d8003315 	stw	zero,204(sp)
  804280:	d8003615 	stw	zero,216(sp)
  804284:	d8003815 	stw	zero,224(sp)
  804288:	1811883a 	mov	r8,r3
  80428c:	d8003915 	stw	zero,228(sp)
  804290:	d8003a15 	stw	zero,232(sp)
  804294:	d8002f15 	stw	zero,188(sp)
  804298:	d9002815 	stw	r4,160(sp)
  80429c:	a8800007 	ldb	r2,0(r21)
  8042a0:	10027b26 	beq	r2,zero,804c90 <___vfprintf_internal_r+0xad4>
  8042a4:	00c00944 	movi	r3,37
  8042a8:	a821883a 	mov	r16,r21
  8042ac:	10c0021e 	bne	r2,r3,8042b8 <___vfprintf_internal_r+0xfc>
  8042b0:	00001406 	br	804304 <___vfprintf_internal_r+0x148>
  8042b4:	10c00326 	beq	r2,r3,8042c4 <___vfprintf_internal_r+0x108>
  8042b8:	84000044 	addi	r16,r16,1
  8042bc:	80800007 	ldb	r2,0(r16)
  8042c0:	103ffc1e 	bne	r2,zero,8042b4 <__alt_mem_onchip_mem+0xff7842b4>
  8042c4:	8563c83a 	sub	r17,r16,r21
  8042c8:	88000e26 	beq	r17,zero,804304 <___vfprintf_internal_r+0x148>
  8042cc:	d8c02017 	ldw	r3,128(sp)
  8042d0:	d8801f17 	ldw	r2,124(sp)
  8042d4:	45400015 	stw	r21,0(r8)
  8042d8:	1c47883a 	add	r3,r3,r17
  8042dc:	10800044 	addi	r2,r2,1
  8042e0:	d8c02015 	stw	r3,128(sp)
  8042e4:	44400115 	stw	r17,4(r8)
  8042e8:	d8801f15 	stw	r2,124(sp)
  8042ec:	00c001c4 	movi	r3,7
  8042f0:	1880a716 	blt	r3,r2,804590 <___vfprintf_internal_r+0x3d4>
  8042f4:	42000204 	addi	r8,r8,8
  8042f8:	d9402f17 	ldw	r5,188(sp)
  8042fc:	2c4b883a 	add	r5,r5,r17
  804300:	d9402f15 	stw	r5,188(sp)
  804304:	80800007 	ldb	r2,0(r16)
  804308:	1000a826 	beq	r2,zero,8045ac <___vfprintf_internal_r+0x3f0>
  80430c:	84400047 	ldb	r17,1(r16)
  804310:	00bfffc4 	movi	r2,-1
  804314:	85400044 	addi	r21,r16,1
  804318:	d8002785 	stb	zero,158(sp)
  80431c:	0007883a 	mov	r3,zero
  804320:	000f883a 	mov	r7,zero
  804324:	d8802915 	stw	r2,164(sp)
  804328:	d8003115 	stw	zero,196(sp)
  80432c:	0025883a 	mov	r18,zero
  804330:	01401604 	movi	r5,88
  804334:	01800244 	movi	r6,9
  804338:	02800a84 	movi	r10,42
  80433c:	02401b04 	movi	r9,108
  804340:	ad400044 	addi	r21,r21,1
  804344:	88bff804 	addi	r2,r17,-32
  804348:	28830436 	bltu	r5,r2,804f5c <___vfprintf_internal_r+0xda0>
  80434c:	100490ba 	slli	r2,r2,2
  804350:	01002034 	movhi	r4,128
  804354:	2110d904 	addi	r4,r4,17252
  804358:	1105883a 	add	r2,r2,r4
  80435c:	10800017 	ldw	r2,0(r2)
  804360:	1000683a 	jmp	r2
  804364:	00804e7c 	xorhi	r2,zero,313
  804368:	00804f5c 	xori	r2,zero,317
  80436c:	00804f5c 	xori	r2,zero,317
  804370:	00804e9c 	xori	r2,zero,314
  804374:	00804f5c 	xori	r2,zero,317
  804378:	00804f5c 	xori	r2,zero,317
  80437c:	00804f5c 	xori	r2,zero,317
  804380:	00804f5c 	xori	r2,zero,317
  804384:	00804f5c 	xori	r2,zero,317
  804388:	00804f5c 	xori	r2,zero,317
  80438c:	00804610 	cmplti	r2,zero,280
  804390:	00804db8 	rdprs	r2,zero,310
  804394:	00804f5c 	xori	r2,zero,317
  804398:	008044d8 	cmpnei	r2,zero,275
  80439c:	00804638 	rdprs	r2,zero,280
  8043a0:	00804f5c 	xori	r2,zero,317
  8043a4:	00804678 	rdprs	r2,zero,281
  8043a8:	00804684 	movi	r2,282
  8043ac:	00804684 	movi	r2,282
  8043b0:	00804684 	movi	r2,282
  8043b4:	00804684 	movi	r2,282
  8043b8:	00804684 	movi	r2,282
  8043bc:	00804684 	movi	r2,282
  8043c0:	00804684 	movi	r2,282
  8043c4:	00804684 	movi	r2,282
  8043c8:	00804684 	movi	r2,282
  8043cc:	00804f5c 	xori	r2,zero,317
  8043d0:	00804f5c 	xori	r2,zero,317
  8043d4:	00804f5c 	xori	r2,zero,317
  8043d8:	00804f5c 	xori	r2,zero,317
  8043dc:	00804f5c 	xori	r2,zero,317
  8043e0:	00804f5c 	xori	r2,zero,317
  8043e4:	00804f5c 	xori	r2,zero,317
  8043e8:	00804f5c 	xori	r2,zero,317
  8043ec:	00804f5c 	xori	r2,zero,317
  8043f0:	00804f5c 	xori	r2,zero,317
  8043f4:	008046b8 	rdprs	r2,zero,282
  8043f8:	00804774 	movhi	r2,285
  8043fc:	00804f5c 	xori	r2,zero,317
  804400:	00804774 	movhi	r2,285
  804404:	00804f5c 	xori	r2,zero,317
  804408:	00804f5c 	xori	r2,zero,317
  80440c:	00804f5c 	xori	r2,zero,317
  804410:	00804f5c 	xori	r2,zero,317
  804414:	00804814 	movui	r2,288
  804418:	00804f5c 	xori	r2,zero,317
  80441c:	00804f5c 	xori	r2,zero,317
  804420:	00804820 	cmpeqi	r2,zero,288
  804424:	00804f5c 	xori	r2,zero,317
  804428:	00804f5c 	xori	r2,zero,317
  80442c:	00804f5c 	xori	r2,zero,317
  804430:	00804f5c 	xori	r2,zero,317
  804434:	00804f5c 	xori	r2,zero,317
  804438:	00804c98 	cmpnei	r2,zero,306
  80443c:	00804f5c 	xori	r2,zero,317
  804440:	00804f5c 	xori	r2,zero,317
  804444:	00804cf8 	rdprs	r2,zero,307
  804448:	00804f5c 	xori	r2,zero,317
  80444c:	00804f5c 	xori	r2,zero,317
  804450:	00804f5c 	xori	r2,zero,317
  804454:	00804f5c 	xori	r2,zero,317
  804458:	00804f5c 	xori	r2,zero,317
  80445c:	00804f5c 	xori	r2,zero,317
  804460:	00804f5c 	xori	r2,zero,317
  804464:	00804f5c 	xori	r2,zero,317
  804468:	00804f5c 	xori	r2,zero,317
  80446c:	00804f5c 	xori	r2,zero,317
  804470:	00804f08 	cmpgei	r2,zero,316
  804474:	00804ea8 	cmpgeui	r2,zero,314
  804478:	00804774 	movhi	r2,285
  80447c:	00804774 	movhi	r2,285
  804480:	00804774 	movhi	r2,285
  804484:	00804eb8 	rdprs	r2,zero,314
  804488:	00804ea8 	cmpgeui	r2,zero,314
  80448c:	00804f5c 	xori	r2,zero,317
  804490:	00804f5c 	xori	r2,zero,317
  804494:	00804ec4 	movi	r2,315
  804498:	00804f5c 	xori	r2,zero,317
  80449c:	00804ed4 	movui	r2,315
  8044a0:	00804da8 	cmpgeui	r2,zero,310
  8044a4:	008044e4 	muli	r2,zero,275
  8044a8:	00804dc8 	cmpgei	r2,zero,311
  8044ac:	00804f5c 	xori	r2,zero,317
  8044b0:	00804dd4 	movui	r2,311
  8044b4:	00804f5c 	xori	r2,zero,317
  8044b8:	00804e30 	cmpltui	r2,zero,312
  8044bc:	00804f5c 	xori	r2,zero,317
  8044c0:	00804f5c 	xori	r2,zero,317
  8044c4:	00804e40 	call	804e4 <__alt_mem_sdram-0x77fb1c>
  8044c8:	d9003117 	ldw	r4,196(sp)
  8044cc:	d8802d15 	stw	r2,180(sp)
  8044d0:	0109c83a 	sub	r4,zero,r4
  8044d4:	d9003115 	stw	r4,196(sp)
  8044d8:	94800114 	ori	r18,r18,4
  8044dc:	ac400007 	ldb	r17,0(r21)
  8044e0:	003f9706 	br	804340 <__alt_mem_onchip_mem+0xff784340>
  8044e4:	00800c04 	movi	r2,48
  8044e8:	d9002d17 	ldw	r4,180(sp)
  8044ec:	d9402917 	ldw	r5,164(sp)
  8044f0:	d8802705 	stb	r2,156(sp)
  8044f4:	00801e04 	movi	r2,120
  8044f8:	d8802745 	stb	r2,157(sp)
  8044fc:	d8002785 	stb	zero,158(sp)
  804500:	20c00104 	addi	r3,r4,4
  804504:	24c00017 	ldw	r19,0(r4)
  804508:	002d883a 	mov	r22,zero
  80450c:	90800094 	ori	r2,r18,2
  804510:	28029a16 	blt	r5,zero,804f7c <___vfprintf_internal_r+0xdc0>
  804514:	00bfdfc4 	movi	r2,-129
  804518:	90a4703a 	and	r18,r18,r2
  80451c:	d8c02d15 	stw	r3,180(sp)
  804520:	94800094 	ori	r18,r18,2
  804524:	9802871e 	bne	r19,zero,804f44 <___vfprintf_internal_r+0xd88>
  804528:	00802074 	movhi	r2,129
  80452c:	108f5a04 	addi	r2,r2,15720
  804530:	d8803915 	stw	r2,228(sp)
  804534:	04401e04 	movi	r17,120
  804538:	d8802917 	ldw	r2,164(sp)
  80453c:	0039883a 	mov	fp,zero
  804540:	1001e926 	beq	r2,zero,804ce8 <___vfprintf_internal_r+0xb2c>
  804544:	0027883a 	mov	r19,zero
  804548:	002d883a 	mov	r22,zero
  80454c:	00020506 	br	804d64 <___vfprintf_internal_r+0xba8>
  804550:	d9002c17 	ldw	r4,176(sp)
  804554:	b80b883a 	mov	r5,r23
  804558:	08064ec0 	call	8064ec <__swsetup_r>
  80455c:	1005ac1e 	bne	r2,zero,805c10 <___vfprintf_internal_r+0x1a54>
  804560:	b880030b 	ldhu	r2,12(r23)
  804564:	00c00284 	movi	r3,10
  804568:	1080068c 	andi	r2,r2,26
  80456c:	10ff3c1e 	bne	r2,r3,804260 <__alt_mem_onchip_mem+0xff784260>
  804570:	b880038f 	ldh	r2,14(r23)
  804574:	103f3a16 	blt	r2,zero,804260 <__alt_mem_onchip_mem+0xff784260>
  804578:	d9c02d17 	ldw	r7,180(sp)
  80457c:	d9002c17 	ldw	r4,176(sp)
  804580:	a80d883a 	mov	r6,r21
  804584:	b80b883a 	mov	r5,r23
  804588:	08063d00 	call	8063d0 <__sbprintf>
  80458c:	00001106 	br	8045d4 <___vfprintf_internal_r+0x418>
  804590:	d9002c17 	ldw	r4,176(sp)
  804594:	d9801e04 	addi	r6,sp,120
  804598:	b80b883a 	mov	r5,r23
  80459c:	080aaf00 	call	80aaf0 <__sprint_r>
  8045a0:	1000081e 	bne	r2,zero,8045c4 <___vfprintf_internal_r+0x408>
  8045a4:	da000404 	addi	r8,sp,16
  8045a8:	003f5306 	br	8042f8 <__alt_mem_onchip_mem+0xff7842f8>
  8045ac:	d8802017 	ldw	r2,128(sp)
  8045b0:	10000426 	beq	r2,zero,8045c4 <___vfprintf_internal_r+0x408>
  8045b4:	d9002c17 	ldw	r4,176(sp)
  8045b8:	d9801e04 	addi	r6,sp,120
  8045bc:	b80b883a 	mov	r5,r23
  8045c0:	080aaf00 	call	80aaf0 <__sprint_r>
  8045c4:	b880030b 	ldhu	r2,12(r23)
  8045c8:	1080100c 	andi	r2,r2,64
  8045cc:	1005901e 	bne	r2,zero,805c10 <___vfprintf_internal_r+0x1a54>
  8045d0:	d8802f17 	ldw	r2,188(sp)
  8045d4:	dfc04717 	ldw	ra,284(sp)
  8045d8:	df004617 	ldw	fp,280(sp)
  8045dc:	ddc04517 	ldw	r23,276(sp)
  8045e0:	dd804417 	ldw	r22,272(sp)
  8045e4:	dd404317 	ldw	r21,268(sp)
  8045e8:	dd004217 	ldw	r20,264(sp)
  8045ec:	dcc04117 	ldw	r19,260(sp)
  8045f0:	dc804017 	ldw	r18,256(sp)
  8045f4:	dc403f17 	ldw	r17,252(sp)
  8045f8:	dc003e17 	ldw	r16,248(sp)
  8045fc:	dec04804 	addi	sp,sp,288
  804600:	f800283a 	ret
  804604:	d9002c17 	ldw	r4,176(sp)
  804608:	08024280 	call	802428 <__sinit>
  80460c:	003f0406 	br	804220 <__alt_mem_onchip_mem+0xff784220>
  804610:	d8802d17 	ldw	r2,180(sp)
  804614:	d9002d17 	ldw	r4,180(sp)
  804618:	10800017 	ldw	r2,0(r2)
  80461c:	d8803115 	stw	r2,196(sp)
  804620:	20800104 	addi	r2,r4,4
  804624:	d9003117 	ldw	r4,196(sp)
  804628:	203fa716 	blt	r4,zero,8044c8 <__alt_mem_onchip_mem+0xff7844c8>
  80462c:	d8802d15 	stw	r2,180(sp)
  804630:	ac400007 	ldb	r17,0(r21)
  804634:	003f4206 	br	804340 <__alt_mem_onchip_mem+0xff784340>
  804638:	ac400007 	ldb	r17,0(r21)
  80463c:	aac00044 	addi	r11,r21,1
  804640:	8a872826 	beq	r17,r10,8062e4 <___vfprintf_internal_r+0x2128>
  804644:	88bff404 	addi	r2,r17,-48
  804648:	0009883a 	mov	r4,zero
  80464c:	30867d36 	bltu	r6,r2,806044 <___vfprintf_internal_r+0x1e88>
  804650:	5c400007 	ldb	r17,0(r11)
  804654:	210002a4 	muli	r4,r4,10
  804658:	5d400044 	addi	r21,r11,1
  80465c:	a817883a 	mov	r11,r21
  804660:	2089883a 	add	r4,r4,r2
  804664:	88bff404 	addi	r2,r17,-48
  804668:	30bff92e 	bgeu	r6,r2,804650 <__alt_mem_onchip_mem+0xff784650>
  80466c:	2005c916 	blt	r4,zero,805d94 <___vfprintf_internal_r+0x1bd8>
  804670:	d9002915 	stw	r4,164(sp)
  804674:	003f3306 	br	804344 <__alt_mem_onchip_mem+0xff784344>
  804678:	94802014 	ori	r18,r18,128
  80467c:	ac400007 	ldb	r17,0(r21)
  804680:	003f2f06 	br	804340 <__alt_mem_onchip_mem+0xff784340>
  804684:	a809883a 	mov	r4,r21
  804688:	d8003115 	stw	zero,196(sp)
  80468c:	88bff404 	addi	r2,r17,-48
  804690:	0017883a 	mov	r11,zero
  804694:	24400007 	ldb	r17,0(r4)
  804698:	5ac002a4 	muli	r11,r11,10
  80469c:	ad400044 	addi	r21,r21,1
  8046a0:	a809883a 	mov	r4,r21
  8046a4:	12d7883a 	add	r11,r2,r11
  8046a8:	88bff404 	addi	r2,r17,-48
  8046ac:	30bff92e 	bgeu	r6,r2,804694 <__alt_mem_onchip_mem+0xff784694>
  8046b0:	dac03115 	stw	r11,196(sp)
  8046b4:	003f2306 	br	804344 <__alt_mem_onchip_mem+0xff784344>
  8046b8:	18c03fcc 	andi	r3,r3,255
  8046bc:	18072b1e 	bne	r3,zero,80636c <___vfprintf_internal_r+0x21b0>
  8046c0:	94800414 	ori	r18,r18,16
  8046c4:	9080080c 	andi	r2,r18,32
  8046c8:	10037b26 	beq	r2,zero,8054b8 <___vfprintf_internal_r+0x12fc>
  8046cc:	d9402d17 	ldw	r5,180(sp)
  8046d0:	28800117 	ldw	r2,4(r5)
  8046d4:	2cc00017 	ldw	r19,0(r5)
  8046d8:	29400204 	addi	r5,r5,8
  8046dc:	d9402d15 	stw	r5,180(sp)
  8046e0:	102d883a 	mov	r22,r2
  8046e4:	10044b16 	blt	r2,zero,805814 <___vfprintf_internal_r+0x1658>
  8046e8:	d9402917 	ldw	r5,164(sp)
  8046ec:	df002783 	ldbu	fp,158(sp)
  8046f0:	2803bc16 	blt	r5,zero,8055e4 <___vfprintf_internal_r+0x1428>
  8046f4:	00ffdfc4 	movi	r3,-129
  8046f8:	9d84b03a 	or	r2,r19,r22
  8046fc:	90e4703a 	and	r18,r18,r3
  804700:	10017726 	beq	r2,zero,804ce0 <___vfprintf_internal_r+0xb24>
  804704:	b0038326 	beq	r22,zero,805514 <___vfprintf_internal_r+0x1358>
  804708:	dc402a15 	stw	r17,168(sp)
  80470c:	dc001e04 	addi	r16,sp,120
  804710:	b023883a 	mov	r17,r22
  804714:	402d883a 	mov	r22,r8
  804718:	9809883a 	mov	r4,r19
  80471c:	880b883a 	mov	r5,r17
  804720:	01800284 	movi	r6,10
  804724:	000f883a 	mov	r7,zero
  804728:	080cbc00 	call	80cbc0 <__umoddi3>
  80472c:	10800c04 	addi	r2,r2,48
  804730:	843fffc4 	addi	r16,r16,-1
  804734:	9809883a 	mov	r4,r19
  804738:	880b883a 	mov	r5,r17
  80473c:	80800005 	stb	r2,0(r16)
  804740:	01800284 	movi	r6,10
  804744:	000f883a 	mov	r7,zero
  804748:	080c6480 	call	80c648 <__udivdi3>
  80474c:	1027883a 	mov	r19,r2
  804750:	10c4b03a 	or	r2,r2,r3
  804754:	1823883a 	mov	r17,r3
  804758:	103fef1e 	bne	r2,zero,804718 <__alt_mem_onchip_mem+0xff784718>
  80475c:	d8c02817 	ldw	r3,160(sp)
  804760:	dc402a17 	ldw	r17,168(sp)
  804764:	b011883a 	mov	r8,r22
  804768:	1c07c83a 	sub	r3,r3,r16
  80476c:	d8c02e15 	stw	r3,184(sp)
  804770:	00005906 	br	8048d8 <___vfprintf_internal_r+0x71c>
  804774:	18c03fcc 	andi	r3,r3,255
  804778:	1806fa1e 	bne	r3,zero,806364 <___vfprintf_internal_r+0x21a8>
  80477c:	9080020c 	andi	r2,r18,8
  804780:	10048a26 	beq	r2,zero,8059ac <___vfprintf_internal_r+0x17f0>
  804784:	d8c02d17 	ldw	r3,180(sp)
  804788:	d9002d17 	ldw	r4,180(sp)
  80478c:	d9402d17 	ldw	r5,180(sp)
  804790:	18c00017 	ldw	r3,0(r3)
  804794:	21000117 	ldw	r4,4(r4)
  804798:	29400204 	addi	r5,r5,8
  80479c:	d8c03615 	stw	r3,216(sp)
  8047a0:	d9003815 	stw	r4,224(sp)
  8047a4:	d9402d15 	stw	r5,180(sp)
  8047a8:	d9003617 	ldw	r4,216(sp)
  8047ac:	d9403817 	ldw	r5,224(sp)
  8047b0:	da003d15 	stw	r8,244(sp)
  8047b4:	04000044 	movi	r16,1
  8047b8:	080a8a40 	call	80a8a4 <__fpclassifyd>
  8047bc:	da003d17 	ldw	r8,244(sp)
  8047c0:	14041f1e 	bne	r2,r16,805840 <___vfprintf_internal_r+0x1684>
  8047c4:	d9003617 	ldw	r4,216(sp)
  8047c8:	d9403817 	ldw	r5,224(sp)
  8047cc:	000d883a 	mov	r6,zero
  8047d0:	000f883a 	mov	r7,zero
  8047d4:	080e5a40 	call	80e5a4 <__ledf2>
  8047d8:	da003d17 	ldw	r8,244(sp)
  8047dc:	1005be16 	blt	r2,zero,805ed8 <___vfprintf_internal_r+0x1d1c>
  8047e0:	df002783 	ldbu	fp,158(sp)
  8047e4:	008011c4 	movi	r2,71
  8047e8:	1445330e 	bge	r2,r17,805cb8 <___vfprintf_internal_r+0x1afc>
  8047ec:	04002074 	movhi	r16,129
  8047f0:	840f5204 	addi	r16,r16,15688
  8047f4:	00c000c4 	movi	r3,3
  8047f8:	00bfdfc4 	movi	r2,-129
  8047fc:	d8c02a15 	stw	r3,168(sp)
  804800:	90a4703a 	and	r18,r18,r2
  804804:	d8c02e15 	stw	r3,184(sp)
  804808:	d8002915 	stw	zero,164(sp)
  80480c:	d8003215 	stw	zero,200(sp)
  804810:	00003706 	br	8048f0 <___vfprintf_internal_r+0x734>
  804814:	94800214 	ori	r18,r18,8
  804818:	ac400007 	ldb	r17,0(r21)
  80481c:	003ec806 	br	804340 <__alt_mem_onchip_mem+0xff784340>
  804820:	18c03fcc 	andi	r3,r3,255
  804824:	1806db1e 	bne	r3,zero,806394 <___vfprintf_internal_r+0x21d8>
  804828:	94800414 	ori	r18,r18,16
  80482c:	9080080c 	andi	r2,r18,32
  804830:	1002d826 	beq	r2,zero,805394 <___vfprintf_internal_r+0x11d8>
  804834:	d9402d17 	ldw	r5,180(sp)
  804838:	d8c02917 	ldw	r3,164(sp)
  80483c:	d8002785 	stb	zero,158(sp)
  804840:	28800204 	addi	r2,r5,8
  804844:	2cc00017 	ldw	r19,0(r5)
  804848:	2d800117 	ldw	r22,4(r5)
  80484c:	18048f16 	blt	r3,zero,805a8c <___vfprintf_internal_r+0x18d0>
  804850:	013fdfc4 	movi	r4,-129
  804854:	9d86b03a 	or	r3,r19,r22
  804858:	d8802d15 	stw	r2,180(sp)
  80485c:	9124703a 	and	r18,r18,r4
  804860:	1802d91e 	bne	r3,zero,8053c8 <___vfprintf_internal_r+0x120c>
  804864:	d8c02917 	ldw	r3,164(sp)
  804868:	0039883a 	mov	fp,zero
  80486c:	1805c326 	beq	r3,zero,805f7c <___vfprintf_internal_r+0x1dc0>
  804870:	0027883a 	mov	r19,zero
  804874:	002d883a 	mov	r22,zero
  804878:	dc001e04 	addi	r16,sp,120
  80487c:	9806d0fa 	srli	r3,r19,3
  804880:	b008977a 	slli	r4,r22,29
  804884:	b02cd0fa 	srli	r22,r22,3
  804888:	9cc001cc 	andi	r19,r19,7
  80488c:	98800c04 	addi	r2,r19,48
  804890:	843fffc4 	addi	r16,r16,-1
  804894:	20e6b03a 	or	r19,r4,r3
  804898:	80800005 	stb	r2,0(r16)
  80489c:	9d86b03a 	or	r3,r19,r22
  8048a0:	183ff61e 	bne	r3,zero,80487c <__alt_mem_onchip_mem+0xff78487c>
  8048a4:	90c0004c 	andi	r3,r18,1
  8048a8:	18013b26 	beq	r3,zero,804d98 <___vfprintf_internal_r+0xbdc>
  8048ac:	10803fcc 	andi	r2,r2,255
  8048b0:	1080201c 	xori	r2,r2,128
  8048b4:	10bfe004 	addi	r2,r2,-128
  8048b8:	00c00c04 	movi	r3,48
  8048bc:	10c13626 	beq	r2,r3,804d98 <___vfprintf_internal_r+0xbdc>
  8048c0:	80ffffc5 	stb	r3,-1(r16)
  8048c4:	d8c02817 	ldw	r3,160(sp)
  8048c8:	80bfffc4 	addi	r2,r16,-1
  8048cc:	1021883a 	mov	r16,r2
  8048d0:	1887c83a 	sub	r3,r3,r2
  8048d4:	d8c02e15 	stw	r3,184(sp)
  8048d8:	d8802e17 	ldw	r2,184(sp)
  8048dc:	d9002917 	ldw	r4,164(sp)
  8048e0:	1100010e 	bge	r2,r4,8048e8 <___vfprintf_internal_r+0x72c>
  8048e4:	2005883a 	mov	r2,r4
  8048e8:	d8802a15 	stw	r2,168(sp)
  8048ec:	d8003215 	stw	zero,200(sp)
  8048f0:	e7003fcc 	andi	fp,fp,255
  8048f4:	e700201c 	xori	fp,fp,128
  8048f8:	e73fe004 	addi	fp,fp,-128
  8048fc:	e0000326 	beq	fp,zero,80490c <___vfprintf_internal_r+0x750>
  804900:	d8c02a17 	ldw	r3,168(sp)
  804904:	18c00044 	addi	r3,r3,1
  804908:	d8c02a15 	stw	r3,168(sp)
  80490c:	90c0008c 	andi	r3,r18,2
  804910:	d8c02b15 	stw	r3,172(sp)
  804914:	18000326 	beq	r3,zero,804924 <___vfprintf_internal_r+0x768>
  804918:	d8c02a17 	ldw	r3,168(sp)
  80491c:	18c00084 	addi	r3,r3,2
  804920:	d8c02a15 	stw	r3,168(sp)
  804924:	90c0210c 	andi	r3,r18,132
  804928:	d8c03015 	stw	r3,192(sp)
  80492c:	1801a31e 	bne	r3,zero,804fbc <___vfprintf_internal_r+0xe00>
  804930:	d9003117 	ldw	r4,196(sp)
  804934:	d8c02a17 	ldw	r3,168(sp)
  804938:	20e7c83a 	sub	r19,r4,r3
  80493c:	04c19f0e 	bge	zero,r19,804fbc <___vfprintf_internal_r+0xe00>
  804940:	02400404 	movi	r9,16
  804944:	d8c02017 	ldw	r3,128(sp)
  804948:	d8801f17 	ldw	r2,124(sp)
  80494c:	4cc50d0e 	bge	r9,r19,805d84 <___vfprintf_internal_r+0x1bc8>
  804950:	01402074 	movhi	r5,129
  804954:	294f6584 	addi	r5,r5,15766
  804958:	dc403b15 	stw	r17,236(sp)
  80495c:	d9403515 	stw	r5,212(sp)
  804960:	9823883a 	mov	r17,r19
  804964:	482d883a 	mov	r22,r9
  804968:	9027883a 	mov	r19,r18
  80496c:	070001c4 	movi	fp,7
  804970:	8025883a 	mov	r18,r16
  804974:	dc002c17 	ldw	r16,176(sp)
  804978:	00000306 	br	804988 <___vfprintf_internal_r+0x7cc>
  80497c:	8c7ffc04 	addi	r17,r17,-16
  804980:	42000204 	addi	r8,r8,8
  804984:	b440130e 	bge	r22,r17,8049d4 <___vfprintf_internal_r+0x818>
  804988:	01002074 	movhi	r4,129
  80498c:	18c00404 	addi	r3,r3,16
  804990:	10800044 	addi	r2,r2,1
  804994:	210f6584 	addi	r4,r4,15766
  804998:	41000015 	stw	r4,0(r8)
  80499c:	45800115 	stw	r22,4(r8)
  8049a0:	d8c02015 	stw	r3,128(sp)
  8049a4:	d8801f15 	stw	r2,124(sp)
  8049a8:	e0bff40e 	bge	fp,r2,80497c <__alt_mem_onchip_mem+0xff78497c>
  8049ac:	d9801e04 	addi	r6,sp,120
  8049b0:	b80b883a 	mov	r5,r23
  8049b4:	8009883a 	mov	r4,r16
  8049b8:	080aaf00 	call	80aaf0 <__sprint_r>
  8049bc:	103f011e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  8049c0:	8c7ffc04 	addi	r17,r17,-16
  8049c4:	d8c02017 	ldw	r3,128(sp)
  8049c8:	d8801f17 	ldw	r2,124(sp)
  8049cc:	da000404 	addi	r8,sp,16
  8049d0:	b47fed16 	blt	r22,r17,804988 <__alt_mem_onchip_mem+0xff784988>
  8049d4:	9021883a 	mov	r16,r18
  8049d8:	9825883a 	mov	r18,r19
  8049dc:	8827883a 	mov	r19,r17
  8049e0:	dc403b17 	ldw	r17,236(sp)
  8049e4:	d9403517 	ldw	r5,212(sp)
  8049e8:	98c7883a 	add	r3,r19,r3
  8049ec:	10800044 	addi	r2,r2,1
  8049f0:	41400015 	stw	r5,0(r8)
  8049f4:	44c00115 	stw	r19,4(r8)
  8049f8:	d8c02015 	stw	r3,128(sp)
  8049fc:	d8801f15 	stw	r2,124(sp)
  804a00:	010001c4 	movi	r4,7
  804a04:	2082a316 	blt	r4,r2,805494 <___vfprintf_internal_r+0x12d8>
  804a08:	df002787 	ldb	fp,158(sp)
  804a0c:	42000204 	addi	r8,r8,8
  804a10:	e0000c26 	beq	fp,zero,804a44 <___vfprintf_internal_r+0x888>
  804a14:	d8801f17 	ldw	r2,124(sp)
  804a18:	d9002784 	addi	r4,sp,158
  804a1c:	18c00044 	addi	r3,r3,1
  804a20:	10800044 	addi	r2,r2,1
  804a24:	41000015 	stw	r4,0(r8)
  804a28:	01000044 	movi	r4,1
  804a2c:	41000115 	stw	r4,4(r8)
  804a30:	d8c02015 	stw	r3,128(sp)
  804a34:	d8801f15 	stw	r2,124(sp)
  804a38:	010001c4 	movi	r4,7
  804a3c:	20823c16 	blt	r4,r2,805330 <___vfprintf_internal_r+0x1174>
  804a40:	42000204 	addi	r8,r8,8
  804a44:	d8802b17 	ldw	r2,172(sp)
  804a48:	10000c26 	beq	r2,zero,804a7c <___vfprintf_internal_r+0x8c0>
  804a4c:	d8801f17 	ldw	r2,124(sp)
  804a50:	d9002704 	addi	r4,sp,156
  804a54:	18c00084 	addi	r3,r3,2
  804a58:	10800044 	addi	r2,r2,1
  804a5c:	41000015 	stw	r4,0(r8)
  804a60:	01000084 	movi	r4,2
  804a64:	41000115 	stw	r4,4(r8)
  804a68:	d8c02015 	stw	r3,128(sp)
  804a6c:	d8801f15 	stw	r2,124(sp)
  804a70:	010001c4 	movi	r4,7
  804a74:	20823616 	blt	r4,r2,805350 <___vfprintf_internal_r+0x1194>
  804a78:	42000204 	addi	r8,r8,8
  804a7c:	d9003017 	ldw	r4,192(sp)
  804a80:	00802004 	movi	r2,128
  804a84:	20819926 	beq	r4,r2,8050ec <___vfprintf_internal_r+0xf30>
  804a88:	d9402917 	ldw	r5,164(sp)
  804a8c:	d8802e17 	ldw	r2,184(sp)
  804a90:	28adc83a 	sub	r22,r5,r2
  804a94:	0580310e 	bge	zero,r22,804b5c <___vfprintf_internal_r+0x9a0>
  804a98:	07000404 	movi	fp,16
  804a9c:	d8801f17 	ldw	r2,124(sp)
  804aa0:	e584140e 	bge	fp,r22,805af4 <___vfprintf_internal_r+0x1938>
  804aa4:	01402074 	movhi	r5,129
  804aa8:	294f6184 	addi	r5,r5,15750
  804aac:	dc402915 	stw	r17,164(sp)
  804ab0:	d9402b15 	stw	r5,172(sp)
  804ab4:	b023883a 	mov	r17,r22
  804ab8:	04c001c4 	movi	r19,7
  804abc:	a82d883a 	mov	r22,r21
  804ac0:	902b883a 	mov	r21,r18
  804ac4:	8025883a 	mov	r18,r16
  804ac8:	dc002c17 	ldw	r16,176(sp)
  804acc:	00000306 	br	804adc <___vfprintf_internal_r+0x920>
  804ad0:	8c7ffc04 	addi	r17,r17,-16
  804ad4:	42000204 	addi	r8,r8,8
  804ad8:	e440110e 	bge	fp,r17,804b20 <___vfprintf_internal_r+0x964>
  804adc:	18c00404 	addi	r3,r3,16
  804ae0:	10800044 	addi	r2,r2,1
  804ae4:	45000015 	stw	r20,0(r8)
  804ae8:	47000115 	stw	fp,4(r8)
  804aec:	d8c02015 	stw	r3,128(sp)
  804af0:	d8801f15 	stw	r2,124(sp)
  804af4:	98bff60e 	bge	r19,r2,804ad0 <__alt_mem_onchip_mem+0xff784ad0>
  804af8:	d9801e04 	addi	r6,sp,120
  804afc:	b80b883a 	mov	r5,r23
  804b00:	8009883a 	mov	r4,r16
  804b04:	080aaf00 	call	80aaf0 <__sprint_r>
  804b08:	103eae1e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  804b0c:	8c7ffc04 	addi	r17,r17,-16
  804b10:	d8c02017 	ldw	r3,128(sp)
  804b14:	d8801f17 	ldw	r2,124(sp)
  804b18:	da000404 	addi	r8,sp,16
  804b1c:	e47fef16 	blt	fp,r17,804adc <__alt_mem_onchip_mem+0xff784adc>
  804b20:	9021883a 	mov	r16,r18
  804b24:	a825883a 	mov	r18,r21
  804b28:	b02b883a 	mov	r21,r22
  804b2c:	882d883a 	mov	r22,r17
  804b30:	dc402917 	ldw	r17,164(sp)
  804b34:	d9002b17 	ldw	r4,172(sp)
  804b38:	1d87883a 	add	r3,r3,r22
  804b3c:	10800044 	addi	r2,r2,1
  804b40:	41000015 	stw	r4,0(r8)
  804b44:	45800115 	stw	r22,4(r8)
  804b48:	d8c02015 	stw	r3,128(sp)
  804b4c:	d8801f15 	stw	r2,124(sp)
  804b50:	010001c4 	movi	r4,7
  804b54:	2081ee16 	blt	r4,r2,805310 <___vfprintf_internal_r+0x1154>
  804b58:	42000204 	addi	r8,r8,8
  804b5c:	9080400c 	andi	r2,r18,256
  804b60:	1001181e 	bne	r2,zero,804fc4 <___vfprintf_internal_r+0xe08>
  804b64:	d9402e17 	ldw	r5,184(sp)
  804b68:	d8801f17 	ldw	r2,124(sp)
  804b6c:	44000015 	stw	r16,0(r8)
  804b70:	1947883a 	add	r3,r3,r5
  804b74:	10800044 	addi	r2,r2,1
  804b78:	41400115 	stw	r5,4(r8)
  804b7c:	d8c02015 	stw	r3,128(sp)
  804b80:	d8801f15 	stw	r2,124(sp)
  804b84:	010001c4 	movi	r4,7
  804b88:	2081d316 	blt	r4,r2,8052d8 <___vfprintf_internal_r+0x111c>
  804b8c:	42000204 	addi	r8,r8,8
  804b90:	9480010c 	andi	r18,r18,4
  804b94:	90003226 	beq	r18,zero,804c60 <___vfprintf_internal_r+0xaa4>
  804b98:	d9403117 	ldw	r5,196(sp)
  804b9c:	d8802a17 	ldw	r2,168(sp)
  804ba0:	28a1c83a 	sub	r16,r5,r2
  804ba4:	04002e0e 	bge	zero,r16,804c60 <___vfprintf_internal_r+0xaa4>
  804ba8:	04400404 	movi	r17,16
  804bac:	d8801f17 	ldw	r2,124(sp)
  804bb0:	8c04a20e 	bge	r17,r16,805e3c <___vfprintf_internal_r+0x1c80>
  804bb4:	01402074 	movhi	r5,129
  804bb8:	294f6584 	addi	r5,r5,15766
  804bbc:	d9403515 	stw	r5,212(sp)
  804bc0:	048001c4 	movi	r18,7
  804bc4:	dcc02c17 	ldw	r19,176(sp)
  804bc8:	00000306 	br	804bd8 <___vfprintf_internal_r+0xa1c>
  804bcc:	843ffc04 	addi	r16,r16,-16
  804bd0:	42000204 	addi	r8,r8,8
  804bd4:	8c00130e 	bge	r17,r16,804c24 <___vfprintf_internal_r+0xa68>
  804bd8:	01002074 	movhi	r4,129
  804bdc:	18c00404 	addi	r3,r3,16
  804be0:	10800044 	addi	r2,r2,1
  804be4:	210f6584 	addi	r4,r4,15766
  804be8:	41000015 	stw	r4,0(r8)
  804bec:	44400115 	stw	r17,4(r8)
  804bf0:	d8c02015 	stw	r3,128(sp)
  804bf4:	d8801f15 	stw	r2,124(sp)
  804bf8:	90bff40e 	bge	r18,r2,804bcc <__alt_mem_onchip_mem+0xff784bcc>
  804bfc:	d9801e04 	addi	r6,sp,120
  804c00:	b80b883a 	mov	r5,r23
  804c04:	9809883a 	mov	r4,r19
  804c08:	080aaf00 	call	80aaf0 <__sprint_r>
  804c0c:	103e6d1e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  804c10:	843ffc04 	addi	r16,r16,-16
  804c14:	d8c02017 	ldw	r3,128(sp)
  804c18:	d8801f17 	ldw	r2,124(sp)
  804c1c:	da000404 	addi	r8,sp,16
  804c20:	8c3fed16 	blt	r17,r16,804bd8 <__alt_mem_onchip_mem+0xff784bd8>
  804c24:	d9403517 	ldw	r5,212(sp)
  804c28:	1c07883a 	add	r3,r3,r16
  804c2c:	10800044 	addi	r2,r2,1
  804c30:	41400015 	stw	r5,0(r8)
  804c34:	44000115 	stw	r16,4(r8)
  804c38:	d8c02015 	stw	r3,128(sp)
  804c3c:	d8801f15 	stw	r2,124(sp)
  804c40:	010001c4 	movi	r4,7
  804c44:	2080060e 	bge	r4,r2,804c60 <___vfprintf_internal_r+0xaa4>
  804c48:	d9002c17 	ldw	r4,176(sp)
  804c4c:	d9801e04 	addi	r6,sp,120
  804c50:	b80b883a 	mov	r5,r23
  804c54:	080aaf00 	call	80aaf0 <__sprint_r>
  804c58:	103e5a1e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  804c5c:	d8c02017 	ldw	r3,128(sp)
  804c60:	d8803117 	ldw	r2,196(sp)
  804c64:	d9002a17 	ldw	r4,168(sp)
  804c68:	1100010e 	bge	r2,r4,804c70 <___vfprintf_internal_r+0xab4>
  804c6c:	2005883a 	mov	r2,r4
  804c70:	d9402f17 	ldw	r5,188(sp)
  804c74:	288b883a 	add	r5,r5,r2
  804c78:	d9402f15 	stw	r5,188(sp)
  804c7c:	18019e1e 	bne	r3,zero,8052f8 <___vfprintf_internal_r+0x113c>
  804c80:	a8800007 	ldb	r2,0(r21)
  804c84:	d8001f15 	stw	zero,124(sp)
  804c88:	da000404 	addi	r8,sp,16
  804c8c:	103d851e 	bne	r2,zero,8042a4 <__alt_mem_onchip_mem+0xff7842a4>
  804c90:	a821883a 	mov	r16,r21
  804c94:	003d9b06 	br	804304 <__alt_mem_onchip_mem+0xff784304>
  804c98:	18c03fcc 	andi	r3,r3,255
  804c9c:	1805c11e 	bne	r3,zero,8063a4 <___vfprintf_internal_r+0x21e8>
  804ca0:	94800414 	ori	r18,r18,16
  804ca4:	9080080c 	andi	r2,r18,32
  804ca8:	10020c26 	beq	r2,zero,8054dc <___vfprintf_internal_r+0x1320>
  804cac:	d8802d17 	ldw	r2,180(sp)
  804cb0:	d9002917 	ldw	r4,164(sp)
  804cb4:	d8002785 	stb	zero,158(sp)
  804cb8:	10c00204 	addi	r3,r2,8
  804cbc:	14c00017 	ldw	r19,0(r2)
  804cc0:	15800117 	ldw	r22,4(r2)
  804cc4:	20040f16 	blt	r4,zero,805d04 <___vfprintf_internal_r+0x1b48>
  804cc8:	013fdfc4 	movi	r4,-129
  804ccc:	9d84b03a 	or	r2,r19,r22
  804cd0:	d8c02d15 	stw	r3,180(sp)
  804cd4:	9124703a 	and	r18,r18,r4
  804cd8:	0039883a 	mov	fp,zero
  804cdc:	103e891e 	bne	r2,zero,804704 <__alt_mem_onchip_mem+0xff784704>
  804ce0:	d9002917 	ldw	r4,164(sp)
  804ce4:	2002c11e 	bne	r4,zero,8057ec <___vfprintf_internal_r+0x1630>
  804ce8:	d8002915 	stw	zero,164(sp)
  804cec:	d8002e15 	stw	zero,184(sp)
  804cf0:	dc001e04 	addi	r16,sp,120
  804cf4:	003ef806 	br	8048d8 <__alt_mem_onchip_mem+0xff7848d8>
  804cf8:	18c03fcc 	andi	r3,r3,255
  804cfc:	18059d1e 	bne	r3,zero,806374 <___vfprintf_internal_r+0x21b8>
  804d00:	01402074 	movhi	r5,129
  804d04:	294f5504 	addi	r5,r5,15700
  804d08:	d9403915 	stw	r5,228(sp)
  804d0c:	9080080c 	andi	r2,r18,32
  804d10:	10005226 	beq	r2,zero,804e5c <___vfprintf_internal_r+0xca0>
  804d14:	d8802d17 	ldw	r2,180(sp)
  804d18:	14c00017 	ldw	r19,0(r2)
  804d1c:	15800117 	ldw	r22,4(r2)
  804d20:	10800204 	addi	r2,r2,8
  804d24:	d8802d15 	stw	r2,180(sp)
  804d28:	9080004c 	andi	r2,r18,1
  804d2c:	10019026 	beq	r2,zero,805370 <___vfprintf_internal_r+0x11b4>
  804d30:	9d84b03a 	or	r2,r19,r22
  804d34:	10036926 	beq	r2,zero,805adc <___vfprintf_internal_r+0x1920>
  804d38:	d8c02917 	ldw	r3,164(sp)
  804d3c:	00800c04 	movi	r2,48
  804d40:	d8802705 	stb	r2,156(sp)
  804d44:	dc402745 	stb	r17,157(sp)
  804d48:	d8002785 	stb	zero,158(sp)
  804d4c:	90800094 	ori	r2,r18,2
  804d50:	18045d16 	blt	r3,zero,805ec8 <___vfprintf_internal_r+0x1d0c>
  804d54:	00bfdfc4 	movi	r2,-129
  804d58:	90a4703a 	and	r18,r18,r2
  804d5c:	94800094 	ori	r18,r18,2
  804d60:	0039883a 	mov	fp,zero
  804d64:	d9003917 	ldw	r4,228(sp)
  804d68:	dc001e04 	addi	r16,sp,120
  804d6c:	988003cc 	andi	r2,r19,15
  804d70:	b006973a 	slli	r3,r22,28
  804d74:	2085883a 	add	r2,r4,r2
  804d78:	9826d13a 	srli	r19,r19,4
  804d7c:	10800003 	ldbu	r2,0(r2)
  804d80:	b02cd13a 	srli	r22,r22,4
  804d84:	843fffc4 	addi	r16,r16,-1
  804d88:	1ce6b03a 	or	r19,r3,r19
  804d8c:	80800005 	stb	r2,0(r16)
  804d90:	9d84b03a 	or	r2,r19,r22
  804d94:	103ff51e 	bne	r2,zero,804d6c <__alt_mem_onchip_mem+0xff784d6c>
  804d98:	d8c02817 	ldw	r3,160(sp)
  804d9c:	1c07c83a 	sub	r3,r3,r16
  804da0:	d8c02e15 	stw	r3,184(sp)
  804da4:	003ecc06 	br	8048d8 <__alt_mem_onchip_mem+0xff7848d8>
  804da8:	18c03fcc 	andi	r3,r3,255
  804dac:	183e9f26 	beq	r3,zero,80482c <__alt_mem_onchip_mem+0xff78482c>
  804db0:	d9c02785 	stb	r7,158(sp)
  804db4:	003e9d06 	br	80482c <__alt_mem_onchip_mem+0xff78482c>
  804db8:	00c00044 	movi	r3,1
  804dbc:	01c00ac4 	movi	r7,43
  804dc0:	ac400007 	ldb	r17,0(r21)
  804dc4:	003d5e06 	br	804340 <__alt_mem_onchip_mem+0xff784340>
  804dc8:	94800814 	ori	r18,r18,32
  804dcc:	ac400007 	ldb	r17,0(r21)
  804dd0:	003d5b06 	br	804340 <__alt_mem_onchip_mem+0xff784340>
  804dd4:	d8c02d17 	ldw	r3,180(sp)
  804dd8:	d8002785 	stb	zero,158(sp)
  804ddc:	1c000017 	ldw	r16,0(r3)
  804de0:	1cc00104 	addi	r19,r3,4
  804de4:	80041926 	beq	r16,zero,805e4c <___vfprintf_internal_r+0x1c90>
  804de8:	d9002917 	ldw	r4,164(sp)
  804dec:	2003d016 	blt	r4,zero,805d30 <___vfprintf_internal_r+0x1b74>
  804df0:	200d883a 	mov	r6,r4
  804df4:	000b883a 	mov	r5,zero
  804df8:	8009883a 	mov	r4,r16
  804dfc:	da003d15 	stw	r8,244(sp)
  804e00:	0808df40 	call	808df4 <memchr>
  804e04:	da003d17 	ldw	r8,244(sp)
  804e08:	10045426 	beq	r2,zero,805f5c <___vfprintf_internal_r+0x1da0>
  804e0c:	1405c83a 	sub	r2,r2,r16
  804e10:	d8802e15 	stw	r2,184(sp)
  804e14:	1003cc16 	blt	r2,zero,805d48 <___vfprintf_internal_r+0x1b8c>
  804e18:	df002783 	ldbu	fp,158(sp)
  804e1c:	d8802a15 	stw	r2,168(sp)
  804e20:	dcc02d15 	stw	r19,180(sp)
  804e24:	d8002915 	stw	zero,164(sp)
  804e28:	d8003215 	stw	zero,200(sp)
  804e2c:	003eb006 	br	8048f0 <__alt_mem_onchip_mem+0xff7848f0>
  804e30:	18c03fcc 	andi	r3,r3,255
  804e34:	183f9b26 	beq	r3,zero,804ca4 <__alt_mem_onchip_mem+0xff784ca4>
  804e38:	d9c02785 	stb	r7,158(sp)
  804e3c:	003f9906 	br	804ca4 <__alt_mem_onchip_mem+0xff784ca4>
  804e40:	18c03fcc 	andi	r3,r3,255
  804e44:	1805551e 	bne	r3,zero,80639c <___vfprintf_internal_r+0x21e0>
  804e48:	01402074 	movhi	r5,129
  804e4c:	294f5a04 	addi	r5,r5,15720
  804e50:	d9403915 	stw	r5,228(sp)
  804e54:	9080080c 	andi	r2,r18,32
  804e58:	103fae1e 	bne	r2,zero,804d14 <__alt_mem_onchip_mem+0xff784d14>
  804e5c:	9080040c 	andi	r2,r18,16
  804e60:	1002de26 	beq	r2,zero,8059dc <___vfprintf_internal_r+0x1820>
  804e64:	d8c02d17 	ldw	r3,180(sp)
  804e68:	002d883a 	mov	r22,zero
  804e6c:	1cc00017 	ldw	r19,0(r3)
  804e70:	18c00104 	addi	r3,r3,4
  804e74:	d8c02d15 	stw	r3,180(sp)
  804e78:	003fab06 	br	804d28 <__alt_mem_onchip_mem+0xff784d28>
  804e7c:	38803fcc 	andi	r2,r7,255
  804e80:	1080201c 	xori	r2,r2,128
  804e84:	10bfe004 	addi	r2,r2,-128
  804e88:	1002d21e 	bne	r2,zero,8059d4 <___vfprintf_internal_r+0x1818>
  804e8c:	00c00044 	movi	r3,1
  804e90:	01c00804 	movi	r7,32
  804e94:	ac400007 	ldb	r17,0(r21)
  804e98:	003d2906 	br	804340 <__alt_mem_onchip_mem+0xff784340>
  804e9c:	94800054 	ori	r18,r18,1
  804ea0:	ac400007 	ldb	r17,0(r21)
  804ea4:	003d2606 	br	804340 <__alt_mem_onchip_mem+0xff784340>
  804ea8:	18c03fcc 	andi	r3,r3,255
  804eac:	183e0526 	beq	r3,zero,8046c4 <__alt_mem_onchip_mem+0xff7846c4>
  804eb0:	d9c02785 	stb	r7,158(sp)
  804eb4:	003e0306 	br	8046c4 <__alt_mem_onchip_mem+0xff7846c4>
  804eb8:	94801014 	ori	r18,r18,64
  804ebc:	ac400007 	ldb	r17,0(r21)
  804ec0:	003d1f06 	br	804340 <__alt_mem_onchip_mem+0xff784340>
  804ec4:	ac400007 	ldb	r17,0(r21)
  804ec8:	8a438726 	beq	r17,r9,805ce8 <___vfprintf_internal_r+0x1b2c>
  804ecc:	94800414 	ori	r18,r18,16
  804ed0:	003d1b06 	br	804340 <__alt_mem_onchip_mem+0xff784340>
  804ed4:	18c03fcc 	andi	r3,r3,255
  804ed8:	1805341e 	bne	r3,zero,8063ac <___vfprintf_internal_r+0x21f0>
  804edc:	9080080c 	andi	r2,r18,32
  804ee0:	1002cd26 	beq	r2,zero,805a18 <___vfprintf_internal_r+0x185c>
  804ee4:	d9402d17 	ldw	r5,180(sp)
  804ee8:	d9002f17 	ldw	r4,188(sp)
  804eec:	28800017 	ldw	r2,0(r5)
  804ef0:	2007d7fa 	srai	r3,r4,31
  804ef4:	29400104 	addi	r5,r5,4
  804ef8:	d9402d15 	stw	r5,180(sp)
  804efc:	11000015 	stw	r4,0(r2)
  804f00:	10c00115 	stw	r3,4(r2)
  804f04:	003ce506 	br	80429c <__alt_mem_onchip_mem+0xff78429c>
  804f08:	d8c02d17 	ldw	r3,180(sp)
  804f0c:	d9002d17 	ldw	r4,180(sp)
  804f10:	d8002785 	stb	zero,158(sp)
  804f14:	18800017 	ldw	r2,0(r3)
  804f18:	21000104 	addi	r4,r4,4
  804f1c:	00c00044 	movi	r3,1
  804f20:	d8c02a15 	stw	r3,168(sp)
  804f24:	d8801405 	stb	r2,80(sp)
  804f28:	d9002d15 	stw	r4,180(sp)
  804f2c:	d8c02e15 	stw	r3,184(sp)
  804f30:	d8002915 	stw	zero,164(sp)
  804f34:	d8003215 	stw	zero,200(sp)
  804f38:	dc001404 	addi	r16,sp,80
  804f3c:	0039883a 	mov	fp,zero
  804f40:	003e7206 	br	80490c <__alt_mem_onchip_mem+0xff78490c>
  804f44:	01002074 	movhi	r4,129
  804f48:	210f5a04 	addi	r4,r4,15720
  804f4c:	0039883a 	mov	fp,zero
  804f50:	d9003915 	stw	r4,228(sp)
  804f54:	04401e04 	movi	r17,120
  804f58:	003f8206 	br	804d64 <__alt_mem_onchip_mem+0xff784d64>
  804f5c:	18c03fcc 	andi	r3,r3,255
  804f60:	1805061e 	bne	r3,zero,80637c <___vfprintf_internal_r+0x21c0>
  804f64:	883d9126 	beq	r17,zero,8045ac <__alt_mem_onchip_mem+0xff7845ac>
  804f68:	00c00044 	movi	r3,1
  804f6c:	d8c02a15 	stw	r3,168(sp)
  804f70:	dc401405 	stb	r17,80(sp)
  804f74:	d8002785 	stb	zero,158(sp)
  804f78:	003fec06 	br	804f2c <__alt_mem_onchip_mem+0xff784f2c>
  804f7c:	01402074 	movhi	r5,129
  804f80:	294f5a04 	addi	r5,r5,15720
  804f84:	d9403915 	stw	r5,228(sp)
  804f88:	d8c02d15 	stw	r3,180(sp)
  804f8c:	1025883a 	mov	r18,r2
  804f90:	04401e04 	movi	r17,120
  804f94:	9d84b03a 	or	r2,r19,r22
  804f98:	1000fc1e 	bne	r2,zero,80538c <___vfprintf_internal_r+0x11d0>
  804f9c:	0039883a 	mov	fp,zero
  804fa0:	00800084 	movi	r2,2
  804fa4:	10803fcc 	andi	r2,r2,255
  804fa8:	00c00044 	movi	r3,1
  804fac:	10c20f26 	beq	r2,r3,8057ec <___vfprintf_internal_r+0x1630>
  804fb0:	00c00084 	movi	r3,2
  804fb4:	10fd6326 	beq	r2,r3,804544 <__alt_mem_onchip_mem+0xff784544>
  804fb8:	003e2d06 	br	804870 <__alt_mem_onchip_mem+0xff784870>
  804fbc:	d8c02017 	ldw	r3,128(sp)
  804fc0:	003e9306 	br	804a10 <__alt_mem_onchip_mem+0xff784a10>
  804fc4:	00801944 	movi	r2,101
  804fc8:	14407e0e 	bge	r2,r17,8051c4 <___vfprintf_internal_r+0x1008>
  804fcc:	d9003617 	ldw	r4,216(sp)
  804fd0:	d9403817 	ldw	r5,224(sp)
  804fd4:	000d883a 	mov	r6,zero
  804fd8:	000f883a 	mov	r7,zero
  804fdc:	d8c03c15 	stw	r3,240(sp)
  804fe0:	da003d15 	stw	r8,244(sp)
  804fe4:	080e4400 	call	80e440 <__eqdf2>
  804fe8:	d8c03c17 	ldw	r3,240(sp)
  804fec:	da003d17 	ldw	r8,244(sp)
  804ff0:	1000f71e 	bne	r2,zero,8053d0 <___vfprintf_internal_r+0x1214>
  804ff4:	d8801f17 	ldw	r2,124(sp)
  804ff8:	01002074 	movhi	r4,129
  804ffc:	210f6104 	addi	r4,r4,15748
  805000:	18c00044 	addi	r3,r3,1
  805004:	10800044 	addi	r2,r2,1
  805008:	41000015 	stw	r4,0(r8)
  80500c:	01000044 	movi	r4,1
  805010:	41000115 	stw	r4,4(r8)
  805014:	d8c02015 	stw	r3,128(sp)
  805018:	d8801f15 	stw	r2,124(sp)
  80501c:	010001c4 	movi	r4,7
  805020:	2082b816 	blt	r4,r2,805b04 <___vfprintf_internal_r+0x1948>
  805024:	42000204 	addi	r8,r8,8
  805028:	d8802617 	ldw	r2,152(sp)
  80502c:	d9403317 	ldw	r5,204(sp)
  805030:	11400216 	blt	r2,r5,80503c <___vfprintf_internal_r+0xe80>
  805034:	9080004c 	andi	r2,r18,1
  805038:	103ed526 	beq	r2,zero,804b90 <__alt_mem_onchip_mem+0xff784b90>
  80503c:	d8803717 	ldw	r2,220(sp)
  805040:	d9003417 	ldw	r4,208(sp)
  805044:	d9403717 	ldw	r5,220(sp)
  805048:	1887883a 	add	r3,r3,r2
  80504c:	d8801f17 	ldw	r2,124(sp)
  805050:	41000015 	stw	r4,0(r8)
  805054:	41400115 	stw	r5,4(r8)
  805058:	10800044 	addi	r2,r2,1
  80505c:	d8c02015 	stw	r3,128(sp)
  805060:	d8801f15 	stw	r2,124(sp)
  805064:	010001c4 	movi	r4,7
  805068:	20832916 	blt	r4,r2,805d10 <___vfprintf_internal_r+0x1b54>
  80506c:	42000204 	addi	r8,r8,8
  805070:	d8803317 	ldw	r2,204(sp)
  805074:	143fffc4 	addi	r16,r2,-1
  805078:	043ec50e 	bge	zero,r16,804b90 <__alt_mem_onchip_mem+0xff784b90>
  80507c:	04400404 	movi	r17,16
  805080:	d8801f17 	ldw	r2,124(sp)
  805084:	8c00880e 	bge	r17,r16,8052a8 <___vfprintf_internal_r+0x10ec>
  805088:	01402074 	movhi	r5,129
  80508c:	294f6184 	addi	r5,r5,15750
  805090:	d9402b15 	stw	r5,172(sp)
  805094:	058001c4 	movi	r22,7
  805098:	dcc02c17 	ldw	r19,176(sp)
  80509c:	00000306 	br	8050ac <___vfprintf_internal_r+0xef0>
  8050a0:	42000204 	addi	r8,r8,8
  8050a4:	843ffc04 	addi	r16,r16,-16
  8050a8:	8c00820e 	bge	r17,r16,8052b4 <___vfprintf_internal_r+0x10f8>
  8050ac:	18c00404 	addi	r3,r3,16
  8050b0:	10800044 	addi	r2,r2,1
  8050b4:	45000015 	stw	r20,0(r8)
  8050b8:	44400115 	stw	r17,4(r8)
  8050bc:	d8c02015 	stw	r3,128(sp)
  8050c0:	d8801f15 	stw	r2,124(sp)
  8050c4:	b0bff60e 	bge	r22,r2,8050a0 <__alt_mem_onchip_mem+0xff7850a0>
  8050c8:	d9801e04 	addi	r6,sp,120
  8050cc:	b80b883a 	mov	r5,r23
  8050d0:	9809883a 	mov	r4,r19
  8050d4:	080aaf00 	call	80aaf0 <__sprint_r>
  8050d8:	103d3a1e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  8050dc:	d8c02017 	ldw	r3,128(sp)
  8050e0:	d8801f17 	ldw	r2,124(sp)
  8050e4:	da000404 	addi	r8,sp,16
  8050e8:	003fee06 	br	8050a4 <__alt_mem_onchip_mem+0xff7850a4>
  8050ec:	d9403117 	ldw	r5,196(sp)
  8050f0:	d8802a17 	ldw	r2,168(sp)
  8050f4:	28adc83a 	sub	r22,r5,r2
  8050f8:	05be630e 	bge	zero,r22,804a88 <__alt_mem_onchip_mem+0xff784a88>
  8050fc:	07000404 	movi	fp,16
  805100:	d8801f17 	ldw	r2,124(sp)
  805104:	e5838f0e 	bge	fp,r22,805f44 <___vfprintf_internal_r+0x1d88>
  805108:	01402074 	movhi	r5,129
  80510c:	294f6184 	addi	r5,r5,15750
  805110:	dc403015 	stw	r17,192(sp)
  805114:	d9402b15 	stw	r5,172(sp)
  805118:	b023883a 	mov	r17,r22
  80511c:	04c001c4 	movi	r19,7
  805120:	a82d883a 	mov	r22,r21
  805124:	902b883a 	mov	r21,r18
  805128:	8025883a 	mov	r18,r16
  80512c:	dc002c17 	ldw	r16,176(sp)
  805130:	00000306 	br	805140 <___vfprintf_internal_r+0xf84>
  805134:	8c7ffc04 	addi	r17,r17,-16
  805138:	42000204 	addi	r8,r8,8
  80513c:	e440110e 	bge	fp,r17,805184 <___vfprintf_internal_r+0xfc8>
  805140:	18c00404 	addi	r3,r3,16
  805144:	10800044 	addi	r2,r2,1
  805148:	45000015 	stw	r20,0(r8)
  80514c:	47000115 	stw	fp,4(r8)
  805150:	d8c02015 	stw	r3,128(sp)
  805154:	d8801f15 	stw	r2,124(sp)
  805158:	98bff60e 	bge	r19,r2,805134 <__alt_mem_onchip_mem+0xff785134>
  80515c:	d9801e04 	addi	r6,sp,120
  805160:	b80b883a 	mov	r5,r23
  805164:	8009883a 	mov	r4,r16
  805168:	080aaf00 	call	80aaf0 <__sprint_r>
  80516c:	103d151e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  805170:	8c7ffc04 	addi	r17,r17,-16
  805174:	d8c02017 	ldw	r3,128(sp)
  805178:	d8801f17 	ldw	r2,124(sp)
  80517c:	da000404 	addi	r8,sp,16
  805180:	e47fef16 	blt	fp,r17,805140 <__alt_mem_onchip_mem+0xff785140>
  805184:	9021883a 	mov	r16,r18
  805188:	a825883a 	mov	r18,r21
  80518c:	b02b883a 	mov	r21,r22
  805190:	882d883a 	mov	r22,r17
  805194:	dc403017 	ldw	r17,192(sp)
  805198:	d9002b17 	ldw	r4,172(sp)
  80519c:	1d87883a 	add	r3,r3,r22
  8051a0:	10800044 	addi	r2,r2,1
  8051a4:	41000015 	stw	r4,0(r8)
  8051a8:	45800115 	stw	r22,4(r8)
  8051ac:	d8c02015 	stw	r3,128(sp)
  8051b0:	d8801f15 	stw	r2,124(sp)
  8051b4:	010001c4 	movi	r4,7
  8051b8:	20818e16 	blt	r4,r2,8057f4 <___vfprintf_internal_r+0x1638>
  8051bc:	42000204 	addi	r8,r8,8
  8051c0:	003e3106 	br	804a88 <__alt_mem_onchip_mem+0xff784a88>
  8051c4:	d9403317 	ldw	r5,204(sp)
  8051c8:	00800044 	movi	r2,1
  8051cc:	18c00044 	addi	r3,r3,1
  8051d0:	1141530e 	bge	r2,r5,805720 <___vfprintf_internal_r+0x1564>
  8051d4:	dc401f17 	ldw	r17,124(sp)
  8051d8:	00800044 	movi	r2,1
  8051dc:	40800115 	stw	r2,4(r8)
  8051e0:	8c400044 	addi	r17,r17,1
  8051e4:	44000015 	stw	r16,0(r8)
  8051e8:	d8c02015 	stw	r3,128(sp)
  8051ec:	dc401f15 	stw	r17,124(sp)
  8051f0:	008001c4 	movi	r2,7
  8051f4:	14416b16 	blt	r2,r17,8057a4 <___vfprintf_internal_r+0x15e8>
  8051f8:	42000204 	addi	r8,r8,8
  8051fc:	d8803717 	ldw	r2,220(sp)
  805200:	d9003417 	ldw	r4,208(sp)
  805204:	8c400044 	addi	r17,r17,1
  805208:	10c7883a 	add	r3,r2,r3
  80520c:	40800115 	stw	r2,4(r8)
  805210:	41000015 	stw	r4,0(r8)
  805214:	d8c02015 	stw	r3,128(sp)
  805218:	dc401f15 	stw	r17,124(sp)
  80521c:	008001c4 	movi	r2,7
  805220:	14416916 	blt	r2,r17,8057c8 <___vfprintf_internal_r+0x160c>
  805224:	45800204 	addi	r22,r8,8
  805228:	d9003617 	ldw	r4,216(sp)
  80522c:	d9403817 	ldw	r5,224(sp)
  805230:	000d883a 	mov	r6,zero
  805234:	000f883a 	mov	r7,zero
  805238:	d8c03c15 	stw	r3,240(sp)
  80523c:	080e4400 	call	80e440 <__eqdf2>
  805240:	d8c03c17 	ldw	r3,240(sp)
  805244:	1000bc26 	beq	r2,zero,805538 <___vfprintf_internal_r+0x137c>
  805248:	d9403317 	ldw	r5,204(sp)
  80524c:	84000044 	addi	r16,r16,1
  805250:	8c400044 	addi	r17,r17,1
  805254:	28bfffc4 	addi	r2,r5,-1
  805258:	1887883a 	add	r3,r3,r2
  80525c:	b0800115 	stw	r2,4(r22)
  805260:	b4000015 	stw	r16,0(r22)
  805264:	d8c02015 	stw	r3,128(sp)
  805268:	dc401f15 	stw	r17,124(sp)
  80526c:	008001c4 	movi	r2,7
  805270:	14414316 	blt	r2,r17,805780 <___vfprintf_internal_r+0x15c4>
  805274:	b5800204 	addi	r22,r22,8
  805278:	d9003a17 	ldw	r4,232(sp)
  80527c:	df0022c4 	addi	fp,sp,139
  805280:	8c400044 	addi	r17,r17,1
  805284:	20c7883a 	add	r3,r4,r3
  805288:	b7000015 	stw	fp,0(r22)
  80528c:	b1000115 	stw	r4,4(r22)
  805290:	d8c02015 	stw	r3,128(sp)
  805294:	dc401f15 	stw	r17,124(sp)
  805298:	008001c4 	movi	r2,7
  80529c:	14400e16 	blt	r2,r17,8052d8 <___vfprintf_internal_r+0x111c>
  8052a0:	b2000204 	addi	r8,r22,8
  8052a4:	003e3a06 	br	804b90 <__alt_mem_onchip_mem+0xff784b90>
  8052a8:	01002074 	movhi	r4,129
  8052ac:	210f6184 	addi	r4,r4,15750
  8052b0:	d9002b15 	stw	r4,172(sp)
  8052b4:	d9002b17 	ldw	r4,172(sp)
  8052b8:	1c07883a 	add	r3,r3,r16
  8052bc:	44000115 	stw	r16,4(r8)
  8052c0:	41000015 	stw	r4,0(r8)
  8052c4:	10800044 	addi	r2,r2,1
  8052c8:	d8c02015 	stw	r3,128(sp)
  8052cc:	d8801f15 	stw	r2,124(sp)
  8052d0:	010001c4 	movi	r4,7
  8052d4:	20be2d0e 	bge	r4,r2,804b8c <__alt_mem_onchip_mem+0xff784b8c>
  8052d8:	d9002c17 	ldw	r4,176(sp)
  8052dc:	d9801e04 	addi	r6,sp,120
  8052e0:	b80b883a 	mov	r5,r23
  8052e4:	080aaf00 	call	80aaf0 <__sprint_r>
  8052e8:	103cb61e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  8052ec:	d8c02017 	ldw	r3,128(sp)
  8052f0:	da000404 	addi	r8,sp,16
  8052f4:	003e2606 	br	804b90 <__alt_mem_onchip_mem+0xff784b90>
  8052f8:	d9002c17 	ldw	r4,176(sp)
  8052fc:	d9801e04 	addi	r6,sp,120
  805300:	b80b883a 	mov	r5,r23
  805304:	080aaf00 	call	80aaf0 <__sprint_r>
  805308:	103e5d26 	beq	r2,zero,804c80 <__alt_mem_onchip_mem+0xff784c80>
  80530c:	003cad06 	br	8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  805310:	d9002c17 	ldw	r4,176(sp)
  805314:	d9801e04 	addi	r6,sp,120
  805318:	b80b883a 	mov	r5,r23
  80531c:	080aaf00 	call	80aaf0 <__sprint_r>
  805320:	103ca81e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  805324:	d8c02017 	ldw	r3,128(sp)
  805328:	da000404 	addi	r8,sp,16
  80532c:	003e0b06 	br	804b5c <__alt_mem_onchip_mem+0xff784b5c>
  805330:	d9002c17 	ldw	r4,176(sp)
  805334:	d9801e04 	addi	r6,sp,120
  805338:	b80b883a 	mov	r5,r23
  80533c:	080aaf00 	call	80aaf0 <__sprint_r>
  805340:	103ca01e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  805344:	d8c02017 	ldw	r3,128(sp)
  805348:	da000404 	addi	r8,sp,16
  80534c:	003dbd06 	br	804a44 <__alt_mem_onchip_mem+0xff784a44>
  805350:	d9002c17 	ldw	r4,176(sp)
  805354:	d9801e04 	addi	r6,sp,120
  805358:	b80b883a 	mov	r5,r23
  80535c:	080aaf00 	call	80aaf0 <__sprint_r>
  805360:	103c981e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  805364:	d8c02017 	ldw	r3,128(sp)
  805368:	da000404 	addi	r8,sp,16
  80536c:	003dc306 	br	804a7c <__alt_mem_onchip_mem+0xff784a7c>
  805370:	d8802917 	ldw	r2,164(sp)
  805374:	d8002785 	stb	zero,158(sp)
  805378:	103f0616 	blt	r2,zero,804f94 <__alt_mem_onchip_mem+0xff784f94>
  80537c:	00ffdfc4 	movi	r3,-129
  805380:	9d84b03a 	or	r2,r19,r22
  805384:	90e4703a 	and	r18,r18,r3
  805388:	103c6b26 	beq	r2,zero,804538 <__alt_mem_onchip_mem+0xff784538>
  80538c:	0039883a 	mov	fp,zero
  805390:	003e7406 	br	804d64 <__alt_mem_onchip_mem+0xff784d64>
  805394:	9080040c 	andi	r2,r18,16
  805398:	1001b326 	beq	r2,zero,805a68 <___vfprintf_internal_r+0x18ac>
  80539c:	d9002d17 	ldw	r4,180(sp)
  8053a0:	d9402917 	ldw	r5,164(sp)
  8053a4:	d8002785 	stb	zero,158(sp)
  8053a8:	20800104 	addi	r2,r4,4
  8053ac:	24c00017 	ldw	r19,0(r4)
  8053b0:	002d883a 	mov	r22,zero
  8053b4:	2801b516 	blt	r5,zero,805a8c <___vfprintf_internal_r+0x18d0>
  8053b8:	00ffdfc4 	movi	r3,-129
  8053bc:	d8802d15 	stw	r2,180(sp)
  8053c0:	90e4703a 	and	r18,r18,r3
  8053c4:	983d2726 	beq	r19,zero,804864 <__alt_mem_onchip_mem+0xff784864>
  8053c8:	0039883a 	mov	fp,zero
  8053cc:	003d2a06 	br	804878 <__alt_mem_onchip_mem+0xff784878>
  8053d0:	dc402617 	ldw	r17,152(sp)
  8053d4:	0441d30e 	bge	zero,r17,805b24 <___vfprintf_internal_r+0x1968>
  8053d8:	dc403217 	ldw	r17,200(sp)
  8053dc:	d8803317 	ldw	r2,204(sp)
  8053e0:	1440010e 	bge	r2,r17,8053e8 <___vfprintf_internal_r+0x122c>
  8053e4:	1023883a 	mov	r17,r2
  8053e8:	04400a0e 	bge	zero,r17,805414 <___vfprintf_internal_r+0x1258>
  8053ec:	d8801f17 	ldw	r2,124(sp)
  8053f0:	1c47883a 	add	r3,r3,r17
  8053f4:	44000015 	stw	r16,0(r8)
  8053f8:	10800044 	addi	r2,r2,1
  8053fc:	44400115 	stw	r17,4(r8)
  805400:	d8c02015 	stw	r3,128(sp)
  805404:	d8801f15 	stw	r2,124(sp)
  805408:	010001c4 	movi	r4,7
  80540c:	20826516 	blt	r4,r2,805da4 <___vfprintf_internal_r+0x1be8>
  805410:	42000204 	addi	r8,r8,8
  805414:	88026116 	blt	r17,zero,805d9c <___vfprintf_internal_r+0x1be0>
  805418:	d9003217 	ldw	r4,200(sp)
  80541c:	2463c83a 	sub	r17,r4,r17
  805420:	04407b0e 	bge	zero,r17,805610 <___vfprintf_internal_r+0x1454>
  805424:	05800404 	movi	r22,16
  805428:	d8801f17 	ldw	r2,124(sp)
  80542c:	b4419d0e 	bge	r22,r17,805aa4 <___vfprintf_internal_r+0x18e8>
  805430:	01002074 	movhi	r4,129
  805434:	210f6184 	addi	r4,r4,15750
  805438:	d9002b15 	stw	r4,172(sp)
  80543c:	070001c4 	movi	fp,7
  805440:	dcc02c17 	ldw	r19,176(sp)
  805444:	00000306 	br	805454 <___vfprintf_internal_r+0x1298>
  805448:	42000204 	addi	r8,r8,8
  80544c:	8c7ffc04 	addi	r17,r17,-16
  805450:	b441970e 	bge	r22,r17,805ab0 <___vfprintf_internal_r+0x18f4>
  805454:	18c00404 	addi	r3,r3,16
  805458:	10800044 	addi	r2,r2,1
  80545c:	45000015 	stw	r20,0(r8)
  805460:	45800115 	stw	r22,4(r8)
  805464:	d8c02015 	stw	r3,128(sp)
  805468:	d8801f15 	stw	r2,124(sp)
  80546c:	e0bff60e 	bge	fp,r2,805448 <__alt_mem_onchip_mem+0xff785448>
  805470:	d9801e04 	addi	r6,sp,120
  805474:	b80b883a 	mov	r5,r23
  805478:	9809883a 	mov	r4,r19
  80547c:	080aaf00 	call	80aaf0 <__sprint_r>
  805480:	103c501e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  805484:	d8c02017 	ldw	r3,128(sp)
  805488:	d8801f17 	ldw	r2,124(sp)
  80548c:	da000404 	addi	r8,sp,16
  805490:	003fee06 	br	80544c <__alt_mem_onchip_mem+0xff78544c>
  805494:	d9002c17 	ldw	r4,176(sp)
  805498:	d9801e04 	addi	r6,sp,120
  80549c:	b80b883a 	mov	r5,r23
  8054a0:	080aaf00 	call	80aaf0 <__sprint_r>
  8054a4:	103c471e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  8054a8:	d8c02017 	ldw	r3,128(sp)
  8054ac:	df002787 	ldb	fp,158(sp)
  8054b0:	da000404 	addi	r8,sp,16
  8054b4:	003d5606 	br	804a10 <__alt_mem_onchip_mem+0xff784a10>
  8054b8:	9080040c 	andi	r2,r18,16
  8054bc:	10016126 	beq	r2,zero,805a44 <___vfprintf_internal_r+0x1888>
  8054c0:	d8802d17 	ldw	r2,180(sp)
  8054c4:	14c00017 	ldw	r19,0(r2)
  8054c8:	10800104 	addi	r2,r2,4
  8054cc:	d8802d15 	stw	r2,180(sp)
  8054d0:	982dd7fa 	srai	r22,r19,31
  8054d4:	b005883a 	mov	r2,r22
  8054d8:	003c8206 	br	8046e4 <__alt_mem_onchip_mem+0xff7846e4>
  8054dc:	9080040c 	andi	r2,r18,16
  8054e0:	10003526 	beq	r2,zero,8055b8 <___vfprintf_internal_r+0x13fc>
  8054e4:	d9402d17 	ldw	r5,180(sp)
  8054e8:	d8c02917 	ldw	r3,164(sp)
  8054ec:	d8002785 	stb	zero,158(sp)
  8054f0:	28800104 	addi	r2,r5,4
  8054f4:	2cc00017 	ldw	r19,0(r5)
  8054f8:	002d883a 	mov	r22,zero
  8054fc:	18003716 	blt	r3,zero,8055dc <___vfprintf_internal_r+0x1420>
  805500:	00ffdfc4 	movi	r3,-129
  805504:	d8802d15 	stw	r2,180(sp)
  805508:	90e4703a 	and	r18,r18,r3
  80550c:	0039883a 	mov	fp,zero
  805510:	983df326 	beq	r19,zero,804ce0 <__alt_mem_onchip_mem+0xff784ce0>
  805514:	00800244 	movi	r2,9
  805518:	14fc7b36 	bltu	r2,r19,804708 <__alt_mem_onchip_mem+0xff784708>
  80551c:	d8c02817 	ldw	r3,160(sp)
  805520:	dc001dc4 	addi	r16,sp,119
  805524:	9cc00c04 	addi	r19,r19,48
  805528:	1c07c83a 	sub	r3,r3,r16
  80552c:	dcc01dc5 	stb	r19,119(sp)
  805530:	d8c02e15 	stw	r3,184(sp)
  805534:	003ce806 	br	8048d8 <__alt_mem_onchip_mem+0xff7848d8>
  805538:	d8803317 	ldw	r2,204(sp)
  80553c:	143fffc4 	addi	r16,r2,-1
  805540:	043f4d0e 	bge	zero,r16,805278 <__alt_mem_onchip_mem+0xff785278>
  805544:	07000404 	movi	fp,16
  805548:	e400810e 	bge	fp,r16,805750 <___vfprintf_internal_r+0x1594>
  80554c:	01402074 	movhi	r5,129
  805550:	294f6184 	addi	r5,r5,15750
  805554:	d9402b15 	stw	r5,172(sp)
  805558:	01c001c4 	movi	r7,7
  80555c:	dcc02c17 	ldw	r19,176(sp)
  805560:	00000306 	br	805570 <___vfprintf_internal_r+0x13b4>
  805564:	b5800204 	addi	r22,r22,8
  805568:	843ffc04 	addi	r16,r16,-16
  80556c:	e4007b0e 	bge	fp,r16,80575c <___vfprintf_internal_r+0x15a0>
  805570:	18c00404 	addi	r3,r3,16
  805574:	8c400044 	addi	r17,r17,1
  805578:	b5000015 	stw	r20,0(r22)
  80557c:	b7000115 	stw	fp,4(r22)
  805580:	d8c02015 	stw	r3,128(sp)
  805584:	dc401f15 	stw	r17,124(sp)
  805588:	3c7ff60e 	bge	r7,r17,805564 <__alt_mem_onchip_mem+0xff785564>
  80558c:	d9801e04 	addi	r6,sp,120
  805590:	b80b883a 	mov	r5,r23
  805594:	9809883a 	mov	r4,r19
  805598:	d9c03c15 	stw	r7,240(sp)
  80559c:	080aaf00 	call	80aaf0 <__sprint_r>
  8055a0:	d9c03c17 	ldw	r7,240(sp)
  8055a4:	103c071e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  8055a8:	d8c02017 	ldw	r3,128(sp)
  8055ac:	dc401f17 	ldw	r17,124(sp)
  8055b0:	dd800404 	addi	r22,sp,16
  8055b4:	003fec06 	br	805568 <__alt_mem_onchip_mem+0xff785568>
  8055b8:	9080100c 	andi	r2,r18,64
  8055bc:	d8002785 	stb	zero,158(sp)
  8055c0:	10010e26 	beq	r2,zero,8059fc <___vfprintf_internal_r+0x1840>
  8055c4:	d9002d17 	ldw	r4,180(sp)
  8055c8:	d9402917 	ldw	r5,164(sp)
  8055cc:	002d883a 	mov	r22,zero
  8055d0:	20800104 	addi	r2,r4,4
  8055d4:	24c0000b 	ldhu	r19,0(r4)
  8055d8:	283fc90e 	bge	r5,zero,805500 <__alt_mem_onchip_mem+0xff785500>
  8055dc:	d8802d15 	stw	r2,180(sp)
  8055e0:	0039883a 	mov	fp,zero
  8055e4:	9d84b03a 	or	r2,r19,r22
  8055e8:	103c461e 	bne	r2,zero,804704 <__alt_mem_onchip_mem+0xff784704>
  8055ec:	00800044 	movi	r2,1
  8055f0:	003e6c06 	br	804fa4 <__alt_mem_onchip_mem+0xff784fa4>
  8055f4:	d9002c17 	ldw	r4,176(sp)
  8055f8:	d9801e04 	addi	r6,sp,120
  8055fc:	b80b883a 	mov	r5,r23
  805600:	080aaf00 	call	80aaf0 <__sprint_r>
  805604:	103bef1e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  805608:	d8c02017 	ldw	r3,128(sp)
  80560c:	da000404 	addi	r8,sp,16
  805610:	d9003217 	ldw	r4,200(sp)
  805614:	d8802617 	ldw	r2,152(sp)
  805618:	d9403317 	ldw	r5,204(sp)
  80561c:	8123883a 	add	r17,r16,r4
  805620:	11400216 	blt	r2,r5,80562c <___vfprintf_internal_r+0x1470>
  805624:	9100004c 	andi	r4,r18,1
  805628:	20000d26 	beq	r4,zero,805660 <___vfprintf_internal_r+0x14a4>
  80562c:	d9003717 	ldw	r4,220(sp)
  805630:	d9403417 	ldw	r5,208(sp)
  805634:	1907883a 	add	r3,r3,r4
  805638:	d9001f17 	ldw	r4,124(sp)
  80563c:	41400015 	stw	r5,0(r8)
  805640:	d9403717 	ldw	r5,220(sp)
  805644:	21000044 	addi	r4,r4,1
  805648:	d8c02015 	stw	r3,128(sp)
  80564c:	41400115 	stw	r5,4(r8)
  805650:	d9001f15 	stw	r4,124(sp)
  805654:	014001c4 	movi	r5,7
  805658:	2901e816 	blt	r5,r4,805dfc <___vfprintf_internal_r+0x1c40>
  80565c:	42000204 	addi	r8,r8,8
  805660:	d9003317 	ldw	r4,204(sp)
  805664:	8121883a 	add	r16,r16,r4
  805668:	2085c83a 	sub	r2,r4,r2
  80566c:	8461c83a 	sub	r16,r16,r17
  805670:	1400010e 	bge	r2,r16,805678 <___vfprintf_internal_r+0x14bc>
  805674:	1021883a 	mov	r16,r2
  805678:	04000a0e 	bge	zero,r16,8056a4 <___vfprintf_internal_r+0x14e8>
  80567c:	d9001f17 	ldw	r4,124(sp)
  805680:	1c07883a 	add	r3,r3,r16
  805684:	44400015 	stw	r17,0(r8)
  805688:	21000044 	addi	r4,r4,1
  80568c:	44000115 	stw	r16,4(r8)
  805690:	d8c02015 	stw	r3,128(sp)
  805694:	d9001f15 	stw	r4,124(sp)
  805698:	014001c4 	movi	r5,7
  80569c:	2901fb16 	blt	r5,r4,805e8c <___vfprintf_internal_r+0x1cd0>
  8056a0:	42000204 	addi	r8,r8,8
  8056a4:	8001f716 	blt	r16,zero,805e84 <___vfprintf_internal_r+0x1cc8>
  8056a8:	1421c83a 	sub	r16,r2,r16
  8056ac:	043d380e 	bge	zero,r16,804b90 <__alt_mem_onchip_mem+0xff784b90>
  8056b0:	04400404 	movi	r17,16
  8056b4:	d8801f17 	ldw	r2,124(sp)
  8056b8:	8c3efb0e 	bge	r17,r16,8052a8 <__alt_mem_onchip_mem+0xff7852a8>
  8056bc:	01402074 	movhi	r5,129
  8056c0:	294f6184 	addi	r5,r5,15750
  8056c4:	d9402b15 	stw	r5,172(sp)
  8056c8:	058001c4 	movi	r22,7
  8056cc:	dcc02c17 	ldw	r19,176(sp)
  8056d0:	00000306 	br	8056e0 <___vfprintf_internal_r+0x1524>
  8056d4:	42000204 	addi	r8,r8,8
  8056d8:	843ffc04 	addi	r16,r16,-16
  8056dc:	8c3ef50e 	bge	r17,r16,8052b4 <__alt_mem_onchip_mem+0xff7852b4>
  8056e0:	18c00404 	addi	r3,r3,16
  8056e4:	10800044 	addi	r2,r2,1
  8056e8:	45000015 	stw	r20,0(r8)
  8056ec:	44400115 	stw	r17,4(r8)
  8056f0:	d8c02015 	stw	r3,128(sp)
  8056f4:	d8801f15 	stw	r2,124(sp)
  8056f8:	b0bff60e 	bge	r22,r2,8056d4 <__alt_mem_onchip_mem+0xff7856d4>
  8056fc:	d9801e04 	addi	r6,sp,120
  805700:	b80b883a 	mov	r5,r23
  805704:	9809883a 	mov	r4,r19
  805708:	080aaf00 	call	80aaf0 <__sprint_r>
  80570c:	103bad1e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  805710:	d8c02017 	ldw	r3,128(sp)
  805714:	d8801f17 	ldw	r2,124(sp)
  805718:	da000404 	addi	r8,sp,16
  80571c:	003fee06 	br	8056d8 <__alt_mem_onchip_mem+0xff7856d8>
  805720:	9088703a 	and	r4,r18,r2
  805724:	203eab1e 	bne	r4,zero,8051d4 <__alt_mem_onchip_mem+0xff7851d4>
  805728:	dc401f17 	ldw	r17,124(sp)
  80572c:	40800115 	stw	r2,4(r8)
  805730:	44000015 	stw	r16,0(r8)
  805734:	8c400044 	addi	r17,r17,1
  805738:	d8c02015 	stw	r3,128(sp)
  80573c:	dc401f15 	stw	r17,124(sp)
  805740:	008001c4 	movi	r2,7
  805744:	14400e16 	blt	r2,r17,805780 <___vfprintf_internal_r+0x15c4>
  805748:	45800204 	addi	r22,r8,8
  80574c:	003eca06 	br	805278 <__alt_mem_onchip_mem+0xff785278>
  805750:	01002074 	movhi	r4,129
  805754:	210f6184 	addi	r4,r4,15750
  805758:	d9002b15 	stw	r4,172(sp)
  80575c:	d8802b17 	ldw	r2,172(sp)
  805760:	1c07883a 	add	r3,r3,r16
  805764:	8c400044 	addi	r17,r17,1
  805768:	b0800015 	stw	r2,0(r22)
  80576c:	b4000115 	stw	r16,4(r22)
  805770:	d8c02015 	stw	r3,128(sp)
  805774:	dc401f15 	stw	r17,124(sp)
  805778:	008001c4 	movi	r2,7
  80577c:	147ebd0e 	bge	r2,r17,805274 <__alt_mem_onchip_mem+0xff785274>
  805780:	d9002c17 	ldw	r4,176(sp)
  805784:	d9801e04 	addi	r6,sp,120
  805788:	b80b883a 	mov	r5,r23
  80578c:	080aaf00 	call	80aaf0 <__sprint_r>
  805790:	103b8c1e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  805794:	d8c02017 	ldw	r3,128(sp)
  805798:	dc401f17 	ldw	r17,124(sp)
  80579c:	dd800404 	addi	r22,sp,16
  8057a0:	003eb506 	br	805278 <__alt_mem_onchip_mem+0xff785278>
  8057a4:	d9002c17 	ldw	r4,176(sp)
  8057a8:	d9801e04 	addi	r6,sp,120
  8057ac:	b80b883a 	mov	r5,r23
  8057b0:	080aaf00 	call	80aaf0 <__sprint_r>
  8057b4:	103b831e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  8057b8:	d8c02017 	ldw	r3,128(sp)
  8057bc:	dc401f17 	ldw	r17,124(sp)
  8057c0:	da000404 	addi	r8,sp,16
  8057c4:	003e8d06 	br	8051fc <__alt_mem_onchip_mem+0xff7851fc>
  8057c8:	d9002c17 	ldw	r4,176(sp)
  8057cc:	d9801e04 	addi	r6,sp,120
  8057d0:	b80b883a 	mov	r5,r23
  8057d4:	080aaf00 	call	80aaf0 <__sprint_r>
  8057d8:	103b7a1e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  8057dc:	d8c02017 	ldw	r3,128(sp)
  8057e0:	dc401f17 	ldw	r17,124(sp)
  8057e4:	dd800404 	addi	r22,sp,16
  8057e8:	003e8f06 	br	805228 <__alt_mem_onchip_mem+0xff785228>
  8057ec:	0027883a 	mov	r19,zero
  8057f0:	003f4a06 	br	80551c <__alt_mem_onchip_mem+0xff78551c>
  8057f4:	d9002c17 	ldw	r4,176(sp)
  8057f8:	d9801e04 	addi	r6,sp,120
  8057fc:	b80b883a 	mov	r5,r23
  805800:	080aaf00 	call	80aaf0 <__sprint_r>
  805804:	103b6f1e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  805808:	d8c02017 	ldw	r3,128(sp)
  80580c:	da000404 	addi	r8,sp,16
  805810:	003c9d06 	br	804a88 <__alt_mem_onchip_mem+0xff784a88>
  805814:	04e7c83a 	sub	r19,zero,r19
  805818:	9804c03a 	cmpne	r2,r19,zero
  80581c:	05adc83a 	sub	r22,zero,r22
  805820:	b0adc83a 	sub	r22,r22,r2
  805824:	d8802917 	ldw	r2,164(sp)
  805828:	07000b44 	movi	fp,45
  80582c:	df002785 	stb	fp,158(sp)
  805830:	10017b16 	blt	r2,zero,805e20 <___vfprintf_internal_r+0x1c64>
  805834:	00bfdfc4 	movi	r2,-129
  805838:	90a4703a 	and	r18,r18,r2
  80583c:	003bb106 	br	804704 <__alt_mem_onchip_mem+0xff784704>
  805840:	d9003617 	ldw	r4,216(sp)
  805844:	d9403817 	ldw	r5,224(sp)
  805848:	da003d15 	stw	r8,244(sp)
  80584c:	080a8a40 	call	80a8a4 <__fpclassifyd>
  805850:	da003d17 	ldw	r8,244(sp)
  805854:	1000f026 	beq	r2,zero,805c18 <___vfprintf_internal_r+0x1a5c>
  805858:	d9002917 	ldw	r4,164(sp)
  80585c:	05bff7c4 	movi	r22,-33
  805860:	00bfffc4 	movi	r2,-1
  805864:	8dac703a 	and	r22,r17,r22
  805868:	20820026 	beq	r4,r2,80606c <___vfprintf_internal_r+0x1eb0>
  80586c:	008011c4 	movi	r2,71
  805870:	b081f726 	beq	r22,r2,806050 <___vfprintf_internal_r+0x1e94>
  805874:	d9003817 	ldw	r4,224(sp)
  805878:	90c04014 	ori	r3,r18,256
  80587c:	d8c02b15 	stw	r3,172(sp)
  805880:	20021516 	blt	r4,zero,8060d8 <___vfprintf_internal_r+0x1f1c>
  805884:	dcc03817 	ldw	r19,224(sp)
  805888:	d8002a05 	stb	zero,168(sp)
  80588c:	00801984 	movi	r2,102
  805890:	8881f926 	beq	r17,r2,806078 <___vfprintf_internal_r+0x1ebc>
  805894:	00801184 	movi	r2,70
  805898:	88821c26 	beq	r17,r2,80610c <___vfprintf_internal_r+0x1f50>
  80589c:	00801144 	movi	r2,69
  8058a0:	b081ef26 	beq	r22,r2,806060 <___vfprintf_internal_r+0x1ea4>
  8058a4:	d8c02917 	ldw	r3,164(sp)
  8058a8:	d8802104 	addi	r2,sp,132
  8058ac:	d8800315 	stw	r2,12(sp)
  8058b0:	d9403617 	ldw	r5,216(sp)
  8058b4:	d8802504 	addi	r2,sp,148
  8058b8:	d9002c17 	ldw	r4,176(sp)
  8058bc:	d8800215 	stw	r2,8(sp)
  8058c0:	d8802604 	addi	r2,sp,152
  8058c4:	d8c00015 	stw	r3,0(sp)
  8058c8:	d8800115 	stw	r2,4(sp)
  8058cc:	01c00084 	movi	r7,2
  8058d0:	980d883a 	mov	r6,r19
  8058d4:	d8c03c15 	stw	r3,240(sp)
  8058d8:	da003d15 	stw	r8,244(sp)
  8058dc:	08068940 	call	806894 <_dtoa_r>
  8058e0:	1021883a 	mov	r16,r2
  8058e4:	008019c4 	movi	r2,103
  8058e8:	d8c03c17 	ldw	r3,240(sp)
  8058ec:	da003d17 	ldw	r8,244(sp)
  8058f0:	88817126 	beq	r17,r2,805eb8 <___vfprintf_internal_r+0x1cfc>
  8058f4:	008011c4 	movi	r2,71
  8058f8:	88829226 	beq	r17,r2,806344 <___vfprintf_internal_r+0x2188>
  8058fc:	80f9883a 	add	fp,r16,r3
  805900:	d9003617 	ldw	r4,216(sp)
  805904:	000d883a 	mov	r6,zero
  805908:	000f883a 	mov	r7,zero
  80590c:	980b883a 	mov	r5,r19
  805910:	da003d15 	stw	r8,244(sp)
  805914:	080e4400 	call	80e440 <__eqdf2>
  805918:	da003d17 	ldw	r8,244(sp)
  80591c:	10018d26 	beq	r2,zero,805f54 <___vfprintf_internal_r+0x1d98>
  805920:	d8802117 	ldw	r2,132(sp)
  805924:	1700062e 	bgeu	r2,fp,805940 <___vfprintf_internal_r+0x1784>
  805928:	01000c04 	movi	r4,48
  80592c:	10c00044 	addi	r3,r2,1
  805930:	d8c02115 	stw	r3,132(sp)
  805934:	11000005 	stb	r4,0(r2)
  805938:	d8802117 	ldw	r2,132(sp)
  80593c:	173ffb36 	bltu	r2,fp,80592c <__alt_mem_onchip_mem+0xff78592c>
  805940:	1405c83a 	sub	r2,r2,r16
  805944:	d8803315 	stw	r2,204(sp)
  805948:	008011c4 	movi	r2,71
  80594c:	b0817626 	beq	r22,r2,805f28 <___vfprintf_internal_r+0x1d6c>
  805950:	00801944 	movi	r2,101
  805954:	1442810e 	bge	r2,r17,80635c <___vfprintf_internal_r+0x21a0>
  805958:	d8c02617 	ldw	r3,152(sp)
  80595c:	00801984 	movi	r2,102
  805960:	d8c03215 	stw	r3,200(sp)
  805964:	8881fe26 	beq	r17,r2,806160 <___vfprintf_internal_r+0x1fa4>
  805968:	d8c03217 	ldw	r3,200(sp)
  80596c:	d9003317 	ldw	r4,204(sp)
  805970:	1901dd16 	blt	r3,r4,8060e8 <___vfprintf_internal_r+0x1f2c>
  805974:	9480004c 	andi	r18,r18,1
  805978:	90022b1e 	bne	r18,zero,806228 <___vfprintf_internal_r+0x206c>
  80597c:	1805883a 	mov	r2,r3
  805980:	18028016 	blt	r3,zero,806384 <___vfprintf_internal_r+0x21c8>
  805984:	d8c03217 	ldw	r3,200(sp)
  805988:	044019c4 	movi	r17,103
  80598c:	d8c02e15 	stw	r3,184(sp)
  805990:	df002a07 	ldb	fp,168(sp)
  805994:	e001531e 	bne	fp,zero,805ee4 <___vfprintf_internal_r+0x1d28>
  805998:	df002783 	ldbu	fp,158(sp)
  80599c:	d8802a15 	stw	r2,168(sp)
  8059a0:	dc802b17 	ldw	r18,172(sp)
  8059a4:	d8002915 	stw	zero,164(sp)
  8059a8:	003bd106 	br	8048f0 <__alt_mem_onchip_mem+0xff7848f0>
  8059ac:	d8802d17 	ldw	r2,180(sp)
  8059b0:	d8c02d17 	ldw	r3,180(sp)
  8059b4:	d9002d17 	ldw	r4,180(sp)
  8059b8:	10800017 	ldw	r2,0(r2)
  8059bc:	18c00117 	ldw	r3,4(r3)
  8059c0:	21000204 	addi	r4,r4,8
  8059c4:	d8803615 	stw	r2,216(sp)
  8059c8:	d8c03815 	stw	r3,224(sp)
  8059cc:	d9002d15 	stw	r4,180(sp)
  8059d0:	003b7506 	br	8047a8 <__alt_mem_onchip_mem+0xff7847a8>
  8059d4:	ac400007 	ldb	r17,0(r21)
  8059d8:	003a5906 	br	804340 <__alt_mem_onchip_mem+0xff784340>
  8059dc:	9080100c 	andi	r2,r18,64
  8059e0:	1000a826 	beq	r2,zero,805c84 <___vfprintf_internal_r+0x1ac8>
  8059e4:	d9002d17 	ldw	r4,180(sp)
  8059e8:	002d883a 	mov	r22,zero
  8059ec:	24c0000b 	ldhu	r19,0(r4)
  8059f0:	21000104 	addi	r4,r4,4
  8059f4:	d9002d15 	stw	r4,180(sp)
  8059f8:	003ccb06 	br	804d28 <__alt_mem_onchip_mem+0xff784d28>
  8059fc:	d8c02d17 	ldw	r3,180(sp)
  805a00:	d9002917 	ldw	r4,164(sp)
  805a04:	002d883a 	mov	r22,zero
  805a08:	18800104 	addi	r2,r3,4
  805a0c:	1cc00017 	ldw	r19,0(r3)
  805a10:	203ebb0e 	bge	r4,zero,805500 <__alt_mem_onchip_mem+0xff785500>
  805a14:	003ef106 	br	8055dc <__alt_mem_onchip_mem+0xff7855dc>
  805a18:	9080040c 	andi	r2,r18,16
  805a1c:	1000921e 	bne	r2,zero,805c68 <___vfprintf_internal_r+0x1aac>
  805a20:	9480100c 	andi	r18,r18,64
  805a24:	90013926 	beq	r18,zero,805f0c <___vfprintf_internal_r+0x1d50>
  805a28:	d9002d17 	ldw	r4,180(sp)
  805a2c:	d9402f17 	ldw	r5,188(sp)
  805a30:	20800017 	ldw	r2,0(r4)
  805a34:	21000104 	addi	r4,r4,4
  805a38:	d9002d15 	stw	r4,180(sp)
  805a3c:	1140000d 	sth	r5,0(r2)
  805a40:	003a1606 	br	80429c <__alt_mem_onchip_mem+0xff78429c>
  805a44:	9080100c 	andi	r2,r18,64
  805a48:	10008026 	beq	r2,zero,805c4c <___vfprintf_internal_r+0x1a90>
  805a4c:	d8c02d17 	ldw	r3,180(sp)
  805a50:	1cc0000f 	ldh	r19,0(r3)
  805a54:	18c00104 	addi	r3,r3,4
  805a58:	d8c02d15 	stw	r3,180(sp)
  805a5c:	982dd7fa 	srai	r22,r19,31
  805a60:	b005883a 	mov	r2,r22
  805a64:	003b1f06 	br	8046e4 <__alt_mem_onchip_mem+0xff7846e4>
  805a68:	9080100c 	andi	r2,r18,64
  805a6c:	d8002785 	stb	zero,158(sp)
  805a70:	10008a1e 	bne	r2,zero,805c9c <___vfprintf_internal_r+0x1ae0>
  805a74:	d9402d17 	ldw	r5,180(sp)
  805a78:	d8c02917 	ldw	r3,164(sp)
  805a7c:	002d883a 	mov	r22,zero
  805a80:	28800104 	addi	r2,r5,4
  805a84:	2cc00017 	ldw	r19,0(r5)
  805a88:	183e4b0e 	bge	r3,zero,8053b8 <__alt_mem_onchip_mem+0xff7853b8>
  805a8c:	9d86b03a 	or	r3,r19,r22
  805a90:	d8802d15 	stw	r2,180(sp)
  805a94:	183e4c1e 	bne	r3,zero,8053c8 <__alt_mem_onchip_mem+0xff7853c8>
  805a98:	0039883a 	mov	fp,zero
  805a9c:	0005883a 	mov	r2,zero
  805aa0:	003d4006 	br	804fa4 <__alt_mem_onchip_mem+0xff784fa4>
  805aa4:	01402074 	movhi	r5,129
  805aa8:	294f6184 	addi	r5,r5,15750
  805aac:	d9402b15 	stw	r5,172(sp)
  805ab0:	d9402b17 	ldw	r5,172(sp)
  805ab4:	1c47883a 	add	r3,r3,r17
  805ab8:	10800044 	addi	r2,r2,1
  805abc:	41400015 	stw	r5,0(r8)
  805ac0:	44400115 	stw	r17,4(r8)
  805ac4:	d8c02015 	stw	r3,128(sp)
  805ac8:	d8801f15 	stw	r2,124(sp)
  805acc:	010001c4 	movi	r4,7
  805ad0:	20bec816 	blt	r4,r2,8055f4 <__alt_mem_onchip_mem+0xff7855f4>
  805ad4:	42000204 	addi	r8,r8,8
  805ad8:	003ecd06 	br	805610 <__alt_mem_onchip_mem+0xff785610>
  805adc:	d9002917 	ldw	r4,164(sp)
  805ae0:	d8002785 	stb	zero,158(sp)
  805ae4:	203d2d16 	blt	r4,zero,804f9c <__alt_mem_onchip_mem+0xff784f9c>
  805ae8:	00bfdfc4 	movi	r2,-129
  805aec:	90a4703a 	and	r18,r18,r2
  805af0:	003a9106 	br	804538 <__alt_mem_onchip_mem+0xff784538>
  805af4:	01002074 	movhi	r4,129
  805af8:	210f6184 	addi	r4,r4,15750
  805afc:	d9002b15 	stw	r4,172(sp)
  805b00:	003c0c06 	br	804b34 <__alt_mem_onchip_mem+0xff784b34>
  805b04:	d9002c17 	ldw	r4,176(sp)
  805b08:	d9801e04 	addi	r6,sp,120
  805b0c:	b80b883a 	mov	r5,r23
  805b10:	080aaf00 	call	80aaf0 <__sprint_r>
  805b14:	103aab1e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  805b18:	d8c02017 	ldw	r3,128(sp)
  805b1c:	da000404 	addi	r8,sp,16
  805b20:	003d4106 	br	805028 <__alt_mem_onchip_mem+0xff785028>
  805b24:	d8801f17 	ldw	r2,124(sp)
  805b28:	01402074 	movhi	r5,129
  805b2c:	01000044 	movi	r4,1
  805b30:	18c00044 	addi	r3,r3,1
  805b34:	10800044 	addi	r2,r2,1
  805b38:	294f6104 	addi	r5,r5,15748
  805b3c:	41000115 	stw	r4,4(r8)
  805b40:	41400015 	stw	r5,0(r8)
  805b44:	d8c02015 	stw	r3,128(sp)
  805b48:	d8801f15 	stw	r2,124(sp)
  805b4c:	010001c4 	movi	r4,7
  805b50:	20805c16 	blt	r4,r2,805cc4 <___vfprintf_internal_r+0x1b08>
  805b54:	42000204 	addi	r8,r8,8
  805b58:	8800041e 	bne	r17,zero,805b6c <___vfprintf_internal_r+0x19b0>
  805b5c:	d8803317 	ldw	r2,204(sp)
  805b60:	1000021e 	bne	r2,zero,805b6c <___vfprintf_internal_r+0x19b0>
  805b64:	9080004c 	andi	r2,r18,1
  805b68:	103c0926 	beq	r2,zero,804b90 <__alt_mem_onchip_mem+0xff784b90>
  805b6c:	d9003717 	ldw	r4,220(sp)
  805b70:	d8801f17 	ldw	r2,124(sp)
  805b74:	d9403417 	ldw	r5,208(sp)
  805b78:	20c7883a 	add	r3,r4,r3
  805b7c:	10800044 	addi	r2,r2,1
  805b80:	41000115 	stw	r4,4(r8)
  805b84:	41400015 	stw	r5,0(r8)
  805b88:	d8c02015 	stw	r3,128(sp)
  805b8c:	d8801f15 	stw	r2,124(sp)
  805b90:	010001c4 	movi	r4,7
  805b94:	20812116 	blt	r4,r2,80601c <___vfprintf_internal_r+0x1e60>
  805b98:	42000204 	addi	r8,r8,8
  805b9c:	0463c83a 	sub	r17,zero,r17
  805ba0:	0440730e 	bge	zero,r17,805d70 <___vfprintf_internal_r+0x1bb4>
  805ba4:	05800404 	movi	r22,16
  805ba8:	b440860e 	bge	r22,r17,805dc4 <___vfprintf_internal_r+0x1c08>
  805bac:	01402074 	movhi	r5,129
  805bb0:	294f6184 	addi	r5,r5,15750
  805bb4:	d9402b15 	stw	r5,172(sp)
  805bb8:	070001c4 	movi	fp,7
  805bbc:	dcc02c17 	ldw	r19,176(sp)
  805bc0:	00000306 	br	805bd0 <___vfprintf_internal_r+0x1a14>
  805bc4:	42000204 	addi	r8,r8,8
  805bc8:	8c7ffc04 	addi	r17,r17,-16
  805bcc:	b440800e 	bge	r22,r17,805dd0 <___vfprintf_internal_r+0x1c14>
  805bd0:	18c00404 	addi	r3,r3,16
  805bd4:	10800044 	addi	r2,r2,1
  805bd8:	45000015 	stw	r20,0(r8)
  805bdc:	45800115 	stw	r22,4(r8)
  805be0:	d8c02015 	stw	r3,128(sp)
  805be4:	d8801f15 	stw	r2,124(sp)
  805be8:	e0bff60e 	bge	fp,r2,805bc4 <__alt_mem_onchip_mem+0xff785bc4>
  805bec:	d9801e04 	addi	r6,sp,120
  805bf0:	b80b883a 	mov	r5,r23
  805bf4:	9809883a 	mov	r4,r19
  805bf8:	080aaf00 	call	80aaf0 <__sprint_r>
  805bfc:	103a711e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  805c00:	d8c02017 	ldw	r3,128(sp)
  805c04:	d8801f17 	ldw	r2,124(sp)
  805c08:	da000404 	addi	r8,sp,16
  805c0c:	003fee06 	br	805bc8 <__alt_mem_onchip_mem+0xff785bc8>
  805c10:	00bfffc4 	movi	r2,-1
  805c14:	003a6f06 	br	8045d4 <__alt_mem_onchip_mem+0xff7845d4>
  805c18:	008011c4 	movi	r2,71
  805c1c:	1440b816 	blt	r2,r17,805f00 <___vfprintf_internal_r+0x1d44>
  805c20:	04002074 	movhi	r16,129
  805c24:	840f5304 	addi	r16,r16,15692
  805c28:	00c000c4 	movi	r3,3
  805c2c:	00bfdfc4 	movi	r2,-129
  805c30:	d8c02a15 	stw	r3,168(sp)
  805c34:	90a4703a 	and	r18,r18,r2
  805c38:	df002783 	ldbu	fp,158(sp)
  805c3c:	d8c02e15 	stw	r3,184(sp)
  805c40:	d8002915 	stw	zero,164(sp)
  805c44:	d8003215 	stw	zero,200(sp)
  805c48:	003b2906 	br	8048f0 <__alt_mem_onchip_mem+0xff7848f0>
  805c4c:	d9002d17 	ldw	r4,180(sp)
  805c50:	24c00017 	ldw	r19,0(r4)
  805c54:	21000104 	addi	r4,r4,4
  805c58:	d9002d15 	stw	r4,180(sp)
  805c5c:	982dd7fa 	srai	r22,r19,31
  805c60:	b005883a 	mov	r2,r22
  805c64:	003a9f06 	br	8046e4 <__alt_mem_onchip_mem+0xff7846e4>
  805c68:	d9402d17 	ldw	r5,180(sp)
  805c6c:	d8c02f17 	ldw	r3,188(sp)
  805c70:	28800017 	ldw	r2,0(r5)
  805c74:	29400104 	addi	r5,r5,4
  805c78:	d9402d15 	stw	r5,180(sp)
  805c7c:	10c00015 	stw	r3,0(r2)
  805c80:	00398606 	br	80429c <__alt_mem_onchip_mem+0xff78429c>
  805c84:	d9402d17 	ldw	r5,180(sp)
  805c88:	002d883a 	mov	r22,zero
  805c8c:	2cc00017 	ldw	r19,0(r5)
  805c90:	29400104 	addi	r5,r5,4
  805c94:	d9402d15 	stw	r5,180(sp)
  805c98:	003c2306 	br	804d28 <__alt_mem_onchip_mem+0xff784d28>
  805c9c:	d8c02d17 	ldw	r3,180(sp)
  805ca0:	d9002917 	ldw	r4,164(sp)
  805ca4:	002d883a 	mov	r22,zero
  805ca8:	18800104 	addi	r2,r3,4
  805cac:	1cc0000b 	ldhu	r19,0(r3)
  805cb0:	203dc10e 	bge	r4,zero,8053b8 <__alt_mem_onchip_mem+0xff7853b8>
  805cb4:	003f7506 	br	805a8c <__alt_mem_onchip_mem+0xff785a8c>
  805cb8:	04002074 	movhi	r16,129
  805cbc:	840f5104 	addi	r16,r16,15684
  805cc0:	003acc06 	br	8047f4 <__alt_mem_onchip_mem+0xff7847f4>
  805cc4:	d9002c17 	ldw	r4,176(sp)
  805cc8:	d9801e04 	addi	r6,sp,120
  805ccc:	b80b883a 	mov	r5,r23
  805cd0:	080aaf00 	call	80aaf0 <__sprint_r>
  805cd4:	103a3b1e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  805cd8:	dc402617 	ldw	r17,152(sp)
  805cdc:	d8c02017 	ldw	r3,128(sp)
  805ce0:	da000404 	addi	r8,sp,16
  805ce4:	003f9c06 	br	805b58 <__alt_mem_onchip_mem+0xff785b58>
  805ce8:	ac400043 	ldbu	r17,1(r21)
  805cec:	94800814 	ori	r18,r18,32
  805cf0:	ad400044 	addi	r21,r21,1
  805cf4:	8c403fcc 	andi	r17,r17,255
  805cf8:	8c40201c 	xori	r17,r17,128
  805cfc:	8c7fe004 	addi	r17,r17,-128
  805d00:	00398f06 	br	804340 <__alt_mem_onchip_mem+0xff784340>
  805d04:	d8c02d15 	stw	r3,180(sp)
  805d08:	0039883a 	mov	fp,zero
  805d0c:	003e3506 	br	8055e4 <__alt_mem_onchip_mem+0xff7855e4>
  805d10:	d9002c17 	ldw	r4,176(sp)
  805d14:	d9801e04 	addi	r6,sp,120
  805d18:	b80b883a 	mov	r5,r23
  805d1c:	080aaf00 	call	80aaf0 <__sprint_r>
  805d20:	103a281e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  805d24:	d8c02017 	ldw	r3,128(sp)
  805d28:	da000404 	addi	r8,sp,16
  805d2c:	003cd006 	br	805070 <__alt_mem_onchip_mem+0xff785070>
  805d30:	8009883a 	mov	r4,r16
  805d34:	da003d15 	stw	r8,244(sp)
  805d38:	0803e140 	call	803e14 <strlen>
  805d3c:	d8802e15 	stw	r2,184(sp)
  805d40:	da003d17 	ldw	r8,244(sp)
  805d44:	103c340e 	bge	r2,zero,804e18 <__alt_mem_onchip_mem+0xff784e18>
  805d48:	0005883a 	mov	r2,zero
  805d4c:	003c3206 	br	804e18 <__alt_mem_onchip_mem+0xff784e18>
  805d50:	d9002c17 	ldw	r4,176(sp)
  805d54:	d9801e04 	addi	r6,sp,120
  805d58:	b80b883a 	mov	r5,r23
  805d5c:	080aaf00 	call	80aaf0 <__sprint_r>
  805d60:	103a181e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  805d64:	d8c02017 	ldw	r3,128(sp)
  805d68:	d8801f17 	ldw	r2,124(sp)
  805d6c:	da000404 	addi	r8,sp,16
  805d70:	d9403317 	ldw	r5,204(sp)
  805d74:	10800044 	addi	r2,r2,1
  805d78:	44000015 	stw	r16,0(r8)
  805d7c:	28c7883a 	add	r3,r5,r3
  805d80:	003b7d06 	br	804b78 <__alt_mem_onchip_mem+0xff784b78>
  805d84:	01002074 	movhi	r4,129
  805d88:	210f6584 	addi	r4,r4,15766
  805d8c:	d9003515 	stw	r4,212(sp)
  805d90:	003b1406 	br	8049e4 <__alt_mem_onchip_mem+0xff7849e4>
  805d94:	013fffc4 	movi	r4,-1
  805d98:	003a3506 	br	804670 <__alt_mem_onchip_mem+0xff784670>
  805d9c:	0023883a 	mov	r17,zero
  805da0:	003d9d06 	br	805418 <__alt_mem_onchip_mem+0xff785418>
  805da4:	d9002c17 	ldw	r4,176(sp)
  805da8:	d9801e04 	addi	r6,sp,120
  805dac:	b80b883a 	mov	r5,r23
  805db0:	080aaf00 	call	80aaf0 <__sprint_r>
  805db4:	103a031e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  805db8:	d8c02017 	ldw	r3,128(sp)
  805dbc:	da000404 	addi	r8,sp,16
  805dc0:	003d9406 	br	805414 <__alt_mem_onchip_mem+0xff785414>
  805dc4:	01002074 	movhi	r4,129
  805dc8:	210f6184 	addi	r4,r4,15750
  805dcc:	d9002b15 	stw	r4,172(sp)
  805dd0:	d9002b17 	ldw	r4,172(sp)
  805dd4:	1c47883a 	add	r3,r3,r17
  805dd8:	10800044 	addi	r2,r2,1
  805ddc:	41000015 	stw	r4,0(r8)
  805de0:	44400115 	stw	r17,4(r8)
  805de4:	d8c02015 	stw	r3,128(sp)
  805de8:	d8801f15 	stw	r2,124(sp)
  805dec:	010001c4 	movi	r4,7
  805df0:	20bfd716 	blt	r4,r2,805d50 <__alt_mem_onchip_mem+0xff785d50>
  805df4:	42000204 	addi	r8,r8,8
  805df8:	003fdd06 	br	805d70 <__alt_mem_onchip_mem+0xff785d70>
  805dfc:	d9002c17 	ldw	r4,176(sp)
  805e00:	d9801e04 	addi	r6,sp,120
  805e04:	b80b883a 	mov	r5,r23
  805e08:	080aaf00 	call	80aaf0 <__sprint_r>
  805e0c:	1039ed1e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  805e10:	d8802617 	ldw	r2,152(sp)
  805e14:	d8c02017 	ldw	r3,128(sp)
  805e18:	da000404 	addi	r8,sp,16
  805e1c:	003e1006 	br	805660 <__alt_mem_onchip_mem+0xff785660>
  805e20:	00800044 	movi	r2,1
  805e24:	10803fcc 	andi	r2,r2,255
  805e28:	00c00044 	movi	r3,1
  805e2c:	10fa3526 	beq	r2,r3,804704 <__alt_mem_onchip_mem+0xff784704>
  805e30:	00c00084 	movi	r3,2
  805e34:	10fbcb26 	beq	r2,r3,804d64 <__alt_mem_onchip_mem+0xff784d64>
  805e38:	003a8f06 	br	804878 <__alt_mem_onchip_mem+0xff784878>
  805e3c:	01002074 	movhi	r4,129
  805e40:	210f6584 	addi	r4,r4,15766
  805e44:	d9003515 	stw	r4,212(sp)
  805e48:	003b7606 	br	804c24 <__alt_mem_onchip_mem+0xff784c24>
  805e4c:	d8802917 	ldw	r2,164(sp)
  805e50:	00c00184 	movi	r3,6
  805e54:	1880012e 	bgeu	r3,r2,805e5c <___vfprintf_internal_r+0x1ca0>
  805e58:	1805883a 	mov	r2,r3
  805e5c:	d8802e15 	stw	r2,184(sp)
  805e60:	1000ef16 	blt	r2,zero,806220 <___vfprintf_internal_r+0x2064>
  805e64:	04002074 	movhi	r16,129
  805e68:	d8802a15 	stw	r2,168(sp)
  805e6c:	dcc02d15 	stw	r19,180(sp)
  805e70:	d8002915 	stw	zero,164(sp)
  805e74:	d8003215 	stw	zero,200(sp)
  805e78:	840f5f04 	addi	r16,r16,15740
  805e7c:	0039883a 	mov	fp,zero
  805e80:	003aa206 	br	80490c <__alt_mem_onchip_mem+0xff78490c>
  805e84:	0021883a 	mov	r16,zero
  805e88:	003e0706 	br	8056a8 <__alt_mem_onchip_mem+0xff7856a8>
  805e8c:	d9002c17 	ldw	r4,176(sp)
  805e90:	d9801e04 	addi	r6,sp,120
  805e94:	b80b883a 	mov	r5,r23
  805e98:	080aaf00 	call	80aaf0 <__sprint_r>
  805e9c:	1039c91e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  805ea0:	d8802617 	ldw	r2,152(sp)
  805ea4:	d9403317 	ldw	r5,204(sp)
  805ea8:	d8c02017 	ldw	r3,128(sp)
  805eac:	da000404 	addi	r8,sp,16
  805eb0:	2885c83a 	sub	r2,r5,r2
  805eb4:	003dfb06 	br	8056a4 <__alt_mem_onchip_mem+0xff7856a4>
  805eb8:	9080004c 	andi	r2,r18,1
  805ebc:	103e8f1e 	bne	r2,zero,8058fc <__alt_mem_onchip_mem+0xff7858fc>
  805ec0:	d8802117 	ldw	r2,132(sp)
  805ec4:	003e9e06 	br	805940 <__alt_mem_onchip_mem+0xff785940>
  805ec8:	1025883a 	mov	r18,r2
  805ecc:	0039883a 	mov	fp,zero
  805ed0:	00800084 	movi	r2,2
  805ed4:	003fd306 	br	805e24 <__alt_mem_onchip_mem+0xff785e24>
  805ed8:	07000b44 	movi	fp,45
  805edc:	df002785 	stb	fp,158(sp)
  805ee0:	003a4006 	br	8047e4 <__alt_mem_onchip_mem+0xff7847e4>
  805ee4:	00c00b44 	movi	r3,45
  805ee8:	d8c02785 	stb	r3,158(sp)
  805eec:	d8802a15 	stw	r2,168(sp)
  805ef0:	dc802b17 	ldw	r18,172(sp)
  805ef4:	d8002915 	stw	zero,164(sp)
  805ef8:	07000b44 	movi	fp,45
  805efc:	003a8006 	br	804900 <__alt_mem_onchip_mem+0xff784900>
  805f00:	04002074 	movhi	r16,129
  805f04:	840f5404 	addi	r16,r16,15696
  805f08:	003f4706 	br	805c28 <__alt_mem_onchip_mem+0xff785c28>
  805f0c:	d8c02d17 	ldw	r3,180(sp)
  805f10:	d9002f17 	ldw	r4,188(sp)
  805f14:	18800017 	ldw	r2,0(r3)
  805f18:	18c00104 	addi	r3,r3,4
  805f1c:	d8c02d15 	stw	r3,180(sp)
  805f20:	11000015 	stw	r4,0(r2)
  805f24:	0038dd06 	br	80429c <__alt_mem_onchip_mem+0xff78429c>
  805f28:	dd802617 	ldw	r22,152(sp)
  805f2c:	00bfff44 	movi	r2,-3
  805f30:	b0801c16 	blt	r22,r2,805fa4 <___vfprintf_internal_r+0x1de8>
  805f34:	d9402917 	ldw	r5,164(sp)
  805f38:	2d801a16 	blt	r5,r22,805fa4 <___vfprintf_internal_r+0x1de8>
  805f3c:	dd803215 	stw	r22,200(sp)
  805f40:	003e8906 	br	805968 <__alt_mem_onchip_mem+0xff785968>
  805f44:	01002074 	movhi	r4,129
  805f48:	210f6184 	addi	r4,r4,15750
  805f4c:	d9002b15 	stw	r4,172(sp)
  805f50:	003c9106 	br	805198 <__alt_mem_onchip_mem+0xff785198>
  805f54:	e005883a 	mov	r2,fp
  805f58:	003e7906 	br	805940 <__alt_mem_onchip_mem+0xff785940>
  805f5c:	d9402917 	ldw	r5,164(sp)
  805f60:	df002783 	ldbu	fp,158(sp)
  805f64:	dcc02d15 	stw	r19,180(sp)
  805f68:	d9402a15 	stw	r5,168(sp)
  805f6c:	d9402e15 	stw	r5,184(sp)
  805f70:	d8002915 	stw	zero,164(sp)
  805f74:	d8003215 	stw	zero,200(sp)
  805f78:	003a5d06 	br	8048f0 <__alt_mem_onchip_mem+0xff7848f0>
  805f7c:	9080004c 	andi	r2,r18,1
  805f80:	0039883a 	mov	fp,zero
  805f84:	10000426 	beq	r2,zero,805f98 <___vfprintf_internal_r+0x1ddc>
  805f88:	00800c04 	movi	r2,48
  805f8c:	dc001dc4 	addi	r16,sp,119
  805f90:	d8801dc5 	stb	r2,119(sp)
  805f94:	003b8006 	br	804d98 <__alt_mem_onchip_mem+0xff784d98>
  805f98:	d8002e15 	stw	zero,184(sp)
  805f9c:	dc001e04 	addi	r16,sp,120
  805fa0:	003a4d06 	br	8048d8 <__alt_mem_onchip_mem+0xff7848d8>
  805fa4:	8c7fff84 	addi	r17,r17,-2
  805fa8:	b5bfffc4 	addi	r22,r22,-1
  805fac:	dd802615 	stw	r22,152(sp)
  805fb0:	dc4022c5 	stb	r17,139(sp)
  805fb4:	b000bf16 	blt	r22,zero,8062b4 <___vfprintf_internal_r+0x20f8>
  805fb8:	00800ac4 	movi	r2,43
  805fbc:	d8802305 	stb	r2,140(sp)
  805fc0:	00800244 	movi	r2,9
  805fc4:	15807016 	blt	r2,r22,806188 <___vfprintf_internal_r+0x1fcc>
  805fc8:	00800c04 	movi	r2,48
  805fcc:	b5800c04 	addi	r22,r22,48
  805fd0:	d8802345 	stb	r2,141(sp)
  805fd4:	dd802385 	stb	r22,142(sp)
  805fd8:	d88023c4 	addi	r2,sp,143
  805fdc:	df0022c4 	addi	fp,sp,139
  805fe0:	d8c03317 	ldw	r3,204(sp)
  805fe4:	1739c83a 	sub	fp,r2,fp
  805fe8:	d9003317 	ldw	r4,204(sp)
  805fec:	e0c7883a 	add	r3,fp,r3
  805ff0:	df003a15 	stw	fp,232(sp)
  805ff4:	d8c02e15 	stw	r3,184(sp)
  805ff8:	00800044 	movi	r2,1
  805ffc:	1100b30e 	bge	r2,r4,8062cc <___vfprintf_internal_r+0x2110>
  806000:	d8c02e17 	ldw	r3,184(sp)
  806004:	18c00044 	addi	r3,r3,1
  806008:	d8c02e15 	stw	r3,184(sp)
  80600c:	1805883a 	mov	r2,r3
  806010:	1800ac16 	blt	r3,zero,8062c4 <___vfprintf_internal_r+0x2108>
  806014:	d8003215 	stw	zero,200(sp)
  806018:	003e5d06 	br	805990 <__alt_mem_onchip_mem+0xff785990>
  80601c:	d9002c17 	ldw	r4,176(sp)
  806020:	d9801e04 	addi	r6,sp,120
  806024:	b80b883a 	mov	r5,r23
  806028:	080aaf00 	call	80aaf0 <__sprint_r>
  80602c:	1039651e 	bne	r2,zero,8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  806030:	dc402617 	ldw	r17,152(sp)
  806034:	d8c02017 	ldw	r3,128(sp)
  806038:	d8801f17 	ldw	r2,124(sp)
  80603c:	da000404 	addi	r8,sp,16
  806040:	003ed606 	br	805b9c <__alt_mem_onchip_mem+0xff785b9c>
  806044:	582b883a 	mov	r21,r11
  806048:	d8002915 	stw	zero,164(sp)
  80604c:	0038bd06 	br	804344 <__alt_mem_onchip_mem+0xff784344>
  806050:	d8802917 	ldw	r2,164(sp)
  806054:	103e071e 	bne	r2,zero,805874 <__alt_mem_onchip_mem+0xff785874>
  806058:	dc002915 	stw	r16,164(sp)
  80605c:	003e0506 	br	805874 <__alt_mem_onchip_mem+0xff785874>
  806060:	d9002917 	ldw	r4,164(sp)
  806064:	20c00044 	addi	r3,r4,1
  806068:	003e0f06 	br	8058a8 <__alt_mem_onchip_mem+0xff7858a8>
  80606c:	01400184 	movi	r5,6
  806070:	d9402915 	stw	r5,164(sp)
  806074:	003dff06 	br	805874 <__alt_mem_onchip_mem+0xff785874>
  806078:	d8802104 	addi	r2,sp,132
  80607c:	d8800315 	stw	r2,12(sp)
  806080:	d8802504 	addi	r2,sp,148
  806084:	d8800215 	stw	r2,8(sp)
  806088:	d8802604 	addi	r2,sp,152
  80608c:	d8800115 	stw	r2,4(sp)
  806090:	d8802917 	ldw	r2,164(sp)
  806094:	d9403617 	ldw	r5,216(sp)
  806098:	d9002c17 	ldw	r4,176(sp)
  80609c:	d8800015 	stw	r2,0(sp)
  8060a0:	01c000c4 	movi	r7,3
  8060a4:	980d883a 	mov	r6,r19
  8060a8:	da003d15 	stw	r8,244(sp)
  8060ac:	08068940 	call	806894 <_dtoa_r>
  8060b0:	d8c02917 	ldw	r3,164(sp)
  8060b4:	da003d17 	ldw	r8,244(sp)
  8060b8:	1021883a 	mov	r16,r2
  8060bc:	10f9883a 	add	fp,r2,r3
  8060c0:	81000007 	ldb	r4,0(r16)
  8060c4:	00800c04 	movi	r2,48
  8060c8:	20805e26 	beq	r4,r2,806244 <___vfprintf_internal_r+0x2088>
  8060cc:	d8c02617 	ldw	r3,152(sp)
  8060d0:	e0f9883a 	add	fp,fp,r3
  8060d4:	003e0a06 	br	805900 <__alt_mem_onchip_mem+0xff785900>
  8060d8:	00c00b44 	movi	r3,45
  8060dc:	24e0003c 	xorhi	r19,r4,32768
  8060e0:	d8c02a05 	stb	r3,168(sp)
  8060e4:	003de906 	br	80588c <__alt_mem_onchip_mem+0xff78588c>
  8060e8:	d8c03217 	ldw	r3,200(sp)
  8060ec:	00c07a0e 	bge	zero,r3,8062d8 <___vfprintf_internal_r+0x211c>
  8060f0:	00800044 	movi	r2,1
  8060f4:	d9003317 	ldw	r4,204(sp)
  8060f8:	1105883a 	add	r2,r2,r4
  8060fc:	d8802e15 	stw	r2,184(sp)
  806100:	10004e16 	blt	r2,zero,80623c <___vfprintf_internal_r+0x2080>
  806104:	044019c4 	movi	r17,103
  806108:	003e2106 	br	805990 <__alt_mem_onchip_mem+0xff785990>
  80610c:	d9002917 	ldw	r4,164(sp)
  806110:	d8802104 	addi	r2,sp,132
  806114:	d8800315 	stw	r2,12(sp)
  806118:	d9000015 	stw	r4,0(sp)
  80611c:	d8802504 	addi	r2,sp,148
  806120:	d9403617 	ldw	r5,216(sp)
  806124:	d9002c17 	ldw	r4,176(sp)
  806128:	d8800215 	stw	r2,8(sp)
  80612c:	d8802604 	addi	r2,sp,152
  806130:	d8800115 	stw	r2,4(sp)
  806134:	01c000c4 	movi	r7,3
  806138:	980d883a 	mov	r6,r19
  80613c:	da003d15 	stw	r8,244(sp)
  806140:	08068940 	call	806894 <_dtoa_r>
  806144:	d8c02917 	ldw	r3,164(sp)
  806148:	da003d17 	ldw	r8,244(sp)
  80614c:	1021883a 	mov	r16,r2
  806150:	00801184 	movi	r2,70
  806154:	80f9883a 	add	fp,r16,r3
  806158:	88bfd926 	beq	r17,r2,8060c0 <__alt_mem_onchip_mem+0xff7860c0>
  80615c:	003de806 	br	805900 <__alt_mem_onchip_mem+0xff785900>
  806160:	d9002917 	ldw	r4,164(sp)
  806164:	00c04d0e 	bge	zero,r3,80629c <___vfprintf_internal_r+0x20e0>
  806168:	2000441e 	bne	r4,zero,80627c <___vfprintf_internal_r+0x20c0>
  80616c:	9480004c 	andi	r18,r18,1
  806170:	9000421e 	bne	r18,zero,80627c <___vfprintf_internal_r+0x20c0>
  806174:	1805883a 	mov	r2,r3
  806178:	18007016 	blt	r3,zero,80633c <___vfprintf_internal_r+0x2180>
  80617c:	d8c03217 	ldw	r3,200(sp)
  806180:	d8c02e15 	stw	r3,184(sp)
  806184:	003e0206 	br	805990 <__alt_mem_onchip_mem+0xff785990>
  806188:	df0022c4 	addi	fp,sp,139
  80618c:	dc002915 	stw	r16,164(sp)
  806190:	4027883a 	mov	r19,r8
  806194:	e021883a 	mov	r16,fp
  806198:	b009883a 	mov	r4,r22
  80619c:	01400284 	movi	r5,10
  8061a0:	080d17c0 	call	80d17c <__modsi3>
  8061a4:	10800c04 	addi	r2,r2,48
  8061a8:	843fffc4 	addi	r16,r16,-1
  8061ac:	b009883a 	mov	r4,r22
  8061b0:	01400284 	movi	r5,10
  8061b4:	80800005 	stb	r2,0(r16)
  8061b8:	080d0f80 	call	80d0f8 <__divsi3>
  8061bc:	102d883a 	mov	r22,r2
  8061c0:	00800244 	movi	r2,9
  8061c4:	15bff416 	blt	r2,r22,806198 <__alt_mem_onchip_mem+0xff786198>
  8061c8:	9811883a 	mov	r8,r19
  8061cc:	b0800c04 	addi	r2,r22,48
  8061d0:	8027883a 	mov	r19,r16
  8061d4:	997fffc4 	addi	r5,r19,-1
  8061d8:	98bfffc5 	stb	r2,-1(r19)
  8061dc:	dc002917 	ldw	r16,164(sp)
  8061e0:	2f006a2e 	bgeu	r5,fp,80638c <___vfprintf_internal_r+0x21d0>
  8061e4:	d9c02384 	addi	r7,sp,142
  8061e8:	3ccfc83a 	sub	r7,r7,r19
  8061ec:	d9002344 	addi	r4,sp,141
  8061f0:	e1cf883a 	add	r7,fp,r7
  8061f4:	00000106 	br	8061fc <___vfprintf_internal_r+0x2040>
  8061f8:	28800003 	ldbu	r2,0(r5)
  8061fc:	20800005 	stb	r2,0(r4)
  806200:	21000044 	addi	r4,r4,1
  806204:	29400044 	addi	r5,r5,1
  806208:	393ffb1e 	bne	r7,r4,8061f8 <__alt_mem_onchip_mem+0xff7861f8>
  80620c:	d8802304 	addi	r2,sp,140
  806210:	14c5c83a 	sub	r2,r2,r19
  806214:	d8c02344 	addi	r3,sp,141
  806218:	1885883a 	add	r2,r3,r2
  80621c:	003f7006 	br	805fe0 <__alt_mem_onchip_mem+0xff785fe0>
  806220:	0005883a 	mov	r2,zero
  806224:	003f0f06 	br	805e64 <__alt_mem_onchip_mem+0xff785e64>
  806228:	d8c03217 	ldw	r3,200(sp)
  80622c:	18c00044 	addi	r3,r3,1
  806230:	d8c02e15 	stw	r3,184(sp)
  806234:	1805883a 	mov	r2,r3
  806238:	183fb20e 	bge	r3,zero,806104 <__alt_mem_onchip_mem+0xff786104>
  80623c:	0005883a 	mov	r2,zero
  806240:	003fb006 	br	806104 <__alt_mem_onchip_mem+0xff786104>
  806244:	d9003617 	ldw	r4,216(sp)
  806248:	000d883a 	mov	r6,zero
  80624c:	000f883a 	mov	r7,zero
  806250:	980b883a 	mov	r5,r19
  806254:	d8c03c15 	stw	r3,240(sp)
  806258:	da003d15 	stw	r8,244(sp)
  80625c:	080e4400 	call	80e440 <__eqdf2>
  806260:	d8c03c17 	ldw	r3,240(sp)
  806264:	da003d17 	ldw	r8,244(sp)
  806268:	103f9826 	beq	r2,zero,8060cc <__alt_mem_onchip_mem+0xff7860cc>
  80626c:	00800044 	movi	r2,1
  806270:	10c7c83a 	sub	r3,r2,r3
  806274:	d8c02615 	stw	r3,152(sp)
  806278:	003f9506 	br	8060d0 <__alt_mem_onchip_mem+0xff7860d0>
  80627c:	d9002917 	ldw	r4,164(sp)
  806280:	d8c03217 	ldw	r3,200(sp)
  806284:	20800044 	addi	r2,r4,1
  806288:	1885883a 	add	r2,r3,r2
  80628c:	d8802e15 	stw	r2,184(sp)
  806290:	103dbf0e 	bge	r2,zero,805990 <__alt_mem_onchip_mem+0xff785990>
  806294:	0005883a 	mov	r2,zero
  806298:	003dbd06 	br	805990 <__alt_mem_onchip_mem+0xff785990>
  80629c:	2000211e 	bne	r4,zero,806324 <___vfprintf_internal_r+0x2168>
  8062a0:	9480004c 	andi	r18,r18,1
  8062a4:	90001f1e 	bne	r18,zero,806324 <___vfprintf_internal_r+0x2168>
  8062a8:	00800044 	movi	r2,1
  8062ac:	d8802e15 	stw	r2,184(sp)
  8062b0:	003db706 	br	805990 <__alt_mem_onchip_mem+0xff785990>
  8062b4:	00800b44 	movi	r2,45
  8062b8:	05adc83a 	sub	r22,zero,r22
  8062bc:	d8802305 	stb	r2,140(sp)
  8062c0:	003f3f06 	br	805fc0 <__alt_mem_onchip_mem+0xff785fc0>
  8062c4:	0005883a 	mov	r2,zero
  8062c8:	003f5206 	br	806014 <__alt_mem_onchip_mem+0xff786014>
  8062cc:	90a4703a 	and	r18,r18,r2
  8062d0:	903f4e26 	beq	r18,zero,80600c <__alt_mem_onchip_mem+0xff78600c>
  8062d4:	003f4a06 	br	806000 <__alt_mem_onchip_mem+0xff786000>
  8062d8:	00800084 	movi	r2,2
  8062dc:	10c5c83a 	sub	r2,r2,r3
  8062e0:	003f8406 	br	8060f4 <__alt_mem_onchip_mem+0xff7860f4>
  8062e4:	d8802d17 	ldw	r2,180(sp)
  8062e8:	d9002d17 	ldw	r4,180(sp)
  8062ec:	ac400043 	ldbu	r17,1(r21)
  8062f0:	10800017 	ldw	r2,0(r2)
  8062f4:	582b883a 	mov	r21,r11
  8062f8:	d8802915 	stw	r2,164(sp)
  8062fc:	20800104 	addi	r2,r4,4
  806300:	d9002917 	ldw	r4,164(sp)
  806304:	d8802d15 	stw	r2,180(sp)
  806308:	203e7a0e 	bge	r4,zero,805cf4 <__alt_mem_onchip_mem+0xff785cf4>
  80630c:	8c403fcc 	andi	r17,r17,255
  806310:	00bfffc4 	movi	r2,-1
  806314:	8c40201c 	xori	r17,r17,128
  806318:	d8802915 	stw	r2,164(sp)
  80631c:	8c7fe004 	addi	r17,r17,-128
  806320:	00380706 	br	804340 <__alt_mem_onchip_mem+0xff784340>
  806324:	d8c02917 	ldw	r3,164(sp)
  806328:	18c00084 	addi	r3,r3,2
  80632c:	d8c02e15 	stw	r3,184(sp)
  806330:	1805883a 	mov	r2,r3
  806334:	183d960e 	bge	r3,zero,805990 <__alt_mem_onchip_mem+0xff785990>
  806338:	003fd606 	br	806294 <__alt_mem_onchip_mem+0xff786294>
  80633c:	0005883a 	mov	r2,zero
  806340:	003f8e06 	br	80617c <__alt_mem_onchip_mem+0xff78617c>
  806344:	9080004c 	andi	r2,r18,1
  806348:	103f811e 	bne	r2,zero,806150 <__alt_mem_onchip_mem+0xff786150>
  80634c:	d8802117 	ldw	r2,132(sp)
  806350:	1405c83a 	sub	r2,r2,r16
  806354:	d8803315 	stw	r2,204(sp)
  806358:	b47ef326 	beq	r22,r17,805f28 <__alt_mem_onchip_mem+0xff785f28>
  80635c:	dd802617 	ldw	r22,152(sp)
  806360:	003f1106 	br	805fa8 <__alt_mem_onchip_mem+0xff785fa8>
  806364:	d9c02785 	stb	r7,158(sp)
  806368:	00390406 	br	80477c <__alt_mem_onchip_mem+0xff78477c>
  80636c:	d9c02785 	stb	r7,158(sp)
  806370:	0038d306 	br	8046c0 <__alt_mem_onchip_mem+0xff7846c0>
  806374:	d9c02785 	stb	r7,158(sp)
  806378:	003a6106 	br	804d00 <__alt_mem_onchip_mem+0xff784d00>
  80637c:	d9c02785 	stb	r7,158(sp)
  806380:	003af806 	br	804f64 <__alt_mem_onchip_mem+0xff784f64>
  806384:	0005883a 	mov	r2,zero
  806388:	003d7e06 	br	805984 <__alt_mem_onchip_mem+0xff785984>
  80638c:	d8802344 	addi	r2,sp,141
  806390:	003f1306 	br	805fe0 <__alt_mem_onchip_mem+0xff785fe0>
  806394:	d9c02785 	stb	r7,158(sp)
  806398:	00392306 	br	804828 <__alt_mem_onchip_mem+0xff784828>
  80639c:	d9c02785 	stb	r7,158(sp)
  8063a0:	003aa906 	br	804e48 <__alt_mem_onchip_mem+0xff784e48>
  8063a4:	d9c02785 	stb	r7,158(sp)
  8063a8:	003a3d06 	br	804ca0 <__alt_mem_onchip_mem+0xff784ca0>
  8063ac:	d9c02785 	stb	r7,158(sp)
  8063b0:	003aca06 	br	804edc <__alt_mem_onchip_mem+0xff784edc>

008063b4 <__vfprintf_internal>:
  8063b4:	00802074 	movhi	r2,129
  8063b8:	1097e104 	addi	r2,r2,24452
  8063bc:	300f883a 	mov	r7,r6
  8063c0:	280d883a 	mov	r6,r5
  8063c4:	200b883a 	mov	r5,r4
  8063c8:	11000017 	ldw	r4,0(r2)
  8063cc:	08041bc1 	jmpi	8041bc <___vfprintf_internal_r>

008063d0 <__sbprintf>:
  8063d0:	2880030b 	ldhu	r2,12(r5)
  8063d4:	2ac01917 	ldw	r11,100(r5)
  8063d8:	2a80038b 	ldhu	r10,14(r5)
  8063dc:	2a400717 	ldw	r9,28(r5)
  8063e0:	2a000917 	ldw	r8,36(r5)
  8063e4:	defee204 	addi	sp,sp,-1144
  8063e8:	00c10004 	movi	r3,1024
  8063ec:	dc011a15 	stw	r16,1128(sp)
  8063f0:	10bfff4c 	andi	r2,r2,65533
  8063f4:	2821883a 	mov	r16,r5
  8063f8:	d8cb883a 	add	r5,sp,r3
  8063fc:	dc811c15 	stw	r18,1136(sp)
  806400:	dc411b15 	stw	r17,1132(sp)
  806404:	dfc11d15 	stw	ra,1140(sp)
  806408:	2025883a 	mov	r18,r4
  80640c:	d881030d 	sth	r2,1036(sp)
  806410:	dac11915 	stw	r11,1124(sp)
  806414:	da81038d 	sth	r10,1038(sp)
  806418:	da410715 	stw	r9,1052(sp)
  80641c:	da010915 	stw	r8,1060(sp)
  806420:	dec10015 	stw	sp,1024(sp)
  806424:	dec10415 	stw	sp,1040(sp)
  806428:	d8c10215 	stw	r3,1032(sp)
  80642c:	d8c10515 	stw	r3,1044(sp)
  806430:	d8010615 	stw	zero,1048(sp)
  806434:	08041bc0 	call	8041bc <___vfprintf_internal_r>
  806438:	1023883a 	mov	r17,r2
  80643c:	10000416 	blt	r2,zero,806450 <__sbprintf+0x80>
  806440:	d9410004 	addi	r5,sp,1024
  806444:	9009883a 	mov	r4,r18
  806448:	080823c0 	call	80823c <_fflush_r>
  80644c:	10000d1e 	bne	r2,zero,806484 <__sbprintf+0xb4>
  806450:	d881030b 	ldhu	r2,1036(sp)
  806454:	1080100c 	andi	r2,r2,64
  806458:	10000326 	beq	r2,zero,806468 <__sbprintf+0x98>
  80645c:	8080030b 	ldhu	r2,12(r16)
  806460:	10801014 	ori	r2,r2,64
  806464:	8080030d 	sth	r2,12(r16)
  806468:	8805883a 	mov	r2,r17
  80646c:	dfc11d17 	ldw	ra,1140(sp)
  806470:	dc811c17 	ldw	r18,1136(sp)
  806474:	dc411b17 	ldw	r17,1132(sp)
  806478:	dc011a17 	ldw	r16,1128(sp)
  80647c:	dec11e04 	addi	sp,sp,1144
  806480:	f800283a 	ret
  806484:	047fffc4 	movi	r17,-1
  806488:	003ff106 	br	806450 <__alt_mem_onchip_mem+0xff786450>

0080648c <_write_r>:
  80648c:	defffd04 	addi	sp,sp,-12
  806490:	2805883a 	mov	r2,r5
  806494:	dc000015 	stw	r16,0(sp)
  806498:	04002074 	movhi	r16,129
  80649c:	dc400115 	stw	r17,4(sp)
  8064a0:	300b883a 	mov	r5,r6
  8064a4:	841f4204 	addi	r16,r16,32008
  8064a8:	2023883a 	mov	r17,r4
  8064ac:	380d883a 	mov	r6,r7
  8064b0:	1009883a 	mov	r4,r2
  8064b4:	dfc00215 	stw	ra,8(sp)
  8064b8:	80000015 	stw	zero,0(r16)
  8064bc:	08108040 	call	810804 <write>
  8064c0:	00ffffc4 	movi	r3,-1
  8064c4:	10c00526 	beq	r2,r3,8064dc <_write_r+0x50>
  8064c8:	dfc00217 	ldw	ra,8(sp)
  8064cc:	dc400117 	ldw	r17,4(sp)
  8064d0:	dc000017 	ldw	r16,0(sp)
  8064d4:	dec00304 	addi	sp,sp,12
  8064d8:	f800283a 	ret
  8064dc:	80c00017 	ldw	r3,0(r16)
  8064e0:	183ff926 	beq	r3,zero,8064c8 <__alt_mem_onchip_mem+0xff7864c8>
  8064e4:	88c00015 	stw	r3,0(r17)
  8064e8:	003ff706 	br	8064c8 <__alt_mem_onchip_mem+0xff7864c8>

008064ec <__swsetup_r>:
  8064ec:	00802074 	movhi	r2,129
  8064f0:	defffd04 	addi	sp,sp,-12
  8064f4:	1097e104 	addi	r2,r2,24452
  8064f8:	dc400115 	stw	r17,4(sp)
  8064fc:	2023883a 	mov	r17,r4
  806500:	11000017 	ldw	r4,0(r2)
  806504:	dc000015 	stw	r16,0(sp)
  806508:	dfc00215 	stw	ra,8(sp)
  80650c:	2821883a 	mov	r16,r5
  806510:	20000226 	beq	r4,zero,80651c <__swsetup_r+0x30>
  806514:	20800e17 	ldw	r2,56(r4)
  806518:	10003126 	beq	r2,zero,8065e0 <__swsetup_r+0xf4>
  80651c:	8080030b 	ldhu	r2,12(r16)
  806520:	10c0020c 	andi	r3,r2,8
  806524:	1009883a 	mov	r4,r2
  806528:	18000f26 	beq	r3,zero,806568 <__swsetup_r+0x7c>
  80652c:	80c00417 	ldw	r3,16(r16)
  806530:	18001526 	beq	r3,zero,806588 <__swsetup_r+0x9c>
  806534:	1100004c 	andi	r4,r2,1
  806538:	20001c1e 	bne	r4,zero,8065ac <__swsetup_r+0xc0>
  80653c:	1080008c 	andi	r2,r2,2
  806540:	1000291e 	bne	r2,zero,8065e8 <__swsetup_r+0xfc>
  806544:	80800517 	ldw	r2,20(r16)
  806548:	80800215 	stw	r2,8(r16)
  80654c:	18001c26 	beq	r3,zero,8065c0 <__swsetup_r+0xd4>
  806550:	0005883a 	mov	r2,zero
  806554:	dfc00217 	ldw	ra,8(sp)
  806558:	dc400117 	ldw	r17,4(sp)
  80655c:	dc000017 	ldw	r16,0(sp)
  806560:	dec00304 	addi	sp,sp,12
  806564:	f800283a 	ret
  806568:	2080040c 	andi	r2,r4,16
  80656c:	10002e26 	beq	r2,zero,806628 <__swsetup_r+0x13c>
  806570:	2080010c 	andi	r2,r4,4
  806574:	10001e1e 	bne	r2,zero,8065f0 <__swsetup_r+0x104>
  806578:	80c00417 	ldw	r3,16(r16)
  80657c:	20800214 	ori	r2,r4,8
  806580:	8080030d 	sth	r2,12(r16)
  806584:	183feb1e 	bne	r3,zero,806534 <__alt_mem_onchip_mem+0xff786534>
  806588:	1100a00c 	andi	r4,r2,640
  80658c:	01408004 	movi	r5,512
  806590:	217fe826 	beq	r4,r5,806534 <__alt_mem_onchip_mem+0xff786534>
  806594:	800b883a 	mov	r5,r16
  806598:	8809883a 	mov	r4,r17
  80659c:	0802d340 	call	802d34 <__smakebuf_r>
  8065a0:	8080030b 	ldhu	r2,12(r16)
  8065a4:	80c00417 	ldw	r3,16(r16)
  8065a8:	003fe206 	br	806534 <__alt_mem_onchip_mem+0xff786534>
  8065ac:	80800517 	ldw	r2,20(r16)
  8065b0:	80000215 	stw	zero,8(r16)
  8065b4:	0085c83a 	sub	r2,zero,r2
  8065b8:	80800615 	stw	r2,24(r16)
  8065bc:	183fe41e 	bne	r3,zero,806550 <__alt_mem_onchip_mem+0xff786550>
  8065c0:	80c0030b 	ldhu	r3,12(r16)
  8065c4:	0005883a 	mov	r2,zero
  8065c8:	1900200c 	andi	r4,r3,128
  8065cc:	203fe126 	beq	r4,zero,806554 <__alt_mem_onchip_mem+0xff786554>
  8065d0:	18c01014 	ori	r3,r3,64
  8065d4:	80c0030d 	sth	r3,12(r16)
  8065d8:	00bfffc4 	movi	r2,-1
  8065dc:	003fdd06 	br	806554 <__alt_mem_onchip_mem+0xff786554>
  8065e0:	08024280 	call	802428 <__sinit>
  8065e4:	003fcd06 	br	80651c <__alt_mem_onchip_mem+0xff78651c>
  8065e8:	0005883a 	mov	r2,zero
  8065ec:	003fd606 	br	806548 <__alt_mem_onchip_mem+0xff786548>
  8065f0:	81400c17 	ldw	r5,48(r16)
  8065f4:	28000626 	beq	r5,zero,806610 <__swsetup_r+0x124>
  8065f8:	80801004 	addi	r2,r16,64
  8065fc:	28800326 	beq	r5,r2,80660c <__swsetup_r+0x120>
  806600:	8809883a 	mov	r4,r17
  806604:	08084980 	call	808498 <_free_r>
  806608:	8100030b 	ldhu	r4,12(r16)
  80660c:	80000c15 	stw	zero,48(r16)
  806610:	80c00417 	ldw	r3,16(r16)
  806614:	00bff6c4 	movi	r2,-37
  806618:	1108703a 	and	r4,r2,r4
  80661c:	80000115 	stw	zero,4(r16)
  806620:	80c00015 	stw	r3,0(r16)
  806624:	003fd506 	br	80657c <__alt_mem_onchip_mem+0xff78657c>
  806628:	00800244 	movi	r2,9
  80662c:	88800015 	stw	r2,0(r17)
  806630:	20801014 	ori	r2,r4,64
  806634:	8080030d 	sth	r2,12(r16)
  806638:	00bfffc4 	movi	r2,-1
  80663c:	003fc506 	br	806554 <__alt_mem_onchip_mem+0xff786554>

00806640 <_close_r>:
  806640:	defffd04 	addi	sp,sp,-12
  806644:	dc000015 	stw	r16,0(sp)
  806648:	04002074 	movhi	r16,129
  80664c:	dc400115 	stw	r17,4(sp)
  806650:	841f4204 	addi	r16,r16,32008
  806654:	2023883a 	mov	r17,r4
  806658:	2809883a 	mov	r4,r5
  80665c:	dfc00215 	stw	ra,8(sp)
  806660:	80000015 	stw	zero,0(r16)
  806664:	080fa7c0 	call	80fa7c <close>
  806668:	00ffffc4 	movi	r3,-1
  80666c:	10c00526 	beq	r2,r3,806684 <_close_r+0x44>
  806670:	dfc00217 	ldw	ra,8(sp)
  806674:	dc400117 	ldw	r17,4(sp)
  806678:	dc000017 	ldw	r16,0(sp)
  80667c:	dec00304 	addi	sp,sp,12
  806680:	f800283a 	ret
  806684:	80c00017 	ldw	r3,0(r16)
  806688:	183ff926 	beq	r3,zero,806670 <__alt_mem_onchip_mem+0xff786670>
  80668c:	88c00015 	stw	r3,0(r17)
  806690:	003ff706 	br	806670 <__alt_mem_onchip_mem+0xff786670>

00806694 <quorem>:
  806694:	defff704 	addi	sp,sp,-36
  806698:	dc800215 	stw	r18,8(sp)
  80669c:	20800417 	ldw	r2,16(r4)
  8066a0:	2c800417 	ldw	r18,16(r5)
  8066a4:	dfc00815 	stw	ra,32(sp)
  8066a8:	ddc00715 	stw	r23,28(sp)
  8066ac:	dd800615 	stw	r22,24(sp)
  8066b0:	dd400515 	stw	r21,20(sp)
  8066b4:	dd000415 	stw	r20,16(sp)
  8066b8:	dcc00315 	stw	r19,12(sp)
  8066bc:	dc400115 	stw	r17,4(sp)
  8066c0:	dc000015 	stw	r16,0(sp)
  8066c4:	14807116 	blt	r2,r18,80688c <quorem+0x1f8>
  8066c8:	94bfffc4 	addi	r18,r18,-1
  8066cc:	94ad883a 	add	r22,r18,r18
  8066d0:	b5ad883a 	add	r22,r22,r22
  8066d4:	2c400504 	addi	r17,r5,20
  8066d8:	8da9883a 	add	r20,r17,r22
  8066dc:	25400504 	addi	r21,r4,20
  8066e0:	282f883a 	mov	r23,r5
  8066e4:	adad883a 	add	r22,r21,r22
  8066e8:	a1400017 	ldw	r5,0(r20)
  8066ec:	2021883a 	mov	r16,r4
  8066f0:	b1000017 	ldw	r4,0(r22)
  8066f4:	29400044 	addi	r5,r5,1
  8066f8:	080d1f00 	call	80d1f0 <__udivsi3>
  8066fc:	1027883a 	mov	r19,r2
  806700:	10002c26 	beq	r2,zero,8067b4 <quorem+0x120>
  806704:	a813883a 	mov	r9,r21
  806708:	880b883a 	mov	r5,r17
  80670c:	0009883a 	mov	r4,zero
  806710:	000d883a 	mov	r6,zero
  806714:	2a000017 	ldw	r8,0(r5)
  806718:	49c00017 	ldw	r7,0(r9)
  80671c:	29400104 	addi	r5,r5,4
  806720:	40bfffcc 	andi	r2,r8,65535
  806724:	14c5383a 	mul	r2,r2,r19
  806728:	4010d43a 	srli	r8,r8,16
  80672c:	38ffffcc 	andi	r3,r7,65535
  806730:	1105883a 	add	r2,r2,r4
  806734:	1008d43a 	srli	r4,r2,16
  806738:	44d1383a 	mul	r8,r8,r19
  80673c:	198d883a 	add	r6,r3,r6
  806740:	10ffffcc 	andi	r3,r2,65535
  806744:	30c7c83a 	sub	r3,r6,r3
  806748:	380ed43a 	srli	r7,r7,16
  80674c:	4105883a 	add	r2,r8,r4
  806750:	180dd43a 	srai	r6,r3,16
  806754:	113fffcc 	andi	r4,r2,65535
  806758:	390fc83a 	sub	r7,r7,r4
  80675c:	398d883a 	add	r6,r7,r6
  806760:	300e943a 	slli	r7,r6,16
  806764:	18ffffcc 	andi	r3,r3,65535
  806768:	1008d43a 	srli	r4,r2,16
  80676c:	38ceb03a 	or	r7,r7,r3
  806770:	49c00015 	stw	r7,0(r9)
  806774:	300dd43a 	srai	r6,r6,16
  806778:	4a400104 	addi	r9,r9,4
  80677c:	a17fe52e 	bgeu	r20,r5,806714 <__alt_mem_onchip_mem+0xff786714>
  806780:	b0800017 	ldw	r2,0(r22)
  806784:	10000b1e 	bne	r2,zero,8067b4 <quorem+0x120>
  806788:	b0bfff04 	addi	r2,r22,-4
  80678c:	a880082e 	bgeu	r21,r2,8067b0 <quorem+0x11c>
  806790:	b0ffff17 	ldw	r3,-4(r22)
  806794:	18000326 	beq	r3,zero,8067a4 <quorem+0x110>
  806798:	00000506 	br	8067b0 <quorem+0x11c>
  80679c:	10c00017 	ldw	r3,0(r2)
  8067a0:	1800031e 	bne	r3,zero,8067b0 <quorem+0x11c>
  8067a4:	10bfff04 	addi	r2,r2,-4
  8067a8:	94bfffc4 	addi	r18,r18,-1
  8067ac:	a8bffb36 	bltu	r21,r2,80679c <__alt_mem_onchip_mem+0xff78679c>
  8067b0:	84800415 	stw	r18,16(r16)
  8067b4:	b80b883a 	mov	r5,r23
  8067b8:	8009883a 	mov	r4,r16
  8067bc:	0809a440 	call	809a44 <__mcmp>
  8067c0:	10002616 	blt	r2,zero,80685c <quorem+0x1c8>
  8067c4:	9cc00044 	addi	r19,r19,1
  8067c8:	a805883a 	mov	r2,r21
  8067cc:	000b883a 	mov	r5,zero
  8067d0:	11000017 	ldw	r4,0(r2)
  8067d4:	89800017 	ldw	r6,0(r17)
  8067d8:	10800104 	addi	r2,r2,4
  8067dc:	20ffffcc 	andi	r3,r4,65535
  8067e0:	194b883a 	add	r5,r3,r5
  8067e4:	30ffffcc 	andi	r3,r6,65535
  8067e8:	28c7c83a 	sub	r3,r5,r3
  8067ec:	300cd43a 	srli	r6,r6,16
  8067f0:	2008d43a 	srli	r4,r4,16
  8067f4:	180bd43a 	srai	r5,r3,16
  8067f8:	18ffffcc 	andi	r3,r3,65535
  8067fc:	2189c83a 	sub	r4,r4,r6
  806800:	2149883a 	add	r4,r4,r5
  806804:	200c943a 	slli	r6,r4,16
  806808:	8c400104 	addi	r17,r17,4
  80680c:	200bd43a 	srai	r5,r4,16
  806810:	30c6b03a 	or	r3,r6,r3
  806814:	10ffff15 	stw	r3,-4(r2)
  806818:	a47fed2e 	bgeu	r20,r17,8067d0 <__alt_mem_onchip_mem+0xff7867d0>
  80681c:	9485883a 	add	r2,r18,r18
  806820:	1085883a 	add	r2,r2,r2
  806824:	a887883a 	add	r3,r21,r2
  806828:	18800017 	ldw	r2,0(r3)
  80682c:	10000b1e 	bne	r2,zero,80685c <quorem+0x1c8>
  806830:	18bfff04 	addi	r2,r3,-4
  806834:	a880082e 	bgeu	r21,r2,806858 <quorem+0x1c4>
  806838:	18ffff17 	ldw	r3,-4(r3)
  80683c:	18000326 	beq	r3,zero,80684c <quorem+0x1b8>
  806840:	00000506 	br	806858 <quorem+0x1c4>
  806844:	10c00017 	ldw	r3,0(r2)
  806848:	1800031e 	bne	r3,zero,806858 <quorem+0x1c4>
  80684c:	10bfff04 	addi	r2,r2,-4
  806850:	94bfffc4 	addi	r18,r18,-1
  806854:	a8bffb36 	bltu	r21,r2,806844 <__alt_mem_onchip_mem+0xff786844>
  806858:	84800415 	stw	r18,16(r16)
  80685c:	9805883a 	mov	r2,r19
  806860:	dfc00817 	ldw	ra,32(sp)
  806864:	ddc00717 	ldw	r23,28(sp)
  806868:	dd800617 	ldw	r22,24(sp)
  80686c:	dd400517 	ldw	r21,20(sp)
  806870:	dd000417 	ldw	r20,16(sp)
  806874:	dcc00317 	ldw	r19,12(sp)
  806878:	dc800217 	ldw	r18,8(sp)
  80687c:	dc400117 	ldw	r17,4(sp)
  806880:	dc000017 	ldw	r16,0(sp)
  806884:	dec00904 	addi	sp,sp,36
  806888:	f800283a 	ret
  80688c:	0005883a 	mov	r2,zero
  806890:	003ff306 	br	806860 <__alt_mem_onchip_mem+0xff786860>

00806894 <_dtoa_r>:
  806894:	20801017 	ldw	r2,64(r4)
  806898:	deffde04 	addi	sp,sp,-136
  80689c:	df002015 	stw	fp,128(sp)
  8068a0:	dcc01b15 	stw	r19,108(sp)
  8068a4:	dc801a15 	stw	r18,104(sp)
  8068a8:	dc401915 	stw	r17,100(sp)
  8068ac:	dc001815 	stw	r16,96(sp)
  8068b0:	dfc02115 	stw	ra,132(sp)
  8068b4:	ddc01f15 	stw	r23,124(sp)
  8068b8:	dd801e15 	stw	r22,120(sp)
  8068bc:	dd401d15 	stw	r21,116(sp)
  8068c0:	dd001c15 	stw	r20,112(sp)
  8068c4:	d9c00315 	stw	r7,12(sp)
  8068c8:	2039883a 	mov	fp,r4
  8068cc:	3023883a 	mov	r17,r6
  8068d0:	2825883a 	mov	r18,r5
  8068d4:	dc002417 	ldw	r16,144(sp)
  8068d8:	3027883a 	mov	r19,r6
  8068dc:	10000826 	beq	r2,zero,806900 <_dtoa_r+0x6c>
  8068e0:	21801117 	ldw	r6,68(r4)
  8068e4:	00c00044 	movi	r3,1
  8068e8:	100b883a 	mov	r5,r2
  8068ec:	1986983a 	sll	r3,r3,r6
  8068f0:	11800115 	stw	r6,4(r2)
  8068f4:	10c00215 	stw	r3,8(r2)
  8068f8:	08092240 	call	809224 <_Bfree>
  8068fc:	e0001015 	stw	zero,64(fp)
  806900:	88002e16 	blt	r17,zero,8069bc <_dtoa_r+0x128>
  806904:	80000015 	stw	zero,0(r16)
  806908:	889ffc2c 	andhi	r2,r17,32752
  80690c:	00dffc34 	movhi	r3,32752
  806910:	10c01c26 	beq	r2,r3,806984 <_dtoa_r+0xf0>
  806914:	000d883a 	mov	r6,zero
  806918:	000f883a 	mov	r7,zero
  80691c:	9009883a 	mov	r4,r18
  806920:	980b883a 	mov	r5,r19
  806924:	080e4400 	call	80e440 <__eqdf2>
  806928:	10002b1e 	bne	r2,zero,8069d8 <_dtoa_r+0x144>
  80692c:	d9c02317 	ldw	r7,140(sp)
  806930:	00800044 	movi	r2,1
  806934:	38800015 	stw	r2,0(r7)
  806938:	d8802517 	ldw	r2,148(sp)
  80693c:	10019e26 	beq	r2,zero,806fb8 <_dtoa_r+0x724>
  806940:	d8c02517 	ldw	r3,148(sp)
  806944:	00802074 	movhi	r2,129
  806948:	108f6144 	addi	r2,r2,15749
  80694c:	18800015 	stw	r2,0(r3)
  806950:	10bfffc4 	addi	r2,r2,-1
  806954:	dfc02117 	ldw	ra,132(sp)
  806958:	df002017 	ldw	fp,128(sp)
  80695c:	ddc01f17 	ldw	r23,124(sp)
  806960:	dd801e17 	ldw	r22,120(sp)
  806964:	dd401d17 	ldw	r21,116(sp)
  806968:	dd001c17 	ldw	r20,112(sp)
  80696c:	dcc01b17 	ldw	r19,108(sp)
  806970:	dc801a17 	ldw	r18,104(sp)
  806974:	dc401917 	ldw	r17,100(sp)
  806978:	dc001817 	ldw	r16,96(sp)
  80697c:	dec02204 	addi	sp,sp,136
  806980:	f800283a 	ret
  806984:	d8c02317 	ldw	r3,140(sp)
  806988:	0089c3c4 	movi	r2,9999
  80698c:	18800015 	stw	r2,0(r3)
  806990:	90017726 	beq	r18,zero,806f70 <_dtoa_r+0x6dc>
  806994:	00802074 	movhi	r2,129
  806998:	10900d04 	addi	r2,r2,16436
  80699c:	d9002517 	ldw	r4,148(sp)
  8069a0:	203fec26 	beq	r4,zero,806954 <__alt_mem_onchip_mem+0xff786954>
  8069a4:	10c000c7 	ldb	r3,3(r2)
  8069a8:	1801781e 	bne	r3,zero,806f8c <_dtoa_r+0x6f8>
  8069ac:	10c000c4 	addi	r3,r2,3
  8069b0:	d9802517 	ldw	r6,148(sp)
  8069b4:	30c00015 	stw	r3,0(r6)
  8069b8:	003fe606 	br	806954 <__alt_mem_onchip_mem+0xff786954>
  8069bc:	04e00034 	movhi	r19,32768
  8069c0:	9cffffc4 	addi	r19,r19,-1
  8069c4:	00800044 	movi	r2,1
  8069c8:	8ce6703a 	and	r19,r17,r19
  8069cc:	80800015 	stw	r2,0(r16)
  8069d0:	9823883a 	mov	r17,r19
  8069d4:	003fcc06 	br	806908 <__alt_mem_onchip_mem+0xff786908>
  8069d8:	d8800204 	addi	r2,sp,8
  8069dc:	d8800015 	stw	r2,0(sp)
  8069e0:	d9c00104 	addi	r7,sp,4
  8069e4:	900b883a 	mov	r5,r18
  8069e8:	980d883a 	mov	r6,r19
  8069ec:	e009883a 	mov	r4,fp
  8069f0:	8820d53a 	srli	r16,r17,20
  8069f4:	0809e100 	call	809e10 <__d2b>
  8069f8:	d8800915 	stw	r2,36(sp)
  8069fc:	8001651e 	bne	r16,zero,806f94 <_dtoa_r+0x700>
  806a00:	dd800217 	ldw	r22,8(sp)
  806a04:	dc000117 	ldw	r16,4(sp)
  806a08:	00800804 	movi	r2,32
  806a0c:	b421883a 	add	r16,r22,r16
  806a10:	80c10c84 	addi	r3,r16,1074
  806a14:	10c2d10e 	bge	r2,r3,80755c <_dtoa_r+0xcc8>
  806a18:	00801004 	movi	r2,64
  806a1c:	81010484 	addi	r4,r16,1042
  806a20:	10c7c83a 	sub	r3,r2,r3
  806a24:	9108d83a 	srl	r4,r18,r4
  806a28:	88e2983a 	sll	r17,r17,r3
  806a2c:	2448b03a 	or	r4,r4,r17
  806a30:	080f8080 	call	80f808 <__floatunsidf>
  806a34:	017f8434 	movhi	r5,65040
  806a38:	01800044 	movi	r6,1
  806a3c:	1009883a 	mov	r4,r2
  806a40:	194b883a 	add	r5,r3,r5
  806a44:	843fffc4 	addi	r16,r16,-1
  806a48:	d9801115 	stw	r6,68(sp)
  806a4c:	000d883a 	mov	r6,zero
  806a50:	01cffe34 	movhi	r7,16376
  806a54:	080edb00 	call	80edb0 <__subdf3>
  806a58:	0198dbf4 	movhi	r6,25455
  806a5c:	01cff4f4 	movhi	r7,16339
  806a60:	3190d844 	addi	r6,r6,17249
  806a64:	39e1e9c4 	addi	r7,r7,-30809
  806a68:	1009883a 	mov	r4,r2
  806a6c:	180b883a 	mov	r5,r3
  806a70:	080e6980 	call	80e698 <__muldf3>
  806a74:	01a2d874 	movhi	r6,35681
  806a78:	01cff1f4 	movhi	r7,16327
  806a7c:	31b22cc4 	addi	r6,r6,-14157
  806a80:	39e28a04 	addi	r7,r7,-30168
  806a84:	180b883a 	mov	r5,r3
  806a88:	1009883a 	mov	r4,r2
  806a8c:	080d2ac0 	call	80d2ac <__adddf3>
  806a90:	8009883a 	mov	r4,r16
  806a94:	1029883a 	mov	r20,r2
  806a98:	1823883a 	mov	r17,r3
  806a9c:	080f72c0 	call	80f72c <__floatsidf>
  806aa0:	019427f4 	movhi	r6,20639
  806aa4:	01cff4f4 	movhi	r7,16339
  806aa8:	319e7ec4 	addi	r6,r6,31227
  806aac:	39d104c4 	addi	r7,r7,17427
  806ab0:	1009883a 	mov	r4,r2
  806ab4:	180b883a 	mov	r5,r3
  806ab8:	080e6980 	call	80e698 <__muldf3>
  806abc:	100d883a 	mov	r6,r2
  806ac0:	180f883a 	mov	r7,r3
  806ac4:	a009883a 	mov	r4,r20
  806ac8:	880b883a 	mov	r5,r17
  806acc:	080d2ac0 	call	80d2ac <__adddf3>
  806ad0:	1009883a 	mov	r4,r2
  806ad4:	180b883a 	mov	r5,r3
  806ad8:	1029883a 	mov	r20,r2
  806adc:	1823883a 	mov	r17,r3
  806ae0:	080f6ac0 	call	80f6ac <__fixdfsi>
  806ae4:	000d883a 	mov	r6,zero
  806ae8:	000f883a 	mov	r7,zero
  806aec:	a009883a 	mov	r4,r20
  806af0:	880b883a 	mov	r5,r17
  806af4:	d8800515 	stw	r2,20(sp)
  806af8:	080e5a40 	call	80e5a4 <__ledf2>
  806afc:	10028716 	blt	r2,zero,80751c <_dtoa_r+0xc88>
  806b00:	d8c00517 	ldw	r3,20(sp)
  806b04:	00800584 	movi	r2,22
  806b08:	10c27536 	bltu	r2,r3,8074e0 <_dtoa_r+0xc4c>
  806b0c:	180490fa 	slli	r2,r3,3
  806b10:	00c02074 	movhi	r3,129
  806b14:	18d02804 	addi	r3,r3,16544
  806b18:	1885883a 	add	r2,r3,r2
  806b1c:	11000017 	ldw	r4,0(r2)
  806b20:	11400117 	ldw	r5,4(r2)
  806b24:	900d883a 	mov	r6,r18
  806b28:	980f883a 	mov	r7,r19
  806b2c:	080e4c80 	call	80e4c8 <__gedf2>
  806b30:	00828d0e 	bge	zero,r2,807568 <_dtoa_r+0xcd4>
  806b34:	d9000517 	ldw	r4,20(sp)
  806b38:	d8000e15 	stw	zero,56(sp)
  806b3c:	213fffc4 	addi	r4,r4,-1
  806b40:	d9000515 	stw	r4,20(sp)
  806b44:	b42dc83a 	sub	r22,r22,r16
  806b48:	b5bfffc4 	addi	r22,r22,-1
  806b4c:	b0026f16 	blt	r22,zero,80750c <_dtoa_r+0xc78>
  806b50:	d8000815 	stw	zero,32(sp)
  806b54:	d9c00517 	ldw	r7,20(sp)
  806b58:	38026416 	blt	r7,zero,8074ec <_dtoa_r+0xc58>
  806b5c:	b1ed883a 	add	r22,r22,r7
  806b60:	d9c00d15 	stw	r7,52(sp)
  806b64:	d8000a15 	stw	zero,40(sp)
  806b68:	d9800317 	ldw	r6,12(sp)
  806b6c:	00800244 	movi	r2,9
  806b70:	11811436 	bltu	r2,r6,806fc4 <_dtoa_r+0x730>
  806b74:	00800144 	movi	r2,5
  806b78:	1184e10e 	bge	r2,r6,807f00 <_dtoa_r+0x166c>
  806b7c:	31bfff04 	addi	r6,r6,-4
  806b80:	d9800315 	stw	r6,12(sp)
  806b84:	0023883a 	mov	r17,zero
  806b88:	d9800317 	ldw	r6,12(sp)
  806b8c:	008000c4 	movi	r2,3
  806b90:	30836726 	beq	r6,r2,807930 <_dtoa_r+0x109c>
  806b94:	1183410e 	bge	r2,r6,80789c <_dtoa_r+0x1008>
  806b98:	d9c00317 	ldw	r7,12(sp)
  806b9c:	00800104 	movi	r2,4
  806ba0:	38827c26 	beq	r7,r2,807594 <_dtoa_r+0xd00>
  806ba4:	00800144 	movi	r2,5
  806ba8:	3884c41e 	bne	r7,r2,807ebc <_dtoa_r+0x1628>
  806bac:	00800044 	movi	r2,1
  806bb0:	d8800b15 	stw	r2,44(sp)
  806bb4:	d8c00517 	ldw	r3,20(sp)
  806bb8:	d9002217 	ldw	r4,136(sp)
  806bbc:	1907883a 	add	r3,r3,r4
  806bc0:	19800044 	addi	r6,r3,1
  806bc4:	d8c00c15 	stw	r3,48(sp)
  806bc8:	d9800615 	stw	r6,24(sp)
  806bcc:	0183a40e 	bge	zero,r6,807a60 <_dtoa_r+0x11cc>
  806bd0:	d9800617 	ldw	r6,24(sp)
  806bd4:	3021883a 	mov	r16,r6
  806bd8:	e0001115 	stw	zero,68(fp)
  806bdc:	008005c4 	movi	r2,23
  806be0:	1184c92e 	bgeu	r2,r6,807f08 <_dtoa_r+0x1674>
  806be4:	00c00044 	movi	r3,1
  806be8:	00800104 	movi	r2,4
  806bec:	1085883a 	add	r2,r2,r2
  806bf0:	11000504 	addi	r4,r2,20
  806bf4:	180b883a 	mov	r5,r3
  806bf8:	18c00044 	addi	r3,r3,1
  806bfc:	313ffb2e 	bgeu	r6,r4,806bec <__alt_mem_onchip_mem+0xff786bec>
  806c00:	e1401115 	stw	r5,68(fp)
  806c04:	e009883a 	mov	r4,fp
  806c08:	080917c0 	call	80917c <_Balloc>
  806c0c:	d8800715 	stw	r2,28(sp)
  806c10:	e0801015 	stw	r2,64(fp)
  806c14:	00800384 	movi	r2,14
  806c18:	1400f736 	bltu	r2,r16,806ff8 <_dtoa_r+0x764>
  806c1c:	8800f626 	beq	r17,zero,806ff8 <_dtoa_r+0x764>
  806c20:	d9c00517 	ldw	r7,20(sp)
  806c24:	01c39a0e 	bge	zero,r7,807a90 <_dtoa_r+0x11fc>
  806c28:	388003cc 	andi	r2,r7,15
  806c2c:	100490fa 	slli	r2,r2,3
  806c30:	382bd13a 	srai	r21,r7,4
  806c34:	00c02074 	movhi	r3,129
  806c38:	18d02804 	addi	r3,r3,16544
  806c3c:	1885883a 	add	r2,r3,r2
  806c40:	a8c0040c 	andi	r3,r21,16
  806c44:	12400017 	ldw	r9,0(r2)
  806c48:	12000117 	ldw	r8,4(r2)
  806c4c:	18037926 	beq	r3,zero,807a34 <_dtoa_r+0x11a0>
  806c50:	00802074 	movhi	r2,129
  806c54:	10901e04 	addi	r2,r2,16504
  806c58:	11800817 	ldw	r6,32(r2)
  806c5c:	11c00917 	ldw	r7,36(r2)
  806c60:	9009883a 	mov	r4,r18
  806c64:	980b883a 	mov	r5,r19
  806c68:	da001715 	stw	r8,92(sp)
  806c6c:	da401615 	stw	r9,88(sp)
  806c70:	080db580 	call	80db58 <__divdf3>
  806c74:	da001717 	ldw	r8,92(sp)
  806c78:	da401617 	ldw	r9,88(sp)
  806c7c:	ad4003cc 	andi	r21,r21,15
  806c80:	040000c4 	movi	r16,3
  806c84:	1023883a 	mov	r17,r2
  806c88:	1829883a 	mov	r20,r3
  806c8c:	a8001126 	beq	r21,zero,806cd4 <_dtoa_r+0x440>
  806c90:	05c02074 	movhi	r23,129
  806c94:	bdd01e04 	addi	r23,r23,16504
  806c98:	4805883a 	mov	r2,r9
  806c9c:	4007883a 	mov	r3,r8
  806ca0:	a980004c 	andi	r6,r21,1
  806ca4:	1009883a 	mov	r4,r2
  806ca8:	a82bd07a 	srai	r21,r21,1
  806cac:	180b883a 	mov	r5,r3
  806cb0:	30000426 	beq	r6,zero,806cc4 <_dtoa_r+0x430>
  806cb4:	b9800017 	ldw	r6,0(r23)
  806cb8:	b9c00117 	ldw	r7,4(r23)
  806cbc:	84000044 	addi	r16,r16,1
  806cc0:	080e6980 	call	80e698 <__muldf3>
  806cc4:	bdc00204 	addi	r23,r23,8
  806cc8:	a83ff51e 	bne	r21,zero,806ca0 <__alt_mem_onchip_mem+0xff786ca0>
  806ccc:	1013883a 	mov	r9,r2
  806cd0:	1811883a 	mov	r8,r3
  806cd4:	480d883a 	mov	r6,r9
  806cd8:	400f883a 	mov	r7,r8
  806cdc:	8809883a 	mov	r4,r17
  806ce0:	a00b883a 	mov	r5,r20
  806ce4:	080db580 	call	80db58 <__divdf3>
  806ce8:	d8800f15 	stw	r2,60(sp)
  806cec:	d8c01015 	stw	r3,64(sp)
  806cf0:	d8c00e17 	ldw	r3,56(sp)
  806cf4:	18000626 	beq	r3,zero,806d10 <_dtoa_r+0x47c>
  806cf8:	d9000f17 	ldw	r4,60(sp)
  806cfc:	d9401017 	ldw	r5,64(sp)
  806d00:	000d883a 	mov	r6,zero
  806d04:	01cffc34 	movhi	r7,16368
  806d08:	080e5a40 	call	80e5a4 <__ledf2>
  806d0c:	10040b16 	blt	r2,zero,807d3c <_dtoa_r+0x14a8>
  806d10:	8009883a 	mov	r4,r16
  806d14:	080f72c0 	call	80f72c <__floatsidf>
  806d18:	d9800f17 	ldw	r6,60(sp)
  806d1c:	d9c01017 	ldw	r7,64(sp)
  806d20:	1009883a 	mov	r4,r2
  806d24:	180b883a 	mov	r5,r3
  806d28:	080e6980 	call	80e698 <__muldf3>
  806d2c:	000d883a 	mov	r6,zero
  806d30:	01d00734 	movhi	r7,16412
  806d34:	1009883a 	mov	r4,r2
  806d38:	180b883a 	mov	r5,r3
  806d3c:	080d2ac0 	call	80d2ac <__adddf3>
  806d40:	1021883a 	mov	r16,r2
  806d44:	d8800617 	ldw	r2,24(sp)
  806d48:	047f3034 	movhi	r17,64704
  806d4c:	1c63883a 	add	r17,r3,r17
  806d50:	10031826 	beq	r2,zero,8079b4 <_dtoa_r+0x1120>
  806d54:	d8c00517 	ldw	r3,20(sp)
  806d58:	db000617 	ldw	r12,24(sp)
  806d5c:	d8c01315 	stw	r3,76(sp)
  806d60:	d9000b17 	ldw	r4,44(sp)
  806d64:	20038f26 	beq	r4,zero,807ba4 <_dtoa_r+0x1310>
  806d68:	60bfffc4 	addi	r2,r12,-1
  806d6c:	100490fa 	slli	r2,r2,3
  806d70:	00c02074 	movhi	r3,129
  806d74:	18d02804 	addi	r3,r3,16544
  806d78:	1885883a 	add	r2,r3,r2
  806d7c:	11800017 	ldw	r6,0(r2)
  806d80:	11c00117 	ldw	r7,4(r2)
  806d84:	d8800717 	ldw	r2,28(sp)
  806d88:	0009883a 	mov	r4,zero
  806d8c:	014ff834 	movhi	r5,16352
  806d90:	db001615 	stw	r12,88(sp)
  806d94:	15c00044 	addi	r23,r2,1
  806d98:	080db580 	call	80db58 <__divdf3>
  806d9c:	800d883a 	mov	r6,r16
  806da0:	880f883a 	mov	r7,r17
  806da4:	1009883a 	mov	r4,r2
  806da8:	180b883a 	mov	r5,r3
  806dac:	080edb00 	call	80edb0 <__subdf3>
  806db0:	d9401017 	ldw	r5,64(sp)
  806db4:	d9000f17 	ldw	r4,60(sp)
  806db8:	102b883a 	mov	r21,r2
  806dbc:	d8c01215 	stw	r3,72(sp)
  806dc0:	080f6ac0 	call	80f6ac <__fixdfsi>
  806dc4:	1009883a 	mov	r4,r2
  806dc8:	1029883a 	mov	r20,r2
  806dcc:	080f72c0 	call	80f72c <__floatsidf>
  806dd0:	d9000f17 	ldw	r4,60(sp)
  806dd4:	d9401017 	ldw	r5,64(sp)
  806dd8:	100d883a 	mov	r6,r2
  806ddc:	180f883a 	mov	r7,r3
  806de0:	080edb00 	call	80edb0 <__subdf3>
  806de4:	1823883a 	mov	r17,r3
  806de8:	d8c00717 	ldw	r3,28(sp)
  806dec:	d9401217 	ldw	r5,72(sp)
  806df0:	a2000c04 	addi	r8,r20,48
  806df4:	1021883a 	mov	r16,r2
  806df8:	1a000005 	stb	r8,0(r3)
  806dfc:	800d883a 	mov	r6,r16
  806e00:	880f883a 	mov	r7,r17
  806e04:	a809883a 	mov	r4,r21
  806e08:	4029883a 	mov	r20,r8
  806e0c:	080e4c80 	call	80e4c8 <__gedf2>
  806e10:	00841d16 	blt	zero,r2,807e88 <_dtoa_r+0x15f4>
  806e14:	800d883a 	mov	r6,r16
  806e18:	880f883a 	mov	r7,r17
  806e1c:	0009883a 	mov	r4,zero
  806e20:	014ffc34 	movhi	r5,16368
  806e24:	080edb00 	call	80edb0 <__subdf3>
  806e28:	d9401217 	ldw	r5,72(sp)
  806e2c:	100d883a 	mov	r6,r2
  806e30:	180f883a 	mov	r7,r3
  806e34:	a809883a 	mov	r4,r21
  806e38:	080e4c80 	call	80e4c8 <__gedf2>
  806e3c:	db001617 	ldw	r12,88(sp)
  806e40:	00840e16 	blt	zero,r2,807e7c <_dtoa_r+0x15e8>
  806e44:	00800044 	movi	r2,1
  806e48:	13006b0e 	bge	r2,r12,806ff8 <_dtoa_r+0x764>
  806e4c:	d9000717 	ldw	r4,28(sp)
  806e50:	dd800f15 	stw	r22,60(sp)
  806e54:	dcc01015 	stw	r19,64(sp)
  806e58:	2319883a 	add	r12,r4,r12
  806e5c:	dcc01217 	ldw	r19,72(sp)
  806e60:	602d883a 	mov	r22,r12
  806e64:	dc801215 	stw	r18,72(sp)
  806e68:	b825883a 	mov	r18,r23
  806e6c:	00000906 	br	806e94 <_dtoa_r+0x600>
  806e70:	080edb00 	call	80edb0 <__subdf3>
  806e74:	a80d883a 	mov	r6,r21
  806e78:	980f883a 	mov	r7,r19
  806e7c:	1009883a 	mov	r4,r2
  806e80:	180b883a 	mov	r5,r3
  806e84:	080e5a40 	call	80e5a4 <__ledf2>
  806e88:	1003e816 	blt	r2,zero,807e2c <_dtoa_r+0x1598>
  806e8c:	b825883a 	mov	r18,r23
  806e90:	bd83e926 	beq	r23,r22,807e38 <_dtoa_r+0x15a4>
  806e94:	a809883a 	mov	r4,r21
  806e98:	980b883a 	mov	r5,r19
  806e9c:	000d883a 	mov	r6,zero
  806ea0:	01d00934 	movhi	r7,16420
  806ea4:	080e6980 	call	80e698 <__muldf3>
  806ea8:	000d883a 	mov	r6,zero
  806eac:	01d00934 	movhi	r7,16420
  806eb0:	8009883a 	mov	r4,r16
  806eb4:	880b883a 	mov	r5,r17
  806eb8:	102b883a 	mov	r21,r2
  806ebc:	1827883a 	mov	r19,r3
  806ec0:	080e6980 	call	80e698 <__muldf3>
  806ec4:	180b883a 	mov	r5,r3
  806ec8:	1009883a 	mov	r4,r2
  806ecc:	1821883a 	mov	r16,r3
  806ed0:	1023883a 	mov	r17,r2
  806ed4:	080f6ac0 	call	80f6ac <__fixdfsi>
  806ed8:	1009883a 	mov	r4,r2
  806edc:	1029883a 	mov	r20,r2
  806ee0:	080f72c0 	call	80f72c <__floatsidf>
  806ee4:	8809883a 	mov	r4,r17
  806ee8:	800b883a 	mov	r5,r16
  806eec:	100d883a 	mov	r6,r2
  806ef0:	180f883a 	mov	r7,r3
  806ef4:	080edb00 	call	80edb0 <__subdf3>
  806ef8:	a5000c04 	addi	r20,r20,48
  806efc:	a80d883a 	mov	r6,r21
  806f00:	980f883a 	mov	r7,r19
  806f04:	1009883a 	mov	r4,r2
  806f08:	180b883a 	mov	r5,r3
  806f0c:	95000005 	stb	r20,0(r18)
  806f10:	1021883a 	mov	r16,r2
  806f14:	1823883a 	mov	r17,r3
  806f18:	080e5a40 	call	80e5a4 <__ledf2>
  806f1c:	bdc00044 	addi	r23,r23,1
  806f20:	800d883a 	mov	r6,r16
  806f24:	880f883a 	mov	r7,r17
  806f28:	0009883a 	mov	r4,zero
  806f2c:	014ffc34 	movhi	r5,16368
  806f30:	103fcf0e 	bge	r2,zero,806e70 <__alt_mem_onchip_mem+0xff786e70>
  806f34:	d8c01317 	ldw	r3,76(sp)
  806f38:	d8c00515 	stw	r3,20(sp)
  806f3c:	d9400917 	ldw	r5,36(sp)
  806f40:	e009883a 	mov	r4,fp
  806f44:	08092240 	call	809224 <_Bfree>
  806f48:	d9000517 	ldw	r4,20(sp)
  806f4c:	d9802317 	ldw	r6,140(sp)
  806f50:	d9c02517 	ldw	r7,148(sp)
  806f54:	b8000005 	stb	zero,0(r23)
  806f58:	20800044 	addi	r2,r4,1
  806f5c:	30800015 	stw	r2,0(r6)
  806f60:	3802aa26 	beq	r7,zero,807a0c <_dtoa_r+0x1178>
  806f64:	3dc00015 	stw	r23,0(r7)
  806f68:	d8800717 	ldw	r2,28(sp)
  806f6c:	003e7906 	br	806954 <__alt_mem_onchip_mem+0xff786954>
  806f70:	00800434 	movhi	r2,16
  806f74:	10bfffc4 	addi	r2,r2,-1
  806f78:	88a2703a 	and	r17,r17,r2
  806f7c:	883e851e 	bne	r17,zero,806994 <__alt_mem_onchip_mem+0xff786994>
  806f80:	00802074 	movhi	r2,129
  806f84:	10900a04 	addi	r2,r2,16424
  806f88:	003e8406 	br	80699c <__alt_mem_onchip_mem+0xff78699c>
  806f8c:	10c00204 	addi	r3,r2,8
  806f90:	003e8706 	br	8069b0 <__alt_mem_onchip_mem+0xff7869b0>
  806f94:	01400434 	movhi	r5,16
  806f98:	297fffc4 	addi	r5,r5,-1
  806f9c:	994a703a 	and	r5,r19,r5
  806fa0:	9009883a 	mov	r4,r18
  806fa4:	843f0044 	addi	r16,r16,-1023
  806fa8:	294ffc34 	orhi	r5,r5,16368
  806fac:	dd800217 	ldw	r22,8(sp)
  806fb0:	d8001115 	stw	zero,68(sp)
  806fb4:	003ea506 	br	806a4c <__alt_mem_onchip_mem+0xff786a4c>
  806fb8:	00802074 	movhi	r2,129
  806fbc:	108f6104 	addi	r2,r2,15748
  806fc0:	003e6406 	br	806954 <__alt_mem_onchip_mem+0xff786954>
  806fc4:	e0001115 	stw	zero,68(fp)
  806fc8:	000b883a 	mov	r5,zero
  806fcc:	e009883a 	mov	r4,fp
  806fd0:	080917c0 	call	80917c <_Balloc>
  806fd4:	01bfffc4 	movi	r6,-1
  806fd8:	01c00044 	movi	r7,1
  806fdc:	d8800715 	stw	r2,28(sp)
  806fe0:	d9800c15 	stw	r6,48(sp)
  806fe4:	e0801015 	stw	r2,64(fp)
  806fe8:	d8000315 	stw	zero,12(sp)
  806fec:	d9c00b15 	stw	r7,44(sp)
  806ff0:	d9800615 	stw	r6,24(sp)
  806ff4:	d8002215 	stw	zero,136(sp)
  806ff8:	d8800117 	ldw	r2,4(sp)
  806ffc:	10008916 	blt	r2,zero,807224 <_dtoa_r+0x990>
  807000:	d9000517 	ldw	r4,20(sp)
  807004:	00c00384 	movi	r3,14
  807008:	19008616 	blt	r3,r4,807224 <_dtoa_r+0x990>
  80700c:	200490fa 	slli	r2,r4,3
  807010:	00c02074 	movhi	r3,129
  807014:	d9802217 	ldw	r6,136(sp)
  807018:	18d02804 	addi	r3,r3,16544
  80701c:	1885883a 	add	r2,r3,r2
  807020:	14000017 	ldw	r16,0(r2)
  807024:	14400117 	ldw	r17,4(r2)
  807028:	30016316 	blt	r6,zero,8075b8 <_dtoa_r+0xd24>
  80702c:	800d883a 	mov	r6,r16
  807030:	880f883a 	mov	r7,r17
  807034:	9009883a 	mov	r4,r18
  807038:	980b883a 	mov	r5,r19
  80703c:	080db580 	call	80db58 <__divdf3>
  807040:	180b883a 	mov	r5,r3
  807044:	1009883a 	mov	r4,r2
  807048:	080f6ac0 	call	80f6ac <__fixdfsi>
  80704c:	1009883a 	mov	r4,r2
  807050:	102b883a 	mov	r21,r2
  807054:	080f72c0 	call	80f72c <__floatsidf>
  807058:	800d883a 	mov	r6,r16
  80705c:	880f883a 	mov	r7,r17
  807060:	1009883a 	mov	r4,r2
  807064:	180b883a 	mov	r5,r3
  807068:	080e6980 	call	80e698 <__muldf3>
  80706c:	100d883a 	mov	r6,r2
  807070:	180f883a 	mov	r7,r3
  807074:	9009883a 	mov	r4,r18
  807078:	980b883a 	mov	r5,r19
  80707c:	080edb00 	call	80edb0 <__subdf3>
  807080:	d9c00717 	ldw	r7,28(sp)
  807084:	1009883a 	mov	r4,r2
  807088:	a8800c04 	addi	r2,r21,48
  80708c:	38800005 	stb	r2,0(r7)
  807090:	3dc00044 	addi	r23,r7,1
  807094:	d9c00617 	ldw	r7,24(sp)
  807098:	01800044 	movi	r6,1
  80709c:	180b883a 	mov	r5,r3
  8070a0:	2005883a 	mov	r2,r4
  8070a4:	39803826 	beq	r7,r6,807188 <_dtoa_r+0x8f4>
  8070a8:	000d883a 	mov	r6,zero
  8070ac:	01d00934 	movhi	r7,16420
  8070b0:	080e6980 	call	80e698 <__muldf3>
  8070b4:	000d883a 	mov	r6,zero
  8070b8:	000f883a 	mov	r7,zero
  8070bc:	1009883a 	mov	r4,r2
  8070c0:	180b883a 	mov	r5,r3
  8070c4:	1025883a 	mov	r18,r2
  8070c8:	1827883a 	mov	r19,r3
  8070cc:	080e4400 	call	80e440 <__eqdf2>
  8070d0:	103f9a26 	beq	r2,zero,806f3c <__alt_mem_onchip_mem+0xff786f3c>
  8070d4:	d9c00617 	ldw	r7,24(sp)
  8070d8:	d8c00717 	ldw	r3,28(sp)
  8070dc:	b829883a 	mov	r20,r23
  8070e0:	38bfffc4 	addi	r2,r7,-1
  8070e4:	18ad883a 	add	r22,r3,r2
  8070e8:	00000a06 	br	807114 <_dtoa_r+0x880>
  8070ec:	080e6980 	call	80e698 <__muldf3>
  8070f0:	000d883a 	mov	r6,zero
  8070f4:	000f883a 	mov	r7,zero
  8070f8:	1009883a 	mov	r4,r2
  8070fc:	180b883a 	mov	r5,r3
  807100:	1025883a 	mov	r18,r2
  807104:	1827883a 	mov	r19,r3
  807108:	b829883a 	mov	r20,r23
  80710c:	080e4400 	call	80e440 <__eqdf2>
  807110:	103f8a26 	beq	r2,zero,806f3c <__alt_mem_onchip_mem+0xff786f3c>
  807114:	800d883a 	mov	r6,r16
  807118:	880f883a 	mov	r7,r17
  80711c:	9009883a 	mov	r4,r18
  807120:	980b883a 	mov	r5,r19
  807124:	080db580 	call	80db58 <__divdf3>
  807128:	180b883a 	mov	r5,r3
  80712c:	1009883a 	mov	r4,r2
  807130:	080f6ac0 	call	80f6ac <__fixdfsi>
  807134:	1009883a 	mov	r4,r2
  807138:	102b883a 	mov	r21,r2
  80713c:	080f72c0 	call	80f72c <__floatsidf>
  807140:	800d883a 	mov	r6,r16
  807144:	880f883a 	mov	r7,r17
  807148:	1009883a 	mov	r4,r2
  80714c:	180b883a 	mov	r5,r3
  807150:	080e6980 	call	80e698 <__muldf3>
  807154:	100d883a 	mov	r6,r2
  807158:	180f883a 	mov	r7,r3
  80715c:	9009883a 	mov	r4,r18
  807160:	980b883a 	mov	r5,r19
  807164:	080edb00 	call	80edb0 <__subdf3>
  807168:	aa000c04 	addi	r8,r21,48
  80716c:	a2000005 	stb	r8,0(r20)
  807170:	000d883a 	mov	r6,zero
  807174:	01d00934 	movhi	r7,16420
  807178:	1009883a 	mov	r4,r2
  80717c:	180b883a 	mov	r5,r3
  807180:	a5c00044 	addi	r23,r20,1
  807184:	b53fd91e 	bne	r22,r20,8070ec <__alt_mem_onchip_mem+0xff7870ec>
  807188:	100d883a 	mov	r6,r2
  80718c:	180f883a 	mov	r7,r3
  807190:	1009883a 	mov	r4,r2
  807194:	180b883a 	mov	r5,r3
  807198:	080d2ac0 	call	80d2ac <__adddf3>
  80719c:	100d883a 	mov	r6,r2
  8071a0:	180f883a 	mov	r7,r3
  8071a4:	8009883a 	mov	r4,r16
  8071a8:	880b883a 	mov	r5,r17
  8071ac:	1027883a 	mov	r19,r2
  8071b0:	1825883a 	mov	r18,r3
  8071b4:	080e5a40 	call	80e5a4 <__ledf2>
  8071b8:	10000816 	blt	r2,zero,8071dc <_dtoa_r+0x948>
  8071bc:	980d883a 	mov	r6,r19
  8071c0:	900f883a 	mov	r7,r18
  8071c4:	8009883a 	mov	r4,r16
  8071c8:	880b883a 	mov	r5,r17
  8071cc:	080e4400 	call	80e440 <__eqdf2>
  8071d0:	103f5a1e 	bne	r2,zero,806f3c <__alt_mem_onchip_mem+0xff786f3c>
  8071d4:	ad40004c 	andi	r21,r21,1
  8071d8:	a83f5826 	beq	r21,zero,806f3c <__alt_mem_onchip_mem+0xff786f3c>
  8071dc:	bd3fffc3 	ldbu	r20,-1(r23)
  8071e0:	b8bfffc4 	addi	r2,r23,-1
  8071e4:	1007883a 	mov	r3,r2
  8071e8:	01400e44 	movi	r5,57
  8071ec:	d9800717 	ldw	r6,28(sp)
  8071f0:	00000506 	br	807208 <_dtoa_r+0x974>
  8071f4:	18ffffc4 	addi	r3,r3,-1
  8071f8:	11824726 	beq	r2,r6,807b18 <_dtoa_r+0x1284>
  8071fc:	1d000003 	ldbu	r20,0(r3)
  807200:	102f883a 	mov	r23,r2
  807204:	10bfffc4 	addi	r2,r2,-1
  807208:	a1003fcc 	andi	r4,r20,255
  80720c:	2100201c 	xori	r4,r4,128
  807210:	213fe004 	addi	r4,r4,-128
  807214:	217ff726 	beq	r4,r5,8071f4 <__alt_mem_onchip_mem+0xff7871f4>
  807218:	a2000044 	addi	r8,r20,1
  80721c:	12000005 	stb	r8,0(r2)
  807220:	003f4606 	br	806f3c <__alt_mem_onchip_mem+0xff786f3c>
  807224:	d9000b17 	ldw	r4,44(sp)
  807228:	2000c826 	beq	r4,zero,80754c <_dtoa_r+0xcb8>
  80722c:	d9800317 	ldw	r6,12(sp)
  807230:	00c00044 	movi	r3,1
  807234:	1980f90e 	bge	r3,r6,80761c <_dtoa_r+0xd88>
  807238:	d8800617 	ldw	r2,24(sp)
  80723c:	d8c00a17 	ldw	r3,40(sp)
  807240:	157fffc4 	addi	r21,r2,-1
  807244:	1d41f316 	blt	r3,r21,807a14 <_dtoa_r+0x1180>
  807248:	1d6bc83a 	sub	r21,r3,r21
  80724c:	d9c00617 	ldw	r7,24(sp)
  807250:	3802aa16 	blt	r7,zero,807cfc <_dtoa_r+0x1468>
  807254:	dd000817 	ldw	r20,32(sp)
  807258:	d8800617 	ldw	r2,24(sp)
  80725c:	d8c00817 	ldw	r3,32(sp)
  807260:	01400044 	movi	r5,1
  807264:	e009883a 	mov	r4,fp
  807268:	1887883a 	add	r3,r3,r2
  80726c:	d8c00815 	stw	r3,32(sp)
  807270:	b0ad883a 	add	r22,r22,r2
  807274:	08095880 	call	809588 <__i2b>
  807278:	1023883a 	mov	r17,r2
  80727c:	a0000826 	beq	r20,zero,8072a0 <_dtoa_r+0xa0c>
  807280:	0580070e 	bge	zero,r22,8072a0 <_dtoa_r+0xa0c>
  807284:	a005883a 	mov	r2,r20
  807288:	b500b916 	blt	r22,r20,807570 <_dtoa_r+0xcdc>
  80728c:	d9000817 	ldw	r4,32(sp)
  807290:	a0a9c83a 	sub	r20,r20,r2
  807294:	b0adc83a 	sub	r22,r22,r2
  807298:	2089c83a 	sub	r4,r4,r2
  80729c:	d9000815 	stw	r4,32(sp)
  8072a0:	d9800a17 	ldw	r6,40(sp)
  8072a4:	0181810e 	bge	zero,r6,8078ac <_dtoa_r+0x1018>
  8072a8:	d9c00b17 	ldw	r7,44(sp)
  8072ac:	3800b326 	beq	r7,zero,80757c <_dtoa_r+0xce8>
  8072b0:	a800b226 	beq	r21,zero,80757c <_dtoa_r+0xce8>
  8072b4:	880b883a 	mov	r5,r17
  8072b8:	a80d883a 	mov	r6,r21
  8072bc:	e009883a 	mov	r4,fp
  8072c0:	08097bc0 	call	8097bc <__pow5mult>
  8072c4:	d9800917 	ldw	r6,36(sp)
  8072c8:	100b883a 	mov	r5,r2
  8072cc:	e009883a 	mov	r4,fp
  8072d0:	1023883a 	mov	r17,r2
  8072d4:	08095c40 	call	8095c4 <__multiply>
  8072d8:	1021883a 	mov	r16,r2
  8072dc:	d8800a17 	ldw	r2,40(sp)
  8072e0:	d9400917 	ldw	r5,36(sp)
  8072e4:	e009883a 	mov	r4,fp
  8072e8:	1545c83a 	sub	r2,r2,r21
  8072ec:	d8800a15 	stw	r2,40(sp)
  8072f0:	08092240 	call	809224 <_Bfree>
  8072f4:	d8c00a17 	ldw	r3,40(sp)
  8072f8:	18009f1e 	bne	r3,zero,807578 <_dtoa_r+0xce4>
  8072fc:	05c00044 	movi	r23,1
  807300:	e009883a 	mov	r4,fp
  807304:	b80b883a 	mov	r5,r23
  807308:	08095880 	call	809588 <__i2b>
  80730c:	d9000d17 	ldw	r4,52(sp)
  807310:	102b883a 	mov	r21,r2
  807314:	2000ce26 	beq	r4,zero,807650 <_dtoa_r+0xdbc>
  807318:	200d883a 	mov	r6,r4
  80731c:	100b883a 	mov	r5,r2
  807320:	e009883a 	mov	r4,fp
  807324:	08097bc0 	call	8097bc <__pow5mult>
  807328:	d9800317 	ldw	r6,12(sp)
  80732c:	102b883a 	mov	r21,r2
  807330:	b981810e 	bge	r23,r6,807938 <_dtoa_r+0x10a4>
  807334:	0027883a 	mov	r19,zero
  807338:	a8800417 	ldw	r2,16(r21)
  80733c:	05c00804 	movi	r23,32
  807340:	10800104 	addi	r2,r2,4
  807344:	1085883a 	add	r2,r2,r2
  807348:	1085883a 	add	r2,r2,r2
  80734c:	a885883a 	add	r2,r21,r2
  807350:	11000017 	ldw	r4,0(r2)
  807354:	08094700 	call	809470 <__hi0bits>
  807358:	b885c83a 	sub	r2,r23,r2
  80735c:	1585883a 	add	r2,r2,r22
  807360:	108007cc 	andi	r2,r2,31
  807364:	1000b326 	beq	r2,zero,807634 <_dtoa_r+0xda0>
  807368:	00c00804 	movi	r3,32
  80736c:	1887c83a 	sub	r3,r3,r2
  807370:	01000104 	movi	r4,4
  807374:	20c2cd0e 	bge	r4,r3,807eac <_dtoa_r+0x1618>
  807378:	00c00704 	movi	r3,28
  80737c:	1885c83a 	sub	r2,r3,r2
  807380:	d8c00817 	ldw	r3,32(sp)
  807384:	a0a9883a 	add	r20,r20,r2
  807388:	b0ad883a 	add	r22,r22,r2
  80738c:	1887883a 	add	r3,r3,r2
  807390:	d8c00815 	stw	r3,32(sp)
  807394:	d9800817 	ldw	r6,32(sp)
  807398:	0180040e 	bge	zero,r6,8073ac <_dtoa_r+0xb18>
  80739c:	800b883a 	mov	r5,r16
  8073a0:	e009883a 	mov	r4,fp
  8073a4:	08098fc0 	call	8098fc <__lshift>
  8073a8:	1021883a 	mov	r16,r2
  8073ac:	0580050e 	bge	zero,r22,8073c4 <_dtoa_r+0xb30>
  8073b0:	a80b883a 	mov	r5,r21
  8073b4:	b00d883a 	mov	r6,r22
  8073b8:	e009883a 	mov	r4,fp
  8073bc:	08098fc0 	call	8098fc <__lshift>
  8073c0:	102b883a 	mov	r21,r2
  8073c4:	d9c00e17 	ldw	r7,56(sp)
  8073c8:	3801211e 	bne	r7,zero,807850 <_dtoa_r+0xfbc>
  8073cc:	d9800617 	ldw	r6,24(sp)
  8073d0:	0181380e 	bge	zero,r6,8078b4 <_dtoa_r+0x1020>
  8073d4:	d8c00b17 	ldw	r3,44(sp)
  8073d8:	1800ab1e 	bne	r3,zero,807688 <_dtoa_r+0xdf4>
  8073dc:	dc800717 	ldw	r18,28(sp)
  8073e0:	dcc00617 	ldw	r19,24(sp)
  8073e4:	9029883a 	mov	r20,r18
  8073e8:	00000206 	br	8073f4 <_dtoa_r+0xb60>
  8073ec:	080924c0 	call	80924c <__multadd>
  8073f0:	1021883a 	mov	r16,r2
  8073f4:	a80b883a 	mov	r5,r21
  8073f8:	8009883a 	mov	r4,r16
  8073fc:	08066940 	call	806694 <quorem>
  807400:	10800c04 	addi	r2,r2,48
  807404:	90800005 	stb	r2,0(r18)
  807408:	94800044 	addi	r18,r18,1
  80740c:	9507c83a 	sub	r3,r18,r20
  807410:	000f883a 	mov	r7,zero
  807414:	01800284 	movi	r6,10
  807418:	800b883a 	mov	r5,r16
  80741c:	e009883a 	mov	r4,fp
  807420:	1cfff216 	blt	r3,r19,8073ec <__alt_mem_onchip_mem+0xff7873ec>
  807424:	1011883a 	mov	r8,r2
  807428:	d8800617 	ldw	r2,24(sp)
  80742c:	0082370e 	bge	zero,r2,807d0c <_dtoa_r+0x1478>
  807430:	d9000717 	ldw	r4,28(sp)
  807434:	0025883a 	mov	r18,zero
  807438:	20af883a 	add	r23,r4,r2
  80743c:	01800044 	movi	r6,1
  807440:	800b883a 	mov	r5,r16
  807444:	e009883a 	mov	r4,fp
  807448:	da001715 	stw	r8,92(sp)
  80744c:	08098fc0 	call	8098fc <__lshift>
  807450:	a80b883a 	mov	r5,r21
  807454:	1009883a 	mov	r4,r2
  807458:	d8800915 	stw	r2,36(sp)
  80745c:	0809a440 	call	809a44 <__mcmp>
  807460:	da001717 	ldw	r8,92(sp)
  807464:	0081800e 	bge	zero,r2,807a68 <_dtoa_r+0x11d4>
  807468:	b93fffc3 	ldbu	r4,-1(r23)
  80746c:	b8bfffc4 	addi	r2,r23,-1
  807470:	1007883a 	mov	r3,r2
  807474:	01800e44 	movi	r6,57
  807478:	d9c00717 	ldw	r7,28(sp)
  80747c:	00000506 	br	807494 <_dtoa_r+0xc00>
  807480:	18ffffc4 	addi	r3,r3,-1
  807484:	11c12326 	beq	r2,r7,807914 <_dtoa_r+0x1080>
  807488:	19000003 	ldbu	r4,0(r3)
  80748c:	102f883a 	mov	r23,r2
  807490:	10bfffc4 	addi	r2,r2,-1
  807494:	21403fcc 	andi	r5,r4,255
  807498:	2940201c 	xori	r5,r5,128
  80749c:	297fe004 	addi	r5,r5,-128
  8074a0:	29bff726 	beq	r5,r6,807480 <__alt_mem_onchip_mem+0xff787480>
  8074a4:	21000044 	addi	r4,r4,1
  8074a8:	11000005 	stb	r4,0(r2)
  8074ac:	a80b883a 	mov	r5,r21
  8074b0:	e009883a 	mov	r4,fp
  8074b4:	08092240 	call	809224 <_Bfree>
  8074b8:	883ea026 	beq	r17,zero,806f3c <__alt_mem_onchip_mem+0xff786f3c>
  8074bc:	90000426 	beq	r18,zero,8074d0 <_dtoa_r+0xc3c>
  8074c0:	94400326 	beq	r18,r17,8074d0 <_dtoa_r+0xc3c>
  8074c4:	900b883a 	mov	r5,r18
  8074c8:	e009883a 	mov	r4,fp
  8074cc:	08092240 	call	809224 <_Bfree>
  8074d0:	880b883a 	mov	r5,r17
  8074d4:	e009883a 	mov	r4,fp
  8074d8:	08092240 	call	809224 <_Bfree>
  8074dc:	003e9706 	br	806f3c <__alt_mem_onchip_mem+0xff786f3c>
  8074e0:	01800044 	movi	r6,1
  8074e4:	d9800e15 	stw	r6,56(sp)
  8074e8:	003d9606 	br	806b44 <__alt_mem_onchip_mem+0xff786b44>
  8074ec:	d8800817 	ldw	r2,32(sp)
  8074f0:	d8c00517 	ldw	r3,20(sp)
  8074f4:	d8000d15 	stw	zero,52(sp)
  8074f8:	10c5c83a 	sub	r2,r2,r3
  8074fc:	00c9c83a 	sub	r4,zero,r3
  807500:	d8800815 	stw	r2,32(sp)
  807504:	d9000a15 	stw	r4,40(sp)
  807508:	003d9706 	br	806b68 <__alt_mem_onchip_mem+0xff786b68>
  80750c:	05adc83a 	sub	r22,zero,r22
  807510:	dd800815 	stw	r22,32(sp)
  807514:	002d883a 	mov	r22,zero
  807518:	003d8e06 	br	806b54 <__alt_mem_onchip_mem+0xff786b54>
  80751c:	d9000517 	ldw	r4,20(sp)
  807520:	080f72c0 	call	80f72c <__floatsidf>
  807524:	100d883a 	mov	r6,r2
  807528:	180f883a 	mov	r7,r3
  80752c:	a009883a 	mov	r4,r20
  807530:	880b883a 	mov	r5,r17
  807534:	080e4400 	call	80e440 <__eqdf2>
  807538:	103d7126 	beq	r2,zero,806b00 <__alt_mem_onchip_mem+0xff786b00>
  80753c:	d9c00517 	ldw	r7,20(sp)
  807540:	39ffffc4 	addi	r7,r7,-1
  807544:	d9c00515 	stw	r7,20(sp)
  807548:	003d6d06 	br	806b00 <__alt_mem_onchip_mem+0xff786b00>
  80754c:	dd400a17 	ldw	r21,40(sp)
  807550:	dd000817 	ldw	r20,32(sp)
  807554:	0023883a 	mov	r17,zero
  807558:	003f4806 	br	80727c <__alt_mem_onchip_mem+0xff78727c>
  80755c:	10e3c83a 	sub	r17,r2,r3
  807560:	9448983a 	sll	r4,r18,r17
  807564:	003d3206 	br	806a30 <__alt_mem_onchip_mem+0xff786a30>
  807568:	d8000e15 	stw	zero,56(sp)
  80756c:	003d7506 	br	806b44 <__alt_mem_onchip_mem+0xff786b44>
  807570:	b005883a 	mov	r2,r22
  807574:	003f4506 	br	80728c <__alt_mem_onchip_mem+0xff78728c>
  807578:	dc000915 	stw	r16,36(sp)
  80757c:	d9800a17 	ldw	r6,40(sp)
  807580:	d9400917 	ldw	r5,36(sp)
  807584:	e009883a 	mov	r4,fp
  807588:	08097bc0 	call	8097bc <__pow5mult>
  80758c:	1021883a 	mov	r16,r2
  807590:	003f5a06 	br	8072fc <__alt_mem_onchip_mem+0xff7872fc>
  807594:	01c00044 	movi	r7,1
  807598:	d9c00b15 	stw	r7,44(sp)
  80759c:	d8802217 	ldw	r2,136(sp)
  8075a0:	0081280e 	bge	zero,r2,807a44 <_dtoa_r+0x11b0>
  8075a4:	100d883a 	mov	r6,r2
  8075a8:	1021883a 	mov	r16,r2
  8075ac:	d8800c15 	stw	r2,48(sp)
  8075b0:	d8800615 	stw	r2,24(sp)
  8075b4:	003d8806 	br	806bd8 <__alt_mem_onchip_mem+0xff786bd8>
  8075b8:	d8800617 	ldw	r2,24(sp)
  8075bc:	00be9b16 	blt	zero,r2,80702c <__alt_mem_onchip_mem+0xff78702c>
  8075c0:	10010f1e 	bne	r2,zero,807a00 <_dtoa_r+0x116c>
  8075c4:	880b883a 	mov	r5,r17
  8075c8:	000d883a 	mov	r6,zero
  8075cc:	01d00534 	movhi	r7,16404
  8075d0:	8009883a 	mov	r4,r16
  8075d4:	080e6980 	call	80e698 <__muldf3>
  8075d8:	900d883a 	mov	r6,r18
  8075dc:	980f883a 	mov	r7,r19
  8075e0:	1009883a 	mov	r4,r2
  8075e4:	180b883a 	mov	r5,r3
  8075e8:	080e4c80 	call	80e4c8 <__gedf2>
  8075ec:	002b883a 	mov	r21,zero
  8075f0:	0023883a 	mov	r17,zero
  8075f4:	1000bf16 	blt	r2,zero,8078f4 <_dtoa_r+0x1060>
  8075f8:	d9802217 	ldw	r6,136(sp)
  8075fc:	ddc00717 	ldw	r23,28(sp)
  807600:	018c303a 	nor	r6,zero,r6
  807604:	d9800515 	stw	r6,20(sp)
  807608:	a80b883a 	mov	r5,r21
  80760c:	e009883a 	mov	r4,fp
  807610:	08092240 	call	809224 <_Bfree>
  807614:	883e4926 	beq	r17,zero,806f3c <__alt_mem_onchip_mem+0xff786f3c>
  807618:	003fad06 	br	8074d0 <__alt_mem_onchip_mem+0xff7874d0>
  80761c:	d9c01117 	ldw	r7,68(sp)
  807620:	3801bc26 	beq	r7,zero,807d14 <_dtoa_r+0x1480>
  807624:	10810cc4 	addi	r2,r2,1075
  807628:	dd400a17 	ldw	r21,40(sp)
  80762c:	dd000817 	ldw	r20,32(sp)
  807630:	003f0a06 	br	80725c <__alt_mem_onchip_mem+0xff78725c>
  807634:	00800704 	movi	r2,28
  807638:	d9000817 	ldw	r4,32(sp)
  80763c:	a0a9883a 	add	r20,r20,r2
  807640:	b0ad883a 	add	r22,r22,r2
  807644:	2089883a 	add	r4,r4,r2
  807648:	d9000815 	stw	r4,32(sp)
  80764c:	003f5106 	br	807394 <__alt_mem_onchip_mem+0xff787394>
  807650:	d8c00317 	ldw	r3,12(sp)
  807654:	b8c1fc0e 	bge	r23,r3,807e48 <_dtoa_r+0x15b4>
  807658:	0027883a 	mov	r19,zero
  80765c:	b805883a 	mov	r2,r23
  807660:	003f3e06 	br	80735c <__alt_mem_onchip_mem+0xff78735c>
  807664:	880b883a 	mov	r5,r17
  807668:	e009883a 	mov	r4,fp
  80766c:	000f883a 	mov	r7,zero
  807670:	01800284 	movi	r6,10
  807674:	080924c0 	call	80924c <__multadd>
  807678:	d9000c17 	ldw	r4,48(sp)
  80767c:	1023883a 	mov	r17,r2
  807680:	0102040e 	bge	zero,r4,807e94 <_dtoa_r+0x1600>
  807684:	d9000615 	stw	r4,24(sp)
  807688:	0500050e 	bge	zero,r20,8076a0 <_dtoa_r+0xe0c>
  80768c:	880b883a 	mov	r5,r17
  807690:	a00d883a 	mov	r6,r20
  807694:	e009883a 	mov	r4,fp
  807698:	08098fc0 	call	8098fc <__lshift>
  80769c:	1023883a 	mov	r17,r2
  8076a0:	9801241e 	bne	r19,zero,807b34 <_dtoa_r+0x12a0>
  8076a4:	8829883a 	mov	r20,r17
  8076a8:	d9000617 	ldw	r4,24(sp)
  8076ac:	dcc00717 	ldw	r19,28(sp)
  8076b0:	9480004c 	andi	r18,r18,1
  8076b4:	20bfffc4 	addi	r2,r4,-1
  8076b8:	9885883a 	add	r2,r19,r2
  8076bc:	d8800415 	stw	r2,16(sp)
  8076c0:	dc800615 	stw	r18,24(sp)
  8076c4:	a80b883a 	mov	r5,r21
  8076c8:	8009883a 	mov	r4,r16
  8076cc:	08066940 	call	806694 <quorem>
  8076d0:	880b883a 	mov	r5,r17
  8076d4:	8009883a 	mov	r4,r16
  8076d8:	102f883a 	mov	r23,r2
  8076dc:	0809a440 	call	809a44 <__mcmp>
  8076e0:	a80b883a 	mov	r5,r21
  8076e4:	a00d883a 	mov	r6,r20
  8076e8:	e009883a 	mov	r4,fp
  8076ec:	102d883a 	mov	r22,r2
  8076f0:	0809aa40 	call	809aa4 <__mdiff>
  8076f4:	1007883a 	mov	r3,r2
  8076f8:	10800317 	ldw	r2,12(r2)
  8076fc:	bc800c04 	addi	r18,r23,48
  807700:	180b883a 	mov	r5,r3
  807704:	10004e1e 	bne	r2,zero,807840 <_dtoa_r+0xfac>
  807708:	8009883a 	mov	r4,r16
  80770c:	d8c01615 	stw	r3,88(sp)
  807710:	0809a440 	call	809a44 <__mcmp>
  807714:	d8c01617 	ldw	r3,88(sp)
  807718:	e009883a 	mov	r4,fp
  80771c:	d8801615 	stw	r2,88(sp)
  807720:	180b883a 	mov	r5,r3
  807724:	08092240 	call	809224 <_Bfree>
  807728:	d8801617 	ldw	r2,88(sp)
  80772c:	1000041e 	bne	r2,zero,807740 <_dtoa_r+0xeac>
  807730:	d9800317 	ldw	r6,12(sp)
  807734:	3000021e 	bne	r6,zero,807740 <_dtoa_r+0xeac>
  807738:	d8c00617 	ldw	r3,24(sp)
  80773c:	18003726 	beq	r3,zero,80781c <_dtoa_r+0xf88>
  807740:	b0002016 	blt	r22,zero,8077c4 <_dtoa_r+0xf30>
  807744:	b000041e 	bne	r22,zero,807758 <_dtoa_r+0xec4>
  807748:	d9000317 	ldw	r4,12(sp)
  80774c:	2000021e 	bne	r4,zero,807758 <_dtoa_r+0xec4>
  807750:	d8c00617 	ldw	r3,24(sp)
  807754:	18001b26 	beq	r3,zero,8077c4 <_dtoa_r+0xf30>
  807758:	00810716 	blt	zero,r2,807b78 <_dtoa_r+0x12e4>
  80775c:	d8c00417 	ldw	r3,16(sp)
  807760:	9d800044 	addi	r22,r19,1
  807764:	9c800005 	stb	r18,0(r19)
  807768:	b02f883a 	mov	r23,r22
  80776c:	98c10626 	beq	r19,r3,807b88 <_dtoa_r+0x12f4>
  807770:	800b883a 	mov	r5,r16
  807774:	000f883a 	mov	r7,zero
  807778:	01800284 	movi	r6,10
  80777c:	e009883a 	mov	r4,fp
  807780:	080924c0 	call	80924c <__multadd>
  807784:	1021883a 	mov	r16,r2
  807788:	000f883a 	mov	r7,zero
  80778c:	01800284 	movi	r6,10
  807790:	880b883a 	mov	r5,r17
  807794:	e009883a 	mov	r4,fp
  807798:	8d002526 	beq	r17,r20,807830 <_dtoa_r+0xf9c>
  80779c:	080924c0 	call	80924c <__multadd>
  8077a0:	a00b883a 	mov	r5,r20
  8077a4:	000f883a 	mov	r7,zero
  8077a8:	01800284 	movi	r6,10
  8077ac:	e009883a 	mov	r4,fp
  8077b0:	1023883a 	mov	r17,r2
  8077b4:	080924c0 	call	80924c <__multadd>
  8077b8:	1029883a 	mov	r20,r2
  8077bc:	b027883a 	mov	r19,r22
  8077c0:	003fc006 	br	8076c4 <__alt_mem_onchip_mem+0xff7876c4>
  8077c4:	9011883a 	mov	r8,r18
  8077c8:	00800e0e 	bge	zero,r2,807804 <_dtoa_r+0xf70>
  8077cc:	800b883a 	mov	r5,r16
  8077d0:	01800044 	movi	r6,1
  8077d4:	e009883a 	mov	r4,fp
  8077d8:	da001715 	stw	r8,92(sp)
  8077dc:	08098fc0 	call	8098fc <__lshift>
  8077e0:	a80b883a 	mov	r5,r21
  8077e4:	1009883a 	mov	r4,r2
  8077e8:	1021883a 	mov	r16,r2
  8077ec:	0809a440 	call	809a44 <__mcmp>
  8077f0:	da001717 	ldw	r8,92(sp)
  8077f4:	0081960e 	bge	zero,r2,807e50 <_dtoa_r+0x15bc>
  8077f8:	00800e44 	movi	r2,57
  8077fc:	40817026 	beq	r8,r2,807dc0 <_dtoa_r+0x152c>
  807800:	ba000c44 	addi	r8,r23,49
  807804:	8825883a 	mov	r18,r17
  807808:	9dc00044 	addi	r23,r19,1
  80780c:	9a000005 	stb	r8,0(r19)
  807810:	a023883a 	mov	r17,r20
  807814:	dc000915 	stw	r16,36(sp)
  807818:	003f2406 	br	8074ac <__alt_mem_onchip_mem+0xff7874ac>
  80781c:	00800e44 	movi	r2,57
  807820:	9011883a 	mov	r8,r18
  807824:	90816626 	beq	r18,r2,807dc0 <_dtoa_r+0x152c>
  807828:	05bff516 	blt	zero,r22,807800 <__alt_mem_onchip_mem+0xff787800>
  80782c:	003ff506 	br	807804 <__alt_mem_onchip_mem+0xff787804>
  807830:	080924c0 	call	80924c <__multadd>
  807834:	1023883a 	mov	r17,r2
  807838:	1029883a 	mov	r20,r2
  80783c:	003fdf06 	br	8077bc <__alt_mem_onchip_mem+0xff7877bc>
  807840:	e009883a 	mov	r4,fp
  807844:	08092240 	call	809224 <_Bfree>
  807848:	00800044 	movi	r2,1
  80784c:	003fbc06 	br	807740 <__alt_mem_onchip_mem+0xff787740>
  807850:	a80b883a 	mov	r5,r21
  807854:	8009883a 	mov	r4,r16
  807858:	0809a440 	call	809a44 <__mcmp>
  80785c:	103edb0e 	bge	r2,zero,8073cc <__alt_mem_onchip_mem+0xff7873cc>
  807860:	800b883a 	mov	r5,r16
  807864:	000f883a 	mov	r7,zero
  807868:	01800284 	movi	r6,10
  80786c:	e009883a 	mov	r4,fp
  807870:	080924c0 	call	80924c <__multadd>
  807874:	1021883a 	mov	r16,r2
  807878:	d8800517 	ldw	r2,20(sp)
  80787c:	d8c00b17 	ldw	r3,44(sp)
  807880:	10bfffc4 	addi	r2,r2,-1
  807884:	d8800515 	stw	r2,20(sp)
  807888:	183f761e 	bne	r3,zero,807664 <__alt_mem_onchip_mem+0xff787664>
  80788c:	d9000c17 	ldw	r4,48(sp)
  807890:	0101730e 	bge	zero,r4,807e60 <_dtoa_r+0x15cc>
  807894:	d9000615 	stw	r4,24(sp)
  807898:	003ed006 	br	8073dc <__alt_mem_onchip_mem+0xff7873dc>
  80789c:	00800084 	movi	r2,2
  8078a0:	3081861e 	bne	r6,r2,807ebc <_dtoa_r+0x1628>
  8078a4:	d8000b15 	stw	zero,44(sp)
  8078a8:	003f3c06 	br	80759c <__alt_mem_onchip_mem+0xff78759c>
  8078ac:	dc000917 	ldw	r16,36(sp)
  8078b0:	003e9206 	br	8072fc <__alt_mem_onchip_mem+0xff7872fc>
  8078b4:	d9c00317 	ldw	r7,12(sp)
  8078b8:	00800084 	movi	r2,2
  8078bc:	11fec50e 	bge	r2,r7,8073d4 <__alt_mem_onchip_mem+0xff7873d4>
  8078c0:	d9000617 	ldw	r4,24(sp)
  8078c4:	20013c1e 	bne	r4,zero,807db8 <_dtoa_r+0x1524>
  8078c8:	a80b883a 	mov	r5,r21
  8078cc:	000f883a 	mov	r7,zero
  8078d0:	01800144 	movi	r6,5
  8078d4:	e009883a 	mov	r4,fp
  8078d8:	080924c0 	call	80924c <__multadd>
  8078dc:	100b883a 	mov	r5,r2
  8078e0:	8009883a 	mov	r4,r16
  8078e4:	102b883a 	mov	r21,r2
  8078e8:	0809a440 	call	809a44 <__mcmp>
  8078ec:	dc000915 	stw	r16,36(sp)
  8078f0:	00bf410e 	bge	zero,r2,8075f8 <__alt_mem_onchip_mem+0xff7875f8>
  8078f4:	d9c00717 	ldw	r7,28(sp)
  8078f8:	00800c44 	movi	r2,49
  8078fc:	38800005 	stb	r2,0(r7)
  807900:	d8800517 	ldw	r2,20(sp)
  807904:	3dc00044 	addi	r23,r7,1
  807908:	10800044 	addi	r2,r2,1
  80790c:	d8800515 	stw	r2,20(sp)
  807910:	003f3d06 	br	807608 <__alt_mem_onchip_mem+0xff787608>
  807914:	d9800517 	ldw	r6,20(sp)
  807918:	d9c00717 	ldw	r7,28(sp)
  80791c:	00800c44 	movi	r2,49
  807920:	31800044 	addi	r6,r6,1
  807924:	d9800515 	stw	r6,20(sp)
  807928:	38800005 	stb	r2,0(r7)
  80792c:	003edf06 	br	8074ac <__alt_mem_onchip_mem+0xff7874ac>
  807930:	d8000b15 	stw	zero,44(sp)
  807934:	003c9f06 	br	806bb4 <__alt_mem_onchip_mem+0xff786bb4>
  807938:	903e7e1e 	bne	r18,zero,807334 <__alt_mem_onchip_mem+0xff787334>
  80793c:	00800434 	movhi	r2,16
  807940:	10bfffc4 	addi	r2,r2,-1
  807944:	9884703a 	and	r2,r19,r2
  807948:	1000ea1e 	bne	r2,zero,807cf4 <_dtoa_r+0x1460>
  80794c:	9cdffc2c 	andhi	r19,r19,32752
  807950:	9800e826 	beq	r19,zero,807cf4 <_dtoa_r+0x1460>
  807954:	d9c00817 	ldw	r7,32(sp)
  807958:	b5800044 	addi	r22,r22,1
  80795c:	04c00044 	movi	r19,1
  807960:	39c00044 	addi	r7,r7,1
  807964:	d9c00815 	stw	r7,32(sp)
  807968:	d8800d17 	ldw	r2,52(sp)
  80796c:	103e721e 	bne	r2,zero,807338 <__alt_mem_onchip_mem+0xff787338>
  807970:	00800044 	movi	r2,1
  807974:	003e7906 	br	80735c <__alt_mem_onchip_mem+0xff78735c>
  807978:	8009883a 	mov	r4,r16
  80797c:	080f72c0 	call	80f72c <__floatsidf>
  807980:	d9800f17 	ldw	r6,60(sp)
  807984:	d9c01017 	ldw	r7,64(sp)
  807988:	1009883a 	mov	r4,r2
  80798c:	180b883a 	mov	r5,r3
  807990:	080e6980 	call	80e698 <__muldf3>
  807994:	000d883a 	mov	r6,zero
  807998:	01d00734 	movhi	r7,16412
  80799c:	1009883a 	mov	r4,r2
  8079a0:	180b883a 	mov	r5,r3
  8079a4:	080d2ac0 	call	80d2ac <__adddf3>
  8079a8:	047f3034 	movhi	r17,64704
  8079ac:	1021883a 	mov	r16,r2
  8079b0:	1c63883a 	add	r17,r3,r17
  8079b4:	d9000f17 	ldw	r4,60(sp)
  8079b8:	d9401017 	ldw	r5,64(sp)
  8079bc:	000d883a 	mov	r6,zero
  8079c0:	01d00534 	movhi	r7,16404
  8079c4:	080edb00 	call	80edb0 <__subdf3>
  8079c8:	800d883a 	mov	r6,r16
  8079cc:	880f883a 	mov	r7,r17
  8079d0:	1009883a 	mov	r4,r2
  8079d4:	180b883a 	mov	r5,r3
  8079d8:	102b883a 	mov	r21,r2
  8079dc:	1829883a 	mov	r20,r3
  8079e0:	080e4c80 	call	80e4c8 <__gedf2>
  8079e4:	00806c16 	blt	zero,r2,807b98 <_dtoa_r+0x1304>
  8079e8:	89e0003c 	xorhi	r7,r17,32768
  8079ec:	800d883a 	mov	r6,r16
  8079f0:	a809883a 	mov	r4,r21
  8079f4:	a00b883a 	mov	r5,r20
  8079f8:	080e5a40 	call	80e5a4 <__ledf2>
  8079fc:	103d7e0e 	bge	r2,zero,806ff8 <__alt_mem_onchip_mem+0xff786ff8>
  807a00:	002b883a 	mov	r21,zero
  807a04:	0023883a 	mov	r17,zero
  807a08:	003efb06 	br	8075f8 <__alt_mem_onchip_mem+0xff7875f8>
  807a0c:	d8800717 	ldw	r2,28(sp)
  807a10:	003bd006 	br	806954 <__alt_mem_onchip_mem+0xff786954>
  807a14:	d9000a17 	ldw	r4,40(sp)
  807a18:	d9800d17 	ldw	r6,52(sp)
  807a1c:	dd400a15 	stw	r21,40(sp)
  807a20:	a905c83a 	sub	r2,r21,r4
  807a24:	308d883a 	add	r6,r6,r2
  807a28:	d9800d15 	stw	r6,52(sp)
  807a2c:	002b883a 	mov	r21,zero
  807a30:	003e0606 	br	80724c <__alt_mem_onchip_mem+0xff78724c>
  807a34:	9023883a 	mov	r17,r18
  807a38:	9829883a 	mov	r20,r19
  807a3c:	04000084 	movi	r16,2
  807a40:	003c9206 	br	806c8c <__alt_mem_onchip_mem+0xff786c8c>
  807a44:	04000044 	movi	r16,1
  807a48:	dc000c15 	stw	r16,48(sp)
  807a4c:	dc000615 	stw	r16,24(sp)
  807a50:	dc002215 	stw	r16,136(sp)
  807a54:	e0001115 	stw	zero,68(fp)
  807a58:	000b883a 	mov	r5,zero
  807a5c:	003c6906 	br	806c04 <__alt_mem_onchip_mem+0xff786c04>
  807a60:	3021883a 	mov	r16,r6
  807a64:	003ffb06 	br	807a54 <__alt_mem_onchip_mem+0xff787a54>
  807a68:	1000021e 	bne	r2,zero,807a74 <_dtoa_r+0x11e0>
  807a6c:	4200004c 	andi	r8,r8,1
  807a70:	403e7d1e 	bne	r8,zero,807468 <__alt_mem_onchip_mem+0xff787468>
  807a74:	01000c04 	movi	r4,48
  807a78:	00000106 	br	807a80 <_dtoa_r+0x11ec>
  807a7c:	102f883a 	mov	r23,r2
  807a80:	b8bfffc4 	addi	r2,r23,-1
  807a84:	10c00007 	ldb	r3,0(r2)
  807a88:	193ffc26 	beq	r3,r4,807a7c <__alt_mem_onchip_mem+0xff787a7c>
  807a8c:	003e8706 	br	8074ac <__alt_mem_onchip_mem+0xff7874ac>
  807a90:	d8800517 	ldw	r2,20(sp)
  807a94:	00a3c83a 	sub	r17,zero,r2
  807a98:	8800a426 	beq	r17,zero,807d2c <_dtoa_r+0x1498>
  807a9c:	888003cc 	andi	r2,r17,15
  807aa0:	100490fa 	slli	r2,r2,3
  807aa4:	00c02074 	movhi	r3,129
  807aa8:	18d02804 	addi	r3,r3,16544
  807aac:	1885883a 	add	r2,r3,r2
  807ab0:	11800017 	ldw	r6,0(r2)
  807ab4:	11c00117 	ldw	r7,4(r2)
  807ab8:	9009883a 	mov	r4,r18
  807abc:	980b883a 	mov	r5,r19
  807ac0:	8823d13a 	srai	r17,r17,4
  807ac4:	080e6980 	call	80e698 <__muldf3>
  807ac8:	d8800f15 	stw	r2,60(sp)
  807acc:	d8c01015 	stw	r3,64(sp)
  807ad0:	8800e826 	beq	r17,zero,807e74 <_dtoa_r+0x15e0>
  807ad4:	05002074 	movhi	r20,129
  807ad8:	a5101e04 	addi	r20,r20,16504
  807adc:	04000084 	movi	r16,2
  807ae0:	8980004c 	andi	r6,r17,1
  807ae4:	1009883a 	mov	r4,r2
  807ae8:	8823d07a 	srai	r17,r17,1
  807aec:	180b883a 	mov	r5,r3
  807af0:	30000426 	beq	r6,zero,807b04 <_dtoa_r+0x1270>
  807af4:	a1800017 	ldw	r6,0(r20)
  807af8:	a1c00117 	ldw	r7,4(r20)
  807afc:	84000044 	addi	r16,r16,1
  807b00:	080e6980 	call	80e698 <__muldf3>
  807b04:	a5000204 	addi	r20,r20,8
  807b08:	883ff51e 	bne	r17,zero,807ae0 <__alt_mem_onchip_mem+0xff787ae0>
  807b0c:	d8800f15 	stw	r2,60(sp)
  807b10:	d8c01015 	stw	r3,64(sp)
  807b14:	003c7606 	br	806cf0 <__alt_mem_onchip_mem+0xff786cf0>
  807b18:	00c00c04 	movi	r3,48
  807b1c:	10c00005 	stb	r3,0(r2)
  807b20:	d8c00517 	ldw	r3,20(sp)
  807b24:	bd3fffc3 	ldbu	r20,-1(r23)
  807b28:	18c00044 	addi	r3,r3,1
  807b2c:	d8c00515 	stw	r3,20(sp)
  807b30:	003db906 	br	807218 <__alt_mem_onchip_mem+0xff787218>
  807b34:	89400117 	ldw	r5,4(r17)
  807b38:	e009883a 	mov	r4,fp
  807b3c:	080917c0 	call	80917c <_Balloc>
  807b40:	89800417 	ldw	r6,16(r17)
  807b44:	89400304 	addi	r5,r17,12
  807b48:	11000304 	addi	r4,r2,12
  807b4c:	31800084 	addi	r6,r6,2
  807b50:	318d883a 	add	r6,r6,r6
  807b54:	318d883a 	add	r6,r6,r6
  807b58:	1027883a 	mov	r19,r2
  807b5c:	0808ed80 	call	808ed8 <memcpy>
  807b60:	01800044 	movi	r6,1
  807b64:	980b883a 	mov	r5,r19
  807b68:	e009883a 	mov	r4,fp
  807b6c:	08098fc0 	call	8098fc <__lshift>
  807b70:	1029883a 	mov	r20,r2
  807b74:	003ecc06 	br	8076a8 <__alt_mem_onchip_mem+0xff7876a8>
  807b78:	00800e44 	movi	r2,57
  807b7c:	90809026 	beq	r18,r2,807dc0 <_dtoa_r+0x152c>
  807b80:	92000044 	addi	r8,r18,1
  807b84:	003f1f06 	br	807804 <__alt_mem_onchip_mem+0xff787804>
  807b88:	9011883a 	mov	r8,r18
  807b8c:	8825883a 	mov	r18,r17
  807b90:	a023883a 	mov	r17,r20
  807b94:	003e2906 	br	80743c <__alt_mem_onchip_mem+0xff78743c>
  807b98:	002b883a 	mov	r21,zero
  807b9c:	0023883a 	mov	r17,zero
  807ba0:	003f5406 	br	8078f4 <__alt_mem_onchip_mem+0xff7878f4>
  807ba4:	61bfffc4 	addi	r6,r12,-1
  807ba8:	300490fa 	slli	r2,r6,3
  807bac:	00c02074 	movhi	r3,129
  807bb0:	18d02804 	addi	r3,r3,16544
  807bb4:	1885883a 	add	r2,r3,r2
  807bb8:	11000017 	ldw	r4,0(r2)
  807bbc:	11400117 	ldw	r5,4(r2)
  807bc0:	d8800717 	ldw	r2,28(sp)
  807bc4:	880f883a 	mov	r7,r17
  807bc8:	d9801215 	stw	r6,72(sp)
  807bcc:	800d883a 	mov	r6,r16
  807bd0:	db001615 	stw	r12,88(sp)
  807bd4:	15c00044 	addi	r23,r2,1
  807bd8:	080e6980 	call	80e698 <__muldf3>
  807bdc:	d9401017 	ldw	r5,64(sp)
  807be0:	d9000f17 	ldw	r4,60(sp)
  807be4:	d8c01515 	stw	r3,84(sp)
  807be8:	d8801415 	stw	r2,80(sp)
  807bec:	080f6ac0 	call	80f6ac <__fixdfsi>
  807bf0:	1009883a 	mov	r4,r2
  807bf4:	1021883a 	mov	r16,r2
  807bf8:	080f72c0 	call	80f72c <__floatsidf>
  807bfc:	d9000f17 	ldw	r4,60(sp)
  807c00:	d9401017 	ldw	r5,64(sp)
  807c04:	100d883a 	mov	r6,r2
  807c08:	180f883a 	mov	r7,r3
  807c0c:	080edb00 	call	80edb0 <__subdf3>
  807c10:	1829883a 	mov	r20,r3
  807c14:	d8c00717 	ldw	r3,28(sp)
  807c18:	84000c04 	addi	r16,r16,48
  807c1c:	1023883a 	mov	r17,r2
  807c20:	1c000005 	stb	r16,0(r3)
  807c24:	db001617 	ldw	r12,88(sp)
  807c28:	00800044 	movi	r2,1
  807c2c:	60802226 	beq	r12,r2,807cb8 <_dtoa_r+0x1424>
  807c30:	d9c00717 	ldw	r7,28(sp)
  807c34:	8805883a 	mov	r2,r17
  807c38:	b82b883a 	mov	r21,r23
  807c3c:	3b19883a 	add	r12,r7,r12
  807c40:	6023883a 	mov	r17,r12
  807c44:	a007883a 	mov	r3,r20
  807c48:	dc800f15 	stw	r18,60(sp)
  807c4c:	000d883a 	mov	r6,zero
  807c50:	01d00934 	movhi	r7,16420
  807c54:	1009883a 	mov	r4,r2
  807c58:	180b883a 	mov	r5,r3
  807c5c:	080e6980 	call	80e698 <__muldf3>
  807c60:	180b883a 	mov	r5,r3
  807c64:	1009883a 	mov	r4,r2
  807c68:	1829883a 	mov	r20,r3
  807c6c:	1025883a 	mov	r18,r2
  807c70:	080f6ac0 	call	80f6ac <__fixdfsi>
  807c74:	1009883a 	mov	r4,r2
  807c78:	1021883a 	mov	r16,r2
  807c7c:	080f72c0 	call	80f72c <__floatsidf>
  807c80:	100d883a 	mov	r6,r2
  807c84:	180f883a 	mov	r7,r3
  807c88:	9009883a 	mov	r4,r18
  807c8c:	a00b883a 	mov	r5,r20
  807c90:	84000c04 	addi	r16,r16,48
  807c94:	080edb00 	call	80edb0 <__subdf3>
  807c98:	ad400044 	addi	r21,r21,1
  807c9c:	ac3fffc5 	stb	r16,-1(r21)
  807ca0:	ac7fea1e 	bne	r21,r17,807c4c <__alt_mem_onchip_mem+0xff787c4c>
  807ca4:	1023883a 	mov	r17,r2
  807ca8:	d8801217 	ldw	r2,72(sp)
  807cac:	dc800f17 	ldw	r18,60(sp)
  807cb0:	1829883a 	mov	r20,r3
  807cb4:	b8af883a 	add	r23,r23,r2
  807cb8:	d9001417 	ldw	r4,80(sp)
  807cbc:	d9401517 	ldw	r5,84(sp)
  807cc0:	000d883a 	mov	r6,zero
  807cc4:	01cff834 	movhi	r7,16352
  807cc8:	080d2ac0 	call	80d2ac <__adddf3>
  807ccc:	880d883a 	mov	r6,r17
  807cd0:	a00f883a 	mov	r7,r20
  807cd4:	1009883a 	mov	r4,r2
  807cd8:	180b883a 	mov	r5,r3
  807cdc:	080e5a40 	call	80e5a4 <__ledf2>
  807ce0:	10003e0e 	bge	r2,zero,807ddc <_dtoa_r+0x1548>
  807ce4:	d9001317 	ldw	r4,76(sp)
  807ce8:	bd3fffc3 	ldbu	r20,-1(r23)
  807cec:	d9000515 	stw	r4,20(sp)
  807cf0:	003d3b06 	br	8071e0 <__alt_mem_onchip_mem+0xff7871e0>
  807cf4:	0027883a 	mov	r19,zero
  807cf8:	003f1b06 	br	807968 <__alt_mem_onchip_mem+0xff787968>
  807cfc:	d8800817 	ldw	r2,32(sp)
  807d00:	11e9c83a 	sub	r20,r2,r7
  807d04:	0005883a 	mov	r2,zero
  807d08:	003d5406 	br	80725c <__alt_mem_onchip_mem+0xff78725c>
  807d0c:	00800044 	movi	r2,1
  807d10:	003dc706 	br	807430 <__alt_mem_onchip_mem+0xff787430>
  807d14:	d8c00217 	ldw	r3,8(sp)
  807d18:	00800d84 	movi	r2,54
  807d1c:	dd400a17 	ldw	r21,40(sp)
  807d20:	10c5c83a 	sub	r2,r2,r3
  807d24:	dd000817 	ldw	r20,32(sp)
  807d28:	003d4c06 	br	80725c <__alt_mem_onchip_mem+0xff78725c>
  807d2c:	dc800f15 	stw	r18,60(sp)
  807d30:	dcc01015 	stw	r19,64(sp)
  807d34:	04000084 	movi	r16,2
  807d38:	003bed06 	br	806cf0 <__alt_mem_onchip_mem+0xff786cf0>
  807d3c:	d9000617 	ldw	r4,24(sp)
  807d40:	203f0d26 	beq	r4,zero,807978 <__alt_mem_onchip_mem+0xff787978>
  807d44:	d9800c17 	ldw	r6,48(sp)
  807d48:	01bcab0e 	bge	zero,r6,806ff8 <__alt_mem_onchip_mem+0xff786ff8>
  807d4c:	d9401017 	ldw	r5,64(sp)
  807d50:	d9000f17 	ldw	r4,60(sp)
  807d54:	000d883a 	mov	r6,zero
  807d58:	01d00934 	movhi	r7,16420
  807d5c:	080e6980 	call	80e698 <__muldf3>
  807d60:	81000044 	addi	r4,r16,1
  807d64:	d8800f15 	stw	r2,60(sp)
  807d68:	d8c01015 	stw	r3,64(sp)
  807d6c:	080f72c0 	call	80f72c <__floatsidf>
  807d70:	d9800f17 	ldw	r6,60(sp)
  807d74:	d9c01017 	ldw	r7,64(sp)
  807d78:	1009883a 	mov	r4,r2
  807d7c:	180b883a 	mov	r5,r3
  807d80:	080e6980 	call	80e698 <__muldf3>
  807d84:	01d00734 	movhi	r7,16412
  807d88:	000d883a 	mov	r6,zero
  807d8c:	1009883a 	mov	r4,r2
  807d90:	180b883a 	mov	r5,r3
  807d94:	080d2ac0 	call	80d2ac <__adddf3>
  807d98:	d9c00517 	ldw	r7,20(sp)
  807d9c:	047f3034 	movhi	r17,64704
  807da0:	1021883a 	mov	r16,r2
  807da4:	39ffffc4 	addi	r7,r7,-1
  807da8:	d9c01315 	stw	r7,76(sp)
  807dac:	1c63883a 	add	r17,r3,r17
  807db0:	db000c17 	ldw	r12,48(sp)
  807db4:	003bea06 	br	806d60 <__alt_mem_onchip_mem+0xff786d60>
  807db8:	dc000915 	stw	r16,36(sp)
  807dbc:	003e0e06 	br	8075f8 <__alt_mem_onchip_mem+0xff7875f8>
  807dc0:	01000e44 	movi	r4,57
  807dc4:	8825883a 	mov	r18,r17
  807dc8:	9dc00044 	addi	r23,r19,1
  807dcc:	99000005 	stb	r4,0(r19)
  807dd0:	a023883a 	mov	r17,r20
  807dd4:	dc000915 	stw	r16,36(sp)
  807dd8:	003da406 	br	80746c <__alt_mem_onchip_mem+0xff78746c>
  807ddc:	d9801417 	ldw	r6,80(sp)
  807de0:	d9c01517 	ldw	r7,84(sp)
  807de4:	0009883a 	mov	r4,zero
  807de8:	014ff834 	movhi	r5,16352
  807dec:	080edb00 	call	80edb0 <__subdf3>
  807df0:	880d883a 	mov	r6,r17
  807df4:	a00f883a 	mov	r7,r20
  807df8:	1009883a 	mov	r4,r2
  807dfc:	180b883a 	mov	r5,r3
  807e00:	080e4c80 	call	80e4c8 <__gedf2>
  807e04:	00bc7c0e 	bge	zero,r2,806ff8 <__alt_mem_onchip_mem+0xff786ff8>
  807e08:	01000c04 	movi	r4,48
  807e0c:	00000106 	br	807e14 <_dtoa_r+0x1580>
  807e10:	102f883a 	mov	r23,r2
  807e14:	b8bfffc4 	addi	r2,r23,-1
  807e18:	10c00007 	ldb	r3,0(r2)
  807e1c:	193ffc26 	beq	r3,r4,807e10 <__alt_mem_onchip_mem+0xff787e10>
  807e20:	d9801317 	ldw	r6,76(sp)
  807e24:	d9800515 	stw	r6,20(sp)
  807e28:	003c4406 	br	806f3c <__alt_mem_onchip_mem+0xff786f3c>
  807e2c:	d9801317 	ldw	r6,76(sp)
  807e30:	d9800515 	stw	r6,20(sp)
  807e34:	003cea06 	br	8071e0 <__alt_mem_onchip_mem+0xff7871e0>
  807e38:	dd800f17 	ldw	r22,60(sp)
  807e3c:	dcc01017 	ldw	r19,64(sp)
  807e40:	dc801217 	ldw	r18,72(sp)
  807e44:	003c6c06 	br	806ff8 <__alt_mem_onchip_mem+0xff786ff8>
  807e48:	903e031e 	bne	r18,zero,807658 <__alt_mem_onchip_mem+0xff787658>
  807e4c:	003ebb06 	br	80793c <__alt_mem_onchip_mem+0xff78793c>
  807e50:	103e6c1e 	bne	r2,zero,807804 <__alt_mem_onchip_mem+0xff787804>
  807e54:	4080004c 	andi	r2,r8,1
  807e58:	103e6a26 	beq	r2,zero,807804 <__alt_mem_onchip_mem+0xff787804>
  807e5c:	003e6606 	br	8077f8 <__alt_mem_onchip_mem+0xff7877f8>
  807e60:	d8c00317 	ldw	r3,12(sp)
  807e64:	00800084 	movi	r2,2
  807e68:	10c02916 	blt	r2,r3,807f10 <_dtoa_r+0x167c>
  807e6c:	d9000c17 	ldw	r4,48(sp)
  807e70:	003e8806 	br	807894 <__alt_mem_onchip_mem+0xff787894>
  807e74:	04000084 	movi	r16,2
  807e78:	003b9d06 	br	806cf0 <__alt_mem_onchip_mem+0xff786cf0>
  807e7c:	d9001317 	ldw	r4,76(sp)
  807e80:	d9000515 	stw	r4,20(sp)
  807e84:	003cd606 	br	8071e0 <__alt_mem_onchip_mem+0xff7871e0>
  807e88:	d8801317 	ldw	r2,76(sp)
  807e8c:	d8800515 	stw	r2,20(sp)
  807e90:	003c2a06 	br	806f3c <__alt_mem_onchip_mem+0xff786f3c>
  807e94:	d9800317 	ldw	r6,12(sp)
  807e98:	00800084 	movi	r2,2
  807e9c:	11801516 	blt	r2,r6,807ef4 <_dtoa_r+0x1660>
  807ea0:	d9c00c17 	ldw	r7,48(sp)
  807ea4:	d9c00615 	stw	r7,24(sp)
  807ea8:	003df706 	br	807688 <__alt_mem_onchip_mem+0xff787688>
  807eac:	193d3926 	beq	r3,r4,807394 <__alt_mem_onchip_mem+0xff787394>
  807eb0:	00c00f04 	movi	r3,60
  807eb4:	1885c83a 	sub	r2,r3,r2
  807eb8:	003ddf06 	br	807638 <__alt_mem_onchip_mem+0xff787638>
  807ebc:	e009883a 	mov	r4,fp
  807ec0:	e0001115 	stw	zero,68(fp)
  807ec4:	000b883a 	mov	r5,zero
  807ec8:	080917c0 	call	80917c <_Balloc>
  807ecc:	d8800715 	stw	r2,28(sp)
  807ed0:	d8c00717 	ldw	r3,28(sp)
  807ed4:	00bfffc4 	movi	r2,-1
  807ed8:	01000044 	movi	r4,1
  807edc:	d8800c15 	stw	r2,48(sp)
  807ee0:	e0c01015 	stw	r3,64(fp)
  807ee4:	d9000b15 	stw	r4,44(sp)
  807ee8:	d8800615 	stw	r2,24(sp)
  807eec:	d8002215 	stw	zero,136(sp)
  807ef0:	003c4106 	br	806ff8 <__alt_mem_onchip_mem+0xff786ff8>
  807ef4:	d8c00c17 	ldw	r3,48(sp)
  807ef8:	d8c00615 	stw	r3,24(sp)
  807efc:	003e7006 	br	8078c0 <__alt_mem_onchip_mem+0xff7878c0>
  807f00:	04400044 	movi	r17,1
  807f04:	003b2006 	br	806b88 <__alt_mem_onchip_mem+0xff786b88>
  807f08:	000b883a 	mov	r5,zero
  807f0c:	003b3d06 	br	806c04 <__alt_mem_onchip_mem+0xff786c04>
  807f10:	d8800c17 	ldw	r2,48(sp)
  807f14:	d8800615 	stw	r2,24(sp)
  807f18:	003e6906 	br	8078c0 <__alt_mem_onchip_mem+0xff7878c0>

00807f1c <_fclose_r>:
  807f1c:	28003926 	beq	r5,zero,808004 <_fclose_r+0xe8>
  807f20:	defffc04 	addi	sp,sp,-16
  807f24:	dc400115 	stw	r17,4(sp)
  807f28:	dc000015 	stw	r16,0(sp)
  807f2c:	dfc00315 	stw	ra,12(sp)
  807f30:	dc800215 	stw	r18,8(sp)
  807f34:	2023883a 	mov	r17,r4
  807f38:	2821883a 	mov	r16,r5
  807f3c:	20000226 	beq	r4,zero,807f48 <_fclose_r+0x2c>
  807f40:	20800e17 	ldw	r2,56(r4)
  807f44:	10002726 	beq	r2,zero,807fe4 <_fclose_r+0xc8>
  807f48:	8080030f 	ldh	r2,12(r16)
  807f4c:	1000071e 	bne	r2,zero,807f6c <_fclose_r+0x50>
  807f50:	0005883a 	mov	r2,zero
  807f54:	dfc00317 	ldw	ra,12(sp)
  807f58:	dc800217 	ldw	r18,8(sp)
  807f5c:	dc400117 	ldw	r17,4(sp)
  807f60:	dc000017 	ldw	r16,0(sp)
  807f64:	dec00404 	addi	sp,sp,16
  807f68:	f800283a 	ret
  807f6c:	800b883a 	mov	r5,r16
  807f70:	8809883a 	mov	r4,r17
  807f74:	08080200 	call	808020 <__sflush_r>
  807f78:	1025883a 	mov	r18,r2
  807f7c:	80800b17 	ldw	r2,44(r16)
  807f80:	10000426 	beq	r2,zero,807f94 <_fclose_r+0x78>
  807f84:	81400717 	ldw	r5,28(r16)
  807f88:	8809883a 	mov	r4,r17
  807f8c:	103ee83a 	callr	r2
  807f90:	10001616 	blt	r2,zero,807fec <_fclose_r+0xd0>
  807f94:	8080030b 	ldhu	r2,12(r16)
  807f98:	1080200c 	andi	r2,r2,128
  807f9c:	1000151e 	bne	r2,zero,807ff4 <_fclose_r+0xd8>
  807fa0:	81400c17 	ldw	r5,48(r16)
  807fa4:	28000526 	beq	r5,zero,807fbc <_fclose_r+0xa0>
  807fa8:	80801004 	addi	r2,r16,64
  807fac:	28800226 	beq	r5,r2,807fb8 <_fclose_r+0x9c>
  807fb0:	8809883a 	mov	r4,r17
  807fb4:	08084980 	call	808498 <_free_r>
  807fb8:	80000c15 	stw	zero,48(r16)
  807fbc:	81401117 	ldw	r5,68(r16)
  807fc0:	28000326 	beq	r5,zero,807fd0 <_fclose_r+0xb4>
  807fc4:	8809883a 	mov	r4,r17
  807fc8:	08084980 	call	808498 <_free_r>
  807fcc:	80001115 	stw	zero,68(r16)
  807fd0:	08024380 	call	802438 <__sfp_lock_acquire>
  807fd4:	8000030d 	sth	zero,12(r16)
  807fd8:	080243c0 	call	80243c <__sfp_lock_release>
  807fdc:	9005883a 	mov	r2,r18
  807fe0:	003fdc06 	br	807f54 <__alt_mem_onchip_mem+0xff787f54>
  807fe4:	08024280 	call	802428 <__sinit>
  807fe8:	003fd706 	br	807f48 <__alt_mem_onchip_mem+0xff787f48>
  807fec:	04bfffc4 	movi	r18,-1
  807ff0:	003fe806 	br	807f94 <__alt_mem_onchip_mem+0xff787f94>
  807ff4:	81400417 	ldw	r5,16(r16)
  807ff8:	8809883a 	mov	r4,r17
  807ffc:	08084980 	call	808498 <_free_r>
  808000:	003fe706 	br	807fa0 <__alt_mem_onchip_mem+0xff787fa0>
  808004:	0005883a 	mov	r2,zero
  808008:	f800283a 	ret

0080800c <fclose>:
  80800c:	00802074 	movhi	r2,129
  808010:	1097e104 	addi	r2,r2,24452
  808014:	200b883a 	mov	r5,r4
  808018:	11000017 	ldw	r4,0(r2)
  80801c:	0807f1c1 	jmpi	807f1c <_fclose_r>

00808020 <__sflush_r>:
  808020:	2880030b 	ldhu	r2,12(r5)
  808024:	defffb04 	addi	sp,sp,-20
  808028:	dcc00315 	stw	r19,12(sp)
  80802c:	dc400115 	stw	r17,4(sp)
  808030:	dfc00415 	stw	ra,16(sp)
  808034:	dc800215 	stw	r18,8(sp)
  808038:	dc000015 	stw	r16,0(sp)
  80803c:	10c0020c 	andi	r3,r2,8
  808040:	2823883a 	mov	r17,r5
  808044:	2027883a 	mov	r19,r4
  808048:	1800311e 	bne	r3,zero,808110 <__sflush_r+0xf0>
  80804c:	28c00117 	ldw	r3,4(r5)
  808050:	10820014 	ori	r2,r2,2048
  808054:	2880030d 	sth	r2,12(r5)
  808058:	00c04b0e 	bge	zero,r3,808188 <__sflush_r+0x168>
  80805c:	8a000a17 	ldw	r8,40(r17)
  808060:	40002326 	beq	r8,zero,8080f0 <__sflush_r+0xd0>
  808064:	9c000017 	ldw	r16,0(r19)
  808068:	10c4000c 	andi	r3,r2,4096
  80806c:	98000015 	stw	zero,0(r19)
  808070:	18004826 	beq	r3,zero,808194 <__sflush_r+0x174>
  808074:	89801417 	ldw	r6,80(r17)
  808078:	10c0010c 	andi	r3,r2,4
  80807c:	18000626 	beq	r3,zero,808098 <__sflush_r+0x78>
  808080:	88c00117 	ldw	r3,4(r17)
  808084:	88800c17 	ldw	r2,48(r17)
  808088:	30cdc83a 	sub	r6,r6,r3
  80808c:	10000226 	beq	r2,zero,808098 <__sflush_r+0x78>
  808090:	88800f17 	ldw	r2,60(r17)
  808094:	308dc83a 	sub	r6,r6,r2
  808098:	89400717 	ldw	r5,28(r17)
  80809c:	000f883a 	mov	r7,zero
  8080a0:	9809883a 	mov	r4,r19
  8080a4:	403ee83a 	callr	r8
  8080a8:	00ffffc4 	movi	r3,-1
  8080ac:	10c04426 	beq	r2,r3,8081c0 <__sflush_r+0x1a0>
  8080b0:	88c0030b 	ldhu	r3,12(r17)
  8080b4:	89000417 	ldw	r4,16(r17)
  8080b8:	88000115 	stw	zero,4(r17)
  8080bc:	197dffcc 	andi	r5,r3,63487
  8080c0:	8940030d 	sth	r5,12(r17)
  8080c4:	89000015 	stw	r4,0(r17)
  8080c8:	18c4000c 	andi	r3,r3,4096
  8080cc:	18002c1e 	bne	r3,zero,808180 <__sflush_r+0x160>
  8080d0:	89400c17 	ldw	r5,48(r17)
  8080d4:	9c000015 	stw	r16,0(r19)
  8080d8:	28000526 	beq	r5,zero,8080f0 <__sflush_r+0xd0>
  8080dc:	88801004 	addi	r2,r17,64
  8080e0:	28800226 	beq	r5,r2,8080ec <__sflush_r+0xcc>
  8080e4:	9809883a 	mov	r4,r19
  8080e8:	08084980 	call	808498 <_free_r>
  8080ec:	88000c15 	stw	zero,48(r17)
  8080f0:	0005883a 	mov	r2,zero
  8080f4:	dfc00417 	ldw	ra,16(sp)
  8080f8:	dcc00317 	ldw	r19,12(sp)
  8080fc:	dc800217 	ldw	r18,8(sp)
  808100:	dc400117 	ldw	r17,4(sp)
  808104:	dc000017 	ldw	r16,0(sp)
  808108:	dec00504 	addi	sp,sp,20
  80810c:	f800283a 	ret
  808110:	2c800417 	ldw	r18,16(r5)
  808114:	903ff626 	beq	r18,zero,8080f0 <__alt_mem_onchip_mem+0xff7880f0>
  808118:	2c000017 	ldw	r16,0(r5)
  80811c:	108000cc 	andi	r2,r2,3
  808120:	2c800015 	stw	r18,0(r5)
  808124:	84a1c83a 	sub	r16,r16,r18
  808128:	1000131e 	bne	r2,zero,808178 <__sflush_r+0x158>
  80812c:	28800517 	ldw	r2,20(r5)
  808130:	88800215 	stw	r2,8(r17)
  808134:	04000316 	blt	zero,r16,808144 <__sflush_r+0x124>
  808138:	003fed06 	br	8080f0 <__alt_mem_onchip_mem+0xff7880f0>
  80813c:	90a5883a 	add	r18,r18,r2
  808140:	043feb0e 	bge	zero,r16,8080f0 <__alt_mem_onchip_mem+0xff7880f0>
  808144:	88800917 	ldw	r2,36(r17)
  808148:	89400717 	ldw	r5,28(r17)
  80814c:	800f883a 	mov	r7,r16
  808150:	900d883a 	mov	r6,r18
  808154:	9809883a 	mov	r4,r19
  808158:	103ee83a 	callr	r2
  80815c:	80a1c83a 	sub	r16,r16,r2
  808160:	00bff616 	blt	zero,r2,80813c <__alt_mem_onchip_mem+0xff78813c>
  808164:	88c0030b 	ldhu	r3,12(r17)
  808168:	00bfffc4 	movi	r2,-1
  80816c:	18c01014 	ori	r3,r3,64
  808170:	88c0030d 	sth	r3,12(r17)
  808174:	003fdf06 	br	8080f4 <__alt_mem_onchip_mem+0xff7880f4>
  808178:	0005883a 	mov	r2,zero
  80817c:	003fec06 	br	808130 <__alt_mem_onchip_mem+0xff788130>
  808180:	88801415 	stw	r2,80(r17)
  808184:	003fd206 	br	8080d0 <__alt_mem_onchip_mem+0xff7880d0>
  808188:	28c00f17 	ldw	r3,60(r5)
  80818c:	00ffb316 	blt	zero,r3,80805c <__alt_mem_onchip_mem+0xff78805c>
  808190:	003fd706 	br	8080f0 <__alt_mem_onchip_mem+0xff7880f0>
  808194:	89400717 	ldw	r5,28(r17)
  808198:	000d883a 	mov	r6,zero
  80819c:	01c00044 	movi	r7,1
  8081a0:	9809883a 	mov	r4,r19
  8081a4:	403ee83a 	callr	r8
  8081a8:	100d883a 	mov	r6,r2
  8081ac:	00bfffc4 	movi	r2,-1
  8081b0:	30801426 	beq	r6,r2,808204 <__sflush_r+0x1e4>
  8081b4:	8880030b 	ldhu	r2,12(r17)
  8081b8:	8a000a17 	ldw	r8,40(r17)
  8081bc:	003fae06 	br	808078 <__alt_mem_onchip_mem+0xff788078>
  8081c0:	98c00017 	ldw	r3,0(r19)
  8081c4:	183fba26 	beq	r3,zero,8080b0 <__alt_mem_onchip_mem+0xff7880b0>
  8081c8:	01000744 	movi	r4,29
  8081cc:	19000626 	beq	r3,r4,8081e8 <__sflush_r+0x1c8>
  8081d0:	01000584 	movi	r4,22
  8081d4:	19000426 	beq	r3,r4,8081e8 <__sflush_r+0x1c8>
  8081d8:	88c0030b 	ldhu	r3,12(r17)
  8081dc:	18c01014 	ori	r3,r3,64
  8081e0:	88c0030d 	sth	r3,12(r17)
  8081e4:	003fc306 	br	8080f4 <__alt_mem_onchip_mem+0xff7880f4>
  8081e8:	8880030b 	ldhu	r2,12(r17)
  8081ec:	88c00417 	ldw	r3,16(r17)
  8081f0:	88000115 	stw	zero,4(r17)
  8081f4:	10bdffcc 	andi	r2,r2,63487
  8081f8:	8880030d 	sth	r2,12(r17)
  8081fc:	88c00015 	stw	r3,0(r17)
  808200:	003fb306 	br	8080d0 <__alt_mem_onchip_mem+0xff7880d0>
  808204:	98800017 	ldw	r2,0(r19)
  808208:	103fea26 	beq	r2,zero,8081b4 <__alt_mem_onchip_mem+0xff7881b4>
  80820c:	00c00744 	movi	r3,29
  808210:	10c00226 	beq	r2,r3,80821c <__sflush_r+0x1fc>
  808214:	00c00584 	movi	r3,22
  808218:	10c0031e 	bne	r2,r3,808228 <__sflush_r+0x208>
  80821c:	9c000015 	stw	r16,0(r19)
  808220:	0005883a 	mov	r2,zero
  808224:	003fb306 	br	8080f4 <__alt_mem_onchip_mem+0xff7880f4>
  808228:	88c0030b 	ldhu	r3,12(r17)
  80822c:	3005883a 	mov	r2,r6
  808230:	18c01014 	ori	r3,r3,64
  808234:	88c0030d 	sth	r3,12(r17)
  808238:	003fae06 	br	8080f4 <__alt_mem_onchip_mem+0xff7880f4>

0080823c <_fflush_r>:
  80823c:	defffd04 	addi	sp,sp,-12
  808240:	dc000115 	stw	r16,4(sp)
  808244:	dfc00215 	stw	ra,8(sp)
  808248:	2021883a 	mov	r16,r4
  80824c:	20000226 	beq	r4,zero,808258 <_fflush_r+0x1c>
  808250:	20800e17 	ldw	r2,56(r4)
  808254:	10000c26 	beq	r2,zero,808288 <_fflush_r+0x4c>
  808258:	2880030f 	ldh	r2,12(r5)
  80825c:	1000051e 	bne	r2,zero,808274 <_fflush_r+0x38>
  808260:	0005883a 	mov	r2,zero
  808264:	dfc00217 	ldw	ra,8(sp)
  808268:	dc000117 	ldw	r16,4(sp)
  80826c:	dec00304 	addi	sp,sp,12
  808270:	f800283a 	ret
  808274:	8009883a 	mov	r4,r16
  808278:	dfc00217 	ldw	ra,8(sp)
  80827c:	dc000117 	ldw	r16,4(sp)
  808280:	dec00304 	addi	sp,sp,12
  808284:	08080201 	jmpi	808020 <__sflush_r>
  808288:	d9400015 	stw	r5,0(sp)
  80828c:	08024280 	call	802428 <__sinit>
  808290:	d9400017 	ldw	r5,0(sp)
  808294:	003ff006 	br	808258 <__alt_mem_onchip_mem+0xff788258>

00808298 <fflush>:
  808298:	20000526 	beq	r4,zero,8082b0 <fflush+0x18>
  80829c:	00802074 	movhi	r2,129
  8082a0:	1097e104 	addi	r2,r2,24452
  8082a4:	200b883a 	mov	r5,r4
  8082a8:	11000017 	ldw	r4,0(r2)
  8082ac:	080823c1 	jmpi	80823c <_fflush_r>
  8082b0:	00802074 	movhi	r2,129
  8082b4:	1097e004 	addi	r2,r2,24448
  8082b8:	11000017 	ldw	r4,0(r2)
  8082bc:	01402074 	movhi	r5,129
  8082c0:	29608f04 	addi	r5,r5,-32196
  8082c4:	0802b701 	jmpi	802b70 <_fwalk_reent>

008082c8 <__sflags>:
  8082c8:	28800007 	ldb	r2,0(r5)
  8082cc:	00c01c84 	movi	r3,114
  8082d0:	10c02426 	beq	r2,r3,808364 <__sflags+0x9c>
  8082d4:	00c01dc4 	movi	r3,119
  8082d8:	10c01e26 	beq	r2,r3,808354 <__sflags+0x8c>
  8082dc:	00c01844 	movi	r3,97
  8082e0:	10c00426 	beq	r2,r3,8082f4 <__sflags+0x2c>
  8082e4:	00800584 	movi	r2,22
  8082e8:	20800015 	stw	r2,0(r4)
  8082ec:	0005883a 	mov	r2,zero
  8082f0:	f800283a 	ret
  8082f4:	02c08204 	movi	r11,520
  8082f8:	01000044 	movi	r4,1
  8082fc:	00804204 	movi	r2,264
  808300:	01c00ac4 	movi	r7,43
  808304:	02bff8c4 	movi	r10,-29
  808308:	027fff04 	movi	r9,-4
  80830c:	02001e04 	movi	r8,120
  808310:	29400044 	addi	r5,r5,1
  808314:	28c00007 	ldb	r3,0(r5)
  808318:	18000626 	beq	r3,zero,808334 <__sflags+0x6c>
  80831c:	19c00826 	beq	r3,r7,808340 <__sflags+0x78>
  808320:	1a3ffb1e 	bne	r3,r8,808310 <__alt_mem_onchip_mem+0xff788310>
  808324:	29400044 	addi	r5,r5,1
  808328:	28c00007 	ldb	r3,0(r5)
  80832c:	21020014 	ori	r4,r4,2048
  808330:	183ffa1e 	bne	r3,zero,80831c <__alt_mem_onchip_mem+0xff78831c>
  808334:	22c8b03a 	or	r4,r4,r11
  808338:	31000015 	stw	r4,0(r6)
  80833c:	f800283a 	ret
  808340:	1284703a 	and	r2,r2,r10
  808344:	2248703a 	and	r4,r4,r9
  808348:	10800414 	ori	r2,r2,16
  80834c:	21000094 	ori	r4,r4,2
  808350:	003fef06 	br	808310 <__alt_mem_onchip_mem+0xff788310>
  808354:	02c18004 	movi	r11,1536
  808358:	01000044 	movi	r4,1
  80835c:	00800204 	movi	r2,8
  808360:	003fe706 	br	808300 <__alt_mem_onchip_mem+0xff788300>
  808364:	0017883a 	mov	r11,zero
  808368:	0009883a 	mov	r4,zero
  80836c:	00800104 	movi	r2,4
  808370:	003fe306 	br	808300 <__alt_mem_onchip_mem+0xff788300>

00808374 <_malloc_trim_r>:
  808374:	defffb04 	addi	sp,sp,-20
  808378:	dcc00315 	stw	r19,12(sp)
  80837c:	04c02074 	movhi	r19,129
  808380:	dc800215 	stw	r18,8(sp)
  808384:	dc400115 	stw	r17,4(sp)
  808388:	dc000015 	stw	r16,0(sp)
  80838c:	dfc00415 	stw	ra,16(sp)
  808390:	2821883a 	mov	r16,r5
  808394:	9cd1bc04 	addi	r19,r19,18160
  808398:	2025883a 	mov	r18,r4
  80839c:	081013c0 	call	81013c <__malloc_lock>
  8083a0:	98800217 	ldw	r2,8(r19)
  8083a4:	14400117 	ldw	r17,4(r2)
  8083a8:	00bfff04 	movi	r2,-4
  8083ac:	88a2703a 	and	r17,r17,r2
  8083b0:	8c21c83a 	sub	r16,r17,r16
  8083b4:	8403fbc4 	addi	r16,r16,4079
  8083b8:	8020d33a 	srli	r16,r16,12
  8083bc:	0083ffc4 	movi	r2,4095
  8083c0:	843fffc4 	addi	r16,r16,-1
  8083c4:	8020933a 	slli	r16,r16,12
  8083c8:	1400060e 	bge	r2,r16,8083e4 <_malloc_trim_r+0x70>
  8083cc:	000b883a 	mov	r5,zero
  8083d0:	9009883a 	mov	r4,r18
  8083d4:	0803c840 	call	803c84 <_sbrk_r>
  8083d8:	98c00217 	ldw	r3,8(r19)
  8083dc:	1c47883a 	add	r3,r3,r17
  8083e0:	10c00a26 	beq	r2,r3,80840c <_malloc_trim_r+0x98>
  8083e4:	9009883a 	mov	r4,r18
  8083e8:	08101600 	call	810160 <__malloc_unlock>
  8083ec:	0005883a 	mov	r2,zero
  8083f0:	dfc00417 	ldw	ra,16(sp)
  8083f4:	dcc00317 	ldw	r19,12(sp)
  8083f8:	dc800217 	ldw	r18,8(sp)
  8083fc:	dc400117 	ldw	r17,4(sp)
  808400:	dc000017 	ldw	r16,0(sp)
  808404:	dec00504 	addi	sp,sp,20
  808408:	f800283a 	ret
  80840c:	040bc83a 	sub	r5,zero,r16
  808410:	9009883a 	mov	r4,r18
  808414:	0803c840 	call	803c84 <_sbrk_r>
  808418:	00ffffc4 	movi	r3,-1
  80841c:	10c00d26 	beq	r2,r3,808454 <_malloc_trim_r+0xe0>
  808420:	00c02074 	movhi	r3,129
  808424:	18df5004 	addi	r3,r3,32064
  808428:	18800017 	ldw	r2,0(r3)
  80842c:	99000217 	ldw	r4,8(r19)
  808430:	8c23c83a 	sub	r17,r17,r16
  808434:	8c400054 	ori	r17,r17,1
  808438:	1421c83a 	sub	r16,r2,r16
  80843c:	24400115 	stw	r17,4(r4)
  808440:	9009883a 	mov	r4,r18
  808444:	1c000015 	stw	r16,0(r3)
  808448:	08101600 	call	810160 <__malloc_unlock>
  80844c:	00800044 	movi	r2,1
  808450:	003fe706 	br	8083f0 <__alt_mem_onchip_mem+0xff7883f0>
  808454:	000b883a 	mov	r5,zero
  808458:	9009883a 	mov	r4,r18
  80845c:	0803c840 	call	803c84 <_sbrk_r>
  808460:	99000217 	ldw	r4,8(r19)
  808464:	014003c4 	movi	r5,15
  808468:	1107c83a 	sub	r3,r2,r4
  80846c:	28ffdd0e 	bge	r5,r3,8083e4 <__alt_mem_onchip_mem+0xff7883e4>
  808470:	01402074 	movhi	r5,129
  808474:	2957e204 	addi	r5,r5,24456
  808478:	29400017 	ldw	r5,0(r5)
  80847c:	18c00054 	ori	r3,r3,1
  808480:	20c00115 	stw	r3,4(r4)
  808484:	00c02074 	movhi	r3,129
  808488:	1145c83a 	sub	r2,r2,r5
  80848c:	18df5004 	addi	r3,r3,32064
  808490:	18800015 	stw	r2,0(r3)
  808494:	003fd306 	br	8083e4 <__alt_mem_onchip_mem+0xff7883e4>

00808498 <_free_r>:
  808498:	28004126 	beq	r5,zero,8085a0 <_free_r+0x108>
  80849c:	defffd04 	addi	sp,sp,-12
  8084a0:	dc400115 	stw	r17,4(sp)
  8084a4:	dc000015 	stw	r16,0(sp)
  8084a8:	2023883a 	mov	r17,r4
  8084ac:	2821883a 	mov	r16,r5
  8084b0:	dfc00215 	stw	ra,8(sp)
  8084b4:	081013c0 	call	81013c <__malloc_lock>
  8084b8:	81ffff17 	ldw	r7,-4(r16)
  8084bc:	00bfff84 	movi	r2,-2
  8084c0:	01002074 	movhi	r4,129
  8084c4:	81bffe04 	addi	r6,r16,-8
  8084c8:	3884703a 	and	r2,r7,r2
  8084cc:	2111bc04 	addi	r4,r4,18160
  8084d0:	308b883a 	add	r5,r6,r2
  8084d4:	2a400117 	ldw	r9,4(r5)
  8084d8:	22000217 	ldw	r8,8(r4)
  8084dc:	00ffff04 	movi	r3,-4
  8084e0:	48c6703a 	and	r3,r9,r3
  8084e4:	2a005726 	beq	r5,r8,808644 <_free_r+0x1ac>
  8084e8:	28c00115 	stw	r3,4(r5)
  8084ec:	39c0004c 	andi	r7,r7,1
  8084f0:	3800091e 	bne	r7,zero,808518 <_free_r+0x80>
  8084f4:	823ffe17 	ldw	r8,-8(r16)
  8084f8:	22400204 	addi	r9,r4,8
  8084fc:	320dc83a 	sub	r6,r6,r8
  808500:	31c00217 	ldw	r7,8(r6)
  808504:	1205883a 	add	r2,r2,r8
  808508:	3a406526 	beq	r7,r9,8086a0 <_free_r+0x208>
  80850c:	32000317 	ldw	r8,12(r6)
  808510:	3a000315 	stw	r8,12(r7)
  808514:	41c00215 	stw	r7,8(r8)
  808518:	28cf883a 	add	r7,r5,r3
  80851c:	39c00117 	ldw	r7,4(r7)
  808520:	39c0004c 	andi	r7,r7,1
  808524:	38003a26 	beq	r7,zero,808610 <_free_r+0x178>
  808528:	10c00054 	ori	r3,r2,1
  80852c:	30c00115 	stw	r3,4(r6)
  808530:	3087883a 	add	r3,r6,r2
  808534:	18800015 	stw	r2,0(r3)
  808538:	00c07fc4 	movi	r3,511
  80853c:	18801936 	bltu	r3,r2,8085a4 <_free_r+0x10c>
  808540:	1004d0fa 	srli	r2,r2,3
  808544:	01c00044 	movi	r7,1
  808548:	21400117 	ldw	r5,4(r4)
  80854c:	10c00044 	addi	r3,r2,1
  808550:	18c7883a 	add	r3,r3,r3
  808554:	1005d0ba 	srai	r2,r2,2
  808558:	18c7883a 	add	r3,r3,r3
  80855c:	18c7883a 	add	r3,r3,r3
  808560:	1907883a 	add	r3,r3,r4
  808564:	3884983a 	sll	r2,r7,r2
  808568:	19c00017 	ldw	r7,0(r3)
  80856c:	1a3ffe04 	addi	r8,r3,-8
  808570:	1144b03a 	or	r2,r2,r5
  808574:	32000315 	stw	r8,12(r6)
  808578:	31c00215 	stw	r7,8(r6)
  80857c:	20800115 	stw	r2,4(r4)
  808580:	19800015 	stw	r6,0(r3)
  808584:	39800315 	stw	r6,12(r7)
  808588:	8809883a 	mov	r4,r17
  80858c:	dfc00217 	ldw	ra,8(sp)
  808590:	dc400117 	ldw	r17,4(sp)
  808594:	dc000017 	ldw	r16,0(sp)
  808598:	dec00304 	addi	sp,sp,12
  80859c:	08101601 	jmpi	810160 <__malloc_unlock>
  8085a0:	f800283a 	ret
  8085a4:	100ad27a 	srli	r5,r2,9
  8085a8:	00c00104 	movi	r3,4
  8085ac:	19404a36 	bltu	r3,r5,8086d8 <_free_r+0x240>
  8085b0:	100ad1ba 	srli	r5,r2,6
  8085b4:	28c00e44 	addi	r3,r5,57
  8085b8:	18c7883a 	add	r3,r3,r3
  8085bc:	29400e04 	addi	r5,r5,56
  8085c0:	18c7883a 	add	r3,r3,r3
  8085c4:	18c7883a 	add	r3,r3,r3
  8085c8:	1909883a 	add	r4,r3,r4
  8085cc:	20c00017 	ldw	r3,0(r4)
  8085d0:	01c02074 	movhi	r7,129
  8085d4:	213ffe04 	addi	r4,r4,-8
  8085d8:	39d1bc04 	addi	r7,r7,18160
  8085dc:	20c04426 	beq	r4,r3,8086f0 <_free_r+0x258>
  8085e0:	01ffff04 	movi	r7,-4
  8085e4:	19400117 	ldw	r5,4(r3)
  8085e8:	29ca703a 	and	r5,r5,r7
  8085ec:	1140022e 	bgeu	r2,r5,8085f8 <_free_r+0x160>
  8085f0:	18c00217 	ldw	r3,8(r3)
  8085f4:	20fffb1e 	bne	r4,r3,8085e4 <__alt_mem_onchip_mem+0xff7885e4>
  8085f8:	19000317 	ldw	r4,12(r3)
  8085fc:	31000315 	stw	r4,12(r6)
  808600:	30c00215 	stw	r3,8(r6)
  808604:	21800215 	stw	r6,8(r4)
  808608:	19800315 	stw	r6,12(r3)
  80860c:	003fde06 	br	808588 <__alt_mem_onchip_mem+0xff788588>
  808610:	29c00217 	ldw	r7,8(r5)
  808614:	10c5883a 	add	r2,r2,r3
  808618:	00c02074 	movhi	r3,129
  80861c:	18d1be04 	addi	r3,r3,18168
  808620:	38c03b26 	beq	r7,r3,808710 <_free_r+0x278>
  808624:	2a000317 	ldw	r8,12(r5)
  808628:	11400054 	ori	r5,r2,1
  80862c:	3087883a 	add	r3,r6,r2
  808630:	3a000315 	stw	r8,12(r7)
  808634:	41c00215 	stw	r7,8(r8)
  808638:	31400115 	stw	r5,4(r6)
  80863c:	18800015 	stw	r2,0(r3)
  808640:	003fbd06 	br	808538 <__alt_mem_onchip_mem+0xff788538>
  808644:	39c0004c 	andi	r7,r7,1
  808648:	10c5883a 	add	r2,r2,r3
  80864c:	3800071e 	bne	r7,zero,80866c <_free_r+0x1d4>
  808650:	81fffe17 	ldw	r7,-8(r16)
  808654:	31cdc83a 	sub	r6,r6,r7
  808658:	30c00317 	ldw	r3,12(r6)
  80865c:	31400217 	ldw	r5,8(r6)
  808660:	11c5883a 	add	r2,r2,r7
  808664:	28c00315 	stw	r3,12(r5)
  808668:	19400215 	stw	r5,8(r3)
  80866c:	10c00054 	ori	r3,r2,1
  808670:	30c00115 	stw	r3,4(r6)
  808674:	00c02074 	movhi	r3,129
  808678:	18d7e304 	addi	r3,r3,24460
  80867c:	18c00017 	ldw	r3,0(r3)
  808680:	21800215 	stw	r6,8(r4)
  808684:	10ffc036 	bltu	r2,r3,808588 <__alt_mem_onchip_mem+0xff788588>
  808688:	00802074 	movhi	r2,129
  80868c:	109f4504 	addi	r2,r2,32020
  808690:	11400017 	ldw	r5,0(r2)
  808694:	8809883a 	mov	r4,r17
  808698:	08083740 	call	808374 <_malloc_trim_r>
  80869c:	003fba06 	br	808588 <__alt_mem_onchip_mem+0xff788588>
  8086a0:	28c9883a 	add	r4,r5,r3
  8086a4:	21000117 	ldw	r4,4(r4)
  8086a8:	2100004c 	andi	r4,r4,1
  8086ac:	2000391e 	bne	r4,zero,808794 <_free_r+0x2fc>
  8086b0:	29c00217 	ldw	r7,8(r5)
  8086b4:	29000317 	ldw	r4,12(r5)
  8086b8:	1885883a 	add	r2,r3,r2
  8086bc:	10c00054 	ori	r3,r2,1
  8086c0:	39000315 	stw	r4,12(r7)
  8086c4:	21c00215 	stw	r7,8(r4)
  8086c8:	30c00115 	stw	r3,4(r6)
  8086cc:	308d883a 	add	r6,r6,r2
  8086d0:	30800015 	stw	r2,0(r6)
  8086d4:	003fac06 	br	808588 <__alt_mem_onchip_mem+0xff788588>
  8086d8:	00c00504 	movi	r3,20
  8086dc:	19401536 	bltu	r3,r5,808734 <_free_r+0x29c>
  8086e0:	28c01704 	addi	r3,r5,92
  8086e4:	18c7883a 	add	r3,r3,r3
  8086e8:	294016c4 	addi	r5,r5,91
  8086ec:	003fb406 	br	8085c0 <__alt_mem_onchip_mem+0xff7885c0>
  8086f0:	280bd0ba 	srai	r5,r5,2
  8086f4:	00c00044 	movi	r3,1
  8086f8:	38800117 	ldw	r2,4(r7)
  8086fc:	194a983a 	sll	r5,r3,r5
  808700:	2007883a 	mov	r3,r4
  808704:	2884b03a 	or	r2,r5,r2
  808708:	38800115 	stw	r2,4(r7)
  80870c:	003fbb06 	br	8085fc <__alt_mem_onchip_mem+0xff7885fc>
  808710:	21800515 	stw	r6,20(r4)
  808714:	21800415 	stw	r6,16(r4)
  808718:	10c00054 	ori	r3,r2,1
  80871c:	31c00315 	stw	r7,12(r6)
  808720:	31c00215 	stw	r7,8(r6)
  808724:	30c00115 	stw	r3,4(r6)
  808728:	308d883a 	add	r6,r6,r2
  80872c:	30800015 	stw	r2,0(r6)
  808730:	003f9506 	br	808588 <__alt_mem_onchip_mem+0xff788588>
  808734:	00c01504 	movi	r3,84
  808738:	19400536 	bltu	r3,r5,808750 <_free_r+0x2b8>
  80873c:	100ad33a 	srli	r5,r2,12
  808740:	28c01bc4 	addi	r3,r5,111
  808744:	18c7883a 	add	r3,r3,r3
  808748:	29401b84 	addi	r5,r5,110
  80874c:	003f9c06 	br	8085c0 <__alt_mem_onchip_mem+0xff7885c0>
  808750:	00c05504 	movi	r3,340
  808754:	19400536 	bltu	r3,r5,80876c <_free_r+0x2d4>
  808758:	100ad3fa 	srli	r5,r2,15
  80875c:	28c01e04 	addi	r3,r5,120
  808760:	18c7883a 	add	r3,r3,r3
  808764:	29401dc4 	addi	r5,r5,119
  808768:	003f9506 	br	8085c0 <__alt_mem_onchip_mem+0xff7885c0>
  80876c:	00c15504 	movi	r3,1364
  808770:	19400536 	bltu	r3,r5,808788 <_free_r+0x2f0>
  808774:	100ad4ba 	srli	r5,r2,18
  808778:	28c01f44 	addi	r3,r5,125
  80877c:	18c7883a 	add	r3,r3,r3
  808780:	29401f04 	addi	r5,r5,124
  808784:	003f8e06 	br	8085c0 <__alt_mem_onchip_mem+0xff7885c0>
  808788:	00c03f84 	movi	r3,254
  80878c:	01401f84 	movi	r5,126
  808790:	003f8b06 	br	8085c0 <__alt_mem_onchip_mem+0xff7885c0>
  808794:	10c00054 	ori	r3,r2,1
  808798:	30c00115 	stw	r3,4(r6)
  80879c:	308d883a 	add	r6,r6,r2
  8087a0:	30800015 	stw	r2,0(r6)
  8087a4:	003f7806 	br	808588 <__alt_mem_onchip_mem+0xff788588>

008087a8 <__sfvwrite_r>:
  8087a8:	30800217 	ldw	r2,8(r6)
  8087ac:	10006726 	beq	r2,zero,80894c <__sfvwrite_r+0x1a4>
  8087b0:	28c0030b 	ldhu	r3,12(r5)
  8087b4:	defff404 	addi	sp,sp,-48
  8087b8:	dd400715 	stw	r21,28(sp)
  8087bc:	dd000615 	stw	r20,24(sp)
  8087c0:	dc000215 	stw	r16,8(sp)
  8087c4:	dfc00b15 	stw	ra,44(sp)
  8087c8:	df000a15 	stw	fp,40(sp)
  8087cc:	ddc00915 	stw	r23,36(sp)
  8087d0:	dd800815 	stw	r22,32(sp)
  8087d4:	dcc00515 	stw	r19,20(sp)
  8087d8:	dc800415 	stw	r18,16(sp)
  8087dc:	dc400315 	stw	r17,12(sp)
  8087e0:	1880020c 	andi	r2,r3,8
  8087e4:	2821883a 	mov	r16,r5
  8087e8:	202b883a 	mov	r21,r4
  8087ec:	3029883a 	mov	r20,r6
  8087f0:	10002726 	beq	r2,zero,808890 <__sfvwrite_r+0xe8>
  8087f4:	28800417 	ldw	r2,16(r5)
  8087f8:	10002526 	beq	r2,zero,808890 <__sfvwrite_r+0xe8>
  8087fc:	1880008c 	andi	r2,r3,2
  808800:	a4400017 	ldw	r17,0(r20)
  808804:	10002a26 	beq	r2,zero,8088b0 <__sfvwrite_r+0x108>
  808808:	05a00034 	movhi	r22,32768
  80880c:	0027883a 	mov	r19,zero
  808810:	0025883a 	mov	r18,zero
  808814:	b5bf0004 	addi	r22,r22,-1024
  808818:	980d883a 	mov	r6,r19
  80881c:	a809883a 	mov	r4,r21
  808820:	90004626 	beq	r18,zero,80893c <__sfvwrite_r+0x194>
  808824:	900f883a 	mov	r7,r18
  808828:	b480022e 	bgeu	r22,r18,808834 <__sfvwrite_r+0x8c>
  80882c:	01e00034 	movhi	r7,32768
  808830:	39ff0004 	addi	r7,r7,-1024
  808834:	80800917 	ldw	r2,36(r16)
  808838:	81400717 	ldw	r5,28(r16)
  80883c:	103ee83a 	callr	r2
  808840:	0080570e 	bge	zero,r2,8089a0 <__sfvwrite_r+0x1f8>
  808844:	a0c00217 	ldw	r3,8(r20)
  808848:	98a7883a 	add	r19,r19,r2
  80884c:	90a5c83a 	sub	r18,r18,r2
  808850:	1885c83a 	sub	r2,r3,r2
  808854:	a0800215 	stw	r2,8(r20)
  808858:	103fef1e 	bne	r2,zero,808818 <__alt_mem_onchip_mem+0xff788818>
  80885c:	0005883a 	mov	r2,zero
  808860:	dfc00b17 	ldw	ra,44(sp)
  808864:	df000a17 	ldw	fp,40(sp)
  808868:	ddc00917 	ldw	r23,36(sp)
  80886c:	dd800817 	ldw	r22,32(sp)
  808870:	dd400717 	ldw	r21,28(sp)
  808874:	dd000617 	ldw	r20,24(sp)
  808878:	dcc00517 	ldw	r19,20(sp)
  80887c:	dc800417 	ldw	r18,16(sp)
  808880:	dc400317 	ldw	r17,12(sp)
  808884:	dc000217 	ldw	r16,8(sp)
  808888:	dec00c04 	addi	sp,sp,48
  80888c:	f800283a 	ret
  808890:	800b883a 	mov	r5,r16
  808894:	a809883a 	mov	r4,r21
  808898:	08064ec0 	call	8064ec <__swsetup_r>
  80889c:	1000eb1e 	bne	r2,zero,808c4c <__sfvwrite_r+0x4a4>
  8088a0:	80c0030b 	ldhu	r3,12(r16)
  8088a4:	a4400017 	ldw	r17,0(r20)
  8088a8:	1880008c 	andi	r2,r3,2
  8088ac:	103fd61e 	bne	r2,zero,808808 <__alt_mem_onchip_mem+0xff788808>
  8088b0:	1880004c 	andi	r2,r3,1
  8088b4:	10003f1e 	bne	r2,zero,8089b4 <__sfvwrite_r+0x20c>
  8088b8:	0039883a 	mov	fp,zero
  8088bc:	0025883a 	mov	r18,zero
  8088c0:	90001a26 	beq	r18,zero,80892c <__sfvwrite_r+0x184>
  8088c4:	1880800c 	andi	r2,r3,512
  8088c8:	84c00217 	ldw	r19,8(r16)
  8088cc:	10002126 	beq	r2,zero,808954 <__sfvwrite_r+0x1ac>
  8088d0:	982f883a 	mov	r23,r19
  8088d4:	94c09336 	bltu	r18,r19,808b24 <__sfvwrite_r+0x37c>
  8088d8:	1881200c 	andi	r2,r3,1152
  8088dc:	10009e1e 	bne	r2,zero,808b58 <__sfvwrite_r+0x3b0>
  8088e0:	81000017 	ldw	r4,0(r16)
  8088e4:	b80d883a 	mov	r6,r23
  8088e8:	e00b883a 	mov	r5,fp
  8088ec:	08090200 	call	809020 <memmove>
  8088f0:	80c00217 	ldw	r3,8(r16)
  8088f4:	81000017 	ldw	r4,0(r16)
  8088f8:	9005883a 	mov	r2,r18
  8088fc:	1ce7c83a 	sub	r19,r3,r19
  808900:	25cf883a 	add	r7,r4,r23
  808904:	84c00215 	stw	r19,8(r16)
  808908:	81c00015 	stw	r7,0(r16)
  80890c:	a0c00217 	ldw	r3,8(r20)
  808910:	e0b9883a 	add	fp,fp,r2
  808914:	90a5c83a 	sub	r18,r18,r2
  808918:	18a7c83a 	sub	r19,r3,r2
  80891c:	a4c00215 	stw	r19,8(r20)
  808920:	983fce26 	beq	r19,zero,80885c <__alt_mem_onchip_mem+0xff78885c>
  808924:	80c0030b 	ldhu	r3,12(r16)
  808928:	903fe61e 	bne	r18,zero,8088c4 <__alt_mem_onchip_mem+0xff7888c4>
  80892c:	8f000017 	ldw	fp,0(r17)
  808930:	8c800117 	ldw	r18,4(r17)
  808934:	8c400204 	addi	r17,r17,8
  808938:	003fe106 	br	8088c0 <__alt_mem_onchip_mem+0xff7888c0>
  80893c:	8cc00017 	ldw	r19,0(r17)
  808940:	8c800117 	ldw	r18,4(r17)
  808944:	8c400204 	addi	r17,r17,8
  808948:	003fb306 	br	808818 <__alt_mem_onchip_mem+0xff788818>
  80894c:	0005883a 	mov	r2,zero
  808950:	f800283a 	ret
  808954:	81000017 	ldw	r4,0(r16)
  808958:	80800417 	ldw	r2,16(r16)
  80895c:	11005736 	bltu	r2,r4,808abc <__sfvwrite_r+0x314>
  808960:	85c00517 	ldw	r23,20(r16)
  808964:	95c05536 	bltu	r18,r23,808abc <__sfvwrite_r+0x314>
  808968:	00a00034 	movhi	r2,32768
  80896c:	10bfffc4 	addi	r2,r2,-1
  808970:	9009883a 	mov	r4,r18
  808974:	1480012e 	bgeu	r2,r18,80897c <__sfvwrite_r+0x1d4>
  808978:	1009883a 	mov	r4,r2
  80897c:	b80b883a 	mov	r5,r23
  808980:	080d0f80 	call	80d0f8 <__divsi3>
  808984:	15cf383a 	mul	r7,r2,r23
  808988:	81400717 	ldw	r5,28(r16)
  80898c:	80800917 	ldw	r2,36(r16)
  808990:	e00d883a 	mov	r6,fp
  808994:	a809883a 	mov	r4,r21
  808998:	103ee83a 	callr	r2
  80899c:	00bfdb16 	blt	zero,r2,80890c <__alt_mem_onchip_mem+0xff78890c>
  8089a0:	8080030b 	ldhu	r2,12(r16)
  8089a4:	10801014 	ori	r2,r2,64
  8089a8:	8080030d 	sth	r2,12(r16)
  8089ac:	00bfffc4 	movi	r2,-1
  8089b0:	003fab06 	br	808860 <__alt_mem_onchip_mem+0xff788860>
  8089b4:	0027883a 	mov	r19,zero
  8089b8:	0011883a 	mov	r8,zero
  8089bc:	0039883a 	mov	fp,zero
  8089c0:	0025883a 	mov	r18,zero
  8089c4:	90001f26 	beq	r18,zero,808a44 <__sfvwrite_r+0x29c>
  8089c8:	40005a26 	beq	r8,zero,808b34 <__sfvwrite_r+0x38c>
  8089cc:	982d883a 	mov	r22,r19
  8089d0:	94c0012e 	bgeu	r18,r19,8089d8 <__sfvwrite_r+0x230>
  8089d4:	902d883a 	mov	r22,r18
  8089d8:	81000017 	ldw	r4,0(r16)
  8089dc:	80800417 	ldw	r2,16(r16)
  8089e0:	b02f883a 	mov	r23,r22
  8089e4:	81c00517 	ldw	r7,20(r16)
  8089e8:	1100032e 	bgeu	r2,r4,8089f8 <__sfvwrite_r+0x250>
  8089ec:	80c00217 	ldw	r3,8(r16)
  8089f0:	38c7883a 	add	r3,r7,r3
  8089f4:	1d801816 	blt	r3,r22,808a58 <__sfvwrite_r+0x2b0>
  8089f8:	b1c03e16 	blt	r22,r7,808af4 <__sfvwrite_r+0x34c>
  8089fc:	80800917 	ldw	r2,36(r16)
  808a00:	81400717 	ldw	r5,28(r16)
  808a04:	e00d883a 	mov	r6,fp
  808a08:	da000115 	stw	r8,4(sp)
  808a0c:	a809883a 	mov	r4,r21
  808a10:	103ee83a 	callr	r2
  808a14:	102f883a 	mov	r23,r2
  808a18:	da000117 	ldw	r8,4(sp)
  808a1c:	00bfe00e 	bge	zero,r2,8089a0 <__alt_mem_onchip_mem+0xff7889a0>
  808a20:	9de7c83a 	sub	r19,r19,r23
  808a24:	98001f26 	beq	r19,zero,808aa4 <__sfvwrite_r+0x2fc>
  808a28:	a0800217 	ldw	r2,8(r20)
  808a2c:	e5f9883a 	add	fp,fp,r23
  808a30:	95e5c83a 	sub	r18,r18,r23
  808a34:	15efc83a 	sub	r23,r2,r23
  808a38:	a5c00215 	stw	r23,8(r20)
  808a3c:	b83f8726 	beq	r23,zero,80885c <__alt_mem_onchip_mem+0xff78885c>
  808a40:	903fe11e 	bne	r18,zero,8089c8 <__alt_mem_onchip_mem+0xff7889c8>
  808a44:	8f000017 	ldw	fp,0(r17)
  808a48:	8c800117 	ldw	r18,4(r17)
  808a4c:	0011883a 	mov	r8,zero
  808a50:	8c400204 	addi	r17,r17,8
  808a54:	003fdb06 	br	8089c4 <__alt_mem_onchip_mem+0xff7889c4>
  808a58:	180d883a 	mov	r6,r3
  808a5c:	e00b883a 	mov	r5,fp
  808a60:	da000115 	stw	r8,4(sp)
  808a64:	d8c00015 	stw	r3,0(sp)
  808a68:	08090200 	call	809020 <memmove>
  808a6c:	d8c00017 	ldw	r3,0(sp)
  808a70:	80800017 	ldw	r2,0(r16)
  808a74:	800b883a 	mov	r5,r16
  808a78:	a809883a 	mov	r4,r21
  808a7c:	10c5883a 	add	r2,r2,r3
  808a80:	80800015 	stw	r2,0(r16)
  808a84:	d8c00015 	stw	r3,0(sp)
  808a88:	080823c0 	call	80823c <_fflush_r>
  808a8c:	d8c00017 	ldw	r3,0(sp)
  808a90:	da000117 	ldw	r8,4(sp)
  808a94:	103fc21e 	bne	r2,zero,8089a0 <__alt_mem_onchip_mem+0xff7889a0>
  808a98:	182f883a 	mov	r23,r3
  808a9c:	9de7c83a 	sub	r19,r19,r23
  808aa0:	983fe11e 	bne	r19,zero,808a28 <__alt_mem_onchip_mem+0xff788a28>
  808aa4:	800b883a 	mov	r5,r16
  808aa8:	a809883a 	mov	r4,r21
  808aac:	080823c0 	call	80823c <_fflush_r>
  808ab0:	103fbb1e 	bne	r2,zero,8089a0 <__alt_mem_onchip_mem+0xff7889a0>
  808ab4:	0011883a 	mov	r8,zero
  808ab8:	003fdb06 	br	808a28 <__alt_mem_onchip_mem+0xff788a28>
  808abc:	94c0012e 	bgeu	r18,r19,808ac4 <__sfvwrite_r+0x31c>
  808ac0:	9027883a 	mov	r19,r18
  808ac4:	980d883a 	mov	r6,r19
  808ac8:	e00b883a 	mov	r5,fp
  808acc:	08090200 	call	809020 <memmove>
  808ad0:	80800217 	ldw	r2,8(r16)
  808ad4:	80c00017 	ldw	r3,0(r16)
  808ad8:	14c5c83a 	sub	r2,r2,r19
  808adc:	1cc7883a 	add	r3,r3,r19
  808ae0:	80800215 	stw	r2,8(r16)
  808ae4:	80c00015 	stw	r3,0(r16)
  808ae8:	10004326 	beq	r2,zero,808bf8 <__sfvwrite_r+0x450>
  808aec:	9805883a 	mov	r2,r19
  808af0:	003f8606 	br	80890c <__alt_mem_onchip_mem+0xff78890c>
  808af4:	b00d883a 	mov	r6,r22
  808af8:	e00b883a 	mov	r5,fp
  808afc:	da000115 	stw	r8,4(sp)
  808b00:	08090200 	call	809020 <memmove>
  808b04:	80800217 	ldw	r2,8(r16)
  808b08:	80c00017 	ldw	r3,0(r16)
  808b0c:	da000117 	ldw	r8,4(sp)
  808b10:	1585c83a 	sub	r2,r2,r22
  808b14:	1dad883a 	add	r22,r3,r22
  808b18:	80800215 	stw	r2,8(r16)
  808b1c:	85800015 	stw	r22,0(r16)
  808b20:	003fbf06 	br	808a20 <__alt_mem_onchip_mem+0xff788a20>
  808b24:	81000017 	ldw	r4,0(r16)
  808b28:	9027883a 	mov	r19,r18
  808b2c:	902f883a 	mov	r23,r18
  808b30:	003f6c06 	br	8088e4 <__alt_mem_onchip_mem+0xff7888e4>
  808b34:	900d883a 	mov	r6,r18
  808b38:	01400284 	movi	r5,10
  808b3c:	e009883a 	mov	r4,fp
  808b40:	0808df40 	call	808df4 <memchr>
  808b44:	10003e26 	beq	r2,zero,808c40 <__sfvwrite_r+0x498>
  808b48:	10800044 	addi	r2,r2,1
  808b4c:	1727c83a 	sub	r19,r2,fp
  808b50:	02000044 	movi	r8,1
  808b54:	003f9d06 	br	8089cc <__alt_mem_onchip_mem+0xff7889cc>
  808b58:	80800517 	ldw	r2,20(r16)
  808b5c:	81400417 	ldw	r5,16(r16)
  808b60:	81c00017 	ldw	r7,0(r16)
  808b64:	10a7883a 	add	r19,r2,r2
  808b68:	9885883a 	add	r2,r19,r2
  808b6c:	1026d7fa 	srli	r19,r2,31
  808b70:	396dc83a 	sub	r22,r7,r5
  808b74:	b1000044 	addi	r4,r22,1
  808b78:	9885883a 	add	r2,r19,r2
  808b7c:	1027d07a 	srai	r19,r2,1
  808b80:	2485883a 	add	r2,r4,r18
  808b84:	980d883a 	mov	r6,r19
  808b88:	9880022e 	bgeu	r19,r2,808b94 <__sfvwrite_r+0x3ec>
  808b8c:	1027883a 	mov	r19,r2
  808b90:	100d883a 	mov	r6,r2
  808b94:	18c1000c 	andi	r3,r3,1024
  808b98:	18001c26 	beq	r3,zero,808c0c <__sfvwrite_r+0x464>
  808b9c:	300b883a 	mov	r5,r6
  808ba0:	a809883a 	mov	r4,r21
  808ba4:	0802f180 	call	802f18 <_malloc_r>
  808ba8:	102f883a 	mov	r23,r2
  808bac:	10002926 	beq	r2,zero,808c54 <__sfvwrite_r+0x4ac>
  808bb0:	81400417 	ldw	r5,16(r16)
  808bb4:	b00d883a 	mov	r6,r22
  808bb8:	1009883a 	mov	r4,r2
  808bbc:	0808ed80 	call	808ed8 <memcpy>
  808bc0:	8080030b 	ldhu	r2,12(r16)
  808bc4:	00fedfc4 	movi	r3,-1153
  808bc8:	10c4703a 	and	r2,r2,r3
  808bcc:	10802014 	ori	r2,r2,128
  808bd0:	8080030d 	sth	r2,12(r16)
  808bd4:	bd89883a 	add	r4,r23,r22
  808bd8:	9d8fc83a 	sub	r7,r19,r22
  808bdc:	85c00415 	stw	r23,16(r16)
  808be0:	84c00515 	stw	r19,20(r16)
  808be4:	81000015 	stw	r4,0(r16)
  808be8:	9027883a 	mov	r19,r18
  808bec:	81c00215 	stw	r7,8(r16)
  808bf0:	902f883a 	mov	r23,r18
  808bf4:	003f3b06 	br	8088e4 <__alt_mem_onchip_mem+0xff7888e4>
  808bf8:	800b883a 	mov	r5,r16
  808bfc:	a809883a 	mov	r4,r21
  808c00:	080823c0 	call	80823c <_fflush_r>
  808c04:	103fb926 	beq	r2,zero,808aec <__alt_mem_onchip_mem+0xff788aec>
  808c08:	003f6506 	br	8089a0 <__alt_mem_onchip_mem+0xff7889a0>
  808c0c:	a809883a 	mov	r4,r21
  808c10:	080a3400 	call	80a340 <_realloc_r>
  808c14:	102f883a 	mov	r23,r2
  808c18:	103fee1e 	bne	r2,zero,808bd4 <__alt_mem_onchip_mem+0xff788bd4>
  808c1c:	81400417 	ldw	r5,16(r16)
  808c20:	a809883a 	mov	r4,r21
  808c24:	08084980 	call	808498 <_free_r>
  808c28:	8080030b 	ldhu	r2,12(r16)
  808c2c:	00ffdfc4 	movi	r3,-129
  808c30:	1884703a 	and	r2,r3,r2
  808c34:	00c00304 	movi	r3,12
  808c38:	a8c00015 	stw	r3,0(r21)
  808c3c:	003f5906 	br	8089a4 <__alt_mem_onchip_mem+0xff7889a4>
  808c40:	94c00044 	addi	r19,r18,1
  808c44:	02000044 	movi	r8,1
  808c48:	003f6006 	br	8089cc <__alt_mem_onchip_mem+0xff7889cc>
  808c4c:	00bfffc4 	movi	r2,-1
  808c50:	003f0306 	br	808860 <__alt_mem_onchip_mem+0xff788860>
  808c54:	00800304 	movi	r2,12
  808c58:	a8800015 	stw	r2,0(r21)
  808c5c:	8080030b 	ldhu	r2,12(r16)
  808c60:	003f5006 	br	8089a4 <__alt_mem_onchip_mem+0xff7889a4>

00808c64 <_isatty_r>:
  808c64:	defffd04 	addi	sp,sp,-12
  808c68:	dc000015 	stw	r16,0(sp)
  808c6c:	04002074 	movhi	r16,129
  808c70:	dc400115 	stw	r17,4(sp)
  808c74:	841f4204 	addi	r16,r16,32008
  808c78:	2023883a 	mov	r17,r4
  808c7c:	2809883a 	mov	r4,r5
  808c80:	dfc00215 	stw	ra,8(sp)
  808c84:	80000015 	stw	zero,0(r16)
  808c88:	080fe200 	call	80fe20 <isatty>
  808c8c:	00ffffc4 	movi	r3,-1
  808c90:	10c00526 	beq	r2,r3,808ca8 <_isatty_r+0x44>
  808c94:	dfc00217 	ldw	ra,8(sp)
  808c98:	dc400117 	ldw	r17,4(sp)
  808c9c:	dc000017 	ldw	r16,0(sp)
  808ca0:	dec00304 	addi	sp,sp,12
  808ca4:	f800283a 	ret
  808ca8:	80c00017 	ldw	r3,0(r16)
  808cac:	183ff926 	beq	r3,zero,808c94 <__alt_mem_onchip_mem+0xff788c94>
  808cb0:	88c00015 	stw	r3,0(r17)
  808cb4:	003ff706 	br	808c94 <__alt_mem_onchip_mem+0xff788c94>

00808cb8 <_setlocale_r>:
  808cb8:	30001b26 	beq	r6,zero,808d28 <_setlocale_r+0x70>
  808cbc:	01402074 	movhi	r5,129
  808cc0:	defffe04 	addi	sp,sp,-8
  808cc4:	29500e04 	addi	r5,r5,16440
  808cc8:	3009883a 	mov	r4,r6
  808ccc:	dc000015 	stw	r16,0(sp)
  808cd0:	dfc00115 	stw	ra,4(sp)
  808cd4:	3021883a 	mov	r16,r6
  808cd8:	080a9180 	call	80a918 <strcmp>
  808cdc:	1000061e 	bne	r2,zero,808cf8 <_setlocale_r+0x40>
  808ce0:	00802074 	movhi	r2,129
  808ce4:	108f4f04 	addi	r2,r2,15676
  808ce8:	dfc00117 	ldw	ra,4(sp)
  808cec:	dc000017 	ldw	r16,0(sp)
  808cf0:	dec00204 	addi	sp,sp,8
  808cf4:	f800283a 	ret
  808cf8:	01402074 	movhi	r5,129
  808cfc:	294f4f04 	addi	r5,r5,15676
  808d00:	8009883a 	mov	r4,r16
  808d04:	080a9180 	call	80a918 <strcmp>
  808d08:	103ff526 	beq	r2,zero,808ce0 <__alt_mem_onchip_mem+0xff788ce0>
  808d0c:	01402074 	movhi	r5,129
  808d10:	294f5904 	addi	r5,r5,15716
  808d14:	8009883a 	mov	r4,r16
  808d18:	080a9180 	call	80a918 <strcmp>
  808d1c:	103ff026 	beq	r2,zero,808ce0 <__alt_mem_onchip_mem+0xff788ce0>
  808d20:	0005883a 	mov	r2,zero
  808d24:	003ff006 	br	808ce8 <__alt_mem_onchip_mem+0xff788ce8>
  808d28:	00802074 	movhi	r2,129
  808d2c:	108f4f04 	addi	r2,r2,15676
  808d30:	f800283a 	ret

00808d34 <__locale_charset>:
  808d34:	00802074 	movhi	r2,129
  808d38:	1092c604 	addi	r2,r2,19224
  808d3c:	f800283a 	ret

00808d40 <__locale_mb_cur_max>:
  808d40:	00802074 	movhi	r2,129
  808d44:	1097e504 	addi	r2,r2,24468
  808d48:	10800017 	ldw	r2,0(r2)
  808d4c:	f800283a 	ret

00808d50 <__locale_msgcharset>:
  808d50:	00802074 	movhi	r2,129
  808d54:	1092be04 	addi	r2,r2,19192
  808d58:	f800283a 	ret

00808d5c <__locale_cjk_lang>:
  808d5c:	0005883a 	mov	r2,zero
  808d60:	f800283a 	ret

00808d64 <_localeconv_r>:
  808d64:	00802074 	movhi	r2,129
  808d68:	1092ce04 	addi	r2,r2,19256
  808d6c:	f800283a 	ret

00808d70 <setlocale>:
  808d70:	00802074 	movhi	r2,129
  808d74:	1097e104 	addi	r2,r2,24452
  808d78:	280d883a 	mov	r6,r5
  808d7c:	200b883a 	mov	r5,r4
  808d80:	11000017 	ldw	r4,0(r2)
  808d84:	0808cb81 	jmpi	808cb8 <_setlocale_r>

00808d88 <localeconv>:
  808d88:	00802074 	movhi	r2,129
  808d8c:	1092ce04 	addi	r2,r2,19256
  808d90:	f800283a 	ret

00808d94 <_lseek_r>:
  808d94:	defffd04 	addi	sp,sp,-12
  808d98:	2805883a 	mov	r2,r5
  808d9c:	dc000015 	stw	r16,0(sp)
  808da0:	04002074 	movhi	r16,129
  808da4:	dc400115 	stw	r17,4(sp)
  808da8:	300b883a 	mov	r5,r6
  808dac:	841f4204 	addi	r16,r16,32008
  808db0:	2023883a 	mov	r17,r4
  808db4:	380d883a 	mov	r6,r7
  808db8:	1009883a 	mov	r4,r2
  808dbc:	dfc00215 	stw	ra,8(sp)
  808dc0:	80000015 	stw	zero,0(r16)
  808dc4:	080ffec0 	call	80ffec <lseek>
  808dc8:	00ffffc4 	movi	r3,-1
  808dcc:	10c00526 	beq	r2,r3,808de4 <_lseek_r+0x50>
  808dd0:	dfc00217 	ldw	ra,8(sp)
  808dd4:	dc400117 	ldw	r17,4(sp)
  808dd8:	dc000017 	ldw	r16,0(sp)
  808ddc:	dec00304 	addi	sp,sp,12
  808de0:	f800283a 	ret
  808de4:	80c00017 	ldw	r3,0(r16)
  808de8:	183ff926 	beq	r3,zero,808dd0 <__alt_mem_onchip_mem+0xff788dd0>
  808dec:	88c00015 	stw	r3,0(r17)
  808df0:	003ff706 	br	808dd0 <__alt_mem_onchip_mem+0xff788dd0>

00808df4 <memchr>:
  808df4:	208000cc 	andi	r2,r4,3
  808df8:	280f883a 	mov	r7,r5
  808dfc:	10003426 	beq	r2,zero,808ed0 <memchr+0xdc>
  808e00:	30bfffc4 	addi	r2,r6,-1
  808e04:	30001a26 	beq	r6,zero,808e70 <memchr+0x7c>
  808e08:	20c00003 	ldbu	r3,0(r4)
  808e0c:	29803fcc 	andi	r6,r5,255
  808e10:	30c0051e 	bne	r6,r3,808e28 <memchr+0x34>
  808e14:	00001806 	br	808e78 <memchr+0x84>
  808e18:	10001526 	beq	r2,zero,808e70 <memchr+0x7c>
  808e1c:	20c00003 	ldbu	r3,0(r4)
  808e20:	10bfffc4 	addi	r2,r2,-1
  808e24:	30c01426 	beq	r6,r3,808e78 <memchr+0x84>
  808e28:	21000044 	addi	r4,r4,1
  808e2c:	20c000cc 	andi	r3,r4,3
  808e30:	183ff91e 	bne	r3,zero,808e18 <__alt_mem_onchip_mem+0xff788e18>
  808e34:	020000c4 	movi	r8,3
  808e38:	40801136 	bltu	r8,r2,808e80 <memchr+0x8c>
  808e3c:	10000c26 	beq	r2,zero,808e70 <memchr+0x7c>
  808e40:	20c00003 	ldbu	r3,0(r4)
  808e44:	29403fcc 	andi	r5,r5,255
  808e48:	28c00b26 	beq	r5,r3,808e78 <memchr+0x84>
  808e4c:	20c00044 	addi	r3,r4,1
  808e50:	39803fcc 	andi	r6,r7,255
  808e54:	2089883a 	add	r4,r4,r2
  808e58:	00000306 	br	808e68 <memchr+0x74>
  808e5c:	18c00044 	addi	r3,r3,1
  808e60:	197fffc3 	ldbu	r5,-1(r3)
  808e64:	31400526 	beq	r6,r5,808e7c <memchr+0x88>
  808e68:	1805883a 	mov	r2,r3
  808e6c:	20fffb1e 	bne	r4,r3,808e5c <__alt_mem_onchip_mem+0xff788e5c>
  808e70:	0005883a 	mov	r2,zero
  808e74:	f800283a 	ret
  808e78:	2005883a 	mov	r2,r4
  808e7c:	f800283a 	ret
  808e80:	28c03fcc 	andi	r3,r5,255
  808e84:	1812923a 	slli	r9,r3,8
  808e88:	02ffbff4 	movhi	r11,65279
  808e8c:	02a02074 	movhi	r10,32897
  808e90:	48d2b03a 	or	r9,r9,r3
  808e94:	4806943a 	slli	r3,r9,16
  808e98:	5affbfc4 	addi	r11,r11,-257
  808e9c:	52a02004 	addi	r10,r10,-32640
  808ea0:	48d2b03a 	or	r9,r9,r3
  808ea4:	20c00017 	ldw	r3,0(r4)
  808ea8:	48c6f03a 	xor	r3,r9,r3
  808eac:	1acd883a 	add	r6,r3,r11
  808eb0:	00c6303a 	nor	r3,zero,r3
  808eb4:	30c6703a 	and	r3,r6,r3
  808eb8:	1a86703a 	and	r3,r3,r10
  808ebc:	183fe01e 	bne	r3,zero,808e40 <__alt_mem_onchip_mem+0xff788e40>
  808ec0:	10bfff04 	addi	r2,r2,-4
  808ec4:	21000104 	addi	r4,r4,4
  808ec8:	40bff636 	bltu	r8,r2,808ea4 <__alt_mem_onchip_mem+0xff788ea4>
  808ecc:	003fdb06 	br	808e3c <__alt_mem_onchip_mem+0xff788e3c>
  808ed0:	3005883a 	mov	r2,r6
  808ed4:	003fd706 	br	808e34 <__alt_mem_onchip_mem+0xff788e34>

00808ed8 <memcpy>:
  808ed8:	defffd04 	addi	sp,sp,-12
  808edc:	dfc00215 	stw	ra,8(sp)
  808ee0:	dc400115 	stw	r17,4(sp)
  808ee4:	dc000015 	stw	r16,0(sp)
  808ee8:	00c003c4 	movi	r3,15
  808eec:	2005883a 	mov	r2,r4
  808ef0:	1980452e 	bgeu	r3,r6,809008 <memcpy+0x130>
  808ef4:	2906b03a 	or	r3,r5,r4
  808ef8:	18c000cc 	andi	r3,r3,3
  808efc:	1800441e 	bne	r3,zero,809010 <memcpy+0x138>
  808f00:	347ffc04 	addi	r17,r6,-16
  808f04:	8822d13a 	srli	r17,r17,4
  808f08:	28c00104 	addi	r3,r5,4
  808f0c:	23400104 	addi	r13,r4,4
  808f10:	8820913a 	slli	r16,r17,4
  808f14:	2b000204 	addi	r12,r5,8
  808f18:	22c00204 	addi	r11,r4,8
  808f1c:	84000504 	addi	r16,r16,20
  808f20:	2a800304 	addi	r10,r5,12
  808f24:	22400304 	addi	r9,r4,12
  808f28:	2c21883a 	add	r16,r5,r16
  808f2c:	2811883a 	mov	r8,r5
  808f30:	200f883a 	mov	r7,r4
  808f34:	41000017 	ldw	r4,0(r8)
  808f38:	1fc00017 	ldw	ra,0(r3)
  808f3c:	63c00017 	ldw	r15,0(r12)
  808f40:	39000015 	stw	r4,0(r7)
  808f44:	53800017 	ldw	r14,0(r10)
  808f48:	6fc00015 	stw	ra,0(r13)
  808f4c:	5bc00015 	stw	r15,0(r11)
  808f50:	4b800015 	stw	r14,0(r9)
  808f54:	18c00404 	addi	r3,r3,16
  808f58:	39c00404 	addi	r7,r7,16
  808f5c:	42000404 	addi	r8,r8,16
  808f60:	6b400404 	addi	r13,r13,16
  808f64:	63000404 	addi	r12,r12,16
  808f68:	5ac00404 	addi	r11,r11,16
  808f6c:	52800404 	addi	r10,r10,16
  808f70:	4a400404 	addi	r9,r9,16
  808f74:	1c3fef1e 	bne	r3,r16,808f34 <__alt_mem_onchip_mem+0xff788f34>
  808f78:	89c00044 	addi	r7,r17,1
  808f7c:	380e913a 	slli	r7,r7,4
  808f80:	310003cc 	andi	r4,r6,15
  808f84:	02c000c4 	movi	r11,3
  808f88:	11c7883a 	add	r3,r2,r7
  808f8c:	29cb883a 	add	r5,r5,r7
  808f90:	5900212e 	bgeu	r11,r4,809018 <memcpy+0x140>
  808f94:	1813883a 	mov	r9,r3
  808f98:	2811883a 	mov	r8,r5
  808f9c:	200f883a 	mov	r7,r4
  808fa0:	42800017 	ldw	r10,0(r8)
  808fa4:	4a400104 	addi	r9,r9,4
  808fa8:	39ffff04 	addi	r7,r7,-4
  808fac:	4abfff15 	stw	r10,-4(r9)
  808fb0:	42000104 	addi	r8,r8,4
  808fb4:	59fffa36 	bltu	r11,r7,808fa0 <__alt_mem_onchip_mem+0xff788fa0>
  808fb8:	213fff04 	addi	r4,r4,-4
  808fbc:	2008d0ba 	srli	r4,r4,2
  808fc0:	318000cc 	andi	r6,r6,3
  808fc4:	21000044 	addi	r4,r4,1
  808fc8:	2109883a 	add	r4,r4,r4
  808fcc:	2109883a 	add	r4,r4,r4
  808fd0:	1907883a 	add	r3,r3,r4
  808fd4:	290b883a 	add	r5,r5,r4
  808fd8:	30000626 	beq	r6,zero,808ff4 <memcpy+0x11c>
  808fdc:	198d883a 	add	r6,r3,r6
  808fe0:	29c00003 	ldbu	r7,0(r5)
  808fe4:	18c00044 	addi	r3,r3,1
  808fe8:	29400044 	addi	r5,r5,1
  808fec:	19ffffc5 	stb	r7,-1(r3)
  808ff0:	19bffb1e 	bne	r3,r6,808fe0 <__alt_mem_onchip_mem+0xff788fe0>
  808ff4:	dfc00217 	ldw	ra,8(sp)
  808ff8:	dc400117 	ldw	r17,4(sp)
  808ffc:	dc000017 	ldw	r16,0(sp)
  809000:	dec00304 	addi	sp,sp,12
  809004:	f800283a 	ret
  809008:	2007883a 	mov	r3,r4
  80900c:	003ff206 	br	808fd8 <__alt_mem_onchip_mem+0xff788fd8>
  809010:	2007883a 	mov	r3,r4
  809014:	003ff106 	br	808fdc <__alt_mem_onchip_mem+0xff788fdc>
  809018:	200d883a 	mov	r6,r4
  80901c:	003fee06 	br	808fd8 <__alt_mem_onchip_mem+0xff788fd8>

00809020 <memmove>:
  809020:	2005883a 	mov	r2,r4
  809024:	29000b2e 	bgeu	r5,r4,809054 <memmove+0x34>
  809028:	298f883a 	add	r7,r5,r6
  80902c:	21c0092e 	bgeu	r4,r7,809054 <memmove+0x34>
  809030:	2187883a 	add	r3,r4,r6
  809034:	198bc83a 	sub	r5,r3,r6
  809038:	30004826 	beq	r6,zero,80915c <memmove+0x13c>
  80903c:	39ffffc4 	addi	r7,r7,-1
  809040:	39000003 	ldbu	r4,0(r7)
  809044:	18ffffc4 	addi	r3,r3,-1
  809048:	19000005 	stb	r4,0(r3)
  80904c:	28fffb1e 	bne	r5,r3,80903c <__alt_mem_onchip_mem+0xff78903c>
  809050:	f800283a 	ret
  809054:	00c003c4 	movi	r3,15
  809058:	1980412e 	bgeu	r3,r6,809160 <memmove+0x140>
  80905c:	2886b03a 	or	r3,r5,r2
  809060:	18c000cc 	andi	r3,r3,3
  809064:	1800401e 	bne	r3,zero,809168 <memmove+0x148>
  809068:	33fffc04 	addi	r15,r6,-16
  80906c:	781ed13a 	srli	r15,r15,4
  809070:	28c00104 	addi	r3,r5,4
  809074:	13400104 	addi	r13,r2,4
  809078:	781c913a 	slli	r14,r15,4
  80907c:	2b000204 	addi	r12,r5,8
  809080:	12c00204 	addi	r11,r2,8
  809084:	73800504 	addi	r14,r14,20
  809088:	2a800304 	addi	r10,r5,12
  80908c:	12400304 	addi	r9,r2,12
  809090:	2b9d883a 	add	r14,r5,r14
  809094:	2811883a 	mov	r8,r5
  809098:	100f883a 	mov	r7,r2
  80909c:	41000017 	ldw	r4,0(r8)
  8090a0:	39c00404 	addi	r7,r7,16
  8090a4:	18c00404 	addi	r3,r3,16
  8090a8:	393ffc15 	stw	r4,-16(r7)
  8090ac:	193ffc17 	ldw	r4,-16(r3)
  8090b0:	6b400404 	addi	r13,r13,16
  8090b4:	5ac00404 	addi	r11,r11,16
  8090b8:	693ffc15 	stw	r4,-16(r13)
  8090bc:	61000017 	ldw	r4,0(r12)
  8090c0:	4a400404 	addi	r9,r9,16
  8090c4:	42000404 	addi	r8,r8,16
  8090c8:	593ffc15 	stw	r4,-16(r11)
  8090cc:	51000017 	ldw	r4,0(r10)
  8090d0:	63000404 	addi	r12,r12,16
  8090d4:	52800404 	addi	r10,r10,16
  8090d8:	493ffc15 	stw	r4,-16(r9)
  8090dc:	1bbfef1e 	bne	r3,r14,80909c <__alt_mem_onchip_mem+0xff78909c>
  8090e0:	79000044 	addi	r4,r15,1
  8090e4:	2008913a 	slli	r4,r4,4
  8090e8:	328003cc 	andi	r10,r6,15
  8090ec:	02c000c4 	movi	r11,3
  8090f0:	1107883a 	add	r3,r2,r4
  8090f4:	290b883a 	add	r5,r5,r4
  8090f8:	5a801e2e 	bgeu	r11,r10,809174 <memmove+0x154>
  8090fc:	1813883a 	mov	r9,r3
  809100:	2811883a 	mov	r8,r5
  809104:	500f883a 	mov	r7,r10
  809108:	41000017 	ldw	r4,0(r8)
  80910c:	4a400104 	addi	r9,r9,4
  809110:	39ffff04 	addi	r7,r7,-4
  809114:	493fff15 	stw	r4,-4(r9)
  809118:	42000104 	addi	r8,r8,4
  80911c:	59fffa36 	bltu	r11,r7,809108 <__alt_mem_onchip_mem+0xff789108>
  809120:	513fff04 	addi	r4,r10,-4
  809124:	2008d0ba 	srli	r4,r4,2
  809128:	318000cc 	andi	r6,r6,3
  80912c:	21000044 	addi	r4,r4,1
  809130:	2109883a 	add	r4,r4,r4
  809134:	2109883a 	add	r4,r4,r4
  809138:	1907883a 	add	r3,r3,r4
  80913c:	290b883a 	add	r5,r5,r4
  809140:	30000b26 	beq	r6,zero,809170 <memmove+0x150>
  809144:	198d883a 	add	r6,r3,r6
  809148:	29c00003 	ldbu	r7,0(r5)
  80914c:	18c00044 	addi	r3,r3,1
  809150:	29400044 	addi	r5,r5,1
  809154:	19ffffc5 	stb	r7,-1(r3)
  809158:	19bffb1e 	bne	r3,r6,809148 <__alt_mem_onchip_mem+0xff789148>
  80915c:	f800283a 	ret
  809160:	1007883a 	mov	r3,r2
  809164:	003ff606 	br	809140 <__alt_mem_onchip_mem+0xff789140>
  809168:	1007883a 	mov	r3,r2
  80916c:	003ff506 	br	809144 <__alt_mem_onchip_mem+0xff789144>
  809170:	f800283a 	ret
  809174:	500d883a 	mov	r6,r10
  809178:	003ff106 	br	809140 <__alt_mem_onchip_mem+0xff789140>

0080917c <_Balloc>:
  80917c:	20801317 	ldw	r2,76(r4)
  809180:	defffc04 	addi	sp,sp,-16
  809184:	dc400115 	stw	r17,4(sp)
  809188:	dc000015 	stw	r16,0(sp)
  80918c:	dfc00315 	stw	ra,12(sp)
  809190:	dc800215 	stw	r18,8(sp)
  809194:	2023883a 	mov	r17,r4
  809198:	2821883a 	mov	r16,r5
  80919c:	10000f26 	beq	r2,zero,8091dc <_Balloc+0x60>
  8091a0:	8407883a 	add	r3,r16,r16
  8091a4:	18c7883a 	add	r3,r3,r3
  8091a8:	10c7883a 	add	r3,r2,r3
  8091ac:	18800017 	ldw	r2,0(r3)
  8091b0:	10001126 	beq	r2,zero,8091f8 <_Balloc+0x7c>
  8091b4:	11000017 	ldw	r4,0(r2)
  8091b8:	19000015 	stw	r4,0(r3)
  8091bc:	10000415 	stw	zero,16(r2)
  8091c0:	10000315 	stw	zero,12(r2)
  8091c4:	dfc00317 	ldw	ra,12(sp)
  8091c8:	dc800217 	ldw	r18,8(sp)
  8091cc:	dc400117 	ldw	r17,4(sp)
  8091d0:	dc000017 	ldw	r16,0(sp)
  8091d4:	dec00404 	addi	sp,sp,16
  8091d8:	f800283a 	ret
  8091dc:	01800844 	movi	r6,33
  8091e0:	01400104 	movi	r5,4
  8091e4:	080c1940 	call	80c194 <_calloc_r>
  8091e8:	88801315 	stw	r2,76(r17)
  8091ec:	103fec1e 	bne	r2,zero,8091a0 <__alt_mem_onchip_mem+0xff7891a0>
  8091f0:	0005883a 	mov	r2,zero
  8091f4:	003ff306 	br	8091c4 <__alt_mem_onchip_mem+0xff7891c4>
  8091f8:	01400044 	movi	r5,1
  8091fc:	2c24983a 	sll	r18,r5,r16
  809200:	8809883a 	mov	r4,r17
  809204:	91800144 	addi	r6,r18,5
  809208:	318d883a 	add	r6,r6,r6
  80920c:	318d883a 	add	r6,r6,r6
  809210:	080c1940 	call	80c194 <_calloc_r>
  809214:	103ff626 	beq	r2,zero,8091f0 <__alt_mem_onchip_mem+0xff7891f0>
  809218:	14000115 	stw	r16,4(r2)
  80921c:	14800215 	stw	r18,8(r2)
  809220:	003fe606 	br	8091bc <__alt_mem_onchip_mem+0xff7891bc>

00809224 <_Bfree>:
  809224:	28000826 	beq	r5,zero,809248 <_Bfree+0x24>
  809228:	28c00117 	ldw	r3,4(r5)
  80922c:	20801317 	ldw	r2,76(r4)
  809230:	18c7883a 	add	r3,r3,r3
  809234:	18c7883a 	add	r3,r3,r3
  809238:	10c5883a 	add	r2,r2,r3
  80923c:	10c00017 	ldw	r3,0(r2)
  809240:	28c00015 	stw	r3,0(r5)
  809244:	11400015 	stw	r5,0(r2)
  809248:	f800283a 	ret

0080924c <__multadd>:
  80924c:	defffa04 	addi	sp,sp,-24
  809250:	dc800315 	stw	r18,12(sp)
  809254:	dc400215 	stw	r17,8(sp)
  809258:	dc000115 	stw	r16,4(sp)
  80925c:	2823883a 	mov	r17,r5
  809260:	2c000417 	ldw	r16,16(r5)
  809264:	dfc00515 	stw	ra,20(sp)
  809268:	dcc00415 	stw	r19,16(sp)
  80926c:	2025883a 	mov	r18,r4
  809270:	29400504 	addi	r5,r5,20
  809274:	0011883a 	mov	r8,zero
  809278:	28c00017 	ldw	r3,0(r5)
  80927c:	29400104 	addi	r5,r5,4
  809280:	42000044 	addi	r8,r8,1
  809284:	18bfffcc 	andi	r2,r3,65535
  809288:	1185383a 	mul	r2,r2,r6
  80928c:	1806d43a 	srli	r3,r3,16
  809290:	11cf883a 	add	r7,r2,r7
  809294:	3808d43a 	srli	r4,r7,16
  809298:	1987383a 	mul	r3,r3,r6
  80929c:	38bfffcc 	andi	r2,r7,65535
  8092a0:	1907883a 	add	r3,r3,r4
  8092a4:	1808943a 	slli	r4,r3,16
  8092a8:	180ed43a 	srli	r7,r3,16
  8092ac:	2085883a 	add	r2,r4,r2
  8092b0:	28bfff15 	stw	r2,-4(r5)
  8092b4:	443ff016 	blt	r8,r16,809278 <__alt_mem_onchip_mem+0xff789278>
  8092b8:	38000926 	beq	r7,zero,8092e0 <__multadd+0x94>
  8092bc:	88800217 	ldw	r2,8(r17)
  8092c0:	80800f0e 	bge	r16,r2,809300 <__multadd+0xb4>
  8092c4:	80800144 	addi	r2,r16,5
  8092c8:	1085883a 	add	r2,r2,r2
  8092cc:	1085883a 	add	r2,r2,r2
  8092d0:	8885883a 	add	r2,r17,r2
  8092d4:	11c00015 	stw	r7,0(r2)
  8092d8:	84000044 	addi	r16,r16,1
  8092dc:	8c000415 	stw	r16,16(r17)
  8092e0:	8805883a 	mov	r2,r17
  8092e4:	dfc00517 	ldw	ra,20(sp)
  8092e8:	dcc00417 	ldw	r19,16(sp)
  8092ec:	dc800317 	ldw	r18,12(sp)
  8092f0:	dc400217 	ldw	r17,8(sp)
  8092f4:	dc000117 	ldw	r16,4(sp)
  8092f8:	dec00604 	addi	sp,sp,24
  8092fc:	f800283a 	ret
  809300:	89400117 	ldw	r5,4(r17)
  809304:	9009883a 	mov	r4,r18
  809308:	d9c00015 	stw	r7,0(sp)
  80930c:	29400044 	addi	r5,r5,1
  809310:	080917c0 	call	80917c <_Balloc>
  809314:	89800417 	ldw	r6,16(r17)
  809318:	89400304 	addi	r5,r17,12
  80931c:	11000304 	addi	r4,r2,12
  809320:	31800084 	addi	r6,r6,2
  809324:	318d883a 	add	r6,r6,r6
  809328:	318d883a 	add	r6,r6,r6
  80932c:	1027883a 	mov	r19,r2
  809330:	0808ed80 	call	808ed8 <memcpy>
  809334:	d9c00017 	ldw	r7,0(sp)
  809338:	88000a26 	beq	r17,zero,809364 <__multadd+0x118>
  80933c:	88c00117 	ldw	r3,4(r17)
  809340:	90801317 	ldw	r2,76(r18)
  809344:	18c7883a 	add	r3,r3,r3
  809348:	18c7883a 	add	r3,r3,r3
  80934c:	10c5883a 	add	r2,r2,r3
  809350:	10c00017 	ldw	r3,0(r2)
  809354:	88c00015 	stw	r3,0(r17)
  809358:	14400015 	stw	r17,0(r2)
  80935c:	9823883a 	mov	r17,r19
  809360:	003fd806 	br	8092c4 <__alt_mem_onchip_mem+0xff7892c4>
  809364:	9823883a 	mov	r17,r19
  809368:	003fd606 	br	8092c4 <__alt_mem_onchip_mem+0xff7892c4>

0080936c <__s2b>:
  80936c:	defff904 	addi	sp,sp,-28
  809370:	dc400115 	stw	r17,4(sp)
  809374:	dc000015 	stw	r16,0(sp)
  809378:	2023883a 	mov	r17,r4
  80937c:	2821883a 	mov	r16,r5
  809380:	39000204 	addi	r4,r7,8
  809384:	01400244 	movi	r5,9
  809388:	dcc00315 	stw	r19,12(sp)
  80938c:	dc800215 	stw	r18,8(sp)
  809390:	dfc00615 	stw	ra,24(sp)
  809394:	dd400515 	stw	r21,20(sp)
  809398:	dd000415 	stw	r20,16(sp)
  80939c:	3825883a 	mov	r18,r7
  8093a0:	3027883a 	mov	r19,r6
  8093a4:	080d0f80 	call	80d0f8 <__divsi3>
  8093a8:	00c00044 	movi	r3,1
  8093ac:	000b883a 	mov	r5,zero
  8093b0:	1880030e 	bge	r3,r2,8093c0 <__s2b+0x54>
  8093b4:	18c7883a 	add	r3,r3,r3
  8093b8:	29400044 	addi	r5,r5,1
  8093bc:	18bffd16 	blt	r3,r2,8093b4 <__alt_mem_onchip_mem+0xff7893b4>
  8093c0:	8809883a 	mov	r4,r17
  8093c4:	080917c0 	call	80917c <_Balloc>
  8093c8:	d8c00717 	ldw	r3,28(sp)
  8093cc:	10c00515 	stw	r3,20(r2)
  8093d0:	00c00044 	movi	r3,1
  8093d4:	10c00415 	stw	r3,16(r2)
  8093d8:	00c00244 	movi	r3,9
  8093dc:	1cc0210e 	bge	r3,r19,809464 <__s2b+0xf8>
  8093e0:	80eb883a 	add	r21,r16,r3
  8093e4:	a829883a 	mov	r20,r21
  8093e8:	84e1883a 	add	r16,r16,r19
  8093ec:	a1c00007 	ldb	r7,0(r20)
  8093f0:	01800284 	movi	r6,10
  8093f4:	a5000044 	addi	r20,r20,1
  8093f8:	100b883a 	mov	r5,r2
  8093fc:	39fff404 	addi	r7,r7,-48
  809400:	8809883a 	mov	r4,r17
  809404:	080924c0 	call	80924c <__multadd>
  809408:	a43ff81e 	bne	r20,r16,8093ec <__alt_mem_onchip_mem+0xff7893ec>
  80940c:	ace1883a 	add	r16,r21,r19
  809410:	843ffe04 	addi	r16,r16,-8
  809414:	9c800a0e 	bge	r19,r18,809440 <__s2b+0xd4>
  809418:	94e5c83a 	sub	r18,r18,r19
  80941c:	84a5883a 	add	r18,r16,r18
  809420:	81c00007 	ldb	r7,0(r16)
  809424:	01800284 	movi	r6,10
  809428:	84000044 	addi	r16,r16,1
  80942c:	100b883a 	mov	r5,r2
  809430:	39fff404 	addi	r7,r7,-48
  809434:	8809883a 	mov	r4,r17
  809438:	080924c0 	call	80924c <__multadd>
  80943c:	84bff81e 	bne	r16,r18,809420 <__alt_mem_onchip_mem+0xff789420>
  809440:	dfc00617 	ldw	ra,24(sp)
  809444:	dd400517 	ldw	r21,20(sp)
  809448:	dd000417 	ldw	r20,16(sp)
  80944c:	dcc00317 	ldw	r19,12(sp)
  809450:	dc800217 	ldw	r18,8(sp)
  809454:	dc400117 	ldw	r17,4(sp)
  809458:	dc000017 	ldw	r16,0(sp)
  80945c:	dec00704 	addi	sp,sp,28
  809460:	f800283a 	ret
  809464:	84000284 	addi	r16,r16,10
  809468:	1827883a 	mov	r19,r3
  80946c:	003fe906 	br	809414 <__alt_mem_onchip_mem+0xff789414>

00809470 <__hi0bits>:
  809470:	20bfffec 	andhi	r2,r4,65535
  809474:	1000141e 	bne	r2,zero,8094c8 <__hi0bits+0x58>
  809478:	2008943a 	slli	r4,r4,16
  80947c:	00800404 	movi	r2,16
  809480:	20ffc02c 	andhi	r3,r4,65280
  809484:	1800021e 	bne	r3,zero,809490 <__hi0bits+0x20>
  809488:	2008923a 	slli	r4,r4,8
  80948c:	10800204 	addi	r2,r2,8
  809490:	20fc002c 	andhi	r3,r4,61440
  809494:	1800021e 	bne	r3,zero,8094a0 <__hi0bits+0x30>
  809498:	2008913a 	slli	r4,r4,4
  80949c:	10800104 	addi	r2,r2,4
  8094a0:	20f0002c 	andhi	r3,r4,49152
  8094a4:	1800031e 	bne	r3,zero,8094b4 <__hi0bits+0x44>
  8094a8:	2109883a 	add	r4,r4,r4
  8094ac:	10800084 	addi	r2,r2,2
  8094b0:	2109883a 	add	r4,r4,r4
  8094b4:	20000316 	blt	r4,zero,8094c4 <__hi0bits+0x54>
  8094b8:	2110002c 	andhi	r4,r4,16384
  8094bc:	2000041e 	bne	r4,zero,8094d0 <__hi0bits+0x60>
  8094c0:	00800804 	movi	r2,32
  8094c4:	f800283a 	ret
  8094c8:	0005883a 	mov	r2,zero
  8094cc:	003fec06 	br	809480 <__alt_mem_onchip_mem+0xff789480>
  8094d0:	10800044 	addi	r2,r2,1
  8094d4:	f800283a 	ret

008094d8 <__lo0bits>:
  8094d8:	20c00017 	ldw	r3,0(r4)
  8094dc:	188001cc 	andi	r2,r3,7
  8094e0:	10000826 	beq	r2,zero,809504 <__lo0bits+0x2c>
  8094e4:	1880004c 	andi	r2,r3,1
  8094e8:	1000211e 	bne	r2,zero,809570 <__lo0bits+0x98>
  8094ec:	1880008c 	andi	r2,r3,2
  8094f0:	1000211e 	bne	r2,zero,809578 <__lo0bits+0xa0>
  8094f4:	1806d0ba 	srli	r3,r3,2
  8094f8:	00800084 	movi	r2,2
  8094fc:	20c00015 	stw	r3,0(r4)
  809500:	f800283a 	ret
  809504:	18bfffcc 	andi	r2,r3,65535
  809508:	10001326 	beq	r2,zero,809558 <__lo0bits+0x80>
  80950c:	0005883a 	mov	r2,zero
  809510:	19403fcc 	andi	r5,r3,255
  809514:	2800021e 	bne	r5,zero,809520 <__lo0bits+0x48>
  809518:	1806d23a 	srli	r3,r3,8
  80951c:	10800204 	addi	r2,r2,8
  809520:	194003cc 	andi	r5,r3,15
  809524:	2800021e 	bne	r5,zero,809530 <__lo0bits+0x58>
  809528:	1806d13a 	srli	r3,r3,4
  80952c:	10800104 	addi	r2,r2,4
  809530:	194000cc 	andi	r5,r3,3
  809534:	2800021e 	bne	r5,zero,809540 <__lo0bits+0x68>
  809538:	1806d0ba 	srli	r3,r3,2
  80953c:	10800084 	addi	r2,r2,2
  809540:	1940004c 	andi	r5,r3,1
  809544:	2800081e 	bne	r5,zero,809568 <__lo0bits+0x90>
  809548:	1806d07a 	srli	r3,r3,1
  80954c:	1800051e 	bne	r3,zero,809564 <__lo0bits+0x8c>
  809550:	00800804 	movi	r2,32
  809554:	f800283a 	ret
  809558:	1806d43a 	srli	r3,r3,16
  80955c:	00800404 	movi	r2,16
  809560:	003feb06 	br	809510 <__alt_mem_onchip_mem+0xff789510>
  809564:	10800044 	addi	r2,r2,1
  809568:	20c00015 	stw	r3,0(r4)
  80956c:	f800283a 	ret
  809570:	0005883a 	mov	r2,zero
  809574:	f800283a 	ret
  809578:	1806d07a 	srli	r3,r3,1
  80957c:	00800044 	movi	r2,1
  809580:	20c00015 	stw	r3,0(r4)
  809584:	f800283a 	ret

00809588 <__i2b>:
  809588:	defffd04 	addi	sp,sp,-12
  80958c:	dc000015 	stw	r16,0(sp)
  809590:	04000044 	movi	r16,1
  809594:	dc400115 	stw	r17,4(sp)
  809598:	2823883a 	mov	r17,r5
  80959c:	800b883a 	mov	r5,r16
  8095a0:	dfc00215 	stw	ra,8(sp)
  8095a4:	080917c0 	call	80917c <_Balloc>
  8095a8:	14400515 	stw	r17,20(r2)
  8095ac:	14000415 	stw	r16,16(r2)
  8095b0:	dfc00217 	ldw	ra,8(sp)
  8095b4:	dc400117 	ldw	r17,4(sp)
  8095b8:	dc000017 	ldw	r16,0(sp)
  8095bc:	dec00304 	addi	sp,sp,12
  8095c0:	f800283a 	ret

008095c4 <__multiply>:
  8095c4:	defffa04 	addi	sp,sp,-24
  8095c8:	dcc00315 	stw	r19,12(sp)
  8095cc:	dc800215 	stw	r18,8(sp)
  8095d0:	34c00417 	ldw	r19,16(r6)
  8095d4:	2c800417 	ldw	r18,16(r5)
  8095d8:	dd000415 	stw	r20,16(sp)
  8095dc:	dc400115 	stw	r17,4(sp)
  8095e0:	dfc00515 	stw	ra,20(sp)
  8095e4:	dc000015 	stw	r16,0(sp)
  8095e8:	2829883a 	mov	r20,r5
  8095ec:	3023883a 	mov	r17,r6
  8095f0:	94c0050e 	bge	r18,r19,809608 <__multiply+0x44>
  8095f4:	9007883a 	mov	r3,r18
  8095f8:	3029883a 	mov	r20,r6
  8095fc:	9825883a 	mov	r18,r19
  809600:	2823883a 	mov	r17,r5
  809604:	1827883a 	mov	r19,r3
  809608:	a0800217 	ldw	r2,8(r20)
  80960c:	94e1883a 	add	r16,r18,r19
  809610:	a1400117 	ldw	r5,4(r20)
  809614:	1400010e 	bge	r2,r16,80961c <__multiply+0x58>
  809618:	29400044 	addi	r5,r5,1
  80961c:	080917c0 	call	80917c <_Balloc>
  809620:	8415883a 	add	r10,r16,r16
  809624:	12c00504 	addi	r11,r2,20
  809628:	5295883a 	add	r10,r10,r10
  80962c:	5a95883a 	add	r10,r11,r10
  809630:	5807883a 	mov	r3,r11
  809634:	5a80032e 	bgeu	r11,r10,809644 <__multiply+0x80>
  809638:	18000015 	stw	zero,0(r3)
  80963c:	18c00104 	addi	r3,r3,4
  809640:	1abffd36 	bltu	r3,r10,809638 <__alt_mem_onchip_mem+0xff789638>
  809644:	9ce7883a 	add	r19,r19,r19
  809648:	94a5883a 	add	r18,r18,r18
  80964c:	89800504 	addi	r6,r17,20
  809650:	9ce7883a 	add	r19,r19,r19
  809654:	a3400504 	addi	r13,r20,20
  809658:	94a5883a 	add	r18,r18,r18
  80965c:	34d9883a 	add	r12,r6,r19
  809660:	6c93883a 	add	r9,r13,r18
  809664:	3300422e 	bgeu	r6,r12,809770 <__multiply+0x1ac>
  809668:	37c00017 	ldw	ra,0(r6)
  80966c:	fbffffcc 	andi	r15,ra,65535
  809670:	78001b26 	beq	r15,zero,8096e0 <__multiply+0x11c>
  809674:	5811883a 	mov	r8,r11
  809678:	681d883a 	mov	r14,r13
  80967c:	000f883a 	mov	r7,zero
  809680:	71000017 	ldw	r4,0(r14)
  809684:	40c00017 	ldw	r3,0(r8)
  809688:	73800104 	addi	r14,r14,4
  80968c:	217fffcc 	andi	r5,r4,65535
  809690:	2bcb383a 	mul	r5,r5,r15
  809694:	2008d43a 	srli	r4,r4,16
  809698:	1c7fffcc 	andi	r17,r3,65535
  80969c:	2c4b883a 	add	r5,r5,r17
  8096a0:	29cb883a 	add	r5,r5,r7
  8096a4:	23c9383a 	mul	r4,r4,r15
  8096a8:	1806d43a 	srli	r3,r3,16
  8096ac:	280ed43a 	srli	r7,r5,16
  8096b0:	297fffcc 	andi	r5,r5,65535
  8096b4:	20c7883a 	add	r3,r4,r3
  8096b8:	19c7883a 	add	r3,r3,r7
  8096bc:	1808943a 	slli	r4,r3,16
  8096c0:	4023883a 	mov	r17,r8
  8096c4:	180ed43a 	srli	r7,r3,16
  8096c8:	214ab03a 	or	r5,r4,r5
  8096cc:	41400015 	stw	r5,0(r8)
  8096d0:	42000104 	addi	r8,r8,4
  8096d4:	727fea36 	bltu	r14,r9,809680 <__alt_mem_onchip_mem+0xff789680>
  8096d8:	89c00115 	stw	r7,4(r17)
  8096dc:	37c00017 	ldw	ra,0(r6)
  8096e0:	f83ed43a 	srli	ra,ra,16
  8096e4:	f8001f26 	beq	ra,zero,809764 <__multiply+0x1a0>
  8096e8:	58c00017 	ldw	r3,0(r11)
  8096ec:	681d883a 	mov	r14,r13
  8096f0:	581f883a 	mov	r15,r11
  8096f4:	1811883a 	mov	r8,r3
  8096f8:	5825883a 	mov	r18,r11
  8096fc:	000f883a 	mov	r7,zero
  809700:	00000106 	br	809708 <__multiply+0x144>
  809704:	8825883a 	mov	r18,r17
  809708:	7140000b 	ldhu	r5,0(r14)
  80970c:	4010d43a 	srli	r8,r8,16
  809710:	193fffcc 	andi	r4,r3,65535
  809714:	2fcb383a 	mul	r5,r5,ra
  809718:	7bc00104 	addi	r15,r15,4
  80971c:	73800104 	addi	r14,r14,4
  809720:	2a0b883a 	add	r5,r5,r8
  809724:	29cb883a 	add	r5,r5,r7
  809728:	2806943a 	slli	r3,r5,16
  80972c:	94400104 	addi	r17,r18,4
  809730:	280ad43a 	srli	r5,r5,16
  809734:	1908b03a 	or	r4,r3,r4
  809738:	793fff15 	stw	r4,-4(r15)
  80973c:	70ffff17 	ldw	r3,-4(r14)
  809740:	8a000017 	ldw	r8,0(r17)
  809744:	1806d43a 	srli	r3,r3,16
  809748:	413fffcc 	andi	r4,r8,65535
  80974c:	1fc7383a 	mul	r3,r3,ra
  809750:	1907883a 	add	r3,r3,r4
  809754:	1947883a 	add	r3,r3,r5
  809758:	180ed43a 	srli	r7,r3,16
  80975c:	727fe936 	bltu	r14,r9,809704 <__alt_mem_onchip_mem+0xff789704>
  809760:	90c00115 	stw	r3,4(r18)
  809764:	31800104 	addi	r6,r6,4
  809768:	5ac00104 	addi	r11,r11,4
  80976c:	333fbe36 	bltu	r6,r12,809668 <__alt_mem_onchip_mem+0xff789668>
  809770:	0400090e 	bge	zero,r16,809798 <__multiply+0x1d4>
  809774:	50ffff17 	ldw	r3,-4(r10)
  809778:	52bfff04 	addi	r10,r10,-4
  80977c:	18000326 	beq	r3,zero,80978c <__multiply+0x1c8>
  809780:	00000506 	br	809798 <__multiply+0x1d4>
  809784:	50c00017 	ldw	r3,0(r10)
  809788:	1800031e 	bne	r3,zero,809798 <__multiply+0x1d4>
  80978c:	843fffc4 	addi	r16,r16,-1
  809790:	52bfff04 	addi	r10,r10,-4
  809794:	803ffb1e 	bne	r16,zero,809784 <__alt_mem_onchip_mem+0xff789784>
  809798:	14000415 	stw	r16,16(r2)
  80979c:	dfc00517 	ldw	ra,20(sp)
  8097a0:	dd000417 	ldw	r20,16(sp)
  8097a4:	dcc00317 	ldw	r19,12(sp)
  8097a8:	dc800217 	ldw	r18,8(sp)
  8097ac:	dc400117 	ldw	r17,4(sp)
  8097b0:	dc000017 	ldw	r16,0(sp)
  8097b4:	dec00604 	addi	sp,sp,24
  8097b8:	f800283a 	ret

008097bc <__pow5mult>:
  8097bc:	defffa04 	addi	sp,sp,-24
  8097c0:	dcc00315 	stw	r19,12(sp)
  8097c4:	dc000015 	stw	r16,0(sp)
  8097c8:	dfc00515 	stw	ra,20(sp)
  8097cc:	dd000415 	stw	r20,16(sp)
  8097d0:	dc800215 	stw	r18,8(sp)
  8097d4:	dc400115 	stw	r17,4(sp)
  8097d8:	308000cc 	andi	r2,r6,3
  8097dc:	3021883a 	mov	r16,r6
  8097e0:	2027883a 	mov	r19,r4
  8097e4:	10002f1e 	bne	r2,zero,8098a4 <__pow5mult+0xe8>
  8097e8:	2825883a 	mov	r18,r5
  8097ec:	8021d0ba 	srai	r16,r16,2
  8097f0:	80001a26 	beq	r16,zero,80985c <__pow5mult+0xa0>
  8097f4:	9c401217 	ldw	r17,72(r19)
  8097f8:	8800061e 	bne	r17,zero,809814 <__pow5mult+0x58>
  8097fc:	00003406 	br	8098d0 <__pow5mult+0x114>
  809800:	8021d07a 	srai	r16,r16,1
  809804:	80001526 	beq	r16,zero,80985c <__pow5mult+0xa0>
  809808:	88800017 	ldw	r2,0(r17)
  80980c:	10001c26 	beq	r2,zero,809880 <__pow5mult+0xc4>
  809810:	1023883a 	mov	r17,r2
  809814:	8080004c 	andi	r2,r16,1
  809818:	103ff926 	beq	r2,zero,809800 <__alt_mem_onchip_mem+0xff789800>
  80981c:	880d883a 	mov	r6,r17
  809820:	900b883a 	mov	r5,r18
  809824:	9809883a 	mov	r4,r19
  809828:	08095c40 	call	8095c4 <__multiply>
  80982c:	90001b26 	beq	r18,zero,80989c <__pow5mult+0xe0>
  809830:	91000117 	ldw	r4,4(r18)
  809834:	98c01317 	ldw	r3,76(r19)
  809838:	8021d07a 	srai	r16,r16,1
  80983c:	2109883a 	add	r4,r4,r4
  809840:	2109883a 	add	r4,r4,r4
  809844:	1907883a 	add	r3,r3,r4
  809848:	19000017 	ldw	r4,0(r3)
  80984c:	91000015 	stw	r4,0(r18)
  809850:	1c800015 	stw	r18,0(r3)
  809854:	1025883a 	mov	r18,r2
  809858:	803feb1e 	bne	r16,zero,809808 <__alt_mem_onchip_mem+0xff789808>
  80985c:	9005883a 	mov	r2,r18
  809860:	dfc00517 	ldw	ra,20(sp)
  809864:	dd000417 	ldw	r20,16(sp)
  809868:	dcc00317 	ldw	r19,12(sp)
  80986c:	dc800217 	ldw	r18,8(sp)
  809870:	dc400117 	ldw	r17,4(sp)
  809874:	dc000017 	ldw	r16,0(sp)
  809878:	dec00604 	addi	sp,sp,24
  80987c:	f800283a 	ret
  809880:	880d883a 	mov	r6,r17
  809884:	880b883a 	mov	r5,r17
  809888:	9809883a 	mov	r4,r19
  80988c:	08095c40 	call	8095c4 <__multiply>
  809890:	88800015 	stw	r2,0(r17)
  809894:	10000015 	stw	zero,0(r2)
  809898:	003fdd06 	br	809810 <__alt_mem_onchip_mem+0xff789810>
  80989c:	1025883a 	mov	r18,r2
  8098a0:	003fd706 	br	809800 <__alt_mem_onchip_mem+0xff789800>
  8098a4:	10bfffc4 	addi	r2,r2,-1
  8098a8:	1085883a 	add	r2,r2,r2
  8098ac:	00c02074 	movhi	r3,129
  8098b0:	18d01104 	addi	r3,r3,16452
  8098b4:	1085883a 	add	r2,r2,r2
  8098b8:	1885883a 	add	r2,r3,r2
  8098bc:	11800017 	ldw	r6,0(r2)
  8098c0:	000f883a 	mov	r7,zero
  8098c4:	080924c0 	call	80924c <__multadd>
  8098c8:	1025883a 	mov	r18,r2
  8098cc:	003fc706 	br	8097ec <__alt_mem_onchip_mem+0xff7897ec>
  8098d0:	05000044 	movi	r20,1
  8098d4:	a00b883a 	mov	r5,r20
  8098d8:	9809883a 	mov	r4,r19
  8098dc:	080917c0 	call	80917c <_Balloc>
  8098e0:	1023883a 	mov	r17,r2
  8098e4:	00809c44 	movi	r2,625
  8098e8:	88800515 	stw	r2,20(r17)
  8098ec:	8d000415 	stw	r20,16(r17)
  8098f0:	9c401215 	stw	r17,72(r19)
  8098f4:	88000015 	stw	zero,0(r17)
  8098f8:	003fc606 	br	809814 <__alt_mem_onchip_mem+0xff789814>

008098fc <__lshift>:
  8098fc:	defff904 	addi	sp,sp,-28
  809900:	dd400515 	stw	r21,20(sp)
  809904:	dcc00315 	stw	r19,12(sp)
  809908:	302bd17a 	srai	r21,r6,5
  80990c:	2cc00417 	ldw	r19,16(r5)
  809910:	28800217 	ldw	r2,8(r5)
  809914:	dd000415 	stw	r20,16(sp)
  809918:	ace7883a 	add	r19,r21,r19
  80991c:	dc800215 	stw	r18,8(sp)
  809920:	dc400115 	stw	r17,4(sp)
  809924:	dc000015 	stw	r16,0(sp)
  809928:	dfc00615 	stw	ra,24(sp)
  80992c:	9c000044 	addi	r16,r19,1
  809930:	2823883a 	mov	r17,r5
  809934:	3029883a 	mov	r20,r6
  809938:	2025883a 	mov	r18,r4
  80993c:	29400117 	ldw	r5,4(r5)
  809940:	1400030e 	bge	r2,r16,809950 <__lshift+0x54>
  809944:	1085883a 	add	r2,r2,r2
  809948:	29400044 	addi	r5,r5,1
  80994c:	143ffd16 	blt	r2,r16,809944 <__alt_mem_onchip_mem+0xff789944>
  809950:	9009883a 	mov	r4,r18
  809954:	080917c0 	call	80917c <_Balloc>
  809958:	10c00504 	addi	r3,r2,20
  80995c:	0540070e 	bge	zero,r21,80997c <__lshift+0x80>
  809960:	ad6b883a 	add	r21,r21,r21
  809964:	ad6b883a 	add	r21,r21,r21
  809968:	1809883a 	mov	r4,r3
  80996c:	1d47883a 	add	r3,r3,r21
  809970:	20000015 	stw	zero,0(r4)
  809974:	21000104 	addi	r4,r4,4
  809978:	193ffd1e 	bne	r3,r4,809970 <__alt_mem_onchip_mem+0xff789970>
  80997c:	8a000417 	ldw	r8,16(r17)
  809980:	89000504 	addi	r4,r17,20
  809984:	a18007cc 	andi	r6,r20,31
  809988:	4211883a 	add	r8,r8,r8
  80998c:	4211883a 	add	r8,r8,r8
  809990:	2211883a 	add	r8,r4,r8
  809994:	30002326 	beq	r6,zero,809a24 <__lshift+0x128>
  809998:	02400804 	movi	r9,32
  80999c:	4993c83a 	sub	r9,r9,r6
  8099a0:	000b883a 	mov	r5,zero
  8099a4:	21c00017 	ldw	r7,0(r4)
  8099a8:	1815883a 	mov	r10,r3
  8099ac:	18c00104 	addi	r3,r3,4
  8099b0:	398e983a 	sll	r7,r7,r6
  8099b4:	21000104 	addi	r4,r4,4
  8099b8:	394ab03a 	or	r5,r7,r5
  8099bc:	197fff15 	stw	r5,-4(r3)
  8099c0:	217fff17 	ldw	r5,-4(r4)
  8099c4:	2a4ad83a 	srl	r5,r5,r9
  8099c8:	223ff636 	bltu	r4,r8,8099a4 <__alt_mem_onchip_mem+0xff7899a4>
  8099cc:	51400115 	stw	r5,4(r10)
  8099d0:	28001a1e 	bne	r5,zero,809a3c <__lshift+0x140>
  8099d4:	843fffc4 	addi	r16,r16,-1
  8099d8:	14000415 	stw	r16,16(r2)
  8099dc:	88000826 	beq	r17,zero,809a00 <__lshift+0x104>
  8099e0:	89000117 	ldw	r4,4(r17)
  8099e4:	90c01317 	ldw	r3,76(r18)
  8099e8:	2109883a 	add	r4,r4,r4
  8099ec:	2109883a 	add	r4,r4,r4
  8099f0:	1907883a 	add	r3,r3,r4
  8099f4:	19000017 	ldw	r4,0(r3)
  8099f8:	89000015 	stw	r4,0(r17)
  8099fc:	1c400015 	stw	r17,0(r3)
  809a00:	dfc00617 	ldw	ra,24(sp)
  809a04:	dd400517 	ldw	r21,20(sp)
  809a08:	dd000417 	ldw	r20,16(sp)
  809a0c:	dcc00317 	ldw	r19,12(sp)
  809a10:	dc800217 	ldw	r18,8(sp)
  809a14:	dc400117 	ldw	r17,4(sp)
  809a18:	dc000017 	ldw	r16,0(sp)
  809a1c:	dec00704 	addi	sp,sp,28
  809a20:	f800283a 	ret
  809a24:	21400017 	ldw	r5,0(r4)
  809a28:	18c00104 	addi	r3,r3,4
  809a2c:	21000104 	addi	r4,r4,4
  809a30:	197fff15 	stw	r5,-4(r3)
  809a34:	223ffb36 	bltu	r4,r8,809a24 <__alt_mem_onchip_mem+0xff789a24>
  809a38:	003fe606 	br	8099d4 <__alt_mem_onchip_mem+0xff7899d4>
  809a3c:	9c000084 	addi	r16,r19,2
  809a40:	003fe406 	br	8099d4 <__alt_mem_onchip_mem+0xff7899d4>

00809a44 <__mcmp>:
  809a44:	20800417 	ldw	r2,16(r4)
  809a48:	28c00417 	ldw	r3,16(r5)
  809a4c:	10c5c83a 	sub	r2,r2,r3
  809a50:	1000111e 	bne	r2,zero,809a98 <__mcmp+0x54>
  809a54:	18c7883a 	add	r3,r3,r3
  809a58:	18c7883a 	add	r3,r3,r3
  809a5c:	21000504 	addi	r4,r4,20
  809a60:	29400504 	addi	r5,r5,20
  809a64:	20c5883a 	add	r2,r4,r3
  809a68:	28cb883a 	add	r5,r5,r3
  809a6c:	00000106 	br	809a74 <__mcmp+0x30>
  809a70:	20800a2e 	bgeu	r4,r2,809a9c <__mcmp+0x58>
  809a74:	10bfff04 	addi	r2,r2,-4
  809a78:	297fff04 	addi	r5,r5,-4
  809a7c:	11800017 	ldw	r6,0(r2)
  809a80:	28c00017 	ldw	r3,0(r5)
  809a84:	30fffa26 	beq	r6,r3,809a70 <__alt_mem_onchip_mem+0xff789a70>
  809a88:	30c00236 	bltu	r6,r3,809a94 <__mcmp+0x50>
  809a8c:	00800044 	movi	r2,1
  809a90:	f800283a 	ret
  809a94:	00bfffc4 	movi	r2,-1
  809a98:	f800283a 	ret
  809a9c:	0005883a 	mov	r2,zero
  809aa0:	f800283a 	ret

00809aa4 <__mdiff>:
  809aa4:	28c00417 	ldw	r3,16(r5)
  809aa8:	30800417 	ldw	r2,16(r6)
  809aac:	defffa04 	addi	sp,sp,-24
  809ab0:	dcc00315 	stw	r19,12(sp)
  809ab4:	dc800215 	stw	r18,8(sp)
  809ab8:	dfc00515 	stw	ra,20(sp)
  809abc:	dd000415 	stw	r20,16(sp)
  809ac0:	dc400115 	stw	r17,4(sp)
  809ac4:	dc000015 	stw	r16,0(sp)
  809ac8:	1887c83a 	sub	r3,r3,r2
  809acc:	2825883a 	mov	r18,r5
  809ad0:	3027883a 	mov	r19,r6
  809ad4:	1800141e 	bne	r3,zero,809b28 <__mdiff+0x84>
  809ad8:	1085883a 	add	r2,r2,r2
  809adc:	1085883a 	add	r2,r2,r2
  809ae0:	2a000504 	addi	r8,r5,20
  809ae4:	34000504 	addi	r16,r6,20
  809ae8:	4087883a 	add	r3,r8,r2
  809aec:	8085883a 	add	r2,r16,r2
  809af0:	00000106 	br	809af8 <__mdiff+0x54>
  809af4:	40c0592e 	bgeu	r8,r3,809c5c <__mdiff+0x1b8>
  809af8:	18ffff04 	addi	r3,r3,-4
  809afc:	10bfff04 	addi	r2,r2,-4
  809b00:	19c00017 	ldw	r7,0(r3)
  809b04:	11400017 	ldw	r5,0(r2)
  809b08:	397ffa26 	beq	r7,r5,809af4 <__alt_mem_onchip_mem+0xff789af4>
  809b0c:	3940592e 	bgeu	r7,r5,809c74 <__mdiff+0x1d0>
  809b10:	9005883a 	mov	r2,r18
  809b14:	4023883a 	mov	r17,r8
  809b18:	9825883a 	mov	r18,r19
  809b1c:	05000044 	movi	r20,1
  809b20:	1027883a 	mov	r19,r2
  809b24:	00000406 	br	809b38 <__mdiff+0x94>
  809b28:	18005616 	blt	r3,zero,809c84 <__mdiff+0x1e0>
  809b2c:	34400504 	addi	r17,r6,20
  809b30:	2c000504 	addi	r16,r5,20
  809b34:	0029883a 	mov	r20,zero
  809b38:	91400117 	ldw	r5,4(r18)
  809b3c:	080917c0 	call	80917c <_Balloc>
  809b40:	92400417 	ldw	r9,16(r18)
  809b44:	9b000417 	ldw	r12,16(r19)
  809b48:	12c00504 	addi	r11,r2,20
  809b4c:	4a51883a 	add	r8,r9,r9
  809b50:	6319883a 	add	r12,r12,r12
  809b54:	4211883a 	add	r8,r8,r8
  809b58:	6319883a 	add	r12,r12,r12
  809b5c:	15000315 	stw	r20,12(r2)
  809b60:	8211883a 	add	r8,r16,r8
  809b64:	8b19883a 	add	r12,r17,r12
  809b68:	0007883a 	mov	r3,zero
  809b6c:	81400017 	ldw	r5,0(r16)
  809b70:	89c00017 	ldw	r7,0(r17)
  809b74:	59800104 	addi	r6,r11,4
  809b78:	293fffcc 	andi	r4,r5,65535
  809b7c:	20c7883a 	add	r3,r4,r3
  809b80:	393fffcc 	andi	r4,r7,65535
  809b84:	1909c83a 	sub	r4,r3,r4
  809b88:	280ad43a 	srli	r5,r5,16
  809b8c:	380ed43a 	srli	r7,r7,16
  809b90:	2007d43a 	srai	r3,r4,16
  809b94:	213fffcc 	andi	r4,r4,65535
  809b98:	29cbc83a 	sub	r5,r5,r7
  809b9c:	28c7883a 	add	r3,r5,r3
  809ba0:	180a943a 	slli	r5,r3,16
  809ba4:	8c400104 	addi	r17,r17,4
  809ba8:	84000104 	addi	r16,r16,4
  809bac:	2908b03a 	or	r4,r5,r4
  809bb0:	59000015 	stw	r4,0(r11)
  809bb4:	1807d43a 	srai	r3,r3,16
  809bb8:	3015883a 	mov	r10,r6
  809bbc:	3017883a 	mov	r11,r6
  809bc0:	8b3fea36 	bltu	r17,r12,809b6c <__alt_mem_onchip_mem+0xff789b6c>
  809bc4:	8200162e 	bgeu	r16,r8,809c20 <__mdiff+0x17c>
  809bc8:	8017883a 	mov	r11,r16
  809bcc:	59400017 	ldw	r5,0(r11)
  809bd0:	31800104 	addi	r6,r6,4
  809bd4:	5ac00104 	addi	r11,r11,4
  809bd8:	293fffcc 	andi	r4,r5,65535
  809bdc:	20c7883a 	add	r3,r4,r3
  809be0:	280ed43a 	srli	r7,r5,16
  809be4:	180bd43a 	srai	r5,r3,16
  809be8:	193fffcc 	andi	r4,r3,65535
  809bec:	3947883a 	add	r3,r7,r5
  809bf0:	180a943a 	slli	r5,r3,16
  809bf4:	1807d43a 	srai	r3,r3,16
  809bf8:	2908b03a 	or	r4,r5,r4
  809bfc:	313fff15 	stw	r4,-4(r6)
  809c00:	5a3ff236 	bltu	r11,r8,809bcc <__alt_mem_onchip_mem+0xff789bcc>
  809c04:	0406303a 	nor	r3,zero,r16
  809c08:	1a07883a 	add	r3,r3,r8
  809c0c:	1806d0ba 	srli	r3,r3,2
  809c10:	18c00044 	addi	r3,r3,1
  809c14:	18c7883a 	add	r3,r3,r3
  809c18:	18c7883a 	add	r3,r3,r3
  809c1c:	50d5883a 	add	r10,r10,r3
  809c20:	50ffff04 	addi	r3,r10,-4
  809c24:	2000041e 	bne	r4,zero,809c38 <__mdiff+0x194>
  809c28:	18ffff04 	addi	r3,r3,-4
  809c2c:	19000017 	ldw	r4,0(r3)
  809c30:	4a7fffc4 	addi	r9,r9,-1
  809c34:	203ffc26 	beq	r4,zero,809c28 <__alt_mem_onchip_mem+0xff789c28>
  809c38:	12400415 	stw	r9,16(r2)
  809c3c:	dfc00517 	ldw	ra,20(sp)
  809c40:	dd000417 	ldw	r20,16(sp)
  809c44:	dcc00317 	ldw	r19,12(sp)
  809c48:	dc800217 	ldw	r18,8(sp)
  809c4c:	dc400117 	ldw	r17,4(sp)
  809c50:	dc000017 	ldw	r16,0(sp)
  809c54:	dec00604 	addi	sp,sp,24
  809c58:	f800283a 	ret
  809c5c:	000b883a 	mov	r5,zero
  809c60:	080917c0 	call	80917c <_Balloc>
  809c64:	00c00044 	movi	r3,1
  809c68:	10c00415 	stw	r3,16(r2)
  809c6c:	10000515 	stw	zero,20(r2)
  809c70:	003ff206 	br	809c3c <__alt_mem_onchip_mem+0xff789c3c>
  809c74:	8023883a 	mov	r17,r16
  809c78:	0029883a 	mov	r20,zero
  809c7c:	4021883a 	mov	r16,r8
  809c80:	003fad06 	br	809b38 <__alt_mem_onchip_mem+0xff789b38>
  809c84:	9005883a 	mov	r2,r18
  809c88:	94400504 	addi	r17,r18,20
  809c8c:	9c000504 	addi	r16,r19,20
  809c90:	9825883a 	mov	r18,r19
  809c94:	05000044 	movi	r20,1
  809c98:	1027883a 	mov	r19,r2
  809c9c:	003fa606 	br	809b38 <__alt_mem_onchip_mem+0xff789b38>

00809ca0 <__ulp>:
  809ca0:	295ffc2c 	andhi	r5,r5,32752
  809ca4:	00bf3034 	movhi	r2,64704
  809ca8:	2887883a 	add	r3,r5,r2
  809cac:	00c0020e 	bge	zero,r3,809cb8 <__ulp+0x18>
  809cb0:	0005883a 	mov	r2,zero
  809cb4:	f800283a 	ret
  809cb8:	00c7c83a 	sub	r3,zero,r3
  809cbc:	1807d53a 	srai	r3,r3,20
  809cc0:	008004c4 	movi	r2,19
  809cc4:	10c00b0e 	bge	r2,r3,809cf4 <__ulp+0x54>
  809cc8:	18bffb04 	addi	r2,r3,-20
  809ccc:	01000784 	movi	r4,30
  809cd0:	0007883a 	mov	r3,zero
  809cd4:	20800516 	blt	r4,r2,809cec <__ulp+0x4c>
  809cd8:	010007c4 	movi	r4,31
  809cdc:	2089c83a 	sub	r4,r4,r2
  809ce0:	00800044 	movi	r2,1
  809ce4:	1104983a 	sll	r2,r2,r4
  809ce8:	f800283a 	ret
  809cec:	00800044 	movi	r2,1
  809cf0:	f800283a 	ret
  809cf4:	01400234 	movhi	r5,8
  809cf8:	28c7d83a 	sra	r3,r5,r3
  809cfc:	0005883a 	mov	r2,zero
  809d00:	f800283a 	ret

00809d04 <__b2d>:
  809d04:	defffa04 	addi	sp,sp,-24
  809d08:	dc000015 	stw	r16,0(sp)
  809d0c:	24000417 	ldw	r16,16(r4)
  809d10:	dc400115 	stw	r17,4(sp)
  809d14:	24400504 	addi	r17,r4,20
  809d18:	8421883a 	add	r16,r16,r16
  809d1c:	8421883a 	add	r16,r16,r16
  809d20:	8c21883a 	add	r16,r17,r16
  809d24:	dc800215 	stw	r18,8(sp)
  809d28:	84bfff17 	ldw	r18,-4(r16)
  809d2c:	dd000415 	stw	r20,16(sp)
  809d30:	dcc00315 	stw	r19,12(sp)
  809d34:	9009883a 	mov	r4,r18
  809d38:	2829883a 	mov	r20,r5
  809d3c:	dfc00515 	stw	ra,20(sp)
  809d40:	08094700 	call	809470 <__hi0bits>
  809d44:	00c00804 	movi	r3,32
  809d48:	1889c83a 	sub	r4,r3,r2
  809d4c:	a1000015 	stw	r4,0(r20)
  809d50:	01000284 	movi	r4,10
  809d54:	84ffff04 	addi	r19,r16,-4
  809d58:	20801216 	blt	r4,r2,809da4 <__b2d+0xa0>
  809d5c:	018002c4 	movi	r6,11
  809d60:	308dc83a 	sub	r6,r6,r2
  809d64:	9186d83a 	srl	r3,r18,r6
  809d68:	18cffc34 	orhi	r3,r3,16368
  809d6c:	8cc0212e 	bgeu	r17,r19,809df4 <__b2d+0xf0>
  809d70:	813ffe17 	ldw	r4,-8(r16)
  809d74:	218cd83a 	srl	r6,r4,r6
  809d78:	10800544 	addi	r2,r2,21
  809d7c:	9084983a 	sll	r2,r18,r2
  809d80:	1184b03a 	or	r2,r2,r6
  809d84:	dfc00517 	ldw	ra,20(sp)
  809d88:	dd000417 	ldw	r20,16(sp)
  809d8c:	dcc00317 	ldw	r19,12(sp)
  809d90:	dc800217 	ldw	r18,8(sp)
  809d94:	dc400117 	ldw	r17,4(sp)
  809d98:	dc000017 	ldw	r16,0(sp)
  809d9c:	dec00604 	addi	sp,sp,24
  809da0:	f800283a 	ret
  809da4:	8cc00f2e 	bgeu	r17,r19,809de4 <__b2d+0xe0>
  809da8:	117ffd44 	addi	r5,r2,-11
  809dac:	80bffe17 	ldw	r2,-8(r16)
  809db0:	28000e26 	beq	r5,zero,809dec <__b2d+0xe8>
  809db4:	1949c83a 	sub	r4,r3,r5
  809db8:	9164983a 	sll	r18,r18,r5
  809dbc:	1106d83a 	srl	r3,r2,r4
  809dc0:	81bffe04 	addi	r6,r16,-8
  809dc4:	948ffc34 	orhi	r18,r18,16368
  809dc8:	90c6b03a 	or	r3,r18,r3
  809dcc:	89800e2e 	bgeu	r17,r6,809e08 <__b2d+0x104>
  809dd0:	81bffd17 	ldw	r6,-12(r16)
  809dd4:	1144983a 	sll	r2,r2,r5
  809dd8:	310ad83a 	srl	r5,r6,r4
  809ddc:	2884b03a 	or	r2,r5,r2
  809de0:	003fe806 	br	809d84 <__alt_mem_onchip_mem+0xff789d84>
  809de4:	10bffd44 	addi	r2,r2,-11
  809de8:	1000041e 	bne	r2,zero,809dfc <__b2d+0xf8>
  809dec:	90cffc34 	orhi	r3,r18,16368
  809df0:	003fe406 	br	809d84 <__alt_mem_onchip_mem+0xff789d84>
  809df4:	000d883a 	mov	r6,zero
  809df8:	003fdf06 	br	809d78 <__alt_mem_onchip_mem+0xff789d78>
  809dfc:	90a4983a 	sll	r18,r18,r2
  809e00:	0005883a 	mov	r2,zero
  809e04:	003ff906 	br	809dec <__alt_mem_onchip_mem+0xff789dec>
  809e08:	1144983a 	sll	r2,r2,r5
  809e0c:	003fdd06 	br	809d84 <__alt_mem_onchip_mem+0xff789d84>

00809e10 <__d2b>:
  809e10:	defff804 	addi	sp,sp,-32
  809e14:	dc000215 	stw	r16,8(sp)
  809e18:	3021883a 	mov	r16,r6
  809e1c:	dc400315 	stw	r17,12(sp)
  809e20:	8022907a 	slli	r17,r16,1
  809e24:	dd000615 	stw	r20,24(sp)
  809e28:	2829883a 	mov	r20,r5
  809e2c:	01400044 	movi	r5,1
  809e30:	dcc00515 	stw	r19,20(sp)
  809e34:	dc800415 	stw	r18,16(sp)
  809e38:	dfc00715 	stw	ra,28(sp)
  809e3c:	3825883a 	mov	r18,r7
  809e40:	8822d57a 	srli	r17,r17,21
  809e44:	080917c0 	call	80917c <_Balloc>
  809e48:	1027883a 	mov	r19,r2
  809e4c:	00800434 	movhi	r2,16
  809e50:	10bfffc4 	addi	r2,r2,-1
  809e54:	808c703a 	and	r6,r16,r2
  809e58:	88000126 	beq	r17,zero,809e60 <__d2b+0x50>
  809e5c:	31800434 	orhi	r6,r6,16
  809e60:	d9800015 	stw	r6,0(sp)
  809e64:	a0002426 	beq	r20,zero,809ef8 <__d2b+0xe8>
  809e68:	d9000104 	addi	r4,sp,4
  809e6c:	dd000115 	stw	r20,4(sp)
  809e70:	08094d80 	call	8094d8 <__lo0bits>
  809e74:	d8c00017 	ldw	r3,0(sp)
  809e78:	10002f1e 	bne	r2,zero,809f38 <__d2b+0x128>
  809e7c:	d9000117 	ldw	r4,4(sp)
  809e80:	99000515 	stw	r4,20(r19)
  809e84:	1821003a 	cmpeq	r16,r3,zero
  809e88:	01000084 	movi	r4,2
  809e8c:	2421c83a 	sub	r16,r4,r16
  809e90:	98c00615 	stw	r3,24(r19)
  809e94:	9c000415 	stw	r16,16(r19)
  809e98:	88001f1e 	bne	r17,zero,809f18 <__d2b+0x108>
  809e9c:	10bef384 	addi	r2,r2,-1074
  809ea0:	90800015 	stw	r2,0(r18)
  809ea4:	00900034 	movhi	r2,16384
  809ea8:	10bfffc4 	addi	r2,r2,-1
  809eac:	8085883a 	add	r2,r16,r2
  809eb0:	1085883a 	add	r2,r2,r2
  809eb4:	1085883a 	add	r2,r2,r2
  809eb8:	9885883a 	add	r2,r19,r2
  809ebc:	11000517 	ldw	r4,20(r2)
  809ec0:	8020917a 	slli	r16,r16,5
  809ec4:	08094700 	call	809470 <__hi0bits>
  809ec8:	d8c00817 	ldw	r3,32(sp)
  809ecc:	8085c83a 	sub	r2,r16,r2
  809ed0:	18800015 	stw	r2,0(r3)
  809ed4:	9805883a 	mov	r2,r19
  809ed8:	dfc00717 	ldw	ra,28(sp)
  809edc:	dd000617 	ldw	r20,24(sp)
  809ee0:	dcc00517 	ldw	r19,20(sp)
  809ee4:	dc800417 	ldw	r18,16(sp)
  809ee8:	dc400317 	ldw	r17,12(sp)
  809eec:	dc000217 	ldw	r16,8(sp)
  809ef0:	dec00804 	addi	sp,sp,32
  809ef4:	f800283a 	ret
  809ef8:	d809883a 	mov	r4,sp
  809efc:	08094d80 	call	8094d8 <__lo0bits>
  809f00:	d8c00017 	ldw	r3,0(sp)
  809f04:	04000044 	movi	r16,1
  809f08:	9c000415 	stw	r16,16(r19)
  809f0c:	98c00515 	stw	r3,20(r19)
  809f10:	10800804 	addi	r2,r2,32
  809f14:	883fe126 	beq	r17,zero,809e9c <__alt_mem_onchip_mem+0xff789e9c>
  809f18:	00c00d44 	movi	r3,53
  809f1c:	8c7ef344 	addi	r17,r17,-1075
  809f20:	88a3883a 	add	r17,r17,r2
  809f24:	1885c83a 	sub	r2,r3,r2
  809f28:	d8c00817 	ldw	r3,32(sp)
  809f2c:	94400015 	stw	r17,0(r18)
  809f30:	18800015 	stw	r2,0(r3)
  809f34:	003fe706 	br	809ed4 <__alt_mem_onchip_mem+0xff789ed4>
  809f38:	01000804 	movi	r4,32
  809f3c:	2089c83a 	sub	r4,r4,r2
  809f40:	1908983a 	sll	r4,r3,r4
  809f44:	d9400117 	ldw	r5,4(sp)
  809f48:	1886d83a 	srl	r3,r3,r2
  809f4c:	2148b03a 	or	r4,r4,r5
  809f50:	99000515 	stw	r4,20(r19)
  809f54:	d8c00015 	stw	r3,0(sp)
  809f58:	003fca06 	br	809e84 <__alt_mem_onchip_mem+0xff789e84>

00809f5c <__ratio>:
  809f5c:	defff904 	addi	sp,sp,-28
  809f60:	dc400315 	stw	r17,12(sp)
  809f64:	2823883a 	mov	r17,r5
  809f68:	d9400104 	addi	r5,sp,4
  809f6c:	dfc00615 	stw	ra,24(sp)
  809f70:	dcc00515 	stw	r19,20(sp)
  809f74:	dc800415 	stw	r18,16(sp)
  809f78:	2027883a 	mov	r19,r4
  809f7c:	dc000215 	stw	r16,8(sp)
  809f80:	0809d040 	call	809d04 <__b2d>
  809f84:	d80b883a 	mov	r5,sp
  809f88:	8809883a 	mov	r4,r17
  809f8c:	1025883a 	mov	r18,r2
  809f90:	1821883a 	mov	r16,r3
  809f94:	0809d040 	call	809d04 <__b2d>
  809f98:	8a000417 	ldw	r8,16(r17)
  809f9c:	99000417 	ldw	r4,16(r19)
  809fa0:	d9400117 	ldw	r5,4(sp)
  809fa4:	2209c83a 	sub	r4,r4,r8
  809fa8:	2010917a 	slli	r8,r4,5
  809fac:	d9000017 	ldw	r4,0(sp)
  809fb0:	2909c83a 	sub	r4,r5,r4
  809fb4:	4109883a 	add	r4,r8,r4
  809fb8:	01000e0e 	bge	zero,r4,809ff4 <__ratio+0x98>
  809fbc:	2008953a 	slli	r4,r4,20
  809fc0:	2421883a 	add	r16,r4,r16
  809fc4:	100d883a 	mov	r6,r2
  809fc8:	180f883a 	mov	r7,r3
  809fcc:	9009883a 	mov	r4,r18
  809fd0:	800b883a 	mov	r5,r16
  809fd4:	080db580 	call	80db58 <__divdf3>
  809fd8:	dfc00617 	ldw	ra,24(sp)
  809fdc:	dcc00517 	ldw	r19,20(sp)
  809fe0:	dc800417 	ldw	r18,16(sp)
  809fe4:	dc400317 	ldw	r17,12(sp)
  809fe8:	dc000217 	ldw	r16,8(sp)
  809fec:	dec00704 	addi	sp,sp,28
  809ff0:	f800283a 	ret
  809ff4:	2008953a 	slli	r4,r4,20
  809ff8:	1907c83a 	sub	r3,r3,r4
  809ffc:	003ff106 	br	809fc4 <__alt_mem_onchip_mem+0xff789fc4>

0080a000 <_mprec_log10>:
  80a000:	defffe04 	addi	sp,sp,-8
  80a004:	dc000015 	stw	r16,0(sp)
  80a008:	dfc00115 	stw	ra,4(sp)
  80a00c:	008005c4 	movi	r2,23
  80a010:	2021883a 	mov	r16,r4
  80a014:	11000d0e 	bge	r2,r4,80a04c <_mprec_log10+0x4c>
  80a018:	0005883a 	mov	r2,zero
  80a01c:	00cffc34 	movhi	r3,16368
  80a020:	843fffc4 	addi	r16,r16,-1
  80a024:	000d883a 	mov	r6,zero
  80a028:	01d00934 	movhi	r7,16420
  80a02c:	1009883a 	mov	r4,r2
  80a030:	180b883a 	mov	r5,r3
  80a034:	080e6980 	call	80e698 <__muldf3>
  80a038:	803ff91e 	bne	r16,zero,80a020 <__alt_mem_onchip_mem+0xff78a020>
  80a03c:	dfc00117 	ldw	ra,4(sp)
  80a040:	dc000017 	ldw	r16,0(sp)
  80a044:	dec00204 	addi	sp,sp,8
  80a048:	f800283a 	ret
  80a04c:	202090fa 	slli	r16,r4,3
  80a050:	00802074 	movhi	r2,129
  80a054:	10902804 	addi	r2,r2,16544
  80a058:	1421883a 	add	r16,r2,r16
  80a05c:	80800017 	ldw	r2,0(r16)
  80a060:	80c00117 	ldw	r3,4(r16)
  80a064:	dfc00117 	ldw	ra,4(sp)
  80a068:	dc000017 	ldw	r16,0(sp)
  80a06c:	dec00204 	addi	sp,sp,8
  80a070:	f800283a 	ret

0080a074 <__copybits>:
  80a074:	297fffc4 	addi	r5,r5,-1
  80a078:	280fd17a 	srai	r7,r5,5
  80a07c:	30c00417 	ldw	r3,16(r6)
  80a080:	30800504 	addi	r2,r6,20
  80a084:	39c00044 	addi	r7,r7,1
  80a088:	18c7883a 	add	r3,r3,r3
  80a08c:	39cf883a 	add	r7,r7,r7
  80a090:	18c7883a 	add	r3,r3,r3
  80a094:	39cf883a 	add	r7,r7,r7
  80a098:	10c7883a 	add	r3,r2,r3
  80a09c:	21cf883a 	add	r7,r4,r7
  80a0a0:	10c00d2e 	bgeu	r2,r3,80a0d8 <__copybits+0x64>
  80a0a4:	200b883a 	mov	r5,r4
  80a0a8:	12000017 	ldw	r8,0(r2)
  80a0ac:	29400104 	addi	r5,r5,4
  80a0b0:	10800104 	addi	r2,r2,4
  80a0b4:	2a3fff15 	stw	r8,-4(r5)
  80a0b8:	10fffb36 	bltu	r2,r3,80a0a8 <__alt_mem_onchip_mem+0xff78a0a8>
  80a0bc:	1985c83a 	sub	r2,r3,r6
  80a0c0:	10bffac4 	addi	r2,r2,-21
  80a0c4:	1004d0ba 	srli	r2,r2,2
  80a0c8:	10800044 	addi	r2,r2,1
  80a0cc:	1085883a 	add	r2,r2,r2
  80a0d0:	1085883a 	add	r2,r2,r2
  80a0d4:	2089883a 	add	r4,r4,r2
  80a0d8:	21c0032e 	bgeu	r4,r7,80a0e8 <__copybits+0x74>
  80a0dc:	20000015 	stw	zero,0(r4)
  80a0e0:	21000104 	addi	r4,r4,4
  80a0e4:	21fffd36 	bltu	r4,r7,80a0dc <__alt_mem_onchip_mem+0xff78a0dc>
  80a0e8:	f800283a 	ret

0080a0ec <__any_on>:
  80a0ec:	20c00417 	ldw	r3,16(r4)
  80a0f0:	2805d17a 	srai	r2,r5,5
  80a0f4:	21000504 	addi	r4,r4,20
  80a0f8:	18800d0e 	bge	r3,r2,80a130 <__any_on+0x44>
  80a0fc:	18c7883a 	add	r3,r3,r3
  80a100:	18c7883a 	add	r3,r3,r3
  80a104:	20c7883a 	add	r3,r4,r3
  80a108:	20c0192e 	bgeu	r4,r3,80a170 <__any_on+0x84>
  80a10c:	18bfff17 	ldw	r2,-4(r3)
  80a110:	18ffff04 	addi	r3,r3,-4
  80a114:	1000041e 	bne	r2,zero,80a128 <__any_on+0x3c>
  80a118:	20c0142e 	bgeu	r4,r3,80a16c <__any_on+0x80>
  80a11c:	18ffff04 	addi	r3,r3,-4
  80a120:	19400017 	ldw	r5,0(r3)
  80a124:	283ffc26 	beq	r5,zero,80a118 <__alt_mem_onchip_mem+0xff78a118>
  80a128:	00800044 	movi	r2,1
  80a12c:	f800283a 	ret
  80a130:	10c00a0e 	bge	r2,r3,80a15c <__any_on+0x70>
  80a134:	1085883a 	add	r2,r2,r2
  80a138:	1085883a 	add	r2,r2,r2
  80a13c:	294007cc 	andi	r5,r5,31
  80a140:	2087883a 	add	r3,r4,r2
  80a144:	283ff026 	beq	r5,zero,80a108 <__alt_mem_onchip_mem+0xff78a108>
  80a148:	19800017 	ldw	r6,0(r3)
  80a14c:	3144d83a 	srl	r2,r6,r5
  80a150:	114a983a 	sll	r5,r2,r5
  80a154:	317ff41e 	bne	r6,r5,80a128 <__alt_mem_onchip_mem+0xff78a128>
  80a158:	003feb06 	br	80a108 <__alt_mem_onchip_mem+0xff78a108>
  80a15c:	1085883a 	add	r2,r2,r2
  80a160:	1085883a 	add	r2,r2,r2
  80a164:	2087883a 	add	r3,r4,r2
  80a168:	003fe706 	br	80a108 <__alt_mem_onchip_mem+0xff78a108>
  80a16c:	f800283a 	ret
  80a170:	0005883a 	mov	r2,zero
  80a174:	f800283a 	ret

0080a178 <_putc_r>:
  80a178:	defffc04 	addi	sp,sp,-16
  80a17c:	dc000215 	stw	r16,8(sp)
  80a180:	dfc00315 	stw	ra,12(sp)
  80a184:	2021883a 	mov	r16,r4
  80a188:	20000226 	beq	r4,zero,80a194 <_putc_r+0x1c>
  80a18c:	20800e17 	ldw	r2,56(r4)
  80a190:	10001b26 	beq	r2,zero,80a200 <_putc_r+0x88>
  80a194:	30800217 	ldw	r2,8(r6)
  80a198:	10bfffc4 	addi	r2,r2,-1
  80a19c:	30800215 	stw	r2,8(r6)
  80a1a0:	10000a16 	blt	r2,zero,80a1cc <_putc_r+0x54>
  80a1a4:	30800017 	ldw	r2,0(r6)
  80a1a8:	11400005 	stb	r5,0(r2)
  80a1ac:	30800017 	ldw	r2,0(r6)
  80a1b0:	10c00044 	addi	r3,r2,1
  80a1b4:	30c00015 	stw	r3,0(r6)
  80a1b8:	10800003 	ldbu	r2,0(r2)
  80a1bc:	dfc00317 	ldw	ra,12(sp)
  80a1c0:	dc000217 	ldw	r16,8(sp)
  80a1c4:	dec00404 	addi	sp,sp,16
  80a1c8:	f800283a 	ret
  80a1cc:	30c00617 	ldw	r3,24(r6)
  80a1d0:	10c00616 	blt	r2,r3,80a1ec <_putc_r+0x74>
  80a1d4:	30800017 	ldw	r2,0(r6)
  80a1d8:	00c00284 	movi	r3,10
  80a1dc:	11400005 	stb	r5,0(r2)
  80a1e0:	30800017 	ldw	r2,0(r6)
  80a1e4:	11400003 	ldbu	r5,0(r2)
  80a1e8:	28fff11e 	bne	r5,r3,80a1b0 <__alt_mem_onchip_mem+0xff78a1b0>
  80a1ec:	8009883a 	mov	r4,r16
  80a1f0:	dfc00317 	ldw	ra,12(sp)
  80a1f4:	dc000217 	ldw	r16,8(sp)
  80a1f8:	dec00404 	addi	sp,sp,16
  80a1fc:	080c03c1 	jmpi	80c03c <__swbuf_r>
  80a200:	d9400015 	stw	r5,0(sp)
  80a204:	d9800115 	stw	r6,4(sp)
  80a208:	08024280 	call	802428 <__sinit>
  80a20c:	d9800117 	ldw	r6,4(sp)
  80a210:	d9400017 	ldw	r5,0(sp)
  80a214:	003fdf06 	br	80a194 <__alt_mem_onchip_mem+0xff78a194>

0080a218 <putc>:
  80a218:	00802074 	movhi	r2,129
  80a21c:	defffc04 	addi	sp,sp,-16
  80a220:	1097e104 	addi	r2,r2,24452
  80a224:	dc000115 	stw	r16,4(sp)
  80a228:	14000017 	ldw	r16,0(r2)
  80a22c:	dc400215 	stw	r17,8(sp)
  80a230:	dfc00315 	stw	ra,12(sp)
  80a234:	2023883a 	mov	r17,r4
  80a238:	80000226 	beq	r16,zero,80a244 <putc+0x2c>
  80a23c:	80800e17 	ldw	r2,56(r16)
  80a240:	10001a26 	beq	r2,zero,80a2ac <putc+0x94>
  80a244:	28800217 	ldw	r2,8(r5)
  80a248:	10bfffc4 	addi	r2,r2,-1
  80a24c:	28800215 	stw	r2,8(r5)
  80a250:	10000b16 	blt	r2,zero,80a280 <putc+0x68>
  80a254:	28800017 	ldw	r2,0(r5)
  80a258:	14400005 	stb	r17,0(r2)
  80a25c:	28800017 	ldw	r2,0(r5)
  80a260:	10c00044 	addi	r3,r2,1
  80a264:	28c00015 	stw	r3,0(r5)
  80a268:	10800003 	ldbu	r2,0(r2)
  80a26c:	dfc00317 	ldw	ra,12(sp)
  80a270:	dc400217 	ldw	r17,8(sp)
  80a274:	dc000117 	ldw	r16,4(sp)
  80a278:	dec00404 	addi	sp,sp,16
  80a27c:	f800283a 	ret
  80a280:	28c00617 	ldw	r3,24(r5)
  80a284:	10c00e16 	blt	r2,r3,80a2c0 <putc+0xa8>
  80a288:	28800017 	ldw	r2,0(r5)
  80a28c:	01000284 	movi	r4,10
  80a290:	14400005 	stb	r17,0(r2)
  80a294:	28800017 	ldw	r2,0(r5)
  80a298:	10c00003 	ldbu	r3,0(r2)
  80a29c:	193ff01e 	bne	r3,r4,80a260 <__alt_mem_onchip_mem+0xff78a260>
  80a2a0:	280d883a 	mov	r6,r5
  80a2a4:	180b883a 	mov	r5,r3
  80a2a8:	00000706 	br	80a2c8 <putc+0xb0>
  80a2ac:	8009883a 	mov	r4,r16
  80a2b0:	d9400015 	stw	r5,0(sp)
  80a2b4:	08024280 	call	802428 <__sinit>
  80a2b8:	d9400017 	ldw	r5,0(sp)
  80a2bc:	003fe106 	br	80a244 <__alt_mem_onchip_mem+0xff78a244>
  80a2c0:	280d883a 	mov	r6,r5
  80a2c4:	880b883a 	mov	r5,r17
  80a2c8:	8009883a 	mov	r4,r16
  80a2cc:	dfc00317 	ldw	ra,12(sp)
  80a2d0:	dc400217 	ldw	r17,8(sp)
  80a2d4:	dc000117 	ldw	r16,4(sp)
  80a2d8:	dec00404 	addi	sp,sp,16
  80a2dc:	080c03c1 	jmpi	80c03c <__swbuf_r>

0080a2e0 <_read_r>:
  80a2e0:	defffd04 	addi	sp,sp,-12
  80a2e4:	2805883a 	mov	r2,r5
  80a2e8:	dc000015 	stw	r16,0(sp)
  80a2ec:	04002074 	movhi	r16,129
  80a2f0:	dc400115 	stw	r17,4(sp)
  80a2f4:	300b883a 	mov	r5,r6
  80a2f8:	841f4204 	addi	r16,r16,32008
  80a2fc:	2023883a 	mov	r17,r4
  80a300:	380d883a 	mov	r6,r7
  80a304:	1009883a 	mov	r4,r2
  80a308:	dfc00215 	stw	ra,8(sp)
  80a30c:	80000015 	stw	zero,0(r16)
  80a310:	08104140 	call	810414 <read>
  80a314:	00ffffc4 	movi	r3,-1
  80a318:	10c00526 	beq	r2,r3,80a330 <_read_r+0x50>
  80a31c:	dfc00217 	ldw	ra,8(sp)
  80a320:	dc400117 	ldw	r17,4(sp)
  80a324:	dc000017 	ldw	r16,0(sp)
  80a328:	dec00304 	addi	sp,sp,12
  80a32c:	f800283a 	ret
  80a330:	80c00017 	ldw	r3,0(r16)
  80a334:	183ff926 	beq	r3,zero,80a31c <__alt_mem_onchip_mem+0xff78a31c>
  80a338:	88c00015 	stw	r3,0(r17)
  80a33c:	003ff706 	br	80a31c <__alt_mem_onchip_mem+0xff78a31c>

0080a340 <_realloc_r>:
  80a340:	defff604 	addi	sp,sp,-40
  80a344:	dc800215 	stw	r18,8(sp)
  80a348:	dfc00915 	stw	ra,36(sp)
  80a34c:	df000815 	stw	fp,32(sp)
  80a350:	ddc00715 	stw	r23,28(sp)
  80a354:	dd800615 	stw	r22,24(sp)
  80a358:	dd400515 	stw	r21,20(sp)
  80a35c:	dd000415 	stw	r20,16(sp)
  80a360:	dcc00315 	stw	r19,12(sp)
  80a364:	dc400115 	stw	r17,4(sp)
  80a368:	dc000015 	stw	r16,0(sp)
  80a36c:	3025883a 	mov	r18,r6
  80a370:	2800b726 	beq	r5,zero,80a650 <_realloc_r+0x310>
  80a374:	282b883a 	mov	r21,r5
  80a378:	2029883a 	mov	r20,r4
  80a37c:	081013c0 	call	81013c <__malloc_lock>
  80a380:	a8bfff17 	ldw	r2,-4(r21)
  80a384:	043fff04 	movi	r16,-4
  80a388:	90c002c4 	addi	r3,r18,11
  80a38c:	01000584 	movi	r4,22
  80a390:	acfffe04 	addi	r19,r21,-8
  80a394:	1420703a 	and	r16,r2,r16
  80a398:	20c0332e 	bgeu	r4,r3,80a468 <_realloc_r+0x128>
  80a39c:	047ffe04 	movi	r17,-8
  80a3a0:	1c62703a 	and	r17,r3,r17
  80a3a4:	8807883a 	mov	r3,r17
  80a3a8:	88005816 	blt	r17,zero,80a50c <_realloc_r+0x1cc>
  80a3ac:	8c805736 	bltu	r17,r18,80a50c <_realloc_r+0x1cc>
  80a3b0:	80c0300e 	bge	r16,r3,80a474 <_realloc_r+0x134>
  80a3b4:	07002074 	movhi	fp,129
  80a3b8:	e711bc04 	addi	fp,fp,18160
  80a3bc:	e1c00217 	ldw	r7,8(fp)
  80a3c0:	9c09883a 	add	r4,r19,r16
  80a3c4:	22000117 	ldw	r8,4(r4)
  80a3c8:	21c06326 	beq	r4,r7,80a558 <_realloc_r+0x218>
  80a3cc:	017fff84 	movi	r5,-2
  80a3d0:	414a703a 	and	r5,r8,r5
  80a3d4:	214b883a 	add	r5,r4,r5
  80a3d8:	29800117 	ldw	r6,4(r5)
  80a3dc:	3180004c 	andi	r6,r6,1
  80a3e0:	30003f26 	beq	r6,zero,80a4e0 <_realloc_r+0x1a0>
  80a3e4:	1080004c 	andi	r2,r2,1
  80a3e8:	10008326 	beq	r2,zero,80a5f8 <_realloc_r+0x2b8>
  80a3ec:	900b883a 	mov	r5,r18
  80a3f0:	a009883a 	mov	r4,r20
  80a3f4:	0802f180 	call	802f18 <_malloc_r>
  80a3f8:	1025883a 	mov	r18,r2
  80a3fc:	10011e26 	beq	r2,zero,80a878 <_realloc_r+0x538>
  80a400:	a93fff17 	ldw	r4,-4(r21)
  80a404:	10fffe04 	addi	r3,r2,-8
  80a408:	00bfff84 	movi	r2,-2
  80a40c:	2084703a 	and	r2,r4,r2
  80a410:	9885883a 	add	r2,r19,r2
  80a414:	1880ee26 	beq	r3,r2,80a7d0 <_realloc_r+0x490>
  80a418:	81bfff04 	addi	r6,r16,-4
  80a41c:	00800904 	movi	r2,36
  80a420:	1180b836 	bltu	r2,r6,80a704 <_realloc_r+0x3c4>
  80a424:	00c004c4 	movi	r3,19
  80a428:	19809636 	bltu	r3,r6,80a684 <_realloc_r+0x344>
  80a42c:	9005883a 	mov	r2,r18
  80a430:	a807883a 	mov	r3,r21
  80a434:	19000017 	ldw	r4,0(r3)
  80a438:	11000015 	stw	r4,0(r2)
  80a43c:	19000117 	ldw	r4,4(r3)
  80a440:	11000115 	stw	r4,4(r2)
  80a444:	18c00217 	ldw	r3,8(r3)
  80a448:	10c00215 	stw	r3,8(r2)
  80a44c:	a80b883a 	mov	r5,r21
  80a450:	a009883a 	mov	r4,r20
  80a454:	08084980 	call	808498 <_free_r>
  80a458:	a009883a 	mov	r4,r20
  80a45c:	08101600 	call	810160 <__malloc_unlock>
  80a460:	9005883a 	mov	r2,r18
  80a464:	00001206 	br	80a4b0 <_realloc_r+0x170>
  80a468:	00c00404 	movi	r3,16
  80a46c:	1823883a 	mov	r17,r3
  80a470:	003fce06 	br	80a3ac <__alt_mem_onchip_mem+0xff78a3ac>
  80a474:	a825883a 	mov	r18,r21
  80a478:	8445c83a 	sub	r2,r16,r17
  80a47c:	00c003c4 	movi	r3,15
  80a480:	18802636 	bltu	r3,r2,80a51c <_realloc_r+0x1dc>
  80a484:	99800117 	ldw	r6,4(r19)
  80a488:	9c07883a 	add	r3,r19,r16
  80a48c:	3180004c 	andi	r6,r6,1
  80a490:	3420b03a 	or	r16,r6,r16
  80a494:	9c000115 	stw	r16,4(r19)
  80a498:	18800117 	ldw	r2,4(r3)
  80a49c:	10800054 	ori	r2,r2,1
  80a4a0:	18800115 	stw	r2,4(r3)
  80a4a4:	a009883a 	mov	r4,r20
  80a4a8:	08101600 	call	810160 <__malloc_unlock>
  80a4ac:	9005883a 	mov	r2,r18
  80a4b0:	dfc00917 	ldw	ra,36(sp)
  80a4b4:	df000817 	ldw	fp,32(sp)
  80a4b8:	ddc00717 	ldw	r23,28(sp)
  80a4bc:	dd800617 	ldw	r22,24(sp)
  80a4c0:	dd400517 	ldw	r21,20(sp)
  80a4c4:	dd000417 	ldw	r20,16(sp)
  80a4c8:	dcc00317 	ldw	r19,12(sp)
  80a4cc:	dc800217 	ldw	r18,8(sp)
  80a4d0:	dc400117 	ldw	r17,4(sp)
  80a4d4:	dc000017 	ldw	r16,0(sp)
  80a4d8:	dec00a04 	addi	sp,sp,40
  80a4dc:	f800283a 	ret
  80a4e0:	017fff04 	movi	r5,-4
  80a4e4:	414a703a 	and	r5,r8,r5
  80a4e8:	814d883a 	add	r6,r16,r5
  80a4ec:	30c01f16 	blt	r6,r3,80a56c <_realloc_r+0x22c>
  80a4f0:	20800317 	ldw	r2,12(r4)
  80a4f4:	20c00217 	ldw	r3,8(r4)
  80a4f8:	a825883a 	mov	r18,r21
  80a4fc:	3021883a 	mov	r16,r6
  80a500:	18800315 	stw	r2,12(r3)
  80a504:	10c00215 	stw	r3,8(r2)
  80a508:	003fdb06 	br	80a478 <__alt_mem_onchip_mem+0xff78a478>
  80a50c:	00800304 	movi	r2,12
  80a510:	a0800015 	stw	r2,0(r20)
  80a514:	0005883a 	mov	r2,zero
  80a518:	003fe506 	br	80a4b0 <__alt_mem_onchip_mem+0xff78a4b0>
  80a51c:	98c00117 	ldw	r3,4(r19)
  80a520:	9c4b883a 	add	r5,r19,r17
  80a524:	11000054 	ori	r4,r2,1
  80a528:	18c0004c 	andi	r3,r3,1
  80a52c:	1c62b03a 	or	r17,r3,r17
  80a530:	9c400115 	stw	r17,4(r19)
  80a534:	29000115 	stw	r4,4(r5)
  80a538:	2885883a 	add	r2,r5,r2
  80a53c:	10c00117 	ldw	r3,4(r2)
  80a540:	29400204 	addi	r5,r5,8
  80a544:	a009883a 	mov	r4,r20
  80a548:	18c00054 	ori	r3,r3,1
  80a54c:	10c00115 	stw	r3,4(r2)
  80a550:	08084980 	call	808498 <_free_r>
  80a554:	003fd306 	br	80a4a4 <__alt_mem_onchip_mem+0xff78a4a4>
  80a558:	017fff04 	movi	r5,-4
  80a55c:	414a703a 	and	r5,r8,r5
  80a560:	89800404 	addi	r6,r17,16
  80a564:	8151883a 	add	r8,r16,r5
  80a568:	4180590e 	bge	r8,r6,80a6d0 <_realloc_r+0x390>
  80a56c:	1080004c 	andi	r2,r2,1
  80a570:	103f9e1e 	bne	r2,zero,80a3ec <__alt_mem_onchip_mem+0xff78a3ec>
  80a574:	adbffe17 	ldw	r22,-8(r21)
  80a578:	00bfff04 	movi	r2,-4
  80a57c:	9dadc83a 	sub	r22,r19,r22
  80a580:	b1800117 	ldw	r6,4(r22)
  80a584:	3084703a 	and	r2,r6,r2
  80a588:	20002026 	beq	r4,zero,80a60c <_realloc_r+0x2cc>
  80a58c:	80af883a 	add	r23,r16,r2
  80a590:	b96f883a 	add	r23,r23,r5
  80a594:	21c05f26 	beq	r4,r7,80a714 <_realloc_r+0x3d4>
  80a598:	b8c01c16 	blt	r23,r3,80a60c <_realloc_r+0x2cc>
  80a59c:	20800317 	ldw	r2,12(r4)
  80a5a0:	20c00217 	ldw	r3,8(r4)
  80a5a4:	81bfff04 	addi	r6,r16,-4
  80a5a8:	01000904 	movi	r4,36
  80a5ac:	18800315 	stw	r2,12(r3)
  80a5b0:	10c00215 	stw	r3,8(r2)
  80a5b4:	b0c00217 	ldw	r3,8(r22)
  80a5b8:	b0800317 	ldw	r2,12(r22)
  80a5bc:	b4800204 	addi	r18,r22,8
  80a5c0:	18800315 	stw	r2,12(r3)
  80a5c4:	10c00215 	stw	r3,8(r2)
  80a5c8:	21801b36 	bltu	r4,r6,80a638 <_realloc_r+0x2f8>
  80a5cc:	008004c4 	movi	r2,19
  80a5d0:	1180352e 	bgeu	r2,r6,80a6a8 <_realloc_r+0x368>
  80a5d4:	a8800017 	ldw	r2,0(r21)
  80a5d8:	b0800215 	stw	r2,8(r22)
  80a5dc:	a8800117 	ldw	r2,4(r21)
  80a5e0:	b0800315 	stw	r2,12(r22)
  80a5e4:	008006c4 	movi	r2,27
  80a5e8:	11807f36 	bltu	r2,r6,80a7e8 <_realloc_r+0x4a8>
  80a5ec:	b0800404 	addi	r2,r22,16
  80a5f0:	ad400204 	addi	r21,r21,8
  80a5f4:	00002d06 	br	80a6ac <_realloc_r+0x36c>
  80a5f8:	adbffe17 	ldw	r22,-8(r21)
  80a5fc:	00bfff04 	movi	r2,-4
  80a600:	9dadc83a 	sub	r22,r19,r22
  80a604:	b1000117 	ldw	r4,4(r22)
  80a608:	2084703a 	and	r2,r4,r2
  80a60c:	b03f7726 	beq	r22,zero,80a3ec <__alt_mem_onchip_mem+0xff78a3ec>
  80a610:	80af883a 	add	r23,r16,r2
  80a614:	b8ff7516 	blt	r23,r3,80a3ec <__alt_mem_onchip_mem+0xff78a3ec>
  80a618:	b0800317 	ldw	r2,12(r22)
  80a61c:	b0c00217 	ldw	r3,8(r22)
  80a620:	81bfff04 	addi	r6,r16,-4
  80a624:	01000904 	movi	r4,36
  80a628:	18800315 	stw	r2,12(r3)
  80a62c:	10c00215 	stw	r3,8(r2)
  80a630:	b4800204 	addi	r18,r22,8
  80a634:	21bfe52e 	bgeu	r4,r6,80a5cc <__alt_mem_onchip_mem+0xff78a5cc>
  80a638:	a80b883a 	mov	r5,r21
  80a63c:	9009883a 	mov	r4,r18
  80a640:	08090200 	call	809020 <memmove>
  80a644:	b821883a 	mov	r16,r23
  80a648:	b027883a 	mov	r19,r22
  80a64c:	003f8a06 	br	80a478 <__alt_mem_onchip_mem+0xff78a478>
  80a650:	300b883a 	mov	r5,r6
  80a654:	dfc00917 	ldw	ra,36(sp)
  80a658:	df000817 	ldw	fp,32(sp)
  80a65c:	ddc00717 	ldw	r23,28(sp)
  80a660:	dd800617 	ldw	r22,24(sp)
  80a664:	dd400517 	ldw	r21,20(sp)
  80a668:	dd000417 	ldw	r20,16(sp)
  80a66c:	dcc00317 	ldw	r19,12(sp)
  80a670:	dc800217 	ldw	r18,8(sp)
  80a674:	dc400117 	ldw	r17,4(sp)
  80a678:	dc000017 	ldw	r16,0(sp)
  80a67c:	dec00a04 	addi	sp,sp,40
  80a680:	0802f181 	jmpi	802f18 <_malloc_r>
  80a684:	a8c00017 	ldw	r3,0(r21)
  80a688:	90c00015 	stw	r3,0(r18)
  80a68c:	a8c00117 	ldw	r3,4(r21)
  80a690:	90c00115 	stw	r3,4(r18)
  80a694:	00c006c4 	movi	r3,27
  80a698:	19804536 	bltu	r3,r6,80a7b0 <_realloc_r+0x470>
  80a69c:	90800204 	addi	r2,r18,8
  80a6a0:	a8c00204 	addi	r3,r21,8
  80a6a4:	003f6306 	br	80a434 <__alt_mem_onchip_mem+0xff78a434>
  80a6a8:	9005883a 	mov	r2,r18
  80a6ac:	a8c00017 	ldw	r3,0(r21)
  80a6b0:	b821883a 	mov	r16,r23
  80a6b4:	b027883a 	mov	r19,r22
  80a6b8:	10c00015 	stw	r3,0(r2)
  80a6bc:	a8c00117 	ldw	r3,4(r21)
  80a6c0:	10c00115 	stw	r3,4(r2)
  80a6c4:	a8c00217 	ldw	r3,8(r21)
  80a6c8:	10c00215 	stw	r3,8(r2)
  80a6cc:	003f6a06 	br	80a478 <__alt_mem_onchip_mem+0xff78a478>
  80a6d0:	9c67883a 	add	r19,r19,r17
  80a6d4:	4445c83a 	sub	r2,r8,r17
  80a6d8:	e4c00215 	stw	r19,8(fp)
  80a6dc:	10800054 	ori	r2,r2,1
  80a6e0:	98800115 	stw	r2,4(r19)
  80a6e4:	a8bfff17 	ldw	r2,-4(r21)
  80a6e8:	a009883a 	mov	r4,r20
  80a6ec:	1080004c 	andi	r2,r2,1
  80a6f0:	1462b03a 	or	r17,r2,r17
  80a6f4:	ac7fff15 	stw	r17,-4(r21)
  80a6f8:	08101600 	call	810160 <__malloc_unlock>
  80a6fc:	a805883a 	mov	r2,r21
  80a700:	003f6b06 	br	80a4b0 <__alt_mem_onchip_mem+0xff78a4b0>
  80a704:	a80b883a 	mov	r5,r21
  80a708:	9009883a 	mov	r4,r18
  80a70c:	08090200 	call	809020 <memmove>
  80a710:	003f4e06 	br	80a44c <__alt_mem_onchip_mem+0xff78a44c>
  80a714:	89000404 	addi	r4,r17,16
  80a718:	b93fbc16 	blt	r23,r4,80a60c <__alt_mem_onchip_mem+0xff78a60c>
  80a71c:	b0800317 	ldw	r2,12(r22)
  80a720:	b0c00217 	ldw	r3,8(r22)
  80a724:	81bfff04 	addi	r6,r16,-4
  80a728:	01000904 	movi	r4,36
  80a72c:	18800315 	stw	r2,12(r3)
  80a730:	10c00215 	stw	r3,8(r2)
  80a734:	b4800204 	addi	r18,r22,8
  80a738:	21804336 	bltu	r4,r6,80a848 <_realloc_r+0x508>
  80a73c:	008004c4 	movi	r2,19
  80a740:	11803f2e 	bgeu	r2,r6,80a840 <_realloc_r+0x500>
  80a744:	a8800017 	ldw	r2,0(r21)
  80a748:	b0800215 	stw	r2,8(r22)
  80a74c:	a8800117 	ldw	r2,4(r21)
  80a750:	b0800315 	stw	r2,12(r22)
  80a754:	008006c4 	movi	r2,27
  80a758:	11803f36 	bltu	r2,r6,80a858 <_realloc_r+0x518>
  80a75c:	b0800404 	addi	r2,r22,16
  80a760:	ad400204 	addi	r21,r21,8
  80a764:	a8c00017 	ldw	r3,0(r21)
  80a768:	10c00015 	stw	r3,0(r2)
  80a76c:	a8c00117 	ldw	r3,4(r21)
  80a770:	10c00115 	stw	r3,4(r2)
  80a774:	a8c00217 	ldw	r3,8(r21)
  80a778:	10c00215 	stw	r3,8(r2)
  80a77c:	b447883a 	add	r3,r22,r17
  80a780:	bc45c83a 	sub	r2,r23,r17
  80a784:	e0c00215 	stw	r3,8(fp)
  80a788:	10800054 	ori	r2,r2,1
  80a78c:	18800115 	stw	r2,4(r3)
  80a790:	b0800117 	ldw	r2,4(r22)
  80a794:	a009883a 	mov	r4,r20
  80a798:	1080004c 	andi	r2,r2,1
  80a79c:	1462b03a 	or	r17,r2,r17
  80a7a0:	b4400115 	stw	r17,4(r22)
  80a7a4:	08101600 	call	810160 <__malloc_unlock>
  80a7a8:	9005883a 	mov	r2,r18
  80a7ac:	003f4006 	br	80a4b0 <__alt_mem_onchip_mem+0xff78a4b0>
  80a7b0:	a8c00217 	ldw	r3,8(r21)
  80a7b4:	90c00215 	stw	r3,8(r18)
  80a7b8:	a8c00317 	ldw	r3,12(r21)
  80a7bc:	90c00315 	stw	r3,12(r18)
  80a7c0:	30801126 	beq	r6,r2,80a808 <_realloc_r+0x4c8>
  80a7c4:	90800404 	addi	r2,r18,16
  80a7c8:	a8c00404 	addi	r3,r21,16
  80a7cc:	003f1906 	br	80a434 <__alt_mem_onchip_mem+0xff78a434>
  80a7d0:	90ffff17 	ldw	r3,-4(r18)
  80a7d4:	00bfff04 	movi	r2,-4
  80a7d8:	a825883a 	mov	r18,r21
  80a7dc:	1884703a 	and	r2,r3,r2
  80a7e0:	80a1883a 	add	r16,r16,r2
  80a7e4:	003f2406 	br	80a478 <__alt_mem_onchip_mem+0xff78a478>
  80a7e8:	a8800217 	ldw	r2,8(r21)
  80a7ec:	b0800415 	stw	r2,16(r22)
  80a7f0:	a8800317 	ldw	r2,12(r21)
  80a7f4:	b0800515 	stw	r2,20(r22)
  80a7f8:	31000a26 	beq	r6,r4,80a824 <_realloc_r+0x4e4>
  80a7fc:	b0800604 	addi	r2,r22,24
  80a800:	ad400404 	addi	r21,r21,16
  80a804:	003fa906 	br	80a6ac <__alt_mem_onchip_mem+0xff78a6ac>
  80a808:	a9000417 	ldw	r4,16(r21)
  80a80c:	90800604 	addi	r2,r18,24
  80a810:	a8c00604 	addi	r3,r21,24
  80a814:	91000415 	stw	r4,16(r18)
  80a818:	a9000517 	ldw	r4,20(r21)
  80a81c:	91000515 	stw	r4,20(r18)
  80a820:	003f0406 	br	80a434 <__alt_mem_onchip_mem+0xff78a434>
  80a824:	a8c00417 	ldw	r3,16(r21)
  80a828:	ad400604 	addi	r21,r21,24
  80a82c:	b0800804 	addi	r2,r22,32
  80a830:	b0c00615 	stw	r3,24(r22)
  80a834:	a8ffff17 	ldw	r3,-4(r21)
  80a838:	b0c00715 	stw	r3,28(r22)
  80a83c:	003f9b06 	br	80a6ac <__alt_mem_onchip_mem+0xff78a6ac>
  80a840:	9005883a 	mov	r2,r18
  80a844:	003fc706 	br	80a764 <__alt_mem_onchip_mem+0xff78a764>
  80a848:	a80b883a 	mov	r5,r21
  80a84c:	9009883a 	mov	r4,r18
  80a850:	08090200 	call	809020 <memmove>
  80a854:	003fc906 	br	80a77c <__alt_mem_onchip_mem+0xff78a77c>
  80a858:	a8800217 	ldw	r2,8(r21)
  80a85c:	b0800415 	stw	r2,16(r22)
  80a860:	a8800317 	ldw	r2,12(r21)
  80a864:	b0800515 	stw	r2,20(r22)
  80a868:	31000726 	beq	r6,r4,80a888 <_realloc_r+0x548>
  80a86c:	b0800604 	addi	r2,r22,24
  80a870:	ad400404 	addi	r21,r21,16
  80a874:	003fbb06 	br	80a764 <__alt_mem_onchip_mem+0xff78a764>
  80a878:	a009883a 	mov	r4,r20
  80a87c:	08101600 	call	810160 <__malloc_unlock>
  80a880:	0005883a 	mov	r2,zero
  80a884:	003f0a06 	br	80a4b0 <__alt_mem_onchip_mem+0xff78a4b0>
  80a888:	a8c00417 	ldw	r3,16(r21)
  80a88c:	ad400604 	addi	r21,r21,24
  80a890:	b0800804 	addi	r2,r22,32
  80a894:	b0c00615 	stw	r3,24(r22)
  80a898:	a8ffff17 	ldw	r3,-4(r21)
  80a89c:	b0c00715 	stw	r3,28(r22)
  80a8a0:	003fb006 	br	80a764 <__alt_mem_onchip_mem+0xff78a764>

0080a8a4 <__fpclassifyd>:
  80a8a4:	00a00034 	movhi	r2,32768
  80a8a8:	10bfffc4 	addi	r2,r2,-1
  80a8ac:	2884703a 	and	r2,r5,r2
  80a8b0:	10000726 	beq	r2,zero,80a8d0 <__fpclassifyd+0x2c>
  80a8b4:	00fffc34 	movhi	r3,65520
  80a8b8:	019ff834 	movhi	r6,32736
  80a8bc:	28c7883a 	add	r3,r5,r3
  80a8c0:	31bfffc4 	addi	r6,r6,-1
  80a8c4:	30c00536 	bltu	r6,r3,80a8dc <__fpclassifyd+0x38>
  80a8c8:	00800104 	movi	r2,4
  80a8cc:	f800283a 	ret
  80a8d0:	2000021e 	bne	r4,zero,80a8dc <__fpclassifyd+0x38>
  80a8d4:	00800084 	movi	r2,2
  80a8d8:	f800283a 	ret
  80a8dc:	00dffc34 	movhi	r3,32752
  80a8e0:	019ff834 	movhi	r6,32736
  80a8e4:	28cb883a 	add	r5,r5,r3
  80a8e8:	31bfffc4 	addi	r6,r6,-1
  80a8ec:	317ff62e 	bgeu	r6,r5,80a8c8 <__alt_mem_onchip_mem+0xff78a8c8>
  80a8f0:	01400434 	movhi	r5,16
  80a8f4:	297fffc4 	addi	r5,r5,-1
  80a8f8:	28800236 	bltu	r5,r2,80a904 <__fpclassifyd+0x60>
  80a8fc:	008000c4 	movi	r2,3
  80a900:	f800283a 	ret
  80a904:	10c00226 	beq	r2,r3,80a910 <__fpclassifyd+0x6c>
  80a908:	0005883a 	mov	r2,zero
  80a90c:	f800283a 	ret
  80a910:	2005003a 	cmpeq	r2,r4,zero
  80a914:	f800283a 	ret

0080a918 <strcmp>:
  80a918:	2144b03a 	or	r2,r4,r5
  80a91c:	108000cc 	andi	r2,r2,3
  80a920:	1000171e 	bne	r2,zero,80a980 <strcmp+0x68>
  80a924:	20800017 	ldw	r2,0(r4)
  80a928:	28c00017 	ldw	r3,0(r5)
  80a92c:	10c0141e 	bne	r2,r3,80a980 <strcmp+0x68>
  80a930:	027fbff4 	movhi	r9,65279
  80a934:	4a7fbfc4 	addi	r9,r9,-257
  80a938:	0086303a 	nor	r3,zero,r2
  80a93c:	02202074 	movhi	r8,32897
  80a940:	1245883a 	add	r2,r2,r9
  80a944:	42202004 	addi	r8,r8,-32640
  80a948:	10c4703a 	and	r2,r2,r3
  80a94c:	1204703a 	and	r2,r2,r8
  80a950:	10000226 	beq	r2,zero,80a95c <strcmp+0x44>
  80a954:	00002306 	br	80a9e4 <strcmp+0xcc>
  80a958:	1000221e 	bne	r2,zero,80a9e4 <strcmp+0xcc>
  80a95c:	21000104 	addi	r4,r4,4
  80a960:	20c00017 	ldw	r3,0(r4)
  80a964:	29400104 	addi	r5,r5,4
  80a968:	29800017 	ldw	r6,0(r5)
  80a96c:	1a4f883a 	add	r7,r3,r9
  80a970:	00c4303a 	nor	r2,zero,r3
  80a974:	3884703a 	and	r2,r7,r2
  80a978:	1204703a 	and	r2,r2,r8
  80a97c:	19bff626 	beq	r3,r6,80a958 <__alt_mem_onchip_mem+0xff78a958>
  80a980:	20800003 	ldbu	r2,0(r4)
  80a984:	10c03fcc 	andi	r3,r2,255
  80a988:	18c0201c 	xori	r3,r3,128
  80a98c:	18ffe004 	addi	r3,r3,-128
  80a990:	18000c26 	beq	r3,zero,80a9c4 <strcmp+0xac>
  80a994:	29800007 	ldb	r6,0(r5)
  80a998:	19800326 	beq	r3,r6,80a9a8 <strcmp+0x90>
  80a99c:	00001306 	br	80a9ec <strcmp+0xd4>
  80a9a0:	29800007 	ldb	r6,0(r5)
  80a9a4:	11800b1e 	bne	r2,r6,80a9d4 <strcmp+0xbc>
  80a9a8:	21000044 	addi	r4,r4,1
  80a9ac:	20c00003 	ldbu	r3,0(r4)
  80a9b0:	29400044 	addi	r5,r5,1
  80a9b4:	18803fcc 	andi	r2,r3,255
  80a9b8:	1080201c 	xori	r2,r2,128
  80a9bc:	10bfe004 	addi	r2,r2,-128
  80a9c0:	103ff71e 	bne	r2,zero,80a9a0 <__alt_mem_onchip_mem+0xff78a9a0>
  80a9c4:	0007883a 	mov	r3,zero
  80a9c8:	28800003 	ldbu	r2,0(r5)
  80a9cc:	1885c83a 	sub	r2,r3,r2
  80a9d0:	f800283a 	ret
  80a9d4:	28800003 	ldbu	r2,0(r5)
  80a9d8:	18c03fcc 	andi	r3,r3,255
  80a9dc:	1885c83a 	sub	r2,r3,r2
  80a9e0:	f800283a 	ret
  80a9e4:	0005883a 	mov	r2,zero
  80a9e8:	f800283a 	ret
  80a9ec:	10c03fcc 	andi	r3,r2,255
  80a9f0:	003ff506 	br	80a9c8 <__alt_mem_onchip_mem+0xff78a9c8>

0080a9f4 <__sprint_r.part.0>:
  80a9f4:	28801917 	ldw	r2,100(r5)
  80a9f8:	defff604 	addi	sp,sp,-40
  80a9fc:	dd400515 	stw	r21,20(sp)
  80aa00:	dfc00915 	stw	ra,36(sp)
  80aa04:	df000815 	stw	fp,32(sp)
  80aa08:	ddc00715 	stw	r23,28(sp)
  80aa0c:	dd800615 	stw	r22,24(sp)
  80aa10:	dd000415 	stw	r20,16(sp)
  80aa14:	dcc00315 	stw	r19,12(sp)
  80aa18:	dc800215 	stw	r18,8(sp)
  80aa1c:	dc400115 	stw	r17,4(sp)
  80aa20:	dc000015 	stw	r16,0(sp)
  80aa24:	1088000c 	andi	r2,r2,8192
  80aa28:	302b883a 	mov	r21,r6
  80aa2c:	10002e26 	beq	r2,zero,80aae8 <__sprint_r.part.0+0xf4>
  80aa30:	30800217 	ldw	r2,8(r6)
  80aa34:	35800017 	ldw	r22,0(r6)
  80aa38:	10002926 	beq	r2,zero,80aae0 <__sprint_r.part.0+0xec>
  80aa3c:	2827883a 	mov	r19,r5
  80aa40:	2029883a 	mov	r20,r4
  80aa44:	b5c00104 	addi	r23,r22,4
  80aa48:	04bfffc4 	movi	r18,-1
  80aa4c:	bc400017 	ldw	r17,0(r23)
  80aa50:	b4000017 	ldw	r16,0(r22)
  80aa54:	0039883a 	mov	fp,zero
  80aa58:	8822d0ba 	srli	r17,r17,2
  80aa5c:	8800031e 	bne	r17,zero,80aa6c <__sprint_r.part.0+0x78>
  80aa60:	00001806 	br	80aac4 <__sprint_r.part.0+0xd0>
  80aa64:	84000104 	addi	r16,r16,4
  80aa68:	8f001526 	beq	r17,fp,80aac0 <__sprint_r.part.0+0xcc>
  80aa6c:	81400017 	ldw	r5,0(r16)
  80aa70:	980d883a 	mov	r6,r19
  80aa74:	a009883a 	mov	r4,r20
  80aa78:	080c3bc0 	call	80c3bc <_fputwc_r>
  80aa7c:	e7000044 	addi	fp,fp,1
  80aa80:	14bff81e 	bne	r2,r18,80aa64 <__alt_mem_onchip_mem+0xff78aa64>
  80aa84:	9005883a 	mov	r2,r18
  80aa88:	a8000215 	stw	zero,8(r21)
  80aa8c:	a8000115 	stw	zero,4(r21)
  80aa90:	dfc00917 	ldw	ra,36(sp)
  80aa94:	df000817 	ldw	fp,32(sp)
  80aa98:	ddc00717 	ldw	r23,28(sp)
  80aa9c:	dd800617 	ldw	r22,24(sp)
  80aaa0:	dd400517 	ldw	r21,20(sp)
  80aaa4:	dd000417 	ldw	r20,16(sp)
  80aaa8:	dcc00317 	ldw	r19,12(sp)
  80aaac:	dc800217 	ldw	r18,8(sp)
  80aab0:	dc400117 	ldw	r17,4(sp)
  80aab4:	dc000017 	ldw	r16,0(sp)
  80aab8:	dec00a04 	addi	sp,sp,40
  80aabc:	f800283a 	ret
  80aac0:	a8800217 	ldw	r2,8(r21)
  80aac4:	8c63883a 	add	r17,r17,r17
  80aac8:	8c63883a 	add	r17,r17,r17
  80aacc:	1445c83a 	sub	r2,r2,r17
  80aad0:	a8800215 	stw	r2,8(r21)
  80aad4:	b5800204 	addi	r22,r22,8
  80aad8:	bdc00204 	addi	r23,r23,8
  80aadc:	103fdb1e 	bne	r2,zero,80aa4c <__alt_mem_onchip_mem+0xff78aa4c>
  80aae0:	0005883a 	mov	r2,zero
  80aae4:	003fe806 	br	80aa88 <__alt_mem_onchip_mem+0xff78aa88>
  80aae8:	08087a80 	call	8087a8 <__sfvwrite_r>
  80aaec:	003fe606 	br	80aa88 <__alt_mem_onchip_mem+0xff78aa88>

0080aaf0 <__sprint_r>:
  80aaf0:	30c00217 	ldw	r3,8(r6)
  80aaf4:	18000126 	beq	r3,zero,80aafc <__sprint_r+0xc>
  80aaf8:	080a9f41 	jmpi	80a9f4 <__sprint_r.part.0>
  80aafc:	30000115 	stw	zero,4(r6)
  80ab00:	0005883a 	mov	r2,zero
  80ab04:	f800283a 	ret

0080ab08 <___vfiprintf_internal_r>:
  80ab08:	deffc904 	addi	sp,sp,-220
  80ab0c:	df003515 	stw	fp,212(sp)
  80ab10:	dd003115 	stw	r20,196(sp)
  80ab14:	dfc03615 	stw	ra,216(sp)
  80ab18:	ddc03415 	stw	r23,208(sp)
  80ab1c:	dd803315 	stw	r22,204(sp)
  80ab20:	dd403215 	stw	r21,200(sp)
  80ab24:	dcc03015 	stw	r19,192(sp)
  80ab28:	dc802f15 	stw	r18,188(sp)
  80ab2c:	dc402e15 	stw	r17,184(sp)
  80ab30:	dc002d15 	stw	r16,180(sp)
  80ab34:	d9002015 	stw	r4,128(sp)
  80ab38:	d9c02215 	stw	r7,136(sp)
  80ab3c:	2829883a 	mov	r20,r5
  80ab40:	3039883a 	mov	fp,r6
  80ab44:	20000226 	beq	r4,zero,80ab50 <___vfiprintf_internal_r+0x48>
  80ab48:	20800e17 	ldw	r2,56(r4)
  80ab4c:	1000cf26 	beq	r2,zero,80ae8c <___vfiprintf_internal_r+0x384>
  80ab50:	a080030b 	ldhu	r2,12(r20)
  80ab54:	10c8000c 	andi	r3,r2,8192
  80ab58:	1800061e 	bne	r3,zero,80ab74 <___vfiprintf_internal_r+0x6c>
  80ab5c:	a1001917 	ldw	r4,100(r20)
  80ab60:	00f7ffc4 	movi	r3,-8193
  80ab64:	10880014 	ori	r2,r2,8192
  80ab68:	20c6703a 	and	r3,r4,r3
  80ab6c:	a080030d 	sth	r2,12(r20)
  80ab70:	a0c01915 	stw	r3,100(r20)
  80ab74:	10c0020c 	andi	r3,r2,8
  80ab78:	1800a926 	beq	r3,zero,80ae20 <___vfiprintf_internal_r+0x318>
  80ab7c:	a0c00417 	ldw	r3,16(r20)
  80ab80:	1800a726 	beq	r3,zero,80ae20 <___vfiprintf_internal_r+0x318>
  80ab84:	1080068c 	andi	r2,r2,26
  80ab88:	00c00284 	movi	r3,10
  80ab8c:	10c0ac26 	beq	r2,r3,80ae40 <___vfiprintf_internal_r+0x338>
  80ab90:	da801a04 	addi	r10,sp,104
  80ab94:	da801e15 	stw	r10,120(sp)
  80ab98:	d8801e17 	ldw	r2,120(sp)
  80ab9c:	da8019c4 	addi	r10,sp,103
  80aba0:	05802074 	movhi	r22,129
  80aba4:	05c02074 	movhi	r23,129
  80aba8:	da801f15 	stw	r10,124(sp)
  80abac:	1295c83a 	sub	r10,r2,r10
  80abb0:	b5905e04 	addi	r22,r22,16760
  80abb4:	bdd05a04 	addi	r23,r23,16744
  80abb8:	dec01a15 	stw	sp,104(sp)
  80abbc:	d8001c15 	stw	zero,112(sp)
  80abc0:	d8001b15 	stw	zero,108(sp)
  80abc4:	d8002615 	stw	zero,152(sp)
  80abc8:	d8002315 	stw	zero,140(sp)
  80abcc:	da802715 	stw	r10,156(sp)
  80abd0:	d811883a 	mov	r8,sp
  80abd4:	dd002115 	stw	r20,132(sp)
  80abd8:	e021883a 	mov	r16,fp
  80abdc:	80800007 	ldb	r2,0(r16)
  80abe0:	1003ea26 	beq	r2,zero,80bb8c <___vfiprintf_internal_r+0x1084>
  80abe4:	00c00944 	movi	r3,37
  80abe8:	8025883a 	mov	r18,r16
  80abec:	10c0021e 	bne	r2,r3,80abf8 <___vfiprintf_internal_r+0xf0>
  80abf0:	00001606 	br	80ac4c <___vfiprintf_internal_r+0x144>
  80abf4:	10c00326 	beq	r2,r3,80ac04 <___vfiprintf_internal_r+0xfc>
  80abf8:	94800044 	addi	r18,r18,1
  80abfc:	90800007 	ldb	r2,0(r18)
  80ac00:	103ffc1e 	bne	r2,zero,80abf4 <__alt_mem_onchip_mem+0xff78abf4>
  80ac04:	9423c83a 	sub	r17,r18,r16
  80ac08:	88001026 	beq	r17,zero,80ac4c <___vfiprintf_internal_r+0x144>
  80ac0c:	d8c01c17 	ldw	r3,112(sp)
  80ac10:	d8801b17 	ldw	r2,108(sp)
  80ac14:	44000015 	stw	r16,0(r8)
  80ac18:	88c7883a 	add	r3,r17,r3
  80ac1c:	10800044 	addi	r2,r2,1
  80ac20:	44400115 	stw	r17,4(r8)
  80ac24:	d8c01c15 	stw	r3,112(sp)
  80ac28:	d8801b15 	stw	r2,108(sp)
  80ac2c:	010001c4 	movi	r4,7
  80ac30:	2080760e 	bge	r4,r2,80ae0c <___vfiprintf_internal_r+0x304>
  80ac34:	1803821e 	bne	r3,zero,80ba40 <___vfiprintf_internal_r+0xf38>
  80ac38:	da802317 	ldw	r10,140(sp)
  80ac3c:	d8001b15 	stw	zero,108(sp)
  80ac40:	d811883a 	mov	r8,sp
  80ac44:	5455883a 	add	r10,r10,r17
  80ac48:	da802315 	stw	r10,140(sp)
  80ac4c:	90800007 	ldb	r2,0(r18)
  80ac50:	10044626 	beq	r2,zero,80bd6c <___vfiprintf_internal_r+0x1264>
  80ac54:	90c00047 	ldb	r3,1(r18)
  80ac58:	94000044 	addi	r16,r18,1
  80ac5c:	d8001d85 	stb	zero,118(sp)
  80ac60:	0009883a 	mov	r4,zero
  80ac64:	000f883a 	mov	r7,zero
  80ac68:	027fffc4 	movi	r9,-1
  80ac6c:	0023883a 	mov	r17,zero
  80ac70:	0029883a 	mov	r20,zero
  80ac74:	01401604 	movi	r5,88
  80ac78:	01800244 	movi	r6,9
  80ac7c:	03400a84 	movi	r13,42
  80ac80:	03001b04 	movi	r12,108
  80ac84:	84000044 	addi	r16,r16,1
  80ac88:	18bff804 	addi	r2,r3,-32
  80ac8c:	28827336 	bltu	r5,r2,80b65c <___vfiprintf_internal_r+0xb54>
  80ac90:	100490ba 	slli	r2,r2,2
  80ac94:	02802074 	movhi	r10,129
  80ac98:	52ab2a04 	addi	r10,r10,-21336
  80ac9c:	1285883a 	add	r2,r2,r10
  80aca0:	10800017 	ldw	r2,0(r2)
  80aca4:	1000683a 	jmp	r2
  80aca8:	0080b390 	cmplti	r2,zero,718
  80acac:	0080b65c 	xori	r2,zero,729
  80acb0:	0080b65c 	xori	r2,zero,729
  80acb4:	0080b3b0 	cmpltui	r2,zero,718
  80acb8:	0080b65c 	xori	r2,zero,729
  80acbc:	0080b65c 	xori	r2,zero,729
  80acc0:	0080b65c 	xori	r2,zero,729
  80acc4:	0080b65c 	xori	r2,zero,729
  80acc8:	0080b65c 	xori	r2,zero,729
  80accc:	0080b65c 	xori	r2,zero,729
  80acd0:	0080b598 	cmpnei	r2,zero,726
  80acd4:	0080b5b4 	movhi	r2,726
  80acd8:	0080b65c 	xori	r2,zero,729
  80acdc:	0080ae9c 	xori	r2,zero,698
  80ace0:	0080b5c4 	movi	r2,727
  80ace4:	0080b65c 	xori	r2,zero,729
  80ace8:	0080b3bc 	xorhi	r2,zero,718
  80acec:	0080b3c8 	cmpgei	r2,zero,719
  80acf0:	0080b3c8 	cmpgei	r2,zero,719
  80acf4:	0080b3c8 	cmpgei	r2,zero,719
  80acf8:	0080b3c8 	cmpgei	r2,zero,719
  80acfc:	0080b3c8 	cmpgei	r2,zero,719
  80ad00:	0080b3c8 	cmpgei	r2,zero,719
  80ad04:	0080b3c8 	cmpgei	r2,zero,719
  80ad08:	0080b3c8 	cmpgei	r2,zero,719
  80ad0c:	0080b3c8 	cmpgei	r2,zero,719
  80ad10:	0080b65c 	xori	r2,zero,729
  80ad14:	0080b65c 	xori	r2,zero,729
  80ad18:	0080b65c 	xori	r2,zero,729
  80ad1c:	0080b65c 	xori	r2,zero,729
  80ad20:	0080b65c 	xori	r2,zero,729
  80ad24:	0080b65c 	xori	r2,zero,729
  80ad28:	0080b65c 	xori	r2,zero,729
  80ad2c:	0080b65c 	xori	r2,zero,729
  80ad30:	0080b65c 	xori	r2,zero,729
  80ad34:	0080b65c 	xori	r2,zero,729
  80ad38:	0080b3f4 	movhi	r2,719
  80ad3c:	0080b65c 	xori	r2,zero,729
  80ad40:	0080b65c 	xori	r2,zero,729
  80ad44:	0080b65c 	xori	r2,zero,729
  80ad48:	0080b65c 	xori	r2,zero,729
  80ad4c:	0080b65c 	xori	r2,zero,729
  80ad50:	0080b65c 	xori	r2,zero,729
  80ad54:	0080b65c 	xori	r2,zero,729
  80ad58:	0080b65c 	xori	r2,zero,729
  80ad5c:	0080b65c 	xori	r2,zero,729
  80ad60:	0080b65c 	xori	r2,zero,729
  80ad64:	0080b42c 	andhi	r2,zero,720
  80ad68:	0080b65c 	xori	r2,zero,729
  80ad6c:	0080b65c 	xori	r2,zero,729
  80ad70:	0080b65c 	xori	r2,zero,729
  80ad74:	0080b65c 	xori	r2,zero,729
  80ad78:	0080b65c 	xori	r2,zero,729
  80ad7c:	0080b484 	movi	r2,722
  80ad80:	0080b65c 	xori	r2,zero,729
  80ad84:	0080b65c 	xori	r2,zero,729
  80ad88:	0080b4f4 	movhi	r2,723
  80ad8c:	0080b65c 	xori	r2,zero,729
  80ad90:	0080b65c 	xori	r2,zero,729
  80ad94:	0080b65c 	xori	r2,zero,729
  80ad98:	0080b65c 	xori	r2,zero,729
  80ad9c:	0080b65c 	xori	r2,zero,729
  80ada0:	0080b65c 	xori	r2,zero,729
  80ada4:	0080b65c 	xori	r2,zero,729
  80ada8:	0080b65c 	xori	r2,zero,729
  80adac:	0080b65c 	xori	r2,zero,729
  80adb0:	0080b65c 	xori	r2,zero,729
  80adb4:	0080b2a0 	cmpeqi	r2,zero,714
  80adb8:	0080b2cc 	andi	r2,zero,715
  80adbc:	0080b65c 	xori	r2,zero,729
  80adc0:	0080b65c 	xori	r2,zero,729
  80adc4:	0080b65c 	xori	r2,zero,729
  80adc8:	0080b604 	movi	r2,728
  80adcc:	0080b2cc 	andi	r2,zero,715
  80add0:	0080b65c 	xori	r2,zero,729
  80add4:	0080b65c 	xori	r2,zero,729
  80add8:	0080b160 	cmpeqi	r2,zero,709
  80addc:	0080b65c 	xori	r2,zero,729
  80ade0:	0080b170 	cmpltui	r2,zero,709
  80ade4:	0080b1ac 	andhi	r2,zero,710
  80ade8:	0080aea8 	cmpgeui	r2,zero,698
  80adec:	0080b154 	movui	r2,709
  80adf0:	0080b65c 	xori	r2,zero,729
  80adf4:	0080b530 	cmpltui	r2,zero,724
  80adf8:	0080b65c 	xori	r2,zero,729
  80adfc:	0080b588 	cmpgei	r2,zero,726
  80ae00:	0080b65c 	xori	r2,zero,729
  80ae04:	0080b65c 	xori	r2,zero,729
  80ae08:	0080b24c 	andi	r2,zero,713
  80ae0c:	42000204 	addi	r8,r8,8
  80ae10:	da802317 	ldw	r10,140(sp)
  80ae14:	5455883a 	add	r10,r10,r17
  80ae18:	da802315 	stw	r10,140(sp)
  80ae1c:	003f8b06 	br	80ac4c <__alt_mem_onchip_mem+0xff78ac4c>
  80ae20:	d9002017 	ldw	r4,128(sp)
  80ae24:	a00b883a 	mov	r5,r20
  80ae28:	08064ec0 	call	8064ec <__swsetup_r>
  80ae2c:	1003b11e 	bne	r2,zero,80bcf4 <___vfiprintf_internal_r+0x11ec>
  80ae30:	a080030b 	ldhu	r2,12(r20)
  80ae34:	00c00284 	movi	r3,10
  80ae38:	1080068c 	andi	r2,r2,26
  80ae3c:	10ff541e 	bne	r2,r3,80ab90 <__alt_mem_onchip_mem+0xff78ab90>
  80ae40:	a080038f 	ldh	r2,14(r20)
  80ae44:	103f5216 	blt	r2,zero,80ab90 <__alt_mem_onchip_mem+0xff78ab90>
  80ae48:	d9c02217 	ldw	r7,136(sp)
  80ae4c:	d9002017 	ldw	r4,128(sp)
  80ae50:	e00d883a 	mov	r6,fp
  80ae54:	a00b883a 	mov	r5,r20
  80ae58:	080bf800 	call	80bf80 <__sbprintf>
  80ae5c:	dfc03617 	ldw	ra,216(sp)
  80ae60:	df003517 	ldw	fp,212(sp)
  80ae64:	ddc03417 	ldw	r23,208(sp)
  80ae68:	dd803317 	ldw	r22,204(sp)
  80ae6c:	dd403217 	ldw	r21,200(sp)
  80ae70:	dd003117 	ldw	r20,196(sp)
  80ae74:	dcc03017 	ldw	r19,192(sp)
  80ae78:	dc802f17 	ldw	r18,188(sp)
  80ae7c:	dc402e17 	ldw	r17,184(sp)
  80ae80:	dc002d17 	ldw	r16,180(sp)
  80ae84:	dec03704 	addi	sp,sp,220
  80ae88:	f800283a 	ret
  80ae8c:	08024280 	call	802428 <__sinit>
  80ae90:	003f2f06 	br	80ab50 <__alt_mem_onchip_mem+0xff78ab50>
  80ae94:	0463c83a 	sub	r17,zero,r17
  80ae98:	d8802215 	stw	r2,136(sp)
  80ae9c:	a5000114 	ori	r20,r20,4
  80aea0:	80c00007 	ldb	r3,0(r16)
  80aea4:	003f7706 	br	80ac84 <__alt_mem_onchip_mem+0xff78ac84>
  80aea8:	00800c04 	movi	r2,48
  80aeac:	da802217 	ldw	r10,136(sp)
  80aeb0:	d8801d05 	stb	r2,116(sp)
  80aeb4:	00801e04 	movi	r2,120
  80aeb8:	d8801d45 	stb	r2,117(sp)
  80aebc:	d8001d85 	stb	zero,118(sp)
  80aec0:	50c00104 	addi	r3,r10,4
  80aec4:	54800017 	ldw	r18,0(r10)
  80aec8:	0027883a 	mov	r19,zero
  80aecc:	a0800094 	ori	r2,r20,2
  80aed0:	48030b16 	blt	r9,zero,80bb00 <___vfiprintf_internal_r+0xff8>
  80aed4:	00bfdfc4 	movi	r2,-129
  80aed8:	a096703a 	and	r11,r20,r2
  80aedc:	d8c02215 	stw	r3,136(sp)
  80aee0:	5d000094 	ori	r20,r11,2
  80aee4:	90032b1e 	bne	r18,zero,80bb94 <___vfiprintf_internal_r+0x108c>
  80aee8:	00802074 	movhi	r2,129
  80aeec:	108f5a04 	addi	r2,r2,15720
  80aef0:	d8802615 	stw	r2,152(sp)
  80aef4:	0039883a 	mov	fp,zero
  80aef8:	48017b1e 	bne	r9,zero,80b4e8 <___vfiprintf_internal_r+0x9e0>
  80aefc:	0013883a 	mov	r9,zero
  80af00:	0027883a 	mov	r19,zero
  80af04:	dd401a04 	addi	r21,sp,104
  80af08:	4825883a 	mov	r18,r9
  80af0c:	4cc0010e 	bge	r9,r19,80af14 <___vfiprintf_internal_r+0x40c>
  80af10:	9825883a 	mov	r18,r19
  80af14:	e7003fcc 	andi	fp,fp,255
  80af18:	e700201c 	xori	fp,fp,128
  80af1c:	e73fe004 	addi	fp,fp,-128
  80af20:	e0000126 	beq	fp,zero,80af28 <___vfiprintf_internal_r+0x420>
  80af24:	94800044 	addi	r18,r18,1
  80af28:	a380008c 	andi	r14,r20,2
  80af2c:	70000126 	beq	r14,zero,80af34 <___vfiprintf_internal_r+0x42c>
  80af30:	94800084 	addi	r18,r18,2
  80af34:	a700210c 	andi	fp,r20,132
  80af38:	e001df1e 	bne	fp,zero,80b6b8 <___vfiprintf_internal_r+0xbb0>
  80af3c:	8c87c83a 	sub	r3,r17,r18
  80af40:	00c1dd0e 	bge	zero,r3,80b6b8 <___vfiprintf_internal_r+0xbb0>
  80af44:	01c00404 	movi	r7,16
  80af48:	d8801c17 	ldw	r2,112(sp)
  80af4c:	38c3ad0e 	bge	r7,r3,80be04 <___vfiprintf_internal_r+0x12fc>
  80af50:	02802074 	movhi	r10,129
  80af54:	52905e04 	addi	r10,r10,16760
  80af58:	dc002915 	stw	r16,164(sp)
  80af5c:	d9801b17 	ldw	r6,108(sp)
  80af60:	da802415 	stw	r10,144(sp)
  80af64:	03c001c4 	movi	r15,7
  80af68:	da402515 	stw	r9,148(sp)
  80af6c:	db802815 	stw	r14,160(sp)
  80af70:	1821883a 	mov	r16,r3
  80af74:	00000506 	br	80af8c <___vfiprintf_internal_r+0x484>
  80af78:	31400084 	addi	r5,r6,2
  80af7c:	42000204 	addi	r8,r8,8
  80af80:	200d883a 	mov	r6,r4
  80af84:	843ffc04 	addi	r16,r16,-16
  80af88:	3c000d0e 	bge	r7,r16,80afc0 <___vfiprintf_internal_r+0x4b8>
  80af8c:	10800404 	addi	r2,r2,16
  80af90:	31000044 	addi	r4,r6,1
  80af94:	45800015 	stw	r22,0(r8)
  80af98:	41c00115 	stw	r7,4(r8)
  80af9c:	d8801c15 	stw	r2,112(sp)
  80afa0:	d9001b15 	stw	r4,108(sp)
  80afa4:	793ff40e 	bge	r15,r4,80af78 <__alt_mem_onchip_mem+0xff78af78>
  80afa8:	1001b51e 	bne	r2,zero,80b680 <___vfiprintf_internal_r+0xb78>
  80afac:	843ffc04 	addi	r16,r16,-16
  80afb0:	000d883a 	mov	r6,zero
  80afb4:	01400044 	movi	r5,1
  80afb8:	d811883a 	mov	r8,sp
  80afbc:	3c3ff316 	blt	r7,r16,80af8c <__alt_mem_onchip_mem+0xff78af8c>
  80afc0:	8007883a 	mov	r3,r16
  80afc4:	da402517 	ldw	r9,148(sp)
  80afc8:	db802817 	ldw	r14,160(sp)
  80afcc:	dc002917 	ldw	r16,164(sp)
  80afd0:	da802417 	ldw	r10,144(sp)
  80afd4:	1885883a 	add	r2,r3,r2
  80afd8:	40c00115 	stw	r3,4(r8)
  80afdc:	42800015 	stw	r10,0(r8)
  80afe0:	d8801c15 	stw	r2,112(sp)
  80afe4:	d9401b15 	stw	r5,108(sp)
  80afe8:	00c001c4 	movi	r3,7
  80afec:	19426016 	blt	r3,r5,80b970 <___vfiprintf_internal_r+0xe68>
  80aff0:	d8c01d87 	ldb	r3,118(sp)
  80aff4:	42000204 	addi	r8,r8,8
  80aff8:	29000044 	addi	r4,r5,1
  80affc:	1801b31e 	bne	r3,zero,80b6cc <___vfiprintf_internal_r+0xbc4>
  80b000:	7001c026 	beq	r14,zero,80b704 <___vfiprintf_internal_r+0xbfc>
  80b004:	d8c01d04 	addi	r3,sp,116
  80b008:	10800084 	addi	r2,r2,2
  80b00c:	40c00015 	stw	r3,0(r8)
  80b010:	00c00084 	movi	r3,2
  80b014:	40c00115 	stw	r3,4(r8)
  80b018:	d8801c15 	stw	r2,112(sp)
  80b01c:	d9001b15 	stw	r4,108(sp)
  80b020:	00c001c4 	movi	r3,7
  80b024:	1902650e 	bge	r3,r4,80b9bc <___vfiprintf_internal_r+0xeb4>
  80b028:	10029a1e 	bne	r2,zero,80ba94 <___vfiprintf_internal_r+0xf8c>
  80b02c:	00c02004 	movi	r3,128
  80b030:	01000044 	movi	r4,1
  80b034:	000b883a 	mov	r5,zero
  80b038:	d811883a 	mov	r8,sp
  80b03c:	e0c1b31e 	bne	fp,r3,80b70c <___vfiprintf_internal_r+0xc04>
  80b040:	8cb9c83a 	sub	fp,r17,r18
  80b044:	0701b10e 	bge	zero,fp,80b70c <___vfiprintf_internal_r+0xc04>
  80b048:	01c00404 	movi	r7,16
  80b04c:	3f03890e 	bge	r7,fp,80be74 <___vfiprintf_internal_r+0x136c>
  80b050:	00c02074 	movhi	r3,129
  80b054:	18d05a04 	addi	r3,r3,16744
  80b058:	d8c02415 	stw	r3,144(sp)
  80b05c:	8007883a 	mov	r3,r16
  80b060:	034001c4 	movi	r13,7
  80b064:	e021883a 	mov	r16,fp
  80b068:	da402515 	stw	r9,148(sp)
  80b06c:	1839883a 	mov	fp,r3
  80b070:	00000506 	br	80b088 <___vfiprintf_internal_r+0x580>
  80b074:	29800084 	addi	r6,r5,2
  80b078:	42000204 	addi	r8,r8,8
  80b07c:	180b883a 	mov	r5,r3
  80b080:	843ffc04 	addi	r16,r16,-16
  80b084:	3c000d0e 	bge	r7,r16,80b0bc <___vfiprintf_internal_r+0x5b4>
  80b088:	10800404 	addi	r2,r2,16
  80b08c:	28c00044 	addi	r3,r5,1
  80b090:	45c00015 	stw	r23,0(r8)
  80b094:	41c00115 	stw	r7,4(r8)
  80b098:	d8801c15 	stw	r2,112(sp)
  80b09c:	d8c01b15 	stw	r3,108(sp)
  80b0a0:	68fff40e 	bge	r13,r3,80b074 <__alt_mem_onchip_mem+0xff78b074>
  80b0a4:	1002241e 	bne	r2,zero,80b938 <___vfiprintf_internal_r+0xe30>
  80b0a8:	843ffc04 	addi	r16,r16,-16
  80b0ac:	01800044 	movi	r6,1
  80b0b0:	000b883a 	mov	r5,zero
  80b0b4:	d811883a 	mov	r8,sp
  80b0b8:	3c3ff316 	blt	r7,r16,80b088 <__alt_mem_onchip_mem+0xff78b088>
  80b0bc:	da402517 	ldw	r9,148(sp)
  80b0c0:	e007883a 	mov	r3,fp
  80b0c4:	8039883a 	mov	fp,r16
  80b0c8:	1821883a 	mov	r16,r3
  80b0cc:	d8c02417 	ldw	r3,144(sp)
  80b0d0:	1705883a 	add	r2,r2,fp
  80b0d4:	47000115 	stw	fp,4(r8)
  80b0d8:	40c00015 	stw	r3,0(r8)
  80b0dc:	d8801c15 	stw	r2,112(sp)
  80b0e0:	d9801b15 	stw	r6,108(sp)
  80b0e4:	00c001c4 	movi	r3,7
  80b0e8:	19827616 	blt	r3,r6,80bac4 <___vfiprintf_internal_r+0xfbc>
  80b0ec:	4cf9c83a 	sub	fp,r9,r19
  80b0f0:	42000204 	addi	r8,r8,8
  80b0f4:	31000044 	addi	r4,r6,1
  80b0f8:	300b883a 	mov	r5,r6
  80b0fc:	07018516 	blt	zero,fp,80b714 <___vfiprintf_internal_r+0xc0c>
  80b100:	9885883a 	add	r2,r19,r2
  80b104:	45400015 	stw	r21,0(r8)
  80b108:	44c00115 	stw	r19,4(r8)
  80b10c:	d8801c15 	stw	r2,112(sp)
  80b110:	d9001b15 	stw	r4,108(sp)
  80b114:	00c001c4 	movi	r3,7
  80b118:	1901dd0e 	bge	r3,r4,80b890 <___vfiprintf_internal_r+0xd88>
  80b11c:	1002401e 	bne	r2,zero,80ba20 <___vfiprintf_internal_r+0xf18>
  80b120:	d8001b15 	stw	zero,108(sp)
  80b124:	a2c0010c 	andi	r11,r20,4
  80b128:	58000226 	beq	r11,zero,80b134 <___vfiprintf_internal_r+0x62c>
  80b12c:	8ca7c83a 	sub	r19,r17,r18
  80b130:	04c2f216 	blt	zero,r19,80bcfc <___vfiprintf_internal_r+0x11f4>
  80b134:	8c80010e 	bge	r17,r18,80b13c <___vfiprintf_internal_r+0x634>
  80b138:	9023883a 	mov	r17,r18
  80b13c:	da802317 	ldw	r10,140(sp)
  80b140:	5455883a 	add	r10,r10,r17
  80b144:	da802315 	stw	r10,140(sp)
  80b148:	d8001b15 	stw	zero,108(sp)
  80b14c:	d811883a 	mov	r8,sp
  80b150:	003ea206 	br	80abdc <__alt_mem_onchip_mem+0xff78abdc>
  80b154:	a5000814 	ori	r20,r20,32
  80b158:	80c00007 	ldb	r3,0(r16)
  80b15c:	003ec906 	br	80ac84 <__alt_mem_onchip_mem+0xff78ac84>
  80b160:	80c00007 	ldb	r3,0(r16)
  80b164:	1b030926 	beq	r3,r12,80bd8c <___vfiprintf_internal_r+0x1284>
  80b168:	a5000414 	ori	r20,r20,16
  80b16c:	003ec506 	br	80ac84 <__alt_mem_onchip_mem+0xff78ac84>
  80b170:	21003fcc 	andi	r4,r4,255
  80b174:	20035e1e 	bne	r4,zero,80bef0 <___vfiprintf_internal_r+0x13e8>
  80b178:	a080080c 	andi	r2,r20,32
  80b17c:	1002a526 	beq	r2,zero,80bc14 <___vfiprintf_internal_r+0x110c>
  80b180:	da802217 	ldw	r10,136(sp)
  80b184:	50800017 	ldw	r2,0(r10)
  80b188:	da802317 	ldw	r10,140(sp)
  80b18c:	5007d7fa 	srai	r3,r10,31
  80b190:	da802217 	ldw	r10,136(sp)
  80b194:	10c00115 	stw	r3,4(r2)
  80b198:	52800104 	addi	r10,r10,4
  80b19c:	da802215 	stw	r10,136(sp)
  80b1a0:	da802317 	ldw	r10,140(sp)
  80b1a4:	12800015 	stw	r10,0(r2)
  80b1a8:	003e8c06 	br	80abdc <__alt_mem_onchip_mem+0xff78abdc>
  80b1ac:	21003fcc 	andi	r4,r4,255
  80b1b0:	2003511e 	bne	r4,zero,80bef8 <___vfiprintf_internal_r+0x13f0>
  80b1b4:	a080080c 	andi	r2,r20,32
  80b1b8:	1000a126 	beq	r2,zero,80b440 <___vfiprintf_internal_r+0x938>
  80b1bc:	da802217 	ldw	r10,136(sp)
  80b1c0:	d8001d85 	stb	zero,118(sp)
  80b1c4:	50800204 	addi	r2,r10,8
  80b1c8:	54800017 	ldw	r18,0(r10)
  80b1cc:	54c00117 	ldw	r19,4(r10)
  80b1d0:	4802b416 	blt	r9,zero,80bca4 <___vfiprintf_internal_r+0x119c>
  80b1d4:	013fdfc4 	movi	r4,-129
  80b1d8:	94c6b03a 	or	r3,r18,r19
  80b1dc:	d8802215 	stw	r2,136(sp)
  80b1e0:	a128703a 	and	r20,r20,r4
  80b1e4:	1800a226 	beq	r3,zero,80b470 <___vfiprintf_internal_r+0x968>
  80b1e8:	0039883a 	mov	fp,zero
  80b1ec:	dd401a04 	addi	r21,sp,104
  80b1f0:	9006d0fa 	srli	r3,r18,3
  80b1f4:	9808977a 	slli	r4,r19,29
  80b1f8:	9826d0fa 	srli	r19,r19,3
  80b1fc:	948001cc 	andi	r18,r18,7
  80b200:	90800c04 	addi	r2,r18,48
  80b204:	ad7fffc4 	addi	r21,r21,-1
  80b208:	20e4b03a 	or	r18,r4,r3
  80b20c:	a8800005 	stb	r2,0(r21)
  80b210:	94c6b03a 	or	r3,r18,r19
  80b214:	183ff61e 	bne	r3,zero,80b1f0 <__alt_mem_onchip_mem+0xff78b1f0>
  80b218:	a0c0004c 	andi	r3,r20,1
  80b21c:	18005926 	beq	r3,zero,80b384 <___vfiprintf_internal_r+0x87c>
  80b220:	10803fcc 	andi	r2,r2,255
  80b224:	1080201c 	xori	r2,r2,128
  80b228:	10bfe004 	addi	r2,r2,-128
  80b22c:	00c00c04 	movi	r3,48
  80b230:	10c05426 	beq	r2,r3,80b384 <___vfiprintf_internal_r+0x87c>
  80b234:	da801e17 	ldw	r10,120(sp)
  80b238:	a8bfffc4 	addi	r2,r21,-1
  80b23c:	a8ffffc5 	stb	r3,-1(r21)
  80b240:	50a7c83a 	sub	r19,r10,r2
  80b244:	102b883a 	mov	r21,r2
  80b248:	003f2f06 	br	80af08 <__alt_mem_onchip_mem+0xff78af08>
  80b24c:	21003fcc 	andi	r4,r4,255
  80b250:	2003421e 	bne	r4,zero,80bf5c <___vfiprintf_internal_r+0x1454>
  80b254:	00802074 	movhi	r2,129
  80b258:	108f5a04 	addi	r2,r2,15720
  80b25c:	d8802615 	stw	r2,152(sp)
  80b260:	a080080c 	andi	r2,r20,32
  80b264:	1000aa26 	beq	r2,zero,80b510 <___vfiprintf_internal_r+0xa08>
  80b268:	da802217 	ldw	r10,136(sp)
  80b26c:	54800017 	ldw	r18,0(r10)
  80b270:	54c00117 	ldw	r19,4(r10)
  80b274:	52800204 	addi	r10,r10,8
  80b278:	da802215 	stw	r10,136(sp)
  80b27c:	a080004c 	andi	r2,r20,1
  80b280:	1001d226 	beq	r2,zero,80b9cc <___vfiprintf_internal_r+0xec4>
  80b284:	94c4b03a 	or	r2,r18,r19
  80b288:	1002351e 	bne	r2,zero,80bb60 <___vfiprintf_internal_r+0x1058>
  80b28c:	d8001d85 	stb	zero,118(sp)
  80b290:	48022216 	blt	r9,zero,80bb1c <___vfiprintf_internal_r+0x1014>
  80b294:	00bfdfc4 	movi	r2,-129
  80b298:	a0a8703a 	and	r20,r20,r2
  80b29c:	003f1506 	br	80aef4 <__alt_mem_onchip_mem+0xff78aef4>
  80b2a0:	da802217 	ldw	r10,136(sp)
  80b2a4:	04800044 	movi	r18,1
  80b2a8:	d8001d85 	stb	zero,118(sp)
  80b2ac:	50800017 	ldw	r2,0(r10)
  80b2b0:	52800104 	addi	r10,r10,4
  80b2b4:	da802215 	stw	r10,136(sp)
  80b2b8:	d8801005 	stb	r2,64(sp)
  80b2bc:	9027883a 	mov	r19,r18
  80b2c0:	dd401004 	addi	r21,sp,64
  80b2c4:	0013883a 	mov	r9,zero
  80b2c8:	003f1706 	br	80af28 <__alt_mem_onchip_mem+0xff78af28>
  80b2cc:	21003fcc 	andi	r4,r4,255
  80b2d0:	2003201e 	bne	r4,zero,80bf54 <___vfiprintf_internal_r+0x144c>
  80b2d4:	a080080c 	andi	r2,r20,32
  80b2d8:	10004b26 	beq	r2,zero,80b408 <___vfiprintf_internal_r+0x900>
  80b2dc:	da802217 	ldw	r10,136(sp)
  80b2e0:	50800117 	ldw	r2,4(r10)
  80b2e4:	54800017 	ldw	r18,0(r10)
  80b2e8:	52800204 	addi	r10,r10,8
  80b2ec:	da802215 	stw	r10,136(sp)
  80b2f0:	1027883a 	mov	r19,r2
  80b2f4:	10022c16 	blt	r2,zero,80bba8 <___vfiprintf_internal_r+0x10a0>
  80b2f8:	df001d83 	ldbu	fp,118(sp)
  80b2fc:	48007216 	blt	r9,zero,80b4c8 <___vfiprintf_internal_r+0x9c0>
  80b300:	00ffdfc4 	movi	r3,-129
  80b304:	94c4b03a 	or	r2,r18,r19
  80b308:	a0e8703a 	and	r20,r20,r3
  80b30c:	1000cc26 	beq	r2,zero,80b640 <___vfiprintf_internal_r+0xb38>
  80b310:	98021026 	beq	r19,zero,80bb54 <___vfiprintf_internal_r+0x104c>
  80b314:	dc402415 	stw	r17,144(sp)
  80b318:	dc002515 	stw	r16,148(sp)
  80b31c:	9823883a 	mov	r17,r19
  80b320:	9021883a 	mov	r16,r18
  80b324:	dd401a04 	addi	r21,sp,104
  80b328:	4825883a 	mov	r18,r9
  80b32c:	4027883a 	mov	r19,r8
  80b330:	8009883a 	mov	r4,r16
  80b334:	880b883a 	mov	r5,r17
  80b338:	01800284 	movi	r6,10
  80b33c:	000f883a 	mov	r7,zero
  80b340:	080cbc00 	call	80cbc0 <__umoddi3>
  80b344:	10800c04 	addi	r2,r2,48
  80b348:	ad7fffc4 	addi	r21,r21,-1
  80b34c:	8009883a 	mov	r4,r16
  80b350:	880b883a 	mov	r5,r17
  80b354:	a8800005 	stb	r2,0(r21)
  80b358:	01800284 	movi	r6,10
  80b35c:	000f883a 	mov	r7,zero
  80b360:	080c6480 	call	80c648 <__udivdi3>
  80b364:	1021883a 	mov	r16,r2
  80b368:	10c4b03a 	or	r2,r2,r3
  80b36c:	1823883a 	mov	r17,r3
  80b370:	103fef1e 	bne	r2,zero,80b330 <__alt_mem_onchip_mem+0xff78b330>
  80b374:	dc402417 	ldw	r17,144(sp)
  80b378:	dc002517 	ldw	r16,148(sp)
  80b37c:	9013883a 	mov	r9,r18
  80b380:	9811883a 	mov	r8,r19
  80b384:	da801e17 	ldw	r10,120(sp)
  80b388:	5567c83a 	sub	r19,r10,r21
  80b38c:	003ede06 	br	80af08 <__alt_mem_onchip_mem+0xff78af08>
  80b390:	38803fcc 	andi	r2,r7,255
  80b394:	1080201c 	xori	r2,r2,128
  80b398:	10bfe004 	addi	r2,r2,-128
  80b39c:	1002371e 	bne	r2,zero,80bc7c <___vfiprintf_internal_r+0x1174>
  80b3a0:	01000044 	movi	r4,1
  80b3a4:	01c00804 	movi	r7,32
  80b3a8:	80c00007 	ldb	r3,0(r16)
  80b3ac:	003e3506 	br	80ac84 <__alt_mem_onchip_mem+0xff78ac84>
  80b3b0:	a5000054 	ori	r20,r20,1
  80b3b4:	80c00007 	ldb	r3,0(r16)
  80b3b8:	003e3206 	br	80ac84 <__alt_mem_onchip_mem+0xff78ac84>
  80b3bc:	a5002014 	ori	r20,r20,128
  80b3c0:	80c00007 	ldb	r3,0(r16)
  80b3c4:	003e2f06 	br	80ac84 <__alt_mem_onchip_mem+0xff78ac84>
  80b3c8:	8015883a 	mov	r10,r16
  80b3cc:	0023883a 	mov	r17,zero
  80b3d0:	18bff404 	addi	r2,r3,-48
  80b3d4:	50c00007 	ldb	r3,0(r10)
  80b3d8:	8c4002a4 	muli	r17,r17,10
  80b3dc:	84000044 	addi	r16,r16,1
  80b3e0:	8015883a 	mov	r10,r16
  80b3e4:	1463883a 	add	r17,r2,r17
  80b3e8:	18bff404 	addi	r2,r3,-48
  80b3ec:	30bff92e 	bgeu	r6,r2,80b3d4 <__alt_mem_onchip_mem+0xff78b3d4>
  80b3f0:	003e2506 	br	80ac88 <__alt_mem_onchip_mem+0xff78ac88>
  80b3f4:	21003fcc 	andi	r4,r4,255
  80b3f8:	2002d41e 	bne	r4,zero,80bf4c <___vfiprintf_internal_r+0x1444>
  80b3fc:	a5000414 	ori	r20,r20,16
  80b400:	a080080c 	andi	r2,r20,32
  80b404:	103fb51e 	bne	r2,zero,80b2dc <__alt_mem_onchip_mem+0xff78b2dc>
  80b408:	a080040c 	andi	r2,r20,16
  80b40c:	1001f826 	beq	r2,zero,80bbf0 <___vfiprintf_internal_r+0x10e8>
  80b410:	da802217 	ldw	r10,136(sp)
  80b414:	54800017 	ldw	r18,0(r10)
  80b418:	52800104 	addi	r10,r10,4
  80b41c:	da802215 	stw	r10,136(sp)
  80b420:	9027d7fa 	srai	r19,r18,31
  80b424:	9805883a 	mov	r2,r19
  80b428:	003fb206 	br	80b2f4 <__alt_mem_onchip_mem+0xff78b2f4>
  80b42c:	21003fcc 	andi	r4,r4,255
  80b430:	2002c41e 	bne	r4,zero,80bf44 <___vfiprintf_internal_r+0x143c>
  80b434:	a5000414 	ori	r20,r20,16
  80b438:	a080080c 	andi	r2,r20,32
  80b43c:	103f5f1e 	bne	r2,zero,80b1bc <__alt_mem_onchip_mem+0xff78b1bc>
  80b440:	a080040c 	andi	r2,r20,16
  80b444:	10020f26 	beq	r2,zero,80bc84 <___vfiprintf_internal_r+0x117c>
  80b448:	da802217 	ldw	r10,136(sp)
  80b44c:	d8001d85 	stb	zero,118(sp)
  80b450:	0027883a 	mov	r19,zero
  80b454:	50800104 	addi	r2,r10,4
  80b458:	54800017 	ldw	r18,0(r10)
  80b45c:	48021116 	blt	r9,zero,80bca4 <___vfiprintf_internal_r+0x119c>
  80b460:	00ffdfc4 	movi	r3,-129
  80b464:	d8802215 	stw	r2,136(sp)
  80b468:	a0e8703a 	and	r20,r20,r3
  80b46c:	903f5e1e 	bne	r18,zero,80b1e8 <__alt_mem_onchip_mem+0xff78b1e8>
  80b470:	0039883a 	mov	fp,zero
  80b474:	4802a626 	beq	r9,zero,80bf10 <___vfiprintf_internal_r+0x1408>
  80b478:	0025883a 	mov	r18,zero
  80b47c:	0027883a 	mov	r19,zero
  80b480:	003f5a06 	br	80b1ec <__alt_mem_onchip_mem+0xff78b1ec>
  80b484:	21003fcc 	andi	r4,r4,255
  80b488:	20029f1e 	bne	r4,zero,80bf08 <___vfiprintf_internal_r+0x1400>
  80b48c:	a5000414 	ori	r20,r20,16
  80b490:	a080080c 	andi	r2,r20,32
  80b494:	10005e1e 	bne	r2,zero,80b610 <___vfiprintf_internal_r+0xb08>
  80b498:	a080040c 	andi	r2,r20,16
  80b49c:	1001a21e 	bne	r2,zero,80bb28 <___vfiprintf_internal_r+0x1020>
  80b4a0:	a080100c 	andi	r2,r20,64
  80b4a4:	d8001d85 	stb	zero,118(sp)
  80b4a8:	da802217 	ldw	r10,136(sp)
  80b4ac:	1002231e 	bne	r2,zero,80bd3c <___vfiprintf_internal_r+0x1234>
  80b4b0:	50800104 	addi	r2,r10,4
  80b4b4:	54800017 	ldw	r18,0(r10)
  80b4b8:	0027883a 	mov	r19,zero
  80b4bc:	4801a00e 	bge	r9,zero,80bb40 <___vfiprintf_internal_r+0x1038>
  80b4c0:	d8802215 	stw	r2,136(sp)
  80b4c4:	0039883a 	mov	fp,zero
  80b4c8:	94c4b03a 	or	r2,r18,r19
  80b4cc:	103f901e 	bne	r2,zero,80b310 <__alt_mem_onchip_mem+0xff78b310>
  80b4d0:	00800044 	movi	r2,1
  80b4d4:	10803fcc 	andi	r2,r2,255
  80b4d8:	00c00044 	movi	r3,1
  80b4dc:	10c05926 	beq	r2,r3,80b644 <___vfiprintf_internal_r+0xb3c>
  80b4e0:	00c00084 	movi	r3,2
  80b4e4:	10ffe41e 	bne	r2,r3,80b478 <__alt_mem_onchip_mem+0xff78b478>
  80b4e8:	0025883a 	mov	r18,zero
  80b4ec:	0027883a 	mov	r19,zero
  80b4f0:	00013d06 	br	80b9e8 <___vfiprintf_internal_r+0xee0>
  80b4f4:	21003fcc 	andi	r4,r4,255
  80b4f8:	2002811e 	bne	r4,zero,80bf00 <___vfiprintf_internal_r+0x13f8>
  80b4fc:	00802074 	movhi	r2,129
  80b500:	108f5504 	addi	r2,r2,15700
  80b504:	d8802615 	stw	r2,152(sp)
  80b508:	a080080c 	andi	r2,r20,32
  80b50c:	103f561e 	bne	r2,zero,80b268 <__alt_mem_onchip_mem+0xff78b268>
  80b510:	a080040c 	andi	r2,r20,16
  80b514:	1001d126 	beq	r2,zero,80bc5c <___vfiprintf_internal_r+0x1154>
  80b518:	da802217 	ldw	r10,136(sp)
  80b51c:	0027883a 	mov	r19,zero
  80b520:	54800017 	ldw	r18,0(r10)
  80b524:	52800104 	addi	r10,r10,4
  80b528:	da802215 	stw	r10,136(sp)
  80b52c:	003f5306 	br	80b27c <__alt_mem_onchip_mem+0xff78b27c>
  80b530:	da802217 	ldw	r10,136(sp)
  80b534:	d8001d85 	stb	zero,118(sp)
  80b538:	55400017 	ldw	r21,0(r10)
  80b53c:	50c00104 	addi	r3,r10,4
  80b540:	a8024226 	beq	r21,zero,80be4c <___vfiprintf_internal_r+0x1344>
  80b544:	48021816 	blt	r9,zero,80bda8 <___vfiprintf_internal_r+0x12a0>
  80b548:	480d883a 	mov	r6,r9
  80b54c:	000b883a 	mov	r5,zero
  80b550:	a809883a 	mov	r4,r21
  80b554:	d8c02a15 	stw	r3,168(sp)
  80b558:	da002b15 	stw	r8,172(sp)
  80b55c:	da402c15 	stw	r9,176(sp)
  80b560:	0808df40 	call	808df4 <memchr>
  80b564:	d8c02a17 	ldw	r3,168(sp)
  80b568:	da002b17 	ldw	r8,172(sp)
  80b56c:	da402c17 	ldw	r9,176(sp)
  80b570:	10024826 	beq	r2,zero,80be94 <___vfiprintf_internal_r+0x138c>
  80b574:	1567c83a 	sub	r19,r2,r21
  80b578:	df001d83 	ldbu	fp,118(sp)
  80b57c:	d8c02215 	stw	r3,136(sp)
  80b580:	0013883a 	mov	r9,zero
  80b584:	003e6006 	br	80af08 <__alt_mem_onchip_mem+0xff78af08>
  80b588:	21003fcc 	andi	r4,r4,255
  80b58c:	203fc026 	beq	r4,zero,80b490 <__alt_mem_onchip_mem+0xff78b490>
  80b590:	d9c01d85 	stb	r7,118(sp)
  80b594:	003fbe06 	br	80b490 <__alt_mem_onchip_mem+0xff78b490>
  80b598:	da802217 	ldw	r10,136(sp)
  80b59c:	54400017 	ldw	r17,0(r10)
  80b5a0:	50800104 	addi	r2,r10,4
  80b5a4:	883e3b16 	blt	r17,zero,80ae94 <__alt_mem_onchip_mem+0xff78ae94>
  80b5a8:	d8802215 	stw	r2,136(sp)
  80b5ac:	80c00007 	ldb	r3,0(r16)
  80b5b0:	003db406 	br	80ac84 <__alt_mem_onchip_mem+0xff78ac84>
  80b5b4:	01000044 	movi	r4,1
  80b5b8:	01c00ac4 	movi	r7,43
  80b5bc:	80c00007 	ldb	r3,0(r16)
  80b5c0:	003db006 	br	80ac84 <__alt_mem_onchip_mem+0xff78ac84>
  80b5c4:	80c00007 	ldb	r3,0(r16)
  80b5c8:	82800044 	addi	r10,r16,1
  80b5cc:	1b423c26 	beq	r3,r13,80bec0 <___vfiprintf_internal_r+0x13b8>
  80b5d0:	18bff404 	addi	r2,r3,-48
  80b5d4:	0013883a 	mov	r9,zero
  80b5d8:	30822b36 	bltu	r6,r2,80be88 <___vfiprintf_internal_r+0x1380>
  80b5dc:	50c00007 	ldb	r3,0(r10)
  80b5e0:	4a4002a4 	muli	r9,r9,10
  80b5e4:	54000044 	addi	r16,r10,1
  80b5e8:	8015883a 	mov	r10,r16
  80b5ec:	4893883a 	add	r9,r9,r2
  80b5f0:	18bff404 	addi	r2,r3,-48
  80b5f4:	30bff92e 	bgeu	r6,r2,80b5dc <__alt_mem_onchip_mem+0xff78b5dc>
  80b5f8:	483da30e 	bge	r9,zero,80ac88 <__alt_mem_onchip_mem+0xff78ac88>
  80b5fc:	027fffc4 	movi	r9,-1
  80b600:	003da106 	br	80ac88 <__alt_mem_onchip_mem+0xff78ac88>
  80b604:	a5001014 	ori	r20,r20,64
  80b608:	80c00007 	ldb	r3,0(r16)
  80b60c:	003d9d06 	br	80ac84 <__alt_mem_onchip_mem+0xff78ac84>
  80b610:	da802217 	ldw	r10,136(sp)
  80b614:	d8001d85 	stb	zero,118(sp)
  80b618:	50c00204 	addi	r3,r10,8
  80b61c:	54800017 	ldw	r18,0(r10)
  80b620:	54c00117 	ldw	r19,4(r10)
  80b624:	4801ca16 	blt	r9,zero,80bd50 <___vfiprintf_internal_r+0x1248>
  80b628:	013fdfc4 	movi	r4,-129
  80b62c:	94c4b03a 	or	r2,r18,r19
  80b630:	d8c02215 	stw	r3,136(sp)
  80b634:	a128703a 	and	r20,r20,r4
  80b638:	0039883a 	mov	fp,zero
  80b63c:	103f341e 	bne	r2,zero,80b310 <__alt_mem_onchip_mem+0xff78b310>
  80b640:	483e2e26 	beq	r9,zero,80aefc <__alt_mem_onchip_mem+0xff78aefc>
  80b644:	0025883a 	mov	r18,zero
  80b648:	94800c04 	addi	r18,r18,48
  80b64c:	dc8019c5 	stb	r18,103(sp)
  80b650:	dcc02717 	ldw	r19,156(sp)
  80b654:	dd4019c4 	addi	r21,sp,103
  80b658:	003e2b06 	br	80af08 <__alt_mem_onchip_mem+0xff78af08>
  80b65c:	21003fcc 	andi	r4,r4,255
  80b660:	2002361e 	bne	r4,zero,80bf3c <___vfiprintf_internal_r+0x1434>
  80b664:	1801c126 	beq	r3,zero,80bd6c <___vfiprintf_internal_r+0x1264>
  80b668:	04800044 	movi	r18,1
  80b66c:	d8c01005 	stb	r3,64(sp)
  80b670:	d8001d85 	stb	zero,118(sp)
  80b674:	9027883a 	mov	r19,r18
  80b678:	dd401004 	addi	r21,sp,64
  80b67c:	003f1106 	br	80b2c4 <__alt_mem_onchip_mem+0xff78b2c4>
  80b680:	d9402117 	ldw	r5,132(sp)
  80b684:	d9002017 	ldw	r4,128(sp)
  80b688:	d9801a04 	addi	r6,sp,104
  80b68c:	d9c02b15 	stw	r7,172(sp)
  80b690:	dbc02a15 	stw	r15,168(sp)
  80b694:	080a9f40 	call	80a9f4 <__sprint_r.part.0>
  80b698:	d9c02b17 	ldw	r7,172(sp)
  80b69c:	dbc02a17 	ldw	r15,168(sp)
  80b6a0:	10006d1e 	bne	r2,zero,80b858 <___vfiprintf_internal_r+0xd50>
  80b6a4:	d9801b17 	ldw	r6,108(sp)
  80b6a8:	d8801c17 	ldw	r2,112(sp)
  80b6ac:	d811883a 	mov	r8,sp
  80b6b0:	31400044 	addi	r5,r6,1
  80b6b4:	003e3306 	br	80af84 <__alt_mem_onchip_mem+0xff78af84>
  80b6b8:	d9401b17 	ldw	r5,108(sp)
  80b6bc:	d8801c17 	ldw	r2,112(sp)
  80b6c0:	29000044 	addi	r4,r5,1
  80b6c4:	d8c01d87 	ldb	r3,118(sp)
  80b6c8:	183e4d26 	beq	r3,zero,80b000 <__alt_mem_onchip_mem+0xff78b000>
  80b6cc:	00c00044 	movi	r3,1
  80b6d0:	d9401d84 	addi	r5,sp,118
  80b6d4:	10c5883a 	add	r2,r2,r3
  80b6d8:	41400015 	stw	r5,0(r8)
  80b6dc:	40c00115 	stw	r3,4(r8)
  80b6e0:	d8801c15 	stw	r2,112(sp)
  80b6e4:	d9001b15 	stw	r4,108(sp)
  80b6e8:	014001c4 	movi	r5,7
  80b6ec:	2900a90e 	bge	r5,r4,80b994 <___vfiprintf_internal_r+0xe8c>
  80b6f0:	1000da1e 	bne	r2,zero,80ba5c <___vfiprintf_internal_r+0xf54>
  80b6f4:	7000ab1e 	bne	r14,zero,80b9a4 <___vfiprintf_internal_r+0xe9c>
  80b6f8:	000b883a 	mov	r5,zero
  80b6fc:	1809883a 	mov	r4,r3
  80b700:	d811883a 	mov	r8,sp
  80b704:	00c02004 	movi	r3,128
  80b708:	e0fe4d26 	beq	fp,r3,80b040 <__alt_mem_onchip_mem+0xff78b040>
  80b70c:	4cf9c83a 	sub	fp,r9,r19
  80b710:	073e7b0e 	bge	zero,fp,80b100 <__alt_mem_onchip_mem+0xff78b100>
  80b714:	01c00404 	movi	r7,16
  80b718:	3f01900e 	bge	r7,fp,80bd5c <___vfiprintf_internal_r+0x1254>
  80b71c:	00c02074 	movhi	r3,129
  80b720:	18d05a04 	addi	r3,r3,16744
  80b724:	d8c02415 	stw	r3,144(sp)
  80b728:	034001c4 	movi	r13,7
  80b72c:	00000506 	br	80b744 <___vfiprintf_internal_r+0xc3c>
  80b730:	29000084 	addi	r4,r5,2
  80b734:	42000204 	addi	r8,r8,8
  80b738:	180b883a 	mov	r5,r3
  80b73c:	e73ffc04 	addi	fp,fp,-16
  80b740:	3f000d0e 	bge	r7,fp,80b778 <___vfiprintf_internal_r+0xc70>
  80b744:	10800404 	addi	r2,r2,16
  80b748:	28c00044 	addi	r3,r5,1
  80b74c:	45c00015 	stw	r23,0(r8)
  80b750:	41c00115 	stw	r7,4(r8)
  80b754:	d8801c15 	stw	r2,112(sp)
  80b758:	d8c01b15 	stw	r3,108(sp)
  80b75c:	68fff40e 	bge	r13,r3,80b730 <__alt_mem_onchip_mem+0xff78b730>
  80b760:	1000101e 	bne	r2,zero,80b7a4 <___vfiprintf_internal_r+0xc9c>
  80b764:	e73ffc04 	addi	fp,fp,-16
  80b768:	01000044 	movi	r4,1
  80b76c:	000b883a 	mov	r5,zero
  80b770:	d811883a 	mov	r8,sp
  80b774:	3f3ff316 	blt	r7,fp,80b744 <__alt_mem_onchip_mem+0xff78b744>
  80b778:	da802417 	ldw	r10,144(sp)
  80b77c:	1705883a 	add	r2,r2,fp
  80b780:	47000115 	stw	fp,4(r8)
  80b784:	42800015 	stw	r10,0(r8)
  80b788:	d8801c15 	stw	r2,112(sp)
  80b78c:	d9001b15 	stw	r4,108(sp)
  80b790:	00c001c4 	movi	r3,7
  80b794:	19003616 	blt	r3,r4,80b870 <___vfiprintf_internal_r+0xd68>
  80b798:	42000204 	addi	r8,r8,8
  80b79c:	21000044 	addi	r4,r4,1
  80b7a0:	003e5706 	br	80b100 <__alt_mem_onchip_mem+0xff78b100>
  80b7a4:	d9402117 	ldw	r5,132(sp)
  80b7a8:	d9002017 	ldw	r4,128(sp)
  80b7ac:	d9801a04 	addi	r6,sp,104
  80b7b0:	d9c02b15 	stw	r7,172(sp)
  80b7b4:	db402a15 	stw	r13,168(sp)
  80b7b8:	080a9f40 	call	80a9f4 <__sprint_r.part.0>
  80b7bc:	d9c02b17 	ldw	r7,172(sp)
  80b7c0:	db402a17 	ldw	r13,168(sp)
  80b7c4:	1000241e 	bne	r2,zero,80b858 <___vfiprintf_internal_r+0xd50>
  80b7c8:	d9401b17 	ldw	r5,108(sp)
  80b7cc:	d8801c17 	ldw	r2,112(sp)
  80b7d0:	d811883a 	mov	r8,sp
  80b7d4:	29000044 	addi	r4,r5,1
  80b7d8:	003fd806 	br	80b73c <__alt_mem_onchip_mem+0xff78b73c>
  80b7dc:	d9401b17 	ldw	r5,108(sp)
  80b7e0:	00c02074 	movhi	r3,129
  80b7e4:	18d05e04 	addi	r3,r3,16760
  80b7e8:	d8c02415 	stw	r3,144(sp)
  80b7ec:	29400044 	addi	r5,r5,1
  80b7f0:	d8c02417 	ldw	r3,144(sp)
  80b7f4:	14c5883a 	add	r2,r2,r19
  80b7f8:	44c00115 	stw	r19,4(r8)
  80b7fc:	40c00015 	stw	r3,0(r8)
  80b800:	d8801c15 	stw	r2,112(sp)
  80b804:	d9401b15 	stw	r5,108(sp)
  80b808:	00c001c4 	movi	r3,7
  80b80c:	1940070e 	bge	r3,r5,80b82c <___vfiprintf_internal_r+0xd24>
  80b810:	103e4826 	beq	r2,zero,80b134 <__alt_mem_onchip_mem+0xff78b134>
  80b814:	d9402117 	ldw	r5,132(sp)
  80b818:	d9002017 	ldw	r4,128(sp)
  80b81c:	d9801a04 	addi	r6,sp,104
  80b820:	080a9f40 	call	80a9f4 <__sprint_r.part.0>
  80b824:	10000c1e 	bne	r2,zero,80b858 <___vfiprintf_internal_r+0xd50>
  80b828:	d8801c17 	ldw	r2,112(sp)
  80b82c:	8c80010e 	bge	r17,r18,80b834 <___vfiprintf_internal_r+0xd2c>
  80b830:	9023883a 	mov	r17,r18
  80b834:	da802317 	ldw	r10,140(sp)
  80b838:	5455883a 	add	r10,r10,r17
  80b83c:	da802315 	stw	r10,140(sp)
  80b840:	103e4126 	beq	r2,zero,80b148 <__alt_mem_onchip_mem+0xff78b148>
  80b844:	d9402117 	ldw	r5,132(sp)
  80b848:	d9002017 	ldw	r4,128(sp)
  80b84c:	d9801a04 	addi	r6,sp,104
  80b850:	080a9f40 	call	80a9f4 <__sprint_r.part.0>
  80b854:	103e3c26 	beq	r2,zero,80b148 <__alt_mem_onchip_mem+0xff78b148>
  80b858:	dd002117 	ldw	r20,132(sp)
  80b85c:	a080030b 	ldhu	r2,12(r20)
  80b860:	1080100c 	andi	r2,r2,64
  80b864:	1001231e 	bne	r2,zero,80bcf4 <___vfiprintf_internal_r+0x11ec>
  80b868:	d8802317 	ldw	r2,140(sp)
  80b86c:	003d7b06 	br	80ae5c <__alt_mem_onchip_mem+0xff78ae5c>
  80b870:	1000991e 	bne	r2,zero,80bad8 <___vfiprintf_internal_r+0xfd0>
  80b874:	00c00044 	movi	r3,1
  80b878:	9805883a 	mov	r2,r19
  80b87c:	dd400015 	stw	r21,0(sp)
  80b880:	dcc00115 	stw	r19,4(sp)
  80b884:	dcc01c15 	stw	r19,112(sp)
  80b888:	d8c01b15 	stw	r3,108(sp)
  80b88c:	d811883a 	mov	r8,sp
  80b890:	42000204 	addi	r8,r8,8
  80b894:	a2c0010c 	andi	r11,r20,4
  80b898:	583fe426 	beq	r11,zero,80b82c <__alt_mem_onchip_mem+0xff78b82c>
  80b89c:	8ca7c83a 	sub	r19,r17,r18
  80b8a0:	04ffe20e 	bge	zero,r19,80b82c <__alt_mem_onchip_mem+0xff78b82c>
  80b8a4:	01c00404 	movi	r7,16
  80b8a8:	3cffcc0e 	bge	r7,r19,80b7dc <__alt_mem_onchip_mem+0xff78b7dc>
  80b8ac:	02802074 	movhi	r10,129
  80b8b0:	52905e04 	addi	r10,r10,16760
  80b8b4:	d9001b17 	ldw	r4,108(sp)
  80b8b8:	da802415 	stw	r10,144(sp)
  80b8bc:	382b883a 	mov	r21,r7
  80b8c0:	050001c4 	movi	r20,7
  80b8c4:	df002017 	ldw	fp,128(sp)
  80b8c8:	00000506 	br	80b8e0 <___vfiprintf_internal_r+0xdd8>
  80b8cc:	21400084 	addi	r5,r4,2
  80b8d0:	42000204 	addi	r8,r8,8
  80b8d4:	1809883a 	mov	r4,r3
  80b8d8:	9cfffc04 	addi	r19,r19,-16
  80b8dc:	acffc40e 	bge	r21,r19,80b7f0 <__alt_mem_onchip_mem+0xff78b7f0>
  80b8e0:	10800404 	addi	r2,r2,16
  80b8e4:	20c00044 	addi	r3,r4,1
  80b8e8:	45800015 	stw	r22,0(r8)
  80b8ec:	45400115 	stw	r21,4(r8)
  80b8f0:	d8801c15 	stw	r2,112(sp)
  80b8f4:	d8c01b15 	stw	r3,108(sp)
  80b8f8:	a0fff40e 	bge	r20,r3,80b8cc <__alt_mem_onchip_mem+0xff78b8cc>
  80b8fc:	1000041e 	bne	r2,zero,80b910 <___vfiprintf_internal_r+0xe08>
  80b900:	01400044 	movi	r5,1
  80b904:	0009883a 	mov	r4,zero
  80b908:	d811883a 	mov	r8,sp
  80b90c:	003ff206 	br	80b8d8 <__alt_mem_onchip_mem+0xff78b8d8>
  80b910:	d9402117 	ldw	r5,132(sp)
  80b914:	d9801a04 	addi	r6,sp,104
  80b918:	e009883a 	mov	r4,fp
  80b91c:	080a9f40 	call	80a9f4 <__sprint_r.part.0>
  80b920:	103fcd1e 	bne	r2,zero,80b858 <__alt_mem_onchip_mem+0xff78b858>
  80b924:	d9001b17 	ldw	r4,108(sp)
  80b928:	d8801c17 	ldw	r2,112(sp)
  80b92c:	d811883a 	mov	r8,sp
  80b930:	21400044 	addi	r5,r4,1
  80b934:	003fe806 	br	80b8d8 <__alt_mem_onchip_mem+0xff78b8d8>
  80b938:	d9402117 	ldw	r5,132(sp)
  80b93c:	d9002017 	ldw	r4,128(sp)
  80b940:	d9801a04 	addi	r6,sp,104
  80b944:	d9c02b15 	stw	r7,172(sp)
  80b948:	db402a15 	stw	r13,168(sp)
  80b94c:	080a9f40 	call	80a9f4 <__sprint_r.part.0>
  80b950:	d9c02b17 	ldw	r7,172(sp)
  80b954:	db402a17 	ldw	r13,168(sp)
  80b958:	103fbf1e 	bne	r2,zero,80b858 <__alt_mem_onchip_mem+0xff78b858>
  80b95c:	d9401b17 	ldw	r5,108(sp)
  80b960:	d8801c17 	ldw	r2,112(sp)
  80b964:	d811883a 	mov	r8,sp
  80b968:	29800044 	addi	r6,r5,1
  80b96c:	003dc406 	br	80b080 <__alt_mem_onchip_mem+0xff78b080>
  80b970:	1000d21e 	bne	r2,zero,80bcbc <___vfiprintf_internal_r+0x11b4>
  80b974:	d8c01d87 	ldb	r3,118(sp)
  80b978:	18009526 	beq	r3,zero,80bbd0 <___vfiprintf_internal_r+0x10c8>
  80b97c:	00800044 	movi	r2,1
  80b980:	d8c01d84 	addi	r3,sp,118
  80b984:	1009883a 	mov	r4,r2
  80b988:	d8c00015 	stw	r3,0(sp)
  80b98c:	d8800115 	stw	r2,4(sp)
  80b990:	d811883a 	mov	r8,sp
  80b994:	200b883a 	mov	r5,r4
  80b998:	42000204 	addi	r8,r8,8
  80b99c:	21000044 	addi	r4,r4,1
  80b9a0:	003d9706 	br	80b000 <__alt_mem_onchip_mem+0xff78b000>
  80b9a4:	d9001d04 	addi	r4,sp,116
  80b9a8:	00800084 	movi	r2,2
  80b9ac:	d9000015 	stw	r4,0(sp)
  80b9b0:	d8800115 	stw	r2,4(sp)
  80b9b4:	1809883a 	mov	r4,r3
  80b9b8:	d811883a 	mov	r8,sp
  80b9bc:	200b883a 	mov	r5,r4
  80b9c0:	42000204 	addi	r8,r8,8
  80b9c4:	21000044 	addi	r4,r4,1
  80b9c8:	003f4e06 	br	80b704 <__alt_mem_onchip_mem+0xff78b704>
  80b9cc:	d8001d85 	stb	zero,118(sp)
  80b9d0:	48005016 	blt	r9,zero,80bb14 <___vfiprintf_internal_r+0x100c>
  80b9d4:	00ffdfc4 	movi	r3,-129
  80b9d8:	94c4b03a 	or	r2,r18,r19
  80b9dc:	a0e8703a 	and	r20,r20,r3
  80b9e0:	103d4426 	beq	r2,zero,80aef4 <__alt_mem_onchip_mem+0xff78aef4>
  80b9e4:	0039883a 	mov	fp,zero
  80b9e8:	d9002617 	ldw	r4,152(sp)
  80b9ec:	dd401a04 	addi	r21,sp,104
  80b9f0:	908003cc 	andi	r2,r18,15
  80b9f4:	9806973a 	slli	r3,r19,28
  80b9f8:	2085883a 	add	r2,r4,r2
  80b9fc:	9024d13a 	srli	r18,r18,4
  80ba00:	10800003 	ldbu	r2,0(r2)
  80ba04:	9826d13a 	srli	r19,r19,4
  80ba08:	ad7fffc4 	addi	r21,r21,-1
  80ba0c:	1ca4b03a 	or	r18,r3,r18
  80ba10:	a8800005 	stb	r2,0(r21)
  80ba14:	94c4b03a 	or	r2,r18,r19
  80ba18:	103ff51e 	bne	r2,zero,80b9f0 <__alt_mem_onchip_mem+0xff78b9f0>
  80ba1c:	003e5906 	br	80b384 <__alt_mem_onchip_mem+0xff78b384>
  80ba20:	d9402117 	ldw	r5,132(sp)
  80ba24:	d9002017 	ldw	r4,128(sp)
  80ba28:	d9801a04 	addi	r6,sp,104
  80ba2c:	080a9f40 	call	80a9f4 <__sprint_r.part.0>
  80ba30:	103f891e 	bne	r2,zero,80b858 <__alt_mem_onchip_mem+0xff78b858>
  80ba34:	d8801c17 	ldw	r2,112(sp)
  80ba38:	d811883a 	mov	r8,sp
  80ba3c:	003f9506 	br	80b894 <__alt_mem_onchip_mem+0xff78b894>
  80ba40:	d9402117 	ldw	r5,132(sp)
  80ba44:	d9002017 	ldw	r4,128(sp)
  80ba48:	d9801a04 	addi	r6,sp,104
  80ba4c:	080a9f40 	call	80a9f4 <__sprint_r.part.0>
  80ba50:	103f811e 	bne	r2,zero,80b858 <__alt_mem_onchip_mem+0xff78b858>
  80ba54:	d811883a 	mov	r8,sp
  80ba58:	003ced06 	br	80ae10 <__alt_mem_onchip_mem+0xff78ae10>
  80ba5c:	d9402117 	ldw	r5,132(sp)
  80ba60:	d9002017 	ldw	r4,128(sp)
  80ba64:	d9801a04 	addi	r6,sp,104
  80ba68:	da402c15 	stw	r9,176(sp)
  80ba6c:	db802a15 	stw	r14,168(sp)
  80ba70:	080a9f40 	call	80a9f4 <__sprint_r.part.0>
  80ba74:	da402c17 	ldw	r9,176(sp)
  80ba78:	db802a17 	ldw	r14,168(sp)
  80ba7c:	103f761e 	bne	r2,zero,80b858 <__alt_mem_onchip_mem+0xff78b858>
  80ba80:	d9401b17 	ldw	r5,108(sp)
  80ba84:	d8801c17 	ldw	r2,112(sp)
  80ba88:	d811883a 	mov	r8,sp
  80ba8c:	29000044 	addi	r4,r5,1
  80ba90:	003d5b06 	br	80b000 <__alt_mem_onchip_mem+0xff78b000>
  80ba94:	d9402117 	ldw	r5,132(sp)
  80ba98:	d9002017 	ldw	r4,128(sp)
  80ba9c:	d9801a04 	addi	r6,sp,104
  80baa0:	da402c15 	stw	r9,176(sp)
  80baa4:	080a9f40 	call	80a9f4 <__sprint_r.part.0>
  80baa8:	da402c17 	ldw	r9,176(sp)
  80baac:	103f6a1e 	bne	r2,zero,80b858 <__alt_mem_onchip_mem+0xff78b858>
  80bab0:	d9401b17 	ldw	r5,108(sp)
  80bab4:	d8801c17 	ldw	r2,112(sp)
  80bab8:	d811883a 	mov	r8,sp
  80babc:	29000044 	addi	r4,r5,1
  80bac0:	003f1006 	br	80b704 <__alt_mem_onchip_mem+0xff78b704>
  80bac4:	1000c31e 	bne	r2,zero,80bdd4 <___vfiprintf_internal_r+0x12cc>
  80bac8:	01000044 	movi	r4,1
  80bacc:	000b883a 	mov	r5,zero
  80bad0:	d811883a 	mov	r8,sp
  80bad4:	003f0d06 	br	80b70c <__alt_mem_onchip_mem+0xff78b70c>
  80bad8:	d9402117 	ldw	r5,132(sp)
  80badc:	d9002017 	ldw	r4,128(sp)
  80bae0:	d9801a04 	addi	r6,sp,104
  80bae4:	080a9f40 	call	80a9f4 <__sprint_r.part.0>
  80bae8:	103f5b1e 	bne	r2,zero,80b858 <__alt_mem_onchip_mem+0xff78b858>
  80baec:	d9001b17 	ldw	r4,108(sp)
  80baf0:	d8801c17 	ldw	r2,112(sp)
  80baf4:	d811883a 	mov	r8,sp
  80baf8:	21000044 	addi	r4,r4,1
  80bafc:	003d8006 	br	80b100 <__alt_mem_onchip_mem+0xff78b100>
  80bb00:	01002074 	movhi	r4,129
  80bb04:	210f5a04 	addi	r4,r4,15720
  80bb08:	d9002615 	stw	r4,152(sp)
  80bb0c:	d8c02215 	stw	r3,136(sp)
  80bb10:	1029883a 	mov	r20,r2
  80bb14:	94c4b03a 	or	r2,r18,r19
  80bb18:	103fb21e 	bne	r2,zero,80b9e4 <__alt_mem_onchip_mem+0xff78b9e4>
  80bb1c:	0039883a 	mov	fp,zero
  80bb20:	00800084 	movi	r2,2
  80bb24:	003e6b06 	br	80b4d4 <__alt_mem_onchip_mem+0xff78b4d4>
  80bb28:	da802217 	ldw	r10,136(sp)
  80bb2c:	d8001d85 	stb	zero,118(sp)
  80bb30:	0027883a 	mov	r19,zero
  80bb34:	50800104 	addi	r2,r10,4
  80bb38:	54800017 	ldw	r18,0(r10)
  80bb3c:	483e6016 	blt	r9,zero,80b4c0 <__alt_mem_onchip_mem+0xff78b4c0>
  80bb40:	00ffdfc4 	movi	r3,-129
  80bb44:	d8802215 	stw	r2,136(sp)
  80bb48:	a0e8703a 	and	r20,r20,r3
  80bb4c:	0039883a 	mov	fp,zero
  80bb50:	903ebb26 	beq	r18,zero,80b640 <__alt_mem_onchip_mem+0xff78b640>
  80bb54:	00800244 	movi	r2,9
  80bb58:	14bdee36 	bltu	r2,r18,80b314 <__alt_mem_onchip_mem+0xff78b314>
  80bb5c:	003eba06 	br	80b648 <__alt_mem_onchip_mem+0xff78b648>
  80bb60:	00800c04 	movi	r2,48
  80bb64:	d8c01d45 	stb	r3,117(sp)
  80bb68:	d8801d05 	stb	r2,116(sp)
  80bb6c:	d8001d85 	stb	zero,118(sp)
  80bb70:	a0c00094 	ori	r3,r20,2
  80bb74:	4800a916 	blt	r9,zero,80be1c <___vfiprintf_internal_r+0x1314>
  80bb78:	00bfdfc4 	movi	r2,-129
  80bb7c:	a096703a 	and	r11,r20,r2
  80bb80:	5d000094 	ori	r20,r11,2
  80bb84:	0039883a 	mov	fp,zero
  80bb88:	003f9706 	br	80b9e8 <__alt_mem_onchip_mem+0xff78b9e8>
  80bb8c:	8025883a 	mov	r18,r16
  80bb90:	003c2e06 	br	80ac4c <__alt_mem_onchip_mem+0xff78ac4c>
  80bb94:	00802074 	movhi	r2,129
  80bb98:	108f5a04 	addi	r2,r2,15720
  80bb9c:	0039883a 	mov	fp,zero
  80bba0:	d8802615 	stw	r2,152(sp)
  80bba4:	003f9006 	br	80b9e8 <__alt_mem_onchip_mem+0xff78b9e8>
  80bba8:	04a5c83a 	sub	r18,zero,r18
  80bbac:	07000b44 	movi	fp,45
  80bbb0:	9004c03a 	cmpne	r2,r18,zero
  80bbb4:	04e7c83a 	sub	r19,zero,r19
  80bbb8:	df001d85 	stb	fp,118(sp)
  80bbbc:	98a7c83a 	sub	r19,r19,r2
  80bbc0:	48009f16 	blt	r9,zero,80be40 <___vfiprintf_internal_r+0x1338>
  80bbc4:	00bfdfc4 	movi	r2,-129
  80bbc8:	a0a8703a 	and	r20,r20,r2
  80bbcc:	003dd006 	br	80b310 <__alt_mem_onchip_mem+0xff78b310>
  80bbd0:	70004c26 	beq	r14,zero,80bd04 <___vfiprintf_internal_r+0x11fc>
  80bbd4:	00800084 	movi	r2,2
  80bbd8:	d8c01d04 	addi	r3,sp,116
  80bbdc:	d8c00015 	stw	r3,0(sp)
  80bbe0:	d8800115 	stw	r2,4(sp)
  80bbe4:	01000044 	movi	r4,1
  80bbe8:	d811883a 	mov	r8,sp
  80bbec:	003f7306 	br	80b9bc <__alt_mem_onchip_mem+0xff78b9bc>
  80bbf0:	a080100c 	andi	r2,r20,64
  80bbf4:	da802217 	ldw	r10,136(sp)
  80bbf8:	103e0626 	beq	r2,zero,80b414 <__alt_mem_onchip_mem+0xff78b414>
  80bbfc:	5480000f 	ldh	r18,0(r10)
  80bc00:	52800104 	addi	r10,r10,4
  80bc04:	da802215 	stw	r10,136(sp)
  80bc08:	9027d7fa 	srai	r19,r18,31
  80bc0c:	9805883a 	mov	r2,r19
  80bc10:	003db806 	br	80b2f4 <__alt_mem_onchip_mem+0xff78b2f4>
  80bc14:	a080040c 	andi	r2,r20,16
  80bc18:	1000091e 	bne	r2,zero,80bc40 <___vfiprintf_internal_r+0x1138>
  80bc1c:	a2c0100c 	andi	r11,r20,64
  80bc20:	58000726 	beq	r11,zero,80bc40 <___vfiprintf_internal_r+0x1138>
  80bc24:	da802217 	ldw	r10,136(sp)
  80bc28:	50800017 	ldw	r2,0(r10)
  80bc2c:	52800104 	addi	r10,r10,4
  80bc30:	da802215 	stw	r10,136(sp)
  80bc34:	da802317 	ldw	r10,140(sp)
  80bc38:	1280000d 	sth	r10,0(r2)
  80bc3c:	003be706 	br	80abdc <__alt_mem_onchip_mem+0xff78abdc>
  80bc40:	da802217 	ldw	r10,136(sp)
  80bc44:	50800017 	ldw	r2,0(r10)
  80bc48:	52800104 	addi	r10,r10,4
  80bc4c:	da802215 	stw	r10,136(sp)
  80bc50:	da802317 	ldw	r10,140(sp)
  80bc54:	12800015 	stw	r10,0(r2)
  80bc58:	003be006 	br	80abdc <__alt_mem_onchip_mem+0xff78abdc>
  80bc5c:	a080100c 	andi	r2,r20,64
  80bc60:	da802217 	ldw	r10,136(sp)
  80bc64:	10003026 	beq	r2,zero,80bd28 <___vfiprintf_internal_r+0x1220>
  80bc68:	5480000b 	ldhu	r18,0(r10)
  80bc6c:	52800104 	addi	r10,r10,4
  80bc70:	0027883a 	mov	r19,zero
  80bc74:	da802215 	stw	r10,136(sp)
  80bc78:	003d8006 	br	80b27c <__alt_mem_onchip_mem+0xff78b27c>
  80bc7c:	80c00007 	ldb	r3,0(r16)
  80bc80:	003c0006 	br	80ac84 <__alt_mem_onchip_mem+0xff78ac84>
  80bc84:	a080100c 	andi	r2,r20,64
  80bc88:	d8001d85 	stb	zero,118(sp)
  80bc8c:	da802217 	ldw	r10,136(sp)
  80bc90:	1000201e 	bne	r2,zero,80bd14 <___vfiprintf_internal_r+0x120c>
  80bc94:	50800104 	addi	r2,r10,4
  80bc98:	54800017 	ldw	r18,0(r10)
  80bc9c:	0027883a 	mov	r19,zero
  80bca0:	483def0e 	bge	r9,zero,80b460 <__alt_mem_onchip_mem+0xff78b460>
  80bca4:	94c6b03a 	or	r3,r18,r19
  80bca8:	d8802215 	stw	r2,136(sp)
  80bcac:	183d4e1e 	bne	r3,zero,80b1e8 <__alt_mem_onchip_mem+0xff78b1e8>
  80bcb0:	0039883a 	mov	fp,zero
  80bcb4:	0005883a 	mov	r2,zero
  80bcb8:	003e0606 	br	80b4d4 <__alt_mem_onchip_mem+0xff78b4d4>
  80bcbc:	d9402117 	ldw	r5,132(sp)
  80bcc0:	d9002017 	ldw	r4,128(sp)
  80bcc4:	d9801a04 	addi	r6,sp,104
  80bcc8:	da402c15 	stw	r9,176(sp)
  80bccc:	db802a15 	stw	r14,168(sp)
  80bcd0:	080a9f40 	call	80a9f4 <__sprint_r.part.0>
  80bcd4:	da402c17 	ldw	r9,176(sp)
  80bcd8:	db802a17 	ldw	r14,168(sp)
  80bcdc:	103ede1e 	bne	r2,zero,80b858 <__alt_mem_onchip_mem+0xff78b858>
  80bce0:	d9401b17 	ldw	r5,108(sp)
  80bce4:	d8801c17 	ldw	r2,112(sp)
  80bce8:	d811883a 	mov	r8,sp
  80bcec:	29000044 	addi	r4,r5,1
  80bcf0:	003e7406 	br	80b6c4 <__alt_mem_onchip_mem+0xff78b6c4>
  80bcf4:	00bfffc4 	movi	r2,-1
  80bcf8:	003c5806 	br	80ae5c <__alt_mem_onchip_mem+0xff78ae5c>
  80bcfc:	d811883a 	mov	r8,sp
  80bd00:	003ee806 	br	80b8a4 <__alt_mem_onchip_mem+0xff78b8a4>
  80bd04:	000b883a 	mov	r5,zero
  80bd08:	01000044 	movi	r4,1
  80bd0c:	d811883a 	mov	r8,sp
  80bd10:	003e7c06 	br	80b704 <__alt_mem_onchip_mem+0xff78b704>
  80bd14:	50800104 	addi	r2,r10,4
  80bd18:	5480000b 	ldhu	r18,0(r10)
  80bd1c:	0027883a 	mov	r19,zero
  80bd20:	483dcf0e 	bge	r9,zero,80b460 <__alt_mem_onchip_mem+0xff78b460>
  80bd24:	003fdf06 	br	80bca4 <__alt_mem_onchip_mem+0xff78bca4>
  80bd28:	54800017 	ldw	r18,0(r10)
  80bd2c:	52800104 	addi	r10,r10,4
  80bd30:	0027883a 	mov	r19,zero
  80bd34:	da802215 	stw	r10,136(sp)
  80bd38:	003d5006 	br	80b27c <__alt_mem_onchip_mem+0xff78b27c>
  80bd3c:	50800104 	addi	r2,r10,4
  80bd40:	5480000b 	ldhu	r18,0(r10)
  80bd44:	0027883a 	mov	r19,zero
  80bd48:	483f7d0e 	bge	r9,zero,80bb40 <__alt_mem_onchip_mem+0xff78bb40>
  80bd4c:	003ddc06 	br	80b4c0 <__alt_mem_onchip_mem+0xff78b4c0>
  80bd50:	d8c02215 	stw	r3,136(sp)
  80bd54:	0039883a 	mov	fp,zero
  80bd58:	003ddb06 	br	80b4c8 <__alt_mem_onchip_mem+0xff78b4c8>
  80bd5c:	02802074 	movhi	r10,129
  80bd60:	52905a04 	addi	r10,r10,16744
  80bd64:	da802415 	stw	r10,144(sp)
  80bd68:	003e8306 	br	80b778 <__alt_mem_onchip_mem+0xff78b778>
  80bd6c:	d8801c17 	ldw	r2,112(sp)
  80bd70:	dd002117 	ldw	r20,132(sp)
  80bd74:	103eb926 	beq	r2,zero,80b85c <__alt_mem_onchip_mem+0xff78b85c>
  80bd78:	d9002017 	ldw	r4,128(sp)
  80bd7c:	d9801a04 	addi	r6,sp,104
  80bd80:	a00b883a 	mov	r5,r20
  80bd84:	080a9f40 	call	80a9f4 <__sprint_r.part.0>
  80bd88:	003eb406 	br	80b85c <__alt_mem_onchip_mem+0xff78b85c>
  80bd8c:	80c00043 	ldbu	r3,1(r16)
  80bd90:	a5000814 	ori	r20,r20,32
  80bd94:	84000044 	addi	r16,r16,1
  80bd98:	18c03fcc 	andi	r3,r3,255
  80bd9c:	18c0201c 	xori	r3,r3,128
  80bda0:	18ffe004 	addi	r3,r3,-128
  80bda4:	003bb706 	br	80ac84 <__alt_mem_onchip_mem+0xff78ac84>
  80bda8:	a809883a 	mov	r4,r21
  80bdac:	d8c02a15 	stw	r3,168(sp)
  80bdb0:	da002b15 	stw	r8,172(sp)
  80bdb4:	0803e140 	call	803e14 <strlen>
  80bdb8:	d8c02a17 	ldw	r3,168(sp)
  80bdbc:	1027883a 	mov	r19,r2
  80bdc0:	df001d83 	ldbu	fp,118(sp)
  80bdc4:	d8c02215 	stw	r3,136(sp)
  80bdc8:	0013883a 	mov	r9,zero
  80bdcc:	da002b17 	ldw	r8,172(sp)
  80bdd0:	003c4d06 	br	80af08 <__alt_mem_onchip_mem+0xff78af08>
  80bdd4:	d9402117 	ldw	r5,132(sp)
  80bdd8:	d9002017 	ldw	r4,128(sp)
  80bddc:	d9801a04 	addi	r6,sp,104
  80bde0:	da402c15 	stw	r9,176(sp)
  80bde4:	080a9f40 	call	80a9f4 <__sprint_r.part.0>
  80bde8:	da402c17 	ldw	r9,176(sp)
  80bdec:	103e9a1e 	bne	r2,zero,80b858 <__alt_mem_onchip_mem+0xff78b858>
  80bdf0:	d9401b17 	ldw	r5,108(sp)
  80bdf4:	d8801c17 	ldw	r2,112(sp)
  80bdf8:	d811883a 	mov	r8,sp
  80bdfc:	29000044 	addi	r4,r5,1
  80be00:	003e4206 	br	80b70c <__alt_mem_onchip_mem+0xff78b70c>
  80be04:	d9401b17 	ldw	r5,108(sp)
  80be08:	01002074 	movhi	r4,129
  80be0c:	21105e04 	addi	r4,r4,16760
  80be10:	d9002415 	stw	r4,144(sp)
  80be14:	29400044 	addi	r5,r5,1
  80be18:	003c6d06 	br	80afd0 <__alt_mem_onchip_mem+0xff78afd0>
  80be1c:	0039883a 	mov	fp,zero
  80be20:	00800084 	movi	r2,2
  80be24:	10803fcc 	andi	r2,r2,255
  80be28:	01000044 	movi	r4,1
  80be2c:	11001e26 	beq	r2,r4,80bea8 <___vfiprintf_internal_r+0x13a0>
  80be30:	01000084 	movi	r4,2
  80be34:	11001e1e 	bne	r2,r4,80beb0 <___vfiprintf_internal_r+0x13a8>
  80be38:	1829883a 	mov	r20,r3
  80be3c:	003eea06 	br	80b9e8 <__alt_mem_onchip_mem+0xff78b9e8>
  80be40:	a007883a 	mov	r3,r20
  80be44:	00800044 	movi	r2,1
  80be48:	003ff606 	br	80be24 <__alt_mem_onchip_mem+0xff78be24>
  80be4c:	00800184 	movi	r2,6
  80be50:	1240012e 	bgeu	r2,r9,80be58 <___vfiprintf_internal_r+0x1350>
  80be54:	1013883a 	mov	r9,r2
  80be58:	4827883a 	mov	r19,r9
  80be5c:	4825883a 	mov	r18,r9
  80be60:	48001516 	blt	r9,zero,80beb8 <___vfiprintf_internal_r+0x13b0>
  80be64:	05402074 	movhi	r21,129
  80be68:	d8c02215 	stw	r3,136(sp)
  80be6c:	ad4f5f04 	addi	r21,r21,15740
  80be70:	003d1406 	br	80b2c4 <__alt_mem_onchip_mem+0xff78b2c4>
  80be74:	02802074 	movhi	r10,129
  80be78:	52905a04 	addi	r10,r10,16744
  80be7c:	da802415 	stw	r10,144(sp)
  80be80:	200d883a 	mov	r6,r4
  80be84:	003c9106 	br	80b0cc <__alt_mem_onchip_mem+0xff78b0cc>
  80be88:	5021883a 	mov	r16,r10
  80be8c:	0013883a 	mov	r9,zero
  80be90:	003b7d06 	br	80ac88 <__alt_mem_onchip_mem+0xff78ac88>
  80be94:	4827883a 	mov	r19,r9
  80be98:	df001d83 	ldbu	fp,118(sp)
  80be9c:	d8c02215 	stw	r3,136(sp)
  80bea0:	0013883a 	mov	r9,zero
  80bea4:	003c1806 	br	80af08 <__alt_mem_onchip_mem+0xff78af08>
  80bea8:	1829883a 	mov	r20,r3
  80beac:	003d1806 	br	80b310 <__alt_mem_onchip_mem+0xff78b310>
  80beb0:	1829883a 	mov	r20,r3
  80beb4:	003ccd06 	br	80b1ec <__alt_mem_onchip_mem+0xff78b1ec>
  80beb8:	0025883a 	mov	r18,zero
  80bebc:	003fe906 	br	80be64 <__alt_mem_onchip_mem+0xff78be64>
  80bec0:	d8802217 	ldw	r2,136(sp)
  80bec4:	80c00043 	ldbu	r3,1(r16)
  80bec8:	5021883a 	mov	r16,r10
  80becc:	12400017 	ldw	r9,0(r2)
  80bed0:	10800104 	addi	r2,r2,4
  80bed4:	d8802215 	stw	r2,136(sp)
  80bed8:	483faf0e 	bge	r9,zero,80bd98 <__alt_mem_onchip_mem+0xff78bd98>
  80bedc:	18c03fcc 	andi	r3,r3,255
  80bee0:	18c0201c 	xori	r3,r3,128
  80bee4:	027fffc4 	movi	r9,-1
  80bee8:	18ffe004 	addi	r3,r3,-128
  80beec:	003b6506 	br	80ac84 <__alt_mem_onchip_mem+0xff78ac84>
  80bef0:	d9c01d85 	stb	r7,118(sp)
  80bef4:	003ca006 	br	80b178 <__alt_mem_onchip_mem+0xff78b178>
  80bef8:	d9c01d85 	stb	r7,118(sp)
  80befc:	003cad06 	br	80b1b4 <__alt_mem_onchip_mem+0xff78b1b4>
  80bf00:	d9c01d85 	stb	r7,118(sp)
  80bf04:	003d7d06 	br	80b4fc <__alt_mem_onchip_mem+0xff78b4fc>
  80bf08:	d9c01d85 	stb	r7,118(sp)
  80bf0c:	003d5f06 	br	80b48c <__alt_mem_onchip_mem+0xff78b48c>
  80bf10:	a080004c 	andi	r2,r20,1
  80bf14:	0039883a 	mov	fp,zero
  80bf18:	10000526 	beq	r2,zero,80bf30 <___vfiprintf_internal_r+0x1428>
  80bf1c:	00800c04 	movi	r2,48
  80bf20:	d88019c5 	stb	r2,103(sp)
  80bf24:	dcc02717 	ldw	r19,156(sp)
  80bf28:	dd4019c4 	addi	r21,sp,103
  80bf2c:	003bf606 	br	80af08 <__alt_mem_onchip_mem+0xff78af08>
  80bf30:	0027883a 	mov	r19,zero
  80bf34:	dd401a04 	addi	r21,sp,104
  80bf38:	003bf306 	br	80af08 <__alt_mem_onchip_mem+0xff78af08>
  80bf3c:	d9c01d85 	stb	r7,118(sp)
  80bf40:	003dc806 	br	80b664 <__alt_mem_onchip_mem+0xff78b664>
  80bf44:	d9c01d85 	stb	r7,118(sp)
  80bf48:	003d3a06 	br	80b434 <__alt_mem_onchip_mem+0xff78b434>
  80bf4c:	d9c01d85 	stb	r7,118(sp)
  80bf50:	003d2a06 	br	80b3fc <__alt_mem_onchip_mem+0xff78b3fc>
  80bf54:	d9c01d85 	stb	r7,118(sp)
  80bf58:	003cde06 	br	80b2d4 <__alt_mem_onchip_mem+0xff78b2d4>
  80bf5c:	d9c01d85 	stb	r7,118(sp)
  80bf60:	003cbc06 	br	80b254 <__alt_mem_onchip_mem+0xff78b254>

0080bf64 <__vfiprintf_internal>:
  80bf64:	00802074 	movhi	r2,129
  80bf68:	1097e104 	addi	r2,r2,24452
  80bf6c:	300f883a 	mov	r7,r6
  80bf70:	280d883a 	mov	r6,r5
  80bf74:	200b883a 	mov	r5,r4
  80bf78:	11000017 	ldw	r4,0(r2)
  80bf7c:	080ab081 	jmpi	80ab08 <___vfiprintf_internal_r>

0080bf80 <__sbprintf>:
  80bf80:	2880030b 	ldhu	r2,12(r5)
  80bf84:	2ac01917 	ldw	r11,100(r5)
  80bf88:	2a80038b 	ldhu	r10,14(r5)
  80bf8c:	2a400717 	ldw	r9,28(r5)
  80bf90:	2a000917 	ldw	r8,36(r5)
  80bf94:	defee204 	addi	sp,sp,-1144
  80bf98:	00c10004 	movi	r3,1024
  80bf9c:	dc011a15 	stw	r16,1128(sp)
  80bfa0:	10bfff4c 	andi	r2,r2,65533
  80bfa4:	2821883a 	mov	r16,r5
  80bfa8:	d8cb883a 	add	r5,sp,r3
  80bfac:	dc811c15 	stw	r18,1136(sp)
  80bfb0:	dc411b15 	stw	r17,1132(sp)
  80bfb4:	dfc11d15 	stw	ra,1140(sp)
  80bfb8:	2025883a 	mov	r18,r4
  80bfbc:	d881030d 	sth	r2,1036(sp)
  80bfc0:	dac11915 	stw	r11,1124(sp)
  80bfc4:	da81038d 	sth	r10,1038(sp)
  80bfc8:	da410715 	stw	r9,1052(sp)
  80bfcc:	da010915 	stw	r8,1060(sp)
  80bfd0:	dec10015 	stw	sp,1024(sp)
  80bfd4:	dec10415 	stw	sp,1040(sp)
  80bfd8:	d8c10215 	stw	r3,1032(sp)
  80bfdc:	d8c10515 	stw	r3,1044(sp)
  80bfe0:	d8010615 	stw	zero,1048(sp)
  80bfe4:	080ab080 	call	80ab08 <___vfiprintf_internal_r>
  80bfe8:	1023883a 	mov	r17,r2
  80bfec:	10000416 	blt	r2,zero,80c000 <__sbprintf+0x80>
  80bff0:	d9410004 	addi	r5,sp,1024
  80bff4:	9009883a 	mov	r4,r18
  80bff8:	080823c0 	call	80823c <_fflush_r>
  80bffc:	10000d1e 	bne	r2,zero,80c034 <__sbprintf+0xb4>
  80c000:	d881030b 	ldhu	r2,1036(sp)
  80c004:	1080100c 	andi	r2,r2,64
  80c008:	10000326 	beq	r2,zero,80c018 <__sbprintf+0x98>
  80c00c:	8080030b 	ldhu	r2,12(r16)
  80c010:	10801014 	ori	r2,r2,64
  80c014:	8080030d 	sth	r2,12(r16)
  80c018:	8805883a 	mov	r2,r17
  80c01c:	dfc11d17 	ldw	ra,1140(sp)
  80c020:	dc811c17 	ldw	r18,1136(sp)
  80c024:	dc411b17 	ldw	r17,1132(sp)
  80c028:	dc011a17 	ldw	r16,1128(sp)
  80c02c:	dec11e04 	addi	sp,sp,1144
  80c030:	f800283a 	ret
  80c034:	047fffc4 	movi	r17,-1
  80c038:	003ff106 	br	80c000 <__alt_mem_onchip_mem+0xff78c000>

0080c03c <__swbuf_r>:
  80c03c:	defffb04 	addi	sp,sp,-20
  80c040:	dcc00315 	stw	r19,12(sp)
  80c044:	dc800215 	stw	r18,8(sp)
  80c048:	dc000015 	stw	r16,0(sp)
  80c04c:	dfc00415 	stw	ra,16(sp)
  80c050:	dc400115 	stw	r17,4(sp)
  80c054:	2025883a 	mov	r18,r4
  80c058:	2827883a 	mov	r19,r5
  80c05c:	3021883a 	mov	r16,r6
  80c060:	20000226 	beq	r4,zero,80c06c <__swbuf_r+0x30>
  80c064:	20800e17 	ldw	r2,56(r4)
  80c068:	10004226 	beq	r2,zero,80c174 <__swbuf_r+0x138>
  80c06c:	80800617 	ldw	r2,24(r16)
  80c070:	8100030b 	ldhu	r4,12(r16)
  80c074:	80800215 	stw	r2,8(r16)
  80c078:	2080020c 	andi	r2,r4,8
  80c07c:	10003626 	beq	r2,zero,80c158 <__swbuf_r+0x11c>
  80c080:	80c00417 	ldw	r3,16(r16)
  80c084:	18003426 	beq	r3,zero,80c158 <__swbuf_r+0x11c>
  80c088:	2088000c 	andi	r2,r4,8192
  80c08c:	9c403fcc 	andi	r17,r19,255
  80c090:	10001a26 	beq	r2,zero,80c0fc <__swbuf_r+0xc0>
  80c094:	80800017 	ldw	r2,0(r16)
  80c098:	81000517 	ldw	r4,20(r16)
  80c09c:	10c7c83a 	sub	r3,r2,r3
  80c0a0:	1900200e 	bge	r3,r4,80c124 <__swbuf_r+0xe8>
  80c0a4:	18c00044 	addi	r3,r3,1
  80c0a8:	81000217 	ldw	r4,8(r16)
  80c0ac:	11400044 	addi	r5,r2,1
  80c0b0:	81400015 	stw	r5,0(r16)
  80c0b4:	213fffc4 	addi	r4,r4,-1
  80c0b8:	81000215 	stw	r4,8(r16)
  80c0bc:	14c00005 	stb	r19,0(r2)
  80c0c0:	80800517 	ldw	r2,20(r16)
  80c0c4:	10c01e26 	beq	r2,r3,80c140 <__swbuf_r+0x104>
  80c0c8:	8080030b 	ldhu	r2,12(r16)
  80c0cc:	1080004c 	andi	r2,r2,1
  80c0d0:	10000226 	beq	r2,zero,80c0dc <__swbuf_r+0xa0>
  80c0d4:	00800284 	movi	r2,10
  80c0d8:	88801926 	beq	r17,r2,80c140 <__swbuf_r+0x104>
  80c0dc:	8805883a 	mov	r2,r17
  80c0e0:	dfc00417 	ldw	ra,16(sp)
  80c0e4:	dcc00317 	ldw	r19,12(sp)
  80c0e8:	dc800217 	ldw	r18,8(sp)
  80c0ec:	dc400117 	ldw	r17,4(sp)
  80c0f0:	dc000017 	ldw	r16,0(sp)
  80c0f4:	dec00504 	addi	sp,sp,20
  80c0f8:	f800283a 	ret
  80c0fc:	81401917 	ldw	r5,100(r16)
  80c100:	00b7ffc4 	movi	r2,-8193
  80c104:	21080014 	ori	r4,r4,8192
  80c108:	2884703a 	and	r2,r5,r2
  80c10c:	80801915 	stw	r2,100(r16)
  80c110:	80800017 	ldw	r2,0(r16)
  80c114:	8100030d 	sth	r4,12(r16)
  80c118:	81000517 	ldw	r4,20(r16)
  80c11c:	10c7c83a 	sub	r3,r2,r3
  80c120:	193fe016 	blt	r3,r4,80c0a4 <__alt_mem_onchip_mem+0xff78c0a4>
  80c124:	800b883a 	mov	r5,r16
  80c128:	9009883a 	mov	r4,r18
  80c12c:	080823c0 	call	80823c <_fflush_r>
  80c130:	1000071e 	bne	r2,zero,80c150 <__swbuf_r+0x114>
  80c134:	80800017 	ldw	r2,0(r16)
  80c138:	00c00044 	movi	r3,1
  80c13c:	003fda06 	br	80c0a8 <__alt_mem_onchip_mem+0xff78c0a8>
  80c140:	800b883a 	mov	r5,r16
  80c144:	9009883a 	mov	r4,r18
  80c148:	080823c0 	call	80823c <_fflush_r>
  80c14c:	103fe326 	beq	r2,zero,80c0dc <__alt_mem_onchip_mem+0xff78c0dc>
  80c150:	00bfffc4 	movi	r2,-1
  80c154:	003fe206 	br	80c0e0 <__alt_mem_onchip_mem+0xff78c0e0>
  80c158:	800b883a 	mov	r5,r16
  80c15c:	9009883a 	mov	r4,r18
  80c160:	08064ec0 	call	8064ec <__swsetup_r>
  80c164:	103ffa1e 	bne	r2,zero,80c150 <__alt_mem_onchip_mem+0xff78c150>
  80c168:	8100030b 	ldhu	r4,12(r16)
  80c16c:	80c00417 	ldw	r3,16(r16)
  80c170:	003fc506 	br	80c088 <__alt_mem_onchip_mem+0xff78c088>
  80c174:	08024280 	call	802428 <__sinit>
  80c178:	003fbc06 	br	80c06c <__alt_mem_onchip_mem+0xff78c06c>

0080c17c <__swbuf>:
  80c17c:	00802074 	movhi	r2,129
  80c180:	1097e104 	addi	r2,r2,24452
  80c184:	280d883a 	mov	r6,r5
  80c188:	200b883a 	mov	r5,r4
  80c18c:	11000017 	ldw	r4,0(r2)
  80c190:	080c03c1 	jmpi	80c03c <__swbuf_r>

0080c194 <_calloc_r>:
  80c194:	298b383a 	mul	r5,r5,r6
  80c198:	defffe04 	addi	sp,sp,-8
  80c19c:	dfc00115 	stw	ra,4(sp)
  80c1a0:	dc000015 	stw	r16,0(sp)
  80c1a4:	0802f180 	call	802f18 <_malloc_r>
  80c1a8:	10002926 	beq	r2,zero,80c250 <_calloc_r+0xbc>
  80c1ac:	11bfff17 	ldw	r6,-4(r2)
  80c1b0:	1021883a 	mov	r16,r2
  80c1b4:	00bfff04 	movi	r2,-4
  80c1b8:	308c703a 	and	r6,r6,r2
  80c1bc:	00c00904 	movi	r3,36
  80c1c0:	308d883a 	add	r6,r6,r2
  80c1c4:	19801636 	bltu	r3,r6,80c220 <_calloc_r+0x8c>
  80c1c8:	008004c4 	movi	r2,19
  80c1cc:	11800b2e 	bgeu	r2,r6,80c1fc <_calloc_r+0x68>
  80c1d0:	80000015 	stw	zero,0(r16)
  80c1d4:	80000115 	stw	zero,4(r16)
  80c1d8:	008006c4 	movi	r2,27
  80c1dc:	11801a2e 	bgeu	r2,r6,80c248 <_calloc_r+0xb4>
  80c1e0:	80000215 	stw	zero,8(r16)
  80c1e4:	80000315 	stw	zero,12(r16)
  80c1e8:	30c0151e 	bne	r6,r3,80c240 <_calloc_r+0xac>
  80c1ec:	80000415 	stw	zero,16(r16)
  80c1f0:	80800604 	addi	r2,r16,24
  80c1f4:	80000515 	stw	zero,20(r16)
  80c1f8:	00000106 	br	80c200 <_calloc_r+0x6c>
  80c1fc:	8005883a 	mov	r2,r16
  80c200:	10000015 	stw	zero,0(r2)
  80c204:	10000115 	stw	zero,4(r2)
  80c208:	10000215 	stw	zero,8(r2)
  80c20c:	8005883a 	mov	r2,r16
  80c210:	dfc00117 	ldw	ra,4(sp)
  80c214:	dc000017 	ldw	r16,0(sp)
  80c218:	dec00204 	addi	sp,sp,8
  80c21c:	f800283a 	ret
  80c220:	000b883a 	mov	r5,zero
  80c224:	8009883a 	mov	r4,r16
  80c228:	08037240 	call	803724 <memset>
  80c22c:	8005883a 	mov	r2,r16
  80c230:	dfc00117 	ldw	ra,4(sp)
  80c234:	dc000017 	ldw	r16,0(sp)
  80c238:	dec00204 	addi	sp,sp,8
  80c23c:	f800283a 	ret
  80c240:	80800404 	addi	r2,r16,16
  80c244:	003fee06 	br	80c200 <__alt_mem_onchip_mem+0xff78c200>
  80c248:	80800204 	addi	r2,r16,8
  80c24c:	003fec06 	br	80c200 <__alt_mem_onchip_mem+0xff78c200>
  80c250:	0005883a 	mov	r2,zero
  80c254:	003fee06 	br	80c210 <__alt_mem_onchip_mem+0xff78c210>

0080c258 <__fputwc>:
  80c258:	defff804 	addi	sp,sp,-32
  80c25c:	dcc00415 	stw	r19,16(sp)
  80c260:	dc800315 	stw	r18,12(sp)
  80c264:	dc000115 	stw	r16,4(sp)
  80c268:	dfc00715 	stw	ra,28(sp)
  80c26c:	dd400615 	stw	r21,24(sp)
  80c270:	dd000515 	stw	r20,20(sp)
  80c274:	dc400215 	stw	r17,8(sp)
  80c278:	2027883a 	mov	r19,r4
  80c27c:	2825883a 	mov	r18,r5
  80c280:	3021883a 	mov	r16,r6
  80c284:	0808d400 	call	808d40 <__locale_mb_cur_max>
  80c288:	00c00044 	movi	r3,1
  80c28c:	10c03e26 	beq	r2,r3,80c388 <__fputwc+0x130>
  80c290:	81c01704 	addi	r7,r16,92
  80c294:	900d883a 	mov	r6,r18
  80c298:	d80b883a 	mov	r5,sp
  80c29c:	9809883a 	mov	r4,r19
  80c2a0:	080c4600 	call	80c460 <_wcrtomb_r>
  80c2a4:	1029883a 	mov	r20,r2
  80c2a8:	00bfffc4 	movi	r2,-1
  80c2ac:	a0802026 	beq	r20,r2,80c330 <__fputwc+0xd8>
  80c2b0:	d9400003 	ldbu	r5,0(sp)
  80c2b4:	a0001c26 	beq	r20,zero,80c328 <__fputwc+0xd0>
  80c2b8:	0023883a 	mov	r17,zero
  80c2bc:	05400284 	movi	r21,10
  80c2c0:	00000906 	br	80c2e8 <__fputwc+0x90>
  80c2c4:	80800017 	ldw	r2,0(r16)
  80c2c8:	11400005 	stb	r5,0(r2)
  80c2cc:	80c00017 	ldw	r3,0(r16)
  80c2d0:	18c00044 	addi	r3,r3,1
  80c2d4:	80c00015 	stw	r3,0(r16)
  80c2d8:	8c400044 	addi	r17,r17,1
  80c2dc:	dc45883a 	add	r2,sp,r17
  80c2e0:	8d00112e 	bgeu	r17,r20,80c328 <__fputwc+0xd0>
  80c2e4:	11400003 	ldbu	r5,0(r2)
  80c2e8:	80c00217 	ldw	r3,8(r16)
  80c2ec:	18ffffc4 	addi	r3,r3,-1
  80c2f0:	80c00215 	stw	r3,8(r16)
  80c2f4:	183ff30e 	bge	r3,zero,80c2c4 <__alt_mem_onchip_mem+0xff78c2c4>
  80c2f8:	80800617 	ldw	r2,24(r16)
  80c2fc:	18801916 	blt	r3,r2,80c364 <__fputwc+0x10c>
  80c300:	80800017 	ldw	r2,0(r16)
  80c304:	11400005 	stb	r5,0(r2)
  80c308:	80800017 	ldw	r2,0(r16)
  80c30c:	10c00003 	ldbu	r3,0(r2)
  80c310:	10800044 	addi	r2,r2,1
  80c314:	1d402326 	beq	r3,r21,80c3a4 <__fputwc+0x14c>
  80c318:	80800015 	stw	r2,0(r16)
  80c31c:	8c400044 	addi	r17,r17,1
  80c320:	dc45883a 	add	r2,sp,r17
  80c324:	8d3fef36 	bltu	r17,r20,80c2e4 <__alt_mem_onchip_mem+0xff78c2e4>
  80c328:	9005883a 	mov	r2,r18
  80c32c:	00000406 	br	80c340 <__fputwc+0xe8>
  80c330:	80c0030b 	ldhu	r3,12(r16)
  80c334:	a005883a 	mov	r2,r20
  80c338:	18c01014 	ori	r3,r3,64
  80c33c:	80c0030d 	sth	r3,12(r16)
  80c340:	dfc00717 	ldw	ra,28(sp)
  80c344:	dd400617 	ldw	r21,24(sp)
  80c348:	dd000517 	ldw	r20,20(sp)
  80c34c:	dcc00417 	ldw	r19,16(sp)
  80c350:	dc800317 	ldw	r18,12(sp)
  80c354:	dc400217 	ldw	r17,8(sp)
  80c358:	dc000117 	ldw	r16,4(sp)
  80c35c:	dec00804 	addi	sp,sp,32
  80c360:	f800283a 	ret
  80c364:	800d883a 	mov	r6,r16
  80c368:	29403fcc 	andi	r5,r5,255
  80c36c:	9809883a 	mov	r4,r19
  80c370:	080c03c0 	call	80c03c <__swbuf_r>
  80c374:	10bfffe0 	cmpeqi	r2,r2,-1
  80c378:	10803fcc 	andi	r2,r2,255
  80c37c:	103fd626 	beq	r2,zero,80c2d8 <__alt_mem_onchip_mem+0xff78c2d8>
  80c380:	00bfffc4 	movi	r2,-1
  80c384:	003fee06 	br	80c340 <__alt_mem_onchip_mem+0xff78c340>
  80c388:	90ffffc4 	addi	r3,r18,-1
  80c38c:	01003f84 	movi	r4,254
  80c390:	20ffbf36 	bltu	r4,r3,80c290 <__alt_mem_onchip_mem+0xff78c290>
  80c394:	900b883a 	mov	r5,r18
  80c398:	dc800005 	stb	r18,0(sp)
  80c39c:	1029883a 	mov	r20,r2
  80c3a0:	003fc506 	br	80c2b8 <__alt_mem_onchip_mem+0xff78c2b8>
  80c3a4:	800d883a 	mov	r6,r16
  80c3a8:	a80b883a 	mov	r5,r21
  80c3ac:	9809883a 	mov	r4,r19
  80c3b0:	080c03c0 	call	80c03c <__swbuf_r>
  80c3b4:	10bfffe0 	cmpeqi	r2,r2,-1
  80c3b8:	003fef06 	br	80c378 <__alt_mem_onchip_mem+0xff78c378>

0080c3bc <_fputwc_r>:
  80c3bc:	3080030b 	ldhu	r2,12(r6)
  80c3c0:	10c8000c 	andi	r3,r2,8192
  80c3c4:	1800051e 	bne	r3,zero,80c3dc <_fputwc_r+0x20>
  80c3c8:	30c01917 	ldw	r3,100(r6)
  80c3cc:	10880014 	ori	r2,r2,8192
  80c3d0:	3080030d 	sth	r2,12(r6)
  80c3d4:	18880014 	ori	r2,r3,8192
  80c3d8:	30801915 	stw	r2,100(r6)
  80c3dc:	080c2581 	jmpi	80c258 <__fputwc>

0080c3e0 <fputwc>:
  80c3e0:	00802074 	movhi	r2,129
  80c3e4:	defffc04 	addi	sp,sp,-16
  80c3e8:	1097e104 	addi	r2,r2,24452
  80c3ec:	dc000115 	stw	r16,4(sp)
  80c3f0:	14000017 	ldw	r16,0(r2)
  80c3f4:	dc400215 	stw	r17,8(sp)
  80c3f8:	dfc00315 	stw	ra,12(sp)
  80c3fc:	2023883a 	mov	r17,r4
  80c400:	80000226 	beq	r16,zero,80c40c <fputwc+0x2c>
  80c404:	80800e17 	ldw	r2,56(r16)
  80c408:	10001026 	beq	r2,zero,80c44c <fputwc+0x6c>
  80c40c:	2880030b 	ldhu	r2,12(r5)
  80c410:	10c8000c 	andi	r3,r2,8192
  80c414:	1800051e 	bne	r3,zero,80c42c <fputwc+0x4c>
  80c418:	28c01917 	ldw	r3,100(r5)
  80c41c:	10880014 	ori	r2,r2,8192
  80c420:	2880030d 	sth	r2,12(r5)
  80c424:	18880014 	ori	r2,r3,8192
  80c428:	28801915 	stw	r2,100(r5)
  80c42c:	280d883a 	mov	r6,r5
  80c430:	8009883a 	mov	r4,r16
  80c434:	880b883a 	mov	r5,r17
  80c438:	dfc00317 	ldw	ra,12(sp)
  80c43c:	dc400217 	ldw	r17,8(sp)
  80c440:	dc000117 	ldw	r16,4(sp)
  80c444:	dec00404 	addi	sp,sp,16
  80c448:	080c2581 	jmpi	80c258 <__fputwc>
  80c44c:	8009883a 	mov	r4,r16
  80c450:	d9400015 	stw	r5,0(sp)
  80c454:	08024280 	call	802428 <__sinit>
  80c458:	d9400017 	ldw	r5,0(sp)
  80c45c:	003feb06 	br	80c40c <__alt_mem_onchip_mem+0xff78c40c>

0080c460 <_wcrtomb_r>:
  80c460:	defff604 	addi	sp,sp,-40
  80c464:	00802074 	movhi	r2,129
  80c468:	dc800815 	stw	r18,32(sp)
  80c46c:	dc400715 	stw	r17,28(sp)
  80c470:	dc000615 	stw	r16,24(sp)
  80c474:	1097e604 	addi	r2,r2,24472
  80c478:	dfc00915 	stw	ra,36(sp)
  80c47c:	2021883a 	mov	r16,r4
  80c480:	3823883a 	mov	r17,r7
  80c484:	14800017 	ldw	r18,0(r2)
  80c488:	28001426 	beq	r5,zero,80c4dc <_wcrtomb_r+0x7c>
  80c48c:	d9400415 	stw	r5,16(sp)
  80c490:	d9800515 	stw	r6,20(sp)
  80c494:	0808d340 	call	808d34 <__locale_charset>
  80c498:	d9800517 	ldw	r6,20(sp)
  80c49c:	d9400417 	ldw	r5,16(sp)
  80c4a0:	100f883a 	mov	r7,r2
  80c4a4:	dc400015 	stw	r17,0(sp)
  80c4a8:	8009883a 	mov	r4,r16
  80c4ac:	903ee83a 	callr	r18
  80c4b0:	00ffffc4 	movi	r3,-1
  80c4b4:	10c0031e 	bne	r2,r3,80c4c4 <_wcrtomb_r+0x64>
  80c4b8:	88000015 	stw	zero,0(r17)
  80c4bc:	00c02284 	movi	r3,138
  80c4c0:	80c00015 	stw	r3,0(r16)
  80c4c4:	dfc00917 	ldw	ra,36(sp)
  80c4c8:	dc800817 	ldw	r18,32(sp)
  80c4cc:	dc400717 	ldw	r17,28(sp)
  80c4d0:	dc000617 	ldw	r16,24(sp)
  80c4d4:	dec00a04 	addi	sp,sp,40
  80c4d8:	f800283a 	ret
  80c4dc:	0808d340 	call	808d34 <__locale_charset>
  80c4e0:	100f883a 	mov	r7,r2
  80c4e4:	dc400015 	stw	r17,0(sp)
  80c4e8:	000d883a 	mov	r6,zero
  80c4ec:	d9400104 	addi	r5,sp,4
  80c4f0:	8009883a 	mov	r4,r16
  80c4f4:	903ee83a 	callr	r18
  80c4f8:	003fed06 	br	80c4b0 <__alt_mem_onchip_mem+0xff78c4b0>

0080c4fc <wcrtomb>:
  80c4fc:	defff604 	addi	sp,sp,-40
  80c500:	00802074 	movhi	r2,129
  80c504:	dc800615 	stw	r18,24(sp)
  80c508:	dc400515 	stw	r17,20(sp)
  80c50c:	1097e104 	addi	r2,r2,24452
  80c510:	dfc00915 	stw	ra,36(sp)
  80c514:	dd000815 	stw	r20,32(sp)
  80c518:	dcc00715 	stw	r19,28(sp)
  80c51c:	dc000415 	stw	r16,16(sp)
  80c520:	3025883a 	mov	r18,r6
  80c524:	14400017 	ldw	r17,0(r2)
  80c528:	20001926 	beq	r4,zero,80c590 <wcrtomb+0x94>
  80c52c:	00802074 	movhi	r2,129
  80c530:	1097e604 	addi	r2,r2,24472
  80c534:	15000017 	ldw	r20,0(r2)
  80c538:	2021883a 	mov	r16,r4
  80c53c:	2827883a 	mov	r19,r5
  80c540:	0808d340 	call	808d34 <__locale_charset>
  80c544:	100f883a 	mov	r7,r2
  80c548:	dc800015 	stw	r18,0(sp)
  80c54c:	980d883a 	mov	r6,r19
  80c550:	800b883a 	mov	r5,r16
  80c554:	8809883a 	mov	r4,r17
  80c558:	a03ee83a 	callr	r20
  80c55c:	00ffffc4 	movi	r3,-1
  80c560:	10c0031e 	bne	r2,r3,80c570 <wcrtomb+0x74>
  80c564:	90000015 	stw	zero,0(r18)
  80c568:	00c02284 	movi	r3,138
  80c56c:	88c00015 	stw	r3,0(r17)
  80c570:	dfc00917 	ldw	ra,36(sp)
  80c574:	dd000817 	ldw	r20,32(sp)
  80c578:	dcc00717 	ldw	r19,28(sp)
  80c57c:	dc800617 	ldw	r18,24(sp)
  80c580:	dc400517 	ldw	r17,20(sp)
  80c584:	dc000417 	ldw	r16,16(sp)
  80c588:	dec00a04 	addi	sp,sp,40
  80c58c:	f800283a 	ret
  80c590:	00802074 	movhi	r2,129
  80c594:	1097e604 	addi	r2,r2,24472
  80c598:	14000017 	ldw	r16,0(r2)
  80c59c:	0808d340 	call	808d34 <__locale_charset>
  80c5a0:	100f883a 	mov	r7,r2
  80c5a4:	dc800015 	stw	r18,0(sp)
  80c5a8:	000d883a 	mov	r6,zero
  80c5ac:	d9400104 	addi	r5,sp,4
  80c5b0:	8809883a 	mov	r4,r17
  80c5b4:	803ee83a 	callr	r16
  80c5b8:	003fe806 	br	80c55c <__alt_mem_onchip_mem+0xff78c55c>

0080c5bc <__ascii_wctomb>:
  80c5bc:	28000526 	beq	r5,zero,80c5d4 <__ascii_wctomb+0x18>
  80c5c0:	00803fc4 	movi	r2,255
  80c5c4:	11800536 	bltu	r2,r6,80c5dc <__ascii_wctomb+0x20>
  80c5c8:	29800005 	stb	r6,0(r5)
  80c5cc:	00800044 	movi	r2,1
  80c5d0:	f800283a 	ret
  80c5d4:	0005883a 	mov	r2,zero
  80c5d8:	f800283a 	ret
  80c5dc:	00802284 	movi	r2,138
  80c5e0:	20800015 	stw	r2,0(r4)
  80c5e4:	00bfffc4 	movi	r2,-1
  80c5e8:	f800283a 	ret

0080c5ec <_wctomb_r>:
  80c5ec:	00802074 	movhi	r2,129
  80c5f0:	defff904 	addi	sp,sp,-28
  80c5f4:	1097e604 	addi	r2,r2,24472
  80c5f8:	dfc00615 	stw	ra,24(sp)
  80c5fc:	dc400515 	stw	r17,20(sp)
  80c600:	dc000415 	stw	r16,16(sp)
  80c604:	3823883a 	mov	r17,r7
  80c608:	14000017 	ldw	r16,0(r2)
  80c60c:	d9000115 	stw	r4,4(sp)
  80c610:	d9400215 	stw	r5,8(sp)
  80c614:	d9800315 	stw	r6,12(sp)
  80c618:	0808d340 	call	808d34 <__locale_charset>
  80c61c:	d9800317 	ldw	r6,12(sp)
  80c620:	d9400217 	ldw	r5,8(sp)
  80c624:	d9000117 	ldw	r4,4(sp)
  80c628:	100f883a 	mov	r7,r2
  80c62c:	dc400015 	stw	r17,0(sp)
  80c630:	803ee83a 	callr	r16
  80c634:	dfc00617 	ldw	ra,24(sp)
  80c638:	dc400517 	ldw	r17,20(sp)
  80c63c:	dc000417 	ldw	r16,16(sp)
  80c640:	dec00704 	addi	sp,sp,28
  80c644:	f800283a 	ret

0080c648 <__udivdi3>:
  80c648:	defff504 	addi	sp,sp,-44
  80c64c:	dcc00415 	stw	r19,16(sp)
  80c650:	dc000115 	stw	r16,4(sp)
  80c654:	dfc00a15 	stw	ra,40(sp)
  80c658:	df000915 	stw	fp,36(sp)
  80c65c:	ddc00815 	stw	r23,32(sp)
  80c660:	dd800715 	stw	r22,28(sp)
  80c664:	dd400615 	stw	r21,24(sp)
  80c668:	dd000515 	stw	r20,20(sp)
  80c66c:	dc800315 	stw	r18,12(sp)
  80c670:	dc400215 	stw	r17,8(sp)
  80c674:	2027883a 	mov	r19,r4
  80c678:	2821883a 	mov	r16,r5
  80c67c:	3800411e 	bne	r7,zero,80c784 <__udivdi3+0x13c>
  80c680:	3023883a 	mov	r17,r6
  80c684:	2025883a 	mov	r18,r4
  80c688:	2980522e 	bgeu	r5,r6,80c7d4 <__udivdi3+0x18c>
  80c68c:	00bfffd4 	movui	r2,65535
  80c690:	282d883a 	mov	r22,r5
  80c694:	1180a836 	bltu	r2,r6,80c938 <__udivdi3+0x2f0>
  80c698:	00803fc4 	movi	r2,255
  80c69c:	1185803a 	cmpltu	r2,r2,r6
  80c6a0:	100490fa 	slli	r2,r2,3
  80c6a4:	3086d83a 	srl	r3,r6,r2
  80c6a8:	01002074 	movhi	r4,129
  80c6ac:	21106204 	addi	r4,r4,16776
  80c6b0:	20c7883a 	add	r3,r4,r3
  80c6b4:	18c00003 	ldbu	r3,0(r3)
  80c6b8:	1885883a 	add	r2,r3,r2
  80c6bc:	00c00804 	movi	r3,32
  80c6c0:	1887c83a 	sub	r3,r3,r2
  80c6c4:	18000526 	beq	r3,zero,80c6dc <__udivdi3+0x94>
  80c6c8:	80e0983a 	sll	r16,r16,r3
  80c6cc:	9884d83a 	srl	r2,r19,r2
  80c6d0:	30e2983a 	sll	r17,r6,r3
  80c6d4:	98e4983a 	sll	r18,r19,r3
  80c6d8:	142cb03a 	or	r22,r2,r16
  80c6dc:	882ad43a 	srli	r21,r17,16
  80c6e0:	b009883a 	mov	r4,r22
  80c6e4:	8d3fffcc 	andi	r20,r17,65535
  80c6e8:	a80b883a 	mov	r5,r21
  80c6ec:	080d2540 	call	80d254 <__umodsi3>
  80c6f0:	b009883a 	mov	r4,r22
  80c6f4:	a80b883a 	mov	r5,r21
  80c6f8:	1027883a 	mov	r19,r2
  80c6fc:	080d1f00 	call	80d1f0 <__udivsi3>
  80c700:	102d883a 	mov	r22,r2
  80c704:	9826943a 	slli	r19,r19,16
  80c708:	9004d43a 	srli	r2,r18,16
  80c70c:	a5a1383a 	mul	r16,r20,r22
  80c710:	14c4b03a 	or	r2,r2,r19
  80c714:	1400052e 	bgeu	r2,r16,80c72c <__udivdi3+0xe4>
  80c718:	1445883a 	add	r2,r2,r17
  80c71c:	b0ffffc4 	addi	r3,r22,-1
  80c720:	14400136 	bltu	r2,r17,80c728 <__udivdi3+0xe0>
  80c724:	14012336 	bltu	r2,r16,80cbb4 <__udivdi3+0x56c>
  80c728:	182d883a 	mov	r22,r3
  80c72c:	1421c83a 	sub	r16,r2,r16
  80c730:	a80b883a 	mov	r5,r21
  80c734:	8009883a 	mov	r4,r16
  80c738:	080d2540 	call	80d254 <__umodsi3>
  80c73c:	1027883a 	mov	r19,r2
  80c740:	a80b883a 	mov	r5,r21
  80c744:	8009883a 	mov	r4,r16
  80c748:	080d1f00 	call	80d1f0 <__udivsi3>
  80c74c:	9826943a 	slli	r19,r19,16
  80c750:	a0a9383a 	mul	r20,r20,r2
  80c754:	94bfffcc 	andi	r18,r18,65535
  80c758:	94e4b03a 	or	r18,r18,r19
  80c75c:	9500052e 	bgeu	r18,r20,80c774 <__udivdi3+0x12c>
  80c760:	8ca5883a 	add	r18,r17,r18
  80c764:	10ffffc4 	addi	r3,r2,-1
  80c768:	9440f136 	bltu	r18,r17,80cb30 <__udivdi3+0x4e8>
  80c76c:	9500f02e 	bgeu	r18,r20,80cb30 <__udivdi3+0x4e8>
  80c770:	10bfff84 	addi	r2,r2,-2
  80c774:	b00c943a 	slli	r6,r22,16
  80c778:	0007883a 	mov	r3,zero
  80c77c:	3084b03a 	or	r2,r6,r2
  80c780:	00005906 	br	80c8e8 <__udivdi3+0x2a0>
  80c784:	29c05636 	bltu	r5,r7,80c8e0 <__udivdi3+0x298>
  80c788:	00bfffd4 	movui	r2,65535
  80c78c:	11c0622e 	bgeu	r2,r7,80c918 <__udivdi3+0x2d0>
  80c790:	00804034 	movhi	r2,256
  80c794:	10bfffc4 	addi	r2,r2,-1
  80c798:	11c0ee36 	bltu	r2,r7,80cb54 <__udivdi3+0x50c>
  80c79c:	00800404 	movi	r2,16
  80c7a0:	3886d83a 	srl	r3,r7,r2
  80c7a4:	01002074 	movhi	r4,129
  80c7a8:	21106204 	addi	r4,r4,16776
  80c7ac:	20c7883a 	add	r3,r4,r3
  80c7b0:	18c00003 	ldbu	r3,0(r3)
  80c7b4:	05400804 	movi	r21,32
  80c7b8:	1885883a 	add	r2,r3,r2
  80c7bc:	a8abc83a 	sub	r21,r21,r2
  80c7c0:	a800621e 	bne	r21,zero,80c94c <__udivdi3+0x304>
  80c7c4:	3c00e936 	bltu	r7,r16,80cb6c <__udivdi3+0x524>
  80c7c8:	9985403a 	cmpgeu	r2,r19,r6
  80c7cc:	0007883a 	mov	r3,zero
  80c7d0:	00004506 	br	80c8e8 <__udivdi3+0x2a0>
  80c7d4:	3000041e 	bne	r6,zero,80c7e8 <__udivdi3+0x1a0>
  80c7d8:	000b883a 	mov	r5,zero
  80c7dc:	01000044 	movi	r4,1
  80c7e0:	080d1f00 	call	80d1f0 <__udivsi3>
  80c7e4:	1023883a 	mov	r17,r2
  80c7e8:	00bfffd4 	movui	r2,65535
  80c7ec:	14404e2e 	bgeu	r2,r17,80c928 <__udivdi3+0x2e0>
  80c7f0:	00804034 	movhi	r2,256
  80c7f4:	10bfffc4 	addi	r2,r2,-1
  80c7f8:	1440d836 	bltu	r2,r17,80cb5c <__udivdi3+0x514>
  80c7fc:	00800404 	movi	r2,16
  80c800:	8886d83a 	srl	r3,r17,r2
  80c804:	01002074 	movhi	r4,129
  80c808:	21106204 	addi	r4,r4,16776
  80c80c:	20c7883a 	add	r3,r4,r3
  80c810:	18c00003 	ldbu	r3,0(r3)
  80c814:	1885883a 	add	r2,r3,r2
  80c818:	00c00804 	movi	r3,32
  80c81c:	1887c83a 	sub	r3,r3,r2
  80c820:	18008f1e 	bne	r3,zero,80ca60 <__udivdi3+0x418>
  80c824:	882ad43a 	srli	r21,r17,16
  80c828:	8461c83a 	sub	r16,r16,r17
  80c82c:	8d3fffcc 	andi	r20,r17,65535
  80c830:	00c00044 	movi	r3,1
  80c834:	8009883a 	mov	r4,r16
  80c838:	a80b883a 	mov	r5,r21
  80c83c:	d8c00015 	stw	r3,0(sp)
  80c840:	080d2540 	call	80d254 <__umodsi3>
  80c844:	8009883a 	mov	r4,r16
  80c848:	a80b883a 	mov	r5,r21
  80c84c:	1027883a 	mov	r19,r2
  80c850:	080d1f00 	call	80d1f0 <__udivsi3>
  80c854:	9826943a 	slli	r19,r19,16
  80c858:	9008d43a 	srli	r4,r18,16
  80c85c:	1521383a 	mul	r16,r2,r20
  80c860:	102d883a 	mov	r22,r2
  80c864:	24c8b03a 	or	r4,r4,r19
  80c868:	d8c00017 	ldw	r3,0(sp)
  80c86c:	2400052e 	bgeu	r4,r16,80c884 <__udivdi3+0x23c>
  80c870:	2449883a 	add	r4,r4,r17
  80c874:	b0bfffc4 	addi	r2,r22,-1
  80c878:	24400136 	bltu	r4,r17,80c880 <__udivdi3+0x238>
  80c87c:	2400ca36 	bltu	r4,r16,80cba8 <__udivdi3+0x560>
  80c880:	102d883a 	mov	r22,r2
  80c884:	2421c83a 	sub	r16,r4,r16
  80c888:	a80b883a 	mov	r5,r21
  80c88c:	8009883a 	mov	r4,r16
  80c890:	d8c00015 	stw	r3,0(sp)
  80c894:	080d2540 	call	80d254 <__umodsi3>
  80c898:	1027883a 	mov	r19,r2
  80c89c:	a80b883a 	mov	r5,r21
  80c8a0:	8009883a 	mov	r4,r16
  80c8a4:	080d1f00 	call	80d1f0 <__udivsi3>
  80c8a8:	9826943a 	slli	r19,r19,16
  80c8ac:	1529383a 	mul	r20,r2,r20
  80c8b0:	94bfffcc 	andi	r18,r18,65535
  80c8b4:	94e4b03a 	or	r18,r18,r19
  80c8b8:	d8c00017 	ldw	r3,0(sp)
  80c8bc:	9500052e 	bgeu	r18,r20,80c8d4 <__udivdi3+0x28c>
  80c8c0:	8ca5883a 	add	r18,r17,r18
  80c8c4:	113fffc4 	addi	r4,r2,-1
  80c8c8:	94409736 	bltu	r18,r17,80cb28 <__udivdi3+0x4e0>
  80c8cc:	9500962e 	bgeu	r18,r20,80cb28 <__udivdi3+0x4e0>
  80c8d0:	10bfff84 	addi	r2,r2,-2
  80c8d4:	b00c943a 	slli	r6,r22,16
  80c8d8:	3084b03a 	or	r2,r6,r2
  80c8dc:	00000206 	br	80c8e8 <__udivdi3+0x2a0>
  80c8e0:	0007883a 	mov	r3,zero
  80c8e4:	0005883a 	mov	r2,zero
  80c8e8:	dfc00a17 	ldw	ra,40(sp)
  80c8ec:	df000917 	ldw	fp,36(sp)
  80c8f0:	ddc00817 	ldw	r23,32(sp)
  80c8f4:	dd800717 	ldw	r22,28(sp)
  80c8f8:	dd400617 	ldw	r21,24(sp)
  80c8fc:	dd000517 	ldw	r20,20(sp)
  80c900:	dcc00417 	ldw	r19,16(sp)
  80c904:	dc800317 	ldw	r18,12(sp)
  80c908:	dc400217 	ldw	r17,8(sp)
  80c90c:	dc000117 	ldw	r16,4(sp)
  80c910:	dec00b04 	addi	sp,sp,44
  80c914:	f800283a 	ret
  80c918:	00803fc4 	movi	r2,255
  80c91c:	11c5803a 	cmpltu	r2,r2,r7
  80c920:	100490fa 	slli	r2,r2,3
  80c924:	003f9e06 	br	80c7a0 <__alt_mem_onchip_mem+0xff78c7a0>
  80c928:	00803fc4 	movi	r2,255
  80c92c:	1445803a 	cmpltu	r2,r2,r17
  80c930:	100490fa 	slli	r2,r2,3
  80c934:	003fb206 	br	80c800 <__alt_mem_onchip_mem+0xff78c800>
  80c938:	00804034 	movhi	r2,256
  80c93c:	10bfffc4 	addi	r2,r2,-1
  80c940:	11808836 	bltu	r2,r6,80cb64 <__udivdi3+0x51c>
  80c944:	00800404 	movi	r2,16
  80c948:	003f5606 	br	80c6a4 <__alt_mem_onchip_mem+0xff78c6a4>
  80c94c:	30aed83a 	srl	r23,r6,r2
  80c950:	3d4e983a 	sll	r7,r7,r21
  80c954:	80acd83a 	srl	r22,r16,r2
  80c958:	9884d83a 	srl	r2,r19,r2
  80c95c:	3deeb03a 	or	r23,r7,r23
  80c960:	b824d43a 	srli	r18,r23,16
  80c964:	8560983a 	sll	r16,r16,r21
  80c968:	b009883a 	mov	r4,r22
  80c96c:	900b883a 	mov	r5,r18
  80c970:	3568983a 	sll	r20,r6,r21
  80c974:	1420b03a 	or	r16,r2,r16
  80c978:	080d2540 	call	80d254 <__umodsi3>
  80c97c:	b009883a 	mov	r4,r22
  80c980:	900b883a 	mov	r5,r18
  80c984:	1023883a 	mov	r17,r2
  80c988:	080d1f00 	call	80d1f0 <__udivsi3>
  80c98c:	8808943a 	slli	r4,r17,16
  80c990:	bf3fffcc 	andi	fp,r23,65535
  80c994:	8006d43a 	srli	r3,r16,16
  80c998:	e0a3383a 	mul	r17,fp,r2
  80c99c:	100d883a 	mov	r6,r2
  80c9a0:	1906b03a 	or	r3,r3,r4
  80c9a4:	1c40042e 	bgeu	r3,r17,80c9b8 <__udivdi3+0x370>
  80c9a8:	1dc7883a 	add	r3,r3,r23
  80c9ac:	10bfffc4 	addi	r2,r2,-1
  80c9b0:	1dc0752e 	bgeu	r3,r23,80cb88 <__udivdi3+0x540>
  80c9b4:	100d883a 	mov	r6,r2
  80c9b8:	1c63c83a 	sub	r17,r3,r17
  80c9bc:	900b883a 	mov	r5,r18
  80c9c0:	8809883a 	mov	r4,r17
  80c9c4:	d9800015 	stw	r6,0(sp)
  80c9c8:	080d2540 	call	80d254 <__umodsi3>
  80c9cc:	102d883a 	mov	r22,r2
  80c9d0:	8809883a 	mov	r4,r17
  80c9d4:	900b883a 	mov	r5,r18
  80c9d8:	080d1f00 	call	80d1f0 <__udivsi3>
  80c9dc:	b02c943a 	slli	r22,r22,16
  80c9e0:	e089383a 	mul	r4,fp,r2
  80c9e4:	843fffcc 	andi	r16,r16,65535
  80c9e8:	85a0b03a 	or	r16,r16,r22
  80c9ec:	d9800017 	ldw	r6,0(sp)
  80c9f0:	8100042e 	bgeu	r16,r4,80ca04 <__udivdi3+0x3bc>
  80c9f4:	85e1883a 	add	r16,r16,r23
  80c9f8:	10ffffc4 	addi	r3,r2,-1
  80c9fc:	85c05e2e 	bgeu	r16,r23,80cb78 <__udivdi3+0x530>
  80ca00:	1805883a 	mov	r2,r3
  80ca04:	300c943a 	slli	r6,r6,16
  80ca08:	a17fffcc 	andi	r5,r20,65535
  80ca0c:	a028d43a 	srli	r20,r20,16
  80ca10:	3084b03a 	or	r2,r6,r2
  80ca14:	10ffffcc 	andi	r3,r2,65535
  80ca18:	100cd43a 	srli	r6,r2,16
  80ca1c:	194f383a 	mul	r7,r3,r5
  80ca20:	1d07383a 	mul	r3,r3,r20
  80ca24:	314b383a 	mul	r5,r6,r5
  80ca28:	3810d43a 	srli	r8,r7,16
  80ca2c:	8121c83a 	sub	r16,r16,r4
  80ca30:	1947883a 	add	r3,r3,r5
  80ca34:	40c7883a 	add	r3,r8,r3
  80ca38:	350d383a 	mul	r6,r6,r20
  80ca3c:	1940022e 	bgeu	r3,r5,80ca48 <__udivdi3+0x400>
  80ca40:	01000074 	movhi	r4,1
  80ca44:	310d883a 	add	r6,r6,r4
  80ca48:	1828d43a 	srli	r20,r3,16
  80ca4c:	a18d883a 	add	r6,r20,r6
  80ca50:	81803e36 	bltu	r16,r6,80cb4c <__udivdi3+0x504>
  80ca54:	81803826 	beq	r16,r6,80cb38 <__udivdi3+0x4f0>
  80ca58:	0007883a 	mov	r3,zero
  80ca5c:	003fa206 	br	80c8e8 <__alt_mem_onchip_mem+0xff78c8e8>
  80ca60:	88e2983a 	sll	r17,r17,r3
  80ca64:	80a8d83a 	srl	r20,r16,r2
  80ca68:	80e0983a 	sll	r16,r16,r3
  80ca6c:	882ad43a 	srli	r21,r17,16
  80ca70:	9884d83a 	srl	r2,r19,r2
  80ca74:	a009883a 	mov	r4,r20
  80ca78:	a80b883a 	mov	r5,r21
  80ca7c:	142eb03a 	or	r23,r2,r16
  80ca80:	98e4983a 	sll	r18,r19,r3
  80ca84:	080d2540 	call	80d254 <__umodsi3>
  80ca88:	a009883a 	mov	r4,r20
  80ca8c:	a80b883a 	mov	r5,r21
  80ca90:	1021883a 	mov	r16,r2
  80ca94:	080d1f00 	call	80d1f0 <__udivsi3>
  80ca98:	1039883a 	mov	fp,r2
  80ca9c:	8d3fffcc 	andi	r20,r17,65535
  80caa0:	8020943a 	slli	r16,r16,16
  80caa4:	b804d43a 	srli	r2,r23,16
  80caa8:	a72d383a 	mul	r22,r20,fp
  80caac:	1404b03a 	or	r2,r2,r16
  80cab0:	1580062e 	bgeu	r2,r22,80cacc <__udivdi3+0x484>
  80cab4:	1445883a 	add	r2,r2,r17
  80cab8:	e0ffffc4 	addi	r3,fp,-1
  80cabc:	14403836 	bltu	r2,r17,80cba0 <__udivdi3+0x558>
  80cac0:	1580372e 	bgeu	r2,r22,80cba0 <__udivdi3+0x558>
  80cac4:	e73fff84 	addi	fp,fp,-2
  80cac8:	1445883a 	add	r2,r2,r17
  80cacc:	15adc83a 	sub	r22,r2,r22
  80cad0:	a80b883a 	mov	r5,r21
  80cad4:	b009883a 	mov	r4,r22
  80cad8:	080d2540 	call	80d254 <__umodsi3>
  80cadc:	1027883a 	mov	r19,r2
  80cae0:	b009883a 	mov	r4,r22
  80cae4:	a80b883a 	mov	r5,r21
  80cae8:	080d1f00 	call	80d1f0 <__udivsi3>
  80caec:	9826943a 	slli	r19,r19,16
  80caf0:	a0a1383a 	mul	r16,r20,r2
  80caf4:	b93fffcc 	andi	r4,r23,65535
  80caf8:	24c8b03a 	or	r4,r4,r19
  80cafc:	2400062e 	bgeu	r4,r16,80cb18 <__udivdi3+0x4d0>
  80cb00:	2449883a 	add	r4,r4,r17
  80cb04:	10ffffc4 	addi	r3,r2,-1
  80cb08:	24402336 	bltu	r4,r17,80cb98 <__udivdi3+0x550>
  80cb0c:	2400222e 	bgeu	r4,r16,80cb98 <__udivdi3+0x550>
  80cb10:	10bfff84 	addi	r2,r2,-2
  80cb14:	2449883a 	add	r4,r4,r17
  80cb18:	e038943a 	slli	fp,fp,16
  80cb1c:	2421c83a 	sub	r16,r4,r16
  80cb20:	e086b03a 	or	r3,fp,r2
  80cb24:	003f4306 	br	80c834 <__alt_mem_onchip_mem+0xff78c834>
  80cb28:	2005883a 	mov	r2,r4
  80cb2c:	003f6906 	br	80c8d4 <__alt_mem_onchip_mem+0xff78c8d4>
  80cb30:	1805883a 	mov	r2,r3
  80cb34:	003f0f06 	br	80c774 <__alt_mem_onchip_mem+0xff78c774>
  80cb38:	1806943a 	slli	r3,r3,16
  80cb3c:	9d66983a 	sll	r19,r19,r21
  80cb40:	39ffffcc 	andi	r7,r7,65535
  80cb44:	19c7883a 	add	r3,r3,r7
  80cb48:	98ffc32e 	bgeu	r19,r3,80ca58 <__alt_mem_onchip_mem+0xff78ca58>
  80cb4c:	10bfffc4 	addi	r2,r2,-1
  80cb50:	003fc106 	br	80ca58 <__alt_mem_onchip_mem+0xff78ca58>
  80cb54:	00800604 	movi	r2,24
  80cb58:	003f1106 	br	80c7a0 <__alt_mem_onchip_mem+0xff78c7a0>
  80cb5c:	00800604 	movi	r2,24
  80cb60:	003f2706 	br	80c800 <__alt_mem_onchip_mem+0xff78c800>
  80cb64:	00800604 	movi	r2,24
  80cb68:	003ece06 	br	80c6a4 <__alt_mem_onchip_mem+0xff78c6a4>
  80cb6c:	0007883a 	mov	r3,zero
  80cb70:	00800044 	movi	r2,1
  80cb74:	003f5c06 	br	80c8e8 <__alt_mem_onchip_mem+0xff78c8e8>
  80cb78:	813fa12e 	bgeu	r16,r4,80ca00 <__alt_mem_onchip_mem+0xff78ca00>
  80cb7c:	10bfff84 	addi	r2,r2,-2
  80cb80:	85e1883a 	add	r16,r16,r23
  80cb84:	003f9f06 	br	80ca04 <__alt_mem_onchip_mem+0xff78ca04>
  80cb88:	1c7f8a2e 	bgeu	r3,r17,80c9b4 <__alt_mem_onchip_mem+0xff78c9b4>
  80cb8c:	31bfff84 	addi	r6,r6,-2
  80cb90:	1dc7883a 	add	r3,r3,r23
  80cb94:	003f8806 	br	80c9b8 <__alt_mem_onchip_mem+0xff78c9b8>
  80cb98:	1805883a 	mov	r2,r3
  80cb9c:	003fde06 	br	80cb18 <__alt_mem_onchip_mem+0xff78cb18>
  80cba0:	1839883a 	mov	fp,r3
  80cba4:	003fc906 	br	80cacc <__alt_mem_onchip_mem+0xff78cacc>
  80cba8:	b5bfff84 	addi	r22,r22,-2
  80cbac:	2449883a 	add	r4,r4,r17
  80cbb0:	003f3406 	br	80c884 <__alt_mem_onchip_mem+0xff78c884>
  80cbb4:	b5bfff84 	addi	r22,r22,-2
  80cbb8:	1445883a 	add	r2,r2,r17
  80cbbc:	003edb06 	br	80c72c <__alt_mem_onchip_mem+0xff78c72c>

0080cbc0 <__umoddi3>:
  80cbc0:	defff404 	addi	sp,sp,-48
  80cbc4:	df000a15 	stw	fp,40(sp)
  80cbc8:	dc400315 	stw	r17,12(sp)
  80cbcc:	dc000215 	stw	r16,8(sp)
  80cbd0:	dfc00b15 	stw	ra,44(sp)
  80cbd4:	ddc00915 	stw	r23,36(sp)
  80cbd8:	dd800815 	stw	r22,32(sp)
  80cbdc:	dd400715 	stw	r21,28(sp)
  80cbe0:	dd000615 	stw	r20,24(sp)
  80cbe4:	dcc00515 	stw	r19,20(sp)
  80cbe8:	dc800415 	stw	r18,16(sp)
  80cbec:	2021883a 	mov	r16,r4
  80cbf0:	2823883a 	mov	r17,r5
  80cbf4:	2839883a 	mov	fp,r5
  80cbf8:	38003c1e 	bne	r7,zero,80ccec <__umoddi3+0x12c>
  80cbfc:	3027883a 	mov	r19,r6
  80cc00:	2029883a 	mov	r20,r4
  80cc04:	2980512e 	bgeu	r5,r6,80cd4c <__umoddi3+0x18c>
  80cc08:	00bfffd4 	movui	r2,65535
  80cc0c:	11809a36 	bltu	r2,r6,80ce78 <__umoddi3+0x2b8>
  80cc10:	01003fc4 	movi	r4,255
  80cc14:	2189803a 	cmpltu	r4,r4,r6
  80cc18:	200890fa 	slli	r4,r4,3
  80cc1c:	3104d83a 	srl	r2,r6,r4
  80cc20:	00c02074 	movhi	r3,129
  80cc24:	18d06204 	addi	r3,r3,16776
  80cc28:	1885883a 	add	r2,r3,r2
  80cc2c:	10c00003 	ldbu	r3,0(r2)
  80cc30:	00800804 	movi	r2,32
  80cc34:	1909883a 	add	r4,r3,r4
  80cc38:	1125c83a 	sub	r18,r2,r4
  80cc3c:	90000526 	beq	r18,zero,80cc54 <__umoddi3+0x94>
  80cc40:	8ca2983a 	sll	r17,r17,r18
  80cc44:	8108d83a 	srl	r4,r16,r4
  80cc48:	34a6983a 	sll	r19,r6,r18
  80cc4c:	84a8983a 	sll	r20,r16,r18
  80cc50:	2478b03a 	or	fp,r4,r17
  80cc54:	982ed43a 	srli	r23,r19,16
  80cc58:	e009883a 	mov	r4,fp
  80cc5c:	9dbfffcc 	andi	r22,r19,65535
  80cc60:	b80b883a 	mov	r5,r23
  80cc64:	080d2540 	call	80d254 <__umodsi3>
  80cc68:	e009883a 	mov	r4,fp
  80cc6c:	b80b883a 	mov	r5,r23
  80cc70:	102b883a 	mov	r21,r2
  80cc74:	080d1f00 	call	80d1f0 <__udivsi3>
  80cc78:	a806943a 	slli	r3,r21,16
  80cc7c:	a008d43a 	srli	r4,r20,16
  80cc80:	b085383a 	mul	r2,r22,r2
  80cc84:	20c8b03a 	or	r4,r4,r3
  80cc88:	2080032e 	bgeu	r4,r2,80cc98 <__umoddi3+0xd8>
  80cc8c:	24c9883a 	add	r4,r4,r19
  80cc90:	24c00136 	bltu	r4,r19,80cc98 <__umoddi3+0xd8>
  80cc94:	20811036 	bltu	r4,r2,80d0d8 <__umoddi3+0x518>
  80cc98:	20abc83a 	sub	r21,r4,r2
  80cc9c:	b80b883a 	mov	r5,r23
  80cca0:	a809883a 	mov	r4,r21
  80cca4:	080d2540 	call	80d254 <__umodsi3>
  80cca8:	1023883a 	mov	r17,r2
  80ccac:	b80b883a 	mov	r5,r23
  80ccb0:	a809883a 	mov	r4,r21
  80ccb4:	080d1f00 	call	80d1f0 <__udivsi3>
  80ccb8:	8822943a 	slli	r17,r17,16
  80ccbc:	b085383a 	mul	r2,r22,r2
  80ccc0:	a0ffffcc 	andi	r3,r20,65535
  80ccc4:	1c46b03a 	or	r3,r3,r17
  80ccc8:	1880042e 	bgeu	r3,r2,80ccdc <__umoddi3+0x11c>
  80cccc:	1cc7883a 	add	r3,r3,r19
  80ccd0:	1cc00236 	bltu	r3,r19,80ccdc <__umoddi3+0x11c>
  80ccd4:	1880012e 	bgeu	r3,r2,80ccdc <__umoddi3+0x11c>
  80ccd8:	1cc7883a 	add	r3,r3,r19
  80ccdc:	1885c83a 	sub	r2,r3,r2
  80cce0:	1484d83a 	srl	r2,r2,r18
  80cce4:	0007883a 	mov	r3,zero
  80cce8:	00004f06 	br	80ce28 <__umoddi3+0x268>
  80ccec:	29c04c36 	bltu	r5,r7,80ce20 <__umoddi3+0x260>
  80ccf0:	00bfffd4 	movui	r2,65535
  80ccf4:	11c0582e 	bgeu	r2,r7,80ce58 <__umoddi3+0x298>
  80ccf8:	00804034 	movhi	r2,256
  80ccfc:	10bfffc4 	addi	r2,r2,-1
  80cd00:	11c0e736 	bltu	r2,r7,80d0a0 <__umoddi3+0x4e0>
  80cd04:	01000404 	movi	r4,16
  80cd08:	3904d83a 	srl	r2,r7,r4
  80cd0c:	00c02074 	movhi	r3,129
  80cd10:	18d06204 	addi	r3,r3,16776
  80cd14:	1885883a 	add	r2,r3,r2
  80cd18:	14c00003 	ldbu	r19,0(r2)
  80cd1c:	00c00804 	movi	r3,32
  80cd20:	9927883a 	add	r19,r19,r4
  80cd24:	1ce9c83a 	sub	r20,r3,r19
  80cd28:	a000581e 	bne	r20,zero,80ce8c <__umoddi3+0x2cc>
  80cd2c:	3c400136 	bltu	r7,r17,80cd34 <__umoddi3+0x174>
  80cd30:	8180eb36 	bltu	r16,r6,80d0e0 <__umoddi3+0x520>
  80cd34:	8185c83a 	sub	r2,r16,r6
  80cd38:	89e3c83a 	sub	r17,r17,r7
  80cd3c:	8089803a 	cmpltu	r4,r16,r2
  80cd40:	8939c83a 	sub	fp,r17,r4
  80cd44:	e007883a 	mov	r3,fp
  80cd48:	00003706 	br	80ce28 <__umoddi3+0x268>
  80cd4c:	3000041e 	bne	r6,zero,80cd60 <__umoddi3+0x1a0>
  80cd50:	000b883a 	mov	r5,zero
  80cd54:	01000044 	movi	r4,1
  80cd58:	080d1f00 	call	80d1f0 <__udivsi3>
  80cd5c:	1027883a 	mov	r19,r2
  80cd60:	00bfffd4 	movui	r2,65535
  80cd64:	14c0402e 	bgeu	r2,r19,80ce68 <__umoddi3+0x2a8>
  80cd68:	00804034 	movhi	r2,256
  80cd6c:	10bfffc4 	addi	r2,r2,-1
  80cd70:	14c0cd36 	bltu	r2,r19,80d0a8 <__umoddi3+0x4e8>
  80cd74:	00800404 	movi	r2,16
  80cd78:	9886d83a 	srl	r3,r19,r2
  80cd7c:	01002074 	movhi	r4,129
  80cd80:	21106204 	addi	r4,r4,16776
  80cd84:	20c7883a 	add	r3,r4,r3
  80cd88:	18c00003 	ldbu	r3,0(r3)
  80cd8c:	1887883a 	add	r3,r3,r2
  80cd90:	00800804 	movi	r2,32
  80cd94:	10e5c83a 	sub	r18,r2,r3
  80cd98:	9000901e 	bne	r18,zero,80cfdc <__umoddi3+0x41c>
  80cd9c:	982cd43a 	srli	r22,r19,16
  80cda0:	8ce3c83a 	sub	r17,r17,r19
  80cda4:	9d7fffcc 	andi	r21,r19,65535
  80cda8:	b00b883a 	mov	r5,r22
  80cdac:	8809883a 	mov	r4,r17
  80cdb0:	080d2540 	call	80d254 <__umodsi3>
  80cdb4:	8809883a 	mov	r4,r17
  80cdb8:	b00b883a 	mov	r5,r22
  80cdbc:	1021883a 	mov	r16,r2
  80cdc0:	080d1f00 	call	80d1f0 <__udivsi3>
  80cdc4:	8006943a 	slli	r3,r16,16
  80cdc8:	a008d43a 	srli	r4,r20,16
  80cdcc:	1545383a 	mul	r2,r2,r21
  80cdd0:	20c8b03a 	or	r4,r4,r3
  80cdd4:	2080042e 	bgeu	r4,r2,80cde8 <__umoddi3+0x228>
  80cdd8:	24c9883a 	add	r4,r4,r19
  80cddc:	24c00236 	bltu	r4,r19,80cde8 <__umoddi3+0x228>
  80cde0:	2080012e 	bgeu	r4,r2,80cde8 <__umoddi3+0x228>
  80cde4:	24c9883a 	add	r4,r4,r19
  80cde8:	20a1c83a 	sub	r16,r4,r2
  80cdec:	b00b883a 	mov	r5,r22
  80cdf0:	8009883a 	mov	r4,r16
  80cdf4:	080d2540 	call	80d254 <__umodsi3>
  80cdf8:	1023883a 	mov	r17,r2
  80cdfc:	b00b883a 	mov	r5,r22
  80ce00:	8009883a 	mov	r4,r16
  80ce04:	080d1f00 	call	80d1f0 <__udivsi3>
  80ce08:	8822943a 	slli	r17,r17,16
  80ce0c:	1545383a 	mul	r2,r2,r21
  80ce10:	a53fffcc 	andi	r20,r20,65535
  80ce14:	a446b03a 	or	r3,r20,r17
  80ce18:	18bfb02e 	bgeu	r3,r2,80ccdc <__alt_mem_onchip_mem+0xff78ccdc>
  80ce1c:	003fab06 	br	80cccc <__alt_mem_onchip_mem+0xff78cccc>
  80ce20:	2005883a 	mov	r2,r4
  80ce24:	2807883a 	mov	r3,r5
  80ce28:	dfc00b17 	ldw	ra,44(sp)
  80ce2c:	df000a17 	ldw	fp,40(sp)
  80ce30:	ddc00917 	ldw	r23,36(sp)
  80ce34:	dd800817 	ldw	r22,32(sp)
  80ce38:	dd400717 	ldw	r21,28(sp)
  80ce3c:	dd000617 	ldw	r20,24(sp)
  80ce40:	dcc00517 	ldw	r19,20(sp)
  80ce44:	dc800417 	ldw	r18,16(sp)
  80ce48:	dc400317 	ldw	r17,12(sp)
  80ce4c:	dc000217 	ldw	r16,8(sp)
  80ce50:	dec00c04 	addi	sp,sp,48
  80ce54:	f800283a 	ret
  80ce58:	04c03fc4 	movi	r19,255
  80ce5c:	99c9803a 	cmpltu	r4,r19,r7
  80ce60:	200890fa 	slli	r4,r4,3
  80ce64:	003fa806 	br	80cd08 <__alt_mem_onchip_mem+0xff78cd08>
  80ce68:	00803fc4 	movi	r2,255
  80ce6c:	14c5803a 	cmpltu	r2,r2,r19
  80ce70:	100490fa 	slli	r2,r2,3
  80ce74:	003fc006 	br	80cd78 <__alt_mem_onchip_mem+0xff78cd78>
  80ce78:	00804034 	movhi	r2,256
  80ce7c:	10bfffc4 	addi	r2,r2,-1
  80ce80:	11808b36 	bltu	r2,r6,80d0b0 <__umoddi3+0x4f0>
  80ce84:	01000404 	movi	r4,16
  80ce88:	003f6406 	br	80cc1c <__alt_mem_onchip_mem+0xff78cc1c>
  80ce8c:	34c4d83a 	srl	r2,r6,r19
  80ce90:	3d0e983a 	sll	r7,r7,r20
  80ce94:	8cf8d83a 	srl	fp,r17,r19
  80ce98:	8d10983a 	sll	r8,r17,r20
  80ce9c:	38aab03a 	or	r21,r7,r2
  80cea0:	a82cd43a 	srli	r22,r21,16
  80cea4:	84e2d83a 	srl	r17,r16,r19
  80cea8:	e009883a 	mov	r4,fp
  80ceac:	b00b883a 	mov	r5,r22
  80ceb0:	8a22b03a 	or	r17,r17,r8
  80ceb4:	3524983a 	sll	r18,r6,r20
  80ceb8:	080d2540 	call	80d254 <__umodsi3>
  80cebc:	e009883a 	mov	r4,fp
  80cec0:	b00b883a 	mov	r5,r22
  80cec4:	102f883a 	mov	r23,r2
  80cec8:	080d1f00 	call	80d1f0 <__udivsi3>
  80cecc:	100d883a 	mov	r6,r2
  80ced0:	b808943a 	slli	r4,r23,16
  80ced4:	aa3fffcc 	andi	r8,r21,65535
  80ced8:	8804d43a 	srli	r2,r17,16
  80cedc:	41af383a 	mul	r23,r8,r6
  80cee0:	8520983a 	sll	r16,r16,r20
  80cee4:	1104b03a 	or	r2,r2,r4
  80cee8:	15c0042e 	bgeu	r2,r23,80cefc <__umoddi3+0x33c>
  80ceec:	1545883a 	add	r2,r2,r21
  80cef0:	30ffffc4 	addi	r3,r6,-1
  80cef4:	1540742e 	bgeu	r2,r21,80d0c8 <__umoddi3+0x508>
  80cef8:	180d883a 	mov	r6,r3
  80cefc:	15efc83a 	sub	r23,r2,r23
  80cf00:	b00b883a 	mov	r5,r22
  80cf04:	b809883a 	mov	r4,r23
  80cf08:	d9800115 	stw	r6,4(sp)
  80cf0c:	da000015 	stw	r8,0(sp)
  80cf10:	080d2540 	call	80d254 <__umodsi3>
  80cf14:	b00b883a 	mov	r5,r22
  80cf18:	b809883a 	mov	r4,r23
  80cf1c:	1039883a 	mov	fp,r2
  80cf20:	080d1f00 	call	80d1f0 <__udivsi3>
  80cf24:	da000017 	ldw	r8,0(sp)
  80cf28:	e038943a 	slli	fp,fp,16
  80cf2c:	100b883a 	mov	r5,r2
  80cf30:	4089383a 	mul	r4,r8,r2
  80cf34:	8a3fffcc 	andi	r8,r17,65535
  80cf38:	4710b03a 	or	r8,r8,fp
  80cf3c:	d9800117 	ldw	r6,4(sp)
  80cf40:	4100042e 	bgeu	r8,r4,80cf54 <__umoddi3+0x394>
  80cf44:	4551883a 	add	r8,r8,r21
  80cf48:	10bfffc4 	addi	r2,r2,-1
  80cf4c:	45405a2e 	bgeu	r8,r21,80d0b8 <__umoddi3+0x4f8>
  80cf50:	100b883a 	mov	r5,r2
  80cf54:	300c943a 	slli	r6,r6,16
  80cf58:	91ffffcc 	andi	r7,r18,65535
  80cf5c:	9004d43a 	srli	r2,r18,16
  80cf60:	314cb03a 	or	r6,r6,r5
  80cf64:	317fffcc 	andi	r5,r6,65535
  80cf68:	300cd43a 	srli	r6,r6,16
  80cf6c:	29d3383a 	mul	r9,r5,r7
  80cf70:	288b383a 	mul	r5,r5,r2
  80cf74:	31cf383a 	mul	r7,r6,r7
  80cf78:	4806d43a 	srli	r3,r9,16
  80cf7c:	4111c83a 	sub	r8,r8,r4
  80cf80:	29cb883a 	add	r5,r5,r7
  80cf84:	194b883a 	add	r5,r3,r5
  80cf88:	3085383a 	mul	r2,r6,r2
  80cf8c:	29c0022e 	bgeu	r5,r7,80cf98 <__umoddi3+0x3d8>
  80cf90:	00c00074 	movhi	r3,1
  80cf94:	10c5883a 	add	r2,r2,r3
  80cf98:	2808d43a 	srli	r4,r5,16
  80cf9c:	280a943a 	slli	r5,r5,16
  80cfa0:	4a7fffcc 	andi	r9,r9,65535
  80cfa4:	2085883a 	add	r2,r4,r2
  80cfa8:	2a4b883a 	add	r5,r5,r9
  80cfac:	40803636 	bltu	r8,r2,80d088 <__umoddi3+0x4c8>
  80cfb0:	40804d26 	beq	r8,r2,80d0e8 <__umoddi3+0x528>
  80cfb4:	4089c83a 	sub	r4,r8,r2
  80cfb8:	280f883a 	mov	r7,r5
  80cfbc:	81cfc83a 	sub	r7,r16,r7
  80cfc0:	81c7803a 	cmpltu	r3,r16,r7
  80cfc4:	20c7c83a 	sub	r3,r4,r3
  80cfc8:	1cc4983a 	sll	r2,r3,r19
  80cfcc:	3d0ed83a 	srl	r7,r7,r20
  80cfd0:	1d06d83a 	srl	r3,r3,r20
  80cfd4:	11c4b03a 	or	r2,r2,r7
  80cfd8:	003f9306 	br	80ce28 <__alt_mem_onchip_mem+0xff78ce28>
  80cfdc:	9ca6983a 	sll	r19,r19,r18
  80cfe0:	88e8d83a 	srl	r20,r17,r3
  80cfe4:	80c4d83a 	srl	r2,r16,r3
  80cfe8:	982cd43a 	srli	r22,r19,16
  80cfec:	8ca2983a 	sll	r17,r17,r18
  80cff0:	a009883a 	mov	r4,r20
  80cff4:	b00b883a 	mov	r5,r22
  80cff8:	1478b03a 	or	fp,r2,r17
  80cffc:	080d2540 	call	80d254 <__umodsi3>
  80d000:	a009883a 	mov	r4,r20
  80d004:	b00b883a 	mov	r5,r22
  80d008:	1023883a 	mov	r17,r2
  80d00c:	080d1f00 	call	80d1f0 <__udivsi3>
  80d010:	9d7fffcc 	andi	r21,r19,65535
  80d014:	880a943a 	slli	r5,r17,16
  80d018:	e008d43a 	srli	r4,fp,16
  80d01c:	a885383a 	mul	r2,r21,r2
  80d020:	84a8983a 	sll	r20,r16,r18
  80d024:	2148b03a 	or	r4,r4,r5
  80d028:	2080042e 	bgeu	r4,r2,80d03c <__umoddi3+0x47c>
  80d02c:	24c9883a 	add	r4,r4,r19
  80d030:	24c00236 	bltu	r4,r19,80d03c <__umoddi3+0x47c>
  80d034:	2080012e 	bgeu	r4,r2,80d03c <__umoddi3+0x47c>
  80d038:	24c9883a 	add	r4,r4,r19
  80d03c:	20a3c83a 	sub	r17,r4,r2
  80d040:	b00b883a 	mov	r5,r22
  80d044:	8809883a 	mov	r4,r17
  80d048:	080d2540 	call	80d254 <__umodsi3>
  80d04c:	102f883a 	mov	r23,r2
  80d050:	8809883a 	mov	r4,r17
  80d054:	b00b883a 	mov	r5,r22
  80d058:	080d1f00 	call	80d1f0 <__udivsi3>
  80d05c:	b82e943a 	slli	r23,r23,16
  80d060:	a885383a 	mul	r2,r21,r2
  80d064:	e13fffcc 	andi	r4,fp,65535
  80d068:	25c8b03a 	or	r4,r4,r23
  80d06c:	2080042e 	bgeu	r4,r2,80d080 <__umoddi3+0x4c0>
  80d070:	24c9883a 	add	r4,r4,r19
  80d074:	24c00236 	bltu	r4,r19,80d080 <__umoddi3+0x4c0>
  80d078:	2080012e 	bgeu	r4,r2,80d080 <__umoddi3+0x4c0>
  80d07c:	24c9883a 	add	r4,r4,r19
  80d080:	20a3c83a 	sub	r17,r4,r2
  80d084:	003f4806 	br	80cda8 <__alt_mem_onchip_mem+0xff78cda8>
  80d088:	2c8fc83a 	sub	r7,r5,r18
  80d08c:	1545c83a 	sub	r2,r2,r21
  80d090:	29cb803a 	cmpltu	r5,r5,r7
  80d094:	1145c83a 	sub	r2,r2,r5
  80d098:	4089c83a 	sub	r4,r8,r2
  80d09c:	003fc706 	br	80cfbc <__alt_mem_onchip_mem+0xff78cfbc>
  80d0a0:	01000604 	movi	r4,24
  80d0a4:	003f1806 	br	80cd08 <__alt_mem_onchip_mem+0xff78cd08>
  80d0a8:	00800604 	movi	r2,24
  80d0ac:	003f3206 	br	80cd78 <__alt_mem_onchip_mem+0xff78cd78>
  80d0b0:	01000604 	movi	r4,24
  80d0b4:	003ed906 	br	80cc1c <__alt_mem_onchip_mem+0xff78cc1c>
  80d0b8:	413fa52e 	bgeu	r8,r4,80cf50 <__alt_mem_onchip_mem+0xff78cf50>
  80d0bc:	297fff84 	addi	r5,r5,-2
  80d0c0:	4551883a 	add	r8,r8,r21
  80d0c4:	003fa306 	br	80cf54 <__alt_mem_onchip_mem+0xff78cf54>
  80d0c8:	15ff8b2e 	bgeu	r2,r23,80cef8 <__alt_mem_onchip_mem+0xff78cef8>
  80d0cc:	31bfff84 	addi	r6,r6,-2
  80d0d0:	1545883a 	add	r2,r2,r21
  80d0d4:	003f8906 	br	80cefc <__alt_mem_onchip_mem+0xff78cefc>
  80d0d8:	24c9883a 	add	r4,r4,r19
  80d0dc:	003eee06 	br	80cc98 <__alt_mem_onchip_mem+0xff78cc98>
  80d0e0:	8005883a 	mov	r2,r16
  80d0e4:	003f1706 	br	80cd44 <__alt_mem_onchip_mem+0xff78cd44>
  80d0e8:	817fe736 	bltu	r16,r5,80d088 <__alt_mem_onchip_mem+0xff78d088>
  80d0ec:	280f883a 	mov	r7,r5
  80d0f0:	0009883a 	mov	r4,zero
  80d0f4:	003fb106 	br	80cfbc <__alt_mem_onchip_mem+0xff78cfbc>

0080d0f8 <__divsi3>:
  80d0f8:	20001b16 	blt	r4,zero,80d168 <__divsi3+0x70>
  80d0fc:	000f883a 	mov	r7,zero
  80d100:	28001616 	blt	r5,zero,80d15c <__divsi3+0x64>
  80d104:	200d883a 	mov	r6,r4
  80d108:	29001a2e 	bgeu	r5,r4,80d174 <__divsi3+0x7c>
  80d10c:	00800804 	movi	r2,32
  80d110:	00c00044 	movi	r3,1
  80d114:	00000106 	br	80d11c <__divsi3+0x24>
  80d118:	10000d26 	beq	r2,zero,80d150 <__divsi3+0x58>
  80d11c:	294b883a 	add	r5,r5,r5
  80d120:	10bfffc4 	addi	r2,r2,-1
  80d124:	18c7883a 	add	r3,r3,r3
  80d128:	293ffb36 	bltu	r5,r4,80d118 <__alt_mem_onchip_mem+0xff78d118>
  80d12c:	0005883a 	mov	r2,zero
  80d130:	18000726 	beq	r3,zero,80d150 <__divsi3+0x58>
  80d134:	0005883a 	mov	r2,zero
  80d138:	31400236 	bltu	r6,r5,80d144 <__divsi3+0x4c>
  80d13c:	314dc83a 	sub	r6,r6,r5
  80d140:	10c4b03a 	or	r2,r2,r3
  80d144:	1806d07a 	srli	r3,r3,1
  80d148:	280ad07a 	srli	r5,r5,1
  80d14c:	183ffa1e 	bne	r3,zero,80d138 <__alt_mem_onchip_mem+0xff78d138>
  80d150:	38000126 	beq	r7,zero,80d158 <__divsi3+0x60>
  80d154:	0085c83a 	sub	r2,zero,r2
  80d158:	f800283a 	ret
  80d15c:	014bc83a 	sub	r5,zero,r5
  80d160:	39c0005c 	xori	r7,r7,1
  80d164:	003fe706 	br	80d104 <__alt_mem_onchip_mem+0xff78d104>
  80d168:	0109c83a 	sub	r4,zero,r4
  80d16c:	01c00044 	movi	r7,1
  80d170:	003fe306 	br	80d100 <__alt_mem_onchip_mem+0xff78d100>
  80d174:	00c00044 	movi	r3,1
  80d178:	003fee06 	br	80d134 <__alt_mem_onchip_mem+0xff78d134>

0080d17c <__modsi3>:
  80d17c:	20001716 	blt	r4,zero,80d1dc <__modsi3+0x60>
  80d180:	000f883a 	mov	r7,zero
  80d184:	2005883a 	mov	r2,r4
  80d188:	28001216 	blt	r5,zero,80d1d4 <__modsi3+0x58>
  80d18c:	2900162e 	bgeu	r5,r4,80d1e8 <__modsi3+0x6c>
  80d190:	01800804 	movi	r6,32
  80d194:	00c00044 	movi	r3,1
  80d198:	00000106 	br	80d1a0 <__modsi3+0x24>
  80d19c:	30000a26 	beq	r6,zero,80d1c8 <__modsi3+0x4c>
  80d1a0:	294b883a 	add	r5,r5,r5
  80d1a4:	31bfffc4 	addi	r6,r6,-1
  80d1a8:	18c7883a 	add	r3,r3,r3
  80d1ac:	293ffb36 	bltu	r5,r4,80d19c <__alt_mem_onchip_mem+0xff78d19c>
  80d1b0:	18000526 	beq	r3,zero,80d1c8 <__modsi3+0x4c>
  80d1b4:	1806d07a 	srli	r3,r3,1
  80d1b8:	11400136 	bltu	r2,r5,80d1c0 <__modsi3+0x44>
  80d1bc:	1145c83a 	sub	r2,r2,r5
  80d1c0:	280ad07a 	srli	r5,r5,1
  80d1c4:	183ffb1e 	bne	r3,zero,80d1b4 <__alt_mem_onchip_mem+0xff78d1b4>
  80d1c8:	38000126 	beq	r7,zero,80d1d0 <__modsi3+0x54>
  80d1cc:	0085c83a 	sub	r2,zero,r2
  80d1d0:	f800283a 	ret
  80d1d4:	014bc83a 	sub	r5,zero,r5
  80d1d8:	003fec06 	br	80d18c <__alt_mem_onchip_mem+0xff78d18c>
  80d1dc:	0109c83a 	sub	r4,zero,r4
  80d1e0:	01c00044 	movi	r7,1
  80d1e4:	003fe706 	br	80d184 <__alt_mem_onchip_mem+0xff78d184>
  80d1e8:	00c00044 	movi	r3,1
  80d1ec:	003ff106 	br	80d1b4 <__alt_mem_onchip_mem+0xff78d1b4>

0080d1f0 <__udivsi3>:
  80d1f0:	200d883a 	mov	r6,r4
  80d1f4:	2900152e 	bgeu	r5,r4,80d24c <__udivsi3+0x5c>
  80d1f8:	28001416 	blt	r5,zero,80d24c <__udivsi3+0x5c>
  80d1fc:	00800804 	movi	r2,32
  80d200:	00c00044 	movi	r3,1
  80d204:	00000206 	br	80d210 <__udivsi3+0x20>
  80d208:	10000e26 	beq	r2,zero,80d244 <__udivsi3+0x54>
  80d20c:	28000516 	blt	r5,zero,80d224 <__udivsi3+0x34>
  80d210:	294b883a 	add	r5,r5,r5
  80d214:	10bfffc4 	addi	r2,r2,-1
  80d218:	18c7883a 	add	r3,r3,r3
  80d21c:	293ffa36 	bltu	r5,r4,80d208 <__alt_mem_onchip_mem+0xff78d208>
  80d220:	18000826 	beq	r3,zero,80d244 <__udivsi3+0x54>
  80d224:	0005883a 	mov	r2,zero
  80d228:	31400236 	bltu	r6,r5,80d234 <__udivsi3+0x44>
  80d22c:	314dc83a 	sub	r6,r6,r5
  80d230:	10c4b03a 	or	r2,r2,r3
  80d234:	1806d07a 	srli	r3,r3,1
  80d238:	280ad07a 	srli	r5,r5,1
  80d23c:	183ffa1e 	bne	r3,zero,80d228 <__alt_mem_onchip_mem+0xff78d228>
  80d240:	f800283a 	ret
  80d244:	0005883a 	mov	r2,zero
  80d248:	f800283a 	ret
  80d24c:	00c00044 	movi	r3,1
  80d250:	003ff406 	br	80d224 <__alt_mem_onchip_mem+0xff78d224>

0080d254 <__umodsi3>:
  80d254:	2005883a 	mov	r2,r4
  80d258:	2900122e 	bgeu	r5,r4,80d2a4 <__umodsi3+0x50>
  80d25c:	28001116 	blt	r5,zero,80d2a4 <__umodsi3+0x50>
  80d260:	01800804 	movi	r6,32
  80d264:	00c00044 	movi	r3,1
  80d268:	00000206 	br	80d274 <__umodsi3+0x20>
  80d26c:	30000c26 	beq	r6,zero,80d2a0 <__umodsi3+0x4c>
  80d270:	28000516 	blt	r5,zero,80d288 <__umodsi3+0x34>
  80d274:	294b883a 	add	r5,r5,r5
  80d278:	31bfffc4 	addi	r6,r6,-1
  80d27c:	18c7883a 	add	r3,r3,r3
  80d280:	293ffa36 	bltu	r5,r4,80d26c <__alt_mem_onchip_mem+0xff78d26c>
  80d284:	18000626 	beq	r3,zero,80d2a0 <__umodsi3+0x4c>
  80d288:	1806d07a 	srli	r3,r3,1
  80d28c:	11400136 	bltu	r2,r5,80d294 <__umodsi3+0x40>
  80d290:	1145c83a 	sub	r2,r2,r5
  80d294:	280ad07a 	srli	r5,r5,1
  80d298:	183ffb1e 	bne	r3,zero,80d288 <__alt_mem_onchip_mem+0xff78d288>
  80d29c:	f800283a 	ret
  80d2a0:	f800283a 	ret
  80d2a4:	00c00044 	movi	r3,1
  80d2a8:	003ff706 	br	80d288 <__alt_mem_onchip_mem+0xff78d288>

0080d2ac <__adddf3>:
  80d2ac:	02c00434 	movhi	r11,16
  80d2b0:	5affffc4 	addi	r11,r11,-1
  80d2b4:	2806d7fa 	srli	r3,r5,31
  80d2b8:	2ad4703a 	and	r10,r5,r11
  80d2bc:	3ad2703a 	and	r9,r7,r11
  80d2c0:	3804d53a 	srli	r2,r7,20
  80d2c4:	3018d77a 	srli	r12,r6,29
  80d2c8:	280ad53a 	srli	r5,r5,20
  80d2cc:	501490fa 	slli	r10,r10,3
  80d2d0:	2010d77a 	srli	r8,r4,29
  80d2d4:	481290fa 	slli	r9,r9,3
  80d2d8:	380ed7fa 	srli	r7,r7,31
  80d2dc:	defffb04 	addi	sp,sp,-20
  80d2e0:	dc800215 	stw	r18,8(sp)
  80d2e4:	dc400115 	stw	r17,4(sp)
  80d2e8:	dc000015 	stw	r16,0(sp)
  80d2ec:	dfc00415 	stw	ra,16(sp)
  80d2f0:	dcc00315 	stw	r19,12(sp)
  80d2f4:	1c803fcc 	andi	r18,r3,255
  80d2f8:	2c01ffcc 	andi	r16,r5,2047
  80d2fc:	5210b03a 	or	r8,r10,r8
  80d300:	202290fa 	slli	r17,r4,3
  80d304:	1081ffcc 	andi	r2,r2,2047
  80d308:	4b12b03a 	or	r9,r9,r12
  80d30c:	300c90fa 	slli	r6,r6,3
  80d310:	91c07526 	beq	r18,r7,80d4e8 <__adddf3+0x23c>
  80d314:	8087c83a 	sub	r3,r16,r2
  80d318:	00c0ab0e 	bge	zero,r3,80d5c8 <__adddf3+0x31c>
  80d31c:	10002a1e 	bne	r2,zero,80d3c8 <__adddf3+0x11c>
  80d320:	4984b03a 	or	r2,r9,r6
  80d324:	1000961e 	bne	r2,zero,80d580 <__adddf3+0x2d4>
  80d328:	888001cc 	andi	r2,r17,7
  80d32c:	10000726 	beq	r2,zero,80d34c <__adddf3+0xa0>
  80d330:	888003cc 	andi	r2,r17,15
  80d334:	00c00104 	movi	r3,4
  80d338:	10c00426 	beq	r2,r3,80d34c <__adddf3+0xa0>
  80d33c:	88c7883a 	add	r3,r17,r3
  80d340:	1c63803a 	cmpltu	r17,r3,r17
  80d344:	4451883a 	add	r8,r8,r17
  80d348:	1823883a 	mov	r17,r3
  80d34c:	4080202c 	andhi	r2,r8,128
  80d350:	10005926 	beq	r2,zero,80d4b8 <__adddf3+0x20c>
  80d354:	84000044 	addi	r16,r16,1
  80d358:	0081ffc4 	movi	r2,2047
  80d35c:	8080ba26 	beq	r16,r2,80d648 <__adddf3+0x39c>
  80d360:	00bfe034 	movhi	r2,65408
  80d364:	10bfffc4 	addi	r2,r2,-1
  80d368:	4090703a 	and	r8,r8,r2
  80d36c:	4004977a 	slli	r2,r8,29
  80d370:	4010927a 	slli	r8,r8,9
  80d374:	8822d0fa 	srli	r17,r17,3
  80d378:	8401ffcc 	andi	r16,r16,2047
  80d37c:	4010d33a 	srli	r8,r8,12
  80d380:	9007883a 	mov	r3,r18
  80d384:	1444b03a 	or	r2,r2,r17
  80d388:	8401ffcc 	andi	r16,r16,2047
  80d38c:	8020953a 	slli	r16,r16,20
  80d390:	18c03fcc 	andi	r3,r3,255
  80d394:	01000434 	movhi	r4,16
  80d398:	213fffc4 	addi	r4,r4,-1
  80d39c:	180697fa 	slli	r3,r3,31
  80d3a0:	4110703a 	and	r8,r8,r4
  80d3a4:	4410b03a 	or	r8,r8,r16
  80d3a8:	40c6b03a 	or	r3,r8,r3
  80d3ac:	dfc00417 	ldw	ra,16(sp)
  80d3b0:	dcc00317 	ldw	r19,12(sp)
  80d3b4:	dc800217 	ldw	r18,8(sp)
  80d3b8:	dc400117 	ldw	r17,4(sp)
  80d3bc:	dc000017 	ldw	r16,0(sp)
  80d3c0:	dec00504 	addi	sp,sp,20
  80d3c4:	f800283a 	ret
  80d3c8:	0081ffc4 	movi	r2,2047
  80d3cc:	80bfd626 	beq	r16,r2,80d328 <__alt_mem_onchip_mem+0xff78d328>
  80d3d0:	4a402034 	orhi	r9,r9,128
  80d3d4:	00800e04 	movi	r2,56
  80d3d8:	10c09f16 	blt	r2,r3,80d658 <__adddf3+0x3ac>
  80d3dc:	008007c4 	movi	r2,31
  80d3e0:	10c0c216 	blt	r2,r3,80d6ec <__adddf3+0x440>
  80d3e4:	00800804 	movi	r2,32
  80d3e8:	10c5c83a 	sub	r2,r2,r3
  80d3ec:	488a983a 	sll	r5,r9,r2
  80d3f0:	30c8d83a 	srl	r4,r6,r3
  80d3f4:	3084983a 	sll	r2,r6,r2
  80d3f8:	48c6d83a 	srl	r3,r9,r3
  80d3fc:	290cb03a 	or	r6,r5,r4
  80d400:	1004c03a 	cmpne	r2,r2,zero
  80d404:	308cb03a 	or	r6,r6,r2
  80d408:	898dc83a 	sub	r6,r17,r6
  80d40c:	89a3803a 	cmpltu	r17,r17,r6
  80d410:	40d1c83a 	sub	r8,r8,r3
  80d414:	4451c83a 	sub	r8,r8,r17
  80d418:	3023883a 	mov	r17,r6
  80d41c:	4080202c 	andhi	r2,r8,128
  80d420:	10002326 	beq	r2,zero,80d4b0 <__adddf3+0x204>
  80d424:	04c02034 	movhi	r19,128
  80d428:	9cffffc4 	addi	r19,r19,-1
  80d42c:	44e6703a 	and	r19,r8,r19
  80d430:	98007626 	beq	r19,zero,80d60c <__adddf3+0x360>
  80d434:	9809883a 	mov	r4,r19
  80d438:	080f8b00 	call	80f8b0 <__clzsi2>
  80d43c:	10fffe04 	addi	r3,r2,-8
  80d440:	010007c4 	movi	r4,31
  80d444:	20c07716 	blt	r4,r3,80d624 <__adddf3+0x378>
  80d448:	00800804 	movi	r2,32
  80d44c:	10c5c83a 	sub	r2,r2,r3
  80d450:	8884d83a 	srl	r2,r17,r2
  80d454:	98d0983a 	sll	r8,r19,r3
  80d458:	88e2983a 	sll	r17,r17,r3
  80d45c:	1204b03a 	or	r2,r2,r8
  80d460:	1c007416 	blt	r3,r16,80d634 <__adddf3+0x388>
  80d464:	1c21c83a 	sub	r16,r3,r16
  80d468:	82000044 	addi	r8,r16,1
  80d46c:	00c007c4 	movi	r3,31
  80d470:	1a009116 	blt	r3,r8,80d6b8 <__adddf3+0x40c>
  80d474:	00c00804 	movi	r3,32
  80d478:	1a07c83a 	sub	r3,r3,r8
  80d47c:	8a08d83a 	srl	r4,r17,r8
  80d480:	88e2983a 	sll	r17,r17,r3
  80d484:	10c6983a 	sll	r3,r2,r3
  80d488:	1210d83a 	srl	r8,r2,r8
  80d48c:	8804c03a 	cmpne	r2,r17,zero
  80d490:	1906b03a 	or	r3,r3,r4
  80d494:	18a2b03a 	or	r17,r3,r2
  80d498:	0021883a 	mov	r16,zero
  80d49c:	003fa206 	br	80d328 <__alt_mem_onchip_mem+0xff78d328>
  80d4a0:	1890b03a 	or	r8,r3,r2
  80d4a4:	40017d26 	beq	r8,zero,80da9c <__adddf3+0x7f0>
  80d4a8:	1011883a 	mov	r8,r2
  80d4ac:	1823883a 	mov	r17,r3
  80d4b0:	888001cc 	andi	r2,r17,7
  80d4b4:	103f9e1e 	bne	r2,zero,80d330 <__alt_mem_onchip_mem+0xff78d330>
  80d4b8:	4004977a 	slli	r2,r8,29
  80d4bc:	8822d0fa 	srli	r17,r17,3
  80d4c0:	4010d0fa 	srli	r8,r8,3
  80d4c4:	9007883a 	mov	r3,r18
  80d4c8:	1444b03a 	or	r2,r2,r17
  80d4cc:	0101ffc4 	movi	r4,2047
  80d4d0:	81002426 	beq	r16,r4,80d564 <__adddf3+0x2b8>
  80d4d4:	8120703a 	and	r16,r16,r4
  80d4d8:	01000434 	movhi	r4,16
  80d4dc:	213fffc4 	addi	r4,r4,-1
  80d4e0:	4110703a 	and	r8,r8,r4
  80d4e4:	003fa806 	br	80d388 <__alt_mem_onchip_mem+0xff78d388>
  80d4e8:	8089c83a 	sub	r4,r16,r2
  80d4ec:	01005e0e 	bge	zero,r4,80d668 <__adddf3+0x3bc>
  80d4f0:	10002b26 	beq	r2,zero,80d5a0 <__adddf3+0x2f4>
  80d4f4:	0081ffc4 	movi	r2,2047
  80d4f8:	80bf8b26 	beq	r16,r2,80d328 <__alt_mem_onchip_mem+0xff78d328>
  80d4fc:	4a402034 	orhi	r9,r9,128
  80d500:	00800e04 	movi	r2,56
  80d504:	1100a40e 	bge	r2,r4,80d798 <__adddf3+0x4ec>
  80d508:	498cb03a 	or	r6,r9,r6
  80d50c:	300ac03a 	cmpne	r5,r6,zero
  80d510:	0013883a 	mov	r9,zero
  80d514:	2c4b883a 	add	r5,r5,r17
  80d518:	2c63803a 	cmpltu	r17,r5,r17
  80d51c:	4a11883a 	add	r8,r9,r8
  80d520:	8a11883a 	add	r8,r17,r8
  80d524:	2823883a 	mov	r17,r5
  80d528:	4080202c 	andhi	r2,r8,128
  80d52c:	103fe026 	beq	r2,zero,80d4b0 <__alt_mem_onchip_mem+0xff78d4b0>
  80d530:	84000044 	addi	r16,r16,1
  80d534:	0081ffc4 	movi	r2,2047
  80d538:	8080d226 	beq	r16,r2,80d884 <__adddf3+0x5d8>
  80d53c:	00bfe034 	movhi	r2,65408
  80d540:	10bfffc4 	addi	r2,r2,-1
  80d544:	4090703a 	and	r8,r8,r2
  80d548:	880ad07a 	srli	r5,r17,1
  80d54c:	400897fa 	slli	r4,r8,31
  80d550:	88c0004c 	andi	r3,r17,1
  80d554:	28e2b03a 	or	r17,r5,r3
  80d558:	4010d07a 	srli	r8,r8,1
  80d55c:	2462b03a 	or	r17,r4,r17
  80d560:	003f7106 	br	80d328 <__alt_mem_onchip_mem+0xff78d328>
  80d564:	4088b03a 	or	r4,r8,r2
  80d568:	20014526 	beq	r4,zero,80da80 <__adddf3+0x7d4>
  80d56c:	01000434 	movhi	r4,16
  80d570:	42000234 	orhi	r8,r8,8
  80d574:	213fffc4 	addi	r4,r4,-1
  80d578:	4110703a 	and	r8,r8,r4
  80d57c:	003f8206 	br	80d388 <__alt_mem_onchip_mem+0xff78d388>
  80d580:	18ffffc4 	addi	r3,r3,-1
  80d584:	1800491e 	bne	r3,zero,80d6ac <__adddf3+0x400>
  80d588:	898bc83a 	sub	r5,r17,r6
  80d58c:	8963803a 	cmpltu	r17,r17,r5
  80d590:	4251c83a 	sub	r8,r8,r9
  80d594:	4451c83a 	sub	r8,r8,r17
  80d598:	2823883a 	mov	r17,r5
  80d59c:	003f9f06 	br	80d41c <__alt_mem_onchip_mem+0xff78d41c>
  80d5a0:	4984b03a 	or	r2,r9,r6
  80d5a4:	103f6026 	beq	r2,zero,80d328 <__alt_mem_onchip_mem+0xff78d328>
  80d5a8:	213fffc4 	addi	r4,r4,-1
  80d5ac:	2000931e 	bne	r4,zero,80d7fc <__adddf3+0x550>
  80d5b0:	898d883a 	add	r6,r17,r6
  80d5b4:	3463803a 	cmpltu	r17,r6,r17
  80d5b8:	4251883a 	add	r8,r8,r9
  80d5bc:	8a11883a 	add	r8,r17,r8
  80d5c0:	3023883a 	mov	r17,r6
  80d5c4:	003fd806 	br	80d528 <__alt_mem_onchip_mem+0xff78d528>
  80d5c8:	1800541e 	bne	r3,zero,80d71c <__adddf3+0x470>
  80d5cc:	80800044 	addi	r2,r16,1
  80d5d0:	1081ffcc 	andi	r2,r2,2047
  80d5d4:	00c00044 	movi	r3,1
  80d5d8:	1880a00e 	bge	r3,r2,80d85c <__adddf3+0x5b0>
  80d5dc:	8989c83a 	sub	r4,r17,r6
  80d5e0:	8905803a 	cmpltu	r2,r17,r4
  80d5e4:	4267c83a 	sub	r19,r8,r9
  80d5e8:	98a7c83a 	sub	r19,r19,r2
  80d5ec:	9880202c 	andhi	r2,r19,128
  80d5f0:	10006326 	beq	r2,zero,80d780 <__adddf3+0x4d4>
  80d5f4:	3463c83a 	sub	r17,r6,r17
  80d5f8:	4a07c83a 	sub	r3,r9,r8
  80d5fc:	344d803a 	cmpltu	r6,r6,r17
  80d600:	19a7c83a 	sub	r19,r3,r6
  80d604:	3825883a 	mov	r18,r7
  80d608:	983f8a1e 	bne	r19,zero,80d434 <__alt_mem_onchip_mem+0xff78d434>
  80d60c:	8809883a 	mov	r4,r17
  80d610:	080f8b00 	call	80f8b0 <__clzsi2>
  80d614:	10800804 	addi	r2,r2,32
  80d618:	10fffe04 	addi	r3,r2,-8
  80d61c:	010007c4 	movi	r4,31
  80d620:	20ff890e 	bge	r4,r3,80d448 <__alt_mem_onchip_mem+0xff78d448>
  80d624:	10bff604 	addi	r2,r2,-40
  80d628:	8884983a 	sll	r2,r17,r2
  80d62c:	0023883a 	mov	r17,zero
  80d630:	1c3f8c0e 	bge	r3,r16,80d464 <__alt_mem_onchip_mem+0xff78d464>
  80d634:	023fe034 	movhi	r8,65408
  80d638:	423fffc4 	addi	r8,r8,-1
  80d63c:	80e1c83a 	sub	r16,r16,r3
  80d640:	1210703a 	and	r8,r2,r8
  80d644:	003f3806 	br	80d328 <__alt_mem_onchip_mem+0xff78d328>
  80d648:	9007883a 	mov	r3,r18
  80d64c:	0011883a 	mov	r8,zero
  80d650:	0005883a 	mov	r2,zero
  80d654:	003f4c06 	br	80d388 <__alt_mem_onchip_mem+0xff78d388>
  80d658:	498cb03a 	or	r6,r9,r6
  80d65c:	300cc03a 	cmpne	r6,r6,zero
  80d660:	0007883a 	mov	r3,zero
  80d664:	003f6806 	br	80d408 <__alt_mem_onchip_mem+0xff78d408>
  80d668:	20009c1e 	bne	r4,zero,80d8dc <__adddf3+0x630>
  80d66c:	80800044 	addi	r2,r16,1
  80d670:	1141ffcc 	andi	r5,r2,2047
  80d674:	01000044 	movi	r4,1
  80d678:	2140670e 	bge	r4,r5,80d818 <__adddf3+0x56c>
  80d67c:	0101ffc4 	movi	r4,2047
  80d680:	11007f26 	beq	r2,r4,80d880 <__adddf3+0x5d4>
  80d684:	898d883a 	add	r6,r17,r6
  80d688:	4247883a 	add	r3,r8,r9
  80d68c:	3451803a 	cmpltu	r8,r6,r17
  80d690:	40d1883a 	add	r8,r8,r3
  80d694:	402297fa 	slli	r17,r8,31
  80d698:	300cd07a 	srli	r6,r6,1
  80d69c:	4010d07a 	srli	r8,r8,1
  80d6a0:	1021883a 	mov	r16,r2
  80d6a4:	89a2b03a 	or	r17,r17,r6
  80d6a8:	003f1f06 	br	80d328 <__alt_mem_onchip_mem+0xff78d328>
  80d6ac:	0081ffc4 	movi	r2,2047
  80d6b0:	80bf481e 	bne	r16,r2,80d3d4 <__alt_mem_onchip_mem+0xff78d3d4>
  80d6b4:	003f1c06 	br	80d328 <__alt_mem_onchip_mem+0xff78d328>
  80d6b8:	843ff844 	addi	r16,r16,-31
  80d6bc:	01000804 	movi	r4,32
  80d6c0:	1406d83a 	srl	r3,r2,r16
  80d6c4:	41005026 	beq	r8,r4,80d808 <__adddf3+0x55c>
  80d6c8:	01001004 	movi	r4,64
  80d6cc:	2211c83a 	sub	r8,r4,r8
  80d6d0:	1204983a 	sll	r2,r2,r8
  80d6d4:	88a2b03a 	or	r17,r17,r2
  80d6d8:	8822c03a 	cmpne	r17,r17,zero
  80d6dc:	1c62b03a 	or	r17,r3,r17
  80d6e0:	0011883a 	mov	r8,zero
  80d6e4:	0021883a 	mov	r16,zero
  80d6e8:	003f7106 	br	80d4b0 <__alt_mem_onchip_mem+0xff78d4b0>
  80d6ec:	193ff804 	addi	r4,r3,-32
  80d6f0:	00800804 	movi	r2,32
  80d6f4:	4908d83a 	srl	r4,r9,r4
  80d6f8:	18804526 	beq	r3,r2,80d810 <__adddf3+0x564>
  80d6fc:	00801004 	movi	r2,64
  80d700:	10c5c83a 	sub	r2,r2,r3
  80d704:	4886983a 	sll	r3,r9,r2
  80d708:	198cb03a 	or	r6,r3,r6
  80d70c:	300cc03a 	cmpne	r6,r6,zero
  80d710:	218cb03a 	or	r6,r4,r6
  80d714:	0007883a 	mov	r3,zero
  80d718:	003f3b06 	br	80d408 <__alt_mem_onchip_mem+0xff78d408>
  80d71c:	80002a26 	beq	r16,zero,80d7c8 <__adddf3+0x51c>
  80d720:	0101ffc4 	movi	r4,2047
  80d724:	11006826 	beq	r2,r4,80d8c8 <__adddf3+0x61c>
  80d728:	00c7c83a 	sub	r3,zero,r3
  80d72c:	42002034 	orhi	r8,r8,128
  80d730:	01000e04 	movi	r4,56
  80d734:	20c07c16 	blt	r4,r3,80d928 <__adddf3+0x67c>
  80d738:	010007c4 	movi	r4,31
  80d73c:	20c0da16 	blt	r4,r3,80daa8 <__adddf3+0x7fc>
  80d740:	01000804 	movi	r4,32
  80d744:	20c9c83a 	sub	r4,r4,r3
  80d748:	4114983a 	sll	r10,r8,r4
  80d74c:	88cad83a 	srl	r5,r17,r3
  80d750:	8908983a 	sll	r4,r17,r4
  80d754:	40c6d83a 	srl	r3,r8,r3
  80d758:	5162b03a 	or	r17,r10,r5
  80d75c:	2008c03a 	cmpne	r4,r4,zero
  80d760:	8922b03a 	or	r17,r17,r4
  80d764:	3463c83a 	sub	r17,r6,r17
  80d768:	48c7c83a 	sub	r3,r9,r3
  80d76c:	344d803a 	cmpltu	r6,r6,r17
  80d770:	1991c83a 	sub	r8,r3,r6
  80d774:	1021883a 	mov	r16,r2
  80d778:	3825883a 	mov	r18,r7
  80d77c:	003f2706 	br	80d41c <__alt_mem_onchip_mem+0xff78d41c>
  80d780:	24d0b03a 	or	r8,r4,r19
  80d784:	40001b1e 	bne	r8,zero,80d7f4 <__adddf3+0x548>
  80d788:	0005883a 	mov	r2,zero
  80d78c:	0007883a 	mov	r3,zero
  80d790:	0021883a 	mov	r16,zero
  80d794:	003f4d06 	br	80d4cc <__alt_mem_onchip_mem+0xff78d4cc>
  80d798:	008007c4 	movi	r2,31
  80d79c:	11003c16 	blt	r2,r4,80d890 <__adddf3+0x5e4>
  80d7a0:	00800804 	movi	r2,32
  80d7a4:	1105c83a 	sub	r2,r2,r4
  80d7a8:	488e983a 	sll	r7,r9,r2
  80d7ac:	310ad83a 	srl	r5,r6,r4
  80d7b0:	3084983a 	sll	r2,r6,r2
  80d7b4:	4912d83a 	srl	r9,r9,r4
  80d7b8:	394ab03a 	or	r5,r7,r5
  80d7bc:	1004c03a 	cmpne	r2,r2,zero
  80d7c0:	288ab03a 	or	r5,r5,r2
  80d7c4:	003f5306 	br	80d514 <__alt_mem_onchip_mem+0xff78d514>
  80d7c8:	4448b03a 	or	r4,r8,r17
  80d7cc:	20003e26 	beq	r4,zero,80d8c8 <__adddf3+0x61c>
  80d7d0:	00c6303a 	nor	r3,zero,r3
  80d7d4:	18003a1e 	bne	r3,zero,80d8c0 <__adddf3+0x614>
  80d7d8:	3463c83a 	sub	r17,r6,r17
  80d7dc:	4a07c83a 	sub	r3,r9,r8
  80d7e0:	344d803a 	cmpltu	r6,r6,r17
  80d7e4:	1991c83a 	sub	r8,r3,r6
  80d7e8:	1021883a 	mov	r16,r2
  80d7ec:	3825883a 	mov	r18,r7
  80d7f0:	003f0a06 	br	80d41c <__alt_mem_onchip_mem+0xff78d41c>
  80d7f4:	2023883a 	mov	r17,r4
  80d7f8:	003f0d06 	br	80d430 <__alt_mem_onchip_mem+0xff78d430>
  80d7fc:	0081ffc4 	movi	r2,2047
  80d800:	80bf3f1e 	bne	r16,r2,80d500 <__alt_mem_onchip_mem+0xff78d500>
  80d804:	003ec806 	br	80d328 <__alt_mem_onchip_mem+0xff78d328>
  80d808:	0005883a 	mov	r2,zero
  80d80c:	003fb106 	br	80d6d4 <__alt_mem_onchip_mem+0xff78d6d4>
  80d810:	0007883a 	mov	r3,zero
  80d814:	003fbc06 	br	80d708 <__alt_mem_onchip_mem+0xff78d708>
  80d818:	4444b03a 	or	r2,r8,r17
  80d81c:	8000871e 	bne	r16,zero,80da3c <__adddf3+0x790>
  80d820:	1000ba26 	beq	r2,zero,80db0c <__adddf3+0x860>
  80d824:	4984b03a 	or	r2,r9,r6
  80d828:	103ebf26 	beq	r2,zero,80d328 <__alt_mem_onchip_mem+0xff78d328>
  80d82c:	8985883a 	add	r2,r17,r6
  80d830:	4247883a 	add	r3,r8,r9
  80d834:	1451803a 	cmpltu	r8,r2,r17
  80d838:	40d1883a 	add	r8,r8,r3
  80d83c:	40c0202c 	andhi	r3,r8,128
  80d840:	1023883a 	mov	r17,r2
  80d844:	183f1a26 	beq	r3,zero,80d4b0 <__alt_mem_onchip_mem+0xff78d4b0>
  80d848:	00bfe034 	movhi	r2,65408
  80d84c:	10bfffc4 	addi	r2,r2,-1
  80d850:	2021883a 	mov	r16,r4
  80d854:	4090703a 	and	r8,r8,r2
  80d858:	003eb306 	br	80d328 <__alt_mem_onchip_mem+0xff78d328>
  80d85c:	4444b03a 	or	r2,r8,r17
  80d860:	8000291e 	bne	r16,zero,80d908 <__adddf3+0x65c>
  80d864:	10004b1e 	bne	r2,zero,80d994 <__adddf3+0x6e8>
  80d868:	4990b03a 	or	r8,r9,r6
  80d86c:	40008b26 	beq	r8,zero,80da9c <__adddf3+0x7f0>
  80d870:	4811883a 	mov	r8,r9
  80d874:	3023883a 	mov	r17,r6
  80d878:	3825883a 	mov	r18,r7
  80d87c:	003eaa06 	br	80d328 <__alt_mem_onchip_mem+0xff78d328>
  80d880:	1021883a 	mov	r16,r2
  80d884:	0011883a 	mov	r8,zero
  80d888:	0005883a 	mov	r2,zero
  80d88c:	003f0f06 	br	80d4cc <__alt_mem_onchip_mem+0xff78d4cc>
  80d890:	217ff804 	addi	r5,r4,-32
  80d894:	00800804 	movi	r2,32
  80d898:	494ad83a 	srl	r5,r9,r5
  80d89c:	20807d26 	beq	r4,r2,80da94 <__adddf3+0x7e8>
  80d8a0:	00801004 	movi	r2,64
  80d8a4:	1109c83a 	sub	r4,r2,r4
  80d8a8:	4912983a 	sll	r9,r9,r4
  80d8ac:	498cb03a 	or	r6,r9,r6
  80d8b0:	300cc03a 	cmpne	r6,r6,zero
  80d8b4:	298ab03a 	or	r5,r5,r6
  80d8b8:	0013883a 	mov	r9,zero
  80d8bc:	003f1506 	br	80d514 <__alt_mem_onchip_mem+0xff78d514>
  80d8c0:	0101ffc4 	movi	r4,2047
  80d8c4:	113f9a1e 	bne	r2,r4,80d730 <__alt_mem_onchip_mem+0xff78d730>
  80d8c8:	4811883a 	mov	r8,r9
  80d8cc:	3023883a 	mov	r17,r6
  80d8d0:	1021883a 	mov	r16,r2
  80d8d4:	3825883a 	mov	r18,r7
  80d8d8:	003e9306 	br	80d328 <__alt_mem_onchip_mem+0xff78d328>
  80d8dc:	8000161e 	bne	r16,zero,80d938 <__adddf3+0x68c>
  80d8e0:	444ab03a 	or	r5,r8,r17
  80d8e4:	28005126 	beq	r5,zero,80da2c <__adddf3+0x780>
  80d8e8:	0108303a 	nor	r4,zero,r4
  80d8ec:	20004d1e 	bne	r4,zero,80da24 <__adddf3+0x778>
  80d8f0:	89a3883a 	add	r17,r17,r6
  80d8f4:	4253883a 	add	r9,r8,r9
  80d8f8:	898d803a 	cmpltu	r6,r17,r6
  80d8fc:	3251883a 	add	r8,r6,r9
  80d900:	1021883a 	mov	r16,r2
  80d904:	003f0806 	br	80d528 <__alt_mem_onchip_mem+0xff78d528>
  80d908:	1000301e 	bne	r2,zero,80d9cc <__adddf3+0x720>
  80d90c:	4984b03a 	or	r2,r9,r6
  80d910:	10007126 	beq	r2,zero,80dad8 <__adddf3+0x82c>
  80d914:	4811883a 	mov	r8,r9
  80d918:	3023883a 	mov	r17,r6
  80d91c:	3825883a 	mov	r18,r7
  80d920:	0401ffc4 	movi	r16,2047
  80d924:	003e8006 	br	80d328 <__alt_mem_onchip_mem+0xff78d328>
  80d928:	4462b03a 	or	r17,r8,r17
  80d92c:	8822c03a 	cmpne	r17,r17,zero
  80d930:	0007883a 	mov	r3,zero
  80d934:	003f8b06 	br	80d764 <__alt_mem_onchip_mem+0xff78d764>
  80d938:	0141ffc4 	movi	r5,2047
  80d93c:	11403b26 	beq	r2,r5,80da2c <__adddf3+0x780>
  80d940:	0109c83a 	sub	r4,zero,r4
  80d944:	42002034 	orhi	r8,r8,128
  80d948:	01400e04 	movi	r5,56
  80d94c:	29006716 	blt	r5,r4,80daec <__adddf3+0x840>
  80d950:	014007c4 	movi	r5,31
  80d954:	29007016 	blt	r5,r4,80db18 <__adddf3+0x86c>
  80d958:	01400804 	movi	r5,32
  80d95c:	290bc83a 	sub	r5,r5,r4
  80d960:	4154983a 	sll	r10,r8,r5
  80d964:	890ed83a 	srl	r7,r17,r4
  80d968:	894a983a 	sll	r5,r17,r5
  80d96c:	4108d83a 	srl	r4,r8,r4
  80d970:	51e2b03a 	or	r17,r10,r7
  80d974:	280ac03a 	cmpne	r5,r5,zero
  80d978:	8962b03a 	or	r17,r17,r5
  80d97c:	89a3883a 	add	r17,r17,r6
  80d980:	2253883a 	add	r9,r4,r9
  80d984:	898d803a 	cmpltu	r6,r17,r6
  80d988:	3251883a 	add	r8,r6,r9
  80d98c:	1021883a 	mov	r16,r2
  80d990:	003ee506 	br	80d528 <__alt_mem_onchip_mem+0xff78d528>
  80d994:	4984b03a 	or	r2,r9,r6
  80d998:	103e6326 	beq	r2,zero,80d328 <__alt_mem_onchip_mem+0xff78d328>
  80d99c:	8987c83a 	sub	r3,r17,r6
  80d9a0:	88c9803a 	cmpltu	r4,r17,r3
  80d9a4:	4245c83a 	sub	r2,r8,r9
  80d9a8:	1105c83a 	sub	r2,r2,r4
  80d9ac:	1100202c 	andhi	r4,r2,128
  80d9b0:	203ebb26 	beq	r4,zero,80d4a0 <__alt_mem_onchip_mem+0xff78d4a0>
  80d9b4:	3463c83a 	sub	r17,r6,r17
  80d9b8:	4a07c83a 	sub	r3,r9,r8
  80d9bc:	344d803a 	cmpltu	r6,r6,r17
  80d9c0:	1991c83a 	sub	r8,r3,r6
  80d9c4:	3825883a 	mov	r18,r7
  80d9c8:	003e5706 	br	80d328 <__alt_mem_onchip_mem+0xff78d328>
  80d9cc:	4984b03a 	or	r2,r9,r6
  80d9d0:	10002e26 	beq	r2,zero,80da8c <__adddf3+0x7e0>
  80d9d4:	4004d0fa 	srli	r2,r8,3
  80d9d8:	8822d0fa 	srli	r17,r17,3
  80d9dc:	4010977a 	slli	r8,r8,29
  80d9e0:	10c0022c 	andhi	r3,r2,8
  80d9e4:	4462b03a 	or	r17,r8,r17
  80d9e8:	18000826 	beq	r3,zero,80da0c <__adddf3+0x760>
  80d9ec:	4808d0fa 	srli	r4,r9,3
  80d9f0:	20c0022c 	andhi	r3,r4,8
  80d9f4:	1800051e 	bne	r3,zero,80da0c <__adddf3+0x760>
  80d9f8:	300cd0fa 	srli	r6,r6,3
  80d9fc:	4806977a 	slli	r3,r9,29
  80da00:	2005883a 	mov	r2,r4
  80da04:	3825883a 	mov	r18,r7
  80da08:	19a2b03a 	or	r17,r3,r6
  80da0c:	8810d77a 	srli	r8,r17,29
  80da10:	100490fa 	slli	r2,r2,3
  80da14:	882290fa 	slli	r17,r17,3
  80da18:	0401ffc4 	movi	r16,2047
  80da1c:	4090b03a 	or	r8,r8,r2
  80da20:	003e4106 	br	80d328 <__alt_mem_onchip_mem+0xff78d328>
  80da24:	0141ffc4 	movi	r5,2047
  80da28:	117fc71e 	bne	r2,r5,80d948 <__alt_mem_onchip_mem+0xff78d948>
  80da2c:	4811883a 	mov	r8,r9
  80da30:	3023883a 	mov	r17,r6
  80da34:	1021883a 	mov	r16,r2
  80da38:	003e3b06 	br	80d328 <__alt_mem_onchip_mem+0xff78d328>
  80da3c:	10002f26 	beq	r2,zero,80dafc <__adddf3+0x850>
  80da40:	4984b03a 	or	r2,r9,r6
  80da44:	10001126 	beq	r2,zero,80da8c <__adddf3+0x7e0>
  80da48:	4004d0fa 	srli	r2,r8,3
  80da4c:	8822d0fa 	srli	r17,r17,3
  80da50:	4010977a 	slli	r8,r8,29
  80da54:	10c0022c 	andhi	r3,r2,8
  80da58:	4462b03a 	or	r17,r8,r17
  80da5c:	183feb26 	beq	r3,zero,80da0c <__alt_mem_onchip_mem+0xff78da0c>
  80da60:	4808d0fa 	srli	r4,r9,3
  80da64:	20c0022c 	andhi	r3,r4,8
  80da68:	183fe81e 	bne	r3,zero,80da0c <__alt_mem_onchip_mem+0xff78da0c>
  80da6c:	300cd0fa 	srli	r6,r6,3
  80da70:	4806977a 	slli	r3,r9,29
  80da74:	2005883a 	mov	r2,r4
  80da78:	19a2b03a 	or	r17,r3,r6
  80da7c:	003fe306 	br	80da0c <__alt_mem_onchip_mem+0xff78da0c>
  80da80:	0011883a 	mov	r8,zero
  80da84:	0005883a 	mov	r2,zero
  80da88:	003e3f06 	br	80d388 <__alt_mem_onchip_mem+0xff78d388>
  80da8c:	0401ffc4 	movi	r16,2047
  80da90:	003e2506 	br	80d328 <__alt_mem_onchip_mem+0xff78d328>
  80da94:	0013883a 	mov	r9,zero
  80da98:	003f8406 	br	80d8ac <__alt_mem_onchip_mem+0xff78d8ac>
  80da9c:	0005883a 	mov	r2,zero
  80daa0:	0007883a 	mov	r3,zero
  80daa4:	003e8906 	br	80d4cc <__alt_mem_onchip_mem+0xff78d4cc>
  80daa8:	197ff804 	addi	r5,r3,-32
  80daac:	01000804 	movi	r4,32
  80dab0:	414ad83a 	srl	r5,r8,r5
  80dab4:	19002426 	beq	r3,r4,80db48 <__adddf3+0x89c>
  80dab8:	01001004 	movi	r4,64
  80dabc:	20c7c83a 	sub	r3,r4,r3
  80dac0:	40c6983a 	sll	r3,r8,r3
  80dac4:	1c46b03a 	or	r3,r3,r17
  80dac8:	1806c03a 	cmpne	r3,r3,zero
  80dacc:	28e2b03a 	or	r17,r5,r3
  80dad0:	0007883a 	mov	r3,zero
  80dad4:	003f2306 	br	80d764 <__alt_mem_onchip_mem+0xff78d764>
  80dad8:	0007883a 	mov	r3,zero
  80dadc:	5811883a 	mov	r8,r11
  80dae0:	00bfffc4 	movi	r2,-1
  80dae4:	0401ffc4 	movi	r16,2047
  80dae8:	003e7806 	br	80d4cc <__alt_mem_onchip_mem+0xff78d4cc>
  80daec:	4462b03a 	or	r17,r8,r17
  80daf0:	8822c03a 	cmpne	r17,r17,zero
  80daf4:	0009883a 	mov	r4,zero
  80daf8:	003fa006 	br	80d97c <__alt_mem_onchip_mem+0xff78d97c>
  80dafc:	4811883a 	mov	r8,r9
  80db00:	3023883a 	mov	r17,r6
  80db04:	0401ffc4 	movi	r16,2047
  80db08:	003e0706 	br	80d328 <__alt_mem_onchip_mem+0xff78d328>
  80db0c:	4811883a 	mov	r8,r9
  80db10:	3023883a 	mov	r17,r6
  80db14:	003e0406 	br	80d328 <__alt_mem_onchip_mem+0xff78d328>
  80db18:	21fff804 	addi	r7,r4,-32
  80db1c:	01400804 	movi	r5,32
  80db20:	41ced83a 	srl	r7,r8,r7
  80db24:	21400a26 	beq	r4,r5,80db50 <__adddf3+0x8a4>
  80db28:	01401004 	movi	r5,64
  80db2c:	2909c83a 	sub	r4,r5,r4
  80db30:	4108983a 	sll	r4,r8,r4
  80db34:	2448b03a 	or	r4,r4,r17
  80db38:	2008c03a 	cmpne	r4,r4,zero
  80db3c:	3922b03a 	or	r17,r7,r4
  80db40:	0009883a 	mov	r4,zero
  80db44:	003f8d06 	br	80d97c <__alt_mem_onchip_mem+0xff78d97c>
  80db48:	0007883a 	mov	r3,zero
  80db4c:	003fdd06 	br	80dac4 <__alt_mem_onchip_mem+0xff78dac4>
  80db50:	0009883a 	mov	r4,zero
  80db54:	003ff706 	br	80db34 <__alt_mem_onchip_mem+0xff78db34>

0080db58 <__divdf3>:
  80db58:	defff204 	addi	sp,sp,-56
  80db5c:	dd400915 	stw	r21,36(sp)
  80db60:	282ad53a 	srli	r21,r5,20
  80db64:	dd000815 	stw	r20,32(sp)
  80db68:	2828d7fa 	srli	r20,r5,31
  80db6c:	dc000415 	stw	r16,16(sp)
  80db70:	04000434 	movhi	r16,16
  80db74:	df000c15 	stw	fp,48(sp)
  80db78:	843fffc4 	addi	r16,r16,-1
  80db7c:	dfc00d15 	stw	ra,52(sp)
  80db80:	ddc00b15 	stw	r23,44(sp)
  80db84:	dd800a15 	stw	r22,40(sp)
  80db88:	dcc00715 	stw	r19,28(sp)
  80db8c:	dc800615 	stw	r18,24(sp)
  80db90:	dc400515 	stw	r17,20(sp)
  80db94:	ad41ffcc 	andi	r21,r21,2047
  80db98:	2c20703a 	and	r16,r5,r16
  80db9c:	a7003fcc 	andi	fp,r20,255
  80dba0:	a8006126 	beq	r21,zero,80dd28 <__divdf3+0x1d0>
  80dba4:	0081ffc4 	movi	r2,2047
  80dba8:	2025883a 	mov	r18,r4
  80dbac:	a8803726 	beq	r21,r2,80dc8c <__divdf3+0x134>
  80dbb0:	80800434 	orhi	r2,r16,16
  80dbb4:	100490fa 	slli	r2,r2,3
  80dbb8:	2020d77a 	srli	r16,r4,29
  80dbbc:	202490fa 	slli	r18,r4,3
  80dbc0:	ad7f0044 	addi	r21,r21,-1023
  80dbc4:	80a0b03a 	or	r16,r16,r2
  80dbc8:	0027883a 	mov	r19,zero
  80dbcc:	0013883a 	mov	r9,zero
  80dbd0:	3804d53a 	srli	r2,r7,20
  80dbd4:	382cd7fa 	srli	r22,r7,31
  80dbd8:	04400434 	movhi	r17,16
  80dbdc:	8c7fffc4 	addi	r17,r17,-1
  80dbe0:	1081ffcc 	andi	r2,r2,2047
  80dbe4:	3011883a 	mov	r8,r6
  80dbe8:	3c62703a 	and	r17,r7,r17
  80dbec:	b5c03fcc 	andi	r23,r22,255
  80dbf0:	10006c26 	beq	r2,zero,80dda4 <__divdf3+0x24c>
  80dbf4:	00c1ffc4 	movi	r3,2047
  80dbf8:	10c06426 	beq	r2,r3,80dd8c <__divdf3+0x234>
  80dbfc:	88c00434 	orhi	r3,r17,16
  80dc00:	180690fa 	slli	r3,r3,3
  80dc04:	3022d77a 	srli	r17,r6,29
  80dc08:	301090fa 	slli	r8,r6,3
  80dc0c:	10bf0044 	addi	r2,r2,-1023
  80dc10:	88e2b03a 	or	r17,r17,r3
  80dc14:	000f883a 	mov	r7,zero
  80dc18:	a58cf03a 	xor	r6,r20,r22
  80dc1c:	3cc8b03a 	or	r4,r7,r19
  80dc20:	a8abc83a 	sub	r21,r21,r2
  80dc24:	008003c4 	movi	r2,15
  80dc28:	3007883a 	mov	r3,r6
  80dc2c:	34c03fcc 	andi	r19,r6,255
  80dc30:	11009036 	bltu	r2,r4,80de74 <__divdf3+0x31c>
  80dc34:	200890ba 	slli	r4,r4,2
  80dc38:	00802074 	movhi	r2,129
  80dc3c:	10b71304 	addi	r2,r2,-9140
  80dc40:	2089883a 	add	r4,r4,r2
  80dc44:	20800017 	ldw	r2,0(r4)
  80dc48:	1000683a 	jmp	r2
  80dc4c:	0080de74 	movhi	r2,889
  80dc50:	0080dcc4 	movi	r2,883
  80dc54:	0080de64 	muli	r2,zero,889
  80dc58:	0080dcb8 	rdprs	r2,zero,882
  80dc5c:	0080de64 	muli	r2,zero,889
  80dc60:	0080de38 	rdprs	r2,zero,888
  80dc64:	0080de64 	muli	r2,zero,889
  80dc68:	0080dcb8 	rdprs	r2,zero,882
  80dc6c:	0080dcc4 	movi	r2,883
  80dc70:	0080dcc4 	movi	r2,883
  80dc74:	0080de38 	rdprs	r2,zero,888
  80dc78:	0080dcb8 	rdprs	r2,zero,882
  80dc7c:	0080dca8 	cmpgeui	r2,zero,882
  80dc80:	0080dca8 	cmpgeui	r2,zero,882
  80dc84:	0080dca8 	cmpgeui	r2,zero,882
  80dc88:	0080e158 	cmpnei	r2,zero,901
  80dc8c:	2404b03a 	or	r2,r4,r16
  80dc90:	1000661e 	bne	r2,zero,80de2c <__divdf3+0x2d4>
  80dc94:	04c00204 	movi	r19,8
  80dc98:	0021883a 	mov	r16,zero
  80dc9c:	0025883a 	mov	r18,zero
  80dca0:	02400084 	movi	r9,2
  80dca4:	003fca06 	br	80dbd0 <__alt_mem_onchip_mem+0xff78dbd0>
  80dca8:	8023883a 	mov	r17,r16
  80dcac:	9011883a 	mov	r8,r18
  80dcb0:	e02f883a 	mov	r23,fp
  80dcb4:	480f883a 	mov	r7,r9
  80dcb8:	00800084 	movi	r2,2
  80dcbc:	3881311e 	bne	r7,r2,80e184 <__divdf3+0x62c>
  80dcc0:	b827883a 	mov	r19,r23
  80dcc4:	98c0004c 	andi	r3,r19,1
  80dcc8:	0081ffc4 	movi	r2,2047
  80dccc:	000b883a 	mov	r5,zero
  80dcd0:	0025883a 	mov	r18,zero
  80dcd4:	1004953a 	slli	r2,r2,20
  80dcd8:	18c03fcc 	andi	r3,r3,255
  80dcdc:	04400434 	movhi	r17,16
  80dce0:	8c7fffc4 	addi	r17,r17,-1
  80dce4:	180697fa 	slli	r3,r3,31
  80dce8:	2c4a703a 	and	r5,r5,r17
  80dcec:	288ab03a 	or	r5,r5,r2
  80dcf0:	28c6b03a 	or	r3,r5,r3
  80dcf4:	9005883a 	mov	r2,r18
  80dcf8:	dfc00d17 	ldw	ra,52(sp)
  80dcfc:	df000c17 	ldw	fp,48(sp)
  80dd00:	ddc00b17 	ldw	r23,44(sp)
  80dd04:	dd800a17 	ldw	r22,40(sp)
  80dd08:	dd400917 	ldw	r21,36(sp)
  80dd0c:	dd000817 	ldw	r20,32(sp)
  80dd10:	dcc00717 	ldw	r19,28(sp)
  80dd14:	dc800617 	ldw	r18,24(sp)
  80dd18:	dc400517 	ldw	r17,20(sp)
  80dd1c:	dc000417 	ldw	r16,16(sp)
  80dd20:	dec00e04 	addi	sp,sp,56
  80dd24:	f800283a 	ret
  80dd28:	2404b03a 	or	r2,r4,r16
  80dd2c:	2027883a 	mov	r19,r4
  80dd30:	10003926 	beq	r2,zero,80de18 <__divdf3+0x2c0>
  80dd34:	80012e26 	beq	r16,zero,80e1f0 <__divdf3+0x698>
  80dd38:	8009883a 	mov	r4,r16
  80dd3c:	d9800315 	stw	r6,12(sp)
  80dd40:	d9c00215 	stw	r7,8(sp)
  80dd44:	080f8b00 	call	80f8b0 <__clzsi2>
  80dd48:	d9800317 	ldw	r6,12(sp)
  80dd4c:	d9c00217 	ldw	r7,8(sp)
  80dd50:	113ffd44 	addi	r4,r2,-11
  80dd54:	00c00704 	movi	r3,28
  80dd58:	19012116 	blt	r3,r4,80e1e0 <__divdf3+0x688>
  80dd5c:	00c00744 	movi	r3,29
  80dd60:	147ffe04 	addi	r17,r2,-8
  80dd64:	1907c83a 	sub	r3,r3,r4
  80dd68:	8460983a 	sll	r16,r16,r17
  80dd6c:	98c6d83a 	srl	r3,r19,r3
  80dd70:	9c64983a 	sll	r18,r19,r17
  80dd74:	1c20b03a 	or	r16,r3,r16
  80dd78:	1080fcc4 	addi	r2,r2,1011
  80dd7c:	00abc83a 	sub	r21,zero,r2
  80dd80:	0027883a 	mov	r19,zero
  80dd84:	0013883a 	mov	r9,zero
  80dd88:	003f9106 	br	80dbd0 <__alt_mem_onchip_mem+0xff78dbd0>
  80dd8c:	3446b03a 	or	r3,r6,r17
  80dd90:	18001f1e 	bne	r3,zero,80de10 <__divdf3+0x2b8>
  80dd94:	0023883a 	mov	r17,zero
  80dd98:	0011883a 	mov	r8,zero
  80dd9c:	01c00084 	movi	r7,2
  80dda0:	003f9d06 	br	80dc18 <__alt_mem_onchip_mem+0xff78dc18>
  80dda4:	3446b03a 	or	r3,r6,r17
  80dda8:	18001526 	beq	r3,zero,80de00 <__divdf3+0x2a8>
  80ddac:	88011b26 	beq	r17,zero,80e21c <__divdf3+0x6c4>
  80ddb0:	8809883a 	mov	r4,r17
  80ddb4:	d9800315 	stw	r6,12(sp)
  80ddb8:	da400115 	stw	r9,4(sp)
  80ddbc:	080f8b00 	call	80f8b0 <__clzsi2>
  80ddc0:	d9800317 	ldw	r6,12(sp)
  80ddc4:	da400117 	ldw	r9,4(sp)
  80ddc8:	113ffd44 	addi	r4,r2,-11
  80ddcc:	00c00704 	movi	r3,28
  80ddd0:	19010e16 	blt	r3,r4,80e20c <__divdf3+0x6b4>
  80ddd4:	00c00744 	movi	r3,29
  80ddd8:	123ffe04 	addi	r8,r2,-8
  80dddc:	1907c83a 	sub	r3,r3,r4
  80dde0:	8a22983a 	sll	r17,r17,r8
  80dde4:	30c6d83a 	srl	r3,r6,r3
  80dde8:	3210983a 	sll	r8,r6,r8
  80ddec:	1c62b03a 	or	r17,r3,r17
  80ddf0:	1080fcc4 	addi	r2,r2,1011
  80ddf4:	0085c83a 	sub	r2,zero,r2
  80ddf8:	000f883a 	mov	r7,zero
  80ddfc:	003f8606 	br	80dc18 <__alt_mem_onchip_mem+0xff78dc18>
  80de00:	0023883a 	mov	r17,zero
  80de04:	0011883a 	mov	r8,zero
  80de08:	01c00044 	movi	r7,1
  80de0c:	003f8206 	br	80dc18 <__alt_mem_onchip_mem+0xff78dc18>
  80de10:	01c000c4 	movi	r7,3
  80de14:	003f8006 	br	80dc18 <__alt_mem_onchip_mem+0xff78dc18>
  80de18:	04c00104 	movi	r19,4
  80de1c:	0021883a 	mov	r16,zero
  80de20:	0025883a 	mov	r18,zero
  80de24:	02400044 	movi	r9,1
  80de28:	003f6906 	br	80dbd0 <__alt_mem_onchip_mem+0xff78dbd0>
  80de2c:	04c00304 	movi	r19,12
  80de30:	024000c4 	movi	r9,3
  80de34:	003f6606 	br	80dbd0 <__alt_mem_onchip_mem+0xff78dbd0>
  80de38:	01400434 	movhi	r5,16
  80de3c:	0007883a 	mov	r3,zero
  80de40:	297fffc4 	addi	r5,r5,-1
  80de44:	04bfffc4 	movi	r18,-1
  80de48:	0081ffc4 	movi	r2,2047
  80de4c:	003fa106 	br	80dcd4 <__alt_mem_onchip_mem+0xff78dcd4>
  80de50:	00c00044 	movi	r3,1
  80de54:	1887c83a 	sub	r3,r3,r2
  80de58:	01000e04 	movi	r4,56
  80de5c:	20c1210e 	bge	r4,r3,80e2e4 <__divdf3+0x78c>
  80de60:	98c0004c 	andi	r3,r19,1
  80de64:	0005883a 	mov	r2,zero
  80de68:	000b883a 	mov	r5,zero
  80de6c:	0025883a 	mov	r18,zero
  80de70:	003f9806 	br	80dcd4 <__alt_mem_onchip_mem+0xff78dcd4>
  80de74:	8c00fd36 	bltu	r17,r16,80e26c <__divdf3+0x714>
  80de78:	8440fb26 	beq	r16,r17,80e268 <__divdf3+0x710>
  80de7c:	8007883a 	mov	r3,r16
  80de80:	ad7fffc4 	addi	r21,r21,-1
  80de84:	0021883a 	mov	r16,zero
  80de88:	4004d63a 	srli	r2,r8,24
  80de8c:	8822923a 	slli	r17,r17,8
  80de90:	1809883a 	mov	r4,r3
  80de94:	402c923a 	slli	r22,r8,8
  80de98:	88b8b03a 	or	fp,r17,r2
  80de9c:	e028d43a 	srli	r20,fp,16
  80dea0:	d8c00015 	stw	r3,0(sp)
  80dea4:	e5ffffcc 	andi	r23,fp,65535
  80dea8:	a00b883a 	mov	r5,r20
  80deac:	080d1f00 	call	80d1f0 <__udivsi3>
  80deb0:	d8c00017 	ldw	r3,0(sp)
  80deb4:	a00b883a 	mov	r5,r20
  80deb8:	d8800315 	stw	r2,12(sp)
  80debc:	1809883a 	mov	r4,r3
  80dec0:	080d2540 	call	80d254 <__umodsi3>
  80dec4:	d9800317 	ldw	r6,12(sp)
  80dec8:	1006943a 	slli	r3,r2,16
  80decc:	9004d43a 	srli	r2,r18,16
  80ded0:	b9a3383a 	mul	r17,r23,r6
  80ded4:	10c4b03a 	or	r2,r2,r3
  80ded8:	1440062e 	bgeu	r2,r17,80def4 <__divdf3+0x39c>
  80dedc:	1705883a 	add	r2,r2,fp
  80dee0:	30ffffc4 	addi	r3,r6,-1
  80dee4:	1700ee36 	bltu	r2,fp,80e2a0 <__divdf3+0x748>
  80dee8:	1440ed2e 	bgeu	r2,r17,80e2a0 <__divdf3+0x748>
  80deec:	31bfff84 	addi	r6,r6,-2
  80def0:	1705883a 	add	r2,r2,fp
  80def4:	1463c83a 	sub	r17,r2,r17
  80def8:	a00b883a 	mov	r5,r20
  80defc:	8809883a 	mov	r4,r17
  80df00:	d9800315 	stw	r6,12(sp)
  80df04:	080d1f00 	call	80d1f0 <__udivsi3>
  80df08:	a00b883a 	mov	r5,r20
  80df0c:	8809883a 	mov	r4,r17
  80df10:	d8800215 	stw	r2,8(sp)
  80df14:	080d2540 	call	80d254 <__umodsi3>
  80df18:	d9c00217 	ldw	r7,8(sp)
  80df1c:	1004943a 	slli	r2,r2,16
  80df20:	94bfffcc 	andi	r18,r18,65535
  80df24:	b9d1383a 	mul	r8,r23,r7
  80df28:	90a4b03a 	or	r18,r18,r2
  80df2c:	d9800317 	ldw	r6,12(sp)
  80df30:	9200062e 	bgeu	r18,r8,80df4c <__divdf3+0x3f4>
  80df34:	9725883a 	add	r18,r18,fp
  80df38:	38bfffc4 	addi	r2,r7,-1
  80df3c:	9700d636 	bltu	r18,fp,80e298 <__divdf3+0x740>
  80df40:	9200d52e 	bgeu	r18,r8,80e298 <__divdf3+0x740>
  80df44:	39ffff84 	addi	r7,r7,-2
  80df48:	9725883a 	add	r18,r18,fp
  80df4c:	3004943a 	slli	r2,r6,16
  80df50:	b012d43a 	srli	r9,r22,16
  80df54:	b1bfffcc 	andi	r6,r22,65535
  80df58:	11e2b03a 	or	r17,r2,r7
  80df5c:	8806d43a 	srli	r3,r17,16
  80df60:	893fffcc 	andi	r4,r17,65535
  80df64:	218b383a 	mul	r5,r4,r6
  80df68:	30c5383a 	mul	r2,r6,r3
  80df6c:	2249383a 	mul	r4,r4,r9
  80df70:	280ed43a 	srli	r7,r5,16
  80df74:	9225c83a 	sub	r18,r18,r8
  80df78:	2089883a 	add	r4,r4,r2
  80df7c:	3909883a 	add	r4,r7,r4
  80df80:	1a47383a 	mul	r3,r3,r9
  80df84:	2080022e 	bgeu	r4,r2,80df90 <__divdf3+0x438>
  80df88:	00800074 	movhi	r2,1
  80df8c:	1887883a 	add	r3,r3,r2
  80df90:	2004d43a 	srli	r2,r4,16
  80df94:	2008943a 	slli	r4,r4,16
  80df98:	297fffcc 	andi	r5,r5,65535
  80df9c:	10c7883a 	add	r3,r2,r3
  80dfa0:	2149883a 	add	r4,r4,r5
  80dfa4:	90c0a536 	bltu	r18,r3,80e23c <__divdf3+0x6e4>
  80dfa8:	90c0bf26 	beq	r18,r3,80e2a8 <__divdf3+0x750>
  80dfac:	90c7c83a 	sub	r3,r18,r3
  80dfb0:	810fc83a 	sub	r7,r16,r4
  80dfb4:	81e5803a 	cmpltu	r18,r16,r7
  80dfb8:	1ca5c83a 	sub	r18,r3,r18
  80dfbc:	e480c126 	beq	fp,r18,80e2c4 <__divdf3+0x76c>
  80dfc0:	a00b883a 	mov	r5,r20
  80dfc4:	9009883a 	mov	r4,r18
  80dfc8:	d9800315 	stw	r6,12(sp)
  80dfcc:	d9c00215 	stw	r7,8(sp)
  80dfd0:	da400115 	stw	r9,4(sp)
  80dfd4:	080d1f00 	call	80d1f0 <__udivsi3>
  80dfd8:	a00b883a 	mov	r5,r20
  80dfdc:	9009883a 	mov	r4,r18
  80dfe0:	d8800015 	stw	r2,0(sp)
  80dfe4:	080d2540 	call	80d254 <__umodsi3>
  80dfe8:	d9c00217 	ldw	r7,8(sp)
  80dfec:	da000017 	ldw	r8,0(sp)
  80dff0:	1006943a 	slli	r3,r2,16
  80dff4:	3804d43a 	srli	r2,r7,16
  80dff8:	ba21383a 	mul	r16,r23,r8
  80dffc:	d9800317 	ldw	r6,12(sp)
  80e000:	10c4b03a 	or	r2,r2,r3
  80e004:	da400117 	ldw	r9,4(sp)
  80e008:	1400062e 	bgeu	r2,r16,80e024 <__divdf3+0x4cc>
  80e00c:	1705883a 	add	r2,r2,fp
  80e010:	40ffffc4 	addi	r3,r8,-1
  80e014:	1700ad36 	bltu	r2,fp,80e2cc <__divdf3+0x774>
  80e018:	1400ac2e 	bgeu	r2,r16,80e2cc <__divdf3+0x774>
  80e01c:	423fff84 	addi	r8,r8,-2
  80e020:	1705883a 	add	r2,r2,fp
  80e024:	1421c83a 	sub	r16,r2,r16
  80e028:	a00b883a 	mov	r5,r20
  80e02c:	8009883a 	mov	r4,r16
  80e030:	d9800315 	stw	r6,12(sp)
  80e034:	d9c00215 	stw	r7,8(sp)
  80e038:	da000015 	stw	r8,0(sp)
  80e03c:	da400115 	stw	r9,4(sp)
  80e040:	080d1f00 	call	80d1f0 <__udivsi3>
  80e044:	8009883a 	mov	r4,r16
  80e048:	a00b883a 	mov	r5,r20
  80e04c:	1025883a 	mov	r18,r2
  80e050:	080d2540 	call	80d254 <__umodsi3>
  80e054:	d9c00217 	ldw	r7,8(sp)
  80e058:	1004943a 	slli	r2,r2,16
  80e05c:	bcaf383a 	mul	r23,r23,r18
  80e060:	393fffcc 	andi	r4,r7,65535
  80e064:	2088b03a 	or	r4,r4,r2
  80e068:	d9800317 	ldw	r6,12(sp)
  80e06c:	da000017 	ldw	r8,0(sp)
  80e070:	da400117 	ldw	r9,4(sp)
  80e074:	25c0062e 	bgeu	r4,r23,80e090 <__divdf3+0x538>
  80e078:	2709883a 	add	r4,r4,fp
  80e07c:	90bfffc4 	addi	r2,r18,-1
  80e080:	27009436 	bltu	r4,fp,80e2d4 <__divdf3+0x77c>
  80e084:	25c0932e 	bgeu	r4,r23,80e2d4 <__divdf3+0x77c>
  80e088:	94bfff84 	addi	r18,r18,-2
  80e08c:	2709883a 	add	r4,r4,fp
  80e090:	4004943a 	slli	r2,r8,16
  80e094:	25efc83a 	sub	r23,r4,r23
  80e098:	1490b03a 	or	r8,r2,r18
  80e09c:	4008d43a 	srli	r4,r8,16
  80e0a0:	40ffffcc 	andi	r3,r8,65535
  80e0a4:	30c5383a 	mul	r2,r6,r3
  80e0a8:	1a47383a 	mul	r3,r3,r9
  80e0ac:	310d383a 	mul	r6,r6,r4
  80e0b0:	100ad43a 	srli	r5,r2,16
  80e0b4:	4913383a 	mul	r9,r9,r4
  80e0b8:	1987883a 	add	r3,r3,r6
  80e0bc:	28c7883a 	add	r3,r5,r3
  80e0c0:	1980022e 	bgeu	r3,r6,80e0cc <__divdf3+0x574>
  80e0c4:	01000074 	movhi	r4,1
  80e0c8:	4913883a 	add	r9,r9,r4
  80e0cc:	1808d43a 	srli	r4,r3,16
  80e0d0:	1806943a 	slli	r3,r3,16
  80e0d4:	10bfffcc 	andi	r2,r2,65535
  80e0d8:	2253883a 	add	r9,r4,r9
  80e0dc:	1887883a 	add	r3,r3,r2
  80e0e0:	ba403836 	bltu	r23,r9,80e1c4 <__divdf3+0x66c>
  80e0e4:	ba403626 	beq	r23,r9,80e1c0 <__divdf3+0x668>
  80e0e8:	42000054 	ori	r8,r8,1
  80e0ec:	a880ffc4 	addi	r2,r21,1023
  80e0f0:	00bf570e 	bge	zero,r2,80de50 <__alt_mem_onchip_mem+0xff78de50>
  80e0f4:	40c001cc 	andi	r3,r8,7
  80e0f8:	18000726 	beq	r3,zero,80e118 <__divdf3+0x5c0>
  80e0fc:	40c003cc 	andi	r3,r8,15
  80e100:	01000104 	movi	r4,4
  80e104:	19000426 	beq	r3,r4,80e118 <__divdf3+0x5c0>
  80e108:	4107883a 	add	r3,r8,r4
  80e10c:	1a11803a 	cmpltu	r8,r3,r8
  80e110:	8a23883a 	add	r17,r17,r8
  80e114:	1811883a 	mov	r8,r3
  80e118:	88c0402c 	andhi	r3,r17,256
  80e11c:	18000426 	beq	r3,zero,80e130 <__divdf3+0x5d8>
  80e120:	00ffc034 	movhi	r3,65280
  80e124:	18ffffc4 	addi	r3,r3,-1
  80e128:	a8810004 	addi	r2,r21,1024
  80e12c:	88e2703a 	and	r17,r17,r3
  80e130:	00c1ff84 	movi	r3,2046
  80e134:	18bee316 	blt	r3,r2,80dcc4 <__alt_mem_onchip_mem+0xff78dcc4>
  80e138:	8824977a 	slli	r18,r17,29
  80e13c:	4010d0fa 	srli	r8,r8,3
  80e140:	8822927a 	slli	r17,r17,9
  80e144:	1081ffcc 	andi	r2,r2,2047
  80e148:	9224b03a 	or	r18,r18,r8
  80e14c:	880ad33a 	srli	r5,r17,12
  80e150:	98c0004c 	andi	r3,r19,1
  80e154:	003edf06 	br	80dcd4 <__alt_mem_onchip_mem+0xff78dcd4>
  80e158:	8080022c 	andhi	r2,r16,8
  80e15c:	10001226 	beq	r2,zero,80e1a8 <__divdf3+0x650>
  80e160:	8880022c 	andhi	r2,r17,8
  80e164:	1000101e 	bne	r2,zero,80e1a8 <__divdf3+0x650>
  80e168:	00800434 	movhi	r2,16
  80e16c:	89400234 	orhi	r5,r17,8
  80e170:	10bfffc4 	addi	r2,r2,-1
  80e174:	b007883a 	mov	r3,r22
  80e178:	288a703a 	and	r5,r5,r2
  80e17c:	4025883a 	mov	r18,r8
  80e180:	003f3106 	br	80de48 <__alt_mem_onchip_mem+0xff78de48>
  80e184:	008000c4 	movi	r2,3
  80e188:	3880a626 	beq	r7,r2,80e424 <__divdf3+0x8cc>
  80e18c:	00800044 	movi	r2,1
  80e190:	3880521e 	bne	r7,r2,80e2dc <__divdf3+0x784>
  80e194:	b807883a 	mov	r3,r23
  80e198:	0005883a 	mov	r2,zero
  80e19c:	000b883a 	mov	r5,zero
  80e1a0:	0025883a 	mov	r18,zero
  80e1a4:	003ecb06 	br	80dcd4 <__alt_mem_onchip_mem+0xff78dcd4>
  80e1a8:	00800434 	movhi	r2,16
  80e1ac:	81400234 	orhi	r5,r16,8
  80e1b0:	10bfffc4 	addi	r2,r2,-1
  80e1b4:	a007883a 	mov	r3,r20
  80e1b8:	288a703a 	and	r5,r5,r2
  80e1bc:	003f2206 	br	80de48 <__alt_mem_onchip_mem+0xff78de48>
  80e1c0:	183fca26 	beq	r3,zero,80e0ec <__alt_mem_onchip_mem+0xff78e0ec>
  80e1c4:	e5ef883a 	add	r23,fp,r23
  80e1c8:	40bfffc4 	addi	r2,r8,-1
  80e1cc:	bf00392e 	bgeu	r23,fp,80e2b4 <__divdf3+0x75c>
  80e1d0:	1011883a 	mov	r8,r2
  80e1d4:	ba7fc41e 	bne	r23,r9,80e0e8 <__alt_mem_onchip_mem+0xff78e0e8>
  80e1d8:	b0ffc31e 	bne	r22,r3,80e0e8 <__alt_mem_onchip_mem+0xff78e0e8>
  80e1dc:	003fc306 	br	80e0ec <__alt_mem_onchip_mem+0xff78e0ec>
  80e1e0:	143ff604 	addi	r16,r2,-40
  80e1e4:	9c20983a 	sll	r16,r19,r16
  80e1e8:	0025883a 	mov	r18,zero
  80e1ec:	003ee206 	br	80dd78 <__alt_mem_onchip_mem+0xff78dd78>
  80e1f0:	d9800315 	stw	r6,12(sp)
  80e1f4:	d9c00215 	stw	r7,8(sp)
  80e1f8:	080f8b00 	call	80f8b0 <__clzsi2>
  80e1fc:	10800804 	addi	r2,r2,32
  80e200:	d9c00217 	ldw	r7,8(sp)
  80e204:	d9800317 	ldw	r6,12(sp)
  80e208:	003ed106 	br	80dd50 <__alt_mem_onchip_mem+0xff78dd50>
  80e20c:	147ff604 	addi	r17,r2,-40
  80e210:	3462983a 	sll	r17,r6,r17
  80e214:	0011883a 	mov	r8,zero
  80e218:	003ef506 	br	80ddf0 <__alt_mem_onchip_mem+0xff78ddf0>
  80e21c:	3009883a 	mov	r4,r6
  80e220:	d9800315 	stw	r6,12(sp)
  80e224:	da400115 	stw	r9,4(sp)
  80e228:	080f8b00 	call	80f8b0 <__clzsi2>
  80e22c:	10800804 	addi	r2,r2,32
  80e230:	da400117 	ldw	r9,4(sp)
  80e234:	d9800317 	ldw	r6,12(sp)
  80e238:	003ee306 	br	80ddc8 <__alt_mem_onchip_mem+0xff78ddc8>
  80e23c:	85a1883a 	add	r16,r16,r22
  80e240:	8585803a 	cmpltu	r2,r16,r22
  80e244:	1705883a 	add	r2,r2,fp
  80e248:	14a5883a 	add	r18,r2,r18
  80e24c:	88bfffc4 	addi	r2,r17,-1
  80e250:	e4800c2e 	bgeu	fp,r18,80e284 <__divdf3+0x72c>
  80e254:	90c03e36 	bltu	r18,r3,80e350 <__divdf3+0x7f8>
  80e258:	1c806926 	beq	r3,r18,80e400 <__divdf3+0x8a8>
  80e25c:	90c7c83a 	sub	r3,r18,r3
  80e260:	1023883a 	mov	r17,r2
  80e264:	003f5206 	br	80dfb0 <__alt_mem_onchip_mem+0xff78dfb0>
  80e268:	923f0436 	bltu	r18,r8,80de7c <__alt_mem_onchip_mem+0xff78de7c>
  80e26c:	800897fa 	slli	r4,r16,31
  80e270:	9004d07a 	srli	r2,r18,1
  80e274:	8006d07a 	srli	r3,r16,1
  80e278:	902097fa 	slli	r16,r18,31
  80e27c:	20a4b03a 	or	r18,r4,r2
  80e280:	003f0106 	br	80de88 <__alt_mem_onchip_mem+0xff78de88>
  80e284:	e4bff51e 	bne	fp,r18,80e25c <__alt_mem_onchip_mem+0xff78e25c>
  80e288:	85bff22e 	bgeu	r16,r22,80e254 <__alt_mem_onchip_mem+0xff78e254>
  80e28c:	e0c7c83a 	sub	r3,fp,r3
  80e290:	1023883a 	mov	r17,r2
  80e294:	003f4606 	br	80dfb0 <__alt_mem_onchip_mem+0xff78dfb0>
  80e298:	100f883a 	mov	r7,r2
  80e29c:	003f2b06 	br	80df4c <__alt_mem_onchip_mem+0xff78df4c>
  80e2a0:	180d883a 	mov	r6,r3
  80e2a4:	003f1306 	br	80def4 <__alt_mem_onchip_mem+0xff78def4>
  80e2a8:	813fe436 	bltu	r16,r4,80e23c <__alt_mem_onchip_mem+0xff78e23c>
  80e2ac:	0007883a 	mov	r3,zero
  80e2b0:	003f3f06 	br	80dfb0 <__alt_mem_onchip_mem+0xff78dfb0>
  80e2b4:	ba402c36 	bltu	r23,r9,80e368 <__divdf3+0x810>
  80e2b8:	4dc05426 	beq	r9,r23,80e40c <__divdf3+0x8b4>
  80e2bc:	1011883a 	mov	r8,r2
  80e2c0:	003f8906 	br	80e0e8 <__alt_mem_onchip_mem+0xff78e0e8>
  80e2c4:	023fffc4 	movi	r8,-1
  80e2c8:	003f8806 	br	80e0ec <__alt_mem_onchip_mem+0xff78e0ec>
  80e2cc:	1811883a 	mov	r8,r3
  80e2d0:	003f5406 	br	80e024 <__alt_mem_onchip_mem+0xff78e024>
  80e2d4:	1025883a 	mov	r18,r2
  80e2d8:	003f6d06 	br	80e090 <__alt_mem_onchip_mem+0xff78e090>
  80e2dc:	b827883a 	mov	r19,r23
  80e2e0:	003f8206 	br	80e0ec <__alt_mem_onchip_mem+0xff78e0ec>
  80e2e4:	010007c4 	movi	r4,31
  80e2e8:	20c02616 	blt	r4,r3,80e384 <__divdf3+0x82c>
  80e2ec:	00800804 	movi	r2,32
  80e2f0:	10c5c83a 	sub	r2,r2,r3
  80e2f4:	888a983a 	sll	r5,r17,r2
  80e2f8:	40c8d83a 	srl	r4,r8,r3
  80e2fc:	4084983a 	sll	r2,r8,r2
  80e300:	88e2d83a 	srl	r17,r17,r3
  80e304:	2906b03a 	or	r3,r5,r4
  80e308:	1004c03a 	cmpne	r2,r2,zero
  80e30c:	1886b03a 	or	r3,r3,r2
  80e310:	188001cc 	andi	r2,r3,7
  80e314:	10000726 	beq	r2,zero,80e334 <__divdf3+0x7dc>
  80e318:	188003cc 	andi	r2,r3,15
  80e31c:	01000104 	movi	r4,4
  80e320:	11000426 	beq	r2,r4,80e334 <__divdf3+0x7dc>
  80e324:	1805883a 	mov	r2,r3
  80e328:	10c00104 	addi	r3,r2,4
  80e32c:	1885803a 	cmpltu	r2,r3,r2
  80e330:	88a3883a 	add	r17,r17,r2
  80e334:	8880202c 	andhi	r2,r17,128
  80e338:	10002726 	beq	r2,zero,80e3d8 <__divdf3+0x880>
  80e33c:	98c0004c 	andi	r3,r19,1
  80e340:	00800044 	movi	r2,1
  80e344:	000b883a 	mov	r5,zero
  80e348:	0025883a 	mov	r18,zero
  80e34c:	003e6106 	br	80dcd4 <__alt_mem_onchip_mem+0xff78dcd4>
  80e350:	85a1883a 	add	r16,r16,r22
  80e354:	8585803a 	cmpltu	r2,r16,r22
  80e358:	1705883a 	add	r2,r2,fp
  80e35c:	14a5883a 	add	r18,r2,r18
  80e360:	8c7fff84 	addi	r17,r17,-2
  80e364:	003f1106 	br	80dfac <__alt_mem_onchip_mem+0xff78dfac>
  80e368:	b589883a 	add	r4,r22,r22
  80e36c:	25ad803a 	cmpltu	r22,r4,r22
  80e370:	b739883a 	add	fp,r22,fp
  80e374:	40bfff84 	addi	r2,r8,-2
  80e378:	bf2f883a 	add	r23,r23,fp
  80e37c:	202d883a 	mov	r22,r4
  80e380:	003f9306 	br	80e1d0 <__alt_mem_onchip_mem+0xff78e1d0>
  80e384:	013ff844 	movi	r4,-31
  80e388:	2085c83a 	sub	r2,r4,r2
  80e38c:	8888d83a 	srl	r4,r17,r2
  80e390:	00800804 	movi	r2,32
  80e394:	18802126 	beq	r3,r2,80e41c <__divdf3+0x8c4>
  80e398:	00801004 	movi	r2,64
  80e39c:	10c5c83a 	sub	r2,r2,r3
  80e3a0:	8884983a 	sll	r2,r17,r2
  80e3a4:	1204b03a 	or	r2,r2,r8
  80e3a8:	1004c03a 	cmpne	r2,r2,zero
  80e3ac:	2084b03a 	or	r2,r4,r2
  80e3b0:	144001cc 	andi	r17,r2,7
  80e3b4:	88000d1e 	bne	r17,zero,80e3ec <__divdf3+0x894>
  80e3b8:	000b883a 	mov	r5,zero
  80e3bc:	1024d0fa 	srli	r18,r2,3
  80e3c0:	98c0004c 	andi	r3,r19,1
  80e3c4:	0005883a 	mov	r2,zero
  80e3c8:	9464b03a 	or	r18,r18,r17
  80e3cc:	003e4106 	br	80dcd4 <__alt_mem_onchip_mem+0xff78dcd4>
  80e3d0:	1007883a 	mov	r3,r2
  80e3d4:	0023883a 	mov	r17,zero
  80e3d8:	880a927a 	slli	r5,r17,9
  80e3dc:	1805883a 	mov	r2,r3
  80e3e0:	8822977a 	slli	r17,r17,29
  80e3e4:	280ad33a 	srli	r5,r5,12
  80e3e8:	003ff406 	br	80e3bc <__alt_mem_onchip_mem+0xff78e3bc>
  80e3ec:	10c003cc 	andi	r3,r2,15
  80e3f0:	01000104 	movi	r4,4
  80e3f4:	193ff626 	beq	r3,r4,80e3d0 <__alt_mem_onchip_mem+0xff78e3d0>
  80e3f8:	0023883a 	mov	r17,zero
  80e3fc:	003fca06 	br	80e328 <__alt_mem_onchip_mem+0xff78e328>
  80e400:	813fd336 	bltu	r16,r4,80e350 <__alt_mem_onchip_mem+0xff78e350>
  80e404:	1023883a 	mov	r17,r2
  80e408:	003fa806 	br	80e2ac <__alt_mem_onchip_mem+0xff78e2ac>
  80e40c:	b0ffd636 	bltu	r22,r3,80e368 <__alt_mem_onchip_mem+0xff78e368>
  80e410:	1011883a 	mov	r8,r2
  80e414:	b0ff341e 	bne	r22,r3,80e0e8 <__alt_mem_onchip_mem+0xff78e0e8>
  80e418:	003f3406 	br	80e0ec <__alt_mem_onchip_mem+0xff78e0ec>
  80e41c:	0005883a 	mov	r2,zero
  80e420:	003fe006 	br	80e3a4 <__alt_mem_onchip_mem+0xff78e3a4>
  80e424:	00800434 	movhi	r2,16
  80e428:	89400234 	orhi	r5,r17,8
  80e42c:	10bfffc4 	addi	r2,r2,-1
  80e430:	b807883a 	mov	r3,r23
  80e434:	288a703a 	and	r5,r5,r2
  80e438:	4025883a 	mov	r18,r8
  80e43c:	003e8206 	br	80de48 <__alt_mem_onchip_mem+0xff78de48>

0080e440 <__eqdf2>:
  80e440:	2804d53a 	srli	r2,r5,20
  80e444:	3806d53a 	srli	r3,r7,20
  80e448:	02000434 	movhi	r8,16
  80e44c:	423fffc4 	addi	r8,r8,-1
  80e450:	1081ffcc 	andi	r2,r2,2047
  80e454:	0281ffc4 	movi	r10,2047
  80e458:	2a12703a 	and	r9,r5,r8
  80e45c:	18c1ffcc 	andi	r3,r3,2047
  80e460:	3a10703a 	and	r8,r7,r8
  80e464:	280ad7fa 	srli	r5,r5,31
  80e468:	380ed7fa 	srli	r7,r7,31
  80e46c:	12801026 	beq	r2,r10,80e4b0 <__eqdf2+0x70>
  80e470:	0281ffc4 	movi	r10,2047
  80e474:	1a800a26 	beq	r3,r10,80e4a0 <__eqdf2+0x60>
  80e478:	10c00226 	beq	r2,r3,80e484 <__eqdf2+0x44>
  80e47c:	00800044 	movi	r2,1
  80e480:	f800283a 	ret
  80e484:	4a3ffd1e 	bne	r9,r8,80e47c <__alt_mem_onchip_mem+0xff78e47c>
  80e488:	21bffc1e 	bne	r4,r6,80e47c <__alt_mem_onchip_mem+0xff78e47c>
  80e48c:	29c00c26 	beq	r5,r7,80e4c0 <__eqdf2+0x80>
  80e490:	103ffa1e 	bne	r2,zero,80e47c <__alt_mem_onchip_mem+0xff78e47c>
  80e494:	2244b03a 	or	r2,r4,r9
  80e498:	1004c03a 	cmpne	r2,r2,zero
  80e49c:	f800283a 	ret
  80e4a0:	3214b03a 	or	r10,r6,r8
  80e4a4:	503ff426 	beq	r10,zero,80e478 <__alt_mem_onchip_mem+0xff78e478>
  80e4a8:	00800044 	movi	r2,1
  80e4ac:	f800283a 	ret
  80e4b0:	2254b03a 	or	r10,r4,r9
  80e4b4:	503fee26 	beq	r10,zero,80e470 <__alt_mem_onchip_mem+0xff78e470>
  80e4b8:	00800044 	movi	r2,1
  80e4bc:	f800283a 	ret
  80e4c0:	0005883a 	mov	r2,zero
  80e4c4:	f800283a 	ret

0080e4c8 <__gedf2>:
  80e4c8:	2804d53a 	srli	r2,r5,20
  80e4cc:	3806d53a 	srli	r3,r7,20
  80e4d0:	02000434 	movhi	r8,16
  80e4d4:	423fffc4 	addi	r8,r8,-1
  80e4d8:	1081ffcc 	andi	r2,r2,2047
  80e4dc:	0241ffc4 	movi	r9,2047
  80e4e0:	2a14703a 	and	r10,r5,r8
  80e4e4:	18c1ffcc 	andi	r3,r3,2047
  80e4e8:	3a10703a 	and	r8,r7,r8
  80e4ec:	280ad7fa 	srli	r5,r5,31
  80e4f0:	380ed7fa 	srli	r7,r7,31
  80e4f4:	12401d26 	beq	r2,r9,80e56c <__gedf2+0xa4>
  80e4f8:	0241ffc4 	movi	r9,2047
  80e4fc:	1a401226 	beq	r3,r9,80e548 <__gedf2+0x80>
  80e500:	1000081e 	bne	r2,zero,80e524 <__gedf2+0x5c>
  80e504:	2296b03a 	or	r11,r4,r10
  80e508:	5813003a 	cmpeq	r9,r11,zero
  80e50c:	1800091e 	bne	r3,zero,80e534 <__gedf2+0x6c>
  80e510:	3218b03a 	or	r12,r6,r8
  80e514:	6000071e 	bne	r12,zero,80e534 <__gedf2+0x6c>
  80e518:	0005883a 	mov	r2,zero
  80e51c:	5800101e 	bne	r11,zero,80e560 <__gedf2+0x98>
  80e520:	f800283a 	ret
  80e524:	18000c1e 	bne	r3,zero,80e558 <__gedf2+0x90>
  80e528:	3212b03a 	or	r9,r6,r8
  80e52c:	48000c26 	beq	r9,zero,80e560 <__gedf2+0x98>
  80e530:	0013883a 	mov	r9,zero
  80e534:	39c03fcc 	andi	r7,r7,255
  80e538:	48000826 	beq	r9,zero,80e55c <__gedf2+0x94>
  80e53c:	38000926 	beq	r7,zero,80e564 <__gedf2+0x9c>
  80e540:	00800044 	movi	r2,1
  80e544:	f800283a 	ret
  80e548:	3212b03a 	or	r9,r6,r8
  80e54c:	483fec26 	beq	r9,zero,80e500 <__alt_mem_onchip_mem+0xff78e500>
  80e550:	00bfff84 	movi	r2,-2
  80e554:	f800283a 	ret
  80e558:	39c03fcc 	andi	r7,r7,255
  80e55c:	29c00626 	beq	r5,r7,80e578 <__gedf2+0xb0>
  80e560:	283ff726 	beq	r5,zero,80e540 <__alt_mem_onchip_mem+0xff78e540>
  80e564:	00bfffc4 	movi	r2,-1
  80e568:	f800283a 	ret
  80e56c:	2292b03a 	or	r9,r4,r10
  80e570:	483fe126 	beq	r9,zero,80e4f8 <__alt_mem_onchip_mem+0xff78e4f8>
  80e574:	003ff606 	br	80e550 <__alt_mem_onchip_mem+0xff78e550>
  80e578:	18bff916 	blt	r3,r2,80e560 <__alt_mem_onchip_mem+0xff78e560>
  80e57c:	10c00316 	blt	r2,r3,80e58c <__gedf2+0xc4>
  80e580:	42bff736 	bltu	r8,r10,80e560 <__alt_mem_onchip_mem+0xff78e560>
  80e584:	52000326 	beq	r10,r8,80e594 <__gedf2+0xcc>
  80e588:	5200042e 	bgeu	r10,r8,80e59c <__gedf2+0xd4>
  80e58c:	283fec1e 	bne	r5,zero,80e540 <__alt_mem_onchip_mem+0xff78e540>
  80e590:	003ff406 	br	80e564 <__alt_mem_onchip_mem+0xff78e564>
  80e594:	313ff236 	bltu	r6,r4,80e560 <__alt_mem_onchip_mem+0xff78e560>
  80e598:	21bffc36 	bltu	r4,r6,80e58c <__alt_mem_onchip_mem+0xff78e58c>
  80e59c:	0005883a 	mov	r2,zero
  80e5a0:	f800283a 	ret

0080e5a4 <__ledf2>:
  80e5a4:	2804d53a 	srli	r2,r5,20
  80e5a8:	3810d53a 	srli	r8,r7,20
  80e5ac:	00c00434 	movhi	r3,16
  80e5b0:	18ffffc4 	addi	r3,r3,-1
  80e5b4:	1081ffcc 	andi	r2,r2,2047
  80e5b8:	0241ffc4 	movi	r9,2047
  80e5bc:	28d4703a 	and	r10,r5,r3
  80e5c0:	4201ffcc 	andi	r8,r8,2047
  80e5c4:	38c6703a 	and	r3,r7,r3
  80e5c8:	280ad7fa 	srli	r5,r5,31
  80e5cc:	380ed7fa 	srli	r7,r7,31
  80e5d0:	12401f26 	beq	r2,r9,80e650 <__ledf2+0xac>
  80e5d4:	0241ffc4 	movi	r9,2047
  80e5d8:	42401426 	beq	r8,r9,80e62c <__ledf2+0x88>
  80e5dc:	1000091e 	bne	r2,zero,80e604 <__ledf2+0x60>
  80e5e0:	2296b03a 	or	r11,r4,r10
  80e5e4:	5813003a 	cmpeq	r9,r11,zero
  80e5e8:	29403fcc 	andi	r5,r5,255
  80e5ec:	40000a1e 	bne	r8,zero,80e618 <__ledf2+0x74>
  80e5f0:	30d8b03a 	or	r12,r6,r3
  80e5f4:	6000081e 	bne	r12,zero,80e618 <__ledf2+0x74>
  80e5f8:	0005883a 	mov	r2,zero
  80e5fc:	5800111e 	bne	r11,zero,80e644 <__ledf2+0xa0>
  80e600:	f800283a 	ret
  80e604:	29403fcc 	andi	r5,r5,255
  80e608:	40000c1e 	bne	r8,zero,80e63c <__ledf2+0x98>
  80e60c:	30d2b03a 	or	r9,r6,r3
  80e610:	48000c26 	beq	r9,zero,80e644 <__ledf2+0xa0>
  80e614:	0013883a 	mov	r9,zero
  80e618:	39c03fcc 	andi	r7,r7,255
  80e61c:	48000826 	beq	r9,zero,80e640 <__ledf2+0x9c>
  80e620:	38001126 	beq	r7,zero,80e668 <__ledf2+0xc4>
  80e624:	00800044 	movi	r2,1
  80e628:	f800283a 	ret
  80e62c:	30d2b03a 	or	r9,r6,r3
  80e630:	483fea26 	beq	r9,zero,80e5dc <__alt_mem_onchip_mem+0xff78e5dc>
  80e634:	00800084 	movi	r2,2
  80e638:	f800283a 	ret
  80e63c:	39c03fcc 	andi	r7,r7,255
  80e640:	39400726 	beq	r7,r5,80e660 <__ledf2+0xbc>
  80e644:	2800081e 	bne	r5,zero,80e668 <__ledf2+0xc4>
  80e648:	00800044 	movi	r2,1
  80e64c:	f800283a 	ret
  80e650:	2292b03a 	or	r9,r4,r10
  80e654:	483fdf26 	beq	r9,zero,80e5d4 <__alt_mem_onchip_mem+0xff78e5d4>
  80e658:	00800084 	movi	r2,2
  80e65c:	f800283a 	ret
  80e660:	4080030e 	bge	r8,r2,80e670 <__ledf2+0xcc>
  80e664:	383fef26 	beq	r7,zero,80e624 <__alt_mem_onchip_mem+0xff78e624>
  80e668:	00bfffc4 	movi	r2,-1
  80e66c:	f800283a 	ret
  80e670:	123feb16 	blt	r2,r8,80e620 <__alt_mem_onchip_mem+0xff78e620>
  80e674:	1abff336 	bltu	r3,r10,80e644 <__alt_mem_onchip_mem+0xff78e644>
  80e678:	50c00326 	beq	r10,r3,80e688 <__ledf2+0xe4>
  80e67c:	50c0042e 	bgeu	r10,r3,80e690 <__ledf2+0xec>
  80e680:	283fe81e 	bne	r5,zero,80e624 <__alt_mem_onchip_mem+0xff78e624>
  80e684:	003ff806 	br	80e668 <__alt_mem_onchip_mem+0xff78e668>
  80e688:	313fee36 	bltu	r6,r4,80e644 <__alt_mem_onchip_mem+0xff78e644>
  80e68c:	21bffc36 	bltu	r4,r6,80e680 <__alt_mem_onchip_mem+0xff78e680>
  80e690:	0005883a 	mov	r2,zero
  80e694:	f800283a 	ret

0080e698 <__muldf3>:
  80e698:	defff304 	addi	sp,sp,-52
  80e69c:	2804d53a 	srli	r2,r5,20
  80e6a0:	dd800915 	stw	r22,36(sp)
  80e6a4:	282cd7fa 	srli	r22,r5,31
  80e6a8:	dc000315 	stw	r16,12(sp)
  80e6ac:	04000434 	movhi	r16,16
  80e6b0:	dd400815 	stw	r21,32(sp)
  80e6b4:	dc800515 	stw	r18,20(sp)
  80e6b8:	843fffc4 	addi	r16,r16,-1
  80e6bc:	dfc00c15 	stw	ra,48(sp)
  80e6c0:	df000b15 	stw	fp,44(sp)
  80e6c4:	ddc00a15 	stw	r23,40(sp)
  80e6c8:	dd000715 	stw	r20,28(sp)
  80e6cc:	dcc00615 	stw	r19,24(sp)
  80e6d0:	dc400415 	stw	r17,16(sp)
  80e6d4:	1481ffcc 	andi	r18,r2,2047
  80e6d8:	2c20703a 	and	r16,r5,r16
  80e6dc:	b02b883a 	mov	r21,r22
  80e6e0:	b2403fcc 	andi	r9,r22,255
  80e6e4:	90006026 	beq	r18,zero,80e868 <__muldf3+0x1d0>
  80e6e8:	0081ffc4 	movi	r2,2047
  80e6ec:	2029883a 	mov	r20,r4
  80e6f0:	90803626 	beq	r18,r2,80e7cc <__muldf3+0x134>
  80e6f4:	80800434 	orhi	r2,r16,16
  80e6f8:	100490fa 	slli	r2,r2,3
  80e6fc:	2020d77a 	srli	r16,r4,29
  80e700:	202890fa 	slli	r20,r4,3
  80e704:	94bf0044 	addi	r18,r18,-1023
  80e708:	80a0b03a 	or	r16,r16,r2
  80e70c:	0027883a 	mov	r19,zero
  80e710:	0039883a 	mov	fp,zero
  80e714:	3804d53a 	srli	r2,r7,20
  80e718:	382ed7fa 	srli	r23,r7,31
  80e71c:	04400434 	movhi	r17,16
  80e720:	8c7fffc4 	addi	r17,r17,-1
  80e724:	1081ffcc 	andi	r2,r2,2047
  80e728:	3011883a 	mov	r8,r6
  80e72c:	3c62703a 	and	r17,r7,r17
  80e730:	ba803fcc 	andi	r10,r23,255
  80e734:	10006d26 	beq	r2,zero,80e8ec <__muldf3+0x254>
  80e738:	00c1ffc4 	movi	r3,2047
  80e73c:	10c06526 	beq	r2,r3,80e8d4 <__muldf3+0x23c>
  80e740:	88c00434 	orhi	r3,r17,16
  80e744:	180690fa 	slli	r3,r3,3
  80e748:	3022d77a 	srli	r17,r6,29
  80e74c:	301090fa 	slli	r8,r6,3
  80e750:	10bf0044 	addi	r2,r2,-1023
  80e754:	88e2b03a 	or	r17,r17,r3
  80e758:	000b883a 	mov	r5,zero
  80e75c:	9085883a 	add	r2,r18,r2
  80e760:	2cc8b03a 	or	r4,r5,r19
  80e764:	00c003c4 	movi	r3,15
  80e768:	bdacf03a 	xor	r22,r23,r22
  80e76c:	12c00044 	addi	r11,r2,1
  80e770:	19009936 	bltu	r3,r4,80e9d8 <__muldf3+0x340>
  80e774:	200890ba 	slli	r4,r4,2
  80e778:	00c02074 	movhi	r3,129
  80e77c:	18f9e304 	addi	r3,r3,-6260
  80e780:	20c9883a 	add	r4,r4,r3
  80e784:	20c00017 	ldw	r3,0(r4)
  80e788:	1800683a 	jmp	r3
  80e78c:	0080e9d8 	cmpnei	r2,zero,935
  80e790:	0080e7ec 	andhi	r2,zero,927
  80e794:	0080e7ec 	andhi	r2,zero,927
  80e798:	0080e7e8 	cmpgeui	r2,zero,927
  80e79c:	0080e9b4 	movhi	r2,934
  80e7a0:	0080e9b4 	movhi	r2,934
  80e7a4:	0080e99c 	xori	r2,zero,934
  80e7a8:	0080e7e8 	cmpgeui	r2,zero,927
  80e7ac:	0080e9b4 	movhi	r2,934
  80e7b0:	0080e99c 	xori	r2,zero,934
  80e7b4:	0080e9b4 	movhi	r2,934
  80e7b8:	0080e7e8 	cmpgeui	r2,zero,927
  80e7bc:	0080e9c4 	movi	r2,935
  80e7c0:	0080e9c4 	movi	r2,935
  80e7c4:	0080e9c4 	movi	r2,935
  80e7c8:	0080ebe0 	cmpeqi	r2,zero,943
  80e7cc:	2404b03a 	or	r2,r4,r16
  80e7d0:	10006f1e 	bne	r2,zero,80e990 <__muldf3+0x2f8>
  80e7d4:	04c00204 	movi	r19,8
  80e7d8:	0021883a 	mov	r16,zero
  80e7dc:	0029883a 	mov	r20,zero
  80e7e0:	07000084 	movi	fp,2
  80e7e4:	003fcb06 	br	80e714 <__alt_mem_onchip_mem+0xff78e714>
  80e7e8:	502d883a 	mov	r22,r10
  80e7ec:	00800084 	movi	r2,2
  80e7f0:	28805726 	beq	r5,r2,80e950 <__muldf3+0x2b8>
  80e7f4:	008000c4 	movi	r2,3
  80e7f8:	28816626 	beq	r5,r2,80ed94 <__muldf3+0x6fc>
  80e7fc:	00800044 	movi	r2,1
  80e800:	2881411e 	bne	r5,r2,80ed08 <__muldf3+0x670>
  80e804:	b02b883a 	mov	r21,r22
  80e808:	0005883a 	mov	r2,zero
  80e80c:	000b883a 	mov	r5,zero
  80e810:	0029883a 	mov	r20,zero
  80e814:	1004953a 	slli	r2,r2,20
  80e818:	a8c03fcc 	andi	r3,r21,255
  80e81c:	04400434 	movhi	r17,16
  80e820:	8c7fffc4 	addi	r17,r17,-1
  80e824:	180697fa 	slli	r3,r3,31
  80e828:	2c4a703a 	and	r5,r5,r17
  80e82c:	288ab03a 	or	r5,r5,r2
  80e830:	28c6b03a 	or	r3,r5,r3
  80e834:	a005883a 	mov	r2,r20
  80e838:	dfc00c17 	ldw	ra,48(sp)
  80e83c:	df000b17 	ldw	fp,44(sp)
  80e840:	ddc00a17 	ldw	r23,40(sp)
  80e844:	dd800917 	ldw	r22,36(sp)
  80e848:	dd400817 	ldw	r21,32(sp)
  80e84c:	dd000717 	ldw	r20,28(sp)
  80e850:	dcc00617 	ldw	r19,24(sp)
  80e854:	dc800517 	ldw	r18,20(sp)
  80e858:	dc400417 	ldw	r17,16(sp)
  80e85c:	dc000317 	ldw	r16,12(sp)
  80e860:	dec00d04 	addi	sp,sp,52
  80e864:	f800283a 	ret
  80e868:	2404b03a 	or	r2,r4,r16
  80e86c:	2027883a 	mov	r19,r4
  80e870:	10004226 	beq	r2,zero,80e97c <__muldf3+0x2e4>
  80e874:	8000fc26 	beq	r16,zero,80ec68 <__muldf3+0x5d0>
  80e878:	8009883a 	mov	r4,r16
  80e87c:	d9800215 	stw	r6,8(sp)
  80e880:	d9c00015 	stw	r7,0(sp)
  80e884:	da400115 	stw	r9,4(sp)
  80e888:	080f8b00 	call	80f8b0 <__clzsi2>
  80e88c:	d9800217 	ldw	r6,8(sp)
  80e890:	d9c00017 	ldw	r7,0(sp)
  80e894:	da400117 	ldw	r9,4(sp)
  80e898:	113ffd44 	addi	r4,r2,-11
  80e89c:	00c00704 	movi	r3,28
  80e8a0:	1900ed16 	blt	r3,r4,80ec58 <__muldf3+0x5c0>
  80e8a4:	00c00744 	movi	r3,29
  80e8a8:	147ffe04 	addi	r17,r2,-8
  80e8ac:	1907c83a 	sub	r3,r3,r4
  80e8b0:	8460983a 	sll	r16,r16,r17
  80e8b4:	98c6d83a 	srl	r3,r19,r3
  80e8b8:	9c68983a 	sll	r20,r19,r17
  80e8bc:	1c20b03a 	or	r16,r3,r16
  80e8c0:	1080fcc4 	addi	r2,r2,1011
  80e8c4:	00a5c83a 	sub	r18,zero,r2
  80e8c8:	0027883a 	mov	r19,zero
  80e8cc:	0039883a 	mov	fp,zero
  80e8d0:	003f9006 	br	80e714 <__alt_mem_onchip_mem+0xff78e714>
  80e8d4:	3446b03a 	or	r3,r6,r17
  80e8d8:	1800261e 	bne	r3,zero,80e974 <__muldf3+0x2dc>
  80e8dc:	0023883a 	mov	r17,zero
  80e8e0:	0011883a 	mov	r8,zero
  80e8e4:	01400084 	movi	r5,2
  80e8e8:	003f9c06 	br	80e75c <__alt_mem_onchip_mem+0xff78e75c>
  80e8ec:	3446b03a 	or	r3,r6,r17
  80e8f0:	18001c26 	beq	r3,zero,80e964 <__muldf3+0x2cc>
  80e8f4:	8800ce26 	beq	r17,zero,80ec30 <__muldf3+0x598>
  80e8f8:	8809883a 	mov	r4,r17
  80e8fc:	d9800215 	stw	r6,8(sp)
  80e900:	da400115 	stw	r9,4(sp)
  80e904:	da800015 	stw	r10,0(sp)
  80e908:	080f8b00 	call	80f8b0 <__clzsi2>
  80e90c:	d9800217 	ldw	r6,8(sp)
  80e910:	da400117 	ldw	r9,4(sp)
  80e914:	da800017 	ldw	r10,0(sp)
  80e918:	113ffd44 	addi	r4,r2,-11
  80e91c:	00c00704 	movi	r3,28
  80e920:	1900bf16 	blt	r3,r4,80ec20 <__muldf3+0x588>
  80e924:	00c00744 	movi	r3,29
  80e928:	123ffe04 	addi	r8,r2,-8
  80e92c:	1907c83a 	sub	r3,r3,r4
  80e930:	8a22983a 	sll	r17,r17,r8
  80e934:	30c6d83a 	srl	r3,r6,r3
  80e938:	3210983a 	sll	r8,r6,r8
  80e93c:	1c62b03a 	or	r17,r3,r17
  80e940:	1080fcc4 	addi	r2,r2,1011
  80e944:	0085c83a 	sub	r2,zero,r2
  80e948:	000b883a 	mov	r5,zero
  80e94c:	003f8306 	br	80e75c <__alt_mem_onchip_mem+0xff78e75c>
  80e950:	b02b883a 	mov	r21,r22
  80e954:	0081ffc4 	movi	r2,2047
  80e958:	000b883a 	mov	r5,zero
  80e95c:	0029883a 	mov	r20,zero
  80e960:	003fac06 	br	80e814 <__alt_mem_onchip_mem+0xff78e814>
  80e964:	0023883a 	mov	r17,zero
  80e968:	0011883a 	mov	r8,zero
  80e96c:	01400044 	movi	r5,1
  80e970:	003f7a06 	br	80e75c <__alt_mem_onchip_mem+0xff78e75c>
  80e974:	014000c4 	movi	r5,3
  80e978:	003f7806 	br	80e75c <__alt_mem_onchip_mem+0xff78e75c>
  80e97c:	04c00104 	movi	r19,4
  80e980:	0021883a 	mov	r16,zero
  80e984:	0029883a 	mov	r20,zero
  80e988:	07000044 	movi	fp,1
  80e98c:	003f6106 	br	80e714 <__alt_mem_onchip_mem+0xff78e714>
  80e990:	04c00304 	movi	r19,12
  80e994:	070000c4 	movi	fp,3
  80e998:	003f5e06 	br	80e714 <__alt_mem_onchip_mem+0xff78e714>
  80e99c:	01400434 	movhi	r5,16
  80e9a0:	002b883a 	mov	r21,zero
  80e9a4:	297fffc4 	addi	r5,r5,-1
  80e9a8:	053fffc4 	movi	r20,-1
  80e9ac:	0081ffc4 	movi	r2,2047
  80e9b0:	003f9806 	br	80e814 <__alt_mem_onchip_mem+0xff78e814>
  80e9b4:	8023883a 	mov	r17,r16
  80e9b8:	a011883a 	mov	r8,r20
  80e9bc:	e00b883a 	mov	r5,fp
  80e9c0:	003f8a06 	br	80e7ec <__alt_mem_onchip_mem+0xff78e7ec>
  80e9c4:	8023883a 	mov	r17,r16
  80e9c8:	a011883a 	mov	r8,r20
  80e9cc:	482d883a 	mov	r22,r9
  80e9d0:	e00b883a 	mov	r5,fp
  80e9d4:	003f8506 	br	80e7ec <__alt_mem_onchip_mem+0xff78e7ec>
  80e9d8:	a00ad43a 	srli	r5,r20,16
  80e9dc:	401ad43a 	srli	r13,r8,16
  80e9e0:	a53fffcc 	andi	r20,r20,65535
  80e9e4:	423fffcc 	andi	r8,r8,65535
  80e9e8:	4519383a 	mul	r12,r8,r20
  80e9ec:	4147383a 	mul	r3,r8,r5
  80e9f0:	6d09383a 	mul	r4,r13,r20
  80e9f4:	600cd43a 	srli	r6,r12,16
  80e9f8:	2b5d383a 	mul	r14,r5,r13
  80e9fc:	20c9883a 	add	r4,r4,r3
  80ea00:	310d883a 	add	r6,r6,r4
  80ea04:	30c0022e 	bgeu	r6,r3,80ea10 <__muldf3+0x378>
  80ea08:	00c00074 	movhi	r3,1
  80ea0c:	70dd883a 	add	r14,r14,r3
  80ea10:	8826d43a 	srli	r19,r17,16
  80ea14:	8bffffcc 	andi	r15,r17,65535
  80ea18:	7d23383a 	mul	r17,r15,r20
  80ea1c:	7949383a 	mul	r4,r15,r5
  80ea20:	9d29383a 	mul	r20,r19,r20
  80ea24:	8814d43a 	srli	r10,r17,16
  80ea28:	3012943a 	slli	r9,r6,16
  80ea2c:	a129883a 	add	r20,r20,r4
  80ea30:	633fffcc 	andi	r12,r12,65535
  80ea34:	5515883a 	add	r10,r10,r20
  80ea38:	3006d43a 	srli	r3,r6,16
  80ea3c:	4b13883a 	add	r9,r9,r12
  80ea40:	2ccb383a 	mul	r5,r5,r19
  80ea44:	5100022e 	bgeu	r10,r4,80ea50 <__muldf3+0x3b8>
  80ea48:	01000074 	movhi	r4,1
  80ea4c:	290b883a 	add	r5,r5,r4
  80ea50:	802ad43a 	srli	r21,r16,16
  80ea54:	843fffcc 	andi	r16,r16,65535
  80ea58:	440d383a 	mul	r6,r8,r16
  80ea5c:	4565383a 	mul	r18,r8,r21
  80ea60:	8349383a 	mul	r4,r16,r13
  80ea64:	500e943a 	slli	r7,r10,16
  80ea68:	3010d43a 	srli	r8,r6,16
  80ea6c:	5028d43a 	srli	r20,r10,16
  80ea70:	2489883a 	add	r4,r4,r18
  80ea74:	8abfffcc 	andi	r10,r17,65535
  80ea78:	3a95883a 	add	r10,r7,r10
  80ea7c:	4119883a 	add	r12,r8,r4
  80ea80:	a169883a 	add	r20,r20,r5
  80ea84:	1a87883a 	add	r3,r3,r10
  80ea88:	6d5b383a 	mul	r13,r13,r21
  80ea8c:	6480022e 	bgeu	r12,r18,80ea98 <__muldf3+0x400>
  80ea90:	01000074 	movhi	r4,1
  80ea94:	691b883a 	add	r13,r13,r4
  80ea98:	7c25383a 	mul	r18,r15,r16
  80ea9c:	7d4b383a 	mul	r5,r15,r21
  80eaa0:	84cf383a 	mul	r7,r16,r19
  80eaa4:	901ed43a 	srli	r15,r18,16
  80eaa8:	6008d43a 	srli	r4,r12,16
  80eaac:	6010943a 	slli	r8,r12,16
  80eab0:	394f883a 	add	r7,r7,r5
  80eab4:	333fffcc 	andi	r12,r6,65535
  80eab8:	79df883a 	add	r15,r15,r7
  80eabc:	235b883a 	add	r13,r4,r13
  80eac0:	9d63383a 	mul	r17,r19,r21
  80eac4:	4309883a 	add	r4,r8,r12
  80eac8:	7940022e 	bgeu	r15,r5,80ead4 <__muldf3+0x43c>
  80eacc:	01400074 	movhi	r5,1
  80ead0:	8963883a 	add	r17,r17,r5
  80ead4:	780a943a 	slli	r5,r15,16
  80ead8:	91bfffcc 	andi	r6,r18,65535
  80eadc:	70c7883a 	add	r3,r14,r3
  80eae0:	298d883a 	add	r6,r5,r6
  80eae4:	1a8f803a 	cmpltu	r7,r3,r10
  80eae8:	350b883a 	add	r5,r6,r20
  80eaec:	20c7883a 	add	r3,r4,r3
  80eaf0:	3955883a 	add	r10,r7,r5
  80eaf4:	1909803a 	cmpltu	r4,r3,r4
  80eaf8:	6a91883a 	add	r8,r13,r10
  80eafc:	780cd43a 	srli	r6,r15,16
  80eb00:	2219883a 	add	r12,r4,r8
  80eb04:	2d0b803a 	cmpltu	r5,r5,r20
  80eb08:	51cf803a 	cmpltu	r7,r10,r7
  80eb0c:	29ceb03a 	or	r7,r5,r7
  80eb10:	4351803a 	cmpltu	r8,r8,r13
  80eb14:	610b803a 	cmpltu	r5,r12,r4
  80eb18:	4148b03a 	or	r4,r8,r5
  80eb1c:	398f883a 	add	r7,r7,r6
  80eb20:	3909883a 	add	r4,r7,r4
  80eb24:	1810927a 	slli	r8,r3,9
  80eb28:	2449883a 	add	r4,r4,r17
  80eb2c:	2008927a 	slli	r4,r4,9
  80eb30:	6022d5fa 	srli	r17,r12,23
  80eb34:	1806d5fa 	srli	r3,r3,23
  80eb38:	4252b03a 	or	r9,r8,r9
  80eb3c:	600a927a 	slli	r5,r12,9
  80eb40:	4810c03a 	cmpne	r8,r9,zero
  80eb44:	2462b03a 	or	r17,r4,r17
  80eb48:	40c6b03a 	or	r3,r8,r3
  80eb4c:	8900402c 	andhi	r4,r17,256
  80eb50:	1950b03a 	or	r8,r3,r5
  80eb54:	20000726 	beq	r4,zero,80eb74 <__muldf3+0x4dc>
  80eb58:	4006d07a 	srli	r3,r8,1
  80eb5c:	880497fa 	slli	r2,r17,31
  80eb60:	4200004c 	andi	r8,r8,1
  80eb64:	8822d07a 	srli	r17,r17,1
  80eb68:	1a10b03a 	or	r8,r3,r8
  80eb6c:	1210b03a 	or	r8,r2,r8
  80eb70:	5805883a 	mov	r2,r11
  80eb74:	1140ffc4 	addi	r5,r2,1023
  80eb78:	0140440e 	bge	zero,r5,80ec8c <__muldf3+0x5f4>
  80eb7c:	40c001cc 	andi	r3,r8,7
  80eb80:	18000726 	beq	r3,zero,80eba0 <__muldf3+0x508>
  80eb84:	40c003cc 	andi	r3,r8,15
  80eb88:	01000104 	movi	r4,4
  80eb8c:	19000426 	beq	r3,r4,80eba0 <__muldf3+0x508>
  80eb90:	4107883a 	add	r3,r8,r4
  80eb94:	1a11803a 	cmpltu	r8,r3,r8
  80eb98:	8a23883a 	add	r17,r17,r8
  80eb9c:	1811883a 	mov	r8,r3
  80eba0:	88c0402c 	andhi	r3,r17,256
  80eba4:	18000426 	beq	r3,zero,80ebb8 <__muldf3+0x520>
  80eba8:	11410004 	addi	r5,r2,1024
  80ebac:	00bfc034 	movhi	r2,65280
  80ebb0:	10bfffc4 	addi	r2,r2,-1
  80ebb4:	88a2703a 	and	r17,r17,r2
  80ebb8:	0081ff84 	movi	r2,2046
  80ebbc:	117f6416 	blt	r2,r5,80e950 <__alt_mem_onchip_mem+0xff78e950>
  80ebc0:	8828977a 	slli	r20,r17,29
  80ebc4:	4010d0fa 	srli	r8,r8,3
  80ebc8:	8822927a 	slli	r17,r17,9
  80ebcc:	2881ffcc 	andi	r2,r5,2047
  80ebd0:	a228b03a 	or	r20,r20,r8
  80ebd4:	880ad33a 	srli	r5,r17,12
  80ebd8:	b02b883a 	mov	r21,r22
  80ebdc:	003f0d06 	br	80e814 <__alt_mem_onchip_mem+0xff78e814>
  80ebe0:	8080022c 	andhi	r2,r16,8
  80ebe4:	10000926 	beq	r2,zero,80ec0c <__muldf3+0x574>
  80ebe8:	8880022c 	andhi	r2,r17,8
  80ebec:	1000071e 	bne	r2,zero,80ec0c <__muldf3+0x574>
  80ebf0:	00800434 	movhi	r2,16
  80ebf4:	89400234 	orhi	r5,r17,8
  80ebf8:	10bfffc4 	addi	r2,r2,-1
  80ebfc:	b82b883a 	mov	r21,r23
  80ec00:	288a703a 	and	r5,r5,r2
  80ec04:	4029883a 	mov	r20,r8
  80ec08:	003f6806 	br	80e9ac <__alt_mem_onchip_mem+0xff78e9ac>
  80ec0c:	00800434 	movhi	r2,16
  80ec10:	81400234 	orhi	r5,r16,8
  80ec14:	10bfffc4 	addi	r2,r2,-1
  80ec18:	288a703a 	and	r5,r5,r2
  80ec1c:	003f6306 	br	80e9ac <__alt_mem_onchip_mem+0xff78e9ac>
  80ec20:	147ff604 	addi	r17,r2,-40
  80ec24:	3462983a 	sll	r17,r6,r17
  80ec28:	0011883a 	mov	r8,zero
  80ec2c:	003f4406 	br	80e940 <__alt_mem_onchip_mem+0xff78e940>
  80ec30:	3009883a 	mov	r4,r6
  80ec34:	d9800215 	stw	r6,8(sp)
  80ec38:	da400115 	stw	r9,4(sp)
  80ec3c:	da800015 	stw	r10,0(sp)
  80ec40:	080f8b00 	call	80f8b0 <__clzsi2>
  80ec44:	10800804 	addi	r2,r2,32
  80ec48:	da800017 	ldw	r10,0(sp)
  80ec4c:	da400117 	ldw	r9,4(sp)
  80ec50:	d9800217 	ldw	r6,8(sp)
  80ec54:	003f3006 	br	80e918 <__alt_mem_onchip_mem+0xff78e918>
  80ec58:	143ff604 	addi	r16,r2,-40
  80ec5c:	9c20983a 	sll	r16,r19,r16
  80ec60:	0029883a 	mov	r20,zero
  80ec64:	003f1606 	br	80e8c0 <__alt_mem_onchip_mem+0xff78e8c0>
  80ec68:	d9800215 	stw	r6,8(sp)
  80ec6c:	d9c00015 	stw	r7,0(sp)
  80ec70:	da400115 	stw	r9,4(sp)
  80ec74:	080f8b00 	call	80f8b0 <__clzsi2>
  80ec78:	10800804 	addi	r2,r2,32
  80ec7c:	da400117 	ldw	r9,4(sp)
  80ec80:	d9c00017 	ldw	r7,0(sp)
  80ec84:	d9800217 	ldw	r6,8(sp)
  80ec88:	003f0306 	br	80e898 <__alt_mem_onchip_mem+0xff78e898>
  80ec8c:	00c00044 	movi	r3,1
  80ec90:	1947c83a 	sub	r3,r3,r5
  80ec94:	00800e04 	movi	r2,56
  80ec98:	10feda16 	blt	r2,r3,80e804 <__alt_mem_onchip_mem+0xff78e804>
  80ec9c:	008007c4 	movi	r2,31
  80eca0:	10c01b16 	blt	r2,r3,80ed10 <__muldf3+0x678>
  80eca4:	00800804 	movi	r2,32
  80eca8:	10c5c83a 	sub	r2,r2,r3
  80ecac:	888a983a 	sll	r5,r17,r2
  80ecb0:	40c8d83a 	srl	r4,r8,r3
  80ecb4:	4084983a 	sll	r2,r8,r2
  80ecb8:	88e2d83a 	srl	r17,r17,r3
  80ecbc:	2906b03a 	or	r3,r5,r4
  80ecc0:	1004c03a 	cmpne	r2,r2,zero
  80ecc4:	1886b03a 	or	r3,r3,r2
  80ecc8:	188001cc 	andi	r2,r3,7
  80eccc:	10000726 	beq	r2,zero,80ecec <__muldf3+0x654>
  80ecd0:	188003cc 	andi	r2,r3,15
  80ecd4:	01000104 	movi	r4,4
  80ecd8:	11000426 	beq	r2,r4,80ecec <__muldf3+0x654>
  80ecdc:	1805883a 	mov	r2,r3
  80ece0:	10c00104 	addi	r3,r2,4
  80ece4:	1885803a 	cmpltu	r2,r3,r2
  80ece8:	88a3883a 	add	r17,r17,r2
  80ecec:	8880202c 	andhi	r2,r17,128
  80ecf0:	10001c26 	beq	r2,zero,80ed64 <__muldf3+0x6cc>
  80ecf4:	b02b883a 	mov	r21,r22
  80ecf8:	00800044 	movi	r2,1
  80ecfc:	000b883a 	mov	r5,zero
  80ed00:	0029883a 	mov	r20,zero
  80ed04:	003ec306 	br	80e814 <__alt_mem_onchip_mem+0xff78e814>
  80ed08:	5805883a 	mov	r2,r11
  80ed0c:	003f9906 	br	80eb74 <__alt_mem_onchip_mem+0xff78eb74>
  80ed10:	00bff844 	movi	r2,-31
  80ed14:	1145c83a 	sub	r2,r2,r5
  80ed18:	8888d83a 	srl	r4,r17,r2
  80ed1c:	00800804 	movi	r2,32
  80ed20:	18801a26 	beq	r3,r2,80ed8c <__muldf3+0x6f4>
  80ed24:	00801004 	movi	r2,64
  80ed28:	10c5c83a 	sub	r2,r2,r3
  80ed2c:	8884983a 	sll	r2,r17,r2
  80ed30:	1204b03a 	or	r2,r2,r8
  80ed34:	1004c03a 	cmpne	r2,r2,zero
  80ed38:	2084b03a 	or	r2,r4,r2
  80ed3c:	144001cc 	andi	r17,r2,7
  80ed40:	88000d1e 	bne	r17,zero,80ed78 <__muldf3+0x6e0>
  80ed44:	000b883a 	mov	r5,zero
  80ed48:	1028d0fa 	srli	r20,r2,3
  80ed4c:	b02b883a 	mov	r21,r22
  80ed50:	0005883a 	mov	r2,zero
  80ed54:	a468b03a 	or	r20,r20,r17
  80ed58:	003eae06 	br	80e814 <__alt_mem_onchip_mem+0xff78e814>
  80ed5c:	1007883a 	mov	r3,r2
  80ed60:	0023883a 	mov	r17,zero
  80ed64:	880a927a 	slli	r5,r17,9
  80ed68:	1805883a 	mov	r2,r3
  80ed6c:	8822977a 	slli	r17,r17,29
  80ed70:	280ad33a 	srli	r5,r5,12
  80ed74:	003ff406 	br	80ed48 <__alt_mem_onchip_mem+0xff78ed48>
  80ed78:	10c003cc 	andi	r3,r2,15
  80ed7c:	01000104 	movi	r4,4
  80ed80:	193ff626 	beq	r3,r4,80ed5c <__alt_mem_onchip_mem+0xff78ed5c>
  80ed84:	0023883a 	mov	r17,zero
  80ed88:	003fd506 	br	80ece0 <__alt_mem_onchip_mem+0xff78ece0>
  80ed8c:	0005883a 	mov	r2,zero
  80ed90:	003fe706 	br	80ed30 <__alt_mem_onchip_mem+0xff78ed30>
  80ed94:	00800434 	movhi	r2,16
  80ed98:	89400234 	orhi	r5,r17,8
  80ed9c:	10bfffc4 	addi	r2,r2,-1
  80eda0:	b02b883a 	mov	r21,r22
  80eda4:	288a703a 	and	r5,r5,r2
  80eda8:	4029883a 	mov	r20,r8
  80edac:	003eff06 	br	80e9ac <__alt_mem_onchip_mem+0xff78e9ac>

0080edb0 <__subdf3>:
  80edb0:	02000434 	movhi	r8,16
  80edb4:	423fffc4 	addi	r8,r8,-1
  80edb8:	defffb04 	addi	sp,sp,-20
  80edbc:	2a14703a 	and	r10,r5,r8
  80edc0:	3812d53a 	srli	r9,r7,20
  80edc4:	3a10703a 	and	r8,r7,r8
  80edc8:	2006d77a 	srli	r3,r4,29
  80edcc:	3004d77a 	srli	r2,r6,29
  80edd0:	dc000015 	stw	r16,0(sp)
  80edd4:	501490fa 	slli	r10,r10,3
  80edd8:	2820d53a 	srli	r16,r5,20
  80eddc:	401090fa 	slli	r8,r8,3
  80ede0:	dc800215 	stw	r18,8(sp)
  80ede4:	dc400115 	stw	r17,4(sp)
  80ede8:	dfc00415 	stw	ra,16(sp)
  80edec:	202290fa 	slli	r17,r4,3
  80edf0:	dcc00315 	stw	r19,12(sp)
  80edf4:	4a41ffcc 	andi	r9,r9,2047
  80edf8:	0101ffc4 	movi	r4,2047
  80edfc:	2824d7fa 	srli	r18,r5,31
  80ee00:	8401ffcc 	andi	r16,r16,2047
  80ee04:	50c6b03a 	or	r3,r10,r3
  80ee08:	380ed7fa 	srli	r7,r7,31
  80ee0c:	408ab03a 	or	r5,r8,r2
  80ee10:	300c90fa 	slli	r6,r6,3
  80ee14:	49009626 	beq	r9,r4,80f070 <__subdf3+0x2c0>
  80ee18:	39c0005c 	xori	r7,r7,1
  80ee1c:	8245c83a 	sub	r2,r16,r9
  80ee20:	3c807426 	beq	r7,r18,80eff4 <__subdf3+0x244>
  80ee24:	0080af0e 	bge	zero,r2,80f0e4 <__subdf3+0x334>
  80ee28:	48002a1e 	bne	r9,zero,80eed4 <__subdf3+0x124>
  80ee2c:	2988b03a 	or	r4,r5,r6
  80ee30:	20009a1e 	bne	r4,zero,80f09c <__subdf3+0x2ec>
  80ee34:	888001cc 	andi	r2,r17,7
  80ee38:	10000726 	beq	r2,zero,80ee58 <__subdf3+0xa8>
  80ee3c:	888003cc 	andi	r2,r17,15
  80ee40:	01000104 	movi	r4,4
  80ee44:	11000426 	beq	r2,r4,80ee58 <__subdf3+0xa8>
  80ee48:	890b883a 	add	r5,r17,r4
  80ee4c:	2c63803a 	cmpltu	r17,r5,r17
  80ee50:	1c47883a 	add	r3,r3,r17
  80ee54:	2823883a 	mov	r17,r5
  80ee58:	1880202c 	andhi	r2,r3,128
  80ee5c:	10005926 	beq	r2,zero,80efc4 <__subdf3+0x214>
  80ee60:	84000044 	addi	r16,r16,1
  80ee64:	0081ffc4 	movi	r2,2047
  80ee68:	8080be26 	beq	r16,r2,80f164 <__subdf3+0x3b4>
  80ee6c:	017fe034 	movhi	r5,65408
  80ee70:	297fffc4 	addi	r5,r5,-1
  80ee74:	1946703a 	and	r3,r3,r5
  80ee78:	1804977a 	slli	r2,r3,29
  80ee7c:	1806927a 	slli	r3,r3,9
  80ee80:	8822d0fa 	srli	r17,r17,3
  80ee84:	8401ffcc 	andi	r16,r16,2047
  80ee88:	180ad33a 	srli	r5,r3,12
  80ee8c:	9100004c 	andi	r4,r18,1
  80ee90:	1444b03a 	or	r2,r2,r17
  80ee94:	80c1ffcc 	andi	r3,r16,2047
  80ee98:	1820953a 	slli	r16,r3,20
  80ee9c:	20c03fcc 	andi	r3,r4,255
  80eea0:	180897fa 	slli	r4,r3,31
  80eea4:	00c00434 	movhi	r3,16
  80eea8:	18ffffc4 	addi	r3,r3,-1
  80eeac:	28c6703a 	and	r3,r5,r3
  80eeb0:	1c06b03a 	or	r3,r3,r16
  80eeb4:	1906b03a 	or	r3,r3,r4
  80eeb8:	dfc00417 	ldw	ra,16(sp)
  80eebc:	dcc00317 	ldw	r19,12(sp)
  80eec0:	dc800217 	ldw	r18,8(sp)
  80eec4:	dc400117 	ldw	r17,4(sp)
  80eec8:	dc000017 	ldw	r16,0(sp)
  80eecc:	dec00504 	addi	sp,sp,20
  80eed0:	f800283a 	ret
  80eed4:	0101ffc4 	movi	r4,2047
  80eed8:	813fd626 	beq	r16,r4,80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80eedc:	29402034 	orhi	r5,r5,128
  80eee0:	01000e04 	movi	r4,56
  80eee4:	2080a316 	blt	r4,r2,80f174 <__subdf3+0x3c4>
  80eee8:	010007c4 	movi	r4,31
  80eeec:	2080c616 	blt	r4,r2,80f208 <__subdf3+0x458>
  80eef0:	01000804 	movi	r4,32
  80eef4:	2089c83a 	sub	r4,r4,r2
  80eef8:	2910983a 	sll	r8,r5,r4
  80eefc:	308ed83a 	srl	r7,r6,r2
  80ef00:	3108983a 	sll	r4,r6,r4
  80ef04:	2884d83a 	srl	r2,r5,r2
  80ef08:	41ccb03a 	or	r6,r8,r7
  80ef0c:	2008c03a 	cmpne	r4,r4,zero
  80ef10:	310cb03a 	or	r6,r6,r4
  80ef14:	898dc83a 	sub	r6,r17,r6
  80ef18:	89a3803a 	cmpltu	r17,r17,r6
  80ef1c:	1887c83a 	sub	r3,r3,r2
  80ef20:	1c47c83a 	sub	r3,r3,r17
  80ef24:	3023883a 	mov	r17,r6
  80ef28:	1880202c 	andhi	r2,r3,128
  80ef2c:	10002326 	beq	r2,zero,80efbc <__subdf3+0x20c>
  80ef30:	04c02034 	movhi	r19,128
  80ef34:	9cffffc4 	addi	r19,r19,-1
  80ef38:	1ce6703a 	and	r19,r3,r19
  80ef3c:	98007a26 	beq	r19,zero,80f128 <__subdf3+0x378>
  80ef40:	9809883a 	mov	r4,r19
  80ef44:	080f8b00 	call	80f8b0 <__clzsi2>
  80ef48:	113ffe04 	addi	r4,r2,-8
  80ef4c:	00c007c4 	movi	r3,31
  80ef50:	19007b16 	blt	r3,r4,80f140 <__subdf3+0x390>
  80ef54:	00800804 	movi	r2,32
  80ef58:	1105c83a 	sub	r2,r2,r4
  80ef5c:	8884d83a 	srl	r2,r17,r2
  80ef60:	9906983a 	sll	r3,r19,r4
  80ef64:	8922983a 	sll	r17,r17,r4
  80ef68:	10c4b03a 	or	r2,r2,r3
  80ef6c:	24007816 	blt	r4,r16,80f150 <__subdf3+0x3a0>
  80ef70:	2421c83a 	sub	r16,r4,r16
  80ef74:	80c00044 	addi	r3,r16,1
  80ef78:	010007c4 	movi	r4,31
  80ef7c:	20c09516 	blt	r4,r3,80f1d4 <__subdf3+0x424>
  80ef80:	01400804 	movi	r5,32
  80ef84:	28cbc83a 	sub	r5,r5,r3
  80ef88:	88c8d83a 	srl	r4,r17,r3
  80ef8c:	8962983a 	sll	r17,r17,r5
  80ef90:	114a983a 	sll	r5,r2,r5
  80ef94:	10c6d83a 	srl	r3,r2,r3
  80ef98:	8804c03a 	cmpne	r2,r17,zero
  80ef9c:	290ab03a 	or	r5,r5,r4
  80efa0:	28a2b03a 	or	r17,r5,r2
  80efa4:	0021883a 	mov	r16,zero
  80efa8:	003fa206 	br	80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80efac:	2090b03a 	or	r8,r4,r2
  80efb0:	40018e26 	beq	r8,zero,80f5ec <__subdf3+0x83c>
  80efb4:	1007883a 	mov	r3,r2
  80efb8:	2023883a 	mov	r17,r4
  80efbc:	888001cc 	andi	r2,r17,7
  80efc0:	103f9e1e 	bne	r2,zero,80ee3c <__alt_mem_onchip_mem+0xff78ee3c>
  80efc4:	1804977a 	slli	r2,r3,29
  80efc8:	8822d0fa 	srli	r17,r17,3
  80efcc:	1810d0fa 	srli	r8,r3,3
  80efd0:	9100004c 	andi	r4,r18,1
  80efd4:	1444b03a 	or	r2,r2,r17
  80efd8:	00c1ffc4 	movi	r3,2047
  80efdc:	80c02826 	beq	r16,r3,80f080 <__subdf3+0x2d0>
  80efe0:	01400434 	movhi	r5,16
  80efe4:	297fffc4 	addi	r5,r5,-1
  80efe8:	80e0703a 	and	r16,r16,r3
  80efec:	414a703a 	and	r5,r8,r5
  80eff0:	003fa806 	br	80ee94 <__alt_mem_onchip_mem+0xff78ee94>
  80eff4:	0080630e 	bge	zero,r2,80f184 <__subdf3+0x3d4>
  80eff8:	48003026 	beq	r9,zero,80f0bc <__subdf3+0x30c>
  80effc:	0101ffc4 	movi	r4,2047
  80f000:	813f8c26 	beq	r16,r4,80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80f004:	29402034 	orhi	r5,r5,128
  80f008:	01000e04 	movi	r4,56
  80f00c:	2080a90e 	bge	r4,r2,80f2b4 <__subdf3+0x504>
  80f010:	298cb03a 	or	r6,r5,r6
  80f014:	3012c03a 	cmpne	r9,r6,zero
  80f018:	0005883a 	mov	r2,zero
  80f01c:	4c53883a 	add	r9,r9,r17
  80f020:	4c63803a 	cmpltu	r17,r9,r17
  80f024:	10c7883a 	add	r3,r2,r3
  80f028:	88c7883a 	add	r3,r17,r3
  80f02c:	4823883a 	mov	r17,r9
  80f030:	1880202c 	andhi	r2,r3,128
  80f034:	1000d026 	beq	r2,zero,80f378 <__subdf3+0x5c8>
  80f038:	84000044 	addi	r16,r16,1
  80f03c:	0081ffc4 	movi	r2,2047
  80f040:	8080fe26 	beq	r16,r2,80f43c <__subdf3+0x68c>
  80f044:	00bfe034 	movhi	r2,65408
  80f048:	10bfffc4 	addi	r2,r2,-1
  80f04c:	1886703a 	and	r3,r3,r2
  80f050:	880ad07a 	srli	r5,r17,1
  80f054:	180497fa 	slli	r2,r3,31
  80f058:	8900004c 	andi	r4,r17,1
  80f05c:	2922b03a 	or	r17,r5,r4
  80f060:	1806d07a 	srli	r3,r3,1
  80f064:	1462b03a 	or	r17,r2,r17
  80f068:	3825883a 	mov	r18,r7
  80f06c:	003f7106 	br	80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80f070:	2984b03a 	or	r2,r5,r6
  80f074:	103f6826 	beq	r2,zero,80ee18 <__alt_mem_onchip_mem+0xff78ee18>
  80f078:	39c03fcc 	andi	r7,r7,255
  80f07c:	003f6706 	br	80ee1c <__alt_mem_onchip_mem+0xff78ee1c>
  80f080:	4086b03a 	or	r3,r8,r2
  80f084:	18015226 	beq	r3,zero,80f5d0 <__subdf3+0x820>
  80f088:	00c00434 	movhi	r3,16
  80f08c:	41400234 	orhi	r5,r8,8
  80f090:	18ffffc4 	addi	r3,r3,-1
  80f094:	28ca703a 	and	r5,r5,r3
  80f098:	003f7e06 	br	80ee94 <__alt_mem_onchip_mem+0xff78ee94>
  80f09c:	10bfffc4 	addi	r2,r2,-1
  80f0a0:	1000491e 	bne	r2,zero,80f1c8 <__subdf3+0x418>
  80f0a4:	898fc83a 	sub	r7,r17,r6
  80f0a8:	89e3803a 	cmpltu	r17,r17,r7
  80f0ac:	1947c83a 	sub	r3,r3,r5
  80f0b0:	1c47c83a 	sub	r3,r3,r17
  80f0b4:	3823883a 	mov	r17,r7
  80f0b8:	003f9b06 	br	80ef28 <__alt_mem_onchip_mem+0xff78ef28>
  80f0bc:	2988b03a 	or	r4,r5,r6
  80f0c0:	203f5c26 	beq	r4,zero,80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80f0c4:	10bfffc4 	addi	r2,r2,-1
  80f0c8:	1000931e 	bne	r2,zero,80f318 <__subdf3+0x568>
  80f0cc:	898d883a 	add	r6,r17,r6
  80f0d0:	3463803a 	cmpltu	r17,r6,r17
  80f0d4:	1947883a 	add	r3,r3,r5
  80f0d8:	88c7883a 	add	r3,r17,r3
  80f0dc:	3023883a 	mov	r17,r6
  80f0e0:	003fd306 	br	80f030 <__alt_mem_onchip_mem+0xff78f030>
  80f0e4:	1000541e 	bne	r2,zero,80f238 <__subdf3+0x488>
  80f0e8:	80800044 	addi	r2,r16,1
  80f0ec:	1081ffcc 	andi	r2,r2,2047
  80f0f0:	01000044 	movi	r4,1
  80f0f4:	2080a20e 	bge	r4,r2,80f380 <__subdf3+0x5d0>
  80f0f8:	8989c83a 	sub	r4,r17,r6
  80f0fc:	8905803a 	cmpltu	r2,r17,r4
  80f100:	1967c83a 	sub	r19,r3,r5
  80f104:	98a7c83a 	sub	r19,r19,r2
  80f108:	9880202c 	andhi	r2,r19,128
  80f10c:	10006326 	beq	r2,zero,80f29c <__subdf3+0x4ec>
  80f110:	3463c83a 	sub	r17,r6,r17
  80f114:	28c7c83a 	sub	r3,r5,r3
  80f118:	344d803a 	cmpltu	r6,r6,r17
  80f11c:	19a7c83a 	sub	r19,r3,r6
  80f120:	3825883a 	mov	r18,r7
  80f124:	983f861e 	bne	r19,zero,80ef40 <__alt_mem_onchip_mem+0xff78ef40>
  80f128:	8809883a 	mov	r4,r17
  80f12c:	080f8b00 	call	80f8b0 <__clzsi2>
  80f130:	10800804 	addi	r2,r2,32
  80f134:	113ffe04 	addi	r4,r2,-8
  80f138:	00c007c4 	movi	r3,31
  80f13c:	193f850e 	bge	r3,r4,80ef54 <__alt_mem_onchip_mem+0xff78ef54>
  80f140:	10bff604 	addi	r2,r2,-40
  80f144:	8884983a 	sll	r2,r17,r2
  80f148:	0023883a 	mov	r17,zero
  80f14c:	243f880e 	bge	r4,r16,80ef70 <__alt_mem_onchip_mem+0xff78ef70>
  80f150:	00ffe034 	movhi	r3,65408
  80f154:	18ffffc4 	addi	r3,r3,-1
  80f158:	8121c83a 	sub	r16,r16,r4
  80f15c:	10c6703a 	and	r3,r2,r3
  80f160:	003f3406 	br	80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80f164:	9100004c 	andi	r4,r18,1
  80f168:	000b883a 	mov	r5,zero
  80f16c:	0005883a 	mov	r2,zero
  80f170:	003f4806 	br	80ee94 <__alt_mem_onchip_mem+0xff78ee94>
  80f174:	298cb03a 	or	r6,r5,r6
  80f178:	300cc03a 	cmpne	r6,r6,zero
  80f17c:	0005883a 	mov	r2,zero
  80f180:	003f6406 	br	80ef14 <__alt_mem_onchip_mem+0xff78ef14>
  80f184:	10009a1e 	bne	r2,zero,80f3f0 <__subdf3+0x640>
  80f188:	82400044 	addi	r9,r16,1
  80f18c:	4881ffcc 	andi	r2,r9,2047
  80f190:	02800044 	movi	r10,1
  80f194:	5080670e 	bge	r10,r2,80f334 <__subdf3+0x584>
  80f198:	0081ffc4 	movi	r2,2047
  80f19c:	4880af26 	beq	r9,r2,80f45c <__subdf3+0x6ac>
  80f1a0:	898d883a 	add	r6,r17,r6
  80f1a4:	1945883a 	add	r2,r3,r5
  80f1a8:	3447803a 	cmpltu	r3,r6,r17
  80f1ac:	1887883a 	add	r3,r3,r2
  80f1b0:	182297fa 	slli	r17,r3,31
  80f1b4:	300cd07a 	srli	r6,r6,1
  80f1b8:	1806d07a 	srli	r3,r3,1
  80f1bc:	4821883a 	mov	r16,r9
  80f1c0:	89a2b03a 	or	r17,r17,r6
  80f1c4:	003f1b06 	br	80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80f1c8:	0101ffc4 	movi	r4,2047
  80f1cc:	813f441e 	bne	r16,r4,80eee0 <__alt_mem_onchip_mem+0xff78eee0>
  80f1d0:	003f1806 	br	80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80f1d4:	843ff844 	addi	r16,r16,-31
  80f1d8:	01400804 	movi	r5,32
  80f1dc:	1408d83a 	srl	r4,r2,r16
  80f1e0:	19405026 	beq	r3,r5,80f324 <__subdf3+0x574>
  80f1e4:	01401004 	movi	r5,64
  80f1e8:	28c7c83a 	sub	r3,r5,r3
  80f1ec:	10c4983a 	sll	r2,r2,r3
  80f1f0:	88a2b03a 	or	r17,r17,r2
  80f1f4:	8822c03a 	cmpne	r17,r17,zero
  80f1f8:	2462b03a 	or	r17,r4,r17
  80f1fc:	0007883a 	mov	r3,zero
  80f200:	0021883a 	mov	r16,zero
  80f204:	003f6d06 	br	80efbc <__alt_mem_onchip_mem+0xff78efbc>
  80f208:	11fff804 	addi	r7,r2,-32
  80f20c:	01000804 	movi	r4,32
  80f210:	29ced83a 	srl	r7,r5,r7
  80f214:	11004526 	beq	r2,r4,80f32c <__subdf3+0x57c>
  80f218:	01001004 	movi	r4,64
  80f21c:	2089c83a 	sub	r4,r4,r2
  80f220:	2904983a 	sll	r2,r5,r4
  80f224:	118cb03a 	or	r6,r2,r6
  80f228:	300cc03a 	cmpne	r6,r6,zero
  80f22c:	398cb03a 	or	r6,r7,r6
  80f230:	0005883a 	mov	r2,zero
  80f234:	003f3706 	br	80ef14 <__alt_mem_onchip_mem+0xff78ef14>
  80f238:	80002a26 	beq	r16,zero,80f2e4 <__subdf3+0x534>
  80f23c:	0101ffc4 	movi	r4,2047
  80f240:	49006626 	beq	r9,r4,80f3dc <__subdf3+0x62c>
  80f244:	0085c83a 	sub	r2,zero,r2
  80f248:	18c02034 	orhi	r3,r3,128
  80f24c:	01000e04 	movi	r4,56
  80f250:	20807e16 	blt	r4,r2,80f44c <__subdf3+0x69c>
  80f254:	010007c4 	movi	r4,31
  80f258:	2080e716 	blt	r4,r2,80f5f8 <__subdf3+0x848>
  80f25c:	01000804 	movi	r4,32
  80f260:	2089c83a 	sub	r4,r4,r2
  80f264:	1914983a 	sll	r10,r3,r4
  80f268:	8890d83a 	srl	r8,r17,r2
  80f26c:	8908983a 	sll	r4,r17,r4
  80f270:	1884d83a 	srl	r2,r3,r2
  80f274:	5222b03a 	or	r17,r10,r8
  80f278:	2006c03a 	cmpne	r3,r4,zero
  80f27c:	88e2b03a 	or	r17,r17,r3
  80f280:	3463c83a 	sub	r17,r6,r17
  80f284:	2885c83a 	sub	r2,r5,r2
  80f288:	344d803a 	cmpltu	r6,r6,r17
  80f28c:	1187c83a 	sub	r3,r2,r6
  80f290:	4821883a 	mov	r16,r9
  80f294:	3825883a 	mov	r18,r7
  80f298:	003f2306 	br	80ef28 <__alt_mem_onchip_mem+0xff78ef28>
  80f29c:	24d0b03a 	or	r8,r4,r19
  80f2a0:	40001b1e 	bne	r8,zero,80f310 <__subdf3+0x560>
  80f2a4:	0005883a 	mov	r2,zero
  80f2a8:	0009883a 	mov	r4,zero
  80f2ac:	0021883a 	mov	r16,zero
  80f2b0:	003f4906 	br	80efd8 <__alt_mem_onchip_mem+0xff78efd8>
  80f2b4:	010007c4 	movi	r4,31
  80f2b8:	20803a16 	blt	r4,r2,80f3a4 <__subdf3+0x5f4>
  80f2bc:	01000804 	movi	r4,32
  80f2c0:	2089c83a 	sub	r4,r4,r2
  80f2c4:	2912983a 	sll	r9,r5,r4
  80f2c8:	3090d83a 	srl	r8,r6,r2
  80f2cc:	3108983a 	sll	r4,r6,r4
  80f2d0:	2884d83a 	srl	r2,r5,r2
  80f2d4:	4a12b03a 	or	r9,r9,r8
  80f2d8:	2008c03a 	cmpne	r4,r4,zero
  80f2dc:	4912b03a 	or	r9,r9,r4
  80f2e0:	003f4e06 	br	80f01c <__alt_mem_onchip_mem+0xff78f01c>
  80f2e4:	1c48b03a 	or	r4,r3,r17
  80f2e8:	20003c26 	beq	r4,zero,80f3dc <__subdf3+0x62c>
  80f2ec:	0084303a 	nor	r2,zero,r2
  80f2f0:	1000381e 	bne	r2,zero,80f3d4 <__subdf3+0x624>
  80f2f4:	3463c83a 	sub	r17,r6,r17
  80f2f8:	28c5c83a 	sub	r2,r5,r3
  80f2fc:	344d803a 	cmpltu	r6,r6,r17
  80f300:	1187c83a 	sub	r3,r2,r6
  80f304:	4821883a 	mov	r16,r9
  80f308:	3825883a 	mov	r18,r7
  80f30c:	003f0606 	br	80ef28 <__alt_mem_onchip_mem+0xff78ef28>
  80f310:	2023883a 	mov	r17,r4
  80f314:	003f0906 	br	80ef3c <__alt_mem_onchip_mem+0xff78ef3c>
  80f318:	0101ffc4 	movi	r4,2047
  80f31c:	813f3a1e 	bne	r16,r4,80f008 <__alt_mem_onchip_mem+0xff78f008>
  80f320:	003ec406 	br	80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80f324:	0005883a 	mov	r2,zero
  80f328:	003fb106 	br	80f1f0 <__alt_mem_onchip_mem+0xff78f1f0>
  80f32c:	0005883a 	mov	r2,zero
  80f330:	003fbc06 	br	80f224 <__alt_mem_onchip_mem+0xff78f224>
  80f334:	1c44b03a 	or	r2,r3,r17
  80f338:	80008e1e 	bne	r16,zero,80f574 <__subdf3+0x7c4>
  80f33c:	1000c826 	beq	r2,zero,80f660 <__subdf3+0x8b0>
  80f340:	2984b03a 	or	r2,r5,r6
  80f344:	103ebb26 	beq	r2,zero,80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80f348:	8989883a 	add	r4,r17,r6
  80f34c:	1945883a 	add	r2,r3,r5
  80f350:	2447803a 	cmpltu	r3,r4,r17
  80f354:	1887883a 	add	r3,r3,r2
  80f358:	1880202c 	andhi	r2,r3,128
  80f35c:	2023883a 	mov	r17,r4
  80f360:	103f1626 	beq	r2,zero,80efbc <__alt_mem_onchip_mem+0xff78efbc>
  80f364:	00bfe034 	movhi	r2,65408
  80f368:	10bfffc4 	addi	r2,r2,-1
  80f36c:	5021883a 	mov	r16,r10
  80f370:	1886703a 	and	r3,r3,r2
  80f374:	003eaf06 	br	80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80f378:	3825883a 	mov	r18,r7
  80f37c:	003f0f06 	br	80efbc <__alt_mem_onchip_mem+0xff78efbc>
  80f380:	1c44b03a 	or	r2,r3,r17
  80f384:	8000251e 	bne	r16,zero,80f41c <__subdf3+0x66c>
  80f388:	1000661e 	bne	r2,zero,80f524 <__subdf3+0x774>
  80f38c:	2990b03a 	or	r8,r5,r6
  80f390:	40009626 	beq	r8,zero,80f5ec <__subdf3+0x83c>
  80f394:	2807883a 	mov	r3,r5
  80f398:	3023883a 	mov	r17,r6
  80f39c:	3825883a 	mov	r18,r7
  80f3a0:	003ea406 	br	80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80f3a4:	127ff804 	addi	r9,r2,-32
  80f3a8:	01000804 	movi	r4,32
  80f3ac:	2a52d83a 	srl	r9,r5,r9
  80f3b0:	11008c26 	beq	r2,r4,80f5e4 <__subdf3+0x834>
  80f3b4:	01001004 	movi	r4,64
  80f3b8:	2085c83a 	sub	r2,r4,r2
  80f3bc:	2884983a 	sll	r2,r5,r2
  80f3c0:	118cb03a 	or	r6,r2,r6
  80f3c4:	300cc03a 	cmpne	r6,r6,zero
  80f3c8:	4992b03a 	or	r9,r9,r6
  80f3cc:	0005883a 	mov	r2,zero
  80f3d0:	003f1206 	br	80f01c <__alt_mem_onchip_mem+0xff78f01c>
  80f3d4:	0101ffc4 	movi	r4,2047
  80f3d8:	493f9c1e 	bne	r9,r4,80f24c <__alt_mem_onchip_mem+0xff78f24c>
  80f3dc:	2807883a 	mov	r3,r5
  80f3e0:	3023883a 	mov	r17,r6
  80f3e4:	4821883a 	mov	r16,r9
  80f3e8:	3825883a 	mov	r18,r7
  80f3ec:	003e9106 	br	80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80f3f0:	80001f1e 	bne	r16,zero,80f470 <__subdf3+0x6c0>
  80f3f4:	1c48b03a 	or	r4,r3,r17
  80f3f8:	20005a26 	beq	r4,zero,80f564 <__subdf3+0x7b4>
  80f3fc:	0084303a 	nor	r2,zero,r2
  80f400:	1000561e 	bne	r2,zero,80f55c <__subdf3+0x7ac>
  80f404:	89a3883a 	add	r17,r17,r6
  80f408:	1945883a 	add	r2,r3,r5
  80f40c:	898d803a 	cmpltu	r6,r17,r6
  80f410:	3087883a 	add	r3,r6,r2
  80f414:	4821883a 	mov	r16,r9
  80f418:	003f0506 	br	80f030 <__alt_mem_onchip_mem+0xff78f030>
  80f41c:	10002b1e 	bne	r2,zero,80f4cc <__subdf3+0x71c>
  80f420:	2984b03a 	or	r2,r5,r6
  80f424:	10008026 	beq	r2,zero,80f628 <__subdf3+0x878>
  80f428:	2807883a 	mov	r3,r5
  80f42c:	3023883a 	mov	r17,r6
  80f430:	3825883a 	mov	r18,r7
  80f434:	0401ffc4 	movi	r16,2047
  80f438:	003e7e06 	br	80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80f43c:	3809883a 	mov	r4,r7
  80f440:	0011883a 	mov	r8,zero
  80f444:	0005883a 	mov	r2,zero
  80f448:	003ee306 	br	80efd8 <__alt_mem_onchip_mem+0xff78efd8>
  80f44c:	1c62b03a 	or	r17,r3,r17
  80f450:	8822c03a 	cmpne	r17,r17,zero
  80f454:	0005883a 	mov	r2,zero
  80f458:	003f8906 	br	80f280 <__alt_mem_onchip_mem+0xff78f280>
  80f45c:	3809883a 	mov	r4,r7
  80f460:	4821883a 	mov	r16,r9
  80f464:	0011883a 	mov	r8,zero
  80f468:	0005883a 	mov	r2,zero
  80f46c:	003eda06 	br	80efd8 <__alt_mem_onchip_mem+0xff78efd8>
  80f470:	0101ffc4 	movi	r4,2047
  80f474:	49003b26 	beq	r9,r4,80f564 <__subdf3+0x7b4>
  80f478:	0085c83a 	sub	r2,zero,r2
  80f47c:	18c02034 	orhi	r3,r3,128
  80f480:	01000e04 	movi	r4,56
  80f484:	20806e16 	blt	r4,r2,80f640 <__subdf3+0x890>
  80f488:	010007c4 	movi	r4,31
  80f48c:	20807716 	blt	r4,r2,80f66c <__subdf3+0x8bc>
  80f490:	01000804 	movi	r4,32
  80f494:	2089c83a 	sub	r4,r4,r2
  80f498:	1914983a 	sll	r10,r3,r4
  80f49c:	8890d83a 	srl	r8,r17,r2
  80f4a0:	8908983a 	sll	r4,r17,r4
  80f4a4:	1884d83a 	srl	r2,r3,r2
  80f4a8:	5222b03a 	or	r17,r10,r8
  80f4ac:	2006c03a 	cmpne	r3,r4,zero
  80f4b0:	88e2b03a 	or	r17,r17,r3
  80f4b4:	89a3883a 	add	r17,r17,r6
  80f4b8:	1145883a 	add	r2,r2,r5
  80f4bc:	898d803a 	cmpltu	r6,r17,r6
  80f4c0:	3087883a 	add	r3,r6,r2
  80f4c4:	4821883a 	mov	r16,r9
  80f4c8:	003ed906 	br	80f030 <__alt_mem_onchip_mem+0xff78f030>
  80f4cc:	2984b03a 	or	r2,r5,r6
  80f4d0:	10004226 	beq	r2,zero,80f5dc <__subdf3+0x82c>
  80f4d4:	1808d0fa 	srli	r4,r3,3
  80f4d8:	8822d0fa 	srli	r17,r17,3
  80f4dc:	1806977a 	slli	r3,r3,29
  80f4e0:	2080022c 	andhi	r2,r4,8
  80f4e4:	1c62b03a 	or	r17,r3,r17
  80f4e8:	10000826 	beq	r2,zero,80f50c <__subdf3+0x75c>
  80f4ec:	2812d0fa 	srli	r9,r5,3
  80f4f0:	4880022c 	andhi	r2,r9,8
  80f4f4:	1000051e 	bne	r2,zero,80f50c <__subdf3+0x75c>
  80f4f8:	300cd0fa 	srli	r6,r6,3
  80f4fc:	2804977a 	slli	r2,r5,29
  80f500:	4809883a 	mov	r4,r9
  80f504:	3825883a 	mov	r18,r7
  80f508:	11a2b03a 	or	r17,r2,r6
  80f50c:	8806d77a 	srli	r3,r17,29
  80f510:	200890fa 	slli	r4,r4,3
  80f514:	882290fa 	slli	r17,r17,3
  80f518:	0401ffc4 	movi	r16,2047
  80f51c:	1906b03a 	or	r3,r3,r4
  80f520:	003e4406 	br	80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80f524:	2984b03a 	or	r2,r5,r6
  80f528:	103e4226 	beq	r2,zero,80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80f52c:	8989c83a 	sub	r4,r17,r6
  80f530:	8911803a 	cmpltu	r8,r17,r4
  80f534:	1945c83a 	sub	r2,r3,r5
  80f538:	1205c83a 	sub	r2,r2,r8
  80f53c:	1200202c 	andhi	r8,r2,128
  80f540:	403e9a26 	beq	r8,zero,80efac <__alt_mem_onchip_mem+0xff78efac>
  80f544:	3463c83a 	sub	r17,r6,r17
  80f548:	28c5c83a 	sub	r2,r5,r3
  80f54c:	344d803a 	cmpltu	r6,r6,r17
  80f550:	1187c83a 	sub	r3,r2,r6
  80f554:	3825883a 	mov	r18,r7
  80f558:	003e3606 	br	80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80f55c:	0101ffc4 	movi	r4,2047
  80f560:	493fc71e 	bne	r9,r4,80f480 <__alt_mem_onchip_mem+0xff78f480>
  80f564:	2807883a 	mov	r3,r5
  80f568:	3023883a 	mov	r17,r6
  80f56c:	4821883a 	mov	r16,r9
  80f570:	003e3006 	br	80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80f574:	10003626 	beq	r2,zero,80f650 <__subdf3+0x8a0>
  80f578:	2984b03a 	or	r2,r5,r6
  80f57c:	10001726 	beq	r2,zero,80f5dc <__subdf3+0x82c>
  80f580:	1808d0fa 	srli	r4,r3,3
  80f584:	8822d0fa 	srli	r17,r17,3
  80f588:	1806977a 	slli	r3,r3,29
  80f58c:	2080022c 	andhi	r2,r4,8
  80f590:	1c62b03a 	or	r17,r3,r17
  80f594:	10000726 	beq	r2,zero,80f5b4 <__subdf3+0x804>
  80f598:	2812d0fa 	srli	r9,r5,3
  80f59c:	4880022c 	andhi	r2,r9,8
  80f5a0:	1000041e 	bne	r2,zero,80f5b4 <__subdf3+0x804>
  80f5a4:	300cd0fa 	srli	r6,r6,3
  80f5a8:	2804977a 	slli	r2,r5,29
  80f5ac:	4809883a 	mov	r4,r9
  80f5b0:	11a2b03a 	or	r17,r2,r6
  80f5b4:	8806d77a 	srli	r3,r17,29
  80f5b8:	200890fa 	slli	r4,r4,3
  80f5bc:	882290fa 	slli	r17,r17,3
  80f5c0:	3825883a 	mov	r18,r7
  80f5c4:	1906b03a 	or	r3,r3,r4
  80f5c8:	0401ffc4 	movi	r16,2047
  80f5cc:	003e1906 	br	80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80f5d0:	000b883a 	mov	r5,zero
  80f5d4:	0005883a 	mov	r2,zero
  80f5d8:	003e2e06 	br	80ee94 <__alt_mem_onchip_mem+0xff78ee94>
  80f5dc:	0401ffc4 	movi	r16,2047
  80f5e0:	003e1406 	br	80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80f5e4:	0005883a 	mov	r2,zero
  80f5e8:	003f7506 	br	80f3c0 <__alt_mem_onchip_mem+0xff78f3c0>
  80f5ec:	0005883a 	mov	r2,zero
  80f5f0:	0009883a 	mov	r4,zero
  80f5f4:	003e7806 	br	80efd8 <__alt_mem_onchip_mem+0xff78efd8>
  80f5f8:	123ff804 	addi	r8,r2,-32
  80f5fc:	01000804 	movi	r4,32
  80f600:	1a10d83a 	srl	r8,r3,r8
  80f604:	11002526 	beq	r2,r4,80f69c <__subdf3+0x8ec>
  80f608:	01001004 	movi	r4,64
  80f60c:	2085c83a 	sub	r2,r4,r2
  80f610:	1884983a 	sll	r2,r3,r2
  80f614:	1444b03a 	or	r2,r2,r17
  80f618:	1004c03a 	cmpne	r2,r2,zero
  80f61c:	40a2b03a 	or	r17,r8,r2
  80f620:	0005883a 	mov	r2,zero
  80f624:	003f1606 	br	80f280 <__alt_mem_onchip_mem+0xff78f280>
  80f628:	02000434 	movhi	r8,16
  80f62c:	0009883a 	mov	r4,zero
  80f630:	423fffc4 	addi	r8,r8,-1
  80f634:	00bfffc4 	movi	r2,-1
  80f638:	0401ffc4 	movi	r16,2047
  80f63c:	003e6606 	br	80efd8 <__alt_mem_onchip_mem+0xff78efd8>
  80f640:	1c62b03a 	or	r17,r3,r17
  80f644:	8822c03a 	cmpne	r17,r17,zero
  80f648:	0005883a 	mov	r2,zero
  80f64c:	003f9906 	br	80f4b4 <__alt_mem_onchip_mem+0xff78f4b4>
  80f650:	2807883a 	mov	r3,r5
  80f654:	3023883a 	mov	r17,r6
  80f658:	0401ffc4 	movi	r16,2047
  80f65c:	003df506 	br	80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80f660:	2807883a 	mov	r3,r5
  80f664:	3023883a 	mov	r17,r6
  80f668:	003df206 	br	80ee34 <__alt_mem_onchip_mem+0xff78ee34>
  80f66c:	123ff804 	addi	r8,r2,-32
  80f670:	01000804 	movi	r4,32
  80f674:	1a10d83a 	srl	r8,r3,r8
  80f678:	11000a26 	beq	r2,r4,80f6a4 <__subdf3+0x8f4>
  80f67c:	01001004 	movi	r4,64
  80f680:	2085c83a 	sub	r2,r4,r2
  80f684:	1884983a 	sll	r2,r3,r2
  80f688:	1444b03a 	or	r2,r2,r17
  80f68c:	1004c03a 	cmpne	r2,r2,zero
  80f690:	40a2b03a 	or	r17,r8,r2
  80f694:	0005883a 	mov	r2,zero
  80f698:	003f8606 	br	80f4b4 <__alt_mem_onchip_mem+0xff78f4b4>
  80f69c:	0005883a 	mov	r2,zero
  80f6a0:	003fdc06 	br	80f614 <__alt_mem_onchip_mem+0xff78f614>
  80f6a4:	0005883a 	mov	r2,zero
  80f6a8:	003ff706 	br	80f688 <__alt_mem_onchip_mem+0xff78f688>

0080f6ac <__fixdfsi>:
  80f6ac:	280cd53a 	srli	r6,r5,20
  80f6b0:	00c00434 	movhi	r3,16
  80f6b4:	18ffffc4 	addi	r3,r3,-1
  80f6b8:	3181ffcc 	andi	r6,r6,2047
  80f6bc:	01c0ff84 	movi	r7,1022
  80f6c0:	28c6703a 	and	r3,r5,r3
  80f6c4:	280ad7fa 	srli	r5,r5,31
  80f6c8:	3980120e 	bge	r7,r6,80f714 <__fixdfsi+0x68>
  80f6cc:	00810744 	movi	r2,1053
  80f6d0:	11800c16 	blt	r2,r6,80f704 <__fixdfsi+0x58>
  80f6d4:	00810cc4 	movi	r2,1075
  80f6d8:	1185c83a 	sub	r2,r2,r6
  80f6dc:	01c007c4 	movi	r7,31
  80f6e0:	18c00434 	orhi	r3,r3,16
  80f6e4:	38800d16 	blt	r7,r2,80f71c <__fixdfsi+0x70>
  80f6e8:	31befb44 	addi	r6,r6,-1043
  80f6ec:	2084d83a 	srl	r2,r4,r2
  80f6f0:	1986983a 	sll	r3,r3,r6
  80f6f4:	1884b03a 	or	r2,r3,r2
  80f6f8:	28000726 	beq	r5,zero,80f718 <__fixdfsi+0x6c>
  80f6fc:	0085c83a 	sub	r2,zero,r2
  80f700:	f800283a 	ret
  80f704:	00a00034 	movhi	r2,32768
  80f708:	10bfffc4 	addi	r2,r2,-1
  80f70c:	2885883a 	add	r2,r5,r2
  80f710:	f800283a 	ret
  80f714:	0005883a 	mov	r2,zero
  80f718:	f800283a 	ret
  80f71c:	008104c4 	movi	r2,1043
  80f720:	1185c83a 	sub	r2,r2,r6
  80f724:	1884d83a 	srl	r2,r3,r2
  80f728:	003ff306 	br	80f6f8 <__alt_mem_onchip_mem+0xff78f6f8>

0080f72c <__floatsidf>:
  80f72c:	defffd04 	addi	sp,sp,-12
  80f730:	dfc00215 	stw	ra,8(sp)
  80f734:	dc400115 	stw	r17,4(sp)
  80f738:	dc000015 	stw	r16,0(sp)
  80f73c:	20002b26 	beq	r4,zero,80f7ec <__floatsidf+0xc0>
  80f740:	2023883a 	mov	r17,r4
  80f744:	2020d7fa 	srli	r16,r4,31
  80f748:	20002d16 	blt	r4,zero,80f800 <__floatsidf+0xd4>
  80f74c:	8809883a 	mov	r4,r17
  80f750:	080f8b00 	call	80f8b0 <__clzsi2>
  80f754:	01410784 	movi	r5,1054
  80f758:	288bc83a 	sub	r5,r5,r2
  80f75c:	01010cc4 	movi	r4,1075
  80f760:	2149c83a 	sub	r4,r4,r5
  80f764:	00c007c4 	movi	r3,31
  80f768:	1900160e 	bge	r3,r4,80f7c4 <__floatsidf+0x98>
  80f76c:	00c104c4 	movi	r3,1043
  80f770:	1947c83a 	sub	r3,r3,r5
  80f774:	88c6983a 	sll	r3,r17,r3
  80f778:	00800434 	movhi	r2,16
  80f77c:	10bfffc4 	addi	r2,r2,-1
  80f780:	1886703a 	and	r3,r3,r2
  80f784:	2941ffcc 	andi	r5,r5,2047
  80f788:	800d883a 	mov	r6,r16
  80f78c:	0005883a 	mov	r2,zero
  80f790:	280a953a 	slli	r5,r5,20
  80f794:	31803fcc 	andi	r6,r6,255
  80f798:	01000434 	movhi	r4,16
  80f79c:	300c97fa 	slli	r6,r6,31
  80f7a0:	213fffc4 	addi	r4,r4,-1
  80f7a4:	1906703a 	and	r3,r3,r4
  80f7a8:	1946b03a 	or	r3,r3,r5
  80f7ac:	1986b03a 	or	r3,r3,r6
  80f7b0:	dfc00217 	ldw	ra,8(sp)
  80f7b4:	dc400117 	ldw	r17,4(sp)
  80f7b8:	dc000017 	ldw	r16,0(sp)
  80f7bc:	dec00304 	addi	sp,sp,12
  80f7c0:	f800283a 	ret
  80f7c4:	00c002c4 	movi	r3,11
  80f7c8:	1887c83a 	sub	r3,r3,r2
  80f7cc:	88c6d83a 	srl	r3,r17,r3
  80f7d0:	8904983a 	sll	r2,r17,r4
  80f7d4:	01000434 	movhi	r4,16
  80f7d8:	213fffc4 	addi	r4,r4,-1
  80f7dc:	2941ffcc 	andi	r5,r5,2047
  80f7e0:	1906703a 	and	r3,r3,r4
  80f7e4:	800d883a 	mov	r6,r16
  80f7e8:	003fe906 	br	80f790 <__alt_mem_onchip_mem+0xff78f790>
  80f7ec:	000d883a 	mov	r6,zero
  80f7f0:	000b883a 	mov	r5,zero
  80f7f4:	0007883a 	mov	r3,zero
  80f7f8:	0005883a 	mov	r2,zero
  80f7fc:	003fe406 	br	80f790 <__alt_mem_onchip_mem+0xff78f790>
  80f800:	0123c83a 	sub	r17,zero,r4
  80f804:	003fd106 	br	80f74c <__alt_mem_onchip_mem+0xff78f74c>

0080f808 <__floatunsidf>:
  80f808:	defffe04 	addi	sp,sp,-8
  80f80c:	dc000015 	stw	r16,0(sp)
  80f810:	dfc00115 	stw	ra,4(sp)
  80f814:	2021883a 	mov	r16,r4
  80f818:	20002226 	beq	r4,zero,80f8a4 <__floatunsidf+0x9c>
  80f81c:	080f8b00 	call	80f8b0 <__clzsi2>
  80f820:	01010784 	movi	r4,1054
  80f824:	2089c83a 	sub	r4,r4,r2
  80f828:	01810cc4 	movi	r6,1075
  80f82c:	310dc83a 	sub	r6,r6,r4
  80f830:	00c007c4 	movi	r3,31
  80f834:	1980120e 	bge	r3,r6,80f880 <__floatunsidf+0x78>
  80f838:	00c104c4 	movi	r3,1043
  80f83c:	1907c83a 	sub	r3,r3,r4
  80f840:	80ca983a 	sll	r5,r16,r3
  80f844:	00800434 	movhi	r2,16
  80f848:	10bfffc4 	addi	r2,r2,-1
  80f84c:	2101ffcc 	andi	r4,r4,2047
  80f850:	0021883a 	mov	r16,zero
  80f854:	288a703a 	and	r5,r5,r2
  80f858:	2008953a 	slli	r4,r4,20
  80f85c:	00c00434 	movhi	r3,16
  80f860:	18ffffc4 	addi	r3,r3,-1
  80f864:	28c6703a 	and	r3,r5,r3
  80f868:	8005883a 	mov	r2,r16
  80f86c:	1906b03a 	or	r3,r3,r4
  80f870:	dfc00117 	ldw	ra,4(sp)
  80f874:	dc000017 	ldw	r16,0(sp)
  80f878:	dec00204 	addi	sp,sp,8
  80f87c:	f800283a 	ret
  80f880:	00c002c4 	movi	r3,11
  80f884:	188bc83a 	sub	r5,r3,r2
  80f888:	814ad83a 	srl	r5,r16,r5
  80f88c:	00c00434 	movhi	r3,16
  80f890:	18ffffc4 	addi	r3,r3,-1
  80f894:	81a0983a 	sll	r16,r16,r6
  80f898:	2101ffcc 	andi	r4,r4,2047
  80f89c:	28ca703a 	and	r5,r5,r3
  80f8a0:	003fed06 	br	80f858 <__alt_mem_onchip_mem+0xff78f858>
  80f8a4:	0009883a 	mov	r4,zero
  80f8a8:	000b883a 	mov	r5,zero
  80f8ac:	003fea06 	br	80f858 <__alt_mem_onchip_mem+0xff78f858>

0080f8b0 <__clzsi2>:
  80f8b0:	00bfffd4 	movui	r2,65535
  80f8b4:	11000536 	bltu	r2,r4,80f8cc <__clzsi2+0x1c>
  80f8b8:	00803fc4 	movi	r2,255
  80f8bc:	11000f36 	bltu	r2,r4,80f8fc <__clzsi2+0x4c>
  80f8c0:	00800804 	movi	r2,32
  80f8c4:	0007883a 	mov	r3,zero
  80f8c8:	00000506 	br	80f8e0 <__clzsi2+0x30>
  80f8cc:	00804034 	movhi	r2,256
  80f8d0:	10bfffc4 	addi	r2,r2,-1
  80f8d4:	11000c2e 	bgeu	r2,r4,80f908 <__clzsi2+0x58>
  80f8d8:	00800204 	movi	r2,8
  80f8dc:	00c00604 	movi	r3,24
  80f8e0:	20c8d83a 	srl	r4,r4,r3
  80f8e4:	00c02074 	movhi	r3,129
  80f8e8:	18d06204 	addi	r3,r3,16776
  80f8ec:	1909883a 	add	r4,r3,r4
  80f8f0:	20c00003 	ldbu	r3,0(r4)
  80f8f4:	10c5c83a 	sub	r2,r2,r3
  80f8f8:	f800283a 	ret
  80f8fc:	00800604 	movi	r2,24
  80f900:	00c00204 	movi	r3,8
  80f904:	003ff606 	br	80f8e0 <__alt_mem_onchip_mem+0xff78f8e0>
  80f908:	00800404 	movi	r2,16
  80f90c:	1007883a 	mov	r3,r2
  80f910:	003ff306 	br	80f8e0 <__alt_mem_onchip_mem+0xff78f8e0>

0080f914 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80f914:	defff504 	addi	sp,sp,-44
  80f918:	df000a15 	stw	fp,40(sp)
  80f91c:	df000a04 	addi	fp,sp,40
  80f920:	e13ffc15 	stw	r4,-16(fp)
  80f924:	e17ffd15 	stw	r5,-12(fp)
  80f928:	e1bffe15 	stw	r6,-8(fp)
  80f92c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80f930:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80f934:	d0a77617 	ldw	r2,-25128(gp)
  
  if (alt_ticks_per_second ())
  80f938:	10003c26 	beq	r2,zero,80fa2c <alt_alarm_start+0x118>
  {
    if (alarm)
  80f93c:	e0bffc17 	ldw	r2,-16(fp)
  80f940:	10003826 	beq	r2,zero,80fa24 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80f944:	e0bffc17 	ldw	r2,-16(fp)
  80f948:	e0fffe17 	ldw	r3,-8(fp)
  80f94c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80f950:	e0bffc17 	ldw	r2,-16(fp)
  80f954:	e0ffff17 	ldw	r3,-4(fp)
  80f958:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f95c:	0005303a 	rdctl	r2,status
  80f960:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f964:	e0fff917 	ldw	r3,-28(fp)
  80f968:	00bfff84 	movi	r2,-2
  80f96c:	1884703a 	and	r2,r3,r2
  80f970:	1001703a 	wrctl	status,r2
  
  return context;
  80f974:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80f978:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80f97c:	d0a77717 	ldw	r2,-25124(gp)
      
      current_nticks = alt_nticks();
  80f980:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80f984:	e0fffd17 	ldw	r3,-12(fp)
  80f988:	e0bff617 	ldw	r2,-40(fp)
  80f98c:	1885883a 	add	r2,r3,r2
  80f990:	10c00044 	addi	r3,r2,1
  80f994:	e0bffc17 	ldw	r2,-16(fp)
  80f998:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80f99c:	e0bffc17 	ldw	r2,-16(fp)
  80f9a0:	10c00217 	ldw	r3,8(r2)
  80f9a4:	e0bff617 	ldw	r2,-40(fp)
  80f9a8:	1880042e 	bgeu	r3,r2,80f9bc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80f9ac:	e0bffc17 	ldw	r2,-16(fp)
  80f9b0:	00c00044 	movi	r3,1
  80f9b4:	10c00405 	stb	r3,16(r2)
  80f9b8:	00000206 	br	80f9c4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80f9bc:	e0bffc17 	ldw	r2,-16(fp)
  80f9c0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80f9c4:	e0bffc17 	ldw	r2,-16(fp)
  80f9c8:	d0e01804 	addi	r3,gp,-32672
  80f9cc:	e0fffa15 	stw	r3,-24(fp)
  80f9d0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80f9d4:	e0bffb17 	ldw	r2,-20(fp)
  80f9d8:	e0fffa17 	ldw	r3,-24(fp)
  80f9dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80f9e0:	e0bffa17 	ldw	r2,-24(fp)
  80f9e4:	10c00017 	ldw	r3,0(r2)
  80f9e8:	e0bffb17 	ldw	r2,-20(fp)
  80f9ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80f9f0:	e0bffa17 	ldw	r2,-24(fp)
  80f9f4:	10800017 	ldw	r2,0(r2)
  80f9f8:	e0fffb17 	ldw	r3,-20(fp)
  80f9fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80fa00:	e0bffa17 	ldw	r2,-24(fp)
  80fa04:	e0fffb17 	ldw	r3,-20(fp)
  80fa08:	10c00015 	stw	r3,0(r2)
  80fa0c:	e0bff817 	ldw	r2,-32(fp)
  80fa10:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fa14:	e0bff717 	ldw	r2,-36(fp)
  80fa18:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80fa1c:	0005883a 	mov	r2,zero
  80fa20:	00000306 	br	80fa30 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80fa24:	00bffa84 	movi	r2,-22
  80fa28:	00000106 	br	80fa30 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80fa2c:	00bfde84 	movi	r2,-134
  }
}
  80fa30:	e037883a 	mov	sp,fp
  80fa34:	df000017 	ldw	fp,0(sp)
  80fa38:	dec00104 	addi	sp,sp,4
  80fa3c:	f800283a 	ret

0080fa40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fa40:	defffe04 	addi	sp,sp,-8
  80fa44:	dfc00115 	stw	ra,4(sp)
  80fa48:	df000015 	stw	fp,0(sp)
  80fa4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fa50:	d0a01517 	ldw	r2,-32684(gp)
  80fa54:	10000326 	beq	r2,zero,80fa64 <alt_get_errno+0x24>
  80fa58:	d0a01517 	ldw	r2,-32684(gp)
  80fa5c:	103ee83a 	callr	r2
  80fa60:	00000106 	br	80fa68 <alt_get_errno+0x28>
  80fa64:	d0a76b04 	addi	r2,gp,-25172
}
  80fa68:	e037883a 	mov	sp,fp
  80fa6c:	dfc00117 	ldw	ra,4(sp)
  80fa70:	df000017 	ldw	fp,0(sp)
  80fa74:	dec00204 	addi	sp,sp,8
  80fa78:	f800283a 	ret

0080fa7c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80fa7c:	defffb04 	addi	sp,sp,-20
  80fa80:	dfc00415 	stw	ra,16(sp)
  80fa84:	df000315 	stw	fp,12(sp)
  80fa88:	df000304 	addi	fp,sp,12
  80fa8c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80fa90:	e0bfff17 	ldw	r2,-4(fp)
  80fa94:	10000616 	blt	r2,zero,80fab0 <close+0x34>
  80fa98:	e0bfff17 	ldw	r2,-4(fp)
  80fa9c:	10c00324 	muli	r3,r2,12
  80faa0:	00802074 	movhi	r2,129
  80faa4:	1092e604 	addi	r2,r2,19352
  80faa8:	1885883a 	add	r2,r3,r2
  80faac:	00000106 	br	80fab4 <close+0x38>
  80fab0:	0005883a 	mov	r2,zero
  80fab4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80fab8:	e0bffd17 	ldw	r2,-12(fp)
  80fabc:	10001926 	beq	r2,zero,80fb24 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80fac0:	e0bffd17 	ldw	r2,-12(fp)
  80fac4:	10800017 	ldw	r2,0(r2)
  80fac8:	10800417 	ldw	r2,16(r2)
  80facc:	10000626 	beq	r2,zero,80fae8 <close+0x6c>
  80fad0:	e0bffd17 	ldw	r2,-12(fp)
  80fad4:	10800017 	ldw	r2,0(r2)
  80fad8:	10800417 	ldw	r2,16(r2)
  80fadc:	e13ffd17 	ldw	r4,-12(fp)
  80fae0:	103ee83a 	callr	r2
  80fae4:	00000106 	br	80faec <close+0x70>
  80fae8:	0005883a 	mov	r2,zero
  80faec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80faf0:	e13fff17 	ldw	r4,-4(fp)
  80faf4:	08105100 	call	810510 <alt_release_fd>
    if (rval < 0)
  80faf8:	e0bffe17 	ldw	r2,-8(fp)
  80fafc:	1000070e 	bge	r2,zero,80fb1c <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80fb00:	080fa400 	call	80fa40 <alt_get_errno>
  80fb04:	1007883a 	mov	r3,r2
  80fb08:	e0bffe17 	ldw	r2,-8(fp)
  80fb0c:	0085c83a 	sub	r2,zero,r2
  80fb10:	18800015 	stw	r2,0(r3)
      return -1;
  80fb14:	00bfffc4 	movi	r2,-1
  80fb18:	00000706 	br	80fb38 <close+0xbc>
    }
    return 0;
  80fb1c:	0005883a 	mov	r2,zero
  80fb20:	00000506 	br	80fb38 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80fb24:	080fa400 	call	80fa40 <alt_get_errno>
  80fb28:	1007883a 	mov	r3,r2
  80fb2c:	00801444 	movi	r2,81
  80fb30:	18800015 	stw	r2,0(r3)
    return -1;
  80fb34:	00bfffc4 	movi	r2,-1
  }
}
  80fb38:	e037883a 	mov	sp,fp
  80fb3c:	dfc00117 	ldw	ra,4(sp)
  80fb40:	df000017 	ldw	fp,0(sp)
  80fb44:	dec00204 	addi	sp,sp,8
  80fb48:	f800283a 	ret

0080fb4c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80fb4c:	defffc04 	addi	sp,sp,-16
  80fb50:	df000315 	stw	fp,12(sp)
  80fb54:	df000304 	addi	fp,sp,12
  80fb58:	e13ffd15 	stw	r4,-12(fp)
  80fb5c:	e17ffe15 	stw	r5,-8(fp)
  80fb60:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80fb64:	e0bfff17 	ldw	r2,-4(fp)
}
  80fb68:	e037883a 	mov	sp,fp
  80fb6c:	df000017 	ldw	fp,0(sp)
  80fb70:	dec00104 	addi	sp,sp,4
  80fb74:	f800283a 	ret

0080fb78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fb78:	defffe04 	addi	sp,sp,-8
  80fb7c:	dfc00115 	stw	ra,4(sp)
  80fb80:	df000015 	stw	fp,0(sp)
  80fb84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fb88:	d0a01517 	ldw	r2,-32684(gp)
  80fb8c:	10000326 	beq	r2,zero,80fb9c <alt_get_errno+0x24>
  80fb90:	d0a01517 	ldw	r2,-32684(gp)
  80fb94:	103ee83a 	callr	r2
  80fb98:	00000106 	br	80fba0 <alt_get_errno+0x28>
  80fb9c:	d0a76b04 	addi	r2,gp,-25172
}
  80fba0:	e037883a 	mov	sp,fp
  80fba4:	dfc00117 	ldw	ra,4(sp)
  80fba8:	df000017 	ldw	fp,0(sp)
  80fbac:	dec00204 	addi	sp,sp,8
  80fbb0:	f800283a 	ret

0080fbb4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80fbb4:	defffb04 	addi	sp,sp,-20
  80fbb8:	dfc00415 	stw	ra,16(sp)
  80fbbc:	df000315 	stw	fp,12(sp)
  80fbc0:	df000304 	addi	fp,sp,12
  80fbc4:	e13ffe15 	stw	r4,-8(fp)
  80fbc8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fbcc:	e0bffe17 	ldw	r2,-8(fp)
  80fbd0:	10000616 	blt	r2,zero,80fbec <fstat+0x38>
  80fbd4:	e0bffe17 	ldw	r2,-8(fp)
  80fbd8:	10c00324 	muli	r3,r2,12
  80fbdc:	00802074 	movhi	r2,129
  80fbe0:	1092e604 	addi	r2,r2,19352
  80fbe4:	1885883a 	add	r2,r3,r2
  80fbe8:	00000106 	br	80fbf0 <fstat+0x3c>
  80fbec:	0005883a 	mov	r2,zero
  80fbf0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80fbf4:	e0bffd17 	ldw	r2,-12(fp)
  80fbf8:	10001026 	beq	r2,zero,80fc3c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80fbfc:	e0bffd17 	ldw	r2,-12(fp)
  80fc00:	10800017 	ldw	r2,0(r2)
  80fc04:	10800817 	ldw	r2,32(r2)
  80fc08:	10000726 	beq	r2,zero,80fc28 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80fc0c:	e0bffd17 	ldw	r2,-12(fp)
  80fc10:	10800017 	ldw	r2,0(r2)
  80fc14:	10800817 	ldw	r2,32(r2)
  80fc18:	e17fff17 	ldw	r5,-4(fp)
  80fc1c:	e13ffd17 	ldw	r4,-12(fp)
  80fc20:	103ee83a 	callr	r2
  80fc24:	00000a06 	br	80fc50 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80fc28:	e0bfff17 	ldw	r2,-4(fp)
  80fc2c:	00c80004 	movi	r3,8192
  80fc30:	10c00115 	stw	r3,4(r2)
      return 0;
  80fc34:	0005883a 	mov	r2,zero
  80fc38:	00000506 	br	80fc50 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80fc3c:	080fb780 	call	80fb78 <alt_get_errno>
  80fc40:	1007883a 	mov	r3,r2
  80fc44:	00801444 	movi	r2,81
  80fc48:	18800015 	stw	r2,0(r3)
    return -1;
  80fc4c:	00bfffc4 	movi	r2,-1
  }
}
  80fc50:	e037883a 	mov	sp,fp
  80fc54:	dfc00117 	ldw	ra,4(sp)
  80fc58:	df000017 	ldw	fp,0(sp)
  80fc5c:	dec00204 	addi	sp,sp,8
  80fc60:	f800283a 	ret

0080fc64 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80fc64:	defff004 	addi	sp,sp,-64
  80fc68:	df000f15 	stw	fp,60(sp)
  80fc6c:	df000f04 	addi	fp,sp,60
  80fc70:	e13ffd15 	stw	r4,-12(fp)
  80fc74:	e17ffe15 	stw	r5,-8(fp)
  80fc78:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  80fc7c:	00bffa84 	movi	r2,-22
  80fc80:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80fc84:	e0bffd17 	ldw	r2,-12(fp)
  80fc88:	10800828 	cmpgeui	r2,r2,32
  80fc8c:	1000501e 	bne	r2,zero,80fdd0 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fc90:	0005303a 	rdctl	r2,status
  80fc94:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fc98:	e0fff617 	ldw	r3,-40(fp)
  80fc9c:	00bfff84 	movi	r2,-2
  80fca0:	1884703a 	and	r2,r3,r2
  80fca4:	1001703a 	wrctl	status,r2
  
  return context;
  80fca8:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80fcac:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  80fcb0:	00802074 	movhi	r2,129
  80fcb4:	109f7904 	addi	r2,r2,32228
  80fcb8:	e0fffd17 	ldw	r3,-12(fp)
  80fcbc:	180690fa 	slli	r3,r3,3
  80fcc0:	10c5883a 	add	r2,r2,r3
  80fcc4:	e0ffff17 	ldw	r3,-4(fp)
  80fcc8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  80fccc:	00802074 	movhi	r2,129
  80fcd0:	109f7904 	addi	r2,r2,32228
  80fcd4:	e0fffd17 	ldw	r3,-12(fp)
  80fcd8:	180690fa 	slli	r3,r3,3
  80fcdc:	10c5883a 	add	r2,r2,r3
  80fce0:	10800104 	addi	r2,r2,4
  80fce4:	e0fffe17 	ldw	r3,-8(fp)
  80fce8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80fcec:	e0bfff17 	ldw	r2,-4(fp)
  80fcf0:	10001926 	beq	r2,zero,80fd58 <alt_irq_register+0xf4>
  80fcf4:	e0bffd17 	ldw	r2,-12(fp)
  80fcf8:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fcfc:	0005303a 	rdctl	r2,status
  80fd00:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fd04:	e0fff717 	ldw	r3,-36(fp)
  80fd08:	00bfff84 	movi	r2,-2
  80fd0c:	1884703a 	and	r2,r3,r2
  80fd10:	1001703a 	wrctl	status,r2
  
  return context;
  80fd14:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80fd18:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80fd1c:	00c00044 	movi	r3,1
  80fd20:	e0bff217 	ldw	r2,-56(fp)
  80fd24:	1884983a 	sll	r2,r3,r2
  80fd28:	1007883a 	mov	r3,r2
  80fd2c:	d0a77217 	ldw	r2,-25144(gp)
  80fd30:	1884b03a 	or	r2,r3,r2
  80fd34:	d0a77215 	stw	r2,-25144(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80fd38:	d0a77217 	ldw	r2,-25144(gp)
  80fd3c:	100170fa 	wrctl	ienable,r2
  80fd40:	e0bff817 	ldw	r2,-32(fp)
  80fd44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fd48:	e0bff917 	ldw	r2,-28(fp)
  80fd4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80fd50:	0005883a 	mov	r2,zero
  80fd54:	00001906 	br	80fdbc <alt_irq_register+0x158>
  80fd58:	e0bffd17 	ldw	r2,-12(fp)
  80fd5c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fd60:	0005303a 	rdctl	r2,status
  80fd64:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fd68:	e0fffa17 	ldw	r3,-24(fp)
  80fd6c:	00bfff84 	movi	r2,-2
  80fd70:	1884703a 	and	r2,r3,r2
  80fd74:	1001703a 	wrctl	status,r2
  
  return context;
  80fd78:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80fd7c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  80fd80:	00c00044 	movi	r3,1
  80fd84:	e0bff417 	ldw	r2,-48(fp)
  80fd88:	1884983a 	sll	r2,r3,r2
  80fd8c:	0084303a 	nor	r2,zero,r2
  80fd90:	1007883a 	mov	r3,r2
  80fd94:	d0a77217 	ldw	r2,-25144(gp)
  80fd98:	1884703a 	and	r2,r3,r2
  80fd9c:	d0a77215 	stw	r2,-25144(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80fda0:	d0a77217 	ldw	r2,-25144(gp)
  80fda4:	100170fa 	wrctl	ienable,r2
  80fda8:	e0bffb17 	ldw	r2,-20(fp)
  80fdac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fdb0:	e0bffc17 	ldw	r2,-16(fp)
  80fdb4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80fdb8:	0005883a 	mov	r2,zero
  80fdbc:	e0bff115 	stw	r2,-60(fp)
  80fdc0:	e0bff317 	ldw	r2,-52(fp)
  80fdc4:	e0bff515 	stw	r2,-44(fp)
  80fdc8:	e0bff517 	ldw	r2,-44(fp)
  80fdcc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80fdd0:	e0bff117 	ldw	r2,-60(fp)
}
  80fdd4:	e037883a 	mov	sp,fp
  80fdd8:	df000017 	ldw	fp,0(sp)
  80fddc:	dec00104 	addi	sp,sp,4
  80fde0:	f800283a 	ret

0080fde4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fde4:	defffe04 	addi	sp,sp,-8
  80fde8:	dfc00115 	stw	ra,4(sp)
  80fdec:	df000015 	stw	fp,0(sp)
  80fdf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fdf4:	d0a01517 	ldw	r2,-32684(gp)
  80fdf8:	10000326 	beq	r2,zero,80fe08 <alt_get_errno+0x24>
  80fdfc:	d0a01517 	ldw	r2,-32684(gp)
  80fe00:	103ee83a 	callr	r2
  80fe04:	00000106 	br	80fe0c <alt_get_errno+0x28>
  80fe08:	d0a76b04 	addi	r2,gp,-25172
}
  80fe0c:	e037883a 	mov	sp,fp
  80fe10:	dfc00117 	ldw	ra,4(sp)
  80fe14:	df000017 	ldw	fp,0(sp)
  80fe18:	dec00204 	addi	sp,sp,8
  80fe1c:	f800283a 	ret

0080fe20 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80fe20:	deffed04 	addi	sp,sp,-76
  80fe24:	dfc01215 	stw	ra,72(sp)
  80fe28:	df001115 	stw	fp,68(sp)
  80fe2c:	df001104 	addi	fp,sp,68
  80fe30:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fe34:	e0bfff17 	ldw	r2,-4(fp)
  80fe38:	10000616 	blt	r2,zero,80fe54 <isatty+0x34>
  80fe3c:	e0bfff17 	ldw	r2,-4(fp)
  80fe40:	10c00324 	muli	r3,r2,12
  80fe44:	00802074 	movhi	r2,129
  80fe48:	1092e604 	addi	r2,r2,19352
  80fe4c:	1885883a 	add	r2,r3,r2
  80fe50:	00000106 	br	80fe58 <isatty+0x38>
  80fe54:	0005883a 	mov	r2,zero
  80fe58:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80fe5c:	e0bfef17 	ldw	r2,-68(fp)
  80fe60:	10000e26 	beq	r2,zero,80fe9c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80fe64:	e0bfef17 	ldw	r2,-68(fp)
  80fe68:	10800017 	ldw	r2,0(r2)
  80fe6c:	10800817 	ldw	r2,32(r2)
  80fe70:	1000021e 	bne	r2,zero,80fe7c <isatty+0x5c>
    {
      return 1;
  80fe74:	00800044 	movi	r2,1
  80fe78:	00000d06 	br	80feb0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80fe7c:	e0bff004 	addi	r2,fp,-64
  80fe80:	100b883a 	mov	r5,r2
  80fe84:	e13fff17 	ldw	r4,-4(fp)
  80fe88:	080fbb40 	call	80fbb4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80fe8c:	e0bff117 	ldw	r2,-60(fp)
  80fe90:	10880020 	cmpeqi	r2,r2,8192
  80fe94:	10803fcc 	andi	r2,r2,255
  80fe98:	00000506 	br	80feb0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80fe9c:	080fde40 	call	80fde4 <alt_get_errno>
  80fea0:	1007883a 	mov	r3,r2
  80fea4:	00801444 	movi	r2,81
  80fea8:	18800015 	stw	r2,0(r3)
    return 0;
  80feac:	0005883a 	mov	r2,zero
  }
}
  80feb0:	e037883a 	mov	sp,fp
  80feb4:	dfc00117 	ldw	ra,4(sp)
  80feb8:	df000017 	ldw	fp,0(sp)
  80febc:	dec00204 	addi	sp,sp,8
  80fec0:	f800283a 	ret

0080fec4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80fec4:	defffc04 	addi	sp,sp,-16
  80fec8:	df000315 	stw	fp,12(sp)
  80fecc:	df000304 	addi	fp,sp,12
  80fed0:	e13ffd15 	stw	r4,-12(fp)
  80fed4:	e17ffe15 	stw	r5,-8(fp)
  80fed8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80fedc:	e0fffe17 	ldw	r3,-8(fp)
  80fee0:	e0bffd17 	ldw	r2,-12(fp)
  80fee4:	18800c26 	beq	r3,r2,80ff18 <alt_load_section+0x54>
  {
    while( to != end )
  80fee8:	00000806 	br	80ff0c <alt_load_section+0x48>
    {
      *to++ = *from++;
  80feec:	e0bffe17 	ldw	r2,-8(fp)
  80fef0:	10c00104 	addi	r3,r2,4
  80fef4:	e0fffe15 	stw	r3,-8(fp)
  80fef8:	e0fffd17 	ldw	r3,-12(fp)
  80fefc:	19000104 	addi	r4,r3,4
  80ff00:	e13ffd15 	stw	r4,-12(fp)
  80ff04:	18c00017 	ldw	r3,0(r3)
  80ff08:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80ff0c:	e0fffe17 	ldw	r3,-8(fp)
  80ff10:	e0bfff17 	ldw	r2,-4(fp)
  80ff14:	18bff51e 	bne	r3,r2,80feec <__alt_mem_onchip_mem+0xff78feec>
    {
      *to++ = *from++;
    }
  }
}
  80ff18:	0001883a 	nop
  80ff1c:	e037883a 	mov	sp,fp
  80ff20:	df000017 	ldw	fp,0(sp)
  80ff24:	dec00104 	addi	sp,sp,4
  80ff28:	f800283a 	ret

0080ff2c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80ff2c:	defffe04 	addi	sp,sp,-8
  80ff30:	dfc00115 	stw	ra,4(sp)
  80ff34:	df000015 	stw	fp,0(sp)
  80ff38:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80ff3c:	01802074 	movhi	r6,129
  80ff40:	3197f204 	addi	r6,r6,24520
  80ff44:	01402074 	movhi	r5,129
  80ff48:	2950b304 	addi	r5,r5,17100
  80ff4c:	01002074 	movhi	r4,129
  80ff50:	2117f204 	addi	r4,r4,24520
  80ff54:	080fec40 	call	80fec4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80ff58:	01802034 	movhi	r6,128
  80ff5c:	31809104 	addi	r6,r6,580
  80ff60:	01402034 	movhi	r5,128
  80ff64:	29400804 	addi	r5,r5,32
  80ff68:	01002034 	movhi	r4,128
  80ff6c:	21000804 	addi	r4,r4,32
  80ff70:	080fec40 	call	80fec4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80ff74:	01802074 	movhi	r6,129
  80ff78:	3190b304 	addi	r6,r6,17100
  80ff7c:	01402074 	movhi	r5,129
  80ff80:	294eee04 	addi	r5,r5,15288
  80ff84:	01002074 	movhi	r4,129
  80ff88:	210eee04 	addi	r4,r4,15288
  80ff8c:	080fec40 	call	80fec4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80ff90:	0812d140 	call	812d14 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80ff94:	08131380 	call	813138 <alt_icache_flush_all>
}
  80ff98:	0001883a 	nop
  80ff9c:	e037883a 	mov	sp,fp
  80ffa0:	dfc00117 	ldw	ra,4(sp)
  80ffa4:	df000017 	ldw	fp,0(sp)
  80ffa8:	dec00204 	addi	sp,sp,8
  80ffac:	f800283a 	ret

0080ffb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ffb0:	defffe04 	addi	sp,sp,-8
  80ffb4:	dfc00115 	stw	ra,4(sp)
  80ffb8:	df000015 	stw	fp,0(sp)
  80ffbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ffc0:	d0a01517 	ldw	r2,-32684(gp)
  80ffc4:	10000326 	beq	r2,zero,80ffd4 <alt_get_errno+0x24>
  80ffc8:	d0a01517 	ldw	r2,-32684(gp)
  80ffcc:	103ee83a 	callr	r2
  80ffd0:	00000106 	br	80ffd8 <alt_get_errno+0x28>
  80ffd4:	d0a76b04 	addi	r2,gp,-25172
}
  80ffd8:	e037883a 	mov	sp,fp
  80ffdc:	dfc00117 	ldw	ra,4(sp)
  80ffe0:	df000017 	ldw	fp,0(sp)
  80ffe4:	dec00204 	addi	sp,sp,8
  80ffe8:	f800283a 	ret

0080ffec <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80ffec:	defff904 	addi	sp,sp,-28
  80fff0:	dfc00615 	stw	ra,24(sp)
  80fff4:	df000515 	stw	fp,20(sp)
  80fff8:	df000504 	addi	fp,sp,20
  80fffc:	e13ffd15 	stw	r4,-12(fp)
  810000:	e17ffe15 	stw	r5,-8(fp)
  810004:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  810008:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81000c:	e0bffd17 	ldw	r2,-12(fp)
  810010:	10000616 	blt	r2,zero,81002c <lseek+0x40>
  810014:	e0bffd17 	ldw	r2,-12(fp)
  810018:	10c00324 	muli	r3,r2,12
  81001c:	00802074 	movhi	r2,129
  810020:	1092e604 	addi	r2,r2,19352
  810024:	1885883a 	add	r2,r3,r2
  810028:	00000106 	br	810030 <lseek+0x44>
  81002c:	0005883a 	mov	r2,zero
  810030:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  810034:	e0bffc17 	ldw	r2,-16(fp)
  810038:	10001026 	beq	r2,zero,81007c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  81003c:	e0bffc17 	ldw	r2,-16(fp)
  810040:	10800017 	ldw	r2,0(r2)
  810044:	10800717 	ldw	r2,28(r2)
  810048:	10000926 	beq	r2,zero,810070 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  81004c:	e0bffc17 	ldw	r2,-16(fp)
  810050:	10800017 	ldw	r2,0(r2)
  810054:	10800717 	ldw	r2,28(r2)
  810058:	e1bfff17 	ldw	r6,-4(fp)
  81005c:	e17ffe17 	ldw	r5,-8(fp)
  810060:	e13ffc17 	ldw	r4,-16(fp)
  810064:	103ee83a 	callr	r2
  810068:	e0bffb15 	stw	r2,-20(fp)
  81006c:	00000506 	br	810084 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  810070:	00bfde84 	movi	r2,-134
  810074:	e0bffb15 	stw	r2,-20(fp)
  810078:	00000206 	br	810084 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  81007c:	00bfebc4 	movi	r2,-81
  810080:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  810084:	e0bffb17 	ldw	r2,-20(fp)
  810088:	1000070e 	bge	r2,zero,8100a8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  81008c:	080ffb00 	call	80ffb0 <alt_get_errno>
  810090:	1007883a 	mov	r3,r2
  810094:	e0bffb17 	ldw	r2,-20(fp)
  810098:	0085c83a 	sub	r2,zero,r2
  81009c:	18800015 	stw	r2,0(r3)
    rc = -1;
  8100a0:	00bfffc4 	movi	r2,-1
  8100a4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  8100a8:	e0bffb17 	ldw	r2,-20(fp)
}
  8100ac:	e037883a 	mov	sp,fp
  8100b0:	dfc00117 	ldw	ra,4(sp)
  8100b4:	df000017 	ldw	fp,0(sp)
  8100b8:	dec00204 	addi	sp,sp,8
  8100bc:	f800283a 	ret

008100c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8100c0:	defffd04 	addi	sp,sp,-12
  8100c4:	dfc00215 	stw	ra,8(sp)
  8100c8:	df000115 	stw	fp,4(sp)
  8100cc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8100d0:	0009883a 	mov	r4,zero
  8100d4:	08109300 	call	810930 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  8100d8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8100dc:	08109680 	call	810968 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8100e0:	01802074 	movhi	r6,129
  8100e4:	3190a504 	addi	r6,r6,17044
  8100e8:	01402074 	movhi	r5,129
  8100ec:	2950a504 	addi	r5,r5,17044
  8100f0:	01002074 	movhi	r4,129
  8100f4:	2110a504 	addi	r4,r4,17044
  8100f8:	08134d00 	call	8134d0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8100fc:	0812e3c0 	call	812e3c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  810100:	01002074 	movhi	r4,129
  810104:	210ba704 	addi	r4,r4,11932
  810108:	08138240 	call	813824 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  81010c:	d0a77317 	ldw	r2,-25140(gp)
  810110:	d0e77417 	ldw	r3,-25136(gp)
  810114:	d1277517 	ldw	r4,-25132(gp)
  810118:	200d883a 	mov	r6,r4
  81011c:	180b883a 	mov	r5,r3
  810120:	1009883a 	mov	r4,r2
  810124:	0801d640 	call	801d64 <main>
  810128:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  81012c:	01000044 	movi	r4,1
  810130:	080fa7c0 	call	80fa7c <close>
  exit (result);
  810134:	e13fff17 	ldw	r4,-4(fp)
  810138:	08138380 	call	813838 <exit>

0081013c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  81013c:	defffe04 	addi	sp,sp,-8
  810140:	df000115 	stw	fp,4(sp)
  810144:	df000104 	addi	fp,sp,4
  810148:	e13fff15 	stw	r4,-4(fp)
}
  81014c:	0001883a 	nop
  810150:	e037883a 	mov	sp,fp
  810154:	df000017 	ldw	fp,0(sp)
  810158:	dec00104 	addi	sp,sp,4
  81015c:	f800283a 	ret

00810160 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  810160:	defffe04 	addi	sp,sp,-8
  810164:	df000115 	stw	fp,4(sp)
  810168:	df000104 	addi	fp,sp,4
  81016c:	e13fff15 	stw	r4,-4(fp)
}
  810170:	0001883a 	nop
  810174:	e037883a 	mov	sp,fp
  810178:	df000017 	ldw	fp,0(sp)
  81017c:	dec00104 	addi	sp,sp,4
  810180:	f800283a 	ret

00810184 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810184:	defffe04 	addi	sp,sp,-8
  810188:	dfc00115 	stw	ra,4(sp)
  81018c:	df000015 	stw	fp,0(sp)
  810190:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810194:	d0a01517 	ldw	r2,-32684(gp)
  810198:	10000326 	beq	r2,zero,8101a8 <alt_get_errno+0x24>
  81019c:	d0a01517 	ldw	r2,-32684(gp)
  8101a0:	103ee83a 	callr	r2
  8101a4:	00000106 	br	8101ac <alt_get_errno+0x28>
  8101a8:	d0a76b04 	addi	r2,gp,-25172
}
  8101ac:	e037883a 	mov	sp,fp
  8101b0:	dfc00117 	ldw	ra,4(sp)
  8101b4:	df000017 	ldw	fp,0(sp)
  8101b8:	dec00204 	addi	sp,sp,8
  8101bc:	f800283a 	ret

008101c0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8101c0:	defffd04 	addi	sp,sp,-12
  8101c4:	df000215 	stw	fp,8(sp)
  8101c8:	df000204 	addi	fp,sp,8
  8101cc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8101d0:	e0bfff17 	ldw	r2,-4(fp)
  8101d4:	10800217 	ldw	r2,8(r2)
  8101d8:	10d00034 	orhi	r3,r2,16384
  8101dc:	e0bfff17 	ldw	r2,-4(fp)
  8101e0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8101e4:	e03ffe15 	stw	zero,-8(fp)
  8101e8:	00001d06 	br	810260 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8101ec:	00802074 	movhi	r2,129
  8101f0:	1092e604 	addi	r2,r2,19352
  8101f4:	e0fffe17 	ldw	r3,-8(fp)
  8101f8:	18c00324 	muli	r3,r3,12
  8101fc:	10c5883a 	add	r2,r2,r3
  810200:	10c00017 	ldw	r3,0(r2)
  810204:	e0bfff17 	ldw	r2,-4(fp)
  810208:	10800017 	ldw	r2,0(r2)
  81020c:	1880111e 	bne	r3,r2,810254 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  810210:	00802074 	movhi	r2,129
  810214:	1092e604 	addi	r2,r2,19352
  810218:	e0fffe17 	ldw	r3,-8(fp)
  81021c:	18c00324 	muli	r3,r3,12
  810220:	10c5883a 	add	r2,r2,r3
  810224:	10800204 	addi	r2,r2,8
  810228:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81022c:	1000090e 	bge	r2,zero,810254 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  810230:	e0bffe17 	ldw	r2,-8(fp)
  810234:	10c00324 	muli	r3,r2,12
  810238:	00802074 	movhi	r2,129
  81023c:	1092e604 	addi	r2,r2,19352
  810240:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  810244:	e0bfff17 	ldw	r2,-4(fp)
  810248:	18800226 	beq	r3,r2,810254 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81024c:	00bffcc4 	movi	r2,-13
  810250:	00000806 	br	810274 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810254:	e0bffe17 	ldw	r2,-8(fp)
  810258:	10800044 	addi	r2,r2,1
  81025c:	e0bffe15 	stw	r2,-8(fp)
  810260:	d0a01417 	ldw	r2,-32688(gp)
  810264:	1007883a 	mov	r3,r2
  810268:	e0bffe17 	ldw	r2,-8(fp)
  81026c:	18bfdf2e 	bgeu	r3,r2,8101ec <__alt_mem_onchip_mem+0xff7901ec>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  810270:	0005883a 	mov	r2,zero
}
  810274:	e037883a 	mov	sp,fp
  810278:	df000017 	ldw	fp,0(sp)
  81027c:	dec00104 	addi	sp,sp,4
  810280:	f800283a 	ret

00810284 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  810284:	defff604 	addi	sp,sp,-40
  810288:	dfc00915 	stw	ra,36(sp)
  81028c:	df000815 	stw	fp,32(sp)
  810290:	df000804 	addi	fp,sp,32
  810294:	e13ffd15 	stw	r4,-12(fp)
  810298:	e17ffe15 	stw	r5,-8(fp)
  81029c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8102a0:	00bfffc4 	movi	r2,-1
  8102a4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  8102a8:	00bffb44 	movi	r2,-19
  8102ac:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  8102b0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8102b4:	d1601204 	addi	r5,gp,-32696
  8102b8:	e13ffd17 	ldw	r4,-12(fp)
  8102bc:	0812efc0 	call	812efc <alt_find_dev>
  8102c0:	e0bff815 	stw	r2,-32(fp)
  8102c4:	e0bff817 	ldw	r2,-32(fp)
  8102c8:	1000051e 	bne	r2,zero,8102e0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8102cc:	e13ffd17 	ldw	r4,-12(fp)
  8102d0:	0812f8c0 	call	812f8c <alt_find_file>
  8102d4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  8102d8:	00800044 	movi	r2,1
  8102dc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8102e0:	e0bff817 	ldw	r2,-32(fp)
  8102e4:	10002926 	beq	r2,zero,81038c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  8102e8:	e13ff817 	ldw	r4,-32(fp)
  8102ec:	08130940 	call	813094 <alt_get_fd>
  8102f0:	e0bff915 	stw	r2,-28(fp)
  8102f4:	e0bff917 	ldw	r2,-28(fp)
  8102f8:	1000030e 	bge	r2,zero,810308 <open+0x84>
    {
      status = index;
  8102fc:	e0bff917 	ldw	r2,-28(fp)
  810300:	e0bffa15 	stw	r2,-24(fp)
  810304:	00002306 	br	810394 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  810308:	e0bff917 	ldw	r2,-28(fp)
  81030c:	10c00324 	muli	r3,r2,12
  810310:	00802074 	movhi	r2,129
  810314:	1092e604 	addi	r2,r2,19352
  810318:	1885883a 	add	r2,r3,r2
  81031c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  810320:	e0fffe17 	ldw	r3,-8(fp)
  810324:	00900034 	movhi	r2,16384
  810328:	10bfffc4 	addi	r2,r2,-1
  81032c:	1886703a 	and	r3,r3,r2
  810330:	e0bffc17 	ldw	r2,-16(fp)
  810334:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  810338:	e0bffb17 	ldw	r2,-20(fp)
  81033c:	1000051e 	bne	r2,zero,810354 <open+0xd0>
  810340:	e13ffc17 	ldw	r4,-16(fp)
  810344:	08101c00 	call	8101c0 <alt_file_locked>
  810348:	e0bffa15 	stw	r2,-24(fp)
  81034c:	e0bffa17 	ldw	r2,-24(fp)
  810350:	10001016 	blt	r2,zero,810394 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  810354:	e0bff817 	ldw	r2,-32(fp)
  810358:	10800317 	ldw	r2,12(r2)
  81035c:	10000826 	beq	r2,zero,810380 <open+0xfc>
  810360:	e0bff817 	ldw	r2,-32(fp)
  810364:	10800317 	ldw	r2,12(r2)
  810368:	e1ffff17 	ldw	r7,-4(fp)
  81036c:	e1bffe17 	ldw	r6,-8(fp)
  810370:	e17ffd17 	ldw	r5,-12(fp)
  810374:	e13ffc17 	ldw	r4,-16(fp)
  810378:	103ee83a 	callr	r2
  81037c:	00000106 	br	810384 <open+0x100>
  810380:	0005883a 	mov	r2,zero
  810384:	e0bffa15 	stw	r2,-24(fp)
  810388:	00000206 	br	810394 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81038c:	00bffb44 	movi	r2,-19
  810390:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  810394:	e0bffa17 	ldw	r2,-24(fp)
  810398:	1000090e 	bge	r2,zero,8103c0 <open+0x13c>
  {
    alt_release_fd (index);  
  81039c:	e13ff917 	ldw	r4,-28(fp)
  8103a0:	08105100 	call	810510 <alt_release_fd>
    ALT_ERRNO = -status;
  8103a4:	08101840 	call	810184 <alt_get_errno>
  8103a8:	1007883a 	mov	r3,r2
  8103ac:	e0bffa17 	ldw	r2,-24(fp)
  8103b0:	0085c83a 	sub	r2,zero,r2
  8103b4:	18800015 	stw	r2,0(r3)
    return -1;
  8103b8:	00bfffc4 	movi	r2,-1
  8103bc:	00000106 	br	8103c4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  8103c0:	e0bff917 	ldw	r2,-28(fp)
}
  8103c4:	e037883a 	mov	sp,fp
  8103c8:	dfc00117 	ldw	ra,4(sp)
  8103cc:	df000017 	ldw	fp,0(sp)
  8103d0:	dec00204 	addi	sp,sp,8
  8103d4:	f800283a 	ret

008103d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8103d8:	defffe04 	addi	sp,sp,-8
  8103dc:	dfc00115 	stw	ra,4(sp)
  8103e0:	df000015 	stw	fp,0(sp)
  8103e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8103e8:	d0a01517 	ldw	r2,-32684(gp)
  8103ec:	10000326 	beq	r2,zero,8103fc <alt_get_errno+0x24>
  8103f0:	d0a01517 	ldw	r2,-32684(gp)
  8103f4:	103ee83a 	callr	r2
  8103f8:	00000106 	br	810400 <alt_get_errno+0x28>
  8103fc:	d0a76b04 	addi	r2,gp,-25172
}
  810400:	e037883a 	mov	sp,fp
  810404:	dfc00117 	ldw	ra,4(sp)
  810408:	df000017 	ldw	fp,0(sp)
  81040c:	dec00204 	addi	sp,sp,8
  810410:	f800283a 	ret

00810414 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  810414:	defff904 	addi	sp,sp,-28
  810418:	dfc00615 	stw	ra,24(sp)
  81041c:	df000515 	stw	fp,20(sp)
  810420:	df000504 	addi	fp,sp,20
  810424:	e13ffd15 	stw	r4,-12(fp)
  810428:	e17ffe15 	stw	r5,-8(fp)
  81042c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810430:	e0bffd17 	ldw	r2,-12(fp)
  810434:	10000616 	blt	r2,zero,810450 <read+0x3c>
  810438:	e0bffd17 	ldw	r2,-12(fp)
  81043c:	10c00324 	muli	r3,r2,12
  810440:	00802074 	movhi	r2,129
  810444:	1092e604 	addi	r2,r2,19352
  810448:	1885883a 	add	r2,r3,r2
  81044c:	00000106 	br	810454 <read+0x40>
  810450:	0005883a 	mov	r2,zero
  810454:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  810458:	e0bffb17 	ldw	r2,-20(fp)
  81045c:	10002226 	beq	r2,zero,8104e8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  810460:	e0bffb17 	ldw	r2,-20(fp)
  810464:	10800217 	ldw	r2,8(r2)
  810468:	108000cc 	andi	r2,r2,3
  81046c:	10800060 	cmpeqi	r2,r2,1
  810470:	1000181e 	bne	r2,zero,8104d4 <read+0xc0>
        (fd->dev->read))
  810474:	e0bffb17 	ldw	r2,-20(fp)
  810478:	10800017 	ldw	r2,0(r2)
  81047c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  810480:	10001426 	beq	r2,zero,8104d4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  810484:	e0bffb17 	ldw	r2,-20(fp)
  810488:	10800017 	ldw	r2,0(r2)
  81048c:	10800517 	ldw	r2,20(r2)
  810490:	e0ffff17 	ldw	r3,-4(fp)
  810494:	180d883a 	mov	r6,r3
  810498:	e17ffe17 	ldw	r5,-8(fp)
  81049c:	e13ffb17 	ldw	r4,-20(fp)
  8104a0:	103ee83a 	callr	r2
  8104a4:	e0bffc15 	stw	r2,-16(fp)
  8104a8:	e0bffc17 	ldw	r2,-16(fp)
  8104ac:	1000070e 	bge	r2,zero,8104cc <read+0xb8>
        {
          ALT_ERRNO = -rval;
  8104b0:	08103d80 	call	8103d8 <alt_get_errno>
  8104b4:	1007883a 	mov	r3,r2
  8104b8:	e0bffc17 	ldw	r2,-16(fp)
  8104bc:	0085c83a 	sub	r2,zero,r2
  8104c0:	18800015 	stw	r2,0(r3)
          return -1;
  8104c4:	00bfffc4 	movi	r2,-1
  8104c8:	00000c06 	br	8104fc <read+0xe8>
        }
        return rval;
  8104cc:	e0bffc17 	ldw	r2,-16(fp)
  8104d0:	00000a06 	br	8104fc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  8104d4:	08103d80 	call	8103d8 <alt_get_errno>
  8104d8:	1007883a 	mov	r3,r2
  8104dc:	00800344 	movi	r2,13
  8104e0:	18800015 	stw	r2,0(r3)
  8104e4:	00000406 	br	8104f8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8104e8:	08103d80 	call	8103d8 <alt_get_errno>
  8104ec:	1007883a 	mov	r3,r2
  8104f0:	00801444 	movi	r2,81
  8104f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8104f8:	00bfffc4 	movi	r2,-1
}
  8104fc:	e037883a 	mov	sp,fp
  810500:	dfc00117 	ldw	ra,4(sp)
  810504:	df000017 	ldw	fp,0(sp)
  810508:	dec00204 	addi	sp,sp,8
  81050c:	f800283a 	ret

00810510 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  810510:	defffe04 	addi	sp,sp,-8
  810514:	df000115 	stw	fp,4(sp)
  810518:	df000104 	addi	fp,sp,4
  81051c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  810520:	e0bfff17 	ldw	r2,-4(fp)
  810524:	108000d0 	cmplti	r2,r2,3
  810528:	10000d1e 	bne	r2,zero,810560 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  81052c:	00802074 	movhi	r2,129
  810530:	1092e604 	addi	r2,r2,19352
  810534:	e0ffff17 	ldw	r3,-4(fp)
  810538:	18c00324 	muli	r3,r3,12
  81053c:	10c5883a 	add	r2,r2,r3
  810540:	10800204 	addi	r2,r2,8
  810544:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  810548:	00802074 	movhi	r2,129
  81054c:	1092e604 	addi	r2,r2,19352
  810550:	e0ffff17 	ldw	r3,-4(fp)
  810554:	18c00324 	muli	r3,r3,12
  810558:	10c5883a 	add	r2,r2,r3
  81055c:	10000015 	stw	zero,0(r2)
  }
}
  810560:	0001883a 	nop
  810564:	e037883a 	mov	sp,fp
  810568:	df000017 	ldw	fp,0(sp)
  81056c:	dec00104 	addi	sp,sp,4
  810570:	f800283a 	ret

00810574 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  810574:	defff904 	addi	sp,sp,-28
  810578:	df000615 	stw	fp,24(sp)
  81057c:	df000604 	addi	fp,sp,24
  810580:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810584:	0005303a 	rdctl	r2,status
  810588:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81058c:	e0fffe17 	ldw	r3,-8(fp)
  810590:	00bfff84 	movi	r2,-2
  810594:	1884703a 	and	r2,r3,r2
  810598:	1001703a 	wrctl	status,r2
  
  return context;
  81059c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  8105a0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  8105a4:	d0a01717 	ldw	r2,-32676(gp)
  8105a8:	10c000c4 	addi	r3,r2,3
  8105ac:	00bfff04 	movi	r2,-4
  8105b0:	1884703a 	and	r2,r3,r2
  8105b4:	d0a01715 	stw	r2,-32676(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  8105b8:	d0e01717 	ldw	r3,-32676(gp)
  8105bc:	e0bfff17 	ldw	r2,-4(fp)
  8105c0:	1887883a 	add	r3,r3,r2
  8105c4:	00804034 	movhi	r2,256
  8105c8:	10800004 	addi	r2,r2,0
  8105cc:	10c0062e 	bgeu	r2,r3,8105e8 <sbrk+0x74>
  8105d0:	e0bffb17 	ldw	r2,-20(fp)
  8105d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8105d8:	e0bffa17 	ldw	r2,-24(fp)
  8105dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  8105e0:	00bfffc4 	movi	r2,-1
  8105e4:	00000b06 	br	810614 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  8105e8:	d0a01717 	ldw	r2,-32676(gp)
  8105ec:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  8105f0:	d0e01717 	ldw	r3,-32676(gp)
  8105f4:	e0bfff17 	ldw	r2,-4(fp)
  8105f8:	1885883a 	add	r2,r3,r2
  8105fc:	d0a01715 	stw	r2,-32676(gp)
  810600:	e0bffb17 	ldw	r2,-20(fp)
  810604:	e0bffc15 	stw	r2,-16(fp)
  810608:	e0bffc17 	ldw	r2,-16(fp)
  81060c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  810610:	e0bffd17 	ldw	r2,-12(fp)
} 
  810614:	e037883a 	mov	sp,fp
  810618:	df000017 	ldw	fp,0(sp)
  81061c:	dec00104 	addi	sp,sp,4
  810620:	f800283a 	ret

00810624 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  810624:	defffa04 	addi	sp,sp,-24
  810628:	df000515 	stw	fp,20(sp)
  81062c:	df000504 	addi	fp,sp,20
  810630:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810634:	0005303a 	rdctl	r2,status
  810638:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81063c:	e0fffc17 	ldw	r3,-16(fp)
  810640:	00bfff84 	movi	r2,-2
  810644:	1884703a 	and	r2,r3,r2
  810648:	1001703a 	wrctl	status,r2
  
  return context;
  81064c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  810650:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  810654:	e0bfff17 	ldw	r2,-4(fp)
  810658:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  81065c:	e0bffd17 	ldw	r2,-12(fp)
  810660:	10800017 	ldw	r2,0(r2)
  810664:	e0fffd17 	ldw	r3,-12(fp)
  810668:	18c00117 	ldw	r3,4(r3)
  81066c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  810670:	e0bffd17 	ldw	r2,-12(fp)
  810674:	10800117 	ldw	r2,4(r2)
  810678:	e0fffd17 	ldw	r3,-12(fp)
  81067c:	18c00017 	ldw	r3,0(r3)
  810680:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  810684:	e0bffd17 	ldw	r2,-12(fp)
  810688:	e0fffd17 	ldw	r3,-12(fp)
  81068c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  810690:	e0bffd17 	ldw	r2,-12(fp)
  810694:	e0fffd17 	ldw	r3,-12(fp)
  810698:	10c00015 	stw	r3,0(r2)
  81069c:	e0bffb17 	ldw	r2,-20(fp)
  8106a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8106a4:	e0bffe17 	ldw	r2,-8(fp)
  8106a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8106ac:	0001883a 	nop
  8106b0:	e037883a 	mov	sp,fp
  8106b4:	df000017 	ldw	fp,0(sp)
  8106b8:	dec00104 	addi	sp,sp,4
  8106bc:	f800283a 	ret

008106c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8106c0:	defffb04 	addi	sp,sp,-20
  8106c4:	dfc00415 	stw	ra,16(sp)
  8106c8:	df000315 	stw	fp,12(sp)
  8106cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8106d0:	d0a01817 	ldw	r2,-32672(gp)
  8106d4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8106d8:	d0a77717 	ldw	r2,-25124(gp)
  8106dc:	10800044 	addi	r2,r2,1
  8106e0:	d0a77715 	stw	r2,-25124(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8106e4:	00002e06 	br	8107a0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  8106e8:	e0bffd17 	ldw	r2,-12(fp)
  8106ec:	10800017 	ldw	r2,0(r2)
  8106f0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8106f4:	e0bffd17 	ldw	r2,-12(fp)
  8106f8:	10800403 	ldbu	r2,16(r2)
  8106fc:	10803fcc 	andi	r2,r2,255
  810700:	10000426 	beq	r2,zero,810714 <alt_tick+0x54>
  810704:	d0a77717 	ldw	r2,-25124(gp)
  810708:	1000021e 	bne	r2,zero,810714 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  81070c:	e0bffd17 	ldw	r2,-12(fp)
  810710:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  810714:	e0bffd17 	ldw	r2,-12(fp)
  810718:	10800217 	ldw	r2,8(r2)
  81071c:	d0e77717 	ldw	r3,-25124(gp)
  810720:	18801d36 	bltu	r3,r2,810798 <alt_tick+0xd8>
  810724:	e0bffd17 	ldw	r2,-12(fp)
  810728:	10800403 	ldbu	r2,16(r2)
  81072c:	10803fcc 	andi	r2,r2,255
  810730:	1000191e 	bne	r2,zero,810798 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  810734:	e0bffd17 	ldw	r2,-12(fp)
  810738:	10800317 	ldw	r2,12(r2)
  81073c:	e0fffd17 	ldw	r3,-12(fp)
  810740:	18c00517 	ldw	r3,20(r3)
  810744:	1809883a 	mov	r4,r3
  810748:	103ee83a 	callr	r2
  81074c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  810750:	e0bfff17 	ldw	r2,-4(fp)
  810754:	1000031e 	bne	r2,zero,810764 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  810758:	e13ffd17 	ldw	r4,-12(fp)
  81075c:	08106240 	call	810624 <alt_alarm_stop>
  810760:	00000d06 	br	810798 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  810764:	e0bffd17 	ldw	r2,-12(fp)
  810768:	10c00217 	ldw	r3,8(r2)
  81076c:	e0bfff17 	ldw	r2,-4(fp)
  810770:	1887883a 	add	r3,r3,r2
  810774:	e0bffd17 	ldw	r2,-12(fp)
  810778:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  81077c:	e0bffd17 	ldw	r2,-12(fp)
  810780:	10c00217 	ldw	r3,8(r2)
  810784:	d0a77717 	ldw	r2,-25124(gp)
  810788:	1880032e 	bgeu	r3,r2,810798 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  81078c:	e0bffd17 	ldw	r2,-12(fp)
  810790:	00c00044 	movi	r3,1
  810794:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  810798:	e0bffe17 	ldw	r2,-8(fp)
  81079c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8107a0:	e0fffd17 	ldw	r3,-12(fp)
  8107a4:	d0a01804 	addi	r2,gp,-32672
  8107a8:	18bfcf1e 	bne	r3,r2,8106e8 <__alt_mem_onchip_mem+0xff7906e8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  8107ac:	0001883a 	nop
}
  8107b0:	0001883a 	nop
  8107b4:	e037883a 	mov	sp,fp
  8107b8:	dfc00117 	ldw	ra,4(sp)
  8107bc:	df000017 	ldw	fp,0(sp)
  8107c0:	dec00204 	addi	sp,sp,8
  8107c4:	f800283a 	ret

008107c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8107c8:	defffe04 	addi	sp,sp,-8
  8107cc:	dfc00115 	stw	ra,4(sp)
  8107d0:	df000015 	stw	fp,0(sp)
  8107d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8107d8:	d0a01517 	ldw	r2,-32684(gp)
  8107dc:	10000326 	beq	r2,zero,8107ec <alt_get_errno+0x24>
  8107e0:	d0a01517 	ldw	r2,-32684(gp)
  8107e4:	103ee83a 	callr	r2
  8107e8:	00000106 	br	8107f0 <alt_get_errno+0x28>
  8107ec:	d0a76b04 	addi	r2,gp,-25172
}
  8107f0:	e037883a 	mov	sp,fp
  8107f4:	dfc00117 	ldw	ra,4(sp)
  8107f8:	df000017 	ldw	fp,0(sp)
  8107fc:	dec00204 	addi	sp,sp,8
  810800:	f800283a 	ret

00810804 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  810804:	defff904 	addi	sp,sp,-28
  810808:	dfc00615 	stw	ra,24(sp)
  81080c:	df000515 	stw	fp,20(sp)
  810810:	df000504 	addi	fp,sp,20
  810814:	e13ffd15 	stw	r4,-12(fp)
  810818:	e17ffe15 	stw	r5,-8(fp)
  81081c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810820:	e0bffd17 	ldw	r2,-12(fp)
  810824:	10000616 	blt	r2,zero,810840 <write+0x3c>
  810828:	e0bffd17 	ldw	r2,-12(fp)
  81082c:	10c00324 	muli	r3,r2,12
  810830:	00802074 	movhi	r2,129
  810834:	1092e604 	addi	r2,r2,19352
  810838:	1885883a 	add	r2,r3,r2
  81083c:	00000106 	br	810844 <write+0x40>
  810840:	0005883a 	mov	r2,zero
  810844:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  810848:	e0bffb17 	ldw	r2,-20(fp)
  81084c:	10002126 	beq	r2,zero,8108d4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  810850:	e0bffb17 	ldw	r2,-20(fp)
  810854:	10800217 	ldw	r2,8(r2)
  810858:	108000cc 	andi	r2,r2,3
  81085c:	10001826 	beq	r2,zero,8108c0 <write+0xbc>
  810860:	e0bffb17 	ldw	r2,-20(fp)
  810864:	10800017 	ldw	r2,0(r2)
  810868:	10800617 	ldw	r2,24(r2)
  81086c:	10001426 	beq	r2,zero,8108c0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  810870:	e0bffb17 	ldw	r2,-20(fp)
  810874:	10800017 	ldw	r2,0(r2)
  810878:	10800617 	ldw	r2,24(r2)
  81087c:	e0ffff17 	ldw	r3,-4(fp)
  810880:	180d883a 	mov	r6,r3
  810884:	e17ffe17 	ldw	r5,-8(fp)
  810888:	e13ffb17 	ldw	r4,-20(fp)
  81088c:	103ee83a 	callr	r2
  810890:	e0bffc15 	stw	r2,-16(fp)
  810894:	e0bffc17 	ldw	r2,-16(fp)
  810898:	1000070e 	bge	r2,zero,8108b8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  81089c:	08107c80 	call	8107c8 <alt_get_errno>
  8108a0:	1007883a 	mov	r3,r2
  8108a4:	e0bffc17 	ldw	r2,-16(fp)
  8108a8:	0085c83a 	sub	r2,zero,r2
  8108ac:	18800015 	stw	r2,0(r3)
        return -1;
  8108b0:	00bfffc4 	movi	r2,-1
  8108b4:	00000c06 	br	8108e8 <write+0xe4>
      }
      return rval;
  8108b8:	e0bffc17 	ldw	r2,-16(fp)
  8108bc:	00000a06 	br	8108e8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8108c0:	08107c80 	call	8107c8 <alt_get_errno>
  8108c4:	1007883a 	mov	r3,r2
  8108c8:	00800344 	movi	r2,13
  8108cc:	18800015 	stw	r2,0(r3)
  8108d0:	00000406 	br	8108e4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8108d4:	08107c80 	call	8107c8 <alt_get_errno>
  8108d8:	1007883a 	mov	r3,r2
  8108dc:	00801444 	movi	r2,81
  8108e0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8108e4:	00bfffc4 	movi	r2,-1
}
  8108e8:	e037883a 	mov	sp,fp
  8108ec:	dfc00117 	ldw	ra,4(sp)
  8108f0:	df000017 	ldw	fp,0(sp)
  8108f4:	dec00204 	addi	sp,sp,8
  8108f8:	f800283a 	ret

008108fc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8108fc:	defffd04 	addi	sp,sp,-12
  810900:	dfc00215 	stw	ra,8(sp)
  810904:	df000115 	stw	fp,4(sp)
  810908:	df000104 	addi	fp,sp,4
  81090c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  810910:	d1601204 	addi	r5,gp,-32696
  810914:	e13fff17 	ldw	r4,-4(fp)
  810918:	0812d980 	call	812d98 <alt_dev_llist_insert>
}
  81091c:	e037883a 	mov	sp,fp
  810920:	dfc00117 	ldw	ra,4(sp)
  810924:	df000017 	ldw	fp,0(sp)
  810928:	dec00204 	addi	sp,sp,8
  81092c:	f800283a 	ret

00810930 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  810930:	defffd04 	addi	sp,sp,-12
  810934:	dfc00215 	stw	ra,8(sp)
  810938:	df000115 	stw	fp,4(sp)
  81093c:	df000104 	addi	fp,sp,4
  810940:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  810944:	081357c0 	call	81357c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  810948:	00800044 	movi	r2,1
  81094c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  810950:	0001883a 	nop
  810954:	e037883a 	mov	sp,fp
  810958:	dfc00117 	ldw	ra,4(sp)
  81095c:	df000017 	ldw	fp,0(sp)
  810960:	dec00204 	addi	sp,sp,8
  810964:	f800283a 	ret

00810968 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  810968:	defffe04 	addi	sp,sp,-8
  81096c:	dfc00115 	stw	ra,4(sp)
  810970:	df000015 	stw	fp,0(sp)
  810974:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
  810978:	01c0fa04 	movi	r7,1000
  81097c:	01800084 	movi	r6,2
  810980:	000b883a 	mov	r5,zero
  810984:	01004434 	movhi	r4,272
  810988:	21040804 	addi	r4,r4,4128
  81098c:	08123c00 	call	8123c0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  810990:	01800044 	movi	r6,1
  810994:	000b883a 	mov	r5,zero
  810998:	01002074 	movhi	r4,129
  81099c:	21135004 	addi	r4,r4,19776
  8109a0:	0810b680 	call	810b68 <altera_avalon_jtag_uart_init>
  8109a4:	01002074 	movhi	r4,129
  8109a8:	21134604 	addi	r4,r4,19736
  8109ac:	08108fc0 	call	8108fc <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  8109b0:	01002074 	movhi	r4,129
  8109b4:	21176804 	addi	r4,r4,23968
  8109b8:	08121b40 	call	8121b4 <altera_avalon_lcd_16207_init>
  8109bc:	01002074 	movhi	r4,129
  8109c0:	21175e04 	addi	r4,r4,23928
  8109c4:	08108fc0 	call	8108fc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( CPU_SYSID, cpu_sysid);
  8109c8:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  8109cc:	000d883a 	mov	r6,zero
  8109d0:	000b883a 	mov	r5,zero
  8109d4:	01002074 	movhi	r4,129
  8109d8:	2117b004 	addi	r4,r4,24256
  8109dc:	081254c0 	call	81254c <altera_avalon_uart_init>
  8109e0:	01002074 	movhi	r4,129
  8109e4:	2117a604 	addi	r4,r4,24216
  8109e8:	08108fc0 	call	8108fc <alt_dev_reg>
}
  8109ec:	0001883a 	nop
  8109f0:	e037883a 	mov	sp,fp
  8109f4:	dfc00117 	ldw	ra,4(sp)
  8109f8:	df000017 	ldw	fp,0(sp)
  8109fc:	dec00204 	addi	sp,sp,8
  810a00:	f800283a 	ret

00810a04 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  810a04:	defffa04 	addi	sp,sp,-24
  810a08:	dfc00515 	stw	ra,20(sp)
  810a0c:	df000415 	stw	fp,16(sp)
  810a10:	df000404 	addi	fp,sp,16
  810a14:	e13ffd15 	stw	r4,-12(fp)
  810a18:	e17ffe15 	stw	r5,-8(fp)
  810a1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810a20:	e0bffd17 	ldw	r2,-12(fp)
  810a24:	10800017 	ldw	r2,0(r2)
  810a28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  810a2c:	e0bffc17 	ldw	r2,-16(fp)
  810a30:	10c00a04 	addi	r3,r2,40
  810a34:	e0bffd17 	ldw	r2,-12(fp)
  810a38:	10800217 	ldw	r2,8(r2)
  810a3c:	100f883a 	mov	r7,r2
  810a40:	e1bfff17 	ldw	r6,-4(fp)
  810a44:	e17ffe17 	ldw	r5,-8(fp)
  810a48:	1809883a 	mov	r4,r3
  810a4c:	081102c0 	call	81102c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  810a50:	e037883a 	mov	sp,fp
  810a54:	dfc00117 	ldw	ra,4(sp)
  810a58:	df000017 	ldw	fp,0(sp)
  810a5c:	dec00204 	addi	sp,sp,8
  810a60:	f800283a 	ret

00810a64 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  810a64:	defffa04 	addi	sp,sp,-24
  810a68:	dfc00515 	stw	ra,20(sp)
  810a6c:	df000415 	stw	fp,16(sp)
  810a70:	df000404 	addi	fp,sp,16
  810a74:	e13ffd15 	stw	r4,-12(fp)
  810a78:	e17ffe15 	stw	r5,-8(fp)
  810a7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810a80:	e0bffd17 	ldw	r2,-12(fp)
  810a84:	10800017 	ldw	r2,0(r2)
  810a88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  810a8c:	e0bffc17 	ldw	r2,-16(fp)
  810a90:	10c00a04 	addi	r3,r2,40
  810a94:	e0bffd17 	ldw	r2,-12(fp)
  810a98:	10800217 	ldw	r2,8(r2)
  810a9c:	100f883a 	mov	r7,r2
  810aa0:	e1bfff17 	ldw	r6,-4(fp)
  810aa4:	e17ffe17 	ldw	r5,-8(fp)
  810aa8:	1809883a 	mov	r4,r3
  810aac:	08112480 	call	811248 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  810ab0:	e037883a 	mov	sp,fp
  810ab4:	dfc00117 	ldw	ra,4(sp)
  810ab8:	df000017 	ldw	fp,0(sp)
  810abc:	dec00204 	addi	sp,sp,8
  810ac0:	f800283a 	ret

00810ac4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  810ac4:	defffc04 	addi	sp,sp,-16
  810ac8:	dfc00315 	stw	ra,12(sp)
  810acc:	df000215 	stw	fp,8(sp)
  810ad0:	df000204 	addi	fp,sp,8
  810ad4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810ad8:	e0bfff17 	ldw	r2,-4(fp)
  810adc:	10800017 	ldw	r2,0(r2)
  810ae0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  810ae4:	e0bffe17 	ldw	r2,-8(fp)
  810ae8:	10c00a04 	addi	r3,r2,40
  810aec:	e0bfff17 	ldw	r2,-4(fp)
  810af0:	10800217 	ldw	r2,8(r2)
  810af4:	100b883a 	mov	r5,r2
  810af8:	1809883a 	mov	r4,r3
  810afc:	0810ed40 	call	810ed4 <altera_avalon_jtag_uart_close>
}
  810b00:	e037883a 	mov	sp,fp
  810b04:	dfc00117 	ldw	ra,4(sp)
  810b08:	df000017 	ldw	fp,0(sp)
  810b0c:	dec00204 	addi	sp,sp,8
  810b10:	f800283a 	ret

00810b14 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  810b14:	defffa04 	addi	sp,sp,-24
  810b18:	dfc00515 	stw	ra,20(sp)
  810b1c:	df000415 	stw	fp,16(sp)
  810b20:	df000404 	addi	fp,sp,16
  810b24:	e13ffd15 	stw	r4,-12(fp)
  810b28:	e17ffe15 	stw	r5,-8(fp)
  810b2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  810b30:	e0bffd17 	ldw	r2,-12(fp)
  810b34:	10800017 	ldw	r2,0(r2)
  810b38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  810b3c:	e0bffc17 	ldw	r2,-16(fp)
  810b40:	10800a04 	addi	r2,r2,40
  810b44:	e1bfff17 	ldw	r6,-4(fp)
  810b48:	e17ffe17 	ldw	r5,-8(fp)
  810b4c:	1009883a 	mov	r4,r2
  810b50:	0810f3c0 	call	810f3c <altera_avalon_jtag_uart_ioctl>
}
  810b54:	e037883a 	mov	sp,fp
  810b58:	dfc00117 	ldw	ra,4(sp)
  810b5c:	df000017 	ldw	fp,0(sp)
  810b60:	dec00204 	addi	sp,sp,8
  810b64:	f800283a 	ret

00810b68 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  810b68:	defffa04 	addi	sp,sp,-24
  810b6c:	dfc00515 	stw	ra,20(sp)
  810b70:	df000415 	stw	fp,16(sp)
  810b74:	df000404 	addi	fp,sp,16
  810b78:	e13ffd15 	stw	r4,-12(fp)
  810b7c:	e17ffe15 	stw	r5,-8(fp)
  810b80:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810b84:	e0bffd17 	ldw	r2,-12(fp)
  810b88:	00c00044 	movi	r3,1
  810b8c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  810b90:	e0bffd17 	ldw	r2,-12(fp)
  810b94:	10800017 	ldw	r2,0(r2)
  810b98:	10800104 	addi	r2,r2,4
  810b9c:	1007883a 	mov	r3,r2
  810ba0:	e0bffd17 	ldw	r2,-12(fp)
  810ba4:	10800817 	ldw	r2,32(r2)
  810ba8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  810bac:	e0bffe17 	ldw	r2,-8(fp)
  810bb0:	e0ffff17 	ldw	r3,-4(fp)
  810bb4:	d8000015 	stw	zero,0(sp)
  810bb8:	e1fffd17 	ldw	r7,-12(fp)
  810bbc:	01802074 	movhi	r6,129
  810bc0:	31830a04 	addi	r6,r6,3112
  810bc4:	180b883a 	mov	r5,r3
  810bc8:	1009883a 	mov	r4,r2
  810bcc:	081316c0 	call	81316c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  810bd0:	e0bffd17 	ldw	r2,-12(fp)
  810bd4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  810bd8:	e0bffd17 	ldw	r2,-12(fp)
  810bdc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  810be0:	d0e77617 	ldw	r3,-25128(gp)
  810be4:	e1fffd17 	ldw	r7,-12(fp)
  810be8:	01802074 	movhi	r6,129
  810bec:	31838d04 	addi	r6,r6,3636
  810bf0:	180b883a 	mov	r5,r3
  810bf4:	1009883a 	mov	r4,r2
  810bf8:	080f9140 	call	80f914 <alt_alarm_start>
  810bfc:	1000040e 	bge	r2,zero,810c10 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  810c00:	e0fffd17 	ldw	r3,-12(fp)
  810c04:	00a00034 	movhi	r2,32768
  810c08:	10bfffc4 	addi	r2,r2,-1
  810c0c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  810c10:	0001883a 	nop
  810c14:	e037883a 	mov	sp,fp
  810c18:	dfc00117 	ldw	ra,4(sp)
  810c1c:	df000017 	ldw	fp,0(sp)
  810c20:	dec00204 	addi	sp,sp,8
  810c24:	f800283a 	ret

00810c28 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  810c28:	defff804 	addi	sp,sp,-32
  810c2c:	df000715 	stw	fp,28(sp)
  810c30:	df000704 	addi	fp,sp,28
  810c34:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  810c38:	e0bfff17 	ldw	r2,-4(fp)
  810c3c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  810c40:	e0bffb17 	ldw	r2,-20(fp)
  810c44:	10800017 	ldw	r2,0(r2)
  810c48:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810c4c:	e0bffc17 	ldw	r2,-16(fp)
  810c50:	10800104 	addi	r2,r2,4
  810c54:	10800037 	ldwio	r2,0(r2)
  810c58:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  810c5c:	e0bffd17 	ldw	r2,-12(fp)
  810c60:	1080c00c 	andi	r2,r2,768
  810c64:	10006d26 	beq	r2,zero,810e1c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  810c68:	e0bffd17 	ldw	r2,-12(fp)
  810c6c:	1080400c 	andi	r2,r2,256
  810c70:	10003526 	beq	r2,zero,810d48 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  810c74:	00800074 	movhi	r2,1
  810c78:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810c7c:	e0bffb17 	ldw	r2,-20(fp)
  810c80:	10800a17 	ldw	r2,40(r2)
  810c84:	10800044 	addi	r2,r2,1
  810c88:	1081ffcc 	andi	r2,r2,2047
  810c8c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  810c90:	e0bffb17 	ldw	r2,-20(fp)
  810c94:	10c00b17 	ldw	r3,44(r2)
  810c98:	e0bffe17 	ldw	r2,-8(fp)
  810c9c:	18801526 	beq	r3,r2,810cf4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  810ca0:	e0bffc17 	ldw	r2,-16(fp)
  810ca4:	10800037 	ldwio	r2,0(r2)
  810ca8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  810cac:	e0bff917 	ldw	r2,-28(fp)
  810cb0:	10a0000c 	andi	r2,r2,32768
  810cb4:	10001126 	beq	r2,zero,810cfc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  810cb8:	e0bffb17 	ldw	r2,-20(fp)
  810cbc:	10800a17 	ldw	r2,40(r2)
  810cc0:	e0fff917 	ldw	r3,-28(fp)
  810cc4:	1809883a 	mov	r4,r3
  810cc8:	e0fffb17 	ldw	r3,-20(fp)
  810ccc:	1885883a 	add	r2,r3,r2
  810cd0:	10800e04 	addi	r2,r2,56
  810cd4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810cd8:	e0bffb17 	ldw	r2,-20(fp)
  810cdc:	10800a17 	ldw	r2,40(r2)
  810ce0:	10800044 	addi	r2,r2,1
  810ce4:	10c1ffcc 	andi	r3,r2,2047
  810ce8:	e0bffb17 	ldw	r2,-20(fp)
  810cec:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  810cf0:	003fe206 	br	810c7c <__alt_mem_onchip_mem+0xff790c7c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  810cf4:	0001883a 	nop
  810cf8:	00000106 	br	810d00 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  810cfc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  810d00:	e0bff917 	ldw	r2,-28(fp)
  810d04:	10bfffec 	andhi	r2,r2,65535
  810d08:	10000f26 	beq	r2,zero,810d48 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810d0c:	e0bffb17 	ldw	r2,-20(fp)
  810d10:	10c00817 	ldw	r3,32(r2)
  810d14:	00bfff84 	movi	r2,-2
  810d18:	1886703a 	and	r3,r3,r2
  810d1c:	e0bffb17 	ldw	r2,-20(fp)
  810d20:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  810d24:	e0bffc17 	ldw	r2,-16(fp)
  810d28:	10800104 	addi	r2,r2,4
  810d2c:	1007883a 	mov	r3,r2
  810d30:	e0bffb17 	ldw	r2,-20(fp)
  810d34:	10800817 	ldw	r2,32(r2)
  810d38:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810d3c:	e0bffc17 	ldw	r2,-16(fp)
  810d40:	10800104 	addi	r2,r2,4
  810d44:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  810d48:	e0bffd17 	ldw	r2,-12(fp)
  810d4c:	1080800c 	andi	r2,r2,512
  810d50:	103fbe26 	beq	r2,zero,810c4c <__alt_mem_onchip_mem+0xff790c4c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  810d54:	e0bffd17 	ldw	r2,-12(fp)
  810d58:	1004d43a 	srli	r2,r2,16
  810d5c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  810d60:	00001406 	br	810db4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  810d64:	e0bffc17 	ldw	r2,-16(fp)
  810d68:	e0fffb17 	ldw	r3,-20(fp)
  810d6c:	18c00d17 	ldw	r3,52(r3)
  810d70:	e13ffb17 	ldw	r4,-20(fp)
  810d74:	20c7883a 	add	r3,r4,r3
  810d78:	18c20e04 	addi	r3,r3,2104
  810d7c:	18c00003 	ldbu	r3,0(r3)
  810d80:	18c03fcc 	andi	r3,r3,255
  810d84:	18c0201c 	xori	r3,r3,128
  810d88:	18ffe004 	addi	r3,r3,-128
  810d8c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810d90:	e0bffb17 	ldw	r2,-20(fp)
  810d94:	10800d17 	ldw	r2,52(r2)
  810d98:	10800044 	addi	r2,r2,1
  810d9c:	10c1ffcc 	andi	r3,r2,2047
  810da0:	e0bffb17 	ldw	r2,-20(fp)
  810da4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  810da8:	e0bffa17 	ldw	r2,-24(fp)
  810dac:	10bfffc4 	addi	r2,r2,-1
  810db0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  810db4:	e0bffa17 	ldw	r2,-24(fp)
  810db8:	10000526 	beq	r2,zero,810dd0 <altera_avalon_jtag_uart_irq+0x1a8>
  810dbc:	e0bffb17 	ldw	r2,-20(fp)
  810dc0:	10c00d17 	ldw	r3,52(r2)
  810dc4:	e0bffb17 	ldw	r2,-20(fp)
  810dc8:	10800c17 	ldw	r2,48(r2)
  810dcc:	18bfe51e 	bne	r3,r2,810d64 <__alt_mem_onchip_mem+0xff790d64>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  810dd0:	e0bffa17 	ldw	r2,-24(fp)
  810dd4:	103f9d26 	beq	r2,zero,810c4c <__alt_mem_onchip_mem+0xff790c4c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  810dd8:	e0bffb17 	ldw	r2,-20(fp)
  810ddc:	10c00817 	ldw	r3,32(r2)
  810de0:	00bfff44 	movi	r2,-3
  810de4:	1886703a 	and	r3,r3,r2
  810de8:	e0bffb17 	ldw	r2,-20(fp)
  810dec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810df0:	e0bffb17 	ldw	r2,-20(fp)
  810df4:	10800017 	ldw	r2,0(r2)
  810df8:	10800104 	addi	r2,r2,4
  810dfc:	1007883a 	mov	r3,r2
  810e00:	e0bffb17 	ldw	r2,-20(fp)
  810e04:	10800817 	ldw	r2,32(r2)
  810e08:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810e0c:	e0bffc17 	ldw	r2,-16(fp)
  810e10:	10800104 	addi	r2,r2,4
  810e14:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  810e18:	003f8c06 	br	810c4c <__alt_mem_onchip_mem+0xff790c4c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  810e1c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  810e20:	0001883a 	nop
  810e24:	e037883a 	mov	sp,fp
  810e28:	df000017 	ldw	fp,0(sp)
  810e2c:	dec00104 	addi	sp,sp,4
  810e30:	f800283a 	ret

00810e34 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  810e34:	defff804 	addi	sp,sp,-32
  810e38:	df000715 	stw	fp,28(sp)
  810e3c:	df000704 	addi	fp,sp,28
  810e40:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  810e44:	e0bffb17 	ldw	r2,-20(fp)
  810e48:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  810e4c:	e0bff917 	ldw	r2,-28(fp)
  810e50:	10800017 	ldw	r2,0(r2)
  810e54:	10800104 	addi	r2,r2,4
  810e58:	10800037 	ldwio	r2,0(r2)
  810e5c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  810e60:	e0bffa17 	ldw	r2,-24(fp)
  810e64:	1081000c 	andi	r2,r2,1024
  810e68:	10000b26 	beq	r2,zero,810e98 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  810e6c:	e0bff917 	ldw	r2,-28(fp)
  810e70:	10800017 	ldw	r2,0(r2)
  810e74:	10800104 	addi	r2,r2,4
  810e78:	1007883a 	mov	r3,r2
  810e7c:	e0bff917 	ldw	r2,-28(fp)
  810e80:	10800817 	ldw	r2,32(r2)
  810e84:	10810014 	ori	r2,r2,1024
  810e88:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  810e8c:	e0bff917 	ldw	r2,-28(fp)
  810e90:	10000915 	stw	zero,36(r2)
  810e94:	00000a06 	br	810ec0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  810e98:	e0bff917 	ldw	r2,-28(fp)
  810e9c:	10c00917 	ldw	r3,36(r2)
  810ea0:	00a00034 	movhi	r2,32768
  810ea4:	10bfff04 	addi	r2,r2,-4
  810ea8:	10c00536 	bltu	r2,r3,810ec0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  810eac:	e0bff917 	ldw	r2,-28(fp)
  810eb0:	10800917 	ldw	r2,36(r2)
  810eb4:	10c00044 	addi	r3,r2,1
  810eb8:	e0bff917 	ldw	r2,-28(fp)
  810ebc:	10c00915 	stw	r3,36(r2)
  810ec0:	d0a77617 	ldw	r2,-25128(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  810ec4:	e037883a 	mov	sp,fp
  810ec8:	df000017 	ldw	fp,0(sp)
  810ecc:	dec00104 	addi	sp,sp,4
  810ed0:	f800283a 	ret

00810ed4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  810ed4:	defffd04 	addi	sp,sp,-12
  810ed8:	df000215 	stw	fp,8(sp)
  810edc:	df000204 	addi	fp,sp,8
  810ee0:	e13ffe15 	stw	r4,-8(fp)
  810ee4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  810ee8:	00000506 	br	810f00 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  810eec:	e0bfff17 	ldw	r2,-4(fp)
  810ef0:	1090000c 	andi	r2,r2,16384
  810ef4:	10000226 	beq	r2,zero,810f00 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  810ef8:	00bffd44 	movi	r2,-11
  810efc:	00000b06 	br	810f2c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  810f00:	e0bffe17 	ldw	r2,-8(fp)
  810f04:	10c00d17 	ldw	r3,52(r2)
  810f08:	e0bffe17 	ldw	r2,-8(fp)
  810f0c:	10800c17 	ldw	r2,48(r2)
  810f10:	18800526 	beq	r3,r2,810f28 <altera_avalon_jtag_uart_close+0x54>
  810f14:	e0bffe17 	ldw	r2,-8(fp)
  810f18:	10c00917 	ldw	r3,36(r2)
  810f1c:	e0bffe17 	ldw	r2,-8(fp)
  810f20:	10800117 	ldw	r2,4(r2)
  810f24:	18bff136 	bltu	r3,r2,810eec <__alt_mem_onchip_mem+0xff790eec>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  810f28:	0005883a 	mov	r2,zero
}
  810f2c:	e037883a 	mov	sp,fp
  810f30:	df000017 	ldw	fp,0(sp)
  810f34:	dec00104 	addi	sp,sp,4
  810f38:	f800283a 	ret

00810f3c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  810f3c:	defffa04 	addi	sp,sp,-24
  810f40:	df000515 	stw	fp,20(sp)
  810f44:	df000504 	addi	fp,sp,20
  810f48:	e13ffd15 	stw	r4,-12(fp)
  810f4c:	e17ffe15 	stw	r5,-8(fp)
  810f50:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  810f54:	00bff9c4 	movi	r2,-25
  810f58:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  810f5c:	e0bffe17 	ldw	r2,-8(fp)
  810f60:	10da8060 	cmpeqi	r3,r2,27137
  810f64:	1800031e 	bne	r3,zero,810f74 <altera_avalon_jtag_uart_ioctl+0x38>
  810f68:	109a80a0 	cmpeqi	r2,r2,27138
  810f6c:	1000181e 	bne	r2,zero,810fd0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  810f70:	00002906 	br	811018 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  810f74:	e0bffd17 	ldw	r2,-12(fp)
  810f78:	10c00117 	ldw	r3,4(r2)
  810f7c:	00a00034 	movhi	r2,32768
  810f80:	10bfffc4 	addi	r2,r2,-1
  810f84:	18802126 	beq	r3,r2,81100c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  810f88:	e0bfff17 	ldw	r2,-4(fp)
  810f8c:	10800017 	ldw	r2,0(r2)
  810f90:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  810f94:	e0bffc17 	ldw	r2,-16(fp)
  810f98:	10800090 	cmplti	r2,r2,2
  810f9c:	1000061e 	bne	r2,zero,810fb8 <altera_avalon_jtag_uart_ioctl+0x7c>
  810fa0:	e0fffc17 	ldw	r3,-16(fp)
  810fa4:	00a00034 	movhi	r2,32768
  810fa8:	10bfffc4 	addi	r2,r2,-1
  810fac:	18800226 	beq	r3,r2,810fb8 <altera_avalon_jtag_uart_ioctl+0x7c>
  810fb0:	e0bffc17 	ldw	r2,-16(fp)
  810fb4:	00000206 	br	810fc0 <altera_avalon_jtag_uart_ioctl+0x84>
  810fb8:	00a00034 	movhi	r2,32768
  810fbc:	10bfff84 	addi	r2,r2,-2
  810fc0:	e0fffd17 	ldw	r3,-12(fp)
  810fc4:	18800115 	stw	r2,4(r3)
      rc = 0;
  810fc8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  810fcc:	00000f06 	br	81100c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  810fd0:	e0bffd17 	ldw	r2,-12(fp)
  810fd4:	10c00117 	ldw	r3,4(r2)
  810fd8:	00a00034 	movhi	r2,32768
  810fdc:	10bfffc4 	addi	r2,r2,-1
  810fe0:	18800c26 	beq	r3,r2,811014 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  810fe4:	e0bffd17 	ldw	r2,-12(fp)
  810fe8:	10c00917 	ldw	r3,36(r2)
  810fec:	e0bffd17 	ldw	r2,-12(fp)
  810ff0:	10800117 	ldw	r2,4(r2)
  810ff4:	1885803a 	cmpltu	r2,r3,r2
  810ff8:	10c03fcc 	andi	r3,r2,255
  810ffc:	e0bfff17 	ldw	r2,-4(fp)
  811000:	10c00015 	stw	r3,0(r2)
      rc = 0;
  811004:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  811008:	00000206 	br	811014 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  81100c:	0001883a 	nop
  811010:	00000106 	br	811018 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  811014:	0001883a 	nop

  default:
    break;
  }

  return rc;
  811018:	e0bffb17 	ldw	r2,-20(fp)
}
  81101c:	e037883a 	mov	sp,fp
  811020:	df000017 	ldw	fp,0(sp)
  811024:	dec00104 	addi	sp,sp,4
  811028:	f800283a 	ret

0081102c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  81102c:	defff304 	addi	sp,sp,-52
  811030:	dfc00c15 	stw	ra,48(sp)
  811034:	df000b15 	stw	fp,44(sp)
  811038:	df000b04 	addi	fp,sp,44
  81103c:	e13ffc15 	stw	r4,-16(fp)
  811040:	e17ffd15 	stw	r5,-12(fp)
  811044:	e1bffe15 	stw	r6,-8(fp)
  811048:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  81104c:	e0bffd17 	ldw	r2,-12(fp)
  811050:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  811054:	00004706 	br	811174 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  811058:	e0bffc17 	ldw	r2,-16(fp)
  81105c:	10800a17 	ldw	r2,40(r2)
  811060:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  811064:	e0bffc17 	ldw	r2,-16(fp)
  811068:	10800b17 	ldw	r2,44(r2)
  81106c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  811070:	e0fff717 	ldw	r3,-36(fp)
  811074:	e0bff817 	ldw	r2,-32(fp)
  811078:	18800536 	bltu	r3,r2,811090 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  81107c:	e0fff717 	ldw	r3,-36(fp)
  811080:	e0bff817 	ldw	r2,-32(fp)
  811084:	1885c83a 	sub	r2,r3,r2
  811088:	e0bff615 	stw	r2,-40(fp)
  81108c:	00000406 	br	8110a0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  811090:	00c20004 	movi	r3,2048
  811094:	e0bff817 	ldw	r2,-32(fp)
  811098:	1885c83a 	sub	r2,r3,r2
  81109c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8110a0:	e0bff617 	ldw	r2,-40(fp)
  8110a4:	10001e26 	beq	r2,zero,811120 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  8110a8:	e0fffe17 	ldw	r3,-8(fp)
  8110ac:	e0bff617 	ldw	r2,-40(fp)
  8110b0:	1880022e 	bgeu	r3,r2,8110bc <altera_avalon_jtag_uart_read+0x90>
        n = space;
  8110b4:	e0bffe17 	ldw	r2,-8(fp)
  8110b8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  8110bc:	e0bffc17 	ldw	r2,-16(fp)
  8110c0:	10c00e04 	addi	r3,r2,56
  8110c4:	e0bff817 	ldw	r2,-32(fp)
  8110c8:	1885883a 	add	r2,r3,r2
  8110cc:	e1bff617 	ldw	r6,-40(fp)
  8110d0:	100b883a 	mov	r5,r2
  8110d4:	e13ff517 	ldw	r4,-44(fp)
  8110d8:	0808ed80 	call	808ed8 <memcpy>
      ptr   += n;
  8110dc:	e0fff517 	ldw	r3,-44(fp)
  8110e0:	e0bff617 	ldw	r2,-40(fp)
  8110e4:	1885883a 	add	r2,r3,r2
  8110e8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  8110ec:	e0fffe17 	ldw	r3,-8(fp)
  8110f0:	e0bff617 	ldw	r2,-40(fp)
  8110f4:	1885c83a 	sub	r2,r3,r2
  8110f8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8110fc:	e0fff817 	ldw	r3,-32(fp)
  811100:	e0bff617 	ldw	r2,-40(fp)
  811104:	1885883a 	add	r2,r3,r2
  811108:	10c1ffcc 	andi	r3,r2,2047
  81110c:	e0bffc17 	ldw	r2,-16(fp)
  811110:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  811114:	e0bffe17 	ldw	r2,-8(fp)
  811118:	00bfcf16 	blt	zero,r2,811058 <__alt_mem_onchip_mem+0xff791058>
  81111c:	00000106 	br	811124 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  811120:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  811124:	e0fff517 	ldw	r3,-44(fp)
  811128:	e0bffd17 	ldw	r2,-12(fp)
  81112c:	1880141e 	bne	r3,r2,811180 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  811130:	e0bfff17 	ldw	r2,-4(fp)
  811134:	1090000c 	andi	r2,r2,16384
  811138:	1000131e 	bne	r2,zero,811188 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  81113c:	0001883a 	nop
  811140:	e0bffc17 	ldw	r2,-16(fp)
  811144:	10c00a17 	ldw	r3,40(r2)
  811148:	e0bff717 	ldw	r2,-36(fp)
  81114c:	1880051e 	bne	r3,r2,811164 <altera_avalon_jtag_uart_read+0x138>
  811150:	e0bffc17 	ldw	r2,-16(fp)
  811154:	10c00917 	ldw	r3,36(r2)
  811158:	e0bffc17 	ldw	r2,-16(fp)
  81115c:	10800117 	ldw	r2,4(r2)
  811160:	18bff736 	bltu	r3,r2,811140 <__alt_mem_onchip_mem+0xff791140>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  811164:	e0bffc17 	ldw	r2,-16(fp)
  811168:	10c00a17 	ldw	r3,40(r2)
  81116c:	e0bff717 	ldw	r2,-36(fp)
  811170:	18800726 	beq	r3,r2,811190 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  811174:	e0bffe17 	ldw	r2,-8(fp)
  811178:	00bfb716 	blt	zero,r2,811058 <__alt_mem_onchip_mem+0xff791058>
  81117c:	00000506 	br	811194 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  811180:	0001883a 	nop
  811184:	00000306 	br	811194 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  811188:	0001883a 	nop
  81118c:	00000106 	br	811194 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  811190:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  811194:	e0fff517 	ldw	r3,-44(fp)
  811198:	e0bffd17 	ldw	r2,-12(fp)
  81119c:	18801826 	beq	r3,r2,811200 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8111a0:	0005303a 	rdctl	r2,status
  8111a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8111a8:	e0fffb17 	ldw	r3,-20(fp)
  8111ac:	00bfff84 	movi	r2,-2
  8111b0:	1884703a 	and	r2,r3,r2
  8111b4:	1001703a 	wrctl	status,r2
  
  return context;
  8111b8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8111bc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8111c0:	e0bffc17 	ldw	r2,-16(fp)
  8111c4:	10800817 	ldw	r2,32(r2)
  8111c8:	10c00054 	ori	r3,r2,1
  8111cc:	e0bffc17 	ldw	r2,-16(fp)
  8111d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8111d4:	e0bffc17 	ldw	r2,-16(fp)
  8111d8:	10800017 	ldw	r2,0(r2)
  8111dc:	10800104 	addi	r2,r2,4
  8111e0:	1007883a 	mov	r3,r2
  8111e4:	e0bffc17 	ldw	r2,-16(fp)
  8111e8:	10800817 	ldw	r2,32(r2)
  8111ec:	18800035 	stwio	r2,0(r3)
  8111f0:	e0bffa17 	ldw	r2,-24(fp)
  8111f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8111f8:	e0bff917 	ldw	r2,-28(fp)
  8111fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  811200:	e0fff517 	ldw	r3,-44(fp)
  811204:	e0bffd17 	ldw	r2,-12(fp)
  811208:	18800426 	beq	r3,r2,81121c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  81120c:	e0fff517 	ldw	r3,-44(fp)
  811210:	e0bffd17 	ldw	r2,-12(fp)
  811214:	1885c83a 	sub	r2,r3,r2
  811218:	00000606 	br	811234 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  81121c:	e0bfff17 	ldw	r2,-4(fp)
  811220:	1090000c 	andi	r2,r2,16384
  811224:	10000226 	beq	r2,zero,811230 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  811228:	00bffd44 	movi	r2,-11
  81122c:	00000106 	br	811234 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  811230:	00bffec4 	movi	r2,-5
}
  811234:	e037883a 	mov	sp,fp
  811238:	dfc00117 	ldw	ra,4(sp)
  81123c:	df000017 	ldw	fp,0(sp)
  811240:	dec00204 	addi	sp,sp,8
  811244:	f800283a 	ret

00811248 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  811248:	defff304 	addi	sp,sp,-52
  81124c:	dfc00c15 	stw	ra,48(sp)
  811250:	df000b15 	stw	fp,44(sp)
  811254:	df000b04 	addi	fp,sp,44
  811258:	e13ffc15 	stw	r4,-16(fp)
  81125c:	e17ffd15 	stw	r5,-12(fp)
  811260:	e1bffe15 	stw	r6,-8(fp)
  811264:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  811268:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  81126c:	e0bffd17 	ldw	r2,-12(fp)
  811270:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  811274:	00003706 	br	811354 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  811278:	e0bffc17 	ldw	r2,-16(fp)
  81127c:	10800c17 	ldw	r2,48(r2)
  811280:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  811284:	e0bffc17 	ldw	r2,-16(fp)
  811288:	10800d17 	ldw	r2,52(r2)
  81128c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  811290:	e0fff917 	ldw	r3,-28(fp)
  811294:	e0bff517 	ldw	r2,-44(fp)
  811298:	1880062e 	bgeu	r3,r2,8112b4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  81129c:	e0fff517 	ldw	r3,-44(fp)
  8112a0:	e0bff917 	ldw	r2,-28(fp)
  8112a4:	1885c83a 	sub	r2,r3,r2
  8112a8:	10bfffc4 	addi	r2,r2,-1
  8112ac:	e0bff615 	stw	r2,-40(fp)
  8112b0:	00000b06 	br	8112e0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  8112b4:	e0bff517 	ldw	r2,-44(fp)
  8112b8:	10000526 	beq	r2,zero,8112d0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8112bc:	00c20004 	movi	r3,2048
  8112c0:	e0bff917 	ldw	r2,-28(fp)
  8112c4:	1885c83a 	sub	r2,r3,r2
  8112c8:	e0bff615 	stw	r2,-40(fp)
  8112cc:	00000406 	br	8112e0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8112d0:	00c1ffc4 	movi	r3,2047
  8112d4:	e0bff917 	ldw	r2,-28(fp)
  8112d8:	1885c83a 	sub	r2,r3,r2
  8112dc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8112e0:	e0bff617 	ldw	r2,-40(fp)
  8112e4:	10001e26 	beq	r2,zero,811360 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  8112e8:	e0fffe17 	ldw	r3,-8(fp)
  8112ec:	e0bff617 	ldw	r2,-40(fp)
  8112f0:	1880022e 	bgeu	r3,r2,8112fc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  8112f4:	e0bffe17 	ldw	r2,-8(fp)
  8112f8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8112fc:	e0bffc17 	ldw	r2,-16(fp)
  811300:	10c20e04 	addi	r3,r2,2104
  811304:	e0bff917 	ldw	r2,-28(fp)
  811308:	1885883a 	add	r2,r3,r2
  81130c:	e1bff617 	ldw	r6,-40(fp)
  811310:	e17ffd17 	ldw	r5,-12(fp)
  811314:	1009883a 	mov	r4,r2
  811318:	0808ed80 	call	808ed8 <memcpy>
      ptr   += n;
  81131c:	e0fffd17 	ldw	r3,-12(fp)
  811320:	e0bff617 	ldw	r2,-40(fp)
  811324:	1885883a 	add	r2,r3,r2
  811328:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  81132c:	e0fffe17 	ldw	r3,-8(fp)
  811330:	e0bff617 	ldw	r2,-40(fp)
  811334:	1885c83a 	sub	r2,r3,r2
  811338:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81133c:	e0fff917 	ldw	r3,-28(fp)
  811340:	e0bff617 	ldw	r2,-40(fp)
  811344:	1885883a 	add	r2,r3,r2
  811348:	10c1ffcc 	andi	r3,r2,2047
  81134c:	e0bffc17 	ldw	r2,-16(fp)
  811350:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  811354:	e0bffe17 	ldw	r2,-8(fp)
  811358:	00bfc716 	blt	zero,r2,811278 <__alt_mem_onchip_mem+0xff791278>
  81135c:	00000106 	br	811364 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  811360:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811364:	0005303a 	rdctl	r2,status
  811368:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81136c:	e0fffb17 	ldw	r3,-20(fp)
  811370:	00bfff84 	movi	r2,-2
  811374:	1884703a 	and	r2,r3,r2
  811378:	1001703a 	wrctl	status,r2
  
  return context;
  81137c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  811380:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  811384:	e0bffc17 	ldw	r2,-16(fp)
  811388:	10800817 	ldw	r2,32(r2)
  81138c:	10c00094 	ori	r3,r2,2
  811390:	e0bffc17 	ldw	r2,-16(fp)
  811394:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811398:	e0bffc17 	ldw	r2,-16(fp)
  81139c:	10800017 	ldw	r2,0(r2)
  8113a0:	10800104 	addi	r2,r2,4
  8113a4:	1007883a 	mov	r3,r2
  8113a8:	e0bffc17 	ldw	r2,-16(fp)
  8113ac:	10800817 	ldw	r2,32(r2)
  8113b0:	18800035 	stwio	r2,0(r3)
  8113b4:	e0bffa17 	ldw	r2,-24(fp)
  8113b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8113bc:	e0bff817 	ldw	r2,-32(fp)
  8113c0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8113c4:	e0bffe17 	ldw	r2,-8(fp)
  8113c8:	0080100e 	bge	zero,r2,81140c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  8113cc:	e0bfff17 	ldw	r2,-4(fp)
  8113d0:	1090000c 	andi	r2,r2,16384
  8113d4:	1000101e 	bne	r2,zero,811418 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8113d8:	0001883a 	nop
  8113dc:	e0bffc17 	ldw	r2,-16(fp)
  8113e0:	10c00d17 	ldw	r3,52(r2)
  8113e4:	e0bff517 	ldw	r2,-44(fp)
  8113e8:	1880051e 	bne	r3,r2,811400 <altera_avalon_jtag_uart_write+0x1b8>
  8113ec:	e0bffc17 	ldw	r2,-16(fp)
  8113f0:	10c00917 	ldw	r3,36(r2)
  8113f4:	e0bffc17 	ldw	r2,-16(fp)
  8113f8:	10800117 	ldw	r2,4(r2)
  8113fc:	18bff736 	bltu	r3,r2,8113dc <__alt_mem_onchip_mem+0xff7913dc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  811400:	e0bffc17 	ldw	r2,-16(fp)
  811404:	10800917 	ldw	r2,36(r2)
  811408:	1000051e 	bne	r2,zero,811420 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  81140c:	e0bffe17 	ldw	r2,-8(fp)
  811410:	00bfd016 	blt	zero,r2,811354 <__alt_mem_onchip_mem+0xff791354>
  811414:	00000306 	br	811424 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  811418:	0001883a 	nop
  81141c:	00000106 	br	811424 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  811420:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  811424:	e0fffd17 	ldw	r3,-12(fp)
  811428:	e0bff717 	ldw	r2,-36(fp)
  81142c:	18800426 	beq	r3,r2,811440 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  811430:	e0fffd17 	ldw	r3,-12(fp)
  811434:	e0bff717 	ldw	r2,-36(fp)
  811438:	1885c83a 	sub	r2,r3,r2
  81143c:	00000606 	br	811458 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  811440:	e0bfff17 	ldw	r2,-4(fp)
  811444:	1090000c 	andi	r2,r2,16384
  811448:	10000226 	beq	r2,zero,811454 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  81144c:	00bffd44 	movi	r2,-11
  811450:	00000106 	br	811458 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  811454:	00bffec4 	movi	r2,-5
}
  811458:	e037883a 	mov	sp,fp
  81145c:	dfc00117 	ldw	ra,4(sp)
  811460:	df000017 	ldw	fp,0(sp)
  811464:	dec00204 	addi	sp,sp,8
  811468:	f800283a 	ret

0081146c <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  81146c:	defffa04 	addi	sp,sp,-24
  811470:	dfc00515 	stw	ra,20(sp)
  811474:	df000415 	stw	fp,16(sp)
  811478:	df000404 	addi	fp,sp,16
  81147c:	e13ffe15 	stw	r4,-8(fp)
  811480:	2805883a 	mov	r2,r5
  811484:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  811488:	e0bffe17 	ldw	r2,-8(fp)
  81148c:	10800017 	ldw	r2,0(r2)
  811490:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  811494:	008003f4 	movhi	r2,15
  811498:	10909004 	addi	r2,r2,16960
  81149c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8114a0:	e0bffe17 	ldw	r2,-8(fp)
  8114a4:	10800803 	ldbu	r2,32(r2)
  8114a8:	10803fcc 	andi	r2,r2,255
  8114ac:	1080201c 	xori	r2,r2,128
  8114b0:	10bfe004 	addi	r2,r2,-128
  8114b4:	1000151e 	bne	r2,zero,81150c <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8114b8:	00000906 	br	8114e0 <lcd_write_command+0x74>
    if (--i == 0)
  8114bc:	e0bffc17 	ldw	r2,-16(fp)
  8114c0:	10bfffc4 	addi	r2,r2,-1
  8114c4:	e0bffc15 	stw	r2,-16(fp)
  8114c8:	e0bffc17 	ldw	r2,-16(fp)
  8114cc:	1000041e 	bne	r2,zero,8114e0 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  8114d0:	e0bffe17 	ldw	r2,-8(fp)
  8114d4:	00c00044 	movi	r3,1
  8114d8:	10c00805 	stb	r3,32(r2)
      return;
  8114dc:	00000c06 	br	811510 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8114e0:	e0bffd17 	ldw	r2,-12(fp)
  8114e4:	10800104 	addi	r2,r2,4
  8114e8:	10800037 	ldwio	r2,0(r2)
  8114ec:	1080200c 	andi	r2,r2,128
  8114f0:	103ff21e 	bne	r2,zero,8114bc <__alt_mem_onchip_mem+0xff7914bc>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8114f4:	01001904 	movi	r4,100
  8114f8:	081354c0 	call	81354c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  8114fc:	e0bffd17 	ldw	r2,-12(fp)
  811500:	e0ffff03 	ldbu	r3,-4(fp)
  811504:	10c00035 	stwio	r3,0(r2)
  811508:	00000106 	br	811510 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  81150c:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  811510:	e037883a 	mov	sp,fp
  811514:	dfc00117 	ldw	ra,4(sp)
  811518:	df000017 	ldw	fp,0(sp)
  81151c:	dec00204 	addi	sp,sp,8
  811520:	f800283a 	ret

00811524 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  811524:	defffa04 	addi	sp,sp,-24
  811528:	dfc00515 	stw	ra,20(sp)
  81152c:	df000415 	stw	fp,16(sp)
  811530:	df000404 	addi	fp,sp,16
  811534:	e13ffe15 	stw	r4,-8(fp)
  811538:	2805883a 	mov	r2,r5
  81153c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  811540:	e0bffe17 	ldw	r2,-8(fp)
  811544:	10800017 	ldw	r2,0(r2)
  811548:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  81154c:	008003f4 	movhi	r2,15
  811550:	10909004 	addi	r2,r2,16960
  811554:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  811558:	e0bffe17 	ldw	r2,-8(fp)
  81155c:	10800803 	ldbu	r2,32(r2)
  811560:	10803fcc 	andi	r2,r2,255
  811564:	1080201c 	xori	r2,r2,128
  811568:	10bfe004 	addi	r2,r2,-128
  81156c:	10001d1e 	bne	r2,zero,8115e4 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  811570:	00000906 	br	811598 <lcd_write_data+0x74>
    if (--i == 0)
  811574:	e0bffc17 	ldw	r2,-16(fp)
  811578:	10bfffc4 	addi	r2,r2,-1
  81157c:	e0bffc15 	stw	r2,-16(fp)
  811580:	e0bffc17 	ldw	r2,-16(fp)
  811584:	1000041e 	bne	r2,zero,811598 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  811588:	e0bffe17 	ldw	r2,-8(fp)
  81158c:	00c00044 	movi	r3,1
  811590:	10c00805 	stb	r3,32(r2)
      return;
  811594:	00001406 	br	8115e8 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  811598:	e0bffd17 	ldw	r2,-12(fp)
  81159c:	10800104 	addi	r2,r2,4
  8115a0:	10800037 	ldwio	r2,0(r2)
  8115a4:	1080200c 	andi	r2,r2,128
  8115a8:	103ff21e 	bne	r2,zero,811574 <__alt_mem_onchip_mem+0xff791574>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8115ac:	01001904 	movi	r4,100
  8115b0:	081354c0 	call	81354c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  8115b4:	e0bffd17 	ldw	r2,-12(fp)
  8115b8:	10800204 	addi	r2,r2,8
  8115bc:	1007883a 	mov	r3,r2
  8115c0:	e0bfff03 	ldbu	r2,-4(fp)
  8115c4:	18800035 	stwio	r2,0(r3)

  sp->address++;
  8115c8:	e0bffe17 	ldw	r2,-8(fp)
  8115cc:	108008c3 	ldbu	r2,35(r2)
  8115d0:	10800044 	addi	r2,r2,1
  8115d4:	1007883a 	mov	r3,r2
  8115d8:	e0bffe17 	ldw	r2,-8(fp)
  8115dc:	10c008c5 	stb	r3,35(r2)
  8115e0:	00000106 	br	8115e8 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  8115e4:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  8115e8:	e037883a 	mov	sp,fp
  8115ec:	dfc00117 	ldw	ra,4(sp)
  8115f0:	df000017 	ldw	fp,0(sp)
  8115f4:	dec00204 	addi	sp,sp,8
  8115f8:	f800283a 	ret

008115fc <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  8115fc:	defffc04 	addi	sp,sp,-16
  811600:	dfc00315 	stw	ra,12(sp)
  811604:	df000215 	stw	fp,8(sp)
  811608:	df000204 	addi	fp,sp,8
  81160c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  811610:	01400044 	movi	r5,1
  811614:	e13fff17 	ldw	r4,-4(fp)
  811618:	081146c0 	call	81146c <lcd_write_command>

  sp->x = 0;
  81161c:	e0bfff17 	ldw	r2,-4(fp)
  811620:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  811624:	e0bfff17 	ldw	r2,-4(fp)
  811628:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  81162c:	e0bfff17 	ldw	r2,-4(fp)
  811630:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811634:	e03ffe15 	stw	zero,-8(fp)
  811638:	00001b06 	br	8116a8 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  81163c:	e0bffe17 	ldw	r2,-8(fp)
  811640:	108018e4 	muli	r2,r2,99
  811644:	10801004 	addi	r2,r2,64
  811648:	e0ffff17 	ldw	r3,-4(fp)
  81164c:	1885883a 	add	r2,r3,r2
  811650:	01801444 	movi	r6,81
  811654:	01400804 	movi	r5,32
  811658:	1009883a 	mov	r4,r2
  81165c:	08037240 	call	803724 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  811660:	e0bffe17 	ldw	r2,-8(fp)
  811664:	108018e4 	muli	r2,r2,99
  811668:	10800c04 	addi	r2,r2,48
  81166c:	e0ffff17 	ldw	r3,-4(fp)
  811670:	1885883a 	add	r2,r3,r2
  811674:	01800404 	movi	r6,16
  811678:	01400804 	movi	r5,32
  81167c:	1009883a 	mov	r4,r2
  811680:	08037240 	call	803724 <memset>
    sp->line[y].width = 0;
  811684:	e0ffff17 	ldw	r3,-4(fp)
  811688:	e0bffe17 	ldw	r2,-8(fp)
  81168c:	108018e4 	muli	r2,r2,99
  811690:	1885883a 	add	r2,r3,r2
  811694:	10802444 	addi	r2,r2,145
  811698:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81169c:	e0bffe17 	ldw	r2,-8(fp)
  8116a0:	10800044 	addi	r2,r2,1
  8116a4:	e0bffe15 	stw	r2,-8(fp)
  8116a8:	e0bffe17 	ldw	r2,-8(fp)
  8116ac:	10800090 	cmplti	r2,r2,2
  8116b0:	103fe21e 	bne	r2,zero,81163c <__alt_mem_onchip_mem+0xff79163c>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  8116b4:	0001883a 	nop
  8116b8:	e037883a 	mov	sp,fp
  8116bc:	dfc00117 	ldw	ra,4(sp)
  8116c0:	df000017 	ldw	fp,0(sp)
  8116c4:	dec00204 	addi	sp,sp,8
  8116c8:	f800283a 	ret

008116cc <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  8116cc:	defff704 	addi	sp,sp,-36
  8116d0:	dfc00815 	stw	ra,32(sp)
  8116d4:	df000715 	stw	fp,28(sp)
  8116d8:	df000704 	addi	fp,sp,28
  8116dc:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  8116e0:	e0bfff17 	ldw	r2,-4(fp)
  8116e4:	10800943 	ldbu	r2,37(r2)
  8116e8:	10803fcc 	andi	r2,r2,255
  8116ec:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8116f0:	e03ff915 	stw	zero,-28(fp)
  8116f4:	00006706 	br	811894 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  8116f8:	e0ffff17 	ldw	r3,-4(fp)
  8116fc:	e0bff917 	ldw	r2,-28(fp)
  811700:	108018e4 	muli	r2,r2,99
  811704:	1885883a 	add	r2,r3,r2
  811708:	10802444 	addi	r2,r2,145
  81170c:	10800003 	ldbu	r2,0(r2)
  811710:	10803fcc 	andi	r2,r2,255
  811714:	1080201c 	xori	r2,r2,128
  811718:	10bfe004 	addi	r2,r2,-128
  81171c:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  811720:	e0ffff17 	ldw	r3,-4(fp)
  811724:	e0bff917 	ldw	r2,-28(fp)
  811728:	108018e4 	muli	r2,r2,99
  81172c:	1885883a 	add	r2,r3,r2
  811730:	10802484 	addi	r2,r2,146
  811734:	10800003 	ldbu	r2,0(r2)
  811738:	10c03fcc 	andi	r3,r2,255
  81173c:	e0bffc17 	ldw	r2,-16(fp)
  811740:	1885383a 	mul	r2,r3,r2
  811744:	1005d23a 	srai	r2,r2,8
  811748:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  81174c:	e0fffb17 	ldw	r3,-20(fp)
  811750:	e0bffd17 	ldw	r2,-12(fp)
  811754:	18800116 	blt	r3,r2,81175c <lcd_repaint_screen+0x90>
      offset = 0;
  811758:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  81175c:	e03ffa15 	stw	zero,-24(fp)
  811760:	00004606 	br	81187c <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  811764:	e0fffa17 	ldw	r3,-24(fp)
  811768:	e0bffb17 	ldw	r2,-20(fp)
  81176c:	1885883a 	add	r2,r3,r2
  811770:	e17ffd17 	ldw	r5,-12(fp)
  811774:	1009883a 	mov	r4,r2
  811778:	080d17c0 	call	80d17c <__modsi3>
  81177c:	1009883a 	mov	r4,r2
  811780:	e0ffff17 	ldw	r3,-4(fp)
  811784:	e0bff917 	ldw	r2,-28(fp)
  811788:	108018e4 	muli	r2,r2,99
  81178c:	1885883a 	add	r2,r3,r2
  811790:	1105883a 	add	r2,r2,r4
  811794:	10801004 	addi	r2,r2,64
  811798:	10800003 	ldbu	r2,0(r2)
  81179c:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  8117a0:	e0ffff17 	ldw	r3,-4(fp)
  8117a4:	e0bff917 	ldw	r2,-28(fp)
  8117a8:	108018e4 	muli	r2,r2,99
  8117ac:	1887883a 	add	r3,r3,r2
  8117b0:	e0bffa17 	ldw	r2,-24(fp)
  8117b4:	1885883a 	add	r2,r3,r2
  8117b8:	10800c04 	addi	r2,r2,48
  8117bc:	10800003 	ldbu	r2,0(r2)
  8117c0:	10c03fcc 	andi	r3,r2,255
  8117c4:	18c0201c 	xori	r3,r3,128
  8117c8:	18ffe004 	addi	r3,r3,-128
  8117cc:	e0bffe07 	ldb	r2,-8(fp)
  8117d0:	18802726 	beq	r3,r2,811870 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  8117d4:	e0fff917 	ldw	r3,-28(fp)
  8117d8:	d0a01a04 	addi	r2,gp,-32664
  8117dc:	1885883a 	add	r2,r3,r2
  8117e0:	10800003 	ldbu	r2,0(r2)
  8117e4:	1007883a 	mov	r3,r2
  8117e8:	e0bffa17 	ldw	r2,-24(fp)
  8117ec:	1885883a 	add	r2,r3,r2
  8117f0:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  8117f4:	e0fffe43 	ldbu	r3,-7(fp)
  8117f8:	e0bfff17 	ldw	r2,-4(fp)
  8117fc:	108008c3 	ldbu	r2,35(r2)
  811800:	10803fcc 	andi	r2,r2,255
  811804:	1080201c 	xori	r2,r2,128
  811808:	10bfe004 	addi	r2,r2,-128
  81180c:	18800a26 	beq	r3,r2,811838 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  811810:	e0fffe43 	ldbu	r3,-7(fp)
  811814:	00bfe004 	movi	r2,-128
  811818:	1884b03a 	or	r2,r3,r2
  81181c:	10803fcc 	andi	r2,r2,255
  811820:	100b883a 	mov	r5,r2
  811824:	e13fff17 	ldw	r4,-4(fp)
  811828:	081146c0 	call	81146c <lcd_write_command>
          sp->address = address;
  81182c:	e0fffe43 	ldbu	r3,-7(fp)
  811830:	e0bfff17 	ldw	r2,-4(fp)
  811834:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  811838:	e0bffe03 	ldbu	r2,-8(fp)
  81183c:	10803fcc 	andi	r2,r2,255
  811840:	100b883a 	mov	r5,r2
  811844:	e13fff17 	ldw	r4,-4(fp)
  811848:	08115240 	call	811524 <lcd_write_data>
        sp->line[y].visible[x] = c;
  81184c:	e0ffff17 	ldw	r3,-4(fp)
  811850:	e0bff917 	ldw	r2,-28(fp)
  811854:	108018e4 	muli	r2,r2,99
  811858:	1887883a 	add	r3,r3,r2
  81185c:	e0bffa17 	ldw	r2,-24(fp)
  811860:	1885883a 	add	r2,r3,r2
  811864:	10800c04 	addi	r2,r2,48
  811868:	e0fffe03 	ldbu	r3,-8(fp)
  81186c:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  811870:	e0bffa17 	ldw	r2,-24(fp)
  811874:	10800044 	addi	r2,r2,1
  811878:	e0bffa15 	stw	r2,-24(fp)
  81187c:	e0bffa17 	ldw	r2,-24(fp)
  811880:	10800410 	cmplti	r2,r2,16
  811884:	103fb71e 	bne	r2,zero,811764 <__alt_mem_onchip_mem+0xff791764>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811888:	e0bff917 	ldw	r2,-28(fp)
  81188c:	10800044 	addi	r2,r2,1
  811890:	e0bff915 	stw	r2,-28(fp)
  811894:	e0bff917 	ldw	r2,-28(fp)
  811898:	10800090 	cmplti	r2,r2,2
  81189c:	103f961e 	bne	r2,zero,8116f8 <__alt_mem_onchip_mem+0xff7916f8>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  8118a0:	0001883a 	nop
  8118a4:	e037883a 	mov	sp,fp
  8118a8:	dfc00117 	ldw	ra,4(sp)
  8118ac:	df000017 	ldw	fp,0(sp)
  8118b0:	dec00204 	addi	sp,sp,8
  8118b4:	f800283a 	ret

008118b8 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  8118b8:	defffc04 	addi	sp,sp,-16
  8118bc:	dfc00315 	stw	ra,12(sp)
  8118c0:	df000215 	stw	fp,8(sp)
  8118c4:	df000204 	addi	fp,sp,8
  8118c8:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8118cc:	e03ffe15 	stw	zero,-8(fp)
  8118d0:	00001d06 	br	811948 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  8118d4:	e0bffe17 	ldw	r2,-8(fp)
  8118d8:	00800f16 	blt	zero,r2,811918 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  8118dc:	e0bffe17 	ldw	r2,-8(fp)
  8118e0:	108018e4 	muli	r2,r2,99
  8118e4:	10801004 	addi	r2,r2,64
  8118e8:	e0ffff17 	ldw	r3,-4(fp)
  8118ec:	1889883a 	add	r4,r3,r2
  8118f0:	e0bffe17 	ldw	r2,-8(fp)
  8118f4:	10800044 	addi	r2,r2,1
  8118f8:	108018e4 	muli	r2,r2,99
  8118fc:	10801004 	addi	r2,r2,64
  811900:	e0ffff17 	ldw	r3,-4(fp)
  811904:	1885883a 	add	r2,r3,r2
  811908:	01801404 	movi	r6,80
  81190c:	100b883a 	mov	r5,r2
  811910:	0808ed80 	call	808ed8 <memcpy>
  811914:	00000906 	br	81193c <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  811918:	e0bffe17 	ldw	r2,-8(fp)
  81191c:	108018e4 	muli	r2,r2,99
  811920:	10801004 	addi	r2,r2,64
  811924:	e0ffff17 	ldw	r3,-4(fp)
  811928:	1885883a 	add	r2,r3,r2
  81192c:	01801404 	movi	r6,80
  811930:	01400804 	movi	r5,32
  811934:	1009883a 	mov	r4,r2
  811938:	08037240 	call	803724 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81193c:	e0bffe17 	ldw	r2,-8(fp)
  811940:	10800044 	addi	r2,r2,1
  811944:	e0bffe15 	stw	r2,-8(fp)
  811948:	e0bffe17 	ldw	r2,-8(fp)
  81194c:	10800090 	cmplti	r2,r2,2
  811950:	103fe01e 	bne	r2,zero,8118d4 <__alt_mem_onchip_mem+0xff7918d4>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  811954:	e0bfff17 	ldw	r2,-4(fp)
  811958:	10800883 	ldbu	r2,34(r2)
  81195c:	10bfffc4 	addi	r2,r2,-1
  811960:	1007883a 	mov	r3,r2
  811964:	e0bfff17 	ldw	r2,-4(fp)
  811968:	10c00885 	stb	r3,34(r2)
}
  81196c:	0001883a 	nop
  811970:	e037883a 	mov	sp,fp
  811974:	dfc00117 	ldw	ra,4(sp)
  811978:	df000017 	ldw	fp,0(sp)
  81197c:	dec00204 	addi	sp,sp,8
  811980:	f800283a 	ret

00811984 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  811984:	defff904 	addi	sp,sp,-28
  811988:	dfc00615 	stw	ra,24(sp)
  81198c:	df000515 	stw	fp,20(sp)
  811990:	df000504 	addi	fp,sp,20
  811994:	e13ffe15 	stw	r4,-8(fp)
  811998:	2805883a 	mov	r2,r5
  81199c:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  8119a0:	e03ffb15 	stw	zero,-20(fp)
  8119a4:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  8119a8:	e0bffe17 	ldw	r2,-8(fp)
  8119ac:	10800a03 	ldbu	r2,40(r2)
  8119b0:	10803fcc 	andi	r2,r2,255
  8119b4:	1080201c 	xori	r2,r2,128
  8119b8:	10bfe004 	addi	r2,r2,-128
  8119bc:	108016d8 	cmpnei	r2,r2,91
  8119c0:	1000411e 	bne	r2,zero,811ac8 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  8119c4:	e0bffe17 	ldw	r2,-8(fp)
  8119c8:	10800a04 	addi	r2,r2,40
  8119cc:	10800044 	addi	r2,r2,1
  8119d0:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  8119d4:	00000c06 	br	811a08 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  8119d8:	e0bffb17 	ldw	r2,-20(fp)
  8119dc:	10c002a4 	muli	r3,r2,10
  8119e0:	e0bffd17 	ldw	r2,-12(fp)
  8119e4:	11000044 	addi	r4,r2,1
  8119e8:	e13ffd15 	stw	r4,-12(fp)
  8119ec:	10800003 	ldbu	r2,0(r2)
  8119f0:	10803fcc 	andi	r2,r2,255
  8119f4:	1080201c 	xori	r2,r2,128
  8119f8:	10bfe004 	addi	r2,r2,-128
  8119fc:	10bff404 	addi	r2,r2,-48
  811a00:	1885883a 	add	r2,r3,r2
  811a04:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  811a08:	d0e00d17 	ldw	r3,-32716(gp)
  811a0c:	e0bffd17 	ldw	r2,-12(fp)
  811a10:	10800003 	ldbu	r2,0(r2)
  811a14:	10803fcc 	andi	r2,r2,255
  811a18:	1080201c 	xori	r2,r2,128
  811a1c:	10bfe004 	addi	r2,r2,-128
  811a20:	10800044 	addi	r2,r2,1
  811a24:	1885883a 	add	r2,r3,r2
  811a28:	10800003 	ldbu	r2,0(r2)
  811a2c:	10803fcc 	andi	r2,r2,255
  811a30:	1080010c 	andi	r2,r2,4
  811a34:	103fe81e 	bne	r2,zero,8119d8 <__alt_mem_onchip_mem+0xff7919d8>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  811a38:	e0bffd17 	ldw	r2,-12(fp)
  811a3c:	10800003 	ldbu	r2,0(r2)
  811a40:	10803fcc 	andi	r2,r2,255
  811a44:	1080201c 	xori	r2,r2,128
  811a48:	10bfe004 	addi	r2,r2,-128
  811a4c:	10800ed8 	cmpnei	r2,r2,59
  811a50:	10001f1e 	bne	r2,zero,811ad0 <lcd_handle_escape+0x14c>
    {
      ptr++;
  811a54:	e0bffd17 	ldw	r2,-12(fp)
  811a58:	10800044 	addi	r2,r2,1
  811a5c:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  811a60:	00000c06 	br	811a94 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  811a64:	e0bffc17 	ldw	r2,-16(fp)
  811a68:	10c002a4 	muli	r3,r2,10
  811a6c:	e0bffd17 	ldw	r2,-12(fp)
  811a70:	11000044 	addi	r4,r2,1
  811a74:	e13ffd15 	stw	r4,-12(fp)
  811a78:	10800003 	ldbu	r2,0(r2)
  811a7c:	10803fcc 	andi	r2,r2,255
  811a80:	1080201c 	xori	r2,r2,128
  811a84:	10bfe004 	addi	r2,r2,-128
  811a88:	10bff404 	addi	r2,r2,-48
  811a8c:	1885883a 	add	r2,r3,r2
  811a90:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  811a94:	d0e00d17 	ldw	r3,-32716(gp)
  811a98:	e0bffd17 	ldw	r2,-12(fp)
  811a9c:	10800003 	ldbu	r2,0(r2)
  811aa0:	10803fcc 	andi	r2,r2,255
  811aa4:	1080201c 	xori	r2,r2,128
  811aa8:	10bfe004 	addi	r2,r2,-128
  811aac:	10800044 	addi	r2,r2,1
  811ab0:	1885883a 	add	r2,r3,r2
  811ab4:	10800003 	ldbu	r2,0(r2)
  811ab8:	10803fcc 	andi	r2,r2,255
  811abc:	1080010c 	andi	r2,r2,4
  811ac0:	103fe81e 	bne	r2,zero,811a64 <__alt_mem_onchip_mem+0xff791a64>
  811ac4:	00000206 	br	811ad0 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  811ac8:	00bfffc4 	movi	r2,-1
  811acc:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  811ad0:	e0bfff07 	ldb	r2,-4(fp)
  811ad4:	10c012a0 	cmpeqi	r3,r2,74
  811ad8:	1800291e 	bne	r3,zero,811b80 <lcd_handle_escape+0x1fc>
  811adc:	10c012c8 	cmpgei	r3,r2,75
  811ae0:	1800031e 	bne	r3,zero,811af0 <lcd_handle_escape+0x16c>
  811ae4:	10801220 	cmpeqi	r2,r2,72
  811ae8:	1000061e 	bne	r2,zero,811b04 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  811aec:	00004a06 	br	811c18 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  811af0:	10c012e0 	cmpeqi	r3,r2,75
  811af4:	1800281e 	bne	r3,zero,811b98 <lcd_handle_escape+0x214>
  811af8:	108019a0 	cmpeqi	r2,r2,102
  811afc:	1000011e 	bne	r2,zero,811b04 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  811b00:	00004506 	br	811c18 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  811b04:	e0bffc17 	ldw	r2,-16(fp)
  811b08:	0080050e 	bge	zero,r2,811b20 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  811b0c:	e0bffc17 	ldw	r2,-16(fp)
  811b10:	10bfffc4 	addi	r2,r2,-1
  811b14:	1007883a 	mov	r3,r2
  811b18:	e0bffe17 	ldw	r2,-8(fp)
  811b1c:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  811b20:	e0bffb17 	ldw	r2,-20(fp)
  811b24:	0080370e 	bge	zero,r2,811c04 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  811b28:	e0bffb17 	ldw	r2,-20(fp)
  811b2c:	10bfffc4 	addi	r2,r2,-1
  811b30:	1007883a 	mov	r3,r2
  811b34:	e0bffe17 	ldw	r2,-8(fp)
  811b38:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  811b3c:	e0bffe17 	ldw	r2,-8(fp)
  811b40:	10800883 	ldbu	r2,34(r2)
  811b44:	10803fcc 	andi	r2,r2,255
  811b48:	10800170 	cmpltui	r2,r2,5
  811b4c:	1000061e 	bne	r2,zero,811b68 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  811b50:	e0bffe17 	ldw	r2,-8(fp)
  811b54:	00c00104 	movi	r3,4
  811b58:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  811b5c:	00000206 	br	811b68 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  811b60:	e13ffe17 	ldw	r4,-8(fp)
  811b64:	08118b80 	call	8118b8 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  811b68:	e0bffe17 	ldw	r2,-8(fp)
  811b6c:	10800883 	ldbu	r2,34(r2)
  811b70:	10803fcc 	andi	r2,r2,255
  811b74:	108000e8 	cmpgeui	r2,r2,3
  811b78:	103ff91e 	bne	r2,zero,811b60 <__alt_mem_onchip_mem+0xff791b60>
        lcd_scroll_up(sp);
    }
    break;
  811b7c:	00002106 	br	811c04 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  811b80:	e0bffb17 	ldw	r2,-20(fp)
  811b84:	10800098 	cmpnei	r2,r2,2
  811b88:	1000201e 	bne	r2,zero,811c0c <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  811b8c:	e13ffe17 	ldw	r4,-8(fp)
  811b90:	08115fc0 	call	8115fc <lcd_clear_screen>
    break;
  811b94:	00001d06 	br	811c0c <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  811b98:	e0bffb17 	ldw	r2,-20(fp)
  811b9c:	00801d16 	blt	zero,r2,811c14 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  811ba0:	e0bffe17 	ldw	r2,-8(fp)
  811ba4:	10800843 	ldbu	r2,33(r2)
  811ba8:	10803fcc 	andi	r2,r2,255
  811bac:	10801428 	cmpgeui	r2,r2,80
  811bb0:	1000181e 	bne	r2,zero,811c14 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  811bb4:	e0bffe17 	ldw	r2,-8(fp)
  811bb8:	10800883 	ldbu	r2,34(r2)
  811bbc:	10803fcc 	andi	r2,r2,255
  811bc0:	108018e4 	muli	r2,r2,99
  811bc4:	10801004 	addi	r2,r2,64
  811bc8:	e0fffe17 	ldw	r3,-8(fp)
  811bcc:	1887883a 	add	r3,r3,r2
  811bd0:	e0bffe17 	ldw	r2,-8(fp)
  811bd4:	10800843 	ldbu	r2,33(r2)
  811bd8:	10803fcc 	andi	r2,r2,255
  811bdc:	1889883a 	add	r4,r3,r2
  811be0:	e0bffe17 	ldw	r2,-8(fp)
  811be4:	10800843 	ldbu	r2,33(r2)
  811be8:	10803fcc 	andi	r2,r2,255
  811bec:	00c01404 	movi	r3,80
  811bf0:	1885c83a 	sub	r2,r3,r2
  811bf4:	100d883a 	mov	r6,r2
  811bf8:	01400804 	movi	r5,32
  811bfc:	08037240 	call	803724 <memset>
    }
    break;
  811c00:	00000406 	br	811c14 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  811c04:	0001883a 	nop
  811c08:	00000306 	br	811c18 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  811c0c:	0001883a 	nop
  811c10:	00000106 	br	811c18 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  811c14:	0001883a 	nop
  }
}
  811c18:	0001883a 	nop
  811c1c:	e037883a 	mov	sp,fp
  811c20:	dfc00117 	ldw	ra,4(sp)
  811c24:	df000017 	ldw	fp,0(sp)
  811c28:	dec00204 	addi	sp,sp,8
  811c2c:	f800283a 	ret

00811c30 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  811c30:	defff304 	addi	sp,sp,-52
  811c34:	dfc00c15 	stw	ra,48(sp)
  811c38:	df000b15 	stw	fp,44(sp)
  811c3c:	df000b04 	addi	fp,sp,44
  811c40:	e13ffc15 	stw	r4,-16(fp)
  811c44:	e17ffd15 	stw	r5,-12(fp)
  811c48:	e1bffe15 	stw	r6,-8(fp)
  811c4c:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  811c50:	e0bffe17 	ldw	r2,-8(fp)
  811c54:	e0fffd17 	ldw	r3,-12(fp)
  811c58:	1885883a 	add	r2,r3,r2
  811c5c:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  811c60:	e0bffc17 	ldw	r2,-16(fp)
  811c64:	00c00044 	movi	r3,1
  811c68:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  811c6c:	00009906 	br	811ed4 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  811c70:	e0bffd17 	ldw	r2,-12(fp)
  811c74:	10800003 	ldbu	r2,0(r2)
  811c78:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  811c7c:	e0bffc17 	ldw	r2,-16(fp)
  811c80:	10800903 	ldbu	r2,36(r2)
  811c84:	10803fcc 	andi	r2,r2,255
  811c88:	1080201c 	xori	r2,r2,128
  811c8c:	10bfe004 	addi	r2,r2,-128
  811c90:	10003716 	blt	r2,zero,811d70 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  811c94:	e0bffc17 	ldw	r2,-16(fp)
  811c98:	10800903 	ldbu	r2,36(r2)
  811c9c:	10803fcc 	andi	r2,r2,255
  811ca0:	1080201c 	xori	r2,r2,128
  811ca4:	10bfe004 	addi	r2,r2,-128
  811ca8:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  811cac:	e0bffa17 	ldw	r2,-24(fp)
  811cb0:	1000031e 	bne	r2,zero,811cc0 <altera_avalon_lcd_16207_write+0x90>
  811cb4:	e0bff907 	ldb	r2,-28(fp)
  811cb8:	108016d8 	cmpnei	r2,r2,91
  811cbc:	10000d1e 	bne	r2,zero,811cf4 <altera_avalon_lcd_16207_write+0xc4>
  811cc0:	e0bffa17 	ldw	r2,-24(fp)
  811cc4:	10001826 	beq	r2,zero,811d28 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  811cc8:	d0e00d17 	ldw	r3,-32716(gp)
  811ccc:	e0bff907 	ldb	r2,-28(fp)
  811cd0:	10800044 	addi	r2,r2,1
  811cd4:	1885883a 	add	r2,r3,r2
  811cd8:	10800003 	ldbu	r2,0(r2)
  811cdc:	10803fcc 	andi	r2,r2,255
  811ce0:	1080010c 	andi	r2,r2,4
  811ce4:	1000101e 	bne	r2,zero,811d28 <altera_avalon_lcd_16207_write+0xf8>
  811ce8:	e0bff907 	ldb	r2,-28(fp)
  811cec:	10800ee0 	cmpeqi	r2,r2,59
  811cf0:	10000d1e 	bne	r2,zero,811d28 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  811cf4:	e0fffc17 	ldw	r3,-16(fp)
  811cf8:	e0bffa17 	ldw	r2,-24(fp)
  811cfc:	1885883a 	add	r2,r3,r2
  811d00:	10800a04 	addi	r2,r2,40
  811d04:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  811d08:	e0bff907 	ldb	r2,-28(fp)
  811d0c:	100b883a 	mov	r5,r2
  811d10:	e13ffc17 	ldw	r4,-16(fp)
  811d14:	08119840 	call	811984 <lcd_handle_escape>

        sp->esccount = -1;
  811d18:	e0bffc17 	ldw	r2,-16(fp)
  811d1c:	00ffffc4 	movi	r3,-1
  811d20:	10c00905 	stb	r3,36(r2)
  811d24:	00006806 	br	811ec8 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  811d28:	e0bffc17 	ldw	r2,-16(fp)
  811d2c:	10800903 	ldbu	r2,36(r2)
  811d30:	10803fcc 	andi	r2,r2,255
  811d34:	108001e8 	cmpgeui	r2,r2,7
  811d38:	1000631e 	bne	r2,zero,811ec8 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  811d3c:	e0fffc17 	ldw	r3,-16(fp)
  811d40:	e0bffa17 	ldw	r2,-24(fp)
  811d44:	1885883a 	add	r2,r3,r2
  811d48:	10800a04 	addi	r2,r2,40
  811d4c:	e0fff903 	ldbu	r3,-28(fp)
  811d50:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  811d54:	e0bffc17 	ldw	r2,-16(fp)
  811d58:	10800903 	ldbu	r2,36(r2)
  811d5c:	10800044 	addi	r2,r2,1
  811d60:	1007883a 	mov	r3,r2
  811d64:	e0bffc17 	ldw	r2,-16(fp)
  811d68:	10c00905 	stb	r3,36(r2)
  811d6c:	00005606 	br	811ec8 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  811d70:	e0bff907 	ldb	r2,-28(fp)
  811d74:	108006d8 	cmpnei	r2,r2,27
  811d78:	1000031e 	bne	r2,zero,811d88 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  811d7c:	e0bffc17 	ldw	r2,-16(fp)
  811d80:	10000905 	stb	zero,36(r2)
  811d84:	00005006 	br	811ec8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  811d88:	e0bff907 	ldb	r2,-28(fp)
  811d8c:	10800358 	cmpnei	r2,r2,13
  811d90:	1000031e 	bne	r2,zero,811da0 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  811d94:	e0bffc17 	ldw	r2,-16(fp)
  811d98:	10000845 	stb	zero,33(r2)
  811d9c:	00004a06 	br	811ec8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  811da0:	e0bff907 	ldb	r2,-28(fp)
  811da4:	10800298 	cmpnei	r2,r2,10
  811da8:	1000101e 	bne	r2,zero,811dec <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  811dac:	e0bffc17 	ldw	r2,-16(fp)
  811db0:	10000845 	stb	zero,33(r2)
      sp->y++;
  811db4:	e0bffc17 	ldw	r2,-16(fp)
  811db8:	10800883 	ldbu	r2,34(r2)
  811dbc:	10800044 	addi	r2,r2,1
  811dc0:	1007883a 	mov	r3,r2
  811dc4:	e0bffc17 	ldw	r2,-16(fp)
  811dc8:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  811dcc:	e0bffc17 	ldw	r2,-16(fp)
  811dd0:	10800883 	ldbu	r2,34(r2)
  811dd4:	10803fcc 	andi	r2,r2,255
  811dd8:	108000f0 	cmpltui	r2,r2,3
  811ddc:	10003a1e 	bne	r2,zero,811ec8 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  811de0:	e13ffc17 	ldw	r4,-16(fp)
  811de4:	08118b80 	call	8118b8 <lcd_scroll_up>
  811de8:	00003706 	br	811ec8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  811dec:	e0bff907 	ldb	r2,-28(fp)
  811df0:	10800218 	cmpnei	r2,r2,8
  811df4:	10000b1e 	bne	r2,zero,811e24 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  811df8:	e0bffc17 	ldw	r2,-16(fp)
  811dfc:	10800843 	ldbu	r2,33(r2)
  811e00:	10803fcc 	andi	r2,r2,255
  811e04:	10003026 	beq	r2,zero,811ec8 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  811e08:	e0bffc17 	ldw	r2,-16(fp)
  811e0c:	10800843 	ldbu	r2,33(r2)
  811e10:	10bfffc4 	addi	r2,r2,-1
  811e14:	1007883a 	mov	r3,r2
  811e18:	e0bffc17 	ldw	r2,-16(fp)
  811e1c:	10c00845 	stb	r3,33(r2)
  811e20:	00002906 	br	811ec8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  811e24:	d0e00d17 	ldw	r3,-32716(gp)
  811e28:	e0bff907 	ldb	r2,-28(fp)
  811e2c:	10800044 	addi	r2,r2,1
  811e30:	1885883a 	add	r2,r3,r2
  811e34:	10800003 	ldbu	r2,0(r2)
  811e38:	10803fcc 	andi	r2,r2,255
  811e3c:	1080201c 	xori	r2,r2,128
  811e40:	10bfe004 	addi	r2,r2,-128
  811e44:	108025cc 	andi	r2,r2,151
  811e48:	10001f26 	beq	r2,zero,811ec8 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  811e4c:	e0bffc17 	ldw	r2,-16(fp)
  811e50:	10800883 	ldbu	r2,34(r2)
  811e54:	10803fcc 	andi	r2,r2,255
  811e58:	108000b0 	cmpltui	r2,r2,2
  811e5c:	1000021e 	bne	r2,zero,811e68 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  811e60:	e13ffc17 	ldw	r4,-16(fp)
  811e64:	08118b80 	call	8118b8 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  811e68:	e0bffc17 	ldw	r2,-16(fp)
  811e6c:	10800843 	ldbu	r2,33(r2)
  811e70:	10803fcc 	andi	r2,r2,255
  811e74:	10801428 	cmpgeui	r2,r2,80
  811e78:	10000d1e 	bne	r2,zero,811eb0 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  811e7c:	e0bffc17 	ldw	r2,-16(fp)
  811e80:	10800883 	ldbu	r2,34(r2)
  811e84:	10c03fcc 	andi	r3,r2,255
  811e88:	e0bffc17 	ldw	r2,-16(fp)
  811e8c:	10800843 	ldbu	r2,33(r2)
  811e90:	10803fcc 	andi	r2,r2,255
  811e94:	e13ffc17 	ldw	r4,-16(fp)
  811e98:	18c018e4 	muli	r3,r3,99
  811e9c:	20c7883a 	add	r3,r4,r3
  811ea0:	1885883a 	add	r2,r3,r2
  811ea4:	10801004 	addi	r2,r2,64
  811ea8:	e0fff903 	ldbu	r3,-28(fp)
  811eac:	10c00005 	stb	r3,0(r2)

      sp->x++;
  811eb0:	e0bffc17 	ldw	r2,-16(fp)
  811eb4:	10800843 	ldbu	r2,33(r2)
  811eb8:	10800044 	addi	r2,r2,1
  811ebc:	1007883a 	mov	r3,r2
  811ec0:	e0bffc17 	ldw	r2,-16(fp)
  811ec4:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  811ec8:	e0bffd17 	ldw	r2,-12(fp)
  811ecc:	10800044 	addi	r2,r2,1
  811ed0:	e0bffd15 	stw	r2,-12(fp)
  811ed4:	e0fffd17 	ldw	r3,-12(fp)
  811ed8:	e0bff817 	ldw	r2,-32(fp)
  811edc:	18bf6436 	bltu	r3,r2,811c70 <__alt_mem_onchip_mem+0xff791c70>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  811ee0:	00800404 	movi	r2,16
  811ee4:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811ee8:	e03ff515 	stw	zero,-44(fp)
  811eec:	00003706 	br	811fcc <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  811ef0:	00801404 	movi	r2,80
  811ef4:	e0bff715 	stw	r2,-36(fp)
  811ef8:	00001106 	br	811f40 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  811efc:	e0bff717 	ldw	r2,-36(fp)
  811f00:	10bfffc4 	addi	r2,r2,-1
  811f04:	e13ffc17 	ldw	r4,-16(fp)
  811f08:	e0fff517 	ldw	r3,-44(fp)
  811f0c:	18c018e4 	muli	r3,r3,99
  811f10:	20c7883a 	add	r3,r4,r3
  811f14:	1885883a 	add	r2,r3,r2
  811f18:	10801004 	addi	r2,r2,64
  811f1c:	10800003 	ldbu	r2,0(r2)
  811f20:	10803fcc 	andi	r2,r2,255
  811f24:	1080201c 	xori	r2,r2,128
  811f28:	10bfe004 	addi	r2,r2,-128
  811f2c:	10800820 	cmpeqi	r2,r2,32
  811f30:	10000626 	beq	r2,zero,811f4c <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  811f34:	e0bff717 	ldw	r2,-36(fp)
  811f38:	10bfffc4 	addi	r2,r2,-1
  811f3c:	e0bff715 	stw	r2,-36(fp)
  811f40:	e0bff717 	ldw	r2,-36(fp)
  811f44:	00bfed16 	blt	zero,r2,811efc <__alt_mem_onchip_mem+0xff791efc>
  811f48:	00000106 	br	811f50 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  811f4c:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  811f50:	e0bff717 	ldw	r2,-36(fp)
  811f54:	10800448 	cmpgei	r2,r2,17
  811f58:	1000031e 	bne	r2,zero,811f68 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  811f5c:	00800404 	movi	r2,16
  811f60:	e0bff715 	stw	r2,-36(fp)
  811f64:	00000306 	br	811f74 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  811f68:	e0bff717 	ldw	r2,-36(fp)
  811f6c:	10800044 	addi	r2,r2,1
  811f70:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  811f74:	e0bff717 	ldw	r2,-36(fp)
  811f78:	1009883a 	mov	r4,r2
  811f7c:	e0fffc17 	ldw	r3,-16(fp)
  811f80:	e0bff517 	ldw	r2,-44(fp)
  811f84:	108018e4 	muli	r2,r2,99
  811f88:	1885883a 	add	r2,r3,r2
  811f8c:	10802444 	addi	r2,r2,145
  811f90:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  811f94:	e0fff617 	ldw	r3,-40(fp)
  811f98:	e0bff717 	ldw	r2,-36(fp)
  811f9c:	1880020e 	bge	r3,r2,811fa8 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  811fa0:	e0bff717 	ldw	r2,-36(fp)
  811fa4:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  811fa8:	e0fffc17 	ldw	r3,-16(fp)
  811fac:	e0bff517 	ldw	r2,-44(fp)
  811fb0:	108018e4 	muli	r2,r2,99
  811fb4:	1885883a 	add	r2,r3,r2
  811fb8:	10802484 	addi	r2,r2,146
  811fbc:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811fc0:	e0bff517 	ldw	r2,-44(fp)
  811fc4:	10800044 	addi	r2,r2,1
  811fc8:	e0bff515 	stw	r2,-44(fp)
  811fcc:	e0bff517 	ldw	r2,-44(fp)
  811fd0:	10800090 	cmplti	r2,r2,2
  811fd4:	103fc61e 	bne	r2,zero,811ef0 <__alt_mem_onchip_mem+0xff791ef0>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  811fd8:	e0bff617 	ldw	r2,-40(fp)
  811fdc:	10800448 	cmpgei	r2,r2,17
  811fe0:	1000031e 	bne	r2,zero,811ff0 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  811fe4:	e0bffc17 	ldw	r2,-16(fp)
  811fe8:	10000985 	stb	zero,38(r2)
  811fec:	00002e06 	br	8120a8 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  811ff0:	e0bff617 	ldw	r2,-40(fp)
  811ff4:	1085883a 	add	r2,r2,r2
  811ff8:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  811ffc:	e0bff617 	ldw	r2,-40(fp)
  812000:	1007883a 	mov	r3,r2
  812004:	e0bffc17 	ldw	r2,-16(fp)
  812008:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81200c:	e03ff515 	stw	zero,-44(fp)
  812010:	00002206 	br	81209c <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  812014:	e0fffc17 	ldw	r3,-16(fp)
  812018:	e0bff517 	ldw	r2,-44(fp)
  81201c:	108018e4 	muli	r2,r2,99
  812020:	1885883a 	add	r2,r3,r2
  812024:	10802444 	addi	r2,r2,145
  812028:	10800003 	ldbu	r2,0(r2)
  81202c:	10803fcc 	andi	r2,r2,255
  812030:	1080201c 	xori	r2,r2,128
  812034:	10bfe004 	addi	r2,r2,-128
  812038:	10800450 	cmplti	r2,r2,17
  81203c:	1000141e 	bne	r2,zero,812090 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  812040:	e0fffc17 	ldw	r3,-16(fp)
  812044:	e0bff517 	ldw	r2,-44(fp)
  812048:	108018e4 	muli	r2,r2,99
  81204c:	1885883a 	add	r2,r3,r2
  812050:	10802444 	addi	r2,r2,145
  812054:	10800003 	ldbu	r2,0(r2)
  812058:	10803fcc 	andi	r2,r2,255
  81205c:	1080201c 	xori	r2,r2,128
  812060:	10bfe004 	addi	r2,r2,-128
  812064:	1004923a 	slli	r2,r2,8
  812068:	e17ff617 	ldw	r5,-40(fp)
  81206c:	1009883a 	mov	r4,r2
  812070:	080d0f80 	call	80d0f8 <__divsi3>
  812074:	1009883a 	mov	r4,r2
  812078:	e0fffc17 	ldw	r3,-16(fp)
  81207c:	e0bff517 	ldw	r2,-44(fp)
  812080:	108018e4 	muli	r2,r2,99
  812084:	1885883a 	add	r2,r3,r2
  812088:	10802484 	addi	r2,r2,146
  81208c:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812090:	e0bff517 	ldw	r2,-44(fp)
  812094:	10800044 	addi	r2,r2,1
  812098:	e0bff515 	stw	r2,-44(fp)
  81209c:	e0bff517 	ldw	r2,-44(fp)
  8120a0:	10800090 	cmplti	r2,r2,2
  8120a4:	103fdb1e 	bne	r2,zero,812014 <__alt_mem_onchip_mem+0xff792014>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  8120a8:	e0bffc17 	ldw	r2,-16(fp)
  8120ac:	10800943 	ldbu	r2,37(r2)
  8120b0:	10803fcc 	andi	r2,r2,255
  8120b4:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  8120b8:	e13ffc17 	ldw	r4,-16(fp)
  8120bc:	08116cc0 	call	8116cc <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  8120c0:	e0bffc17 	ldw	r2,-16(fp)
  8120c4:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  8120c8:	e0bffc17 	ldw	r2,-16(fp)
  8120cc:	10800943 	ldbu	r2,37(r2)
  8120d0:	10c03fcc 	andi	r3,r2,255
  8120d4:	e0bffb17 	ldw	r2,-20(fp)
  8120d8:	18800426 	beq	r3,r2,8120ec <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  8120dc:	e0bffc17 	ldw	r2,-16(fp)
  8120e0:	00c00044 	movi	r3,1
  8120e4:	10c009c5 	stb	r3,39(r2)
  }
  8120e8:	003fef06 	br	8120a8 <__alt_mem_onchip_mem+0xff7920a8>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  8120ec:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  8120f0:	e0bffe17 	ldw	r2,-8(fp)
}
  8120f4:	e037883a 	mov	sp,fp
  8120f8:	dfc00117 	ldw	ra,4(sp)
  8120fc:	df000017 	ldw	fp,0(sp)
  812100:	dec00204 	addi	sp,sp,8
  812104:	f800283a 	ret

00812108 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  812108:	defffc04 	addi	sp,sp,-16
  81210c:	dfc00315 	stw	ra,12(sp)
  812110:	df000215 	stw	fp,8(sp)
  812114:	df000204 	addi	fp,sp,8
  812118:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  81211c:	e0bfff17 	ldw	r2,-4(fp)
  812120:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  812124:	e0bffe17 	ldw	r2,-8(fp)
  812128:	10800943 	ldbu	r2,37(r2)
  81212c:	10803fcc 	andi	r2,r2,255
  812130:	10c00044 	addi	r3,r2,1
  812134:	e0bffe17 	ldw	r2,-8(fp)
  812138:	10800983 	ldbu	r2,38(r2)
  81213c:	10803fcc 	andi	r2,r2,255
  812140:	18800316 	blt	r3,r2,812150 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  812144:	e0bffe17 	ldw	r2,-8(fp)
  812148:	10000945 	stb	zero,37(r2)
  81214c:	00000606 	br	812168 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  812150:	e0bffe17 	ldw	r2,-8(fp)
  812154:	10800943 	ldbu	r2,37(r2)
  812158:	10800044 	addi	r2,r2,1
  81215c:	1007883a 	mov	r3,r2
  812160:	e0bffe17 	ldw	r2,-8(fp)
  812164:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  812168:	e0bffe17 	ldw	r2,-8(fp)
  81216c:	10800983 	ldbu	r2,38(r2)
  812170:	10803fcc 	andi	r2,r2,255
  812174:	10000826 	beq	r2,zero,812198 <alt_lcd_16207_timeout+0x90>
  812178:	e0bffe17 	ldw	r2,-8(fp)
  81217c:	108009c3 	ldbu	r2,39(r2)
  812180:	10803fcc 	andi	r2,r2,255
  812184:	1080201c 	xori	r2,r2,128
  812188:	10bfe004 	addi	r2,r2,-128
  81218c:	1000021e 	bne	r2,zero,812198 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  812190:	e13ffe17 	ldw	r4,-8(fp)
  812194:	08116cc0 	call	8116cc <lcd_repaint_screen>

  return sp->period;
  812198:	e0bffe17 	ldw	r2,-8(fp)
  81219c:	10800717 	ldw	r2,28(r2)
}
  8121a0:	e037883a 	mov	sp,fp
  8121a4:	dfc00117 	ldw	ra,4(sp)
  8121a8:	df000017 	ldw	fp,0(sp)
  8121ac:	dec00204 	addi	sp,sp,8
  8121b0:	f800283a 	ret

008121b4 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  8121b4:	defffc04 	addi	sp,sp,-16
  8121b8:	dfc00315 	stw	ra,12(sp)
  8121bc:	df000215 	stw	fp,8(sp)
  8121c0:	df000204 	addi	fp,sp,8
  8121c4:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  8121c8:	e0bfff17 	ldw	r2,-4(fp)
  8121cc:	10800017 	ldw	r2,0(r2)
  8121d0:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  8121d4:	e0bfff17 	ldw	r2,-4(fp)
  8121d8:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  8121dc:	010ea604 	movi	r4,15000
  8121e0:	081354c0 	call	81354c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8121e4:	e0bffe17 	ldw	r2,-8(fp)
  8121e8:	00c00c04 	movi	r3,48
  8121ec:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  8121f0:	01040104 	movi	r4,4100
  8121f4:	081354c0 	call	81354c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8121f8:	e0bffe17 	ldw	r2,-8(fp)
  8121fc:	00c00c04 	movi	r3,48
  812200:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  812204:	0100fa04 	movi	r4,1000
  812208:	081354c0 	call	81354c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  81220c:	e0bffe17 	ldw	r2,-8(fp)
  812210:	00c00c04 	movi	r3,48
  812214:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  812218:	01400e04 	movi	r5,56
  81221c:	e13fff17 	ldw	r4,-4(fp)
  812220:	081146c0 	call	81146c <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  812224:	01400204 	movi	r5,8
  812228:	e13fff17 	ldw	r4,-4(fp)
  81222c:	081146c0 	call	81146c <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  812230:	e13fff17 	ldw	r4,-4(fp)
  812234:	08115fc0 	call	8115fc <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  812238:	01400184 	movi	r5,6
  81223c:	e13fff17 	ldw	r4,-4(fp)
  812240:	081146c0 	call	81146c <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  812244:	01400304 	movi	r5,12
  812248:	e13fff17 	ldw	r4,-4(fp)
  81224c:	081146c0 	call	81146c <lcd_write_command>

  sp->esccount = -1;
  812250:	e0bfff17 	ldw	r2,-4(fp)
  812254:	00ffffc4 	movi	r3,-1
  812258:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  81225c:	e0bfff17 	ldw	r2,-4(fp)
  812260:	10800a04 	addi	r2,r2,40
  812264:	01800204 	movi	r6,8
  812268:	000b883a 	mov	r5,zero
  81226c:	1009883a 	mov	r4,r2
  812270:	08037240 	call	803724 <memset>

  sp->scrollpos = 0;
  812274:	e0bfff17 	ldw	r2,-4(fp)
  812278:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  81227c:	e0bfff17 	ldw	r2,-4(fp)
  812280:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  812284:	e0bfff17 	ldw	r2,-4(fp)
  812288:	100009c5 	stb	zero,39(r2)
  81228c:	d0a77617 	ldw	r2,-25128(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  812290:	01400284 	movi	r5,10
  812294:	1009883a 	mov	r4,r2
  812298:	080d1f00 	call	80d1f0 <__udivsi3>
  81229c:	1007883a 	mov	r3,r2
  8122a0:	e0bfff17 	ldw	r2,-4(fp)
  8122a4:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  8122a8:	e0bfff17 	ldw	r2,-4(fp)
  8122ac:	10c00104 	addi	r3,r2,4
  8122b0:	e0bfff17 	ldw	r2,-4(fp)
  8122b4:	10800717 	ldw	r2,28(r2)
  8122b8:	e1ffff17 	ldw	r7,-4(fp)
  8122bc:	01802074 	movhi	r6,129
  8122c0:	31884204 	addi	r6,r6,8456
  8122c4:	100b883a 	mov	r5,r2
  8122c8:	1809883a 	mov	r4,r3
  8122cc:	080f9140 	call	80f914 <alt_alarm_start>
}
  8122d0:	0001883a 	nop
  8122d4:	e037883a 	mov	sp,fp
  8122d8:	dfc00117 	ldw	ra,4(sp)
  8122dc:	df000017 	ldw	fp,0(sp)
  8122e0:	dec00204 	addi	sp,sp,8
  8122e4:	f800283a 	ret

008122e8 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8122e8:	defffa04 	addi	sp,sp,-24
  8122ec:	dfc00515 	stw	ra,20(sp)
  8122f0:	df000415 	stw	fp,16(sp)
  8122f4:	df000404 	addi	fp,sp,16
  8122f8:	e13ffd15 	stw	r4,-12(fp)
  8122fc:	e17ffe15 	stw	r5,-8(fp)
  812300:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  812304:	e0bffd17 	ldw	r2,-12(fp)
  812308:	10800017 	ldw	r2,0(r2)
  81230c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  812310:	e0bffc17 	ldw	r2,-16(fp)
  812314:	10c00a04 	addi	r3,r2,40
  812318:	e0bffd17 	ldw	r2,-12(fp)
  81231c:	10800217 	ldw	r2,8(r2)
  812320:	100f883a 	mov	r7,r2
  812324:	e1bfff17 	ldw	r6,-4(fp)
  812328:	e17ffe17 	ldw	r5,-8(fp)
  81232c:	1809883a 	mov	r4,r3
  812330:	0811c300 	call	811c30 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  812334:	e037883a 	mov	sp,fp
  812338:	dfc00117 	ldw	ra,4(sp)
  81233c:	df000017 	ldw	fp,0(sp)
  812340:	dec00204 	addi	sp,sp,8
  812344:	f800283a 	ret

00812348 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  812348:	defffa04 	addi	sp,sp,-24
  81234c:	dfc00515 	stw	ra,20(sp)
  812350:	df000415 	stw	fp,16(sp)
  812354:	df000404 	addi	fp,sp,16
  812358:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  81235c:	0007883a 	mov	r3,zero
  812360:	e0bfff17 	ldw	r2,-4(fp)
  812364:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  812368:	e0bfff17 	ldw	r2,-4(fp)
  81236c:	10800104 	addi	r2,r2,4
  812370:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812374:	0005303a 	rdctl	r2,status
  812378:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81237c:	e0fffd17 	ldw	r3,-12(fp)
  812380:	00bfff84 	movi	r2,-2
  812384:	1884703a 	and	r2,r3,r2
  812388:	1001703a 	wrctl	status,r2
  
  return context;
  81238c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  812390:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  812394:	08106c00 	call	8106c0 <alt_tick>
  812398:	e0bffc17 	ldw	r2,-16(fp)
  81239c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8123a0:	e0bffe17 	ldw	r2,-8(fp)
  8123a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8123a8:	0001883a 	nop
  8123ac:	e037883a 	mov	sp,fp
  8123b0:	dfc00117 	ldw	ra,4(sp)
  8123b4:	df000017 	ldw	fp,0(sp)
  8123b8:	dec00204 	addi	sp,sp,8
  8123bc:	f800283a 	ret

008123c0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8123c0:	defff804 	addi	sp,sp,-32
  8123c4:	dfc00715 	stw	ra,28(sp)
  8123c8:	df000615 	stw	fp,24(sp)
  8123cc:	df000604 	addi	fp,sp,24
  8123d0:	e13ffc15 	stw	r4,-16(fp)
  8123d4:	e17ffd15 	stw	r5,-12(fp)
  8123d8:	e1bffe15 	stw	r6,-8(fp)
  8123dc:	e1ffff15 	stw	r7,-4(fp)
  8123e0:	e0bfff17 	ldw	r2,-4(fp)
  8123e4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8123e8:	d0a77617 	ldw	r2,-25128(gp)
  8123ec:	1000021e 	bne	r2,zero,8123f8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  8123f0:	e0bffb17 	ldw	r2,-20(fp)
  8123f4:	d0a77615 	stw	r2,-25128(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8123f8:	e0bffc17 	ldw	r2,-16(fp)
  8123fc:	10800104 	addi	r2,r2,4
  812400:	00c001c4 	movi	r3,7
  812404:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  812408:	d8000015 	stw	zero,0(sp)
  81240c:	e1fffc17 	ldw	r7,-16(fp)
  812410:	01802074 	movhi	r6,129
  812414:	3188d204 	addi	r6,r6,9032
  812418:	e17ffe17 	ldw	r5,-8(fp)
  81241c:	e13ffd17 	ldw	r4,-12(fp)
  812420:	081316c0 	call	81316c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  812424:	0001883a 	nop
  812428:	e037883a 	mov	sp,fp
  81242c:	dfc00117 	ldw	ra,4(sp)
  812430:	df000017 	ldw	fp,0(sp)
  812434:	dec00204 	addi	sp,sp,8
  812438:	f800283a 	ret

0081243c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  81243c:	defffa04 	addi	sp,sp,-24
  812440:	dfc00515 	stw	ra,20(sp)
  812444:	df000415 	stw	fp,16(sp)
  812448:	df000404 	addi	fp,sp,16
  81244c:	e13ffd15 	stw	r4,-12(fp)
  812450:	e17ffe15 	stw	r5,-8(fp)
  812454:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  812458:	e0bffd17 	ldw	r2,-12(fp)
  81245c:	10800017 	ldw	r2,0(r2)
  812460:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  812464:	e0bffc17 	ldw	r2,-16(fp)
  812468:	10c00a04 	addi	r3,r2,40
  81246c:	e0bffd17 	ldw	r2,-12(fp)
  812470:	10800217 	ldw	r2,8(r2)
  812474:	100f883a 	mov	r7,r2
  812478:	e1bfff17 	ldw	r6,-4(fp)
  81247c:	e17ffe17 	ldw	r5,-8(fp)
  812480:	1809883a 	mov	r4,r3
  812484:	08129500 	call	812950 <altera_avalon_uart_read>
      fd->fd_flags);
}
  812488:	e037883a 	mov	sp,fp
  81248c:	dfc00117 	ldw	ra,4(sp)
  812490:	df000017 	ldw	fp,0(sp)
  812494:	dec00204 	addi	sp,sp,8
  812498:	f800283a 	ret

0081249c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81249c:	defffa04 	addi	sp,sp,-24
  8124a0:	dfc00515 	stw	ra,20(sp)
  8124a4:	df000415 	stw	fp,16(sp)
  8124a8:	df000404 	addi	fp,sp,16
  8124ac:	e13ffd15 	stw	r4,-12(fp)
  8124b0:	e17ffe15 	stw	r5,-8(fp)
  8124b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8124b8:	e0bffd17 	ldw	r2,-12(fp)
  8124bc:	10800017 	ldw	r2,0(r2)
  8124c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  8124c4:	e0bffc17 	ldw	r2,-16(fp)
  8124c8:	10c00a04 	addi	r3,r2,40
  8124cc:	e0bffd17 	ldw	r2,-12(fp)
  8124d0:	10800217 	ldw	r2,8(r2)
  8124d4:	100f883a 	mov	r7,r2
  8124d8:	e1bfff17 	ldw	r6,-4(fp)
  8124dc:	e17ffe17 	ldw	r5,-8(fp)
  8124e0:	1809883a 	mov	r4,r3
  8124e4:	0812b680 	call	812b68 <altera_avalon_uart_write>
      fd->fd_flags);
}
  8124e8:	e037883a 	mov	sp,fp
  8124ec:	dfc00117 	ldw	ra,4(sp)
  8124f0:	df000017 	ldw	fp,0(sp)
  8124f4:	dec00204 	addi	sp,sp,8
  8124f8:	f800283a 	ret

008124fc <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  8124fc:	defffc04 	addi	sp,sp,-16
  812500:	dfc00315 	stw	ra,12(sp)
  812504:	df000215 	stw	fp,8(sp)
  812508:	df000204 	addi	fp,sp,8
  81250c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  812510:	e0bfff17 	ldw	r2,-4(fp)
  812514:	10800017 	ldw	r2,0(r2)
  812518:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  81251c:	e0bffe17 	ldw	r2,-8(fp)
  812520:	10c00a04 	addi	r3,r2,40
  812524:	e0bfff17 	ldw	r2,-4(fp)
  812528:	10800217 	ldw	r2,8(r2)
  81252c:	100b883a 	mov	r5,r2
  812530:	1809883a 	mov	r4,r3
  812534:	08128c00 	call	8128c0 <altera_avalon_uart_close>
}
  812538:	e037883a 	mov	sp,fp
  81253c:	dfc00117 	ldw	ra,4(sp)
  812540:	df000017 	ldw	fp,0(sp)
  812544:	dec00204 	addi	sp,sp,8
  812548:	f800283a 	ret

0081254c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  81254c:	defff804 	addi	sp,sp,-32
  812550:	dfc00715 	stw	ra,28(sp)
  812554:	df000615 	stw	fp,24(sp)
  812558:	df000604 	addi	fp,sp,24
  81255c:	e13ffd15 	stw	r4,-12(fp)
  812560:	e17ffe15 	stw	r5,-8(fp)
  812564:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  812568:	e0bffd17 	ldw	r2,-12(fp)
  81256c:	10800017 	ldw	r2,0(r2)
  812570:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  812574:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  812578:	1000041e 	bne	r2,zero,81258c <altera_avalon_uart_init+0x40>
  81257c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  812580:	1000021e 	bne	r2,zero,81258c <altera_avalon_uart_init+0x40>
  812584:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  812588:	10000226 	beq	r2,zero,812594 <altera_avalon_uart_init+0x48>
  81258c:	00800044 	movi	r2,1
  812590:	00000106 	br	812598 <altera_avalon_uart_init+0x4c>
  812594:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  812598:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  81259c:	e0bffc17 	ldw	r2,-16(fp)
  8125a0:	10000f1e 	bne	r2,zero,8125e0 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  8125a4:	e0bffd17 	ldw	r2,-12(fp)
  8125a8:	00c32004 	movi	r3,3200
  8125ac:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  8125b0:	e0bffb17 	ldw	r2,-20(fp)
  8125b4:	10800304 	addi	r2,r2,12
  8125b8:	e0fffd17 	ldw	r3,-12(fp)
  8125bc:	18c00117 	ldw	r3,4(r3)
  8125c0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  8125c4:	d8000015 	stw	zero,0(sp)
  8125c8:	e1fffd17 	ldw	r7,-12(fp)
  8125cc:	01802074 	movhi	r6,129
  8125d0:	31897e04 	addi	r6,r6,9720
  8125d4:	e17fff17 	ldw	r5,-4(fp)
  8125d8:	e13ffe17 	ldw	r4,-8(fp)
  8125dc:	081316c0 	call	81316c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  8125e0:	0001883a 	nop
  8125e4:	e037883a 	mov	sp,fp
  8125e8:	dfc00117 	ldw	ra,4(sp)
  8125ec:	df000017 	ldw	fp,0(sp)
  8125f0:	dec00204 	addi	sp,sp,8
  8125f4:	f800283a 	ret

008125f8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  8125f8:	defffa04 	addi	sp,sp,-24
  8125fc:	dfc00515 	stw	ra,20(sp)
  812600:	df000415 	stw	fp,16(sp)
  812604:	df000404 	addi	fp,sp,16
  812608:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  81260c:	e0bfff17 	ldw	r2,-4(fp)
  812610:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  812614:	e0bffc17 	ldw	r2,-16(fp)
  812618:	10800017 	ldw	r2,0(r2)
  81261c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  812620:	e0bffd17 	ldw	r2,-12(fp)
  812624:	10800204 	addi	r2,r2,8
  812628:	10800037 	ldwio	r2,0(r2)
  81262c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  812630:	e0bffd17 	ldw	r2,-12(fp)
  812634:	10800204 	addi	r2,r2,8
  812638:	0007883a 	mov	r3,zero
  81263c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  812640:	e0bffd17 	ldw	r2,-12(fp)
  812644:	10800204 	addi	r2,r2,8
  812648:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  81264c:	e0bffe17 	ldw	r2,-8(fp)
  812650:	1080200c 	andi	r2,r2,128
  812654:	10000326 	beq	r2,zero,812664 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  812658:	e17ffe17 	ldw	r5,-8(fp)
  81265c:	e13ffc17 	ldw	r4,-16(fp)
  812660:	08126940 	call	812694 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  812664:	e0bffe17 	ldw	r2,-8(fp)
  812668:	1081100c 	andi	r2,r2,1088
  81266c:	10000326 	beq	r2,zero,81267c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  812670:	e17ffe17 	ldw	r5,-8(fp)
  812674:	e13ffc17 	ldw	r4,-16(fp)
  812678:	08127780 	call	812778 <altera_avalon_uart_txirq>
  }
  

}
  81267c:	0001883a 	nop
  812680:	e037883a 	mov	sp,fp
  812684:	dfc00117 	ldw	ra,4(sp)
  812688:	df000017 	ldw	fp,0(sp)
  81268c:	dec00204 	addi	sp,sp,8
  812690:	f800283a 	ret

00812694 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  812694:	defffc04 	addi	sp,sp,-16
  812698:	df000315 	stw	fp,12(sp)
  81269c:	df000304 	addi	fp,sp,12
  8126a0:	e13ffe15 	stw	r4,-8(fp)
  8126a4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  8126a8:	e0bfff17 	ldw	r2,-4(fp)
  8126ac:	108000cc 	andi	r2,r2,3
  8126b0:	10002c1e 	bne	r2,zero,812764 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  8126b4:	e0bffe17 	ldw	r2,-8(fp)
  8126b8:	10800317 	ldw	r2,12(r2)
  8126bc:	e0bffe17 	ldw	r2,-8(fp)
  8126c0:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8126c4:	e0bffe17 	ldw	r2,-8(fp)
  8126c8:	10800317 	ldw	r2,12(r2)
  8126cc:	10800044 	addi	r2,r2,1
  8126d0:	10800fcc 	andi	r2,r2,63
  8126d4:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  8126d8:	e0bffe17 	ldw	r2,-8(fp)
  8126dc:	10800317 	ldw	r2,12(r2)
  8126e0:	e0fffe17 	ldw	r3,-8(fp)
  8126e4:	18c00017 	ldw	r3,0(r3)
  8126e8:	18c00037 	ldwio	r3,0(r3)
  8126ec:	1809883a 	mov	r4,r3
  8126f0:	e0fffe17 	ldw	r3,-8(fp)
  8126f4:	1885883a 	add	r2,r3,r2
  8126f8:	10800704 	addi	r2,r2,28
  8126fc:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  812700:	e0bffe17 	ldw	r2,-8(fp)
  812704:	e0fffd17 	ldw	r3,-12(fp)
  812708:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  81270c:	e0bffe17 	ldw	r2,-8(fp)
  812710:	10800317 	ldw	r2,12(r2)
  812714:	10800044 	addi	r2,r2,1
  812718:	10800fcc 	andi	r2,r2,63
  81271c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  812720:	e0bffe17 	ldw	r2,-8(fp)
  812724:	10c00217 	ldw	r3,8(r2)
  812728:	e0bffd17 	ldw	r2,-12(fp)
  81272c:	18800e1e 	bne	r3,r2,812768 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  812730:	e0bffe17 	ldw	r2,-8(fp)
  812734:	10c00117 	ldw	r3,4(r2)
  812738:	00bfdfc4 	movi	r2,-129
  81273c:	1886703a 	and	r3,r3,r2
  812740:	e0bffe17 	ldw	r2,-8(fp)
  812744:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  812748:	e0bffe17 	ldw	r2,-8(fp)
  81274c:	10800017 	ldw	r2,0(r2)
  812750:	10800304 	addi	r2,r2,12
  812754:	e0fffe17 	ldw	r3,-8(fp)
  812758:	18c00117 	ldw	r3,4(r3)
  81275c:	10c00035 	stwio	r3,0(r2)
  812760:	00000106 	br	812768 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  812764:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  812768:	e037883a 	mov	sp,fp
  81276c:	df000017 	ldw	fp,0(sp)
  812770:	dec00104 	addi	sp,sp,4
  812774:	f800283a 	ret

00812778 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  812778:	defffb04 	addi	sp,sp,-20
  81277c:	df000415 	stw	fp,16(sp)
  812780:	df000404 	addi	fp,sp,16
  812784:	e13ffc15 	stw	r4,-16(fp)
  812788:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  81278c:	e0bffc17 	ldw	r2,-16(fp)
  812790:	10c00417 	ldw	r3,16(r2)
  812794:	e0bffc17 	ldw	r2,-16(fp)
  812798:	10800517 	ldw	r2,20(r2)
  81279c:	18803226 	beq	r3,r2,812868 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8127a0:	e0bffc17 	ldw	r2,-16(fp)
  8127a4:	10800617 	ldw	r2,24(r2)
  8127a8:	1080008c 	andi	r2,r2,2
  8127ac:	10000326 	beq	r2,zero,8127bc <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8127b0:	e0bffd17 	ldw	r2,-12(fp)
  8127b4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8127b8:	10001d26 	beq	r2,zero,812830 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  8127bc:	e0bffc17 	ldw	r2,-16(fp)
  8127c0:	10800417 	ldw	r2,16(r2)
  8127c4:	e0bffc17 	ldw	r2,-16(fp)
  8127c8:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  8127cc:	e0bffc17 	ldw	r2,-16(fp)
  8127d0:	10800017 	ldw	r2,0(r2)
  8127d4:	10800104 	addi	r2,r2,4
  8127d8:	e0fffc17 	ldw	r3,-16(fp)
  8127dc:	18c00417 	ldw	r3,16(r3)
  8127e0:	e13ffc17 	ldw	r4,-16(fp)
  8127e4:	20c7883a 	add	r3,r4,r3
  8127e8:	18c01704 	addi	r3,r3,92
  8127ec:	18c00003 	ldbu	r3,0(r3)
  8127f0:	18c03fcc 	andi	r3,r3,255
  8127f4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  8127f8:	e0bffc17 	ldw	r2,-16(fp)
  8127fc:	10800417 	ldw	r2,16(r2)
  812800:	10800044 	addi	r2,r2,1
  812804:	e0fffc17 	ldw	r3,-16(fp)
  812808:	18800415 	stw	r2,16(r3)
  81280c:	10c00fcc 	andi	r3,r2,63
  812810:	e0bffc17 	ldw	r2,-16(fp)
  812814:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  812818:	e0bffc17 	ldw	r2,-16(fp)
  81281c:	10800117 	ldw	r2,4(r2)
  812820:	10c01014 	ori	r3,r2,64
  812824:	e0bffc17 	ldw	r2,-16(fp)
  812828:	10c00115 	stw	r3,4(r2)
  81282c:	00000e06 	br	812868 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  812830:	e0bffc17 	ldw	r2,-16(fp)
  812834:	10800017 	ldw	r2,0(r2)
  812838:	10800204 	addi	r2,r2,8
  81283c:	10800037 	ldwio	r2,0(r2)
  812840:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  812844:	e0bffd17 	ldw	r2,-12(fp)
  812848:	1082000c 	andi	r2,r2,2048
  81284c:	1000061e 	bne	r2,zero,812868 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  812850:	e0bffc17 	ldw	r2,-16(fp)
  812854:	10c00117 	ldw	r3,4(r2)
  812858:	00bfefc4 	movi	r2,-65
  81285c:	1886703a 	and	r3,r3,r2
  812860:	e0bffc17 	ldw	r2,-16(fp)
  812864:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  812868:	e0bffc17 	ldw	r2,-16(fp)
  81286c:	10c00417 	ldw	r3,16(r2)
  812870:	e0bffc17 	ldw	r2,-16(fp)
  812874:	10800517 	ldw	r2,20(r2)
  812878:	1880061e 	bne	r3,r2,812894 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  81287c:	e0bffc17 	ldw	r2,-16(fp)
  812880:	10c00117 	ldw	r3,4(r2)
  812884:	00beefc4 	movi	r2,-1089
  812888:	1886703a 	and	r3,r3,r2
  81288c:	e0bffc17 	ldw	r2,-16(fp)
  812890:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812894:	e0bffc17 	ldw	r2,-16(fp)
  812898:	10800017 	ldw	r2,0(r2)
  81289c:	10800304 	addi	r2,r2,12
  8128a0:	e0fffc17 	ldw	r3,-16(fp)
  8128a4:	18c00117 	ldw	r3,4(r3)
  8128a8:	10c00035 	stwio	r3,0(r2)
}
  8128ac:	0001883a 	nop
  8128b0:	e037883a 	mov	sp,fp
  8128b4:	df000017 	ldw	fp,0(sp)
  8128b8:	dec00104 	addi	sp,sp,4
  8128bc:	f800283a 	ret

008128c0 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  8128c0:	defffd04 	addi	sp,sp,-12
  8128c4:	df000215 	stw	fp,8(sp)
  8128c8:	df000204 	addi	fp,sp,8
  8128cc:	e13ffe15 	stw	r4,-8(fp)
  8128d0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8128d4:	00000506 	br	8128ec <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  8128d8:	e0bfff17 	ldw	r2,-4(fp)
  8128dc:	1090000c 	andi	r2,r2,16384
  8128e0:	10000226 	beq	r2,zero,8128ec <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  8128e4:	00bffd44 	movi	r2,-11
  8128e8:	00000606 	br	812904 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8128ec:	e0bffe17 	ldw	r2,-8(fp)
  8128f0:	10c00417 	ldw	r3,16(r2)
  8128f4:	e0bffe17 	ldw	r2,-8(fp)
  8128f8:	10800517 	ldw	r2,20(r2)
  8128fc:	18bff61e 	bne	r3,r2,8128d8 <__alt_mem_onchip_mem+0xff7928d8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  812900:	0005883a 	mov	r2,zero
}
  812904:	e037883a 	mov	sp,fp
  812908:	df000017 	ldw	fp,0(sp)
  81290c:	dec00104 	addi	sp,sp,4
  812910:	f800283a 	ret

00812914 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812914:	defffe04 	addi	sp,sp,-8
  812918:	dfc00115 	stw	ra,4(sp)
  81291c:	df000015 	stw	fp,0(sp)
  812920:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812924:	d0a01517 	ldw	r2,-32684(gp)
  812928:	10000326 	beq	r2,zero,812938 <alt_get_errno+0x24>
  81292c:	d0a01517 	ldw	r2,-32684(gp)
  812930:	103ee83a 	callr	r2
  812934:	00000106 	br	81293c <alt_get_errno+0x28>
  812938:	d0a76b04 	addi	r2,gp,-25172
}
  81293c:	e037883a 	mov	sp,fp
  812940:	dfc00117 	ldw	ra,4(sp)
  812944:	df000017 	ldw	fp,0(sp)
  812948:	dec00204 	addi	sp,sp,8
  81294c:	f800283a 	ret

00812950 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  812950:	defff204 	addi	sp,sp,-56
  812954:	dfc00d15 	stw	ra,52(sp)
  812958:	df000c15 	stw	fp,48(sp)
  81295c:	df000c04 	addi	fp,sp,48
  812960:	e13ffc15 	stw	r4,-16(fp)
  812964:	e17ffd15 	stw	r5,-12(fp)
  812968:	e1bffe15 	stw	r6,-8(fp)
  81296c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  812970:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  812974:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  812978:	e0bfff17 	ldw	r2,-4(fp)
  81297c:	1090000c 	andi	r2,r2,16384
  812980:	1005003a 	cmpeq	r2,r2,zero
  812984:	10803fcc 	andi	r2,r2,255
  812988:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  81298c:	00001306 	br	8129dc <altera_avalon_uart_read+0x8c>
    {
      count++;
  812990:	e0bff517 	ldw	r2,-44(fp)
  812994:	10800044 	addi	r2,r2,1
  812998:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  81299c:	e0bffd17 	ldw	r2,-12(fp)
  8129a0:	10c00044 	addi	r3,r2,1
  8129a4:	e0fffd15 	stw	r3,-12(fp)
  8129a8:	e0fffc17 	ldw	r3,-16(fp)
  8129ac:	18c00217 	ldw	r3,8(r3)
  8129b0:	e13ffc17 	ldw	r4,-16(fp)
  8129b4:	20c7883a 	add	r3,r4,r3
  8129b8:	18c00704 	addi	r3,r3,28
  8129bc:	18c00003 	ldbu	r3,0(r3)
  8129c0:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  8129c4:	e0bffc17 	ldw	r2,-16(fp)
  8129c8:	10800217 	ldw	r2,8(r2)
  8129cc:	10800044 	addi	r2,r2,1
  8129d0:	10c00fcc 	andi	r3,r2,63
  8129d4:	e0bffc17 	ldw	r2,-16(fp)
  8129d8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8129dc:	e0fff517 	ldw	r3,-44(fp)
  8129e0:	e0bffe17 	ldw	r2,-8(fp)
  8129e4:	1880050e 	bge	r3,r2,8129fc <altera_avalon_uart_read+0xac>
  8129e8:	e0bffc17 	ldw	r2,-16(fp)
  8129ec:	10c00217 	ldw	r3,8(r2)
  8129f0:	e0bffc17 	ldw	r2,-16(fp)
  8129f4:	10800317 	ldw	r2,12(r2)
  8129f8:	18bfe51e 	bne	r3,r2,812990 <__alt_mem_onchip_mem+0xff792990>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  8129fc:	e0bff517 	ldw	r2,-44(fp)
  812a00:	1000251e 	bne	r2,zero,812a98 <altera_avalon_uart_read+0x148>
  812a04:	e0bffc17 	ldw	r2,-16(fp)
  812a08:	10c00217 	ldw	r3,8(r2)
  812a0c:	e0bffc17 	ldw	r2,-16(fp)
  812a10:	10800317 	ldw	r2,12(r2)
  812a14:	1880201e 	bne	r3,r2,812a98 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  812a18:	e0bff617 	ldw	r2,-40(fp)
  812a1c:	1000071e 	bne	r2,zero,812a3c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  812a20:	08129140 	call	812914 <alt_get_errno>
  812a24:	1007883a 	mov	r3,r2
  812a28:	008002c4 	movi	r2,11
  812a2c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  812a30:	00800044 	movi	r2,1
  812a34:	e0bff405 	stb	r2,-48(fp)
        break;
  812a38:	00001b06 	br	812aa8 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812a3c:	0005303a 	rdctl	r2,status
  812a40:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812a44:	e0fff917 	ldw	r3,-28(fp)
  812a48:	00bfff84 	movi	r2,-2
  812a4c:	1884703a 	and	r2,r3,r2
  812a50:	1001703a 	wrctl	status,r2
  
  return context;
  812a54:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  812a58:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  812a5c:	e0bffc17 	ldw	r2,-16(fp)
  812a60:	10800117 	ldw	r2,4(r2)
  812a64:	10c02014 	ori	r3,r2,128
  812a68:	e0bffc17 	ldw	r2,-16(fp)
  812a6c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812a70:	e0bffc17 	ldw	r2,-16(fp)
  812a74:	10800017 	ldw	r2,0(r2)
  812a78:	10800304 	addi	r2,r2,12
  812a7c:	e0fffc17 	ldw	r3,-16(fp)
  812a80:	18c00117 	ldw	r3,4(r3)
  812a84:	10c00035 	stwio	r3,0(r2)
  812a88:	e0bff817 	ldw	r2,-32(fp)
  812a8c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812a90:	e0bffa17 	ldw	r2,-24(fp)
  812a94:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  812a98:	e0bff517 	ldw	r2,-44(fp)
  812a9c:	1000021e 	bne	r2,zero,812aa8 <altera_avalon_uart_read+0x158>
  812aa0:	e0bffe17 	ldw	r2,-8(fp)
  812aa4:	103fcd1e 	bne	r2,zero,8129dc <__alt_mem_onchip_mem+0xff7929dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812aa8:	0005303a 	rdctl	r2,status
  812aac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812ab0:	e0fffb17 	ldw	r3,-20(fp)
  812ab4:	00bfff84 	movi	r2,-2
  812ab8:	1884703a 	and	r2,r3,r2
  812abc:	1001703a 	wrctl	status,r2
  
  return context;
  812ac0:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  812ac4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  812ac8:	e0bffc17 	ldw	r2,-16(fp)
  812acc:	10800117 	ldw	r2,4(r2)
  812ad0:	10c02014 	ori	r3,r2,128
  812ad4:	e0bffc17 	ldw	r2,-16(fp)
  812ad8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812adc:	e0bffc17 	ldw	r2,-16(fp)
  812ae0:	10800017 	ldw	r2,0(r2)
  812ae4:	10800304 	addi	r2,r2,12
  812ae8:	e0fffc17 	ldw	r3,-16(fp)
  812aec:	18c00117 	ldw	r3,4(r3)
  812af0:	10c00035 	stwio	r3,0(r2)
  812af4:	e0bff817 	ldw	r2,-32(fp)
  812af8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812afc:	e0bff717 	ldw	r2,-36(fp)
  812b00:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  812b04:	e0bff403 	ldbu	r2,-48(fp)
  812b08:	10000226 	beq	r2,zero,812b14 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  812b0c:	00bffd44 	movi	r2,-11
  812b10:	00000106 	br	812b18 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  812b14:	e0bff517 	ldw	r2,-44(fp)
  }
}
  812b18:	e037883a 	mov	sp,fp
  812b1c:	dfc00117 	ldw	ra,4(sp)
  812b20:	df000017 	ldw	fp,0(sp)
  812b24:	dec00204 	addi	sp,sp,8
  812b28:	f800283a 	ret

00812b2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812b2c:	defffe04 	addi	sp,sp,-8
  812b30:	dfc00115 	stw	ra,4(sp)
  812b34:	df000015 	stw	fp,0(sp)
  812b38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812b3c:	d0a01517 	ldw	r2,-32684(gp)
  812b40:	10000326 	beq	r2,zero,812b50 <alt_get_errno+0x24>
  812b44:	d0a01517 	ldw	r2,-32684(gp)
  812b48:	103ee83a 	callr	r2
  812b4c:	00000106 	br	812b54 <alt_get_errno+0x28>
  812b50:	d0a76b04 	addi	r2,gp,-25172
}
  812b54:	e037883a 	mov	sp,fp
  812b58:	dfc00117 	ldw	ra,4(sp)
  812b5c:	df000017 	ldw	fp,0(sp)
  812b60:	dec00204 	addi	sp,sp,8
  812b64:	f800283a 	ret

00812b68 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  812b68:	defff204 	addi	sp,sp,-56
  812b6c:	dfc00d15 	stw	ra,52(sp)
  812b70:	df000c15 	stw	fp,48(sp)
  812b74:	df000c04 	addi	fp,sp,48
  812b78:	e13ffc15 	stw	r4,-16(fp)
  812b7c:	e17ffd15 	stw	r5,-12(fp)
  812b80:	e1bffe15 	stw	r6,-8(fp)
  812b84:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  812b88:	e0bffe17 	ldw	r2,-8(fp)
  812b8c:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  812b90:	e0bfff17 	ldw	r2,-4(fp)
  812b94:	1090000c 	andi	r2,r2,16384
  812b98:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  812b9c:	00003c06 	br	812c90 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  812ba0:	e0bffc17 	ldw	r2,-16(fp)
  812ba4:	10800517 	ldw	r2,20(r2)
  812ba8:	10800044 	addi	r2,r2,1
  812bac:	10800fcc 	andi	r2,r2,63
  812bb0:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  812bb4:	e0bffc17 	ldw	r2,-16(fp)
  812bb8:	10c00417 	ldw	r3,16(r2)
  812bbc:	e0bff717 	ldw	r2,-36(fp)
  812bc0:	1880221e 	bne	r3,r2,812c4c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  812bc4:	e0bff517 	ldw	r2,-44(fp)
  812bc8:	10000526 	beq	r2,zero,812be0 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  812bcc:	0812b2c0 	call	812b2c <alt_get_errno>
  812bd0:	1007883a 	mov	r3,r2
  812bd4:	008002c4 	movi	r2,11
  812bd8:	18800015 	stw	r2,0(r3)
        break;
  812bdc:	00002e06 	br	812c98 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812be0:	0005303a 	rdctl	r2,status
  812be4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812be8:	e0fff917 	ldw	r3,-28(fp)
  812bec:	00bfff84 	movi	r2,-2
  812bf0:	1884703a 	and	r2,r3,r2
  812bf4:	1001703a 	wrctl	status,r2
  
  return context;
  812bf8:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  812bfc:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  812c00:	e0bffc17 	ldw	r2,-16(fp)
  812c04:	10800117 	ldw	r2,4(r2)
  812c08:	10c11014 	ori	r3,r2,1088
  812c0c:	e0bffc17 	ldw	r2,-16(fp)
  812c10:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812c14:	e0bffc17 	ldw	r2,-16(fp)
  812c18:	10800017 	ldw	r2,0(r2)
  812c1c:	10800304 	addi	r2,r2,12
  812c20:	e0fffc17 	ldw	r3,-16(fp)
  812c24:	18c00117 	ldw	r3,4(r3)
  812c28:	10c00035 	stwio	r3,0(r2)
  812c2c:	e0bff817 	ldw	r2,-32(fp)
  812c30:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812c34:	e0bff617 	ldw	r2,-40(fp)
  812c38:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  812c3c:	e0bffc17 	ldw	r2,-16(fp)
  812c40:	10c00417 	ldw	r3,16(r2)
  812c44:	e0bff717 	ldw	r2,-36(fp)
  812c48:	18bffc26 	beq	r3,r2,812c3c <__alt_mem_onchip_mem+0xff792c3c>
      }
    }

    count--;
  812c4c:	e0bff417 	ldw	r2,-48(fp)
  812c50:	10bfffc4 	addi	r2,r2,-1
  812c54:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  812c58:	e0bffc17 	ldw	r2,-16(fp)
  812c5c:	10c00517 	ldw	r3,20(r2)
  812c60:	e0bffd17 	ldw	r2,-12(fp)
  812c64:	11000044 	addi	r4,r2,1
  812c68:	e13ffd15 	stw	r4,-12(fp)
  812c6c:	10800003 	ldbu	r2,0(r2)
  812c70:	1009883a 	mov	r4,r2
  812c74:	e0bffc17 	ldw	r2,-16(fp)
  812c78:	10c5883a 	add	r2,r2,r3
  812c7c:	10801704 	addi	r2,r2,92
  812c80:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  812c84:	e0bffc17 	ldw	r2,-16(fp)
  812c88:	e0fff717 	ldw	r3,-36(fp)
  812c8c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  812c90:	e0bff417 	ldw	r2,-48(fp)
  812c94:	103fc21e 	bne	r2,zero,812ba0 <__alt_mem_onchip_mem+0xff792ba0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812c98:	0005303a 	rdctl	r2,status
  812c9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812ca0:	e0fffb17 	ldw	r3,-20(fp)
  812ca4:	00bfff84 	movi	r2,-2
  812ca8:	1884703a 	and	r2,r3,r2
  812cac:	1001703a 	wrctl	status,r2
  
  return context;
  812cb0:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  812cb4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  812cb8:	e0bffc17 	ldw	r2,-16(fp)
  812cbc:	10800117 	ldw	r2,4(r2)
  812cc0:	10c11014 	ori	r3,r2,1088
  812cc4:	e0bffc17 	ldw	r2,-16(fp)
  812cc8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812ccc:	e0bffc17 	ldw	r2,-16(fp)
  812cd0:	10800017 	ldw	r2,0(r2)
  812cd4:	10800304 	addi	r2,r2,12
  812cd8:	e0fffc17 	ldw	r3,-16(fp)
  812cdc:	18c00117 	ldw	r3,4(r3)
  812ce0:	10c00035 	stwio	r3,0(r2)
  812ce4:	e0bff817 	ldw	r2,-32(fp)
  812ce8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812cec:	e0bffa17 	ldw	r2,-24(fp)
  812cf0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  812cf4:	e0fffe17 	ldw	r3,-8(fp)
  812cf8:	e0bff417 	ldw	r2,-48(fp)
  812cfc:	1885c83a 	sub	r2,r3,r2
}
  812d00:	e037883a 	mov	sp,fp
  812d04:	dfc00117 	ldw	ra,4(sp)
  812d08:	df000017 	ldw	fp,0(sp)
  812d0c:	dec00204 	addi	sp,sp,8
  812d10:	f800283a 	ret

00812d14 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  812d14:	defffe04 	addi	sp,sp,-8
  812d18:	df000115 	stw	fp,4(sp)
  812d1c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  812d20:	e03fff15 	stw	zero,-4(fp)
  812d24:	00000506 	br	812d3c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  812d28:	e0bfff17 	ldw	r2,-4(fp)
  812d2c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  812d30:	e0bfff17 	ldw	r2,-4(fp)
  812d34:	10800804 	addi	r2,r2,32
  812d38:	e0bfff15 	stw	r2,-4(fp)
  812d3c:	e0bfff17 	ldw	r2,-4(fp)
  812d40:	10820030 	cmpltui	r2,r2,2048
  812d44:	103ff81e 	bne	r2,zero,812d28 <__alt_mem_onchip_mem+0xff792d28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  812d48:	0001883a 	nop
  812d4c:	e037883a 	mov	sp,fp
  812d50:	df000017 	ldw	fp,0(sp)
  812d54:	dec00104 	addi	sp,sp,4
  812d58:	f800283a 	ret

00812d5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812d5c:	defffe04 	addi	sp,sp,-8
  812d60:	dfc00115 	stw	ra,4(sp)
  812d64:	df000015 	stw	fp,0(sp)
  812d68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812d6c:	d0a01517 	ldw	r2,-32684(gp)
  812d70:	10000326 	beq	r2,zero,812d80 <alt_get_errno+0x24>
  812d74:	d0a01517 	ldw	r2,-32684(gp)
  812d78:	103ee83a 	callr	r2
  812d7c:	00000106 	br	812d84 <alt_get_errno+0x28>
  812d80:	d0a76b04 	addi	r2,gp,-25172
}
  812d84:	e037883a 	mov	sp,fp
  812d88:	dfc00117 	ldw	ra,4(sp)
  812d8c:	df000017 	ldw	fp,0(sp)
  812d90:	dec00204 	addi	sp,sp,8
  812d94:	f800283a 	ret

00812d98 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  812d98:	defffa04 	addi	sp,sp,-24
  812d9c:	dfc00515 	stw	ra,20(sp)
  812da0:	df000415 	stw	fp,16(sp)
  812da4:	df000404 	addi	fp,sp,16
  812da8:	e13ffe15 	stw	r4,-8(fp)
  812dac:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  812db0:	e0bffe17 	ldw	r2,-8(fp)
  812db4:	10000326 	beq	r2,zero,812dc4 <alt_dev_llist_insert+0x2c>
  812db8:	e0bffe17 	ldw	r2,-8(fp)
  812dbc:	10800217 	ldw	r2,8(r2)
  812dc0:	1000061e 	bne	r2,zero,812ddc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  812dc4:	0812d5c0 	call	812d5c <alt_get_errno>
  812dc8:	1007883a 	mov	r3,r2
  812dcc:	00800584 	movi	r2,22
  812dd0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  812dd4:	00bffa84 	movi	r2,-22
  812dd8:	00001306 	br	812e28 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  812ddc:	e0bffe17 	ldw	r2,-8(fp)
  812de0:	e0ffff17 	ldw	r3,-4(fp)
  812de4:	e0fffc15 	stw	r3,-16(fp)
  812de8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  812dec:	e0bffd17 	ldw	r2,-12(fp)
  812df0:	e0fffc17 	ldw	r3,-16(fp)
  812df4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  812df8:	e0bffc17 	ldw	r2,-16(fp)
  812dfc:	10c00017 	ldw	r3,0(r2)
  812e00:	e0bffd17 	ldw	r2,-12(fp)
  812e04:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  812e08:	e0bffc17 	ldw	r2,-16(fp)
  812e0c:	10800017 	ldw	r2,0(r2)
  812e10:	e0fffd17 	ldw	r3,-12(fp)
  812e14:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  812e18:	e0bffc17 	ldw	r2,-16(fp)
  812e1c:	e0fffd17 	ldw	r3,-12(fp)
  812e20:	10c00015 	stw	r3,0(r2)

  return 0;  
  812e24:	0005883a 	mov	r2,zero
}
  812e28:	e037883a 	mov	sp,fp
  812e2c:	dfc00117 	ldw	ra,4(sp)
  812e30:	df000017 	ldw	fp,0(sp)
  812e34:	dec00204 	addi	sp,sp,8
  812e38:	f800283a 	ret

00812e3c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  812e3c:	defffd04 	addi	sp,sp,-12
  812e40:	dfc00215 	stw	ra,8(sp)
  812e44:	df000115 	stw	fp,4(sp)
  812e48:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812e4c:	00802074 	movhi	r2,129
  812e50:	108eed04 	addi	r2,r2,15284
  812e54:	e0bfff15 	stw	r2,-4(fp)
  812e58:	00000606 	br	812e74 <_do_ctors+0x38>
        (*ctor) (); 
  812e5c:	e0bfff17 	ldw	r2,-4(fp)
  812e60:	10800017 	ldw	r2,0(r2)
  812e64:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812e68:	e0bfff17 	ldw	r2,-4(fp)
  812e6c:	10bfff04 	addi	r2,r2,-4
  812e70:	e0bfff15 	stw	r2,-4(fp)
  812e74:	e0ffff17 	ldw	r3,-4(fp)
  812e78:	00802074 	movhi	r2,129
  812e7c:	108eee04 	addi	r2,r2,15288
  812e80:	18bff62e 	bgeu	r3,r2,812e5c <__alt_mem_onchip_mem+0xff792e5c>
        (*ctor) (); 
}
  812e84:	0001883a 	nop
  812e88:	e037883a 	mov	sp,fp
  812e8c:	dfc00117 	ldw	ra,4(sp)
  812e90:	df000017 	ldw	fp,0(sp)
  812e94:	dec00204 	addi	sp,sp,8
  812e98:	f800283a 	ret

00812e9c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  812e9c:	defffd04 	addi	sp,sp,-12
  812ea0:	dfc00215 	stw	ra,8(sp)
  812ea4:	df000115 	stw	fp,4(sp)
  812ea8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  812eac:	00802074 	movhi	r2,129
  812eb0:	108eed04 	addi	r2,r2,15284
  812eb4:	e0bfff15 	stw	r2,-4(fp)
  812eb8:	00000606 	br	812ed4 <_do_dtors+0x38>
        (*dtor) (); 
  812ebc:	e0bfff17 	ldw	r2,-4(fp)
  812ec0:	10800017 	ldw	r2,0(r2)
  812ec4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  812ec8:	e0bfff17 	ldw	r2,-4(fp)
  812ecc:	10bfff04 	addi	r2,r2,-4
  812ed0:	e0bfff15 	stw	r2,-4(fp)
  812ed4:	e0ffff17 	ldw	r3,-4(fp)
  812ed8:	00802074 	movhi	r2,129
  812edc:	108eee04 	addi	r2,r2,15288
  812ee0:	18bff62e 	bgeu	r3,r2,812ebc <__alt_mem_onchip_mem+0xff792ebc>
        (*dtor) (); 
}
  812ee4:	0001883a 	nop
  812ee8:	e037883a 	mov	sp,fp
  812eec:	dfc00117 	ldw	ra,4(sp)
  812ef0:	df000017 	ldw	fp,0(sp)
  812ef4:	dec00204 	addi	sp,sp,8
  812ef8:	f800283a 	ret

00812efc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  812efc:	defffa04 	addi	sp,sp,-24
  812f00:	dfc00515 	stw	ra,20(sp)
  812f04:	df000415 	stw	fp,16(sp)
  812f08:	df000404 	addi	fp,sp,16
  812f0c:	e13ffe15 	stw	r4,-8(fp)
  812f10:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  812f14:	e0bfff17 	ldw	r2,-4(fp)
  812f18:	10800017 	ldw	r2,0(r2)
  812f1c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  812f20:	e13ffe17 	ldw	r4,-8(fp)
  812f24:	0803e140 	call	803e14 <strlen>
  812f28:	10800044 	addi	r2,r2,1
  812f2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812f30:	00000d06 	br	812f68 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  812f34:	e0bffc17 	ldw	r2,-16(fp)
  812f38:	10800217 	ldw	r2,8(r2)
  812f3c:	e0fffd17 	ldw	r3,-12(fp)
  812f40:	180d883a 	mov	r6,r3
  812f44:	e17ffe17 	ldw	r5,-8(fp)
  812f48:	1009883a 	mov	r4,r2
  812f4c:	08138700 	call	813870 <memcmp>
  812f50:	1000021e 	bne	r2,zero,812f5c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  812f54:	e0bffc17 	ldw	r2,-16(fp)
  812f58:	00000706 	br	812f78 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  812f5c:	e0bffc17 	ldw	r2,-16(fp)
  812f60:	10800017 	ldw	r2,0(r2)
  812f64:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812f68:	e0fffc17 	ldw	r3,-16(fp)
  812f6c:	e0bfff17 	ldw	r2,-4(fp)
  812f70:	18bff01e 	bne	r3,r2,812f34 <__alt_mem_onchip_mem+0xff792f34>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  812f74:	0005883a 	mov	r2,zero
}
  812f78:	e037883a 	mov	sp,fp
  812f7c:	dfc00117 	ldw	ra,4(sp)
  812f80:	df000017 	ldw	fp,0(sp)
  812f84:	dec00204 	addi	sp,sp,8
  812f88:	f800283a 	ret

00812f8c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  812f8c:	defffb04 	addi	sp,sp,-20
  812f90:	dfc00415 	stw	ra,16(sp)
  812f94:	df000315 	stw	fp,12(sp)
  812f98:	df000304 	addi	fp,sp,12
  812f9c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  812fa0:	d0a01017 	ldw	r2,-32704(gp)
  812fa4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  812fa8:	00003106 	br	813070 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  812fac:	e0bffd17 	ldw	r2,-12(fp)
  812fb0:	10800217 	ldw	r2,8(r2)
  812fb4:	1009883a 	mov	r4,r2
  812fb8:	0803e140 	call	803e14 <strlen>
  812fbc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  812fc0:	e0bffd17 	ldw	r2,-12(fp)
  812fc4:	10c00217 	ldw	r3,8(r2)
  812fc8:	e0bffe17 	ldw	r2,-8(fp)
  812fcc:	10bfffc4 	addi	r2,r2,-1
  812fd0:	1885883a 	add	r2,r3,r2
  812fd4:	10800003 	ldbu	r2,0(r2)
  812fd8:	10803fcc 	andi	r2,r2,255
  812fdc:	1080201c 	xori	r2,r2,128
  812fe0:	10bfe004 	addi	r2,r2,-128
  812fe4:	10800bd8 	cmpnei	r2,r2,47
  812fe8:	1000031e 	bne	r2,zero,812ff8 <alt_find_file+0x6c>
    {
      len -= 1;
  812fec:	e0bffe17 	ldw	r2,-8(fp)
  812ff0:	10bfffc4 	addi	r2,r2,-1
  812ff4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  812ff8:	e0bffe17 	ldw	r2,-8(fp)
  812ffc:	e0ffff17 	ldw	r3,-4(fp)
  813000:	1885883a 	add	r2,r3,r2
  813004:	10800003 	ldbu	r2,0(r2)
  813008:	10803fcc 	andi	r2,r2,255
  81300c:	1080201c 	xori	r2,r2,128
  813010:	10bfe004 	addi	r2,r2,-128
  813014:	10800be0 	cmpeqi	r2,r2,47
  813018:	1000081e 	bne	r2,zero,81303c <alt_find_file+0xb0>
  81301c:	e0bffe17 	ldw	r2,-8(fp)
  813020:	e0ffff17 	ldw	r3,-4(fp)
  813024:	1885883a 	add	r2,r3,r2
  813028:	10800003 	ldbu	r2,0(r2)
  81302c:	10803fcc 	andi	r2,r2,255
  813030:	1080201c 	xori	r2,r2,128
  813034:	10bfe004 	addi	r2,r2,-128
  813038:	10000a1e 	bne	r2,zero,813064 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  81303c:	e0bffd17 	ldw	r2,-12(fp)
  813040:	10800217 	ldw	r2,8(r2)
  813044:	e0fffe17 	ldw	r3,-8(fp)
  813048:	180d883a 	mov	r6,r3
  81304c:	e17fff17 	ldw	r5,-4(fp)
  813050:	1009883a 	mov	r4,r2
  813054:	08138700 	call	813870 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813058:	1000021e 	bne	r2,zero,813064 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  81305c:	e0bffd17 	ldw	r2,-12(fp)
  813060:	00000706 	br	813080 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  813064:	e0bffd17 	ldw	r2,-12(fp)
  813068:	10800017 	ldw	r2,0(r2)
  81306c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813070:	e0fffd17 	ldw	r3,-12(fp)
  813074:	d0a01004 	addi	r2,gp,-32704
  813078:	18bfcc1e 	bne	r3,r2,812fac <__alt_mem_onchip_mem+0xff792fac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  81307c:	0005883a 	mov	r2,zero
}
  813080:	e037883a 	mov	sp,fp
  813084:	dfc00117 	ldw	ra,4(sp)
  813088:	df000017 	ldw	fp,0(sp)
  81308c:	dec00204 	addi	sp,sp,8
  813090:	f800283a 	ret

00813094 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  813094:	defffc04 	addi	sp,sp,-16
  813098:	df000315 	stw	fp,12(sp)
  81309c:	df000304 	addi	fp,sp,12
  8130a0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8130a4:	00bffa04 	movi	r2,-24
  8130a8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8130ac:	e03ffd15 	stw	zero,-12(fp)
  8130b0:	00001906 	br	813118 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  8130b4:	00802074 	movhi	r2,129
  8130b8:	1092e604 	addi	r2,r2,19352
  8130bc:	e0fffd17 	ldw	r3,-12(fp)
  8130c0:	18c00324 	muli	r3,r3,12
  8130c4:	10c5883a 	add	r2,r2,r3
  8130c8:	10800017 	ldw	r2,0(r2)
  8130cc:	10000f1e 	bne	r2,zero,81310c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  8130d0:	00802074 	movhi	r2,129
  8130d4:	1092e604 	addi	r2,r2,19352
  8130d8:	e0fffd17 	ldw	r3,-12(fp)
  8130dc:	18c00324 	muli	r3,r3,12
  8130e0:	10c5883a 	add	r2,r2,r3
  8130e4:	e0ffff17 	ldw	r3,-4(fp)
  8130e8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  8130ec:	d0e01417 	ldw	r3,-32688(gp)
  8130f0:	e0bffd17 	ldw	r2,-12(fp)
  8130f4:	1880020e 	bge	r3,r2,813100 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  8130f8:	e0bffd17 	ldw	r2,-12(fp)
  8130fc:	d0a01415 	stw	r2,-32688(gp)
      }
      rc = i;
  813100:	e0bffd17 	ldw	r2,-12(fp)
  813104:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  813108:	00000606 	br	813124 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81310c:	e0bffd17 	ldw	r2,-12(fp)
  813110:	10800044 	addi	r2,r2,1
  813114:	e0bffd15 	stw	r2,-12(fp)
  813118:	e0bffd17 	ldw	r2,-12(fp)
  81311c:	10800810 	cmplti	r2,r2,32
  813120:	103fe41e 	bne	r2,zero,8130b4 <__alt_mem_onchip_mem+0xff7930b4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  813124:	e0bffe17 	ldw	r2,-8(fp)
}
  813128:	e037883a 	mov	sp,fp
  81312c:	df000017 	ldw	fp,0(sp)
  813130:	dec00104 	addi	sp,sp,4
  813134:	f800283a 	ret

00813138 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  813138:	defffe04 	addi	sp,sp,-8
  81313c:	dfc00115 	stw	ra,4(sp)
  813140:	df000015 	stw	fp,0(sp)
  813144:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  813148:	01440004 	movi	r5,4096
  81314c:	0009883a 	mov	r4,zero
  813150:	08136f80 	call	8136f8 <alt_icache_flush>
#endif
}
  813154:	0001883a 	nop
  813158:	e037883a 	mov	sp,fp
  81315c:	dfc00117 	ldw	ra,4(sp)
  813160:	df000017 	ldw	fp,0(sp)
  813164:	dec00204 	addi	sp,sp,8
  813168:	f800283a 	ret

0081316c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  81316c:	defff904 	addi	sp,sp,-28
  813170:	dfc00615 	stw	ra,24(sp)
  813174:	df000515 	stw	fp,20(sp)
  813178:	df000504 	addi	fp,sp,20
  81317c:	e13ffc15 	stw	r4,-16(fp)
  813180:	e17ffd15 	stw	r5,-12(fp)
  813184:	e1bffe15 	stw	r6,-8(fp)
  813188:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  81318c:	e0800217 	ldw	r2,8(fp)
  813190:	d8800015 	stw	r2,0(sp)
  813194:	e1ffff17 	ldw	r7,-4(fp)
  813198:	e1bffe17 	ldw	r6,-8(fp)
  81319c:	e17ffd17 	ldw	r5,-12(fp)
  8131a0:	e13ffc17 	ldw	r4,-16(fp)
  8131a4:	081331c0 	call	81331c <alt_iic_isr_register>
}  
  8131a8:	e037883a 	mov	sp,fp
  8131ac:	dfc00117 	ldw	ra,4(sp)
  8131b0:	df000017 	ldw	fp,0(sp)
  8131b4:	dec00204 	addi	sp,sp,8
  8131b8:	f800283a 	ret

008131bc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8131bc:	defff904 	addi	sp,sp,-28
  8131c0:	df000615 	stw	fp,24(sp)
  8131c4:	df000604 	addi	fp,sp,24
  8131c8:	e13ffe15 	stw	r4,-8(fp)
  8131cc:	e17fff15 	stw	r5,-4(fp)
  8131d0:	e0bfff17 	ldw	r2,-4(fp)
  8131d4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8131d8:	0005303a 	rdctl	r2,status
  8131dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8131e0:	e0fffb17 	ldw	r3,-20(fp)
  8131e4:	00bfff84 	movi	r2,-2
  8131e8:	1884703a 	and	r2,r3,r2
  8131ec:	1001703a 	wrctl	status,r2
  
  return context;
  8131f0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8131f4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  8131f8:	00c00044 	movi	r3,1
  8131fc:	e0bffa17 	ldw	r2,-24(fp)
  813200:	1884983a 	sll	r2,r3,r2
  813204:	1007883a 	mov	r3,r2
  813208:	d0a77217 	ldw	r2,-25144(gp)
  81320c:	1884b03a 	or	r2,r3,r2
  813210:	d0a77215 	stw	r2,-25144(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  813214:	d0a77217 	ldw	r2,-25144(gp)
  813218:	100170fa 	wrctl	ienable,r2
  81321c:	e0bffc17 	ldw	r2,-16(fp)
  813220:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813224:	e0bffd17 	ldw	r2,-12(fp)
  813228:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81322c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  813230:	0001883a 	nop
}
  813234:	e037883a 	mov	sp,fp
  813238:	df000017 	ldw	fp,0(sp)
  81323c:	dec00104 	addi	sp,sp,4
  813240:	f800283a 	ret

00813244 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  813244:	defff904 	addi	sp,sp,-28
  813248:	df000615 	stw	fp,24(sp)
  81324c:	df000604 	addi	fp,sp,24
  813250:	e13ffe15 	stw	r4,-8(fp)
  813254:	e17fff15 	stw	r5,-4(fp)
  813258:	e0bfff17 	ldw	r2,-4(fp)
  81325c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813260:	0005303a 	rdctl	r2,status
  813264:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813268:	e0fffb17 	ldw	r3,-20(fp)
  81326c:	00bfff84 	movi	r2,-2
  813270:	1884703a 	and	r2,r3,r2
  813274:	1001703a 	wrctl	status,r2
  
  return context;
  813278:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81327c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  813280:	00c00044 	movi	r3,1
  813284:	e0bffa17 	ldw	r2,-24(fp)
  813288:	1884983a 	sll	r2,r3,r2
  81328c:	0084303a 	nor	r2,zero,r2
  813290:	1007883a 	mov	r3,r2
  813294:	d0a77217 	ldw	r2,-25144(gp)
  813298:	1884703a 	and	r2,r3,r2
  81329c:	d0a77215 	stw	r2,-25144(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8132a0:	d0a77217 	ldw	r2,-25144(gp)
  8132a4:	100170fa 	wrctl	ienable,r2
  8132a8:	e0bffc17 	ldw	r2,-16(fp)
  8132ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8132b0:	e0bffd17 	ldw	r2,-12(fp)
  8132b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8132b8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  8132bc:	0001883a 	nop
}
  8132c0:	e037883a 	mov	sp,fp
  8132c4:	df000017 	ldw	fp,0(sp)
  8132c8:	dec00104 	addi	sp,sp,4
  8132cc:	f800283a 	ret

008132d0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8132d0:	defffc04 	addi	sp,sp,-16
  8132d4:	df000315 	stw	fp,12(sp)
  8132d8:	df000304 	addi	fp,sp,12
  8132dc:	e13ffe15 	stw	r4,-8(fp)
  8132e0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8132e4:	000530fa 	rdctl	r2,ienable
  8132e8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8132ec:	00c00044 	movi	r3,1
  8132f0:	e0bfff17 	ldw	r2,-4(fp)
  8132f4:	1884983a 	sll	r2,r3,r2
  8132f8:	1007883a 	mov	r3,r2
  8132fc:	e0bffd17 	ldw	r2,-12(fp)
  813300:	1884703a 	and	r2,r3,r2
  813304:	1004c03a 	cmpne	r2,r2,zero
  813308:	10803fcc 	andi	r2,r2,255
}
  81330c:	e037883a 	mov	sp,fp
  813310:	df000017 	ldw	fp,0(sp)
  813314:	dec00104 	addi	sp,sp,4
  813318:	f800283a 	ret

0081331c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  81331c:	defff504 	addi	sp,sp,-44
  813320:	dfc00a15 	stw	ra,40(sp)
  813324:	df000915 	stw	fp,36(sp)
  813328:	df000904 	addi	fp,sp,36
  81332c:	e13ffc15 	stw	r4,-16(fp)
  813330:	e17ffd15 	stw	r5,-12(fp)
  813334:	e1bffe15 	stw	r6,-8(fp)
  813338:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  81333c:	00bffa84 	movi	r2,-22
  813340:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  813344:	e0bffd17 	ldw	r2,-12(fp)
  813348:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  81334c:	e0bff817 	ldw	r2,-32(fp)
  813350:	10800808 	cmpgei	r2,r2,32
  813354:	1000271e 	bne	r2,zero,8133f4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813358:	0005303a 	rdctl	r2,status
  81335c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813360:	e0fffb17 	ldw	r3,-20(fp)
  813364:	00bfff84 	movi	r2,-2
  813368:	1884703a 	and	r2,r3,r2
  81336c:	1001703a 	wrctl	status,r2
  
  return context;
  813370:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  813374:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  813378:	00802074 	movhi	r2,129
  81337c:	109f7904 	addi	r2,r2,32228
  813380:	e0fff817 	ldw	r3,-32(fp)
  813384:	180690fa 	slli	r3,r3,3
  813388:	10c5883a 	add	r2,r2,r3
  81338c:	e0fffe17 	ldw	r3,-8(fp)
  813390:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  813394:	00802074 	movhi	r2,129
  813398:	109f7904 	addi	r2,r2,32228
  81339c:	e0fff817 	ldw	r3,-32(fp)
  8133a0:	180690fa 	slli	r3,r3,3
  8133a4:	10c5883a 	add	r2,r2,r3
  8133a8:	10800104 	addi	r2,r2,4
  8133ac:	e0ffff17 	ldw	r3,-4(fp)
  8133b0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8133b4:	e0bffe17 	ldw	r2,-8(fp)
  8133b8:	10000526 	beq	r2,zero,8133d0 <alt_iic_isr_register+0xb4>
  8133bc:	e0bff817 	ldw	r2,-32(fp)
  8133c0:	100b883a 	mov	r5,r2
  8133c4:	e13ffc17 	ldw	r4,-16(fp)
  8133c8:	08131bc0 	call	8131bc <alt_ic_irq_enable>
  8133cc:	00000406 	br	8133e0 <alt_iic_isr_register+0xc4>
  8133d0:	e0bff817 	ldw	r2,-32(fp)
  8133d4:	100b883a 	mov	r5,r2
  8133d8:	e13ffc17 	ldw	r4,-16(fp)
  8133dc:	08132440 	call	813244 <alt_ic_irq_disable>
  8133e0:	e0bff715 	stw	r2,-36(fp)
  8133e4:	e0bffa17 	ldw	r2,-24(fp)
  8133e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8133ec:	e0bff917 	ldw	r2,-28(fp)
  8133f0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8133f4:	e0bff717 	ldw	r2,-36(fp)
}
  8133f8:	e037883a 	mov	sp,fp
  8133fc:	dfc00117 	ldw	ra,4(sp)
  813400:	df000017 	ldw	fp,0(sp)
  813404:	dec00204 	addi	sp,sp,8
  813408:	f800283a 	ret

0081340c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  81340c:	defff904 	addi	sp,sp,-28
  813410:	dfc00615 	stw	ra,24(sp)
  813414:	df000515 	stw	fp,20(sp)
  813418:	df000504 	addi	fp,sp,20
  81341c:	e13ffc15 	stw	r4,-16(fp)
  813420:	e17ffd15 	stw	r5,-12(fp)
  813424:	e1bffe15 	stw	r6,-8(fp)
  813428:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  81342c:	e1bfff17 	ldw	r6,-4(fp)
  813430:	e17ffe17 	ldw	r5,-8(fp)
  813434:	e13ffd17 	ldw	r4,-12(fp)
  813438:	08102840 	call	810284 <open>
  81343c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  813440:	e0bffb17 	ldw	r2,-20(fp)
  813444:	10001c16 	blt	r2,zero,8134b8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  813448:	00802074 	movhi	r2,129
  81344c:	1092e604 	addi	r2,r2,19352
  813450:	e0fffb17 	ldw	r3,-20(fp)
  813454:	18c00324 	muli	r3,r3,12
  813458:	10c5883a 	add	r2,r2,r3
  81345c:	10c00017 	ldw	r3,0(r2)
  813460:	e0bffc17 	ldw	r2,-16(fp)
  813464:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  813468:	00802074 	movhi	r2,129
  81346c:	1092e604 	addi	r2,r2,19352
  813470:	e0fffb17 	ldw	r3,-20(fp)
  813474:	18c00324 	muli	r3,r3,12
  813478:	10c5883a 	add	r2,r2,r3
  81347c:	10800104 	addi	r2,r2,4
  813480:	10c00017 	ldw	r3,0(r2)
  813484:	e0bffc17 	ldw	r2,-16(fp)
  813488:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81348c:	00802074 	movhi	r2,129
  813490:	1092e604 	addi	r2,r2,19352
  813494:	e0fffb17 	ldw	r3,-20(fp)
  813498:	18c00324 	muli	r3,r3,12
  81349c:	10c5883a 	add	r2,r2,r3
  8134a0:	10800204 	addi	r2,r2,8
  8134a4:	10c00017 	ldw	r3,0(r2)
  8134a8:	e0bffc17 	ldw	r2,-16(fp)
  8134ac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8134b0:	e13ffb17 	ldw	r4,-20(fp)
  8134b4:	08105100 	call	810510 <alt_release_fd>
  }
} 
  8134b8:	0001883a 	nop
  8134bc:	e037883a 	mov	sp,fp
  8134c0:	dfc00117 	ldw	ra,4(sp)
  8134c4:	df000017 	ldw	fp,0(sp)
  8134c8:	dec00204 	addi	sp,sp,8
  8134cc:	f800283a 	ret

008134d0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8134d0:	defffb04 	addi	sp,sp,-20
  8134d4:	dfc00415 	stw	ra,16(sp)
  8134d8:	df000315 	stw	fp,12(sp)
  8134dc:	df000304 	addi	fp,sp,12
  8134e0:	e13ffd15 	stw	r4,-12(fp)
  8134e4:	e17ffe15 	stw	r5,-8(fp)
  8134e8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8134ec:	01c07fc4 	movi	r7,511
  8134f0:	01800044 	movi	r6,1
  8134f4:	e17ffd17 	ldw	r5,-12(fp)
  8134f8:	01002074 	movhi	r4,129
  8134fc:	2112e904 	addi	r4,r4,19364
  813500:	081340c0 	call	81340c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  813504:	01c07fc4 	movi	r7,511
  813508:	000d883a 	mov	r6,zero
  81350c:	e17ffe17 	ldw	r5,-8(fp)
  813510:	01002074 	movhi	r4,129
  813514:	2112e604 	addi	r4,r4,19352
  813518:	081340c0 	call	81340c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81351c:	01c07fc4 	movi	r7,511
  813520:	01800044 	movi	r6,1
  813524:	e17fff17 	ldw	r5,-4(fp)
  813528:	01002074 	movhi	r4,129
  81352c:	2112ec04 	addi	r4,r4,19376
  813530:	081340c0 	call	81340c <alt_open_fd>
}  
  813534:	0001883a 	nop
  813538:	e037883a 	mov	sp,fp
  81353c:	dfc00117 	ldw	ra,4(sp)
  813540:	df000017 	ldw	fp,0(sp)
  813544:	dec00204 	addi	sp,sp,8
  813548:	f800283a 	ret

0081354c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  81354c:	defffd04 	addi	sp,sp,-12
  813550:	dfc00215 	stw	ra,8(sp)
  813554:	df000115 	stw	fp,4(sp)
  813558:	df000104 	addi	fp,sp,4
  81355c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  813560:	e13fff17 	ldw	r4,-4(fp)
  813564:	08135a00 	call	8135a0 <alt_busy_sleep>
}
  813568:	e037883a 	mov	sp,fp
  81356c:	dfc00117 	ldw	ra,4(sp)
  813570:	df000017 	ldw	fp,0(sp)
  813574:	dec00204 	addi	sp,sp,8
  813578:	f800283a 	ret

0081357c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  81357c:	deffff04 	addi	sp,sp,-4
  813580:	df000015 	stw	fp,0(sp)
  813584:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  813588:	000170fa 	wrctl	ienable,zero
}
  81358c:	0001883a 	nop
  813590:	e037883a 	mov	sp,fp
  813594:	df000017 	ldw	fp,0(sp)
  813598:	dec00104 	addi	sp,sp,4
  81359c:	f800283a 	ret

008135a0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  8135a0:	defffa04 	addi	sp,sp,-24
  8135a4:	dfc00515 	stw	ra,20(sp)
  8135a8:	df000415 	stw	fp,16(sp)
  8135ac:	df000404 	addi	fp,sp,16
  8135b0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  8135b4:	008000c4 	movi	r2,3
  8135b8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  8135bc:	e0fffd17 	ldw	r3,-12(fp)
  8135c0:	008003f4 	movhi	r2,15
  8135c4:	10909004 	addi	r2,r2,16960
  8135c8:	1885383a 	mul	r2,r3,r2
  8135cc:	100b883a 	mov	r5,r2
  8135d0:	0100bef4 	movhi	r4,763
  8135d4:	213c2004 	addi	r4,r4,-3968
  8135d8:	080d1f00 	call	80d1f0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  8135dc:	100b883a 	mov	r5,r2
  8135e0:	01200034 	movhi	r4,32768
  8135e4:	213fffc4 	addi	r4,r4,-1
  8135e8:	080d1f00 	call	80d1f0 <__udivsi3>
  8135ec:	100b883a 	mov	r5,r2
  8135f0:	e13fff17 	ldw	r4,-4(fp)
  8135f4:	080d1f00 	call	80d1f0 <__udivsi3>
  8135f8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  8135fc:	e0bffe17 	ldw	r2,-8(fp)
  813600:	10002a26 	beq	r2,zero,8136ac <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  813604:	e03ffc15 	stw	zero,-16(fp)
  813608:	00001706 	br	813668 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  81360c:	00a00034 	movhi	r2,32768
  813610:	10bfffc4 	addi	r2,r2,-1
  813614:	10bfffc4 	addi	r2,r2,-1
  813618:	103ffe1e 	bne	r2,zero,813614 <__alt_mem_onchip_mem+0xff793614>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  81361c:	e0fffd17 	ldw	r3,-12(fp)
  813620:	008003f4 	movhi	r2,15
  813624:	10909004 	addi	r2,r2,16960
  813628:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  81362c:	100b883a 	mov	r5,r2
  813630:	0100bef4 	movhi	r4,763
  813634:	213c2004 	addi	r4,r4,-3968
  813638:	080d1f00 	call	80d1f0 <__udivsi3>
  81363c:	100b883a 	mov	r5,r2
  813640:	01200034 	movhi	r4,32768
  813644:	213fffc4 	addi	r4,r4,-1
  813648:	080d1f00 	call	80d1f0 <__udivsi3>
  81364c:	1007883a 	mov	r3,r2
  813650:	e0bfff17 	ldw	r2,-4(fp)
  813654:	10c5c83a 	sub	r2,r2,r3
  813658:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  81365c:	e0bffc17 	ldw	r2,-16(fp)
  813660:	10800044 	addi	r2,r2,1
  813664:	e0bffc15 	stw	r2,-16(fp)
  813668:	e0fffc17 	ldw	r3,-16(fp)
  81366c:	e0bffe17 	ldw	r2,-8(fp)
  813670:	18bfe616 	blt	r3,r2,81360c <__alt_mem_onchip_mem+0xff79360c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  813674:	e0fffd17 	ldw	r3,-12(fp)
  813678:	008003f4 	movhi	r2,15
  81367c:	10909004 	addi	r2,r2,16960
  813680:	1885383a 	mul	r2,r3,r2
  813684:	100b883a 	mov	r5,r2
  813688:	0100bef4 	movhi	r4,763
  81368c:	213c2004 	addi	r4,r4,-3968
  813690:	080d1f00 	call	80d1f0 <__udivsi3>
  813694:	1007883a 	mov	r3,r2
  813698:	e0bfff17 	ldw	r2,-4(fp)
  81369c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8136a0:	10bfffc4 	addi	r2,r2,-1
  8136a4:	103ffe1e 	bne	r2,zero,8136a0 <__alt_mem_onchip_mem+0xff7936a0>
  8136a8:	00000d06 	br	8136e0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8136ac:	e0fffd17 	ldw	r3,-12(fp)
  8136b0:	008003f4 	movhi	r2,15
  8136b4:	10909004 	addi	r2,r2,16960
  8136b8:	1885383a 	mul	r2,r3,r2
  8136bc:	100b883a 	mov	r5,r2
  8136c0:	0100bef4 	movhi	r4,763
  8136c4:	213c2004 	addi	r4,r4,-3968
  8136c8:	080d1f00 	call	80d1f0 <__udivsi3>
  8136cc:	1007883a 	mov	r3,r2
  8136d0:	e0bfff17 	ldw	r2,-4(fp)
  8136d4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8136d8:	10bfffc4 	addi	r2,r2,-1
  8136dc:	00bffe16 	blt	zero,r2,8136d8 <__alt_mem_onchip_mem+0xff7936d8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  8136e0:	0005883a 	mov	r2,zero
}
  8136e4:	e037883a 	mov	sp,fp
  8136e8:	dfc00117 	ldw	ra,4(sp)
  8136ec:	df000017 	ldw	fp,0(sp)
  8136f0:	dec00204 	addi	sp,sp,8
  8136f4:	f800283a 	ret

008136f8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8136f8:	defffb04 	addi	sp,sp,-20
  8136fc:	df000415 	stw	fp,16(sp)
  813700:	df000404 	addi	fp,sp,16
  813704:	e13ffe15 	stw	r4,-8(fp)
  813708:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  81370c:	e0bfff17 	ldw	r2,-4(fp)
  813710:	10840070 	cmpltui	r2,r2,4097
  813714:	1000021e 	bne	r2,zero,813720 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  813718:	00840004 	movi	r2,4096
  81371c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  813720:	e0fffe17 	ldw	r3,-8(fp)
  813724:	e0bfff17 	ldw	r2,-4(fp)
  813728:	1885883a 	add	r2,r3,r2
  81372c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  813730:	e0bffe17 	ldw	r2,-8(fp)
  813734:	e0bffc15 	stw	r2,-16(fp)
  813738:	00000506 	br	813750 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  81373c:	e0bffc17 	ldw	r2,-16(fp)
  813740:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  813744:	e0bffc17 	ldw	r2,-16(fp)
  813748:	10800804 	addi	r2,r2,32
  81374c:	e0bffc15 	stw	r2,-16(fp)
  813750:	e0fffc17 	ldw	r3,-16(fp)
  813754:	e0bffd17 	ldw	r2,-12(fp)
  813758:	18bff836 	bltu	r3,r2,81373c <__alt_mem_onchip_mem+0xff79373c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  81375c:	e0bffe17 	ldw	r2,-8(fp)
  813760:	108007cc 	andi	r2,r2,31
  813764:	10000226 	beq	r2,zero,813770 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  813768:	e0bffc17 	ldw	r2,-16(fp)
  81376c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  813770:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  813774:	0001883a 	nop
  813778:	e037883a 	mov	sp,fp
  81377c:	df000017 	ldw	fp,0(sp)
  813780:	dec00104 	addi	sp,sp,4
  813784:	f800283a 	ret

00813788 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  813788:	defffe04 	addi	sp,sp,-8
  81378c:	df000115 	stw	fp,4(sp)
  813790:	df000104 	addi	fp,sp,4
  813794:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  813798:	e0bfff17 	ldw	r2,-4(fp)
  81379c:	10bffe84 	addi	r2,r2,-6
  8137a0:	10c00428 	cmpgeui	r3,r2,16
  8137a4:	18001a1e 	bne	r3,zero,813810 <alt_exception_cause_generated_bad_addr+0x88>
  8137a8:	100690ba 	slli	r3,r2,2
  8137ac:	00802074 	movhi	r2,129
  8137b0:	108df004 	addi	r2,r2,14272
  8137b4:	1885883a 	add	r2,r3,r2
  8137b8:	10800017 	ldw	r2,0(r2)
  8137bc:	1000683a 	jmp	r2
  8137c0:	00813800 	call	81380 <__alt_mem_sdram-0x77ec80>
  8137c4:	00813800 	call	81380 <__alt_mem_sdram-0x77ec80>
  8137c8:	00813810 	cmplti	r2,zero,1248
  8137cc:	00813810 	cmplti	r2,zero,1248
  8137d0:	00813810 	cmplti	r2,zero,1248
  8137d4:	00813800 	call	81380 <__alt_mem_sdram-0x77ec80>
  8137d8:	00813808 	cmpgei	r2,zero,1248
  8137dc:	00813810 	cmplti	r2,zero,1248
  8137e0:	00813800 	call	81380 <__alt_mem_sdram-0x77ec80>
  8137e4:	00813800 	call	81380 <__alt_mem_sdram-0x77ec80>
  8137e8:	00813810 	cmplti	r2,zero,1248
  8137ec:	00813800 	call	81380 <__alt_mem_sdram-0x77ec80>
  8137f0:	00813808 	cmpgei	r2,zero,1248
  8137f4:	00813810 	cmplti	r2,zero,1248
  8137f8:	00813810 	cmplti	r2,zero,1248
  8137fc:	00813800 	call	81380 <__alt_mem_sdram-0x77ec80>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  813800:	00800044 	movi	r2,1
  813804:	00000306 	br	813814 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  813808:	0005883a 	mov	r2,zero
  81380c:	00000106 	br	813814 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  813810:	0005883a 	mov	r2,zero
  }
}
  813814:	e037883a 	mov	sp,fp
  813818:	df000017 	ldw	fp,0(sp)
  81381c:	dec00104 	addi	sp,sp,4
  813820:	f800283a 	ret

00813824 <atexit>:
  813824:	200b883a 	mov	r5,r4
  813828:	000f883a 	mov	r7,zero
  81382c:	000d883a 	mov	r6,zero
  813830:	0009883a 	mov	r4,zero
  813834:	08138ec1 	jmpi	8138ec <__register_exitproc>

00813838 <exit>:
  813838:	defffe04 	addi	sp,sp,-8
  81383c:	000b883a 	mov	r5,zero
  813840:	dc000015 	stw	r16,0(sp)
  813844:	dfc00115 	stw	ra,4(sp)
  813848:	2021883a 	mov	r16,r4
  81384c:	0813a040 	call	813a04 <__call_exitprocs>
  813850:	00802074 	movhi	r2,129
  813854:	1097e004 	addi	r2,r2,24448
  813858:	11000017 	ldw	r4,0(r2)
  81385c:	20800f17 	ldw	r2,60(r4)
  813860:	10000126 	beq	r2,zero,813868 <exit+0x30>
  813864:	103ee83a 	callr	r2
  813868:	8009883a 	mov	r4,r16
  81386c:	0813b840 	call	813b84 <_exit>

00813870 <memcmp>:
  813870:	01c000c4 	movi	r7,3
  813874:	3980192e 	bgeu	r7,r6,8138dc <memcmp+0x6c>
  813878:	2144b03a 	or	r2,r4,r5
  81387c:	11c4703a 	and	r2,r2,r7
  813880:	10000f26 	beq	r2,zero,8138c0 <memcmp+0x50>
  813884:	20800003 	ldbu	r2,0(r4)
  813888:	28c00003 	ldbu	r3,0(r5)
  81388c:	10c0151e 	bne	r2,r3,8138e4 <memcmp+0x74>
  813890:	31bfff84 	addi	r6,r6,-2
  813894:	01ffffc4 	movi	r7,-1
  813898:	00000406 	br	8138ac <memcmp+0x3c>
  81389c:	20800003 	ldbu	r2,0(r4)
  8138a0:	28c00003 	ldbu	r3,0(r5)
  8138a4:	31bfffc4 	addi	r6,r6,-1
  8138a8:	10c00e1e 	bne	r2,r3,8138e4 <memcmp+0x74>
  8138ac:	21000044 	addi	r4,r4,1
  8138b0:	29400044 	addi	r5,r5,1
  8138b4:	31fff91e 	bne	r6,r7,81389c <__alt_mem_onchip_mem+0xff79389c>
  8138b8:	0005883a 	mov	r2,zero
  8138bc:	f800283a 	ret
  8138c0:	20c00017 	ldw	r3,0(r4)
  8138c4:	28800017 	ldw	r2,0(r5)
  8138c8:	18bfee1e 	bne	r3,r2,813884 <__alt_mem_onchip_mem+0xff793884>
  8138cc:	31bfff04 	addi	r6,r6,-4
  8138d0:	21000104 	addi	r4,r4,4
  8138d4:	29400104 	addi	r5,r5,4
  8138d8:	39bff936 	bltu	r7,r6,8138c0 <__alt_mem_onchip_mem+0xff7938c0>
  8138dc:	303fe91e 	bne	r6,zero,813884 <__alt_mem_onchip_mem+0xff793884>
  8138e0:	003ff506 	br	8138b8 <__alt_mem_onchip_mem+0xff7938b8>
  8138e4:	10c5c83a 	sub	r2,r2,r3
  8138e8:	f800283a 	ret

008138ec <__register_exitproc>:
  8138ec:	defffa04 	addi	sp,sp,-24
  8138f0:	dc000315 	stw	r16,12(sp)
  8138f4:	04002074 	movhi	r16,129
  8138f8:	8417e004 	addi	r16,r16,24448
  8138fc:	80c00017 	ldw	r3,0(r16)
  813900:	dc400415 	stw	r17,16(sp)
  813904:	dfc00515 	stw	ra,20(sp)
  813908:	18805217 	ldw	r2,328(r3)
  81390c:	2023883a 	mov	r17,r4
  813910:	10003726 	beq	r2,zero,8139f0 <__register_exitproc+0x104>
  813914:	10c00117 	ldw	r3,4(r2)
  813918:	010007c4 	movi	r4,31
  81391c:	20c00e16 	blt	r4,r3,813958 <__register_exitproc+0x6c>
  813920:	1a000044 	addi	r8,r3,1
  813924:	8800221e 	bne	r17,zero,8139b0 <__register_exitproc+0xc4>
  813928:	18c00084 	addi	r3,r3,2
  81392c:	18c7883a 	add	r3,r3,r3
  813930:	18c7883a 	add	r3,r3,r3
  813934:	12000115 	stw	r8,4(r2)
  813938:	10c7883a 	add	r3,r2,r3
  81393c:	19400015 	stw	r5,0(r3)
  813940:	0005883a 	mov	r2,zero
  813944:	dfc00517 	ldw	ra,20(sp)
  813948:	dc400417 	ldw	r17,16(sp)
  81394c:	dc000317 	ldw	r16,12(sp)
  813950:	dec00604 	addi	sp,sp,24
  813954:	f800283a 	ret
  813958:	00802034 	movhi	r2,128
  81395c:	108bbc04 	addi	r2,r2,12016
  813960:	10002626 	beq	r2,zero,8139fc <__register_exitproc+0x110>
  813964:	01006404 	movi	r4,400
  813968:	d9400015 	stw	r5,0(sp)
  81396c:	d9800115 	stw	r6,4(sp)
  813970:	d9c00215 	stw	r7,8(sp)
  813974:	0802ef00 	call	802ef0 <malloc>
  813978:	d9400017 	ldw	r5,0(sp)
  81397c:	d9800117 	ldw	r6,4(sp)
  813980:	d9c00217 	ldw	r7,8(sp)
  813984:	10001d26 	beq	r2,zero,8139fc <__register_exitproc+0x110>
  813988:	81000017 	ldw	r4,0(r16)
  81398c:	10000115 	stw	zero,4(r2)
  813990:	02000044 	movi	r8,1
  813994:	22405217 	ldw	r9,328(r4)
  813998:	0007883a 	mov	r3,zero
  81399c:	12400015 	stw	r9,0(r2)
  8139a0:	20805215 	stw	r2,328(r4)
  8139a4:	10006215 	stw	zero,392(r2)
  8139a8:	10006315 	stw	zero,396(r2)
  8139ac:	883fde26 	beq	r17,zero,813928 <__alt_mem_onchip_mem+0xff793928>
  8139b0:	18c9883a 	add	r4,r3,r3
  8139b4:	2109883a 	add	r4,r4,r4
  8139b8:	1109883a 	add	r4,r2,r4
  8139bc:	21802215 	stw	r6,136(r4)
  8139c0:	01800044 	movi	r6,1
  8139c4:	12406217 	ldw	r9,392(r2)
  8139c8:	30cc983a 	sll	r6,r6,r3
  8139cc:	4992b03a 	or	r9,r9,r6
  8139d0:	12406215 	stw	r9,392(r2)
  8139d4:	21c04215 	stw	r7,264(r4)
  8139d8:	01000084 	movi	r4,2
  8139dc:	893fd21e 	bne	r17,r4,813928 <__alt_mem_onchip_mem+0xff793928>
  8139e0:	11006317 	ldw	r4,396(r2)
  8139e4:	218cb03a 	or	r6,r4,r6
  8139e8:	11806315 	stw	r6,396(r2)
  8139ec:	003fce06 	br	813928 <__alt_mem_onchip_mem+0xff793928>
  8139f0:	18805304 	addi	r2,r3,332
  8139f4:	18805215 	stw	r2,328(r3)
  8139f8:	003fc606 	br	813914 <__alt_mem_onchip_mem+0xff793914>
  8139fc:	00bfffc4 	movi	r2,-1
  813a00:	003fd006 	br	813944 <__alt_mem_onchip_mem+0xff793944>

00813a04 <__call_exitprocs>:
  813a04:	defff504 	addi	sp,sp,-44
  813a08:	df000915 	stw	fp,36(sp)
  813a0c:	dd400615 	stw	r21,24(sp)
  813a10:	dc800315 	stw	r18,12(sp)
  813a14:	dfc00a15 	stw	ra,40(sp)
  813a18:	ddc00815 	stw	r23,32(sp)
  813a1c:	dd800715 	stw	r22,28(sp)
  813a20:	dd000515 	stw	r20,20(sp)
  813a24:	dcc00415 	stw	r19,16(sp)
  813a28:	dc400215 	stw	r17,8(sp)
  813a2c:	dc000115 	stw	r16,4(sp)
  813a30:	d9000015 	stw	r4,0(sp)
  813a34:	2839883a 	mov	fp,r5
  813a38:	04800044 	movi	r18,1
  813a3c:	057fffc4 	movi	r21,-1
  813a40:	00802074 	movhi	r2,129
  813a44:	1097e004 	addi	r2,r2,24448
  813a48:	12000017 	ldw	r8,0(r2)
  813a4c:	45005217 	ldw	r20,328(r8)
  813a50:	44c05204 	addi	r19,r8,328
  813a54:	a0001c26 	beq	r20,zero,813ac8 <__call_exitprocs+0xc4>
  813a58:	a0800117 	ldw	r2,4(r20)
  813a5c:	15ffffc4 	addi	r23,r2,-1
  813a60:	b8000d16 	blt	r23,zero,813a98 <__call_exitprocs+0x94>
  813a64:	14000044 	addi	r16,r2,1
  813a68:	8421883a 	add	r16,r16,r16
  813a6c:	8421883a 	add	r16,r16,r16
  813a70:	84402004 	addi	r17,r16,128
  813a74:	a463883a 	add	r17,r20,r17
  813a78:	a421883a 	add	r16,r20,r16
  813a7c:	e0001e26 	beq	fp,zero,813af8 <__call_exitprocs+0xf4>
  813a80:	80804017 	ldw	r2,256(r16)
  813a84:	e0801c26 	beq	fp,r2,813af8 <__call_exitprocs+0xf4>
  813a88:	bdffffc4 	addi	r23,r23,-1
  813a8c:	843fff04 	addi	r16,r16,-4
  813a90:	8c7fff04 	addi	r17,r17,-4
  813a94:	bd7ff91e 	bne	r23,r21,813a7c <__alt_mem_onchip_mem+0xff793a7c>
  813a98:	00802034 	movhi	r2,128
  813a9c:	108bc104 	addi	r2,r2,12036
  813aa0:	10000926 	beq	r2,zero,813ac8 <__call_exitprocs+0xc4>
  813aa4:	a0800117 	ldw	r2,4(r20)
  813aa8:	1000301e 	bne	r2,zero,813b6c <__call_exitprocs+0x168>
  813aac:	a0800017 	ldw	r2,0(r20)
  813ab0:	10003226 	beq	r2,zero,813b7c <__call_exitprocs+0x178>
  813ab4:	a009883a 	mov	r4,r20
  813ab8:	98800015 	stw	r2,0(r19)
  813abc:	0802f040 	call	802f04 <free>
  813ac0:	9d000017 	ldw	r20,0(r19)
  813ac4:	a03fe41e 	bne	r20,zero,813a58 <__alt_mem_onchip_mem+0xff793a58>
  813ac8:	dfc00a17 	ldw	ra,40(sp)
  813acc:	df000917 	ldw	fp,36(sp)
  813ad0:	ddc00817 	ldw	r23,32(sp)
  813ad4:	dd800717 	ldw	r22,28(sp)
  813ad8:	dd400617 	ldw	r21,24(sp)
  813adc:	dd000517 	ldw	r20,20(sp)
  813ae0:	dcc00417 	ldw	r19,16(sp)
  813ae4:	dc800317 	ldw	r18,12(sp)
  813ae8:	dc400217 	ldw	r17,8(sp)
  813aec:	dc000117 	ldw	r16,4(sp)
  813af0:	dec00b04 	addi	sp,sp,44
  813af4:	f800283a 	ret
  813af8:	a0800117 	ldw	r2,4(r20)
  813afc:	80c00017 	ldw	r3,0(r16)
  813b00:	10bfffc4 	addi	r2,r2,-1
  813b04:	15c01426 	beq	r2,r23,813b58 <__call_exitprocs+0x154>
  813b08:	80000015 	stw	zero,0(r16)
  813b0c:	183fde26 	beq	r3,zero,813a88 <__alt_mem_onchip_mem+0xff793a88>
  813b10:	95c8983a 	sll	r4,r18,r23
  813b14:	a0806217 	ldw	r2,392(r20)
  813b18:	a5800117 	ldw	r22,4(r20)
  813b1c:	2084703a 	and	r2,r4,r2
  813b20:	10000b26 	beq	r2,zero,813b50 <__call_exitprocs+0x14c>
  813b24:	a0806317 	ldw	r2,396(r20)
  813b28:	2088703a 	and	r4,r4,r2
  813b2c:	20000c1e 	bne	r4,zero,813b60 <__call_exitprocs+0x15c>
  813b30:	89400017 	ldw	r5,0(r17)
  813b34:	d9000017 	ldw	r4,0(sp)
  813b38:	183ee83a 	callr	r3
  813b3c:	a0800117 	ldw	r2,4(r20)
  813b40:	15bfbf1e 	bne	r2,r22,813a40 <__alt_mem_onchip_mem+0xff793a40>
  813b44:	98800017 	ldw	r2,0(r19)
  813b48:	153fcf26 	beq	r2,r20,813a88 <__alt_mem_onchip_mem+0xff793a88>
  813b4c:	003fbc06 	br	813a40 <__alt_mem_onchip_mem+0xff793a40>
  813b50:	183ee83a 	callr	r3
  813b54:	003ff906 	br	813b3c <__alt_mem_onchip_mem+0xff793b3c>
  813b58:	a5c00115 	stw	r23,4(r20)
  813b5c:	003feb06 	br	813b0c <__alt_mem_onchip_mem+0xff793b0c>
  813b60:	89000017 	ldw	r4,0(r17)
  813b64:	183ee83a 	callr	r3
  813b68:	003ff406 	br	813b3c <__alt_mem_onchip_mem+0xff793b3c>
  813b6c:	a0800017 	ldw	r2,0(r20)
  813b70:	a027883a 	mov	r19,r20
  813b74:	1029883a 	mov	r20,r2
  813b78:	003fb606 	br	813a54 <__alt_mem_onchip_mem+0xff793a54>
  813b7c:	0005883a 	mov	r2,zero
  813b80:	003ffb06 	br	813b70 <__alt_mem_onchip_mem+0xff793b70>

00813b84 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  813b84:	defffd04 	addi	sp,sp,-12
  813b88:	df000215 	stw	fp,8(sp)
  813b8c:	df000204 	addi	fp,sp,8
  813b90:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  813b94:	0001883a 	nop
  813b98:	e0bfff17 	ldw	r2,-4(fp)
  813b9c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  813ba0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  813ba4:	10000226 	beq	r2,zero,813bb0 <_exit+0x2c>
    ALT_SIM_FAIL();
  813ba8:	002af070 	cmpltui	zero,zero,43969
  813bac:	00000106 	br	813bb4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  813bb0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  813bb4:	003fff06 	br	813bb4 <__alt_mem_onchip_mem+0xff793bb4>
