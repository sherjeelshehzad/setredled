
Traffic_Light_Controller.elf:     file format elf32-littlenios2
Traffic_Light_Controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000142f0 memsz 0x000142f0 flags r-x
    LOAD off    0x00015310 vaddr 0x00814310 paddr 0x0081600c align 2**12
         filesz 0x00001cfc memsz 0x00001cfc flags rw-
    LOAD off    0x00017d08 vaddr 0x00817d08 paddr 0x00817d08 align 2**12
         filesz 0x00000000 memsz 0x00000220 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000139e0  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006ec  00813c24  00813c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cfc  00814310  0081600c  00015310  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000220  00817d08  00817d08  00017d08  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00817f28  00817f28  0001700c  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01080000  01080000  0001700c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001700c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001258  00000000  00000000  00017030  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002fa7f  00000000  00000000  00018288  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000bf38  00000000  00000000  00047d07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e7e0  00000000  00000000  00053c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002b44  00000000  00000000  00062420  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000469a  00000000  00000000  00064f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00019165  00000000  00000000  000695fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00082764  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b18  00000000  00000000  000827c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00088271  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00088274  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00088277  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00088278  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00088279  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008827d  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00088281  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00088285  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0008828e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00088297  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  000882a0  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000059  00000000  00000000  000882ac  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006b318  00000000  00000000  00088305  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00813c24 l    d  .rodata	00000000 .rodata
00814310 l    d  .rwdata	00000000 .rwdata
00817d08 l    d  .bss	00000000 .bss
00817f28 l    d  .sdram	00000000 .sdram
01080000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Traffic_Light_Controller_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 findfp.c
00802144 l     F .text	00000008 __fp_unlock
00802158 l     F .text	0000019c __sinit.part.1
008022f4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
00814310 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00803a78 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
00813dca l     O .rodata	00000010 zeroes.4404
0080643c l     F .text	000000bc __sbprintf
00813dda l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
00813eeb l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00806700 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00814b5c l     O .rwdata	00000020 lc_ctype_charset
00814b3c l     O .rwdata	00000020 lc_message_charset
00814b7c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00814088 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080aa60 l     F .text	000000fc __sprint_r.part.0
008141bc l     O .rodata	00000010 blanks.4348
008141ac l     O .rodata	00000010 zeroes.4349
0080bfec l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080faac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080fbb8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080fbe4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080fe50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080ff30 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0081001c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
008101f0 l     F .text	0000003c alt_get_errno
0081022c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00810444 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00815ffc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00810834 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00810968 l     F .text	00000034 alt_dev_reg
00814d5c l     O .rwdata	00001060 jtag_uart
00815dbc l     O .rwdata	00000120 lcd
00815edc l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00810c94 l     F .text	0000020c altera_avalon_jtag_uart_irq
00810ea0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00816008 l     O .rwdata	00000004 colstart
008114d8 l     F .text	000000b8 lcd_write_command
00811590 l     F .text	000000d8 lcd_write_data
00811668 l     F .text	000000d0 lcd_clear_screen
00811738 l     F .text	000001ec lcd_repaint_screen
00811924 l     F .text	000000cc lcd_scroll_up
008119f0 l     F .text	000002ac lcd_handle_escape
00812174 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008123b4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00812664 l     F .text	0000009c altera_avalon_uart_irq
00812700 l     F .text	000000e4 altera_avalon_uart_rxirq
008127e4 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00812980 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00812b98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00812dc8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00813478 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00817d80 g     O .bss	00000004 alt_instruction_exception_handler
0080398c g     F .text	00000018 putchar
0080a06c g     F .text	00000074 _mprec_log10
00800d78 g     F .text	00000080 lcd_set_mode
0080a158 g     F .text	0000008c __any_on
00808cd0 g     F .text	00000054 _isatty_r
00814094 g     O .rodata	00000028 __mprec_tinytens
00817d2c g     O .bss	00000004 current_state4
0081012c g     F .text	0000007c alt_main
00817d3c g     O .bss	00000004 vehicle_cross
008039a4 g     F .text	000000c0 _puts_r
00817e28 g     O .bss	00000100 alt_irq
00808e00 g     F .text	00000060 _lseek_r
00815fb4 g     O .rwdata	00000004 t3
0081600c g       *ABS*	00000000 __flash_rwdata_start
00808334 g     F .text	000000ac __sflags
0080e4ac g     F .text	00000088 .hidden __eqdf2
00817d38 g     O .bss	00000004 pedEW
00817f28 g       *ABS*	00000000 __alt_heap_start
00803fcc g     F .text	00000008 strtok_r
00803948 g     F .text	0000003c printf
0080c4cc g     F .text	0000009c _wcrtomb_r
00803e1c g     F .text	0000005c __sseek
00802494 g     F .text	00000010 __sinit
0080c0a8 g     F .text	00000140 __swbuf_r
00817d18 g     O .bss	00000004 previous_state1
00817d44 g     O .bss	00000004 lcd
00808d24 g     F .text	0000007c _setlocale_r
008022fc g     F .text	00000068 __sfmoreglue
008101cc g     F .text	00000024 __malloc_unlock
0080908c g     F .text	0000015c memmove
0080247c g     F .text	00000018 _cleanup
008091e8 g     F .text	000000a8 _Balloc
00803f30 g     F .text	0000009c __strtok_r
0080e534 g     F .text	000000dc .hidden __gtdf2
008135e8 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00815fbc g     O .rwdata	00000004 t5
00802abc g     F .text	0000005c _fstat_r
00817d4c g     O .bss	00000004 errno
00803cdc g     F .text	00000014 __srget
00815fa4 g     O .rwdata	00000004 mode_display
00803d98 g     F .text	00000008 __seofread
00817d70 g     O .bss	00000004 alt_argv
0081dfa0 g       *ABS*	00000000 _gp
008135b8 g     F .text	00000030 usleep
00814bdc g     O .rwdata	00000180 alt_fd_list
00803984 g     F .text	00000008 _putchar_r
00812f68 g     F .text	00000090 alt_find_dev
00808f44 g     F .text	00000148 memcpy
00800af4 g     F .text	0000004c camera_timer_isr
008003a0 g     F .text	00000284 pedestrian_tlc_timer_isr
0080214c g     F .text	0000000c _cleanup_r
0080f798 g     F .text	000000dc .hidden __floatsidf
0081353c g     F .text	0000007c alt_io_redirect
0080e610 g     F .text	000000f4 .hidden __ltdf2
00817d34 g     O .bss	00000004 pedNS
00813c24 g       *ABS*	00000000 __DTOR_END__
00803a64 g     F .text	00000014 puts
00800b40 g     F .text	00000030 vehicle_timer_isr
008137f4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080a910 g     F .text	00000074 __fpclassifyd
00809fc8 g     F .text	000000a4 __ratio
0080bfd0 g     F .text	0000001c __vfiprintf_internal
00800fe4 g     F .text	00000284 pedestrian_tlc
00811098 g     F .text	0000021c altera_avalon_jtag_uart_read
00802f5c g     F .text	00000014 malloc
00803918 g     F .text	00000030 _printf_r
0080d25c g     F .text	00000064 .hidden __udivsi3
0080fe8c g     F .text	000000a4 isatty
008140e4 g     O .rodata	000000c8 __mprec_tens
00808da0 g     F .text	0000000c __locale_charset
00813764 g     F .text	00000090 alt_icache_flush
00817d58 g     O .bss	00000004 __malloc_top_pad
00815fd8 g     O .rwdata	00000004 __mb_cur_max
00808dd0 g     F .text	0000000c _localeconv_r
008095f4 g     F .text	0000003c __i2b
00808814 g     F .text	000004bc __sfvwrite_r
00815fa0 g     O .rwdata	00000004 current_mode
00803cf0 g     F .text	00000054 _sbrk_r
00801268 g     F .text	000005ac configurable_tlc
0080a34c g     F .text	00000060 _read_r
00815ff0 g     O .rwdata	00000004 alt_max_fd
00807f88 g     F .text	000000f0 _fclose_r
00815fb0 g     O .rwdata	00000004 t2
00808304 g     F .text	00000030 fflush
00817d54 g     O .bss	00000004 __malloc_max_sbrked_mem
0080fcd0 g     F .text	00000180 alt_irq_register
0080204c g     F .text	00000070 _fgetc_r
0080d318 g     F .text	000008ac .hidden __adddf3
00809d70 g     F .text	0000010c __b2d
0080cc2c g     F .text	00000538 .hidden __umoddi3
00810058 g     F .text	000000d4 lseek
00815fc4 g     O .rwdata	00000004 _global_impure_ptr
0080a3ac g     F .text	00000564 _realloc_r
00817f28 g       *ABS*	00000000 __bss_end
00813388 g     F .text	000000f0 alt_iic_isr_register
0081072c g     F .text	00000108 alt_tick
0080c6b4 g     F .text	00000578 .hidden __udivdi3
0080c428 g     F .text	00000024 _fputwc_r
008140bc g     O .rodata	00000028 __mprec_bigtens
008093d8 g     F .text	00000104 __s2b
0080f874 g     F .text	000000a8 .hidden __floatunsidf
00809ab0 g     F .text	00000060 __mcmp
008125b8 g     F .text	000000ac altera_avalon_uart_init
008024b4 g     F .text	00000018 __fp_lock_all
0081333c g     F .text	0000004c alt_ic_irq_enabled
00810690 g     F .text	0000009c alt_alarm_stop
00801814 g     F .text	000005bc camera_tlc
0080420c g     F .text	0000001c strtol
00817d68 g     O .bss	00000004 alt_irq_active
0080265c g     F .text	00000444 _fseeko_r
01080000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00814bb4 g     O .rwdata	00000028 alt_dev_null
00817dac g     O .bss	00000018 timer_simple
00812d80 g     F .text	00000048 alt_dcache_flush_all
008094dc g     F .text	00000068 __hi0bits
0080f718 g     F .text	00000080 .hidden __fixdfsi
00815fb8 g     O .rwdata	00000004 t4
0081600c g       *ABS*	00000000 __ram_rwdata_end
00815fe8 g     O .rwdata	00000008 alt_dev_list
00810870 g     F .text	000000f8 write
0080a1e4 g     F .text	000000a0 _putc_r
00814310 g       *ABS*	00000000 __ram_rodata_end
0080fc20 g     F .text	000000b0 fstat
00802618 g     F .text	00000024 fprintf
0080e610 g     F .text	000000f4 .hidden __ledf2
00809828 g     F .text	00000140 __pow5mult
0080ab74 g     F .text	0000145c ___vfiprintf_internal_r
00817d64 g     O .bss	00000004 __nlocale_changed
0080d2c0 g     F .text	00000058 .hidden __umodsi3
00817f28 g       *ABS*	00000000 end
00811c9c g     F .text	000004d8 altera_avalon_lcd_16207_write
00802aa0 g     F .text	0000001c fseeko
00812bd4 g     F .text	000001ac altera_avalon_uart_write
00802640 g     F .text	0000001c fseek
00810bd4 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00813c24 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0081242c g     F .text	0000007c alt_avalon_timer_sc_init
00812508 g     F .text	00000060 altera_avalon_uart_write_fd
0080f91c g     F .text	00000064 .hidden __clzsi2
00812568 g     F .text	00000050 altera_avalon_uart_close_fd
008112b4 g     F .text	00000224 altera_avalon_jtag_uart_write
008024a4 g     F .text	00000004 __sfp_lock_acquire
00808e60 g     F .text	000000e4 memchr
00804228 g     F .text	000021f8 ___vfprintf_internal_r
00808504 g     F .text	00000310 _free_r
00808dac g     F .text	00000010 __locale_mb_cur_max
00813a70 g     F .text	00000180 __call_exitprocs
00803c68 g     F .text	00000074 __srget_r
00817d28 g     O .bss	00000004 previous_state3
00817d60 g     O .bss	00000004 __mlocale_changed
00815fcc g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00817d78 g     O .bss	00000004 _alt_tick_rate
00800624 g     F .text	00000268 configurable_tlc_timer_isr
00809968 g     F .text	00000148 __lshift
00817d7c g     O .bss	00000004 _alt_nticks
00810480 g     F .text	000000fc read
008109d4 g     F .text	0000009c alt_sys_init
008038b8 g     F .text	00000060 _open_r
00813958 g     F .text	00000118 __register_exitproc
00809630 g     F .text	000001f8 __multiply
00810f40 g     F .text	00000068 altera_avalon_jtag_uart_close
00817dc4 g     O .bss	00000018 timer_vehicle
00814310 g       *ABS*	00000000 __ram_rwdata_start
00813c24 g       *ABS*	00000000 __ram_rodata_start
00817d84 g     O .bss	00000028 __malloc_current_mallinfo
00809e7c g     F .text	0000014c __d2b
00817d1c g     O .bss	00000004 current_state2
00817d0c g     O .bss	00000004 camera_timer_has_started
00815fa8 g     O .rwdata	00000002 comma
00810a70 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00813100 g     F .text	000000a4 alt_get_fd
0081360c g     F .text	00000158 alt_busy_sleep
008066ac g     F .text	00000054 _close_r
00803f18 g     F .text	00000018 strtok
008138dc g     F .text	0000007c memcmp
00810b30 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00817f28 g       *ABS*	00000000 __alt_stack_base
00810b80 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00802ca0 g     F .text	000000cc _fwrite_r
00806558 g     F .text	00000154 __swsetup_r
0080dbc4 g     F .text	000008e8 .hidden __divdf3
00802364 g     F .text	00000118 __sfp
0080a0e0 g     F .text	00000078 __copybits
00814734 g     O .rwdata	00000408 __malloc_av_
008024b0 g     F .text	00000004 __sinit_lock_release
0080e704 g     F .text	00000718 .hidden __muldf3
00803d44 g     F .text	00000054 __sread
00812ff8 g     F .text	00000108 alt_find_file
00812e04 g     F .text	000000a4 alt_dev_llist_insert
008101a8 g     F .text	00000024 __malloc_lock
008025f0 g     F .text	00000028 _fprintf_r
008105e0 g     F .text	000000b0 sbrk
008082a8 g     F .text	0000005c _fflush_r
0080c200 g     F .text	000000c4 _calloc_r
00815fac g     O .rwdata	00000004 t1
008025d8 g     F .text	00000018 fopen
00817d08 g       *ABS*	00000000 __bss_start
00803790 g     F .text	00000128 memset
00801dd0 g     F .text	0000027c main
00817d74 g     O .bss	00000004 alt_envp
00817d50 g     O .bss	00000004 __malloc_max_total_mem
00810ad0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080c1e8 g     F .text	00000018 __swbuf
00812220 g     F .text	00000134 altera_avalon_lcd_16207_init
00803e78 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00808078 g     F .text	00000014 fclose
00803fd4 g     F .text	00000238 _strtol_r
00806900 g     F .text	00001688 _dtoa_r
00802f84 g     F .text	0000080c _malloc_r
00817d08 g     O .bss	00000004 timer_has_started
0080c628 g     F .text	00000030 __ascii_wctomb
00815ff4 g     O .rwdata	00000004 alt_errno
00802b18 g     F .text	000000c4 _fwalk
00817d24 g     O .bss	00000004 current_state3
0080088c g     F .text	00000268 camera_tlc_timer_isr
0080a284 g     F .text	000000c8 putc
0080d164 g     F .text	00000084 .hidden __divsi3
008083e0 g     F .text	00000124 _malloc_trim_r
00813c24 g       *ABS*	00000000 __CTOR_END__
0080a984 g     F .text	000000dc strcmp
00813c24 g       *ABS*	00000000 __flash_rodata_start
00813c24 g       *ABS*	00000000 __DTOR_LIST__
00817d40 g     O .bss	00000004 count
00817d10 g     O .bss	00000004 mode_request
0080e4ac g     F .text	00000088 .hidden __nedf2
0081099c g     F .text	00000038 alt_irq_init
0081057c g     F .text	00000064 alt_release_fd
008020bc g     F .text	00000088 fgetc
008141cc g     O .rodata	00000100 .hidden __clz_tab
00817d5c g     O .bss	00000004 _PathLocale
00813890 g     F .text	00000014 atexit
008064f8 g     F .text	00000060 _write_r
00808ddc g     F .text	00000018 setlocale
00815fc8 g     O .rwdata	00000004 _impure_ptr
00817d6c g     O .bss	00000004 alt_argc
0080808c g     F .text	0000021c __sflush_r
00812f08 g     F .text	00000060 _do_dtors
00808dc8 g     F .text	00000008 __locale_cjk_lang
0080263c g     F .text	00000004 _fseek_r
00803a94 g     F .text	000001d4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00809d0c g     F .text	00000064 __ulp
008024cc g     F .text	00000018 __fp_unlock_all
00812354 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00815fe0 g     O .rwdata	00000008 alt_fs_list
00817d30 g     O .bss	00000004 previous_state4
00800290 g     F .text	00000080 reset_volatiles
00800020 g       *ABS*	00000000 __ram_exceptions_start
00808df4 g     F .text	0000000c localeconv
00815fc0 g     O .rwdata	00000004 t6
008131d8 g     F .text	00000050 alt_ic_isr_register
00802d6c g     F .text	00000034 fwrite
0081600c g       *ABS*	00000000 _edata
008124a8 g     F .text	00000060 altera_avalon_uart_read_fd
00800b70 g     F .text	00000208 button_interrupt
00817f28 g       *ABS*	00000000 _end
00817ddc g     O .bss	00000018 timer_camera
00800310 g     F .text	00000090 simple_tlc_timer_isr
0080c2c4 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
00810fa8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
008132b0 g     F .text	0000008c alt_ic_irq_disable
00803da0 g     F .text	0000007c __swrite
00815fd0 g     O .rwdata	00000004 __malloc_trim_threshold
00808dbc g     F .text	0000000c __locale_msgcharset
008138a4 g     F .text	00000038 exit
00802bdc g     F .text	000000c4 _fwalk_reent
00809b10 g     F .text	000001fc __mdiff
00800df8 g     F .text	000001ec simple_tlc
0080d1e8 g     F .text	00000074 .hidden __modsi3
00815fd4 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00817d48 g     O .bss	00000004 uart
008024a8 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00813dea g     O .rodata	00000101 _ctype_
0081292c g     F .text	00000054 altera_avalon_uart_close
008024e4 g     F .text	000000f4 _fopen_r
00813bf0 g     F .text	00000034 _exit
0080f980 g     F .text	0000012c alt_alarm_start
00802da0 g     F .text	000001bc __smakebuf_r
00817df4 g     O .bss	00000032 config_values
00803e80 g     F .text	00000098 strlen
008102f0 g     F .text	00000154 open
0080e534 g     F .text	000000dc .hidden __gedf2
00817d14 g     O .bss	00000004 current_state1
00815fdc g     O .rwdata	00000004 __wctomb
0080ab5c g     F .text	00000018 __sprint_r
008131a4 g     F .text	00000034 alt_icache_flush_all
00815ff8 g     O .rwdata	00000004 alt_priority_mask
00813228 g     F .text	00000088 alt_ic_irq_enable
00806420 g     F .text	0000001c __vfprintf_internal
008129bc g     F .text	000001dc altera_avalon_uart_read
0080c658 g     F .text	0000005c _wctomb_r
00817d20 g     O .bss	00000004 previous_state2
0080ee1c g     F .text	000008fc .hidden __subdf3
00809544 g     F .text	000000b0 __lo0bits
00816000 g     O .rwdata	00000008 alt_alarm_list
00812ea8 g     F .text	00000060 _do_ctors
0080c568 g     F .text	000000c0 wcrtomb
0080fae8 g     F .text	000000d0 close
0080ff98 g     F .text	00000084 alt_load
0080c44c g     F .text	00000080 fputwc
00802f70 g     F .text	00000014 free
008024ac g     F .text	00000004 __sinit_lock_acquire
008092b8 g     F .text	00000120 __multadd
00809290 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff780004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	109f8a04 	addi	r2,r2,32296
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	109f8a04 	addi	r2,r2,32296
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff78012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff780120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a77817 	ldw	r2,-25120(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a77817 	ldw	r2,-25120(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff780248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6b7e814 	ori	gp,gp,57248
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	109f4214 	ori	r2,r2,32008

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18dfca14 	ori	r3,r3,32552

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff780278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080ff980 	call	80ff98 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	081012c0 	call	81012c <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff78028c>

00800290 <reset_volatiles>:
volatile unsigned int t4 = rrrr;
volatile unsigned int t5 = grrg;
volatile unsigned int t6 = yrry;

//helper function to reset volatile variables on mode change
void reset_volatiles(){
  800290:	deffff04 	addi	sp,sp,-4
  800294:	df000015 	stw	fp,0(sp)
  800298:	d839883a 	mov	fp,sp
	current_state1 = 0;
  80029c:	d0275d15 	stw	zero,-25228(gp)
	current_state2 = 0;
  8002a0:	d0275f15 	stw	zero,-25220(gp)
	current_state3 = 0;
  8002a4:	d0276115 	stw	zero,-25212(gp)
	current_state4 = 0;
  8002a8:	d0276315 	stw	zero,-25204(gp)
	previous_state1 = 0;
  8002ac:	d0275e15 	stw	zero,-25224(gp)
	previous_state2 = 0;
  8002b0:	d0276015 	stw	zero,-25216(gp)
	previous_state3 = 0;
  8002b4:	d0276215 	stw	zero,-25208(gp)
	previous_state4 = 0;
  8002b8:	d0276415 	stw	zero,-25200(gp)
	pedNS = 0;
  8002bc:	d0276515 	stw	zero,-25196(gp)
	pedEW = 0;
  8002c0:	d0276615 	stw	zero,-25192(gp)
	vehicle_cross = 0;
  8002c4:	d0276715 	stw	zero,-25188(gp)
	count = 0;
  8002c8:	d0276815 	stw	zero,-25184(gp)
	t1 = rrrr;
  8002cc:	00807d04 	movi	r2,500
  8002d0:	d0a00315 	stw	r2,-32756(gp)
	t2 = grrg;
  8002d4:	0085dc04 	movi	r2,6000
  8002d8:	d0a00415 	stw	r2,-32752(gp)
	t3 = yrry;
  8002dc:	0081f404 	movi	r2,2000
  8002e0:	d0a00515 	stw	r2,-32748(gp)
	t4 = rrrr;
  8002e4:	00807d04 	movi	r2,500
  8002e8:	d0a00615 	stw	r2,-32744(gp)
	t5 = grrg;
  8002ec:	0085dc04 	movi	r2,6000
  8002f0:	d0a00715 	stw	r2,-32740(gp)
	t6 = yrry;
  8002f4:	0081f404 	movi	r2,2000
  8002f8:	d0a00815 	stw	r2,-32736(gp)
}
  8002fc:	0001883a 	nop
  800300:	e037883a 	mov	sp,fp
  800304:	df000017 	ldw	fp,0(sp)
  800308:	dec00104 	addi	sp,sp,4
  80030c:	f800283a 	ret

00800310 <simple_tlc_timer_isr>:

alt_u32 simple_tlc_timer_isr(void* context){
  800310:	defffd04 	addi	sp,sp,-12
  800314:	dfc00215 	stw	ra,8(sp)
  800318:	df000115 	stw	fp,4(sp)
  80031c:	df000104 	addi	fp,sp,4
  800320:	e13fff15 	stw	r4,-4(fp)
	//enum simple_state *something = (enum simple_state*) context;
	//if there is a pending mode request and we are in a safe state, do not run any output logic and kill the timer
	if (mode_request != current_mode){
  800324:	d0e75c17 	ldw	r3,-25232(gp)
  800328:	d0a00017 	ldw	r2,-32768(gp)
  80032c:	18800726 	beq	r3,r2,80034c <simple_tlc_timer_isr+0x3c>
		if ((current_state1 == rr1_1) || (current_state1 == rr2_1))
  800330:	d0a75d17 	ldw	r2,-25228(gp)
  800334:	10000326 	beq	r2,zero,800344 <simple_tlc_timer_isr+0x34>
  800338:	d0a75d17 	ldw	r2,-25228(gp)
  80033c:	108000d8 	cmpnei	r2,r2,3
  800340:	1000021e 	bne	r2,zero,80034c <simple_tlc_timer_isr+0x3c>
			return 0;
  800344:	0005883a 	mov	r2,zero
  800348:	00001006 	br	80038c <simple_tlc_timer_isr+0x7c>
	}

	previous_state1 = current_state1; //save previous state for output transition logic
  80034c:	d0a75d17 	ldw	r2,-25228(gp)
  800350:	d0a75e15 	stw	r2,-25224(gp)
	current_state1++; //move to the next state
  800354:	d0a75d17 	ldw	r2,-25228(gp)
  800358:	10800044 	addi	r2,r2,1
  80035c:	d0a75d15 	stw	r2,-25228(gp)
	if (current_state1 == buffer_1) //if at final state, loop back to initial state using a buffer state
  800360:	d0a75d17 	ldw	r2,-25228(gp)
  800364:	10800198 	cmpnei	r2,r2,6
  800368:	1000011e 	bne	r2,zero,800370 <simple_tlc_timer_isr+0x60>
		current_state1 = rr1_1;
  80036c:	d0275d15 	stw	zero,-25228(gp)
	printf("current state simple_timer %d\n", current_state1);
  800370:	d0a75d17 	ldw	r2,-25228(gp)
  800374:	100b883a 	mov	r5,r2
  800378:	01002074 	movhi	r4,129
  80037c:	210f0904 	addi	r4,r4,15396
  800380:	08039480 	call	803948 <printf>
	timer_has_started = 0; //reset timer_started flag
  800384:	d0275a15 	stw	zero,-25240(gp)
	return 0;
  800388:	0005883a 	mov	r2,zero
}
  80038c:	e037883a 	mov	sp,fp
  800390:	dfc00117 	ldw	ra,4(sp)
  800394:	df000017 	ldw	fp,0(sp)
  800398:	dec00204 	addi	sp,sp,8
  80039c:	f800283a 	ret

008003a0 <pedestrian_tlc_timer_isr>:

alt_u32 pedestrian_tlc_timer_isr(void* context){
  8003a0:	defffd04 	addi	sp,sp,-12
  8003a4:	dfc00215 	stw	ra,8(sp)
  8003a8:	df000115 	stw	fp,4(sp)
  8003ac:	df000104 	addi	fp,sp,4
  8003b0:	e13fff15 	stw	r4,-4(fp)
	//enum simple_state *something = (enum simple_state*) context;

	//if there is a pending mode request and we are in a safe state, do not run any output logic and kill the timer
	if (mode_request != current_mode){
  8003b4:	d0e75c17 	ldw	r3,-25232(gp)
  8003b8:	d0a00017 	ldw	r2,-32768(gp)
  8003bc:	18800a26 	beq	r3,r2,8003e8 <pedestrian_tlc_timer_isr+0x48>
		if ((current_state2 == rr1_2) | (current_state2 == rr2_2))
  8003c0:	d0a75f17 	ldw	r2,-25220(gp)
  8003c4:	1005003a 	cmpeq	r2,r2,zero
  8003c8:	1007883a 	mov	r3,r2
  8003cc:	d0a75f17 	ldw	r2,-25220(gp)
  8003d0:	10800120 	cmpeqi	r2,r2,4
  8003d4:	1884b03a 	or	r2,r3,r2
  8003d8:	10803fcc 	andi	r2,r2,255
  8003dc:	10000226 	beq	r2,zero,8003e8 <pedestrian_tlc_timer_isr+0x48>
			return 0;
  8003e0:	0005883a 	mov	r2,zero
  8003e4:	00008a06 	br	800610 <pedestrian_tlc_timer_isr+0x270>
	}

	previous_state2 = current_state2; //save previous state for output transition logic
  8003e8:	d0a75f17 	ldw	r2,-25220(gp)
  8003ec:	d0a76015 	stw	r2,-25216(gp)
	if ((pedEW) && (pedNS)){
  8003f0:	d0a76617 	ldw	r2,-25192(gp)
  8003f4:	10002426 	beq	r2,zero,800488 <pedestrian_tlc_timer_isr+0xe8>
  8003f8:	d0a76517 	ldw	r2,-25196(gp)
  8003fc:	10002226 	beq	r2,zero,800488 <pedestrian_tlc_timer_isr+0xe8>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0b11); // Turns RED NS and EW LED off
  800400:	00c000c4 	movi	r3,3
  800404:	00804434 	movhi	r2,272
  800408:	10842004 	addi	r2,r2,4224
  80040c:	10c00035 	stwio	r3,0(r2)
		//handle pedestrians at either of the RED-RED states because
		if ((current_state2 == rr1_2) | (current_state2 == rr2_2))
  800410:	d0a75f17 	ldw	r2,-25220(gp)
  800414:	1005003a 	cmpeq	r2,r2,zero
  800418:	1007883a 	mov	r3,r2
  80041c:	d0a75f17 	ldw	r2,-25220(gp)
  800420:	10800120 	cmpeqi	r2,r2,4
  800424:	1884b03a 	or	r2,r3,r2
  800428:	10803fcc 	andi	r2,r2,255
  80042c:	10000426 	beq	r2,zero,800440 <pedestrian_tlc_timer_isr+0xa0>
			current_state2 += 2;
  800430:	d0a75f17 	ldw	r2,-25220(gp)
  800434:	10800084 	addi	r2,r2,2
  800438:	d0a75f15 	stw	r2,-25220(gp)

	previous_state2 = current_state2; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0b11); // Turns RED NS and EW LED off
		//handle pedestrians at either of the RED-RED states because
		if ((current_state2 == rr1_2) | (current_state2 == rr2_2))
  80043c:	00005806 	br	8005a0 <pedestrian_tlc_timer_isr+0x200>
			current_state2 += 2;
		//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
		else if (current_state2 == gr_2)
  800440:	d0a75f17 	ldw	r2,-25220(gp)
  800444:	10800058 	cmpnei	r2,r2,1
  800448:	1000041e 	bne	r2,zero,80045c <pedestrian_tlc_timer_isr+0xbc>
			current_state2 += 2;
  80044c:	d0a75f17 	ldw	r2,-25220(gp)
  800450:	10800084 	addi	r2,r2,2
  800454:	d0a75f15 	stw	r2,-25220(gp)

	previous_state2 = current_state2; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0b11); // Turns RED NS and EW LED off
		//handle pedestrians at either of the RED-RED states because
		if ((current_state2 == rr1_2) | (current_state2 == rr2_2))
  800458:	00005106 	br	8005a0 <pedestrian_tlc_timer_isr+0x200>
			current_state2 += 2;
		//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
		else if (current_state2 == gr_2)
			current_state2 += 2;
		//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
		else if (current_state2 == rg_2)
  80045c:	d0a75f17 	ldw	r2,-25220(gp)
  800460:	10800158 	cmpnei	r2,r2,5
  800464:	1000041e 	bne	r2,zero,800478 <pedestrian_tlc_timer_isr+0xd8>
			current_state2 += 2;
  800468:	d0a75f17 	ldw	r2,-25220(gp)
  80046c:	10800084 	addi	r2,r2,2
  800470:	d0a75f15 	stw	r2,-25220(gp)

	previous_state2 = current_state2; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0b11); // Turns RED NS and EW LED off
		//handle pedestrians at either of the RED-RED states because
		if ((current_state2 == rr1_2) | (current_state2 == rr2_2))
  800474:	00004a06 	br	8005a0 <pedestrian_tlc_timer_isr+0x200>
			current_state2 += 2;
		//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
		else if (current_state2 == rg_2)
			current_state2 += 2;
		else
			current_state2++;
  800478:	d0a75f17 	ldw	r2,-25220(gp)
  80047c:	10800044 	addi	r2,r2,1
  800480:	d0a75f15 	stw	r2,-25220(gp)

	previous_state2 = current_state2; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0b11); // Turns RED NS and EW LED off
		//handle pedestrians at either of the RED-RED states because
		if ((current_state2 == rr1_2) | (current_state2 == rr2_2))
  800484:	00004606 	br	8005a0 <pedestrian_tlc_timer_isr+0x200>
		else if (current_state2 == rg_2)
			current_state2 += 2;
		else
			current_state2++;
	}
	else if (pedNS){
  800488:	d0a76517 	ldw	r2,-25196(gp)
  80048c:	10001826 	beq	r2,zero,8004f0 <pedestrian_tlc_timer_isr+0x150>
		//we are at state RED-RED (1), handle NS pedestrians
		if (current_state2 == rr1_2)
  800490:	d0a75f17 	ldw	r2,-25220(gp)
  800494:	1000041e 	bne	r2,zero,8004a8 <pedestrian_tlc_timer_isr+0x108>
			current_state2 += 2;
  800498:	d0a75f17 	ldw	r2,-25220(gp)
  80049c:	10800084 	addi	r2,r2,2
  8004a0:	d0a75f15 	stw	r2,-25220(gp)
  8004a4:	00003e06 	br	8005a0 <pedestrian_tlc_timer_isr+0x200>
		//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
		else if (current_state2 == gr_2)
  8004a8:	d0a75f17 	ldw	r2,-25220(gp)
  8004ac:	10800058 	cmpnei	r2,r2,1
  8004b0:	1000041e 	bne	r2,zero,8004c4 <pedestrian_tlc_timer_isr+0x124>
			current_state2 += 2;
  8004b4:	d0a75f17 	ldw	r2,-25220(gp)
  8004b8:	10800084 	addi	r2,r2,2
  8004bc:	d0a75f15 	stw	r2,-25220(gp)
  8004c0:	00003706 	br	8005a0 <pedestrian_tlc_timer_isr+0x200>
		//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
		else if (current_state2 == rg_2)
  8004c4:	d0a75f17 	ldw	r2,-25220(gp)
  8004c8:	10800158 	cmpnei	r2,r2,5
  8004cc:	1000041e 	bne	r2,zero,8004e0 <pedestrian_tlc_timer_isr+0x140>
			current_state2 += 2;
  8004d0:	d0a75f17 	ldw	r2,-25220(gp)
  8004d4:	10800084 	addi	r2,r2,2
  8004d8:	d0a75f15 	stw	r2,-25220(gp)
  8004dc:	00003006 	br	8005a0 <pedestrian_tlc_timer_isr+0x200>
		else
			current_state2++;
  8004e0:	d0a75f17 	ldw	r2,-25220(gp)
  8004e4:	10800044 	addi	r2,r2,1
  8004e8:	d0a75f15 	stw	r2,-25220(gp)
  8004ec:	00002c06 	br	8005a0 <pedestrian_tlc_timer_isr+0x200>
	}
	else if (pedEW){
  8004f0:	d0a76617 	ldw	r2,-25192(gp)
  8004f4:	10001926 	beq	r2,zero,80055c <pedestrian_tlc_timer_isr+0x1bc>
		//we are at state RED-RED (2), handle EW pedestrians
		if (current_state2 == rr2_2)
  8004f8:	d0a75f17 	ldw	r2,-25220(gp)
  8004fc:	10800118 	cmpnei	r2,r2,4
  800500:	1000041e 	bne	r2,zero,800514 <pedestrian_tlc_timer_isr+0x174>
			current_state2 += 2;
  800504:	d0a75f17 	ldw	r2,-25220(gp)
  800508:	10800084 	addi	r2,r2,2
  80050c:	d0a75f15 	stw	r2,-25220(gp)
  800510:	00002306 	br	8005a0 <pedestrian_tlc_timer_isr+0x200>
		//we are at state RED-GREEN, too late to handle EW pedestrians so skip past PED state
		else if (current_state2 == rg_2)
  800514:	d0a75f17 	ldw	r2,-25220(gp)
  800518:	10800158 	cmpnei	r2,r2,5
  80051c:	1000041e 	bne	r2,zero,800530 <pedestrian_tlc_timer_isr+0x190>
			current_state2 += 2;
  800520:	d0a75f17 	ldw	r2,-25220(gp)
  800524:	10800084 	addi	r2,r2,2
  800528:	d0a75f15 	stw	r2,-25220(gp)
  80052c:	00001c06 	br	8005a0 <pedestrian_tlc_timer_isr+0x200>
		//we are at state GREEN-RED, cannot handle EW pedestrians here so skip past PED state
		else if (current_state2 == gr_2)
  800530:	d0a75f17 	ldw	r2,-25220(gp)
  800534:	10800058 	cmpnei	r2,r2,1
  800538:	1000041e 	bne	r2,zero,80054c <pedestrian_tlc_timer_isr+0x1ac>
			current_state2 += 2;
  80053c:	d0a75f17 	ldw	r2,-25220(gp)
  800540:	10800084 	addi	r2,r2,2
  800544:	d0a75f15 	stw	r2,-25220(gp)
  800548:	00001506 	br	8005a0 <pedestrian_tlc_timer_isr+0x200>
		else
			current_state2++;
  80054c:	d0a75f17 	ldw	r2,-25220(gp)
  800550:	10800044 	addi	r2,r2,1
  800554:	d0a75f15 	stw	r2,-25220(gp)
  800558:	00001106 	br	8005a0 <pedestrian_tlc_timer_isr+0x200>
	}
	//if no PED interrupt flags, skip past PED states from GREEN-RED and RED-GREEN
	else if (current_state2 == gr_2)
  80055c:	d0a75f17 	ldw	r2,-25220(gp)
  800560:	10800058 	cmpnei	r2,r2,1
  800564:	1000041e 	bne	r2,zero,800578 <pedestrian_tlc_timer_isr+0x1d8>
		current_state2 += 2;
  800568:	d0a75f17 	ldw	r2,-25220(gp)
  80056c:	10800084 	addi	r2,r2,2
  800570:	d0a75f15 	stw	r2,-25220(gp)
  800574:	00000a06 	br	8005a0 <pedestrian_tlc_timer_isr+0x200>
	else if (current_state2 == rg_2)
  800578:	d0a75f17 	ldw	r2,-25220(gp)
  80057c:	10800158 	cmpnei	r2,r2,5
  800580:	1000041e 	bne	r2,zero,800594 <pedestrian_tlc_timer_isr+0x1f4>
		current_state2 += 2;
  800584:	d0a75f17 	ldw	r2,-25220(gp)
  800588:	10800084 	addi	r2,r2,2
  80058c:	d0a75f15 	stw	r2,-25220(gp)
  800590:	00000306 	br	8005a0 <pedestrian_tlc_timer_isr+0x200>
	else
		current_state2++; //move to the next state if no special condition has been met
  800594:	d0a75f17 	ldw	r2,-25220(gp)
  800598:	10800044 	addi	r2,r2,1
  80059c:	d0a75f15 	stw	r2,-25220(gp)

	//reset the NS/EW pedestrian button interrupt flag when we have changed state (NS/EWHandled = 1)
	if (previous_state2 == grp1_2) {
  8005a0:	d0a76017 	ldw	r2,-25216(gp)
  8005a4:	10800098 	cmpnei	r2,r2,2
  8005a8:	1000061e 	bne	r2,zero,8005c4 <pedestrian_tlc_timer_isr+0x224>
		pedNS = 0;
  8005ac:	d0276515 	stw	zero,-25196(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0<<0); // Turns RED NS LED off
  8005b0:	0007883a 	mov	r3,zero
  8005b4:	00804434 	movhi	r2,272
  8005b8:	10842004 	addi	r2,r2,4224
  8005bc:	10c00035 	stwio	r3,0(r2)
  8005c0:	00000806 	br	8005e4 <pedestrian_tlc_timer_isr+0x244>
	}
	else if (previous_state2 == rgp2_2) {
  8005c4:	d0a76017 	ldw	r2,-25216(gp)
  8005c8:	10800198 	cmpnei	r2,r2,6
  8005cc:	1000051e 	bne	r2,zero,8005e4 <pedestrian_tlc_timer_isr+0x244>
		pedEW = 0;
  8005d0:	d0276615 	stw	zero,-25192(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0<<1); // Turns RED EW LED off
  8005d4:	0007883a 	mov	r3,zero
  8005d8:	00804434 	movhi	r2,272
  8005dc:	10842004 	addi	r2,r2,4224
  8005e0:	10c00035 	stwio	r3,0(r2)
	}

	if (current_state2 == buffer_2) //if at final state, loop back to initial state using buffer state
  8005e4:	d0a75f17 	ldw	r2,-25220(gp)
  8005e8:	10800218 	cmpnei	r2,r2,8
  8005ec:	1000011e 	bne	r2,zero,8005f4 <pedestrian_tlc_timer_isr+0x254>
		current_state2 = rr1_2;
  8005f0:	d0275f15 	stw	zero,-25220(gp)
	printf("current state ped_timer %d\n", current_state2);
  8005f4:	d0a75f17 	ldw	r2,-25220(gp)
  8005f8:	100b883a 	mov	r5,r2
  8005fc:	01002074 	movhi	r4,129
  800600:	210f1104 	addi	r4,r4,15428
  800604:	08039480 	call	803948 <printf>

	timer_has_started = 0; //reset timer_started flag
  800608:	d0275a15 	stw	zero,-25240(gp)
return 0;
  80060c:	0005883a 	mov	r2,zero
}
  800610:	e037883a 	mov	sp,fp
  800614:	dfc00117 	ldw	ra,4(sp)
  800618:	df000017 	ldw	fp,0(sp)
  80061c:	dec00204 	addi	sp,sp,8
  800620:	f800283a 	ret

00800624 <configurable_tlc_timer_isr>:

//timer ISR (and system state transition logic) for configurable timer
alt_u32 configurable_tlc_timer_isr(void* context){
  800624:	defffd04 	addi	sp,sp,-12
  800628:	dfc00215 	stw	ra,8(sp)
  80062c:	df000115 	stw	fp,4(sp)
  800630:	df000104 	addi	fp,sp,4
  800634:	e13fff15 	stw	r4,-4(fp)
	//enum simple_state *something = (enum simple_state*) context;

	//if there is a pending mode request and we are in a safe state, do not run any output logic and kill the timer
	if (mode_request != current_mode){
  800638:	d0e75c17 	ldw	r3,-25232(gp)
  80063c:	d0a00017 	ldw	r2,-32768(gp)
  800640:	18800726 	beq	r3,r2,800660 <configurable_tlc_timer_isr+0x3c>
		if ((current_state3 == rr1_3) || (current_state3 == rr2_3))
  800644:	d0a76117 	ldw	r2,-25212(gp)
  800648:	10000326 	beq	r2,zero,800658 <configurable_tlc_timer_isr+0x34>
  80064c:	d0a76117 	ldw	r2,-25212(gp)
  800650:	10800118 	cmpnei	r2,r2,4
  800654:	1000021e 	bne	r2,zero,800660 <configurable_tlc_timer_isr+0x3c>
			return 0;
  800658:	0005883a 	mov	r2,zero
  80065c:	00008606 	br	800878 <configurable_tlc_timer_isr+0x254>
	}

	previous_state3 = current_state3; //save previous state for output transition logic
  800660:	d0a76117 	ldw	r2,-25212(gp)
  800664:	d0a76215 	stw	r2,-25208(gp)
	if ((pedEW) && (pedNS)){
  800668:	d0a76617 	ldw	r2,-25192(gp)
  80066c:	10002026 	beq	r2,zero,8006f0 <configurable_tlc_timer_isr+0xcc>
  800670:	d0a76517 	ldw	r2,-25196(gp)
  800674:	10001e26 	beq	r2,zero,8006f0 <configurable_tlc_timer_isr+0xcc>
		//handle pedestrians at either of the RED-RED states because
		if ((current_state3 == rr1_3) | (current_state3 == rr2_3))
  800678:	d0a76117 	ldw	r2,-25212(gp)
  80067c:	1005003a 	cmpeq	r2,r2,zero
  800680:	1007883a 	mov	r3,r2
  800684:	d0a76117 	ldw	r2,-25212(gp)
  800688:	10800120 	cmpeqi	r2,r2,4
  80068c:	1884b03a 	or	r2,r3,r2
  800690:	10803fcc 	andi	r2,r2,255
  800694:	10000426 	beq	r2,zero,8006a8 <configurable_tlc_timer_isr+0x84>
			current_state3 += 2;
  800698:	d0a76117 	ldw	r2,-25212(gp)
  80069c:	10800084 	addi	r2,r2,2
  8006a0:	d0a76115 	stw	r2,-25212(gp)
	}

	previous_state3 = current_state3; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state3 == rr1_3) | (current_state3 == rr2_3))
  8006a4:	00005806 	br	800808 <configurable_tlc_timer_isr+0x1e4>
			current_state3 += 2;
		//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
		else if (current_state3 == gr_3)
  8006a8:	d0a76117 	ldw	r2,-25212(gp)
  8006ac:	10800058 	cmpnei	r2,r2,1
  8006b0:	1000041e 	bne	r2,zero,8006c4 <configurable_tlc_timer_isr+0xa0>
			current_state3 += 2;
  8006b4:	d0a76117 	ldw	r2,-25212(gp)
  8006b8:	10800084 	addi	r2,r2,2
  8006bc:	d0a76115 	stw	r2,-25212(gp)
	}

	previous_state3 = current_state3; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state3 == rr1_3) | (current_state3 == rr2_3))
  8006c0:	00005106 	br	800808 <configurable_tlc_timer_isr+0x1e4>
			current_state3 += 2;
		//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
		else if (current_state3 == gr_3)
			current_state3 += 2;
		//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
		else if (current_state3 == rg_3)
  8006c4:	d0a76117 	ldw	r2,-25212(gp)
  8006c8:	10800158 	cmpnei	r2,r2,5
  8006cc:	1000041e 	bne	r2,zero,8006e0 <configurable_tlc_timer_isr+0xbc>
			current_state3 += 2;
  8006d0:	d0a76117 	ldw	r2,-25212(gp)
  8006d4:	10800084 	addi	r2,r2,2
  8006d8:	d0a76115 	stw	r2,-25212(gp)
	}

	previous_state3 = current_state3; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state3 == rr1_3) | (current_state3 == rr2_3))
  8006dc:	00004a06 	br	800808 <configurable_tlc_timer_isr+0x1e4>
			current_state3 += 2;
		//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
		else if (current_state3 == rg_3)
			current_state3 += 2;
		else
			current_state3++;
  8006e0:	d0a76117 	ldw	r2,-25212(gp)
  8006e4:	10800044 	addi	r2,r2,1
  8006e8:	d0a76115 	stw	r2,-25212(gp)
	}

	previous_state3 = current_state3; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state3 == rr1_3) | (current_state3 == rr2_3))
  8006ec:	00004606 	br	800808 <configurable_tlc_timer_isr+0x1e4>
		else if (current_state3 == rg_3)
			current_state3 += 2;
		else
			current_state3++;
	}
	else if (pedNS){
  8006f0:	d0a76517 	ldw	r2,-25196(gp)
  8006f4:	10001826 	beq	r2,zero,800758 <configurable_tlc_timer_isr+0x134>
		//we are at state RED-RED (1), handle NS pedestrians
		if (current_state3 == rr1_3)
  8006f8:	d0a76117 	ldw	r2,-25212(gp)
  8006fc:	1000041e 	bne	r2,zero,800710 <configurable_tlc_timer_isr+0xec>
			current_state3 += 2;
  800700:	d0a76117 	ldw	r2,-25212(gp)
  800704:	10800084 	addi	r2,r2,2
  800708:	d0a76115 	stw	r2,-25212(gp)
  80070c:	00003e06 	br	800808 <configurable_tlc_timer_isr+0x1e4>
		//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
		else if (current_state3 == gr_3)
  800710:	d0a76117 	ldw	r2,-25212(gp)
  800714:	10800058 	cmpnei	r2,r2,1
  800718:	1000041e 	bne	r2,zero,80072c <configurable_tlc_timer_isr+0x108>
			current_state3 += 2;
  80071c:	d0a76117 	ldw	r2,-25212(gp)
  800720:	10800084 	addi	r2,r2,2
  800724:	d0a76115 	stw	r2,-25212(gp)
  800728:	00003706 	br	800808 <configurable_tlc_timer_isr+0x1e4>
		//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
		else if (current_state3 == rg_3)
  80072c:	d0a76117 	ldw	r2,-25212(gp)
  800730:	10800158 	cmpnei	r2,r2,5
  800734:	1000041e 	bne	r2,zero,800748 <configurable_tlc_timer_isr+0x124>
			current_state3 += 2;
  800738:	d0a76117 	ldw	r2,-25212(gp)
  80073c:	10800084 	addi	r2,r2,2
  800740:	d0a76115 	stw	r2,-25212(gp)
  800744:	00003006 	br	800808 <configurable_tlc_timer_isr+0x1e4>
		else
			current_state3++;
  800748:	d0a76117 	ldw	r2,-25212(gp)
  80074c:	10800044 	addi	r2,r2,1
  800750:	d0a76115 	stw	r2,-25212(gp)
  800754:	00002c06 	br	800808 <configurable_tlc_timer_isr+0x1e4>
	}
	else if (pedEW){
  800758:	d0a76617 	ldw	r2,-25192(gp)
  80075c:	10001926 	beq	r2,zero,8007c4 <configurable_tlc_timer_isr+0x1a0>
		//we are at state RED-RED (2), handle EW pedestrians
		if (current_state3 == rr2_3)
  800760:	d0a76117 	ldw	r2,-25212(gp)
  800764:	10800118 	cmpnei	r2,r2,4
  800768:	1000041e 	bne	r2,zero,80077c <configurable_tlc_timer_isr+0x158>
			current_state3 += 2;
  80076c:	d0a76117 	ldw	r2,-25212(gp)
  800770:	10800084 	addi	r2,r2,2
  800774:	d0a76115 	stw	r2,-25212(gp)
  800778:	00002306 	br	800808 <configurable_tlc_timer_isr+0x1e4>
		//we are at state RED-GREEN, too late to handle EW pedestrians so skip past PED state
		else if (current_state3 == rg_3)
  80077c:	d0a76117 	ldw	r2,-25212(gp)
  800780:	10800158 	cmpnei	r2,r2,5
  800784:	1000041e 	bne	r2,zero,800798 <configurable_tlc_timer_isr+0x174>
			current_state3 += 2;
  800788:	d0a76117 	ldw	r2,-25212(gp)
  80078c:	10800084 	addi	r2,r2,2
  800790:	d0a76115 	stw	r2,-25212(gp)
  800794:	00001c06 	br	800808 <configurable_tlc_timer_isr+0x1e4>
		//we are at state GREEN-RED, cannot handle EW pedestrians here so skip past PED state
		else if (current_state3 == gr_3)
  800798:	d0a76117 	ldw	r2,-25212(gp)
  80079c:	10800058 	cmpnei	r2,r2,1
  8007a0:	1000041e 	bne	r2,zero,8007b4 <configurable_tlc_timer_isr+0x190>
			current_state3 += 2;
  8007a4:	d0a76117 	ldw	r2,-25212(gp)
  8007a8:	10800084 	addi	r2,r2,2
  8007ac:	d0a76115 	stw	r2,-25212(gp)
  8007b0:	00001506 	br	800808 <configurable_tlc_timer_isr+0x1e4>
		else
			current_state3++;
  8007b4:	d0a76117 	ldw	r2,-25212(gp)
  8007b8:	10800044 	addi	r2,r2,1
  8007bc:	d0a76115 	stw	r2,-25212(gp)
  8007c0:	00001106 	br	800808 <configurable_tlc_timer_isr+0x1e4>
	}
	//if no PED interrupt flags, skip past PED states from GREEN-RED and RED-GREEN
	else if (current_state3 == gr_3)
  8007c4:	d0a76117 	ldw	r2,-25212(gp)
  8007c8:	10800058 	cmpnei	r2,r2,1
  8007cc:	1000041e 	bne	r2,zero,8007e0 <configurable_tlc_timer_isr+0x1bc>
		current_state3 += 2;
  8007d0:	d0a76117 	ldw	r2,-25212(gp)
  8007d4:	10800084 	addi	r2,r2,2
  8007d8:	d0a76115 	stw	r2,-25212(gp)
  8007dc:	00000a06 	br	800808 <configurable_tlc_timer_isr+0x1e4>
	else if (current_state3 == rg_3)
  8007e0:	d0a76117 	ldw	r2,-25212(gp)
  8007e4:	10800158 	cmpnei	r2,r2,5
  8007e8:	1000041e 	bne	r2,zero,8007fc <configurable_tlc_timer_isr+0x1d8>
		current_state3 += 2;
  8007ec:	d0a76117 	ldw	r2,-25212(gp)
  8007f0:	10800084 	addi	r2,r2,2
  8007f4:	d0a76115 	stw	r2,-25212(gp)
  8007f8:	00000306 	br	800808 <configurable_tlc_timer_isr+0x1e4>
	else
		current_state3++; //move to the next state if no
  8007fc:	d0a76117 	ldw	r2,-25212(gp)
  800800:	10800044 	addi	r2,r2,1
  800804:	d0a76115 	stw	r2,-25212(gp)

	//reset the NS/EW pedestrian button interrupt flag when we have changed state (NS/EWHandled = 1)
	if (previous_state3 == grp1_3) {
  800808:	d0a76217 	ldw	r2,-25208(gp)
  80080c:	10800098 	cmpnei	r2,r2,2
  800810:	1000061e 	bne	r2,zero,80082c <configurable_tlc_timer_isr+0x208>
		pedNS = 0;
  800814:	d0276515 	stw	zero,-25196(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0<<0); // Turns RED NS LED off
  800818:	0007883a 	mov	r3,zero
  80081c:	00804434 	movhi	r2,272
  800820:	10842004 	addi	r2,r2,4224
  800824:	10c00035 	stwio	r3,0(r2)
  800828:	00000806 	br	80084c <configurable_tlc_timer_isr+0x228>
	}
	else if (previous_state3 == rgp2_3) {
  80082c:	d0a76217 	ldw	r2,-25208(gp)
  800830:	10800198 	cmpnei	r2,r2,6
  800834:	1000051e 	bne	r2,zero,80084c <configurable_tlc_timer_isr+0x228>
		pedEW = 0;
  800838:	d0276615 	stw	zero,-25192(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0<<1); // Turns RED EW LED off
  80083c:	0007883a 	mov	r3,zero
  800840:	00804434 	movhi	r2,272
  800844:	10842004 	addi	r2,r2,4224
  800848:	10c00035 	stwio	r3,0(r2)
	}

	if (current_state3 == buffer_3) //if at final state, loop back to initial state using buffer state
  80084c:	d0a76117 	ldw	r2,-25212(gp)
  800850:	10800218 	cmpnei	r2,r2,8
  800854:	1000011e 	bne	r2,zero,80085c <configurable_tlc_timer_isr+0x238>
		current_state3 = rr1_3;
  800858:	d0276115 	stw	zero,-25212(gp)
	printf("current state config_timer %d\n", current_state3);
  80085c:	d0a76117 	ldw	r2,-25212(gp)
  800860:	100b883a 	mov	r5,r2
  800864:	01002074 	movhi	r4,129
  800868:	210f1804 	addi	r4,r4,15456
  80086c:	08039480 	call	803948 <printf>

	timer_has_started = 0; //reset timer_started flag
  800870:	d0275a15 	stw	zero,-25240(gp)
return 0;
  800874:	0005883a 	mov	r2,zero
}
  800878:	e037883a 	mov	sp,fp
  80087c:	dfc00117 	ldw	ra,4(sp)
  800880:	df000017 	ldw	fp,0(sp)
  800884:	dec00204 	addi	sp,sp,8
  800888:	f800283a 	ret

0080088c <camera_tlc_timer_isr>:

//timer ISR (and system state transition logic) for configurable timer
alt_u32 camera_tlc_timer_isr(void* context){
  80088c:	defffd04 	addi	sp,sp,-12
  800890:	dfc00215 	stw	ra,8(sp)
  800894:	df000115 	stw	fp,4(sp)
  800898:	df000104 	addi	fp,sp,4
  80089c:	e13fff15 	stw	r4,-4(fp)
	//enum simple_state *something = (enum simple_state*) context;

	//if there is a pending mode request and we are in a safe state, do not run any output logic and kill the timer
	if (mode_request != current_mode){
  8008a0:	d0e75c17 	ldw	r3,-25232(gp)
  8008a4:	d0a00017 	ldw	r2,-32768(gp)
  8008a8:	18800726 	beq	r3,r2,8008c8 <camera_tlc_timer_isr+0x3c>
		if ((current_state4 == rr1_4) || (current_state4 == rr2_4))
  8008ac:	d0a76317 	ldw	r2,-25204(gp)
  8008b0:	10000326 	beq	r2,zero,8008c0 <camera_tlc_timer_isr+0x34>
  8008b4:	d0a76317 	ldw	r2,-25204(gp)
  8008b8:	10800118 	cmpnei	r2,r2,4
  8008bc:	1000021e 	bne	r2,zero,8008c8 <camera_tlc_timer_isr+0x3c>
			return 0;
  8008c0:	0005883a 	mov	r2,zero
  8008c4:	00008606 	br	800ae0 <camera_tlc_timer_isr+0x254>
	}

	previous_state4 = current_state4; //save previous state for output transition logic
  8008c8:	d0a76317 	ldw	r2,-25204(gp)
  8008cc:	d0a76415 	stw	r2,-25200(gp)
	if ((pedEW) && (pedNS)){
  8008d0:	d0a76617 	ldw	r2,-25192(gp)
  8008d4:	10002026 	beq	r2,zero,800958 <camera_tlc_timer_isr+0xcc>
  8008d8:	d0a76517 	ldw	r2,-25196(gp)
  8008dc:	10001e26 	beq	r2,zero,800958 <camera_tlc_timer_isr+0xcc>
		//handle pedestrians at either of the RED-RED states because
		if ((current_state4 == rr1_4) | (current_state4 == rr2_4))
  8008e0:	d0a76317 	ldw	r2,-25204(gp)
  8008e4:	1005003a 	cmpeq	r2,r2,zero
  8008e8:	1007883a 	mov	r3,r2
  8008ec:	d0a76317 	ldw	r2,-25204(gp)
  8008f0:	10800120 	cmpeqi	r2,r2,4
  8008f4:	1884b03a 	or	r2,r3,r2
  8008f8:	10803fcc 	andi	r2,r2,255
  8008fc:	10000426 	beq	r2,zero,800910 <camera_tlc_timer_isr+0x84>
			current_state4 += 2;
  800900:	d0a76317 	ldw	r2,-25204(gp)
  800904:	10800084 	addi	r2,r2,2
  800908:	d0a76315 	stw	r2,-25204(gp)
	}

	previous_state4 = current_state4; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state4 == rr1_4) | (current_state4 == rr2_4))
  80090c:	00005806 	br	800a70 <camera_tlc_timer_isr+0x1e4>
			current_state4 += 2;
		//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
		else if (current_state4 == gr_4)
  800910:	d0a76317 	ldw	r2,-25204(gp)
  800914:	10800058 	cmpnei	r2,r2,1
  800918:	1000041e 	bne	r2,zero,80092c <camera_tlc_timer_isr+0xa0>
			current_state4 += 2;
  80091c:	d0a76317 	ldw	r2,-25204(gp)
  800920:	10800084 	addi	r2,r2,2
  800924:	d0a76315 	stw	r2,-25204(gp)
	}

	previous_state4 = current_state4; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state4 == rr1_4) | (current_state4 == rr2_4))
  800928:	00005106 	br	800a70 <camera_tlc_timer_isr+0x1e4>
			current_state4 += 2;
		//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
		else if (current_state4 == gr_4)
			current_state4 += 2;
		//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
		else if (current_state4 == rg_4)
  80092c:	d0a76317 	ldw	r2,-25204(gp)
  800930:	10800158 	cmpnei	r2,r2,5
  800934:	1000041e 	bne	r2,zero,800948 <camera_tlc_timer_isr+0xbc>
			current_state4 += 2;
  800938:	d0a76317 	ldw	r2,-25204(gp)
  80093c:	10800084 	addi	r2,r2,2
  800940:	d0a76315 	stw	r2,-25204(gp)
	}

	previous_state4 = current_state4; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state4 == rr1_4) | (current_state4 == rr2_4))
  800944:	00004a06 	br	800a70 <camera_tlc_timer_isr+0x1e4>
			current_state4 += 2;
		//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
		else if (current_state4 == rg_4)
			current_state4 += 2;
		else
			current_state4++;
  800948:	d0a76317 	ldw	r2,-25204(gp)
  80094c:	10800044 	addi	r2,r2,1
  800950:	d0a76315 	stw	r2,-25204(gp)
	}

	previous_state4 = current_state4; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state4 == rr1_4) | (current_state4 == rr2_4))
  800954:	00004606 	br	800a70 <camera_tlc_timer_isr+0x1e4>
		else if (current_state4 == rg_4)
			current_state4 += 2;
		else
			current_state4++;
	}
	else if (pedNS){
  800958:	d0a76517 	ldw	r2,-25196(gp)
  80095c:	10001826 	beq	r2,zero,8009c0 <camera_tlc_timer_isr+0x134>
		//we are at state RED-RED (1), handle NS pedestrians
		if (current_state4 == rr1_4)
  800960:	d0a76317 	ldw	r2,-25204(gp)
  800964:	1000041e 	bne	r2,zero,800978 <camera_tlc_timer_isr+0xec>
			current_state4 += 2;
  800968:	d0a76317 	ldw	r2,-25204(gp)
  80096c:	10800084 	addi	r2,r2,2
  800970:	d0a76315 	stw	r2,-25204(gp)
  800974:	00003e06 	br	800a70 <camera_tlc_timer_isr+0x1e4>
		//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
		else if (current_state4 == gr_4)
  800978:	d0a76317 	ldw	r2,-25204(gp)
  80097c:	10800058 	cmpnei	r2,r2,1
  800980:	1000041e 	bne	r2,zero,800994 <camera_tlc_timer_isr+0x108>
			current_state4 += 2;
  800984:	d0a76317 	ldw	r2,-25204(gp)
  800988:	10800084 	addi	r2,r2,2
  80098c:	d0a76315 	stw	r2,-25204(gp)
  800990:	00003706 	br	800a70 <camera_tlc_timer_isr+0x1e4>
		//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
		else if (current_state4 == rg_4)
  800994:	d0a76317 	ldw	r2,-25204(gp)
  800998:	10800158 	cmpnei	r2,r2,5
  80099c:	1000041e 	bne	r2,zero,8009b0 <camera_tlc_timer_isr+0x124>
			current_state4 += 2;
  8009a0:	d0a76317 	ldw	r2,-25204(gp)
  8009a4:	10800084 	addi	r2,r2,2
  8009a8:	d0a76315 	stw	r2,-25204(gp)
  8009ac:	00003006 	br	800a70 <camera_tlc_timer_isr+0x1e4>
		else
			current_state4++;
  8009b0:	d0a76317 	ldw	r2,-25204(gp)
  8009b4:	10800044 	addi	r2,r2,1
  8009b8:	d0a76315 	stw	r2,-25204(gp)
  8009bc:	00002c06 	br	800a70 <camera_tlc_timer_isr+0x1e4>
	}
	else if (pedEW){
  8009c0:	d0a76617 	ldw	r2,-25192(gp)
  8009c4:	10001926 	beq	r2,zero,800a2c <camera_tlc_timer_isr+0x1a0>
		//we are at state RED-RED (2), handle EW pedestrians
		if (current_state4 == rr2_4)
  8009c8:	d0a76317 	ldw	r2,-25204(gp)
  8009cc:	10800118 	cmpnei	r2,r2,4
  8009d0:	1000041e 	bne	r2,zero,8009e4 <camera_tlc_timer_isr+0x158>
			current_state4 += 2;
  8009d4:	d0a76317 	ldw	r2,-25204(gp)
  8009d8:	10800084 	addi	r2,r2,2
  8009dc:	d0a76315 	stw	r2,-25204(gp)
  8009e0:	00002306 	br	800a70 <camera_tlc_timer_isr+0x1e4>
		//we are at state RED-GREEN, too late to handle EW pedestrians so skip past PED state
		else if (current_state4 == rg_4)
  8009e4:	d0a76317 	ldw	r2,-25204(gp)
  8009e8:	10800158 	cmpnei	r2,r2,5
  8009ec:	1000041e 	bne	r2,zero,800a00 <camera_tlc_timer_isr+0x174>
			current_state4 += 2;
  8009f0:	d0a76317 	ldw	r2,-25204(gp)
  8009f4:	10800084 	addi	r2,r2,2
  8009f8:	d0a76315 	stw	r2,-25204(gp)
  8009fc:	00001c06 	br	800a70 <camera_tlc_timer_isr+0x1e4>
		//we are at state GREEN-RED, cannot handle EW pedestrians here so skip past PED state
		else if (current_state4 == gr_4)
  800a00:	d0a76317 	ldw	r2,-25204(gp)
  800a04:	10800058 	cmpnei	r2,r2,1
  800a08:	1000041e 	bne	r2,zero,800a1c <camera_tlc_timer_isr+0x190>
			current_state4 += 2;
  800a0c:	d0a76317 	ldw	r2,-25204(gp)
  800a10:	10800084 	addi	r2,r2,2
  800a14:	d0a76315 	stw	r2,-25204(gp)
  800a18:	00001506 	br	800a70 <camera_tlc_timer_isr+0x1e4>
		else
			current_state4++;
  800a1c:	d0a76317 	ldw	r2,-25204(gp)
  800a20:	10800044 	addi	r2,r2,1
  800a24:	d0a76315 	stw	r2,-25204(gp)
  800a28:	00001106 	br	800a70 <camera_tlc_timer_isr+0x1e4>
	}
	//if no PED interrupt flags, skip past PED states from GREEN-RED and RED-GREEN
	else if (current_state4 == gr_4)
  800a2c:	d0a76317 	ldw	r2,-25204(gp)
  800a30:	10800058 	cmpnei	r2,r2,1
  800a34:	1000041e 	bne	r2,zero,800a48 <camera_tlc_timer_isr+0x1bc>
		current_state4 += 2;
  800a38:	d0a76317 	ldw	r2,-25204(gp)
  800a3c:	10800084 	addi	r2,r2,2
  800a40:	d0a76315 	stw	r2,-25204(gp)
  800a44:	00000a06 	br	800a70 <camera_tlc_timer_isr+0x1e4>
	else if (current_state4 == rg_4)
  800a48:	d0a76317 	ldw	r2,-25204(gp)
  800a4c:	10800158 	cmpnei	r2,r2,5
  800a50:	1000041e 	bne	r2,zero,800a64 <camera_tlc_timer_isr+0x1d8>
		current_state4 += 2;
  800a54:	d0a76317 	ldw	r2,-25204(gp)
  800a58:	10800084 	addi	r2,r2,2
  800a5c:	d0a76315 	stw	r2,-25204(gp)
  800a60:	00000306 	br	800a70 <camera_tlc_timer_isr+0x1e4>
	else
		current_state4++; //move to the next state if no
  800a64:	d0a76317 	ldw	r2,-25204(gp)
  800a68:	10800044 	addi	r2,r2,1
  800a6c:	d0a76315 	stw	r2,-25204(gp)

	//reset the NS/EW pedestrian button interrupt flag when we have changed state (NS/EWHandled = 1)
	if (previous_state4 == grp1_4) {
  800a70:	d0a76417 	ldw	r2,-25200(gp)
  800a74:	10800098 	cmpnei	r2,r2,2
  800a78:	1000061e 	bne	r2,zero,800a94 <camera_tlc_timer_isr+0x208>
		pedNS = 0;
  800a7c:	d0276515 	stw	zero,-25196(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0<<0); // Turns RED NS LED off
  800a80:	0007883a 	mov	r3,zero
  800a84:	00804434 	movhi	r2,272
  800a88:	10842004 	addi	r2,r2,4224
  800a8c:	10c00035 	stwio	r3,0(r2)
  800a90:	00000806 	br	800ab4 <camera_tlc_timer_isr+0x228>
	}
	else if (previous_state4 == rgp2_4) {
  800a94:	d0a76417 	ldw	r2,-25200(gp)
  800a98:	10800198 	cmpnei	r2,r2,6
  800a9c:	1000051e 	bne	r2,zero,800ab4 <camera_tlc_timer_isr+0x228>
		pedEW = 0;
  800aa0:	d0276615 	stw	zero,-25192(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0<<1); // Turns RED EW LED off
  800aa4:	0007883a 	mov	r3,zero
  800aa8:	00804434 	movhi	r2,272
  800aac:	10842004 	addi	r2,r2,4224
  800ab0:	10c00035 	stwio	r3,0(r2)
	}

	if (current_state4 == buffer_4) //if at final state, loop back to initial state using buffer state
  800ab4:	d0a76317 	ldw	r2,-25204(gp)
  800ab8:	10800218 	cmpnei	r2,r2,8
  800abc:	1000011e 	bne	r2,zero,800ac4 <camera_tlc_timer_isr+0x238>
		current_state4 = rr1_4;
  800ac0:	d0276315 	stw	zero,-25204(gp)
	printf("current state camera_timer %d\n", current_state4);
  800ac4:	d0a76317 	ldw	r2,-25204(gp)
  800ac8:	100b883a 	mov	r5,r2
  800acc:	01002074 	movhi	r4,129
  800ad0:	210f2004 	addi	r4,r4,15488
  800ad4:	08039480 	call	803948 <printf>

	timer_has_started = 0; //reset timer_started flag
  800ad8:	d0275a15 	stw	zero,-25240(gp)
return 0;
  800adc:	0005883a 	mov	r2,zero
}
  800ae0:	e037883a 	mov	sp,fp
  800ae4:	dfc00117 	ldw	ra,4(sp)
  800ae8:	df000017 	ldw	fp,0(sp)
  800aec:	dec00204 	addi	sp,sp,8
  800af0:	f800283a 	ret

00800af4 <camera_timer_isr>:

alt_u32 camera_timer_isr(void* context){
  800af4:	defffd04 	addi	sp,sp,-12
  800af8:	dfc00215 	stw	ra,8(sp)
  800afc:	df000115 	stw	fp,4(sp)
  800b00:	df000104 	addi	fp,sp,4
  800b04:	e13fff15 	stw	r4,-4(fp)
	fprintf(uart,"Snapshot taken\r\n");
  800b08:	d0a76a17 	ldw	r2,-25176(gp)
  800b0c:	100f883a 	mov	r7,r2
  800b10:	01800404 	movi	r6,16
  800b14:	01400044 	movi	r5,1
  800b18:	01002074 	movhi	r4,129
  800b1c:	210f2804 	addi	r4,r4,15520
  800b20:	0802d6c0 	call	802d6c <fwrite>
	camera_timer_has_started = 0;
  800b24:	d0275b15 	stw	zero,-25236(gp)
	return 0;
  800b28:	0005883a 	mov	r2,zero
}
  800b2c:	e037883a 	mov	sp,fp
  800b30:	dfc00117 	ldw	ra,4(sp)
  800b34:	df000017 	ldw	fp,0(sp)
  800b38:	dec00204 	addi	sp,sp,8
  800b3c:	f800283a 	ret

00800b40 <vehicle_timer_isr>:

alt_u32 vehicle_timer_isr(void* context){
  800b40:	defffe04 	addi	sp,sp,-8
  800b44:	df000115 	stw	fp,4(sp)
  800b48:	df000104 	addi	fp,sp,4
  800b4c:	e13fff15 	stw	r4,-4(fp)
	count++;
  800b50:	d0a76817 	ldw	r2,-25184(gp)
  800b54:	10800044 	addi	r2,r2,1
  800b58:	d0a76815 	stw	r2,-25184(gp)
	return 1;
  800b5c:	00800044 	movi	r2,1
}
  800b60:	e037883a 	mov	sp,fp
  800b64:	df000017 	ldw	fp,0(sp)
  800b68:	dec00104 	addi	sp,sp,4
  800b6c:	f800283a 	ret

00800b70 <button_interrupt>:

//button interrupt function for pedestrian buttons and
void button_interrupt(void* context, alt_u32 id) {
  800b70:	defff904 	addi	sp,sp,-28
  800b74:	dfc00615 	stw	ra,24(sp)
  800b78:	df000515 	stw	fp,20(sp)
  800b7c:	df000504 	addi	fp,sp,20
  800b80:	e13ffe15 	stw	r4,-8(fp)
  800b84:	e17fff15 	stw	r5,-4(fp)
	//read edge capture register and button value
	unsigned int edgeCapture = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
  800b88:	00804434 	movhi	r2,272
  800b8c:	10842b04 	addi	r2,r2,4268
  800b90:	10800037 	ldwio	r2,0(r2)
  800b94:	e0bffb15 	stw	r2,-20(fp)
	unsigned int uiButtonsValue = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
  800b98:	00804434 	movhi	r2,272
  800b9c:	10842804 	addi	r2,r2,4256
  800ba0:	10800037 	ldwio	r2,0(r2)
  800ba4:	e0bffc15 	stw	r2,-16(fp)
	void* timerContext = 0;
  800ba8:	e03ffd15 	stw	zero,-12(fp)

	//only allows the pedestrian inputs in mode 2,3 and 4
	if ((!(uiButtonsValue & 1<<0)) && !((current_mode == 1) || (current_mode == 0)))
  800bac:	e0bffc17 	ldw	r2,-16(fp)
  800bb0:	1080004c 	andi	r2,r2,1
  800bb4:	1000071e 	bne	r2,zero,800bd4 <button_interrupt+0x64>
  800bb8:	d0a00017 	ldw	r2,-32768(gp)
  800bbc:	10800060 	cmpeqi	r2,r2,1
  800bc0:	1000041e 	bne	r2,zero,800bd4 <button_interrupt+0x64>
  800bc4:	d0a00017 	ldw	r2,-32768(gp)
  800bc8:	10000226 	beq	r2,zero,800bd4 <button_interrupt+0x64>
		pedNS = 1;
  800bcc:	00800044 	movi	r2,1
  800bd0:	d0a76515 	stw	r2,-25196(gp)
	if ((!(uiButtonsValue & 1<<1)) && !((current_mode == 1) || (current_mode == 0)))
  800bd4:	e0bffc17 	ldw	r2,-16(fp)
  800bd8:	1080008c 	andi	r2,r2,2
  800bdc:	1000071e 	bne	r2,zero,800bfc <button_interrupt+0x8c>
  800be0:	d0a00017 	ldw	r2,-32768(gp)
  800be4:	10800060 	cmpeqi	r2,r2,1
  800be8:	1000041e 	bne	r2,zero,800bfc <button_interrupt+0x8c>
  800bec:	d0a00017 	ldw	r2,-32768(gp)
  800bf0:	10000226 	beq	r2,zero,800bfc <button_interrupt+0x8c>
		pedEW = 1;
  800bf4:	00800044 	movi	r2,1
  800bf8:	d0a76615 	stw	r2,-25192(gp)
	//vehicle crossing interrupt
	if (current_mode == 4){
  800bfc:	d0a00017 	ldw	r2,-32768(gp)
  800c00:	10800118 	cmpnei	r2,r2,4
  800c04:	1000521e 	bne	r2,zero,800d50 <button_interrupt+0x1e0>
		if ((edgeCapture & 1<<2)) {
  800c08:	e0bffb17 	ldw	r2,-20(fp)
  800c0c:	1080010c 	andi	r2,r2,4
  800c10:	10004f26 	beq	r2,zero,800d50 <button_interrupt+0x1e0>
			++vehicle_cross;
  800c14:	d0a76717 	ldw	r2,-25188(gp)
  800c18:	10800044 	addi	r2,r2,1
  800c1c:	d0a76715 	stw	r2,-25188(gp)
			if (vehicle_cross % 2){
  800c20:	d0a76717 	ldw	r2,-25188(gp)
  800c24:	1080004c 	andi	r2,r2,1
  800c28:	10003426 	beq	r2,zero,800cfc <button_interrupt+0x18c>
				alt_alarm_start(&timer_vehicle,1,vehicle_timer_isr,timerContext);
  800c2c:	e1fffd17 	ldw	r7,-12(fp)
  800c30:	01802034 	movhi	r6,128
  800c34:	3182d004 	addi	r6,r6,2880
  800c38:	01400044 	movi	r5,1
  800c3c:	01002074 	movhi	r4,129
  800c40:	211f7104 	addi	r4,r4,32196
  800c44:	080f9800 	call	80f980 <alt_alarm_start>
				if ((current_state4 == yr_4) || (current_state4 == ry_4)){
  800c48:	d0a76317 	ldw	r2,-25204(gp)
  800c4c:	108000e0 	cmpeqi	r2,r2,3
  800c50:	1000031e 	bne	r2,zero,800c60 <button_interrupt+0xf0>
  800c54:	d0a76317 	ldw	r2,-25204(gp)
  800c58:	108001d8 	cmpnei	r2,r2,7
  800c5c:	1000131e 	bne	r2,zero,800cac <button_interrupt+0x13c>
					//prevent crashes by checking if timer has already started
					if (!camera_timer_has_started){
  800c60:	d0a75b17 	ldw	r2,-25236(gp)
  800c64:	10003a1e 	bne	r2,zero,800d50 <button_interrupt+0x1e0>
						fprintf(uart,"Camera activated\r\n");
  800c68:	d0a76a17 	ldw	r2,-25176(gp)
  800c6c:	100f883a 	mov	r7,r2
  800c70:	01800484 	movi	r6,18
  800c74:	01400044 	movi	r5,1
  800c78:	01002074 	movhi	r4,129
  800c7c:	210f2d04 	addi	r4,r4,15540
  800c80:	0802d6c0 	call	802d6c <fwrite>
						camera_timer_has_started = 1;
  800c84:	00800044 	movi	r2,1
  800c88:	d0a75b15 	stw	r2,-25236(gp)
						alt_alarm_start(&timer_camera,camera_timeout,camera_timer_isr,timerContext);
  800c8c:	e1fffd17 	ldw	r7,-12(fp)
  800c90:	01802034 	movhi	r6,128
  800c94:	3182bd04 	addi	r6,r6,2804
  800c98:	0141f404 	movi	r5,2000
  800c9c:	01002074 	movhi	r4,129
  800ca0:	211f7704 	addi	r4,r4,32220
  800ca4:	080f9800 	call	80f980 <alt_alarm_start>
			++vehicle_cross;
			if (vehicle_cross % 2){
				alt_alarm_start(&timer_vehicle,1,vehicle_timer_isr,timerContext);
				if ((current_state4 == yr_4) || (current_state4 == ry_4)){
					//prevent crashes by checking if timer has already started
					if (!camera_timer_has_started){
  800ca8:	00002906 	br	800d50 <button_interrupt+0x1e0>
						fprintf(uart,"Camera activated\r\n");
						camera_timer_has_started = 1;
						alt_alarm_start(&timer_camera,camera_timeout,camera_timer_isr,timerContext);
					}
				}
				else if ((current_state4 == rr1_4) || (current_state4 == rr2_4)){
  800cac:	d0a76317 	ldw	r2,-25204(gp)
  800cb0:	10000326 	beq	r2,zero,800cc0 <button_interrupt+0x150>
  800cb4:	d0a76317 	ldw	r2,-25204(gp)
  800cb8:	10800118 	cmpnei	r2,r2,4
  800cbc:	1000241e 	bne	r2,zero,800d50 <button_interrupt+0x1e0>
					fprintf(uart,"Camera activated\r\n");
  800cc0:	d0a76a17 	ldw	r2,-25176(gp)
  800cc4:	100f883a 	mov	r7,r2
  800cc8:	01800484 	movi	r6,18
  800ccc:	01400044 	movi	r5,1
  800cd0:	01002074 	movhi	r4,129
  800cd4:	210f2d04 	addi	r4,r4,15540
  800cd8:	0802d6c0 	call	802d6c <fwrite>
					fprintf(uart,"Snapshot taken\r\n");
  800cdc:	d0a76a17 	ldw	r2,-25176(gp)
  800ce0:	100f883a 	mov	r7,r2
  800ce4:	01800404 	movi	r6,16
  800ce8:	01400044 	movi	r5,1
  800cec:	01002074 	movhi	r4,129
  800cf0:	210f2804 	addi	r4,r4,15520
  800cf4:	0802d6c0 	call	802d6c <fwrite>
  800cf8:	00001506 	br	800d50 <button_interrupt+0x1e0>
				}
			}
			else{
				alt_alarm_stop(&timer_camera);
  800cfc:	01002074 	movhi	r4,129
  800d00:	211f7704 	addi	r4,r4,32220
  800d04:	08106900 	call	810690 <alt_alarm_stop>
				alt_alarm_stop(&timer_vehicle);
  800d08:	01002074 	movhi	r4,129
  800d0c:	211f7104 	addi	r4,r4,32196
  800d10:	08106900 	call	810690 <alt_alarm_stop>
				fprintf(uart,"Vehicle left\r\n");
  800d14:	d0a76a17 	ldw	r2,-25176(gp)
  800d18:	100f883a 	mov	r7,r2
  800d1c:	01800384 	movi	r6,14
  800d20:	01400044 	movi	r5,1
  800d24:	01002074 	movhi	r4,129
  800d28:	210f3204 	addi	r4,r4,15560
  800d2c:	0802d6c0 	call	802d6c <fwrite>
				fprintf(uart,"Vehicle was in the intersection for %d ms.\r\n",count);
  800d30:	d0a76a17 	ldw	r2,-25176(gp)
  800d34:	d0e76817 	ldw	r3,-25184(gp)
  800d38:	180d883a 	mov	r6,r3
  800d3c:	01402074 	movhi	r5,129
  800d40:	294f3604 	addi	r5,r5,15576
  800d44:	1009883a 	mov	r4,r2
  800d48:	08026180 	call	802618 <fprintf>
				count = 0;
  800d4c:	d0276815 	stw	zero,-25184(gp)
			}
		}
	}

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
  800d50:	0007883a 	mov	r3,zero
  800d54:	00804434 	movhi	r2,272
  800d58:	10842b04 	addi	r2,r2,4268
  800d5c:	10c00035 	stwio	r3,0(r2)
}
  800d60:	0001883a 	nop
  800d64:	e037883a 	mov	sp,fp
  800d68:	dfc00117 	ldw	ra,4(sp)
  800d6c:	df000017 	ldw	fp,0(sp)
  800d70:	dec00204 	addi	sp,sp,8
  800d74:	f800283a 	ret

00800d78 <lcd_set_mode>:

//LCD writing function, pass in the current mode
int lcd_set_mode(int mode){
  800d78:	defffd04 	addi	sp,sp,-12
  800d7c:	dfc00215 	stw	ra,8(sp)
  800d80:	df000115 	stw	fp,4(sp)
  800d84:	df000104 	addi	fp,sp,4
  800d88:	e13fff15 	stw	r4,-4(fp)
	if (mode != mode_display) {
  800d8c:	d0a00117 	ldw	r2,-32764(gp)
  800d90:	e0ffff17 	ldw	r3,-4(fp)
  800d94:	18801226 	beq	r3,r2,800de0 <lcd_set_mode+0x68>
		if(lcd != NULL){
  800d98:	d0a76917 	ldw	r2,-25180(gp)
  800d9c:	10001026 	beq	r2,zero,800de0 <lcd_set_mode+0x68>
			#define ESC 27
			#define CLEAR_LCD_STRING "[2J"
			fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  800da0:	d0a76917 	ldw	r2,-25180(gp)
  800da4:	01c02074 	movhi	r7,129
  800da8:	39cf4204 	addi	r7,r7,15624
  800dac:	018006c4 	movi	r6,27
  800db0:	01402074 	movhi	r5,129
  800db4:	294f4304 	addi	r5,r5,15628
  800db8:	1009883a 	mov	r4,r2
  800dbc:	08026180 	call	802618 <fprintf>
			fprintf(lcd, "CURRENT MODE: %d\n", mode);
  800dc0:	d0a76917 	ldw	r2,-25180(gp)
  800dc4:	e1bfff17 	ldw	r6,-4(fp)
  800dc8:	01402074 	movhi	r5,129
  800dcc:	294f4504 	addi	r5,r5,15636
  800dd0:	1009883a 	mov	r4,r2
  800dd4:	08026180 	call	802618 <fprintf>
			mode_display = mode; //set mode display state to prevent LCD flickering
  800dd8:	e0bfff17 	ldw	r2,-4(fp)
  800ddc:	d0a00115 	stw	r2,-32764(gp)
		}
	}
	return 0;
  800de0:	0005883a 	mov	r2,zero
}
  800de4:	e037883a 	mov	sp,fp
  800de8:	dfc00117 	ldw	ra,4(sp)
  800dec:	df000017 	ldw	fp,0(sp)
  800df0:	dec00204 	addi	sp,sp,8
  800df4:	f800283a 	ret

00800df8 <simple_tlc>:

// Mode 1
// Simple controller with automatic lights
int simple_tlc(){
  800df8:	defffd04 	addi	sp,sp,-12
  800dfc:	dfc00215 	stw	ra,8(sp)
  800e00:	df000115 	stw	fp,4(sp)
  800e04:	df000104 	addi	fp,sp,4
	void* timerContext = 0;
  800e08:	e03fff15 	stw	zero,-4(fp)
	//loop through all states, starting timer on current state and setting outputs
	if (current_state1 == rr1_1){
  800e0c:	d0a75d17 	ldw	r2,-25228(gp)
  800e10:	1000101e 	bne	r2,zero,800e54 <simple_tlc+0x5c>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100100); //turn RED-RED on
  800e14:	00c00904 	movi	r3,36
  800e18:	00804434 	movhi	r2,272
  800e1c:	10841c04 	addi	r2,r2,4208
  800e20:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800e24:	d0a75a17 	ldw	r2,-25240(gp)
  800e28:	1000681e 	bne	r2,zero,800fcc <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, rrrr, simple_tlc_timer_isr, timerContext);
  800e2c:	e1ffff17 	ldw	r7,-4(fp)
  800e30:	01802034 	movhi	r6,128
  800e34:	3180c404 	addi	r6,r6,784
  800e38:	01407d04 	movi	r5,500
  800e3c:	01002074 	movhi	r4,129
  800e40:	211f6b04 	addi	r4,r4,32172
  800e44:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  800e48:	00800044 	movi	r2,1
  800e4c:	d0a75a15 	stw	r2,-25240(gp)
  800e50:	00005e06 	br	800fcc <simple_tlc+0x1d4>
		}
	}
	else if (current_state1 == gr_1){
  800e54:	d0a75d17 	ldw	r2,-25228(gp)
  800e58:	10800058 	cmpnei	r2,r2,1
  800e5c:	1000101e 	bne	r2,zero,800ea0 <simple_tlc+0xa8>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100001); //turn GREEN-RED on
  800e60:	00c00844 	movi	r3,33
  800e64:	00804434 	movhi	r2,272
  800e68:	10841c04 	addi	r2,r2,4208
  800e6c:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800e70:	d0a75a17 	ldw	r2,-25240(gp)
  800e74:	1000551e 	bne	r2,zero,800fcc <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, grrg, simple_tlc_timer_isr, timerContext);
  800e78:	e1ffff17 	ldw	r7,-4(fp)
  800e7c:	01802034 	movhi	r6,128
  800e80:	3180c404 	addi	r6,r6,784
  800e84:	0145dc04 	movi	r5,6000
  800e88:	01002074 	movhi	r4,129
  800e8c:	211f6b04 	addi	r4,r4,32172
  800e90:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  800e94:	00800044 	movi	r2,1
  800e98:	d0a75a15 	stw	r2,-25240(gp)
  800e9c:	00004b06 	br	800fcc <simple_tlc+0x1d4>
		}
	}
	else if (current_state1 == yr_1){
  800ea0:	d0a75d17 	ldw	r2,-25228(gp)
  800ea4:	10800098 	cmpnei	r2,r2,2
  800ea8:	1000101e 	bne	r2,zero,800eec <simple_tlc+0xf4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100010); //turn YELLOW-RED on
  800eac:	00c00884 	movi	r3,34
  800eb0:	00804434 	movhi	r2,272
  800eb4:	10841c04 	addi	r2,r2,4208
  800eb8:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800ebc:	d0a75a17 	ldw	r2,-25240(gp)
  800ec0:	1000421e 	bne	r2,zero,800fcc <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, yrry, simple_tlc_timer_isr, timerContext);
  800ec4:	e1ffff17 	ldw	r7,-4(fp)
  800ec8:	01802034 	movhi	r6,128
  800ecc:	3180c404 	addi	r6,r6,784
  800ed0:	0141f404 	movi	r5,2000
  800ed4:	01002074 	movhi	r4,129
  800ed8:	211f6b04 	addi	r4,r4,32172
  800edc:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  800ee0:	00800044 	movi	r2,1
  800ee4:	d0a75a15 	stw	r2,-25240(gp)
  800ee8:	00003806 	br	800fcc <simple_tlc+0x1d4>
		}
	}
	else if (current_state1 == rr2_1){
  800eec:	d0a75d17 	ldw	r2,-25228(gp)
  800ef0:	108000d8 	cmpnei	r2,r2,3
  800ef4:	1000101e 	bne	r2,zero,800f38 <simple_tlc+0x140>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100100); //turn RED-RED on
  800ef8:	00c00904 	movi	r3,36
  800efc:	00804434 	movhi	r2,272
  800f00:	10841c04 	addi	r2,r2,4208
  800f04:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800f08:	d0a75a17 	ldw	r2,-25240(gp)
  800f0c:	10002f1e 	bne	r2,zero,800fcc <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, rrrr, simple_tlc_timer_isr, timerContext);
  800f10:	e1ffff17 	ldw	r7,-4(fp)
  800f14:	01802034 	movhi	r6,128
  800f18:	3180c404 	addi	r6,r6,784
  800f1c:	01407d04 	movi	r5,500
  800f20:	01002074 	movhi	r4,129
  800f24:	211f6b04 	addi	r4,r4,32172
  800f28:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  800f2c:	00800044 	movi	r2,1
  800f30:	d0a75a15 	stw	r2,-25240(gp)
  800f34:	00002506 	br	800fcc <simple_tlc+0x1d4>
		}
	}
	else if (current_state1 == rg_1){
  800f38:	d0a75d17 	ldw	r2,-25228(gp)
  800f3c:	10800118 	cmpnei	r2,r2,4
  800f40:	1000101e 	bne	r2,zero,800f84 <simple_tlc+0x18c>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b001100); //turn RED-GREEN on
  800f44:	00c00304 	movi	r3,12
  800f48:	00804434 	movhi	r2,272
  800f4c:	10841c04 	addi	r2,r2,4208
  800f50:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800f54:	d0a75a17 	ldw	r2,-25240(gp)
  800f58:	10001c1e 	bne	r2,zero,800fcc <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, grrg, simple_tlc_timer_isr, timerContext);
  800f5c:	e1ffff17 	ldw	r7,-4(fp)
  800f60:	01802034 	movhi	r6,128
  800f64:	3180c404 	addi	r6,r6,784
  800f68:	0145dc04 	movi	r5,6000
  800f6c:	01002074 	movhi	r4,129
  800f70:	211f6b04 	addi	r4,r4,32172
  800f74:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  800f78:	00800044 	movi	r2,1
  800f7c:	d0a75a15 	stw	r2,-25240(gp)
  800f80:	00001206 	br	800fcc <simple_tlc+0x1d4>
		}
	}
	else if (current_state1 == ry_1){
  800f84:	d0a75d17 	ldw	r2,-25228(gp)
  800f88:	10800158 	cmpnei	r2,r2,5
  800f8c:	10000f1e 	bne	r2,zero,800fcc <simple_tlc+0x1d4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b010100); //turn RED-YELLOW on
  800f90:	00c00504 	movi	r3,20
  800f94:	00804434 	movhi	r2,272
  800f98:	10841c04 	addi	r2,r2,4208
  800f9c:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800fa0:	d0a75a17 	ldw	r2,-25240(gp)
  800fa4:	1000091e 	bne	r2,zero,800fcc <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, yrry, simple_tlc_timer_isr, timerContext);
  800fa8:	e1ffff17 	ldw	r7,-4(fp)
  800fac:	01802034 	movhi	r6,128
  800fb0:	3180c404 	addi	r6,r6,784
  800fb4:	0141f404 	movi	r5,2000
  800fb8:	01002074 	movhi	r4,129
  800fbc:	211f6b04 	addi	r4,r4,32172
  800fc0:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  800fc4:	00800044 	movi	r2,1
  800fc8:	d0a75a15 	stw	r2,-25240(gp)
		}
	}
	return 0;
  800fcc:	0005883a 	mov	r2,zero
}
  800fd0:	e037883a 	mov	sp,fp
  800fd4:	dfc00117 	ldw	ra,4(sp)
  800fd8:	df000017 	ldw	fp,0(sp)
  800fdc:	dec00204 	addi	sp,sp,8
  800fe0:	f800283a 	ret

00800fe4 <pedestrian_tlc>:

// Mode 2
// Allows Pedestrian Inputs
int pedestrian_tlc() {
  800fe4:	defffd04 	addi	sp,sp,-12
  800fe8:	dfc00215 	stw	ra,8(sp)
  800fec:	df000115 	stw	fp,4(sp)
  800ff0:	df000104 	addi	fp,sp,4
	void* timerContext = 0;
  800ff4:	e03fff15 	stw	zero,-4(fp)
	//loop through all states, starting timer on current state and setting outputs
	if (current_state2 == rr1_2){
  800ff8:	d0a75f17 	ldw	r2,-25220(gp)
  800ffc:	1000101e 	bne	r2,zero,801040 <pedestrian_tlc+0x5c>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
  801000:	00c00904 	movi	r3,36
  801004:	00804434 	movhi	r2,272
  801008:	10841c04 	addi	r2,r2,4208
  80100c:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801010:	d0a75a17 	ldw	r2,-25240(gp)
  801014:	10008e1e 	bne	r2,zero,801250 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, rrrr, pedestrian_tlc_timer_isr, timerContext);
  801018:	e1ffff17 	ldw	r7,-4(fp)
  80101c:	01802034 	movhi	r6,128
  801020:	3180e804 	addi	r6,r6,928
  801024:	01407d04 	movi	r5,500
  801028:	01002074 	movhi	r4,129
  80102c:	211f6b04 	addi	r4,r4,32172
  801030:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  801034:	00800044 	movi	r2,1
  801038:	d0a75a15 	stw	r2,-25240(gp)
  80103c:	00008406 	br	801250 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == gr_2){
  801040:	d0a75f17 	ldw	r2,-25220(gp)
  801044:	10800058 	cmpnei	r2,r2,1
  801048:	1000101e 	bne	r2,zero,80108c <pedestrian_tlc+0xa8>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100001); //turn GREEN-RED on
  80104c:	00c00844 	movi	r3,33
  801050:	00804434 	movhi	r2,272
  801054:	10841c04 	addi	r2,r2,4208
  801058:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  80105c:	d0a75a17 	ldw	r2,-25240(gp)
  801060:	10007b1e 	bne	r2,zero,801250 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, grrg, pedestrian_tlc_timer_isr, timerContext);
  801064:	e1ffff17 	ldw	r7,-4(fp)
  801068:	01802034 	movhi	r6,128
  80106c:	3180e804 	addi	r6,r6,928
  801070:	0145dc04 	movi	r5,6000
  801074:	01002074 	movhi	r4,129
  801078:	211f6b04 	addi	r4,r4,32172
  80107c:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  801080:	00800044 	movi	r2,1
  801084:	d0a75a15 	stw	r2,-25240(gp)
  801088:	00007106 	br	801250 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == grp1_2){
  80108c:	d0a75f17 	ldw	r2,-25220(gp)
  801090:	10800098 	cmpnei	r2,r2,2
  801094:	1000101e 	bne	r2,zero,8010d8 <pedestrian_tlc+0xf4>
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b01100001); //turn GREEN-RED and PEDNS on
  801098:	00c01844 	movi	r3,97
  80109c:	00804434 	movhi	r2,272
  8010a0:	10841c04 	addi	r2,r2,4208
  8010a4:	10c00035 	stwio	r3,0(r2)
			if (!(timer_has_started)){
  8010a8:	d0a75a17 	ldw	r2,-25240(gp)
  8010ac:	1000681e 	bne	r2,zero,801250 <pedestrian_tlc+0x26c>
				alt_alarm_start(&timer_simple, grrg, pedestrian_tlc_timer_isr, timerContext);
  8010b0:	e1ffff17 	ldw	r7,-4(fp)
  8010b4:	01802034 	movhi	r6,128
  8010b8:	3180e804 	addi	r6,r6,928
  8010bc:	0145dc04 	movi	r5,6000
  8010c0:	01002074 	movhi	r4,129
  8010c4:	211f6b04 	addi	r4,r4,32172
  8010c8:	080f9800 	call	80f980 <alt_alarm_start>
				timer_has_started = 1;
  8010cc:	00800044 	movi	r2,1
  8010d0:	d0a75a15 	stw	r2,-25240(gp)
  8010d4:	00005e06 	br	801250 <pedestrian_tlc+0x26c>
			}
	}
	else if (current_state2 == yr_2){
  8010d8:	d0a75f17 	ldw	r2,-25220(gp)
  8010dc:	108000d8 	cmpnei	r2,r2,3
  8010e0:	1000101e 	bne	r2,zero,801124 <pedestrian_tlc+0x140>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100010); //turn YELLOW-RED on
  8010e4:	00c00884 	movi	r3,34
  8010e8:	00804434 	movhi	r2,272
  8010ec:	10841c04 	addi	r2,r2,4208
  8010f0:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  8010f4:	d0a75a17 	ldw	r2,-25240(gp)
  8010f8:	1000551e 	bne	r2,zero,801250 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, yrry, pedestrian_tlc_timer_isr, timerContext);
  8010fc:	e1ffff17 	ldw	r7,-4(fp)
  801100:	01802034 	movhi	r6,128
  801104:	3180e804 	addi	r6,r6,928
  801108:	0141f404 	movi	r5,2000
  80110c:	01002074 	movhi	r4,129
  801110:	211f6b04 	addi	r4,r4,32172
  801114:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  801118:	00800044 	movi	r2,1
  80111c:	d0a75a15 	stw	r2,-25240(gp)
  801120:	00004b06 	br	801250 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == rr2_2){
  801124:	d0a75f17 	ldw	r2,-25220(gp)
  801128:	10800118 	cmpnei	r2,r2,4
  80112c:	1000101e 	bne	r2,zero,801170 <pedestrian_tlc+0x18c>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
  801130:	00c00904 	movi	r3,36
  801134:	00804434 	movhi	r2,272
  801138:	10841c04 	addi	r2,r2,4208
  80113c:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801140:	d0a75a17 	ldw	r2,-25240(gp)
  801144:	1000421e 	bne	r2,zero,801250 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, rrrr, pedestrian_tlc_timer_isr, timerContext);
  801148:	e1ffff17 	ldw	r7,-4(fp)
  80114c:	01802034 	movhi	r6,128
  801150:	3180e804 	addi	r6,r6,928
  801154:	01407d04 	movi	r5,500
  801158:	01002074 	movhi	r4,129
  80115c:	211f6b04 	addi	r4,r4,32172
  801160:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  801164:	00800044 	movi	r2,1
  801168:	d0a75a15 	stw	r2,-25240(gp)
  80116c:	00003806 	br	801250 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == rg_2){
  801170:	d0a75f17 	ldw	r2,-25220(gp)
  801174:	10800158 	cmpnei	r2,r2,5
  801178:	1000101e 	bne	r2,zero,8011bc <pedestrian_tlc+0x1d8>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00001100); //turn RED-GREEN on
  80117c:	00c00304 	movi	r3,12
  801180:	00804434 	movhi	r2,272
  801184:	10841c04 	addi	r2,r2,4208
  801188:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  80118c:	d0a75a17 	ldw	r2,-25240(gp)
  801190:	10002f1e 	bne	r2,zero,801250 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, grrg, pedestrian_tlc_timer_isr, timerContext);
  801194:	e1ffff17 	ldw	r7,-4(fp)
  801198:	01802034 	movhi	r6,128
  80119c:	3180e804 	addi	r6,r6,928
  8011a0:	0145dc04 	movi	r5,6000
  8011a4:	01002074 	movhi	r4,129
  8011a8:	211f6b04 	addi	r4,r4,32172
  8011ac:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  8011b0:	00800044 	movi	r2,1
  8011b4:	d0a75a15 	stw	r2,-25240(gp)
  8011b8:	00002506 	br	801250 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == rgp2_2){
  8011bc:	d0a75f17 	ldw	r2,-25220(gp)
  8011c0:	10800198 	cmpnei	r2,r2,6
  8011c4:	1000101e 	bne	r2,zero,801208 <pedestrian_tlc+0x224>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b10001100); //turn RED-GREEN and PEDEW on
  8011c8:	00c02304 	movi	r3,140
  8011cc:	00804434 	movhi	r2,272
  8011d0:	10841c04 	addi	r2,r2,4208
  8011d4:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  8011d8:	d0a75a17 	ldw	r2,-25240(gp)
  8011dc:	10001c1e 	bne	r2,zero,801250 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, grrg, pedestrian_tlc_timer_isr, timerContext);
  8011e0:	e1ffff17 	ldw	r7,-4(fp)
  8011e4:	01802034 	movhi	r6,128
  8011e8:	3180e804 	addi	r6,r6,928
  8011ec:	0145dc04 	movi	r5,6000
  8011f0:	01002074 	movhi	r4,129
  8011f4:	211f6b04 	addi	r4,r4,32172
  8011f8:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  8011fc:	00800044 	movi	r2,1
  801200:	d0a75a15 	stw	r2,-25240(gp)
  801204:	00001206 	br	801250 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == ry_2){
  801208:	d0a75f17 	ldw	r2,-25220(gp)
  80120c:	108001d8 	cmpnei	r2,r2,7
  801210:	10000f1e 	bne	r2,zero,801250 <pedestrian_tlc+0x26c>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00010100); //turn RED-YELLOW on
  801214:	00c00504 	movi	r3,20
  801218:	00804434 	movhi	r2,272
  80121c:	10841c04 	addi	r2,r2,4208
  801220:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801224:	d0a75a17 	ldw	r2,-25240(gp)
  801228:	1000091e 	bne	r2,zero,801250 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, yrry, pedestrian_tlc_timer_isr, timerContext);
  80122c:	e1ffff17 	ldw	r7,-4(fp)
  801230:	01802034 	movhi	r6,128
  801234:	3180e804 	addi	r6,r6,928
  801238:	0141f404 	movi	r5,2000
  80123c:	01002074 	movhi	r4,129
  801240:	211f6b04 	addi	r4,r4,32172
  801244:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  801248:	00800044 	movi	r2,1
  80124c:	d0a75a15 	stw	r2,-25240(gp)
		}
	}
	return 0;
  801250:	0005883a 	mov	r2,zero
}
  801254:	e037883a 	mov	sp,fp
  801258:	dfc00117 	ldw	ra,4(sp)
  80125c:	df000017 	ldw	fp,0(sp)
  801260:	dec00204 	addi	sp,sp,8
  801264:	f800283a 	ret

00801268 <configurable_tlc>:

// Mode 3
// Allows the timer to be change in PuTTY
int configurable_tlc(){
  801268:	deffea04 	addi	sp,sp,-88
  80126c:	dfc01515 	stw	ra,84(sp)
  801270:	df001415 	stw	fp,80(sp)
  801274:	dc001315 	stw	r16,76(sp)
  801278:	df001404 	addi	fp,sp,80
	void* timerContext = 0;
  80127c:	e03ff215 	stw	zero,-56(fp)
	unsigned int switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  801280:	00804434 	movhi	r2,272
  801284:	10842404 	addi	r2,r2,4240
  801288:	10800037 	ldwio	r2,0(r2)
  80128c:	e0bff315 	stw	r2,-52(fp)

	//loop through all states, starting timer on current state and setting outputs
	if (current_state3 == rr1_3){
  801290:	d0a76117 	ldw	r2,-25212(gp)
  801294:	1000cd1e 	bne	r2,zero,8015cc <configurable_tlc+0x364>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
  801298:	00c00904 	movi	r3,36
  80129c:	00804434 	movhi	r2,272
  8012a0:	10841c04 	addi	r2,r2,4208
  8012a4:	10c00035 	stwio	r3,0(r2)
		//check switch value to see if there are new timer values
		switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  8012a8:	00804434 	movhi	r2,272
  8012ac:	10842404 	addi	r2,r2,4240
  8012b0:	10800037 	ldwio	r2,0(r2)
  8012b4:	e0bff315 	stw	r2,-52(fp)

		if (switch_value & (1<<17)){
  8012b8:	e0bff317 	ldw	r2,-52(fp)
  8012bc:	108000ac 	andhi	r2,r2,2
  8012c0:	1000b526 	beq	r2,zero,801598 <configurable_tlc+0x330>
			//if switch 17 indicates configuration mode, block until complete valid string is received
			unsigned int strcomplete = 0;
  8012c4:	e03fec15 	stw	zero,-80(fp)
			unsigned int i = 0; //index for string retrieved from UART
  8012c8:	e03fed15 	stw	zero,-76(fp)
			char **splitstrings; //pointer to array of c-strings
			int numbers[10]; //array to store timeout values received from UART

			//allocate enough memory for array of c-strings
			splitstrings = (char**)malloc(10);
  8012cc:	01000284 	movi	r4,10
  8012d0:	0802f5c0 	call	802f5c <malloc>
  8012d4:	e0bff415 	stw	r2,-48(fp)
			//allocate enough memory for each c-string in array
			for (int j = 0; j < sizeof(splitstrings); ++j) {
  8012d8:	e03fee15 	stw	zero,-72(fp)
  8012dc:	00000c06 	br	801310 <configurable_tlc+0xa8>
				splitstrings[j] = (char*)malloc(10);
  8012e0:	e0bfee17 	ldw	r2,-72(fp)
  8012e4:	1085883a 	add	r2,r2,r2
  8012e8:	1085883a 	add	r2,r2,r2
  8012ec:	1007883a 	mov	r3,r2
  8012f0:	e0bff417 	ldw	r2,-48(fp)
  8012f4:	10e1883a 	add	r16,r2,r3
  8012f8:	01000284 	movi	r4,10
  8012fc:	0802f5c0 	call	802f5c <malloc>
  801300:	80800015 	stw	r2,0(r16)
			int numbers[10]; //array to store timeout values received from UART

			//allocate enough memory for array of c-strings
			splitstrings = (char**)malloc(10);
			//allocate enough memory for each c-string in array
			for (int j = 0; j < sizeof(splitstrings); ++j) {
  801304:	e0bfee17 	ldw	r2,-72(fp)
  801308:	10800044 	addi	r2,r2,1
  80130c:	e0bfee15 	stw	r2,-72(fp)
  801310:	e0bfee17 	ldw	r2,-72(fp)
  801314:	10800130 	cmpltui	r2,r2,4
  801318:	103ff11e 	bne	r2,zero,8012e0 <__alt_mem_onchip_mem+0xff7812e0>
				splitstrings[j] = (char*)malloc(10);
			}
			//block code and get input from UART stream
			while (strcomplete == 0){
  80131c:	00009006 	br	801560 <configurable_tlc+0x2f8>
				config_values[i] = fgetc(uart);
  801320:	d0a76a17 	ldw	r2,-25176(gp)
  801324:	1009883a 	mov	r4,r2
  801328:	08020bc0 	call	8020bc <fgetc>
  80132c:	1009883a 	mov	r4,r2
  801330:	00802074 	movhi	r2,129
  801334:	109f7d04 	addi	r2,r2,32244
  801338:	e0ffed17 	ldw	r3,-76(fp)
  80133c:	10c5883a 	add	r2,r2,r3
  801340:	11000005 	stb	r4,0(r2)
				printf("%c",config_values[i]);
  801344:	00802074 	movhi	r2,129
  801348:	109f7d04 	addi	r2,r2,32244
  80134c:	e0ffed17 	ldw	r3,-76(fp)
  801350:	10c5883a 	add	r2,r2,r3
  801354:	10800003 	ldbu	r2,0(r2)
  801358:	10803fcc 	andi	r2,r2,255
  80135c:	1080201c 	xori	r2,r2,128
  801360:	10bfe004 	addi	r2,r2,-128
  801364:	1009883a 	mov	r4,r2
  801368:	080398c0 	call	80398c <putchar>
				++i;
  80136c:	e0bfed17 	ldw	r2,-76(fp)
  801370:	10800044 	addi	r2,r2,1
  801374:	e0bfed15 	stw	r2,-76(fp)
				if (config_values[i-1] == '\n'){
  801378:	e0bfed17 	ldw	r2,-76(fp)
  80137c:	10ffffc4 	addi	r3,r2,-1
  801380:	00802074 	movhi	r2,129
  801384:	109f7d04 	addi	r2,r2,32244
  801388:	10c5883a 	add	r2,r2,r3
  80138c:	10800003 	ldbu	r2,0(r2)
  801390:	10803fcc 	andi	r2,r2,255
  801394:	1080201c 	xori	r2,r2,128
  801398:	10bfe004 	addi	r2,r2,-128
  80139c:	10800298 	cmpnei	r2,r2,10
  8013a0:	10006f1e 	bne	r2,zero,801560 <configurable_tlc+0x2f8>

					//add NULL to end of string to indicate end of string
					config_values[i] = '\0';
  8013a4:	00802074 	movhi	r2,129
  8013a8:	109f7d04 	addi	r2,r2,32244
  8013ac:	e0ffed17 	ldw	r3,-76(fp)
  8013b0:	10c5883a 	add	r2,r2,r3
  8013b4:	10000005 	stb	zero,0(r2)
					//move iterator to position 0 (effectively flushing the buffer)
					i = 0;
  8013b8:	e03fed15 	stw	zero,-76(fp)
					unsigned int k = 1; //iterator for array of c-strings
  8013bc:	00800044 	movi	r2,1
  8013c0:	e0bfef15 	stw	r2,-68(fp)

					//use strtok to split the UART string into separate strings from between the commas
					splitstrings[0] = strtok(config_values,comma);
  8013c4:	d1600204 	addi	r5,gp,-32760
  8013c8:	01002074 	movhi	r4,129
  8013cc:	211f7d04 	addi	r4,r4,32244
  8013d0:	0803f180 	call	803f18 <strtok>
  8013d4:	1007883a 	mov	r3,r2
  8013d8:	e0bff417 	ldw	r2,-48(fp)
  8013dc:	10c00015 	stw	r3,0(r2)
					while (splitstrings[k-1] != NULL) {
  8013e0:	00000d06 	br	801418 <configurable_tlc+0x1b0>
							splitstrings[k] = strtok(NULL, comma);
  8013e4:	e0bfef17 	ldw	r2,-68(fp)
  8013e8:	1085883a 	add	r2,r2,r2
  8013ec:	1085883a 	add	r2,r2,r2
  8013f0:	1007883a 	mov	r3,r2
  8013f4:	e0bff417 	ldw	r2,-48(fp)
  8013f8:	10e1883a 	add	r16,r2,r3
  8013fc:	d1600204 	addi	r5,gp,-32760
  801400:	0009883a 	mov	r4,zero
  801404:	0803f180 	call	803f18 <strtok>
  801408:	80800015 	stw	r2,0(r16)
							++k;
  80140c:	e0bfef17 	ldw	r2,-68(fp)
  801410:	10800044 	addi	r2,r2,1
  801414:	e0bfef15 	stw	r2,-68(fp)
					i = 0;
					unsigned int k = 1; //iterator for array of c-strings

					//use strtok to split the UART string into separate strings from between the commas
					splitstrings[0] = strtok(config_values,comma);
					while (splitstrings[k-1] != NULL) {
  801418:	e0ffef17 	ldw	r3,-68(fp)
  80141c:	00900034 	movhi	r2,16384
  801420:	10bfffc4 	addi	r2,r2,-1
  801424:	1885883a 	add	r2,r3,r2
  801428:	1085883a 	add	r2,r2,r2
  80142c:	1085883a 	add	r2,r2,r2
  801430:	1007883a 	mov	r3,r2
  801434:	e0bff417 	ldw	r2,-48(fp)
  801438:	10c5883a 	add	r2,r2,r3
  80143c:	10800017 	ldw	r2,0(r2)
  801440:	103fe81e 	bne	r2,zero,8013e4 <__alt_mem_onchip_mem+0xff7813e4>
							splitstrings[k] = strtok(NULL, comma);
							++k;
					}

					k = 0; //reset iterator for array of c-strings
  801444:	e03fef15 	stw	zero,-68(fp)
					//do base-10 conversion of split strings to integers using strtol
					//this returns 0 for an invalid integer, so we are assuming a 0ms timeout is invalid
					while (splitstrings[k] != NULL){
  801448:	00001606 	br	8014a4 <configurable_tlc+0x23c>
						numbers[k] = strtol(splitstrings[k],NULL,10);
  80144c:	e0bfef17 	ldw	r2,-68(fp)
  801450:	1085883a 	add	r2,r2,r2
  801454:	1085883a 	add	r2,r2,r2
  801458:	1007883a 	mov	r3,r2
  80145c:	e0bff417 	ldw	r2,-48(fp)
  801460:	10c5883a 	add	r2,r2,r3
  801464:	10800017 	ldw	r2,0(r2)
  801468:	01800284 	movi	r6,10
  80146c:	000b883a 	mov	r5,zero
  801470:	1009883a 	mov	r4,r2
  801474:	080420c0 	call	80420c <strtol>
  801478:	1007883a 	mov	r3,r2
  80147c:	e0bfef17 	ldw	r2,-68(fp)
  801480:	1085883a 	add	r2,r2,r2
  801484:	1085883a 	add	r2,r2,r2
  801488:	e13fec04 	addi	r4,fp,-80
  80148c:	2085883a 	add	r2,r4,r2
  801490:	10800904 	addi	r2,r2,36
  801494:	10c00015 	stw	r3,0(r2)
						++k;
  801498:	e0bfef17 	ldw	r2,-68(fp)
  80149c:	10800044 	addi	r2,r2,1
  8014a0:	e0bfef15 	stw	r2,-68(fp)
					}

					k = 0; //reset iterator for array of c-strings
					//do base-10 conversion of split strings to integers using strtol
					//this returns 0 for an invalid integer, so we are assuming a 0ms timeout is invalid
					while (splitstrings[k] != NULL){
  8014a4:	e0bfef17 	ldw	r2,-68(fp)
  8014a8:	1085883a 	add	r2,r2,r2
  8014ac:	1085883a 	add	r2,r2,r2
  8014b0:	1007883a 	mov	r3,r2
  8014b4:	e0bff417 	ldw	r2,-48(fp)
  8014b8:	10c5883a 	add	r2,r2,r3
  8014bc:	10800017 	ldw	r2,0(r2)
  8014c0:	103fe21e 	bne	r2,zero,80144c <__alt_mem_onchip_mem+0xff78144c>
						numbers[k] = strtol(splitstrings[k],NULL,10);
						++k;
					}

					if (k == 6){
  8014c4:	e0bfef17 	ldw	r2,-68(fp)
  8014c8:	10800198 	cmpnei	r2,r2,6
  8014cc:	1000241e 	bne	r2,zero,801560 <configurable_tlc+0x2f8>
						unsigned int notinrange = 0;
  8014d0:	e03ff015 	stw	zero,-64(fp)
						for (int j = 0; j < 6; ++j){
  8014d4:	e03ff115 	stw	zero,-60(fp)
  8014d8:	00001a06 	br	801544 <configurable_tlc+0x2dc>
							if ((numbers[j] <= 0) || (numbers[j] > 9999)){
  8014dc:	e0bff117 	ldw	r2,-60(fp)
  8014e0:	1085883a 	add	r2,r2,r2
  8014e4:	1085883a 	add	r2,r2,r2
  8014e8:	e0ffec04 	addi	r3,fp,-80
  8014ec:	1885883a 	add	r2,r3,r2
  8014f0:	10800904 	addi	r2,r2,36
  8014f4:	10800017 	ldw	r2,0(r2)
  8014f8:	0080090e 	bge	zero,r2,801520 <configurable_tlc+0x2b8>
  8014fc:	e0bff117 	ldw	r2,-60(fp)
  801500:	1085883a 	add	r2,r2,r2
  801504:	1085883a 	add	r2,r2,r2
  801508:	e13fec04 	addi	r4,fp,-80
  80150c:	2085883a 	add	r2,r4,r2
  801510:	10800904 	addi	r2,r2,36
  801514:	10800017 	ldw	r2,0(r2)
  801518:	1089c410 	cmplti	r2,r2,10000
  80151c:	1000061e 	bne	r2,zero,801538 <configurable_tlc+0x2d0>
								notinrange = 1;
  801520:	00800044 	movi	r2,1
  801524:	e0bff015 	stw	r2,-64(fp)
								printf("Please re-enter numbers \n");
  801528:	01002074 	movhi	r4,129
  80152c:	210f4a04 	addi	r4,r4,15656
  801530:	0803a640 	call	803a64 <puts>
								break;
  801534:	00000606 	br	801550 <configurable_tlc+0x2e8>
						++k;
					}

					if (k == 6){
						unsigned int notinrange = 0;
						for (int j = 0; j < 6; ++j){
  801538:	e0bff117 	ldw	r2,-60(fp)
  80153c:	10800044 	addi	r2,r2,1
  801540:	e0bff115 	stw	r2,-60(fp)
  801544:	e0bff117 	ldw	r2,-60(fp)
  801548:	10800190 	cmplti	r2,r2,6
  80154c:	103fe31e 	bne	r2,zero,8014dc <__alt_mem_onchip_mem+0xff7814dc>
								notinrange = 1;
								printf("Please re-enter numbers \n");
								break;
							}
						}
						if (!(notinrange)){
  801550:	e0bff017 	ldw	r2,-64(fp)
  801554:	1000021e 	bne	r2,zero,801560 <configurable_tlc+0x2f8>
							strcomplete = 1;
  801558:	00800044 	movi	r2,1
  80155c:	e0bfec15 	stw	r2,-80(fp)
			//allocate enough memory for each c-string in array
			for (int j = 0; j < sizeof(splitstrings); ++j) {
				splitstrings[j] = (char*)malloc(10);
			}
			//block code and get input from UART stream
			while (strcomplete == 0){
  801560:	e0bfec17 	ldw	r2,-80(fp)
  801564:	103f6e26 	beq	r2,zero,801320 <__alt_mem_onchip_mem+0xff781320>
						}
					}
				}
			}
			//since numbers have been discovered to be valid, assign them to the timer controlling variables
			t1 = numbers[0];
  801568:	e0bff517 	ldw	r2,-44(fp)
  80156c:	d0a00315 	stw	r2,-32756(gp)
			t2 = numbers[1];
  801570:	e0bff617 	ldw	r2,-40(fp)
  801574:	d0a00415 	stw	r2,-32752(gp)
			t3 = numbers[2];
  801578:	e0bff717 	ldw	r2,-36(fp)
  80157c:	d0a00515 	stw	r2,-32748(gp)
			t4 = numbers[3];
  801580:	e0bff817 	ldw	r2,-32(fp)
  801584:	d0a00615 	stw	r2,-32744(gp)
			t5 = numbers[4];
  801588:	e0bff917 	ldw	r2,-28(fp)
  80158c:	d0a00715 	stw	r2,-32740(gp)
			t6 = numbers[5];
  801590:	e0bffa17 	ldw	r2,-24(fp)
  801594:	d0a00815 	stw	r2,-32736(gp)
		}
		if (!(timer_has_started)){
  801598:	d0a75a17 	ldw	r2,-25240(gp)
  80159c:	1000961e 	bne	r2,zero,8017f8 <configurable_tlc+0x590>
			alt_alarm_start(&timer_simple, t1, configurable_tlc_timer_isr, timerContext);
  8015a0:	d0a00317 	ldw	r2,-32756(gp)
  8015a4:	e1fff217 	ldw	r7,-56(fp)
  8015a8:	01802034 	movhi	r6,128
  8015ac:	31818904 	addi	r6,r6,1572
  8015b0:	100b883a 	mov	r5,r2
  8015b4:	01002074 	movhi	r4,129
  8015b8:	211f6b04 	addi	r4,r4,32172
  8015bc:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  8015c0:	00800044 	movi	r2,1
  8015c4:	d0a75a15 	stw	r2,-25240(gp)
  8015c8:	00008b06 	br	8017f8 <configurable_tlc+0x590>
		}
	}
	else if (current_state3 == gr_3){
  8015cc:	d0a76117 	ldw	r2,-25212(gp)
  8015d0:	10800058 	cmpnei	r2,r2,1
  8015d4:	1000111e 	bne	r2,zero,80161c <configurable_tlc+0x3b4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100001); //turn GREEN-RED on
  8015d8:	00c00844 	movi	r3,33
  8015dc:	00804434 	movhi	r2,272
  8015e0:	10841c04 	addi	r2,r2,4208
  8015e4:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  8015e8:	d0a75a17 	ldw	r2,-25240(gp)
  8015ec:	1000821e 	bne	r2,zero,8017f8 <configurable_tlc+0x590>
			alt_alarm_start(&timer_simple, t2, configurable_tlc_timer_isr, timerContext);
  8015f0:	d0a00417 	ldw	r2,-32752(gp)
  8015f4:	e1fff217 	ldw	r7,-56(fp)
  8015f8:	01802034 	movhi	r6,128
  8015fc:	31818904 	addi	r6,r6,1572
  801600:	100b883a 	mov	r5,r2
  801604:	01002074 	movhi	r4,129
  801608:	211f6b04 	addi	r4,r4,32172
  80160c:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  801610:	00800044 	movi	r2,1
  801614:	d0a75a15 	stw	r2,-25240(gp)
  801618:	00007706 	br	8017f8 <configurable_tlc+0x590>
		}
	}
	else if (current_state3 == grp1_3){
  80161c:	d0a76117 	ldw	r2,-25212(gp)
  801620:	10800098 	cmpnei	r2,r2,2
  801624:	1000111e 	bne	r2,zero,80166c <configurable_tlc+0x404>
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b01100001); //turn GREEN-RED and PEDNS on
  801628:	00c01844 	movi	r3,97
  80162c:	00804434 	movhi	r2,272
  801630:	10841c04 	addi	r2,r2,4208
  801634:	10c00035 	stwio	r3,0(r2)
			if (!(timer_has_started)){
  801638:	d0a75a17 	ldw	r2,-25240(gp)
  80163c:	10006e1e 	bne	r2,zero,8017f8 <configurable_tlc+0x590>
				alt_alarm_start(&timer_simple, t2, configurable_tlc_timer_isr, timerContext);
  801640:	d0a00417 	ldw	r2,-32752(gp)
  801644:	e1fff217 	ldw	r7,-56(fp)
  801648:	01802034 	movhi	r6,128
  80164c:	31818904 	addi	r6,r6,1572
  801650:	100b883a 	mov	r5,r2
  801654:	01002074 	movhi	r4,129
  801658:	211f6b04 	addi	r4,r4,32172
  80165c:	080f9800 	call	80f980 <alt_alarm_start>
				timer_has_started = 1;
  801660:	00800044 	movi	r2,1
  801664:	d0a75a15 	stw	r2,-25240(gp)
  801668:	00006306 	br	8017f8 <configurable_tlc+0x590>
			}
	}
	else if (current_state3 == yr_3){
  80166c:	d0a76117 	ldw	r2,-25212(gp)
  801670:	108000d8 	cmpnei	r2,r2,3
  801674:	1000111e 	bne	r2,zero,8016bc <configurable_tlc+0x454>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100010); //turn YELLOW-RED on
  801678:	00c00884 	movi	r3,34
  80167c:	00804434 	movhi	r2,272
  801680:	10841c04 	addi	r2,r2,4208
  801684:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801688:	d0a75a17 	ldw	r2,-25240(gp)
  80168c:	10005a1e 	bne	r2,zero,8017f8 <configurable_tlc+0x590>
			alt_alarm_start(&timer_simple, t3, configurable_tlc_timer_isr, timerContext);
  801690:	d0a00517 	ldw	r2,-32748(gp)
  801694:	e1fff217 	ldw	r7,-56(fp)
  801698:	01802034 	movhi	r6,128
  80169c:	31818904 	addi	r6,r6,1572
  8016a0:	100b883a 	mov	r5,r2
  8016a4:	01002074 	movhi	r4,129
  8016a8:	211f6b04 	addi	r4,r4,32172
  8016ac:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  8016b0:	00800044 	movi	r2,1
  8016b4:	d0a75a15 	stw	r2,-25240(gp)
  8016b8:	00004f06 	br	8017f8 <configurable_tlc+0x590>
		}
	}
	else if (current_state3 == rr2_3){
  8016bc:	d0a76117 	ldw	r2,-25212(gp)
  8016c0:	10800118 	cmpnei	r2,r2,4
  8016c4:	1000111e 	bne	r2,zero,80170c <configurable_tlc+0x4a4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
  8016c8:	00c00904 	movi	r3,36
  8016cc:	00804434 	movhi	r2,272
  8016d0:	10841c04 	addi	r2,r2,4208
  8016d4:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  8016d8:	d0a75a17 	ldw	r2,-25240(gp)
  8016dc:	1000461e 	bne	r2,zero,8017f8 <configurable_tlc+0x590>
			alt_alarm_start(&timer_simple, t4, configurable_tlc_timer_isr, timerContext);
  8016e0:	d0a00617 	ldw	r2,-32744(gp)
  8016e4:	e1fff217 	ldw	r7,-56(fp)
  8016e8:	01802034 	movhi	r6,128
  8016ec:	31818904 	addi	r6,r6,1572
  8016f0:	100b883a 	mov	r5,r2
  8016f4:	01002074 	movhi	r4,129
  8016f8:	211f6b04 	addi	r4,r4,32172
  8016fc:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  801700:	00800044 	movi	r2,1
  801704:	d0a75a15 	stw	r2,-25240(gp)
  801708:	00003b06 	br	8017f8 <configurable_tlc+0x590>
		}
	}
	else if (current_state3 == rg_3){
  80170c:	d0a76117 	ldw	r2,-25212(gp)
  801710:	10800158 	cmpnei	r2,r2,5
  801714:	1000111e 	bne	r2,zero,80175c <configurable_tlc+0x4f4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00001100); //turn RED-GREEN on
  801718:	00c00304 	movi	r3,12
  80171c:	00804434 	movhi	r2,272
  801720:	10841c04 	addi	r2,r2,4208
  801724:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801728:	d0a75a17 	ldw	r2,-25240(gp)
  80172c:	1000321e 	bne	r2,zero,8017f8 <configurable_tlc+0x590>
			alt_alarm_start(&timer_simple, t5, configurable_tlc_timer_isr, timerContext);
  801730:	d0a00717 	ldw	r2,-32740(gp)
  801734:	e1fff217 	ldw	r7,-56(fp)
  801738:	01802034 	movhi	r6,128
  80173c:	31818904 	addi	r6,r6,1572
  801740:	100b883a 	mov	r5,r2
  801744:	01002074 	movhi	r4,129
  801748:	211f6b04 	addi	r4,r4,32172
  80174c:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  801750:	00800044 	movi	r2,1
  801754:	d0a75a15 	stw	r2,-25240(gp)
  801758:	00002706 	br	8017f8 <configurable_tlc+0x590>
		}
	}
	else if (current_state3 == rgp2_3){
  80175c:	d0a76117 	ldw	r2,-25212(gp)
  801760:	10800198 	cmpnei	r2,r2,6
  801764:	1000111e 	bne	r2,zero,8017ac <configurable_tlc+0x544>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b10001100); //turn RED-GREEN and PEDEW on
  801768:	00c02304 	movi	r3,140
  80176c:	00804434 	movhi	r2,272
  801770:	10841c04 	addi	r2,r2,4208
  801774:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801778:	d0a75a17 	ldw	r2,-25240(gp)
  80177c:	10001e1e 	bne	r2,zero,8017f8 <configurable_tlc+0x590>
			alt_alarm_start(&timer_simple, t5, configurable_tlc_timer_isr, timerContext);
  801780:	d0a00717 	ldw	r2,-32740(gp)
  801784:	e1fff217 	ldw	r7,-56(fp)
  801788:	01802034 	movhi	r6,128
  80178c:	31818904 	addi	r6,r6,1572
  801790:	100b883a 	mov	r5,r2
  801794:	01002074 	movhi	r4,129
  801798:	211f6b04 	addi	r4,r4,32172
  80179c:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  8017a0:	00800044 	movi	r2,1
  8017a4:	d0a75a15 	stw	r2,-25240(gp)
  8017a8:	00001306 	br	8017f8 <configurable_tlc+0x590>
		}
	}
	else if (current_state3 == ry_3){
  8017ac:	d0a76117 	ldw	r2,-25212(gp)
  8017b0:	108001d8 	cmpnei	r2,r2,7
  8017b4:	1000101e 	bne	r2,zero,8017f8 <configurable_tlc+0x590>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00010100); //turn RED-YELLOW on
  8017b8:	00c00504 	movi	r3,20
  8017bc:	00804434 	movhi	r2,272
  8017c0:	10841c04 	addi	r2,r2,4208
  8017c4:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  8017c8:	d0a75a17 	ldw	r2,-25240(gp)
  8017cc:	10000a1e 	bne	r2,zero,8017f8 <configurable_tlc+0x590>
			alt_alarm_start(&timer_simple, t6, configurable_tlc_timer_isr, timerContext);
  8017d0:	d0a00817 	ldw	r2,-32736(gp)
  8017d4:	e1fff217 	ldw	r7,-56(fp)
  8017d8:	01802034 	movhi	r6,128
  8017dc:	31818904 	addi	r6,r6,1572
  8017e0:	100b883a 	mov	r5,r2
  8017e4:	01002074 	movhi	r4,129
  8017e8:	211f6b04 	addi	r4,r4,32172
  8017ec:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  8017f0:	00800044 	movi	r2,1
  8017f4:	d0a75a15 	stw	r2,-25240(gp)
		}
	}
	return 0;
  8017f8:	0005883a 	mov	r2,zero
}
  8017fc:	e6ffff04 	addi	sp,fp,-4
  801800:	dfc00217 	ldw	ra,8(sp)
  801804:	df000117 	ldw	fp,4(sp)
  801808:	dc000017 	ldw	r16,0(sp)
  80180c:	dec00304 	addi	sp,sp,12
  801810:	f800283a 	ret

00801814 <camera_tlc>:

// Mode 4
// Includes a Camera
int camera_tlc(){
  801814:	deffea04 	addi	sp,sp,-88
  801818:	dfc01515 	stw	ra,84(sp)
  80181c:	df001415 	stw	fp,80(sp)
  801820:	dc001315 	stw	r16,76(sp)
  801824:	df001404 	addi	fp,sp,80
	void* timerContext = 0;
  801828:	e03ff215 	stw	zero,-56(fp)
	unsigned int switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  80182c:	00804434 	movhi	r2,272
  801830:	10842404 	addi	r2,r2,4240
  801834:	10800037 	ldwio	r2,0(r2)
  801838:	e0bff315 	stw	r2,-52(fp)

	//loop through all states, starting timer on current state and setting outputs
	if (current_state4 == rr1_4){
  80183c:	d0a76317 	ldw	r2,-25204(gp)
  801840:	1000d11e 	bne	r2,zero,801b88 <camera_tlc+0x374>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
  801844:	00c00904 	movi	r3,36
  801848:	00804434 	movhi	r2,272
  80184c:	10841c04 	addi	r2,r2,4208
  801850:	10c00035 	stwio	r3,0(r2)
		//check switch value to see if there are new timer values
		switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  801854:	00804434 	movhi	r2,272
  801858:	10842404 	addi	r2,r2,4240
  80185c:	10800037 	ldwio	r2,0(r2)
  801860:	e0bff315 	stw	r2,-52(fp)

		if (switch_value & (1<<17)){
  801864:	e0bff317 	ldw	r2,-52(fp)
  801868:	108000ac 	andhi	r2,r2,2
  80186c:	1000b926 	beq	r2,zero,801b54 <camera_tlc+0x340>
			//if switch 17 indicates configuration mode, block until complete valid string is received
			unsigned int strcomplete = 0;
  801870:	e03fec15 	stw	zero,-80(fp)
			unsigned int i = 0; //index for string retrieved from UART
  801874:	e03fed15 	stw	zero,-76(fp)
			char **splitstrings; //pointer to array of c-strings
			int numbers[10]; //array to store timeout values received from UART

			//allocate enough memory for array of c-strings
			splitstrings = (char**)malloc(10);
  801878:	01000284 	movi	r4,10
  80187c:	0802f5c0 	call	802f5c <malloc>
  801880:	e0bff415 	stw	r2,-48(fp)
			//allocate enough memory for each c-string in array
			for (int j = 0; j < sizeof(splitstrings); ++j) {
  801884:	e03fee15 	stw	zero,-72(fp)
  801888:	00000c06 	br	8018bc <camera_tlc+0xa8>
				splitstrings[j] = (char*)malloc(10);
  80188c:	e0bfee17 	ldw	r2,-72(fp)
  801890:	1085883a 	add	r2,r2,r2
  801894:	1085883a 	add	r2,r2,r2
  801898:	1007883a 	mov	r3,r2
  80189c:	e0bff417 	ldw	r2,-48(fp)
  8018a0:	10e1883a 	add	r16,r2,r3
  8018a4:	01000284 	movi	r4,10
  8018a8:	0802f5c0 	call	802f5c <malloc>
  8018ac:	80800015 	stw	r2,0(r16)
			int numbers[10]; //array to store timeout values received from UART

			//allocate enough memory for array of c-strings
			splitstrings = (char**)malloc(10);
			//allocate enough memory for each c-string in array
			for (int j = 0; j < sizeof(splitstrings); ++j) {
  8018b0:	e0bfee17 	ldw	r2,-72(fp)
  8018b4:	10800044 	addi	r2,r2,1
  8018b8:	e0bfee15 	stw	r2,-72(fp)
  8018bc:	e0bfee17 	ldw	r2,-72(fp)
  8018c0:	10800130 	cmpltui	r2,r2,4
  8018c4:	103ff11e 	bne	r2,zero,80188c <__alt_mem_onchip_mem+0xff78188c>
				splitstrings[j] = (char*)malloc(10);
			}
			//block code and get input from UART stream
			while (strcomplete == 0){
  8018c8:	00009406 	br	801b1c <camera_tlc+0x308>
				config_values[i] = fgetc(uart);
  8018cc:	d0a76a17 	ldw	r2,-25176(gp)
  8018d0:	1009883a 	mov	r4,r2
  8018d4:	08020bc0 	call	8020bc <fgetc>
  8018d8:	1009883a 	mov	r4,r2
  8018dc:	00802074 	movhi	r2,129
  8018e0:	109f7d04 	addi	r2,r2,32244
  8018e4:	e0ffed17 	ldw	r3,-76(fp)
  8018e8:	10c5883a 	add	r2,r2,r3
  8018ec:	11000005 	stb	r4,0(r2)
				printf("%c",config_values[i]);
  8018f0:	00802074 	movhi	r2,129
  8018f4:	109f7d04 	addi	r2,r2,32244
  8018f8:	e0ffed17 	ldw	r3,-76(fp)
  8018fc:	10c5883a 	add	r2,r2,r3
  801900:	10800003 	ldbu	r2,0(r2)
  801904:	10803fcc 	andi	r2,r2,255
  801908:	1080201c 	xori	r2,r2,128
  80190c:	10bfe004 	addi	r2,r2,-128
  801910:	1009883a 	mov	r4,r2
  801914:	080398c0 	call	80398c <putchar>
				++i;
  801918:	e0bfed17 	ldw	r2,-76(fp)
  80191c:	10800044 	addi	r2,r2,1
  801920:	e0bfed15 	stw	r2,-76(fp)
				if (config_values[i-1] == '\n'){
  801924:	e0bfed17 	ldw	r2,-76(fp)
  801928:	10ffffc4 	addi	r3,r2,-1
  80192c:	00802074 	movhi	r2,129
  801930:	109f7d04 	addi	r2,r2,32244
  801934:	10c5883a 	add	r2,r2,r3
  801938:	10800003 	ldbu	r2,0(r2)
  80193c:	10803fcc 	andi	r2,r2,255
  801940:	1080201c 	xori	r2,r2,128
  801944:	10bfe004 	addi	r2,r2,-128
  801948:	10800298 	cmpnei	r2,r2,10
  80194c:	1000731e 	bne	r2,zero,801b1c <camera_tlc+0x308>

					//add NULL to end of string to indicate end of string
					config_values[i] = '\0';
  801950:	00802074 	movhi	r2,129
  801954:	109f7d04 	addi	r2,r2,32244
  801958:	e0ffed17 	ldw	r3,-76(fp)
  80195c:	10c5883a 	add	r2,r2,r3
  801960:	10000005 	stb	zero,0(r2)
					//move iterator to position 0 (effectively flushing the buffer)
					i = 0;
  801964:	e03fed15 	stw	zero,-76(fp)
					unsigned int k = 1; //iterator for array of c-strings
  801968:	00800044 	movi	r2,1
  80196c:	e0bfef15 	stw	r2,-68(fp)

					//use strtok to split the UART string into separate strings from between the commas
					splitstrings[0] = strtok(config_values,comma);
  801970:	d1600204 	addi	r5,gp,-32760
  801974:	01002074 	movhi	r4,129
  801978:	211f7d04 	addi	r4,r4,32244
  80197c:	0803f180 	call	803f18 <strtok>
  801980:	1007883a 	mov	r3,r2
  801984:	e0bff417 	ldw	r2,-48(fp)
  801988:	10c00015 	stw	r3,0(r2)
					while (splitstrings[k-1] != NULL) {
  80198c:	00000d06 	br	8019c4 <camera_tlc+0x1b0>
							splitstrings[k] = strtok(NULL, comma);
  801990:	e0bfef17 	ldw	r2,-68(fp)
  801994:	1085883a 	add	r2,r2,r2
  801998:	1085883a 	add	r2,r2,r2
  80199c:	1007883a 	mov	r3,r2
  8019a0:	e0bff417 	ldw	r2,-48(fp)
  8019a4:	10e1883a 	add	r16,r2,r3
  8019a8:	d1600204 	addi	r5,gp,-32760
  8019ac:	0009883a 	mov	r4,zero
  8019b0:	0803f180 	call	803f18 <strtok>
  8019b4:	80800015 	stw	r2,0(r16)
							++k;
  8019b8:	e0bfef17 	ldw	r2,-68(fp)
  8019bc:	10800044 	addi	r2,r2,1
  8019c0:	e0bfef15 	stw	r2,-68(fp)
					i = 0;
					unsigned int k = 1; //iterator for array of c-strings

					//use strtok to split the UART string into separate strings from between the commas
					splitstrings[0] = strtok(config_values,comma);
					while (splitstrings[k-1] != NULL) {
  8019c4:	e0ffef17 	ldw	r3,-68(fp)
  8019c8:	00900034 	movhi	r2,16384
  8019cc:	10bfffc4 	addi	r2,r2,-1
  8019d0:	1885883a 	add	r2,r3,r2
  8019d4:	1085883a 	add	r2,r2,r2
  8019d8:	1085883a 	add	r2,r2,r2
  8019dc:	1007883a 	mov	r3,r2
  8019e0:	e0bff417 	ldw	r2,-48(fp)
  8019e4:	10c5883a 	add	r2,r2,r3
  8019e8:	10800017 	ldw	r2,0(r2)
  8019ec:	103fe81e 	bne	r2,zero,801990 <__alt_mem_onchip_mem+0xff781990>
							splitstrings[k] = strtok(NULL, comma);
							++k;
					}

					k = 0; //reset iterator for array of c-strings
  8019f0:	e03fef15 	stw	zero,-68(fp)
					//do base-10 conversion of split strings to integers using strtol
					//this returns 0 for an invalid integer, so we are assuming a 0ms timeout is invalid
					while (splitstrings[k] != NULL){
  8019f4:	00001606 	br	801a50 <camera_tlc+0x23c>
						numbers[k] = strtol(splitstrings[k],NULL,10);
  8019f8:	e0bfef17 	ldw	r2,-68(fp)
  8019fc:	1085883a 	add	r2,r2,r2
  801a00:	1085883a 	add	r2,r2,r2
  801a04:	1007883a 	mov	r3,r2
  801a08:	e0bff417 	ldw	r2,-48(fp)
  801a0c:	10c5883a 	add	r2,r2,r3
  801a10:	10800017 	ldw	r2,0(r2)
  801a14:	01800284 	movi	r6,10
  801a18:	000b883a 	mov	r5,zero
  801a1c:	1009883a 	mov	r4,r2
  801a20:	080420c0 	call	80420c <strtol>
  801a24:	1007883a 	mov	r3,r2
  801a28:	e0bfef17 	ldw	r2,-68(fp)
  801a2c:	1085883a 	add	r2,r2,r2
  801a30:	1085883a 	add	r2,r2,r2
  801a34:	e13fec04 	addi	r4,fp,-80
  801a38:	2085883a 	add	r2,r4,r2
  801a3c:	10800904 	addi	r2,r2,36
  801a40:	10c00015 	stw	r3,0(r2)
						++k;
  801a44:	e0bfef17 	ldw	r2,-68(fp)
  801a48:	10800044 	addi	r2,r2,1
  801a4c:	e0bfef15 	stw	r2,-68(fp)
					}

					k = 0; //reset iterator for array of c-strings
					//do base-10 conversion of split strings to integers using strtol
					//this returns 0 for an invalid integer, so we are assuming a 0ms timeout is invalid
					while (splitstrings[k] != NULL){
  801a50:	e0bfef17 	ldw	r2,-68(fp)
  801a54:	1085883a 	add	r2,r2,r2
  801a58:	1085883a 	add	r2,r2,r2
  801a5c:	1007883a 	mov	r3,r2
  801a60:	e0bff417 	ldw	r2,-48(fp)
  801a64:	10c5883a 	add	r2,r2,r3
  801a68:	10800017 	ldw	r2,0(r2)
  801a6c:	103fe21e 	bne	r2,zero,8019f8 <__alt_mem_onchip_mem+0xff7819f8>
						numbers[k] = strtol(splitstrings[k],NULL,10);
						++k;
					}

					if (k == 6){
  801a70:	e0bfef17 	ldw	r2,-68(fp)
  801a74:	10800198 	cmpnei	r2,r2,6
  801a78:	1000281e 	bne	r2,zero,801b1c <camera_tlc+0x308>
						unsigned int notinrange = 0;
  801a7c:	e03ff015 	stw	zero,-64(fp)
						for (int j = 0; j < 6; ++j){
  801a80:	e03ff115 	stw	zero,-60(fp)
  801a84:	00001e06 	br	801b00 <camera_tlc+0x2ec>
							if ((numbers[j] <= 0) || (numbers[j] > 9999)){
  801a88:	e0bff117 	ldw	r2,-60(fp)
  801a8c:	1085883a 	add	r2,r2,r2
  801a90:	1085883a 	add	r2,r2,r2
  801a94:	e0ffec04 	addi	r3,fp,-80
  801a98:	1885883a 	add	r2,r3,r2
  801a9c:	10800904 	addi	r2,r2,36
  801aa0:	10800017 	ldw	r2,0(r2)
  801aa4:	0080090e 	bge	zero,r2,801acc <camera_tlc+0x2b8>
  801aa8:	e0bff117 	ldw	r2,-60(fp)
  801aac:	1085883a 	add	r2,r2,r2
  801ab0:	1085883a 	add	r2,r2,r2
  801ab4:	e13fec04 	addi	r4,fp,-80
  801ab8:	2085883a 	add	r2,r4,r2
  801abc:	10800904 	addi	r2,r2,36
  801ac0:	10800017 	ldw	r2,0(r2)
  801ac4:	1089c410 	cmplti	r2,r2,10000
  801ac8:	10000a1e 	bne	r2,zero,801af4 <camera_tlc+0x2e0>
								notinrange = 1;
  801acc:	00800044 	movi	r2,1
  801ad0:	e0bff015 	stw	r2,-64(fp)
								fprintf(uart,"Please re-enter numbers\r\n");
  801ad4:	d0a76a17 	ldw	r2,-25176(gp)
  801ad8:	100f883a 	mov	r7,r2
  801adc:	01800644 	movi	r6,25
  801ae0:	01400044 	movi	r5,1
  801ae4:	01002074 	movhi	r4,129
  801ae8:	210f5104 	addi	r4,r4,15684
  801aec:	0802d6c0 	call	802d6c <fwrite>
								break;
  801af0:	00000606 	br	801b0c <camera_tlc+0x2f8>
						++k;
					}

					if (k == 6){
						unsigned int notinrange = 0;
						for (int j = 0; j < 6; ++j){
  801af4:	e0bff117 	ldw	r2,-60(fp)
  801af8:	10800044 	addi	r2,r2,1
  801afc:	e0bff115 	stw	r2,-60(fp)
  801b00:	e0bff117 	ldw	r2,-60(fp)
  801b04:	10800190 	cmplti	r2,r2,6
  801b08:	103fdf1e 	bne	r2,zero,801a88 <__alt_mem_onchip_mem+0xff781a88>
								notinrange = 1;
								fprintf(uart,"Please re-enter numbers\r\n");
								break;
							}
						}
						if (!(notinrange)){
  801b0c:	e0bff017 	ldw	r2,-64(fp)
  801b10:	1000021e 	bne	r2,zero,801b1c <camera_tlc+0x308>
							strcomplete = 1;
  801b14:	00800044 	movi	r2,1
  801b18:	e0bfec15 	stw	r2,-80(fp)
			//allocate enough memory for each c-string in array
			for (int j = 0; j < sizeof(splitstrings); ++j) {
				splitstrings[j] = (char*)malloc(10);
			}
			//block code and get input from UART stream
			while (strcomplete == 0){
  801b1c:	e0bfec17 	ldw	r2,-80(fp)
  801b20:	103f6a26 	beq	r2,zero,8018cc <__alt_mem_onchip_mem+0xff7818cc>
						}
					}
				}
			}
			//since numbers have been discovered to be valid, assign them to the timer controlling variables
			t1 = numbers[0];
  801b24:	e0bff517 	ldw	r2,-44(fp)
  801b28:	d0a00315 	stw	r2,-32756(gp)
			t2 = numbers[1];
  801b2c:	e0bff617 	ldw	r2,-40(fp)
  801b30:	d0a00415 	stw	r2,-32752(gp)
			t3 = numbers[2];
  801b34:	e0bff717 	ldw	r2,-36(fp)
  801b38:	d0a00515 	stw	r2,-32748(gp)
			t4 = numbers[3];
  801b3c:	e0bff817 	ldw	r2,-32(fp)
  801b40:	d0a00615 	stw	r2,-32744(gp)
			t5 = numbers[4];
  801b44:	e0bff917 	ldw	r2,-28(fp)
  801b48:	d0a00715 	stw	r2,-32740(gp)
			t6 = numbers[5];
  801b4c:	e0bffa17 	ldw	r2,-24(fp)
  801b50:	d0a00815 	stw	r2,-32736(gp)
		}

		if (!(timer_has_started)){
  801b54:	d0a75a17 	ldw	r2,-25240(gp)
  801b58:	1000961e 	bne	r2,zero,801db4 <camera_tlc+0x5a0>
			alt_alarm_start(&timer_simple, t1, camera_tlc_timer_isr, timerContext);
  801b5c:	d0a00317 	ldw	r2,-32756(gp)
  801b60:	e1fff217 	ldw	r7,-56(fp)
  801b64:	01802034 	movhi	r6,128
  801b68:	31822304 	addi	r6,r6,2188
  801b6c:	100b883a 	mov	r5,r2
  801b70:	01002074 	movhi	r4,129
  801b74:	211f6b04 	addi	r4,r4,32172
  801b78:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  801b7c:	00800044 	movi	r2,1
  801b80:	d0a75a15 	stw	r2,-25240(gp)
  801b84:	00008b06 	br	801db4 <camera_tlc+0x5a0>
		}
	}
	else if (current_state4 == gr_4){
  801b88:	d0a76317 	ldw	r2,-25204(gp)
  801b8c:	10800058 	cmpnei	r2,r2,1
  801b90:	1000111e 	bne	r2,zero,801bd8 <camera_tlc+0x3c4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100001); //turn GREEN-RED on
  801b94:	00c00844 	movi	r3,33
  801b98:	00804434 	movhi	r2,272
  801b9c:	10841c04 	addi	r2,r2,4208
  801ba0:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801ba4:	d0a75a17 	ldw	r2,-25240(gp)
  801ba8:	1000821e 	bne	r2,zero,801db4 <camera_tlc+0x5a0>
			alt_alarm_start(&timer_simple, t2, camera_tlc_timer_isr, timerContext);
  801bac:	d0a00417 	ldw	r2,-32752(gp)
  801bb0:	e1fff217 	ldw	r7,-56(fp)
  801bb4:	01802034 	movhi	r6,128
  801bb8:	31822304 	addi	r6,r6,2188
  801bbc:	100b883a 	mov	r5,r2
  801bc0:	01002074 	movhi	r4,129
  801bc4:	211f6b04 	addi	r4,r4,32172
  801bc8:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  801bcc:	00800044 	movi	r2,1
  801bd0:	d0a75a15 	stw	r2,-25240(gp)
  801bd4:	00007706 	br	801db4 <camera_tlc+0x5a0>
		}
	}
	else if (current_state4 == grp1_4){
  801bd8:	d0a76317 	ldw	r2,-25204(gp)
  801bdc:	10800098 	cmpnei	r2,r2,2
  801be0:	1000111e 	bne	r2,zero,801c28 <camera_tlc+0x414>
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b01100001); //turn GREEN-RED and PEDNS on
  801be4:	00c01844 	movi	r3,97
  801be8:	00804434 	movhi	r2,272
  801bec:	10841c04 	addi	r2,r2,4208
  801bf0:	10c00035 	stwio	r3,0(r2)
			if (!(timer_has_started)){
  801bf4:	d0a75a17 	ldw	r2,-25240(gp)
  801bf8:	10006e1e 	bne	r2,zero,801db4 <camera_tlc+0x5a0>
				alt_alarm_start(&timer_simple, t2, camera_tlc_timer_isr, timerContext);
  801bfc:	d0a00417 	ldw	r2,-32752(gp)
  801c00:	e1fff217 	ldw	r7,-56(fp)
  801c04:	01802034 	movhi	r6,128
  801c08:	31822304 	addi	r6,r6,2188
  801c0c:	100b883a 	mov	r5,r2
  801c10:	01002074 	movhi	r4,129
  801c14:	211f6b04 	addi	r4,r4,32172
  801c18:	080f9800 	call	80f980 <alt_alarm_start>
				timer_has_started = 1;
  801c1c:	00800044 	movi	r2,1
  801c20:	d0a75a15 	stw	r2,-25240(gp)
  801c24:	00006306 	br	801db4 <camera_tlc+0x5a0>
			}
	}
	else if (current_state4 == yr_4){
  801c28:	d0a76317 	ldw	r2,-25204(gp)
  801c2c:	108000d8 	cmpnei	r2,r2,3
  801c30:	1000111e 	bne	r2,zero,801c78 <camera_tlc+0x464>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100010); //turn YELLOW-RED on
  801c34:	00c00884 	movi	r3,34
  801c38:	00804434 	movhi	r2,272
  801c3c:	10841c04 	addi	r2,r2,4208
  801c40:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801c44:	d0a75a17 	ldw	r2,-25240(gp)
  801c48:	10005a1e 	bne	r2,zero,801db4 <camera_tlc+0x5a0>
			alt_alarm_start(&timer_simple, t3, camera_tlc_timer_isr, timerContext);
  801c4c:	d0a00517 	ldw	r2,-32748(gp)
  801c50:	e1fff217 	ldw	r7,-56(fp)
  801c54:	01802034 	movhi	r6,128
  801c58:	31822304 	addi	r6,r6,2188
  801c5c:	100b883a 	mov	r5,r2
  801c60:	01002074 	movhi	r4,129
  801c64:	211f6b04 	addi	r4,r4,32172
  801c68:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  801c6c:	00800044 	movi	r2,1
  801c70:	d0a75a15 	stw	r2,-25240(gp)
  801c74:	00004f06 	br	801db4 <camera_tlc+0x5a0>
		}
	}
	else if (current_state4 == rr2_4){
  801c78:	d0a76317 	ldw	r2,-25204(gp)
  801c7c:	10800118 	cmpnei	r2,r2,4
  801c80:	1000111e 	bne	r2,zero,801cc8 <camera_tlc+0x4b4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
  801c84:	00c00904 	movi	r3,36
  801c88:	00804434 	movhi	r2,272
  801c8c:	10841c04 	addi	r2,r2,4208
  801c90:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801c94:	d0a75a17 	ldw	r2,-25240(gp)
  801c98:	1000461e 	bne	r2,zero,801db4 <camera_tlc+0x5a0>
			alt_alarm_start(&timer_simple, t4, camera_tlc_timer_isr, timerContext);
  801c9c:	d0a00617 	ldw	r2,-32744(gp)
  801ca0:	e1fff217 	ldw	r7,-56(fp)
  801ca4:	01802034 	movhi	r6,128
  801ca8:	31822304 	addi	r6,r6,2188
  801cac:	100b883a 	mov	r5,r2
  801cb0:	01002074 	movhi	r4,129
  801cb4:	211f6b04 	addi	r4,r4,32172
  801cb8:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  801cbc:	00800044 	movi	r2,1
  801cc0:	d0a75a15 	stw	r2,-25240(gp)
  801cc4:	00003b06 	br	801db4 <camera_tlc+0x5a0>
		}
	}
	else if (current_state4 == rg_4){
  801cc8:	d0a76317 	ldw	r2,-25204(gp)
  801ccc:	10800158 	cmpnei	r2,r2,5
  801cd0:	1000111e 	bne	r2,zero,801d18 <camera_tlc+0x504>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00001100); //turn RED-GREEN on
  801cd4:	00c00304 	movi	r3,12
  801cd8:	00804434 	movhi	r2,272
  801cdc:	10841c04 	addi	r2,r2,4208
  801ce0:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801ce4:	d0a75a17 	ldw	r2,-25240(gp)
  801ce8:	1000321e 	bne	r2,zero,801db4 <camera_tlc+0x5a0>
			alt_alarm_start(&timer_simple, t5, camera_tlc_timer_isr, timerContext);
  801cec:	d0a00717 	ldw	r2,-32740(gp)
  801cf0:	e1fff217 	ldw	r7,-56(fp)
  801cf4:	01802034 	movhi	r6,128
  801cf8:	31822304 	addi	r6,r6,2188
  801cfc:	100b883a 	mov	r5,r2
  801d00:	01002074 	movhi	r4,129
  801d04:	211f6b04 	addi	r4,r4,32172
  801d08:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  801d0c:	00800044 	movi	r2,1
  801d10:	d0a75a15 	stw	r2,-25240(gp)
  801d14:	00002706 	br	801db4 <camera_tlc+0x5a0>
		}
	}
	else if (current_state4 == rgp2_4){
  801d18:	d0a76317 	ldw	r2,-25204(gp)
  801d1c:	10800198 	cmpnei	r2,r2,6
  801d20:	1000111e 	bne	r2,zero,801d68 <camera_tlc+0x554>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b10001100); //turn RED-GREEN and PEDEW on
  801d24:	00c02304 	movi	r3,140
  801d28:	00804434 	movhi	r2,272
  801d2c:	10841c04 	addi	r2,r2,4208
  801d30:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801d34:	d0a75a17 	ldw	r2,-25240(gp)
  801d38:	10001e1e 	bne	r2,zero,801db4 <camera_tlc+0x5a0>
			alt_alarm_start(&timer_simple, t5, camera_tlc_timer_isr, timerContext);
  801d3c:	d0a00717 	ldw	r2,-32740(gp)
  801d40:	e1fff217 	ldw	r7,-56(fp)
  801d44:	01802034 	movhi	r6,128
  801d48:	31822304 	addi	r6,r6,2188
  801d4c:	100b883a 	mov	r5,r2
  801d50:	01002074 	movhi	r4,129
  801d54:	211f6b04 	addi	r4,r4,32172
  801d58:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  801d5c:	00800044 	movi	r2,1
  801d60:	d0a75a15 	stw	r2,-25240(gp)
  801d64:	00001306 	br	801db4 <camera_tlc+0x5a0>
		}
	}
	else if (current_state4 == ry_4){
  801d68:	d0a76317 	ldw	r2,-25204(gp)
  801d6c:	108001d8 	cmpnei	r2,r2,7
  801d70:	1000101e 	bne	r2,zero,801db4 <camera_tlc+0x5a0>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00010100); //turn RED-YELLOW on
  801d74:	00c00504 	movi	r3,20
  801d78:	00804434 	movhi	r2,272
  801d7c:	10841c04 	addi	r2,r2,4208
  801d80:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801d84:	d0a75a17 	ldw	r2,-25240(gp)
  801d88:	10000a1e 	bne	r2,zero,801db4 <camera_tlc+0x5a0>
			alt_alarm_start(&timer_simple, t6, camera_tlc_timer_isr, timerContext);
  801d8c:	d0a00817 	ldw	r2,-32736(gp)
  801d90:	e1fff217 	ldw	r7,-56(fp)
  801d94:	01802034 	movhi	r6,128
  801d98:	31822304 	addi	r6,r6,2188
  801d9c:	100b883a 	mov	r5,r2
  801da0:	01002074 	movhi	r4,129
  801da4:	211f6b04 	addi	r4,r4,32172
  801da8:	080f9800 	call	80f980 <alt_alarm_start>
			timer_has_started = 1;
  801dac:	00800044 	movi	r2,1
  801db0:	d0a75a15 	stw	r2,-25240(gp)
		}
	}
	return 0;
  801db4:	0005883a 	mov	r2,zero
}
  801db8:	e6ffff04 	addi	sp,fp,-4
  801dbc:	dfc00217 	ldw	ra,8(sp)
  801dc0:	df000117 	ldw	fp,4(sp)
  801dc4:	dc000017 	ldw	r16,0(sp)
  801dc8:	dec00304 	addi	sp,sp,12
  801dcc:	f800283a 	ret

00801dd0 <main>:

int main() {
  801dd0:	defffc04 	addi	sp,sp,-16
  801dd4:	dfc00315 	stw	ra,12(sp)
  801dd8:	df000215 	stw	fp,8(sp)
  801ddc:	df000204 	addi	fp,sp,8
	unsigned int switch_value = 0;
  801de0:	e03ffe15 	stw	zero,-8(fp)
	void* context = 0;
  801de4:	e03fff15 	stw	zero,-4(fp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
  801de8:	0007883a 	mov	r3,zero
  801dec:	00804434 	movhi	r2,272
  801df0:	10842b04 	addi	r2,r2,4268
  801df4:	10c00035 	stwio	r3,0(r2)
	//enable interrupts for all buttons
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0x7);
  801df8:	00c001c4 	movi	r3,7
  801dfc:	00804434 	movhi	r2,272
  801e00:	10842a04 	addi	r2,r2,4264
  801e04:	10c00035 	stwio	r3,0(r2)
	//register the button interrupt ISR
	alt_irq_register(BUTTONS_IRQ, context, button_interrupt);
  801e08:	01802034 	movhi	r6,128
  801e0c:	3182dc04 	addi	r6,r6,2928
  801e10:	e17fff17 	ldw	r5,-4(fp)
  801e14:	01000104 	movi	r4,4
  801e18:	080fcd00 	call	80fcd0 <alt_irq_register>
	//turn on the LCD
	lcd = fopen(LCD_NAME, "w");
  801e1c:	01402074 	movhi	r5,129
  801e20:	294f5804 	addi	r5,r5,15712
  801e24:	01002074 	movhi	r4,129
  801e28:	210f5904 	addi	r4,r4,15716
  801e2c:	08025d80 	call	8025d8 <fopen>
  801e30:	d0a76915 	stw	r2,-25180(gp)
	uart = fopen(UART_NAME, "r+"); //Open an existing file for both reading and writing.
  801e34:	01402074 	movhi	r5,129
  801e38:	294f5c04 	addi	r5,r5,15728
  801e3c:	01002074 	movhi	r4,129
  801e40:	210f5d04 	addi	r4,r4,15732
  801e44:	08025d80 	call	8025d8 <fopen>
  801e48:	d0a76a15 	stw	r2,-25176(gp)
	//The initial contents of the file are unchanged and the initial file position is at the beginning of the file.

	while(1) {
		//read switch value and bitmask to check specific switches (descending priority)
		switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  801e4c:	00804434 	movhi	r2,272
  801e50:	10842404 	addi	r2,r2,4240
  801e54:	10800037 	ldwio	r2,0(r2)
  801e58:	e0bffe15 	stw	r2,-8(fp)
		//set mode request depending on switch configuration
		//priority encoded (descending order, i.e. mode 4 is highest and mode 1 is lowest)
		if ((1<<3 & switch_value)) {
  801e5c:	e0bffe17 	ldw	r2,-8(fp)
  801e60:	1080020c 	andi	r2,r2,8
  801e64:	10000326 	beq	r2,zero,801e74 <main+0xa4>
			mode_request = 4;
  801e68:	00800104 	movi	r2,4
  801e6c:	d0a75c15 	stw	r2,-25232(gp)
  801e70:	00001306 	br	801ec0 <main+0xf0>
		}
		else if ((1<<2 & switch_value)) {
  801e74:	e0bffe17 	ldw	r2,-8(fp)
  801e78:	1080010c 	andi	r2,r2,4
  801e7c:	10000326 	beq	r2,zero,801e8c <main+0xbc>
			mode_request = 3;
  801e80:	008000c4 	movi	r2,3
  801e84:	d0a75c15 	stw	r2,-25232(gp)
  801e88:	00000d06 	br	801ec0 <main+0xf0>
		}
		else if ((1<<1 & switch_value)) {
  801e8c:	e0bffe17 	ldw	r2,-8(fp)
  801e90:	1080008c 	andi	r2,r2,2
  801e94:	10000326 	beq	r2,zero,801ea4 <main+0xd4>
			mode_request = 2;
  801e98:	00800084 	movi	r2,2
  801e9c:	d0a75c15 	stw	r2,-25232(gp)
  801ea0:	00000706 	br	801ec0 <main+0xf0>
		}
		else if ((1<<0 & switch_value)) {
  801ea4:	e0bffe17 	ldw	r2,-8(fp)
  801ea8:	1080004c 	andi	r2,r2,1
  801eac:	10000326 	beq	r2,zero,801ebc <main+0xec>
			mode_request = 1;
  801eb0:	00800044 	movi	r2,1
  801eb4:	d0a75c15 	stw	r2,-25232(gp)
  801eb8:	00000106 	br	801ec0 <main+0xf0>
		}
		else
			mode_request = 0;
  801ebc:	d0275c15 	stw	zero,-25232(gp)

		//if there is a new mode request:
		//check if we are at a safe state (corresponding to the mode we are in)
		//if safe, then change mode (and make sure to reset all states and interrupt flags)
		if (current_mode != mode_request) {
  801ec0:	d0e00017 	ldw	r3,-32768(gp)
  801ec4:	d0a75c17 	ldw	r2,-25232(gp)
  801ec8:	18803c26 	beq	r3,r2,801fbc <main+0x1ec>
			switch(current_mode){
  801ecc:	d0a00017 	ldw	r2,-32768(gp)
  801ed0:	10c000a0 	cmpeqi	r3,r2,2
  801ed4:	1800131e 	bne	r3,zero,801f24 <main+0x154>
  801ed8:	10c000c8 	cmpgei	r3,r2,3
  801edc:	1800031e 	bne	r3,zero,801eec <main+0x11c>
  801ee0:	10800060 	cmpeqi	r2,r2,1
  801ee4:	1000061e 	bne	r2,zero,801f00 <main+0x130>
  801ee8:	00002906 	br	801f90 <main+0x1c0>
  801eec:	10c000e0 	cmpeqi	r3,r2,3
  801ef0:	1800151e 	bne	r3,zero,801f48 <main+0x178>
  801ef4:	10800120 	cmpeqi	r2,r2,4
  801ef8:	10001c1e 	bne	r2,zero,801f6c <main+0x19c>
  801efc:	00002406 	br	801f90 <main+0x1c0>
			case 1:
				if ((current_state1 == rr1_1) || (current_state1 == rr2_1)){
  801f00:	d0a75d17 	ldw	r2,-25228(gp)
  801f04:	10000326 	beq	r2,zero,801f14 <main+0x144>
  801f08:	d0a75d17 	ldw	r2,-25228(gp)
  801f0c:	108000d8 	cmpnei	r2,r2,3
  801f10:	1000231e 	bne	r2,zero,801fa0 <main+0x1d0>
					current_mode = mode_request;
  801f14:	d0a75c17 	ldw	r2,-25232(gp)
  801f18:	d0a00015 	stw	r2,-32768(gp)
					reset_volatiles();
  801f1c:	08002900 	call	800290 <reset_volatiles>
				}
				break;
  801f20:	00001f06 	br	801fa0 <main+0x1d0>
			case 2:
				if ((current_state2 == rr1_2) || (current_state2 == rr2_2)){
  801f24:	d0a75f17 	ldw	r2,-25220(gp)
  801f28:	10000326 	beq	r2,zero,801f38 <main+0x168>
  801f2c:	d0a75f17 	ldw	r2,-25220(gp)
  801f30:	10800118 	cmpnei	r2,r2,4
  801f34:	10001c1e 	bne	r2,zero,801fa8 <main+0x1d8>
					current_mode = mode_request;
  801f38:	d0a75c17 	ldw	r2,-25232(gp)
  801f3c:	d0a00015 	stw	r2,-32768(gp)
					reset_volatiles();
  801f40:	08002900 	call	800290 <reset_volatiles>
				}
				break;
  801f44:	00001806 	br	801fa8 <main+0x1d8>
			case 3:
				if ((current_state3 == rr1_3) || (current_state3 == rr2_3)){
  801f48:	d0a76117 	ldw	r2,-25212(gp)
  801f4c:	10000326 	beq	r2,zero,801f5c <main+0x18c>
  801f50:	d0a76117 	ldw	r2,-25212(gp)
  801f54:	10800118 	cmpnei	r2,r2,4
  801f58:	1000151e 	bne	r2,zero,801fb0 <main+0x1e0>
					current_mode = mode_request;
  801f5c:	d0a75c17 	ldw	r2,-25232(gp)
  801f60:	d0a00015 	stw	r2,-32768(gp)
					reset_volatiles();
  801f64:	08002900 	call	800290 <reset_volatiles>
				}
				break;
  801f68:	00001106 	br	801fb0 <main+0x1e0>
			case 4:
				if ((current_state4 == rr1_4) || (current_state4 == rr2_4)){
  801f6c:	d0a76317 	ldw	r2,-25204(gp)
  801f70:	10000326 	beq	r2,zero,801f80 <main+0x1b0>
  801f74:	d0a76317 	ldw	r2,-25204(gp)
  801f78:	10800118 	cmpnei	r2,r2,4
  801f7c:	10000e1e 	bne	r2,zero,801fb8 <main+0x1e8>
					current_mode = mode_request;
  801f80:	d0a75c17 	ldw	r2,-25232(gp)
  801f84:	d0a00015 	stw	r2,-32768(gp)
					reset_volatiles();
  801f88:	08002900 	call	800290 <reset_volatiles>
				}
				break;
  801f8c:	00000a06 	br	801fb8 <main+0x1e8>
			default: //starting state
				current_mode = mode_request;
  801f90:	d0a75c17 	ldw	r2,-25232(gp)
  801f94:	d0a00015 	stw	r2,-32768(gp)
				reset_volatiles();
  801f98:	08002900 	call	800290 <reset_volatiles>
  801f9c:	00000706 	br	801fbc <main+0x1ec>
			case 1:
				if ((current_state1 == rr1_1) || (current_state1 == rr2_1)){
					current_mode = mode_request;
					reset_volatiles();
				}
				break;
  801fa0:	0001883a 	nop
  801fa4:	00000506 	br	801fbc <main+0x1ec>
			case 2:
				if ((current_state2 == rr1_2) || (current_state2 == rr2_2)){
					current_mode = mode_request;
					reset_volatiles();
				}
				break;
  801fa8:	0001883a 	nop
  801fac:	00000306 	br	801fbc <main+0x1ec>
			case 3:
				if ((current_state3 == rr1_3) || (current_state3 == rr2_3)){
					current_mode = mode_request;
					reset_volatiles();
				}
				break;
  801fb0:	0001883a 	nop
  801fb4:	00000106 	br	801fbc <main+0x1ec>
			case 4:
				if ((current_state4 == rr1_4) || (current_state4 == rr2_4)){
					current_mode = mode_request;
					reset_volatiles();
				}
				break;
  801fb8:	0001883a 	nop
				reset_volatiles();
			}
		}


		switch(current_mode){
  801fbc:	d0a00017 	ldw	r2,-32768(gp)
  801fc0:	10c000a0 	cmpeqi	r3,r2,2
  801fc4:	18000e1e 	bne	r3,zero,802000 <main+0x230>
  801fc8:	10c000c8 	cmpgei	r3,r2,3
  801fcc:	1800031e 	bne	r3,zero,801fdc <main+0x20c>
  801fd0:	10800060 	cmpeqi	r2,r2,1
  801fd4:	1000061e 	bne	r2,zero,801ff0 <main+0x220>
  801fd8:	00001506 	br	802030 <main+0x260>
  801fdc:	10c000e0 	cmpeqi	r3,r2,3
  801fe0:	18000b1e 	bne	r3,zero,802010 <main+0x240>
  801fe4:	10800120 	cmpeqi	r2,r2,4
  801fe8:	10000d1e 	bne	r2,zero,802020 <main+0x250>
  801fec:	00001006 	br	802030 <main+0x260>
		case 1:
			simple_tlc();
  801ff0:	0800df80 	call	800df8 <simple_tlc>
			lcd_set_mode(1);
  801ff4:	01000044 	movi	r4,1
  801ff8:	0800d780 	call	800d78 <lcd_set_mode>
			break;
  801ffc:	00001206 	br	802048 <main+0x278>
		case 2:
			pedestrian_tlc();
  802000:	0800fe40 	call	800fe4 <pedestrian_tlc>
			lcd_set_mode(2);
  802004:	01000084 	movi	r4,2
  802008:	0800d780 	call	800d78 <lcd_set_mode>
			break;
  80200c:	00000e06 	br	802048 <main+0x278>
		case 3:
			configurable_tlc();
  802010:	08012680 	call	801268 <configurable_tlc>
			lcd_set_mode(3);
  802014:	010000c4 	movi	r4,3
  802018:	0800d780 	call	800d78 <lcd_set_mode>
			break;
  80201c:	00000a06 	br	802048 <main+0x278>
		case 4:
			camera_tlc();
  802020:	08018140 	call	801814 <camera_tlc>
			lcd_set_mode(4);
  802024:	01000104 	movi	r4,4
  802028:	0800d780 	call	800d78 <lcd_set_mode>
			break;
  80202c:	00000606 	br	802048 <main+0x278>
		default:
			lcd_set_mode(0);
  802030:	0009883a 	mov	r4,zero
  802034:	0800d780 	call	800d78 <lcd_set_mode>
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b111111); //all LEDs on
  802038:	00c00fc4 	movi	r3,63
  80203c:	00804434 	movhi	r2,272
  802040:	10841c04 	addi	r2,r2,4208
  802044:	10c00035 	stwio	r3,0(r2)
		}
	}
  802048:	003f8006 	br	801e4c <__alt_mem_onchip_mem+0xff781e4c>

0080204c <_fgetc_r>:
  80204c:	defffd04 	addi	sp,sp,-12
  802050:	dc000115 	stw	r16,4(sp)
  802054:	dfc00215 	stw	ra,8(sp)
  802058:	2021883a 	mov	r16,r4
  80205c:	20000226 	beq	r4,zero,802068 <_fgetc_r+0x1c>
  802060:	20800e17 	ldw	r2,56(r4)
  802064:	10000c26 	beq	r2,zero,802098 <_fgetc_r+0x4c>
  802068:	28800117 	ldw	r2,4(r5)
  80206c:	10bfffc4 	addi	r2,r2,-1
  802070:	28800115 	stw	r2,4(r5)
  802074:	10000c16 	blt	r2,zero,8020a8 <_fgetc_r+0x5c>
  802078:	28800017 	ldw	r2,0(r5)
  80207c:	10c00044 	addi	r3,r2,1
  802080:	28c00015 	stw	r3,0(r5)
  802084:	10800003 	ldbu	r2,0(r2)
  802088:	dfc00217 	ldw	ra,8(sp)
  80208c:	dc000117 	ldw	r16,4(sp)
  802090:	dec00304 	addi	sp,sp,12
  802094:	f800283a 	ret
  802098:	d9400015 	stw	r5,0(sp)
  80209c:	08024940 	call	802494 <__sinit>
  8020a0:	d9400017 	ldw	r5,0(sp)
  8020a4:	003ff006 	br	802068 <__alt_mem_onchip_mem+0xff782068>
  8020a8:	8009883a 	mov	r4,r16
  8020ac:	dfc00217 	ldw	ra,8(sp)
  8020b0:	dc000117 	ldw	r16,4(sp)
  8020b4:	dec00304 	addi	sp,sp,12
  8020b8:	0803c681 	jmpi	803c68 <__srget_r>

008020bc <fgetc>:
  8020bc:	00802074 	movhi	r2,129
  8020c0:	defffd04 	addi	sp,sp,-12
  8020c4:	1097f204 	addi	r2,r2,24520
  8020c8:	dc400115 	stw	r17,4(sp)
  8020cc:	14400017 	ldw	r17,0(r2)
  8020d0:	dc000015 	stw	r16,0(sp)
  8020d4:	dfc00215 	stw	ra,8(sp)
  8020d8:	2021883a 	mov	r16,r4
  8020dc:	88000226 	beq	r17,zero,8020e8 <fgetc+0x2c>
  8020e0:	88800e17 	ldw	r2,56(r17)
  8020e4:	10000d26 	beq	r2,zero,80211c <fgetc+0x60>
  8020e8:	80800117 	ldw	r2,4(r16)
  8020ec:	10bfffc4 	addi	r2,r2,-1
  8020f0:	80800115 	stw	r2,4(r16)
  8020f4:	10000c16 	blt	r2,zero,802128 <fgetc+0x6c>
  8020f8:	80800017 	ldw	r2,0(r16)
  8020fc:	10c00044 	addi	r3,r2,1
  802100:	80c00015 	stw	r3,0(r16)
  802104:	10800003 	ldbu	r2,0(r2)
  802108:	dfc00217 	ldw	ra,8(sp)
  80210c:	dc400117 	ldw	r17,4(sp)
  802110:	dc000017 	ldw	r16,0(sp)
  802114:	dec00304 	addi	sp,sp,12
  802118:	f800283a 	ret
  80211c:	8809883a 	mov	r4,r17
  802120:	08024940 	call	802494 <__sinit>
  802124:	003ff006 	br	8020e8 <__alt_mem_onchip_mem+0xff7820e8>
  802128:	800b883a 	mov	r5,r16
  80212c:	8809883a 	mov	r4,r17
  802130:	dfc00217 	ldw	ra,8(sp)
  802134:	dc400117 	ldw	r17,4(sp)
  802138:	dc000017 	ldw	r16,0(sp)
  80213c:	dec00304 	addi	sp,sp,12
  802140:	0803c681 	jmpi	803c68 <__srget_r>

00802144 <__fp_unlock>:
  802144:	0005883a 	mov	r2,zero
  802148:	f800283a 	ret

0080214c <_cleanup_r>:
  80214c:	01402034 	movhi	r5,128
  802150:	295fe204 	addi	r5,r5,32648
  802154:	0802bdc1 	jmpi	802bdc <_fwalk_reent>

00802158 <__sinit.part.1>:
  802158:	defff704 	addi	sp,sp,-36
  80215c:	00c02034 	movhi	r3,128
  802160:	dfc00815 	stw	ra,32(sp)
  802164:	ddc00715 	stw	r23,28(sp)
  802168:	dd800615 	stw	r22,24(sp)
  80216c:	dd400515 	stw	r21,20(sp)
  802170:	dd000415 	stw	r20,16(sp)
  802174:	dcc00315 	stw	r19,12(sp)
  802178:	dc800215 	stw	r18,8(sp)
  80217c:	dc400115 	stw	r17,4(sp)
  802180:	dc000015 	stw	r16,0(sp)
  802184:	18c85304 	addi	r3,r3,8524
  802188:	24000117 	ldw	r16,4(r4)
  80218c:	20c00f15 	stw	r3,60(r4)
  802190:	2080bb04 	addi	r2,r4,748
  802194:	00c000c4 	movi	r3,3
  802198:	20c0b915 	stw	r3,740(r4)
  80219c:	2080ba15 	stw	r2,744(r4)
  8021a0:	2000b815 	stw	zero,736(r4)
  8021a4:	05c00204 	movi	r23,8
  8021a8:	00800104 	movi	r2,4
  8021ac:	2025883a 	mov	r18,r4
  8021b0:	b80d883a 	mov	r6,r23
  8021b4:	81001704 	addi	r4,r16,92
  8021b8:	000b883a 	mov	r5,zero
  8021bc:	80000015 	stw	zero,0(r16)
  8021c0:	80000115 	stw	zero,4(r16)
  8021c4:	80000215 	stw	zero,8(r16)
  8021c8:	8080030d 	sth	r2,12(r16)
  8021cc:	80001915 	stw	zero,100(r16)
  8021d0:	8000038d 	sth	zero,14(r16)
  8021d4:	80000415 	stw	zero,16(r16)
  8021d8:	80000515 	stw	zero,20(r16)
  8021dc:	80000615 	stw	zero,24(r16)
  8021e0:	08037900 	call	803790 <memset>
  8021e4:	05802034 	movhi	r22,128
  8021e8:	94400217 	ldw	r17,8(r18)
  8021ec:	05402034 	movhi	r21,128
  8021f0:	05002034 	movhi	r20,128
  8021f4:	04c02034 	movhi	r19,128
  8021f8:	b58f5104 	addi	r22,r22,15684
  8021fc:	ad4f6804 	addi	r21,r21,15776
  802200:	a50f8704 	addi	r20,r20,15900
  802204:	9ccf9e04 	addi	r19,r19,15992
  802208:	85800815 	stw	r22,32(r16)
  80220c:	85400915 	stw	r21,36(r16)
  802210:	85000a15 	stw	r20,40(r16)
  802214:	84c00b15 	stw	r19,44(r16)
  802218:	84000715 	stw	r16,28(r16)
  80221c:	00800284 	movi	r2,10
  802220:	8880030d 	sth	r2,12(r17)
  802224:	00800044 	movi	r2,1
  802228:	b80d883a 	mov	r6,r23
  80222c:	89001704 	addi	r4,r17,92
  802230:	000b883a 	mov	r5,zero
  802234:	88000015 	stw	zero,0(r17)
  802238:	88000115 	stw	zero,4(r17)
  80223c:	88000215 	stw	zero,8(r17)
  802240:	88001915 	stw	zero,100(r17)
  802244:	8880038d 	sth	r2,14(r17)
  802248:	88000415 	stw	zero,16(r17)
  80224c:	88000515 	stw	zero,20(r17)
  802250:	88000615 	stw	zero,24(r17)
  802254:	08037900 	call	803790 <memset>
  802258:	94000317 	ldw	r16,12(r18)
  80225c:	00800484 	movi	r2,18
  802260:	8c400715 	stw	r17,28(r17)
  802264:	8d800815 	stw	r22,32(r17)
  802268:	8d400915 	stw	r21,36(r17)
  80226c:	8d000a15 	stw	r20,40(r17)
  802270:	8cc00b15 	stw	r19,44(r17)
  802274:	8080030d 	sth	r2,12(r16)
  802278:	00800084 	movi	r2,2
  80227c:	80000015 	stw	zero,0(r16)
  802280:	80000115 	stw	zero,4(r16)
  802284:	80000215 	stw	zero,8(r16)
  802288:	80001915 	stw	zero,100(r16)
  80228c:	8080038d 	sth	r2,14(r16)
  802290:	80000415 	stw	zero,16(r16)
  802294:	80000515 	stw	zero,20(r16)
  802298:	80000615 	stw	zero,24(r16)
  80229c:	b80d883a 	mov	r6,r23
  8022a0:	000b883a 	mov	r5,zero
  8022a4:	81001704 	addi	r4,r16,92
  8022a8:	08037900 	call	803790 <memset>
  8022ac:	00800044 	movi	r2,1
  8022b0:	84000715 	stw	r16,28(r16)
  8022b4:	85800815 	stw	r22,32(r16)
  8022b8:	85400915 	stw	r21,36(r16)
  8022bc:	85000a15 	stw	r20,40(r16)
  8022c0:	84c00b15 	stw	r19,44(r16)
  8022c4:	90800e15 	stw	r2,56(r18)
  8022c8:	dfc00817 	ldw	ra,32(sp)
  8022cc:	ddc00717 	ldw	r23,28(sp)
  8022d0:	dd800617 	ldw	r22,24(sp)
  8022d4:	dd400517 	ldw	r21,20(sp)
  8022d8:	dd000417 	ldw	r20,16(sp)
  8022dc:	dcc00317 	ldw	r19,12(sp)
  8022e0:	dc800217 	ldw	r18,8(sp)
  8022e4:	dc400117 	ldw	r17,4(sp)
  8022e8:	dc000017 	ldw	r16,0(sp)
  8022ec:	dec00904 	addi	sp,sp,36
  8022f0:	f800283a 	ret

008022f4 <__fp_lock>:
  8022f4:	0005883a 	mov	r2,zero
  8022f8:	f800283a 	ret

008022fc <__sfmoreglue>:
  8022fc:	defffc04 	addi	sp,sp,-16
  802300:	dc400115 	stw	r17,4(sp)
  802304:	2c7fffc4 	addi	r17,r5,-1
  802308:	8c401a24 	muli	r17,r17,104
  80230c:	dc800215 	stw	r18,8(sp)
  802310:	2825883a 	mov	r18,r5
  802314:	89401d04 	addi	r5,r17,116
  802318:	dc000015 	stw	r16,0(sp)
  80231c:	dfc00315 	stw	ra,12(sp)
  802320:	0802f840 	call	802f84 <_malloc_r>
  802324:	1021883a 	mov	r16,r2
  802328:	10000726 	beq	r2,zero,802348 <__sfmoreglue+0x4c>
  80232c:	11000304 	addi	r4,r2,12
  802330:	10000015 	stw	zero,0(r2)
  802334:	14800115 	stw	r18,4(r2)
  802338:	11000215 	stw	r4,8(r2)
  80233c:	89801a04 	addi	r6,r17,104
  802340:	000b883a 	mov	r5,zero
  802344:	08037900 	call	803790 <memset>
  802348:	8005883a 	mov	r2,r16
  80234c:	dfc00317 	ldw	ra,12(sp)
  802350:	dc800217 	ldw	r18,8(sp)
  802354:	dc400117 	ldw	r17,4(sp)
  802358:	dc000017 	ldw	r16,0(sp)
  80235c:	dec00404 	addi	sp,sp,16
  802360:	f800283a 	ret

00802364 <__sfp>:
  802364:	defffb04 	addi	sp,sp,-20
  802368:	dc000015 	stw	r16,0(sp)
  80236c:	04002074 	movhi	r16,129
  802370:	8417f104 	addi	r16,r16,24516
  802374:	dcc00315 	stw	r19,12(sp)
  802378:	2027883a 	mov	r19,r4
  80237c:	81000017 	ldw	r4,0(r16)
  802380:	dfc00415 	stw	ra,16(sp)
  802384:	dc800215 	stw	r18,8(sp)
  802388:	20800e17 	ldw	r2,56(r4)
  80238c:	dc400115 	stw	r17,4(sp)
  802390:	1000021e 	bne	r2,zero,80239c <__sfp+0x38>
  802394:	08021580 	call	802158 <__sinit.part.1>
  802398:	81000017 	ldw	r4,0(r16)
  80239c:	2480b804 	addi	r18,r4,736
  8023a0:	047fffc4 	movi	r17,-1
  8023a4:	91000117 	ldw	r4,4(r18)
  8023a8:	94000217 	ldw	r16,8(r18)
  8023ac:	213fffc4 	addi	r4,r4,-1
  8023b0:	20000a16 	blt	r4,zero,8023dc <__sfp+0x78>
  8023b4:	8080030f 	ldh	r2,12(r16)
  8023b8:	10000c26 	beq	r2,zero,8023ec <__sfp+0x88>
  8023bc:	80c01d04 	addi	r3,r16,116
  8023c0:	00000206 	br	8023cc <__sfp+0x68>
  8023c4:	18bfe60f 	ldh	r2,-104(r3)
  8023c8:	10000826 	beq	r2,zero,8023ec <__sfp+0x88>
  8023cc:	213fffc4 	addi	r4,r4,-1
  8023d0:	1c3ffd04 	addi	r16,r3,-12
  8023d4:	18c01a04 	addi	r3,r3,104
  8023d8:	247ffa1e 	bne	r4,r17,8023c4 <__alt_mem_onchip_mem+0xff7823c4>
  8023dc:	90800017 	ldw	r2,0(r18)
  8023e0:	10001d26 	beq	r2,zero,802458 <__sfp+0xf4>
  8023e4:	1025883a 	mov	r18,r2
  8023e8:	003fee06 	br	8023a4 <__alt_mem_onchip_mem+0xff7823a4>
  8023ec:	00bfffc4 	movi	r2,-1
  8023f0:	8080038d 	sth	r2,14(r16)
  8023f4:	00800044 	movi	r2,1
  8023f8:	8080030d 	sth	r2,12(r16)
  8023fc:	80001915 	stw	zero,100(r16)
  802400:	80000015 	stw	zero,0(r16)
  802404:	80000215 	stw	zero,8(r16)
  802408:	80000115 	stw	zero,4(r16)
  80240c:	80000415 	stw	zero,16(r16)
  802410:	80000515 	stw	zero,20(r16)
  802414:	80000615 	stw	zero,24(r16)
  802418:	01800204 	movi	r6,8
  80241c:	000b883a 	mov	r5,zero
  802420:	81001704 	addi	r4,r16,92
  802424:	08037900 	call	803790 <memset>
  802428:	8005883a 	mov	r2,r16
  80242c:	80000c15 	stw	zero,48(r16)
  802430:	80000d15 	stw	zero,52(r16)
  802434:	80001115 	stw	zero,68(r16)
  802438:	80001215 	stw	zero,72(r16)
  80243c:	dfc00417 	ldw	ra,16(sp)
  802440:	dcc00317 	ldw	r19,12(sp)
  802444:	dc800217 	ldw	r18,8(sp)
  802448:	dc400117 	ldw	r17,4(sp)
  80244c:	dc000017 	ldw	r16,0(sp)
  802450:	dec00504 	addi	sp,sp,20
  802454:	f800283a 	ret
  802458:	01400104 	movi	r5,4
  80245c:	9809883a 	mov	r4,r19
  802460:	08022fc0 	call	8022fc <__sfmoreglue>
  802464:	90800015 	stw	r2,0(r18)
  802468:	103fde1e 	bne	r2,zero,8023e4 <__alt_mem_onchip_mem+0xff7823e4>
  80246c:	00800304 	movi	r2,12
  802470:	98800015 	stw	r2,0(r19)
  802474:	0005883a 	mov	r2,zero
  802478:	003ff006 	br	80243c <__alt_mem_onchip_mem+0xff78243c>

0080247c <_cleanup>:
  80247c:	00802074 	movhi	r2,129
  802480:	1097f104 	addi	r2,r2,24516
  802484:	11000017 	ldw	r4,0(r2)
  802488:	01402034 	movhi	r5,128
  80248c:	295fe204 	addi	r5,r5,32648
  802490:	0802bdc1 	jmpi	802bdc <_fwalk_reent>

00802494 <__sinit>:
  802494:	20800e17 	ldw	r2,56(r4)
  802498:	10000126 	beq	r2,zero,8024a0 <__sinit+0xc>
  80249c:	f800283a 	ret
  8024a0:	08021581 	jmpi	802158 <__sinit.part.1>

008024a4 <__sfp_lock_acquire>:
  8024a4:	f800283a 	ret

008024a8 <__sfp_lock_release>:
  8024a8:	f800283a 	ret

008024ac <__sinit_lock_acquire>:
  8024ac:	f800283a 	ret

008024b0 <__sinit_lock_release>:
  8024b0:	f800283a 	ret

008024b4 <__fp_lock_all>:
  8024b4:	00802074 	movhi	r2,129
  8024b8:	1097f204 	addi	r2,r2,24520
  8024bc:	11000017 	ldw	r4,0(r2)
  8024c0:	01402034 	movhi	r5,128
  8024c4:	2948bd04 	addi	r5,r5,8948
  8024c8:	0802b181 	jmpi	802b18 <_fwalk>

008024cc <__fp_unlock_all>:
  8024cc:	00802074 	movhi	r2,129
  8024d0:	1097f204 	addi	r2,r2,24520
  8024d4:	11000017 	ldw	r4,0(r2)
  8024d8:	01402034 	movhi	r5,128
  8024dc:	29485104 	addi	r5,r5,8516
  8024e0:	0802b181 	jmpi	802b18 <_fwalk>

008024e4 <_fopen_r>:
  8024e4:	defffa04 	addi	sp,sp,-24
  8024e8:	3005883a 	mov	r2,r6
  8024ec:	dcc00415 	stw	r19,16(sp)
  8024f0:	d80d883a 	mov	r6,sp
  8024f4:	2827883a 	mov	r19,r5
  8024f8:	100b883a 	mov	r5,r2
  8024fc:	dc800315 	stw	r18,12(sp)
  802500:	dfc00515 	stw	ra,20(sp)
  802504:	dc400215 	stw	r17,8(sp)
  802508:	dc000115 	stw	r16,4(sp)
  80250c:	2025883a 	mov	r18,r4
  802510:	08083340 	call	808334 <__sflags>
  802514:	10002726 	beq	r2,zero,8025b4 <_fopen_r+0xd0>
  802518:	9009883a 	mov	r4,r18
  80251c:	1023883a 	mov	r17,r2
  802520:	08023640 	call	802364 <__sfp>
  802524:	1021883a 	mov	r16,r2
  802528:	10002226 	beq	r2,zero,8025b4 <_fopen_r+0xd0>
  80252c:	d9800017 	ldw	r6,0(sp)
  802530:	01c06d84 	movi	r7,438
  802534:	980b883a 	mov	r5,r19
  802538:	9009883a 	mov	r4,r18
  80253c:	08038b80 	call	8038b8 <_open_r>
  802540:	10001916 	blt	r2,zero,8025a8 <_fopen_r+0xc4>
  802544:	8080038d 	sth	r2,14(r16)
  802548:	00802034 	movhi	r2,128
  80254c:	108f5104 	addi	r2,r2,15684
  802550:	80800815 	stw	r2,32(r16)
  802554:	00802034 	movhi	r2,128
  802558:	108f6804 	addi	r2,r2,15776
  80255c:	80800915 	stw	r2,36(r16)
  802560:	00802034 	movhi	r2,128
  802564:	108f8704 	addi	r2,r2,15900
  802568:	80800a15 	stw	r2,40(r16)
  80256c:	00802034 	movhi	r2,128
  802570:	108f9e04 	addi	r2,r2,15992
  802574:	8440030d 	sth	r17,12(r16)
  802578:	84000715 	stw	r16,28(r16)
  80257c:	80800b15 	stw	r2,44(r16)
  802580:	8c40400c 	andi	r17,r17,256
  802584:	88000d1e 	bne	r17,zero,8025bc <_fopen_r+0xd8>
  802588:	8005883a 	mov	r2,r16
  80258c:	dfc00517 	ldw	ra,20(sp)
  802590:	dcc00417 	ldw	r19,16(sp)
  802594:	dc800317 	ldw	r18,12(sp)
  802598:	dc400217 	ldw	r17,8(sp)
  80259c:	dc000117 	ldw	r16,4(sp)
  8025a0:	dec00604 	addi	sp,sp,24
  8025a4:	f800283a 	ret
  8025a8:	08024a40 	call	8024a4 <__sfp_lock_acquire>
  8025ac:	8000030d 	sth	zero,12(r16)
  8025b0:	08024a80 	call	8024a8 <__sfp_lock_release>
  8025b4:	0005883a 	mov	r2,zero
  8025b8:	003ff406 	br	80258c <__alt_mem_onchip_mem+0xff78258c>
  8025bc:	01c00084 	movi	r7,2
  8025c0:	000d883a 	mov	r6,zero
  8025c4:	800b883a 	mov	r5,r16
  8025c8:	9009883a 	mov	r4,r18
  8025cc:	080263c0 	call	80263c <_fseek_r>
  8025d0:	8005883a 	mov	r2,r16
  8025d4:	003fed06 	br	80258c <__alt_mem_onchip_mem+0xff78258c>

008025d8 <fopen>:
  8025d8:	00802074 	movhi	r2,129
  8025dc:	1097f204 	addi	r2,r2,24520
  8025e0:	280d883a 	mov	r6,r5
  8025e4:	200b883a 	mov	r5,r4
  8025e8:	11000017 	ldw	r4,0(r2)
  8025ec:	08024e41 	jmpi	8024e4 <_fopen_r>

008025f0 <_fprintf_r>:
  8025f0:	defffe04 	addi	sp,sp,-8
  8025f4:	2809883a 	mov	r4,r5
  8025f8:	300b883a 	mov	r5,r6
  8025fc:	dfc00015 	stw	ra,0(sp)
  802600:	d9c00115 	stw	r7,4(sp)
  802604:	d9800104 	addi	r6,sp,4
  802608:	08064200 	call	806420 <__vfprintf_internal>
  80260c:	dfc00017 	ldw	ra,0(sp)
  802610:	dec00204 	addi	sp,sp,8
  802614:	f800283a 	ret

00802618 <fprintf>:
  802618:	defffd04 	addi	sp,sp,-12
  80261c:	dfc00015 	stw	ra,0(sp)
  802620:	d9800115 	stw	r6,4(sp)
  802624:	d9c00215 	stw	r7,8(sp)
  802628:	d9800104 	addi	r6,sp,4
  80262c:	08064200 	call	806420 <__vfprintf_internal>
  802630:	dfc00017 	ldw	ra,0(sp)
  802634:	dec00304 	addi	sp,sp,12
  802638:	f800283a 	ret

0080263c <_fseek_r>:
  80263c:	080265c1 	jmpi	80265c <_fseeko_r>

00802640 <fseek>:
  802640:	00802074 	movhi	r2,129
  802644:	1097f204 	addi	r2,r2,24520
  802648:	300f883a 	mov	r7,r6
  80264c:	280d883a 	mov	r6,r5
  802650:	200b883a 	mov	r5,r4
  802654:	11000017 	ldw	r4,0(r2)
  802658:	080265c1 	jmpi	80265c <_fseeko_r>

0080265c <_fseeko_r>:
  80265c:	deffe804 	addi	sp,sp,-96
  802660:	dd401415 	stw	r21,80(sp)
  802664:	dc801115 	stw	r18,68(sp)
  802668:	dc401015 	stw	r17,64(sp)
  80266c:	dc000f15 	stw	r16,60(sp)
  802670:	dfc01715 	stw	ra,92(sp)
  802674:	ddc01615 	stw	r23,88(sp)
  802678:	dd801515 	stw	r22,84(sp)
  80267c:	dd001315 	stw	r20,76(sp)
  802680:	dcc01215 	stw	r19,72(sp)
  802684:	2023883a 	mov	r17,r4
  802688:	2821883a 	mov	r16,r5
  80268c:	302b883a 	mov	r21,r6
  802690:	3825883a 	mov	r18,r7
  802694:	20000226 	beq	r4,zero,8026a0 <_fseeko_r+0x44>
  802698:	20800e17 	ldw	r2,56(r4)
  80269c:	10005a26 	beq	r2,zero,802808 <_fseeko_r+0x1ac>
  8026a0:	8080030b 	ldhu	r2,12(r16)
  8026a4:	00c04204 	movi	r3,264
  8026a8:	1080420c 	andi	r2,r2,264
  8026ac:	10c05b26 	beq	r2,r3,80281c <_fseeko_r+0x1c0>
  8026b0:	85000a17 	ldw	r20,40(r16)
  8026b4:	a000f626 	beq	r20,zero,802a90 <_fseeko_r+0x434>
  8026b8:	00800044 	movi	r2,1
  8026bc:	90803e26 	beq	r18,r2,8027b8 <_fseeko_r+0x15c>
  8026c0:	00800084 	movi	r2,2
  8026c4:	90801026 	beq	r18,r2,802708 <_fseeko_r+0xac>
  8026c8:	90000f26 	beq	r18,zero,802708 <_fseeko_r+0xac>
  8026cc:	00800584 	movi	r2,22
  8026d0:	88800015 	stw	r2,0(r17)
  8026d4:	04ffffc4 	movi	r19,-1
  8026d8:	9805883a 	mov	r2,r19
  8026dc:	dfc01717 	ldw	ra,92(sp)
  8026e0:	ddc01617 	ldw	r23,88(sp)
  8026e4:	dd801517 	ldw	r22,84(sp)
  8026e8:	dd401417 	ldw	r21,80(sp)
  8026ec:	dd001317 	ldw	r20,76(sp)
  8026f0:	dcc01217 	ldw	r19,72(sp)
  8026f4:	dc801117 	ldw	r18,68(sp)
  8026f8:	dc401017 	ldw	r17,64(sp)
  8026fc:	dc000f17 	ldw	r16,60(sp)
  802700:	dec01804 	addi	sp,sp,96
  802704:	f800283a 	ret
  802708:	80800417 	ldw	r2,16(r16)
  80270c:	002f883a 	mov	r23,zero
  802710:	0027883a 	mov	r19,zero
  802714:	1000cb26 	beq	r2,zero,802a44 <_fseeko_r+0x3e8>
  802718:	8080030b 	ldhu	r2,12(r16)
  80271c:	10c2068c 	andi	r3,r2,2074
  802720:	1800071e 	bne	r3,zero,802740 <_fseeko_r+0xe4>
  802724:	10c1000c 	andi	r3,r2,1024
  802728:	1800451e 	bne	r3,zero,802840 <_fseeko_r+0x1e4>
  80272c:	00c02034 	movhi	r3,128
  802730:	18cf8704 	addi	r3,r3,15900
  802734:	a0c0b726 	beq	r20,r3,802a14 <_fseeko_r+0x3b8>
  802738:	10820014 	ori	r2,r2,2048
  80273c:	8080030d 	sth	r2,12(r16)
  802740:	800b883a 	mov	r5,r16
  802744:	8809883a 	mov	r4,r17
  802748:	08082a80 	call	8082a8 <_fflush_r>
  80274c:	1027883a 	mov	r19,r2
  802750:	103fe01e 	bne	r2,zero,8026d4 <__alt_mem_onchip_mem+0xff7826d4>
  802754:	81400717 	ldw	r5,28(r16)
  802758:	900f883a 	mov	r7,r18
  80275c:	a80d883a 	mov	r6,r21
  802760:	8809883a 	mov	r4,r17
  802764:	a03ee83a 	callr	r20
  802768:	00ffffc4 	movi	r3,-1
  80276c:	10ffd926 	beq	r2,r3,8026d4 <__alt_mem_onchip_mem+0xff7826d4>
  802770:	81400c17 	ldw	r5,48(r16)
  802774:	28000526 	beq	r5,zero,80278c <_fseeko_r+0x130>
  802778:	80801004 	addi	r2,r16,64
  80277c:	28800226 	beq	r5,r2,802788 <_fseeko_r+0x12c>
  802780:	8809883a 	mov	r4,r17
  802784:	08085040 	call	808504 <_free_r>
  802788:	80000c15 	stw	zero,48(r16)
  80278c:	8080030b 	ldhu	r2,12(r16)
  802790:	80c00417 	ldw	r3,16(r16)
  802794:	80000115 	stw	zero,4(r16)
  802798:	10bdf7cc 	andi	r2,r2,63455
  80279c:	80c00015 	stw	r3,0(r16)
  8027a0:	8080030d 	sth	r2,12(r16)
  8027a4:	01800204 	movi	r6,8
  8027a8:	000b883a 	mov	r5,zero
  8027ac:	81001704 	addi	r4,r16,92
  8027b0:	08037900 	call	803790 <memset>
  8027b4:	003fc806 	br	8026d8 <__alt_mem_onchip_mem+0xff7826d8>
  8027b8:	800b883a 	mov	r5,r16
  8027bc:	8809883a 	mov	r4,r17
  8027c0:	08082a80 	call	8082a8 <_fflush_r>
  8027c4:	8080030b 	ldhu	r2,12(r16)
  8027c8:	10c4000c 	andi	r3,r2,4096
  8027cc:	18008726 	beq	r3,zero,8029ec <_fseeko_r+0x390>
  8027d0:	84c01417 	ldw	r19,80(r16)
  8027d4:	10c0010c 	andi	r3,r2,4
  8027d8:	1800431e 	bne	r3,zero,8028e8 <_fseeko_r+0x28c>
  8027dc:	1080020c 	andi	r2,r2,8
  8027e0:	10008026 	beq	r2,zero,8029e4 <_fseeko_r+0x388>
  8027e4:	80c00017 	ldw	r3,0(r16)
  8027e8:	80800417 	ldw	r2,16(r16)
  8027ec:	18000226 	beq	r3,zero,8027f8 <_fseeko_r+0x19c>
  8027f0:	1887c83a 	sub	r3,r3,r2
  8027f4:	98e7883a 	add	r19,r19,r3
  8027f8:	aceb883a 	add	r21,r21,r19
  8027fc:	05c00044 	movi	r23,1
  802800:	0025883a 	mov	r18,zero
  802804:	003fc306 	br	802714 <__alt_mem_onchip_mem+0xff782714>
  802808:	08024940 	call	802494 <__sinit>
  80280c:	8080030b 	ldhu	r2,12(r16)
  802810:	00c04204 	movi	r3,264
  802814:	1080420c 	andi	r2,r2,264
  802818:	10ffa51e 	bne	r2,r3,8026b0 <__alt_mem_onchip_mem+0xff7826b0>
  80281c:	800b883a 	mov	r5,r16
  802820:	8809883a 	mov	r4,r17
  802824:	08082a80 	call	8082a8 <_fflush_r>
  802828:	003fa106 	br	8026b0 <__alt_mem_onchip_mem+0xff7826b0>
  80282c:	8080030b 	ldhu	r2,12(r16)
  802830:	00c10004 	movi	r3,1024
  802834:	80c01315 	stw	r3,76(r16)
  802838:	10c4b03a 	or	r2,r2,r3
  80283c:	8080030d 	sth	r2,12(r16)
  802840:	9000311e 	bne	r18,zero,802908 <_fseeko_r+0x2ac>
  802844:	a82d883a 	mov	r22,r21
  802848:	b800371e 	bne	r23,zero,802928 <_fseeko_r+0x2cc>
  80284c:	8080030b 	ldhu	r2,12(r16)
  802850:	1084000c 	andi	r2,r2,4096
  802854:	10007f26 	beq	r2,zero,802a54 <_fseeko_r+0x3f8>
  802858:	80801417 	ldw	r2,80(r16)
  80285c:	81800117 	ldw	r6,4(r16)
  802860:	81400c17 	ldw	r5,48(r16)
  802864:	11a7c83a 	sub	r19,r2,r6
  802868:	28008226 	beq	r5,zero,802a74 <_fseeko_r+0x418>
  80286c:	81c00f17 	ldw	r7,60(r16)
  802870:	99e7c83a 	sub	r19,r19,r7
  802874:	81000e17 	ldw	r4,56(r16)
  802878:	80800417 	ldw	r2,16(r16)
  80287c:	99a7883a 	add	r19,r19,r6
  802880:	2087c83a 	sub	r3,r4,r2
  802884:	98e7c83a 	sub	r19,r19,r3
  802888:	38c7883a 	add	r3,r7,r3
  80288c:	b4c02b16 	blt	r22,r19,80293c <_fseeko_r+0x2e0>
  802890:	98c9883a 	add	r4,r19,r3
  802894:	b100292e 	bgeu	r22,r4,80293c <_fseeko_r+0x2e0>
  802898:	b4e7c83a 	sub	r19,r22,r19
  80289c:	14c5883a 	add	r2,r2,r19
  8028a0:	1ce7c83a 	sub	r19,r3,r19
  8028a4:	80800015 	stw	r2,0(r16)
  8028a8:	84c00115 	stw	r19,4(r16)
  8028ac:	28000526 	beq	r5,zero,8028c4 <_fseeko_r+0x268>
  8028b0:	80801004 	addi	r2,r16,64
  8028b4:	28800226 	beq	r5,r2,8028c0 <_fseeko_r+0x264>
  8028b8:	8809883a 	mov	r4,r17
  8028bc:	08085040 	call	808504 <_free_r>
  8028c0:	80000c15 	stw	zero,48(r16)
  8028c4:	8080030b 	ldhu	r2,12(r16)
  8028c8:	01800204 	movi	r6,8
  8028cc:	000b883a 	mov	r5,zero
  8028d0:	10bff7cc 	andi	r2,r2,65503
  8028d4:	8080030d 	sth	r2,12(r16)
  8028d8:	81001704 	addi	r4,r16,92
  8028dc:	08037900 	call	803790 <memset>
  8028e0:	0027883a 	mov	r19,zero
  8028e4:	003f7c06 	br	8026d8 <__alt_mem_onchip_mem+0xff7826d8>
  8028e8:	80c00117 	ldw	r3,4(r16)
  8028ec:	80800c17 	ldw	r2,48(r16)
  8028f0:	98e7c83a 	sub	r19,r19,r3
  8028f4:	10003b26 	beq	r2,zero,8029e4 <_fseeko_r+0x388>
  8028f8:	80c00f17 	ldw	r3,60(r16)
  8028fc:	80800417 	ldw	r2,16(r16)
  802900:	98e7c83a 	sub	r19,r19,r3
  802904:	003fbc06 	br	8027f8 <__alt_mem_onchip_mem+0xff7827f8>
  802908:	8140038f 	ldh	r5,14(r16)
  80290c:	d80d883a 	mov	r6,sp
  802910:	8809883a 	mov	r4,r17
  802914:	0802abc0 	call	802abc <_fstat_r>
  802918:	103f891e 	bne	r2,zero,802740 <__alt_mem_onchip_mem+0xff782740>
  80291c:	dd800417 	ldw	r22,16(sp)
  802920:	adad883a 	add	r22,r21,r22
  802924:	b83fc926 	beq	r23,zero,80284c <__alt_mem_onchip_mem+0xff78284c>
  802928:	81400c17 	ldw	r5,48(r16)
  80292c:	81800117 	ldw	r6,4(r16)
  802930:	28005026 	beq	r5,zero,802a74 <_fseeko_r+0x418>
  802934:	81c00f17 	ldw	r7,60(r16)
  802938:	003fce06 	br	802874 <__alt_mem_onchip_mem+0xff782874>
  80293c:	84c01317 	ldw	r19,76(r16)
  802940:	81400717 	ldw	r5,28(r16)
  802944:	000f883a 	mov	r7,zero
  802948:	04e7c83a 	sub	r19,zero,r19
  80294c:	9da6703a 	and	r19,r19,r22
  802950:	980d883a 	mov	r6,r19
  802954:	8809883a 	mov	r4,r17
  802958:	a03ee83a 	callr	r20
  80295c:	00ffffc4 	movi	r3,-1
  802960:	10ff7726 	beq	r2,r3,802740 <__alt_mem_onchip_mem+0xff782740>
  802964:	80800417 	ldw	r2,16(r16)
  802968:	81400c17 	ldw	r5,48(r16)
  80296c:	80000115 	stw	zero,4(r16)
  802970:	80800015 	stw	r2,0(r16)
  802974:	28000526 	beq	r5,zero,80298c <_fseeko_r+0x330>
  802978:	80801004 	addi	r2,r16,64
  80297c:	28800226 	beq	r5,r2,802988 <_fseeko_r+0x32c>
  802980:	8809883a 	mov	r4,r17
  802984:	08085040 	call	808504 <_free_r>
  802988:	80000c15 	stw	zero,48(r16)
  80298c:	8080030b 	ldhu	r2,12(r16)
  802990:	b4e7c83a 	sub	r19,r22,r19
  802994:	10bff7cc 	andi	r2,r2,65503
  802998:	8080030d 	sth	r2,12(r16)
  80299c:	98000b26 	beq	r19,zero,8029cc <_fseeko_r+0x370>
  8029a0:	800b883a 	mov	r5,r16
  8029a4:	8809883a 	mov	r4,r17
  8029a8:	0803a940 	call	803a94 <__srefill_r>
  8029ac:	103f641e 	bne	r2,zero,802740 <__alt_mem_onchip_mem+0xff782740>
  8029b0:	80800117 	ldw	r2,4(r16)
  8029b4:	14ff6236 	bltu	r2,r19,802740 <__alt_mem_onchip_mem+0xff782740>
  8029b8:	80c00017 	ldw	r3,0(r16)
  8029bc:	14c5c83a 	sub	r2,r2,r19
  8029c0:	80800115 	stw	r2,4(r16)
  8029c4:	1ce7883a 	add	r19,r3,r19
  8029c8:	84c00015 	stw	r19,0(r16)
  8029cc:	01800204 	movi	r6,8
  8029d0:	000b883a 	mov	r5,zero
  8029d4:	81001704 	addi	r4,r16,92
  8029d8:	08037900 	call	803790 <memset>
  8029dc:	0027883a 	mov	r19,zero
  8029e0:	003f3d06 	br	8026d8 <__alt_mem_onchip_mem+0xff7826d8>
  8029e4:	80800417 	ldw	r2,16(r16)
  8029e8:	003f8306 	br	8027f8 <__alt_mem_onchip_mem+0xff7827f8>
  8029ec:	81400717 	ldw	r5,28(r16)
  8029f0:	900f883a 	mov	r7,r18
  8029f4:	000d883a 	mov	r6,zero
  8029f8:	8809883a 	mov	r4,r17
  8029fc:	a03ee83a 	callr	r20
  802a00:	1027883a 	mov	r19,r2
  802a04:	00bfffc4 	movi	r2,-1
  802a08:	98bf3226 	beq	r19,r2,8026d4 <__alt_mem_onchip_mem+0xff7826d4>
  802a0c:	8080030b 	ldhu	r2,12(r16)
  802a10:	003f7006 	br	8027d4 <__alt_mem_onchip_mem+0xff7827d4>
  802a14:	8140038f 	ldh	r5,14(r16)
  802a18:	283f4716 	blt	r5,zero,802738 <__alt_mem_onchip_mem+0xff782738>
  802a1c:	d80d883a 	mov	r6,sp
  802a20:	8809883a 	mov	r4,r17
  802a24:	0802abc0 	call	802abc <_fstat_r>
  802a28:	1000041e 	bne	r2,zero,802a3c <_fseeko_r+0x3e0>
  802a2c:	d8800117 	ldw	r2,4(sp)
  802a30:	00e00014 	movui	r3,32768
  802a34:	10bc000c 	andi	r2,r2,61440
  802a38:	10ff7c26 	beq	r2,r3,80282c <__alt_mem_onchip_mem+0xff78282c>
  802a3c:	8080030b 	ldhu	r2,12(r16)
  802a40:	003f3d06 	br	802738 <__alt_mem_onchip_mem+0xff782738>
  802a44:	800b883a 	mov	r5,r16
  802a48:	8809883a 	mov	r4,r17
  802a4c:	0802da00 	call	802da0 <__smakebuf_r>
  802a50:	003f3106 	br	802718 <__alt_mem_onchip_mem+0xff782718>
  802a54:	81400717 	ldw	r5,28(r16)
  802a58:	01c00044 	movi	r7,1
  802a5c:	000d883a 	mov	r6,zero
  802a60:	8809883a 	mov	r4,r17
  802a64:	a03ee83a 	callr	r20
  802a68:	00ffffc4 	movi	r3,-1
  802a6c:	10ff7b1e 	bne	r2,r3,80285c <__alt_mem_onchip_mem+0xff78285c>
  802a70:	003f3306 	br	802740 <__alt_mem_onchip_mem+0xff782740>
  802a74:	80c00017 	ldw	r3,0(r16)
  802a78:	80800417 	ldw	r2,16(r16)
  802a7c:	000b883a 	mov	r5,zero
  802a80:	1887c83a 	sub	r3,r3,r2
  802a84:	98e7c83a 	sub	r19,r19,r3
  802a88:	30c7883a 	add	r3,r6,r3
  802a8c:	003f7f06 	br	80288c <__alt_mem_onchip_mem+0xff78288c>
  802a90:	00800744 	movi	r2,29
  802a94:	88800015 	stw	r2,0(r17)
  802a98:	04ffffc4 	movi	r19,-1
  802a9c:	003f0e06 	br	8026d8 <__alt_mem_onchip_mem+0xff7826d8>

00802aa0 <fseeko>:
  802aa0:	00802074 	movhi	r2,129
  802aa4:	1097f204 	addi	r2,r2,24520
  802aa8:	300f883a 	mov	r7,r6
  802aac:	280d883a 	mov	r6,r5
  802ab0:	200b883a 	mov	r5,r4
  802ab4:	11000017 	ldw	r4,0(r2)
  802ab8:	080265c1 	jmpi	80265c <_fseeko_r>

00802abc <_fstat_r>:
  802abc:	defffd04 	addi	sp,sp,-12
  802ac0:	2805883a 	mov	r2,r5
  802ac4:	dc000015 	stw	r16,0(sp)
  802ac8:	04002074 	movhi	r16,129
  802acc:	dc400115 	stw	r17,4(sp)
  802ad0:	841f5304 	addi	r16,r16,32076
  802ad4:	2023883a 	mov	r17,r4
  802ad8:	300b883a 	mov	r5,r6
  802adc:	1009883a 	mov	r4,r2
  802ae0:	dfc00215 	stw	ra,8(sp)
  802ae4:	80000015 	stw	zero,0(r16)
  802ae8:	080fc200 	call	80fc20 <fstat>
  802aec:	00ffffc4 	movi	r3,-1
  802af0:	10c00526 	beq	r2,r3,802b08 <_fstat_r+0x4c>
  802af4:	dfc00217 	ldw	ra,8(sp)
  802af8:	dc400117 	ldw	r17,4(sp)
  802afc:	dc000017 	ldw	r16,0(sp)
  802b00:	dec00304 	addi	sp,sp,12
  802b04:	f800283a 	ret
  802b08:	80c00017 	ldw	r3,0(r16)
  802b0c:	183ff926 	beq	r3,zero,802af4 <__alt_mem_onchip_mem+0xff782af4>
  802b10:	88c00015 	stw	r3,0(r17)
  802b14:	003ff706 	br	802af4 <__alt_mem_onchip_mem+0xff782af4>

00802b18 <_fwalk>:
  802b18:	defff704 	addi	sp,sp,-36
  802b1c:	dd000415 	stw	r20,16(sp)
  802b20:	dfc00815 	stw	ra,32(sp)
  802b24:	ddc00715 	stw	r23,28(sp)
  802b28:	dd800615 	stw	r22,24(sp)
  802b2c:	dd400515 	stw	r21,20(sp)
  802b30:	dcc00315 	stw	r19,12(sp)
  802b34:	dc800215 	stw	r18,8(sp)
  802b38:	dc400115 	stw	r17,4(sp)
  802b3c:	dc000015 	stw	r16,0(sp)
  802b40:	2500b804 	addi	r20,r4,736
  802b44:	a0002326 	beq	r20,zero,802bd4 <_fwalk+0xbc>
  802b48:	282b883a 	mov	r21,r5
  802b4c:	002f883a 	mov	r23,zero
  802b50:	05800044 	movi	r22,1
  802b54:	04ffffc4 	movi	r19,-1
  802b58:	a4400117 	ldw	r17,4(r20)
  802b5c:	a4800217 	ldw	r18,8(r20)
  802b60:	8c7fffc4 	addi	r17,r17,-1
  802b64:	88000d16 	blt	r17,zero,802b9c <_fwalk+0x84>
  802b68:	94000304 	addi	r16,r18,12
  802b6c:	94800384 	addi	r18,r18,14
  802b70:	8080000b 	ldhu	r2,0(r16)
  802b74:	8c7fffc4 	addi	r17,r17,-1
  802b78:	813ffd04 	addi	r4,r16,-12
  802b7c:	b080042e 	bgeu	r22,r2,802b90 <_fwalk+0x78>
  802b80:	9080000f 	ldh	r2,0(r18)
  802b84:	14c00226 	beq	r2,r19,802b90 <_fwalk+0x78>
  802b88:	a83ee83a 	callr	r21
  802b8c:	b8aeb03a 	or	r23,r23,r2
  802b90:	84001a04 	addi	r16,r16,104
  802b94:	94801a04 	addi	r18,r18,104
  802b98:	8cfff51e 	bne	r17,r19,802b70 <__alt_mem_onchip_mem+0xff782b70>
  802b9c:	a5000017 	ldw	r20,0(r20)
  802ba0:	a03fed1e 	bne	r20,zero,802b58 <__alt_mem_onchip_mem+0xff782b58>
  802ba4:	b805883a 	mov	r2,r23
  802ba8:	dfc00817 	ldw	ra,32(sp)
  802bac:	ddc00717 	ldw	r23,28(sp)
  802bb0:	dd800617 	ldw	r22,24(sp)
  802bb4:	dd400517 	ldw	r21,20(sp)
  802bb8:	dd000417 	ldw	r20,16(sp)
  802bbc:	dcc00317 	ldw	r19,12(sp)
  802bc0:	dc800217 	ldw	r18,8(sp)
  802bc4:	dc400117 	ldw	r17,4(sp)
  802bc8:	dc000017 	ldw	r16,0(sp)
  802bcc:	dec00904 	addi	sp,sp,36
  802bd0:	f800283a 	ret
  802bd4:	002f883a 	mov	r23,zero
  802bd8:	003ff206 	br	802ba4 <__alt_mem_onchip_mem+0xff782ba4>

00802bdc <_fwalk_reent>:
  802bdc:	defff704 	addi	sp,sp,-36
  802be0:	dd000415 	stw	r20,16(sp)
  802be4:	dfc00815 	stw	ra,32(sp)
  802be8:	ddc00715 	stw	r23,28(sp)
  802bec:	dd800615 	stw	r22,24(sp)
  802bf0:	dd400515 	stw	r21,20(sp)
  802bf4:	dcc00315 	stw	r19,12(sp)
  802bf8:	dc800215 	stw	r18,8(sp)
  802bfc:	dc400115 	stw	r17,4(sp)
  802c00:	dc000015 	stw	r16,0(sp)
  802c04:	2500b804 	addi	r20,r4,736
  802c08:	a0002326 	beq	r20,zero,802c98 <_fwalk_reent+0xbc>
  802c0c:	282b883a 	mov	r21,r5
  802c10:	2027883a 	mov	r19,r4
  802c14:	002f883a 	mov	r23,zero
  802c18:	05800044 	movi	r22,1
  802c1c:	04bfffc4 	movi	r18,-1
  802c20:	a4400117 	ldw	r17,4(r20)
  802c24:	a4000217 	ldw	r16,8(r20)
  802c28:	8c7fffc4 	addi	r17,r17,-1
  802c2c:	88000c16 	blt	r17,zero,802c60 <_fwalk_reent+0x84>
  802c30:	84000304 	addi	r16,r16,12
  802c34:	8080000b 	ldhu	r2,0(r16)
  802c38:	8c7fffc4 	addi	r17,r17,-1
  802c3c:	817ffd04 	addi	r5,r16,-12
  802c40:	b080052e 	bgeu	r22,r2,802c58 <_fwalk_reent+0x7c>
  802c44:	8080008f 	ldh	r2,2(r16)
  802c48:	9809883a 	mov	r4,r19
  802c4c:	14800226 	beq	r2,r18,802c58 <_fwalk_reent+0x7c>
  802c50:	a83ee83a 	callr	r21
  802c54:	b8aeb03a 	or	r23,r23,r2
  802c58:	84001a04 	addi	r16,r16,104
  802c5c:	8cbff51e 	bne	r17,r18,802c34 <__alt_mem_onchip_mem+0xff782c34>
  802c60:	a5000017 	ldw	r20,0(r20)
  802c64:	a03fee1e 	bne	r20,zero,802c20 <__alt_mem_onchip_mem+0xff782c20>
  802c68:	b805883a 	mov	r2,r23
  802c6c:	dfc00817 	ldw	ra,32(sp)
  802c70:	ddc00717 	ldw	r23,28(sp)
  802c74:	dd800617 	ldw	r22,24(sp)
  802c78:	dd400517 	ldw	r21,20(sp)
  802c7c:	dd000417 	ldw	r20,16(sp)
  802c80:	dcc00317 	ldw	r19,12(sp)
  802c84:	dc800217 	ldw	r18,8(sp)
  802c88:	dc400117 	ldw	r17,4(sp)
  802c8c:	dc000017 	ldw	r16,0(sp)
  802c90:	dec00904 	addi	sp,sp,36
  802c94:	f800283a 	ret
  802c98:	002f883a 	mov	r23,zero
  802c9c:	003ff206 	br	802c68 <__alt_mem_onchip_mem+0xff782c68>

00802ca0 <_fwrite_r>:
  802ca0:	defff504 	addi	sp,sp,-44
  802ca4:	dc800815 	stw	r18,32(sp)
  802ca8:	39a5383a 	mul	r18,r7,r6
  802cac:	d8800304 	addi	r2,sp,12
  802cb0:	d8800015 	stw	r2,0(sp)
  802cb4:	00800044 	movi	r2,1
  802cb8:	dcc00915 	stw	r19,36(sp)
  802cbc:	dc400715 	stw	r17,28(sp)
  802cc0:	dc000615 	stw	r16,24(sp)
  802cc4:	d9400315 	stw	r5,12(sp)
  802cc8:	dfc00a15 	stw	ra,40(sp)
  802ccc:	dc800415 	stw	r18,16(sp)
  802cd0:	dc800215 	stw	r18,8(sp)
  802cd4:	d8800115 	stw	r2,4(sp)
  802cd8:	3027883a 	mov	r19,r6
  802cdc:	3821883a 	mov	r16,r7
  802ce0:	2023883a 	mov	r17,r4
  802ce4:	d9400b17 	ldw	r5,44(sp)
  802ce8:	20000226 	beq	r4,zero,802cf4 <_fwrite_r+0x54>
  802cec:	20800e17 	ldw	r2,56(r4)
  802cf0:	10001a26 	beq	r2,zero,802d5c <_fwrite_r+0xbc>
  802cf4:	2880030b 	ldhu	r2,12(r5)
  802cf8:	10c8000c 	andi	r3,r2,8192
  802cfc:	1800061e 	bne	r3,zero,802d18 <_fwrite_r+0x78>
  802d00:	29001917 	ldw	r4,100(r5)
  802d04:	00f7ffc4 	movi	r3,-8193
  802d08:	10880014 	ori	r2,r2,8192
  802d0c:	20c6703a 	and	r3,r4,r3
  802d10:	2880030d 	sth	r2,12(r5)
  802d14:	28c01915 	stw	r3,100(r5)
  802d18:	d80d883a 	mov	r6,sp
  802d1c:	8809883a 	mov	r4,r17
  802d20:	08088140 	call	808814 <__sfvwrite_r>
  802d24:	10000b26 	beq	r2,zero,802d54 <_fwrite_r+0xb4>
  802d28:	d9000217 	ldw	r4,8(sp)
  802d2c:	980b883a 	mov	r5,r19
  802d30:	9109c83a 	sub	r4,r18,r4
  802d34:	080d25c0 	call	80d25c <__udivsi3>
  802d38:	dfc00a17 	ldw	ra,40(sp)
  802d3c:	dcc00917 	ldw	r19,36(sp)
  802d40:	dc800817 	ldw	r18,32(sp)
  802d44:	dc400717 	ldw	r17,28(sp)
  802d48:	dc000617 	ldw	r16,24(sp)
  802d4c:	dec00b04 	addi	sp,sp,44
  802d50:	f800283a 	ret
  802d54:	8005883a 	mov	r2,r16
  802d58:	003ff706 	br	802d38 <__alt_mem_onchip_mem+0xff782d38>
  802d5c:	d9400515 	stw	r5,20(sp)
  802d60:	08024940 	call	802494 <__sinit>
  802d64:	d9400517 	ldw	r5,20(sp)
  802d68:	003fe206 	br	802cf4 <__alt_mem_onchip_mem+0xff782cf4>

00802d6c <fwrite>:
  802d6c:	defffe04 	addi	sp,sp,-8
  802d70:	00802074 	movhi	r2,129
  802d74:	d9c00015 	stw	r7,0(sp)
  802d78:	1097f204 	addi	r2,r2,24520
  802d7c:	300f883a 	mov	r7,r6
  802d80:	280d883a 	mov	r6,r5
  802d84:	200b883a 	mov	r5,r4
  802d88:	11000017 	ldw	r4,0(r2)
  802d8c:	dfc00115 	stw	ra,4(sp)
  802d90:	0802ca00 	call	802ca0 <_fwrite_r>
  802d94:	dfc00117 	ldw	ra,4(sp)
  802d98:	dec00204 	addi	sp,sp,8
  802d9c:	f800283a 	ret

00802da0 <__smakebuf_r>:
  802da0:	2880030b 	ldhu	r2,12(r5)
  802da4:	10c0008c 	andi	r3,r2,2
  802da8:	1800411e 	bne	r3,zero,802eb0 <__smakebuf_r+0x110>
  802dac:	deffec04 	addi	sp,sp,-80
  802db0:	dc000f15 	stw	r16,60(sp)
  802db4:	2821883a 	mov	r16,r5
  802db8:	2940038f 	ldh	r5,14(r5)
  802dbc:	dc401015 	stw	r17,64(sp)
  802dc0:	dfc01315 	stw	ra,76(sp)
  802dc4:	dcc01215 	stw	r19,72(sp)
  802dc8:	dc801115 	stw	r18,68(sp)
  802dcc:	2023883a 	mov	r17,r4
  802dd0:	28001c16 	blt	r5,zero,802e44 <__smakebuf_r+0xa4>
  802dd4:	d80d883a 	mov	r6,sp
  802dd8:	0802abc0 	call	802abc <_fstat_r>
  802ddc:	10001816 	blt	r2,zero,802e40 <__smakebuf_r+0xa0>
  802de0:	d8800117 	ldw	r2,4(sp)
  802de4:	00e00014 	movui	r3,32768
  802de8:	10bc000c 	andi	r2,r2,61440
  802dec:	14c80020 	cmpeqi	r19,r2,8192
  802df0:	10c03726 	beq	r2,r3,802ed0 <__smakebuf_r+0x130>
  802df4:	80c0030b 	ldhu	r3,12(r16)
  802df8:	18c20014 	ori	r3,r3,2048
  802dfc:	80c0030d 	sth	r3,12(r16)
  802e00:	00c80004 	movi	r3,8192
  802e04:	10c0521e 	bne	r2,r3,802f50 <__smakebuf_r+0x1b0>
  802e08:	8140038f 	ldh	r5,14(r16)
  802e0c:	8809883a 	mov	r4,r17
  802e10:	0808cd00 	call	808cd0 <_isatty_r>
  802e14:	10004c26 	beq	r2,zero,802f48 <__smakebuf_r+0x1a8>
  802e18:	8080030b 	ldhu	r2,12(r16)
  802e1c:	80c010c4 	addi	r3,r16,67
  802e20:	80c00015 	stw	r3,0(r16)
  802e24:	10800054 	ori	r2,r2,1
  802e28:	8080030d 	sth	r2,12(r16)
  802e2c:	00800044 	movi	r2,1
  802e30:	80c00415 	stw	r3,16(r16)
  802e34:	80800515 	stw	r2,20(r16)
  802e38:	04810004 	movi	r18,1024
  802e3c:	00000706 	br	802e5c <__smakebuf_r+0xbc>
  802e40:	8080030b 	ldhu	r2,12(r16)
  802e44:	10c0200c 	andi	r3,r2,128
  802e48:	18001f1e 	bne	r3,zero,802ec8 <__smakebuf_r+0x128>
  802e4c:	04810004 	movi	r18,1024
  802e50:	10820014 	ori	r2,r2,2048
  802e54:	8080030d 	sth	r2,12(r16)
  802e58:	0027883a 	mov	r19,zero
  802e5c:	900b883a 	mov	r5,r18
  802e60:	8809883a 	mov	r4,r17
  802e64:	0802f840 	call	802f84 <_malloc_r>
  802e68:	10002c26 	beq	r2,zero,802f1c <__smakebuf_r+0x17c>
  802e6c:	80c0030b 	ldhu	r3,12(r16)
  802e70:	01002034 	movhi	r4,128
  802e74:	21085304 	addi	r4,r4,8524
  802e78:	89000f15 	stw	r4,60(r17)
  802e7c:	18c02014 	ori	r3,r3,128
  802e80:	80c0030d 	sth	r3,12(r16)
  802e84:	80800015 	stw	r2,0(r16)
  802e88:	80800415 	stw	r2,16(r16)
  802e8c:	84800515 	stw	r18,20(r16)
  802e90:	98001a1e 	bne	r19,zero,802efc <__smakebuf_r+0x15c>
  802e94:	dfc01317 	ldw	ra,76(sp)
  802e98:	dcc01217 	ldw	r19,72(sp)
  802e9c:	dc801117 	ldw	r18,68(sp)
  802ea0:	dc401017 	ldw	r17,64(sp)
  802ea4:	dc000f17 	ldw	r16,60(sp)
  802ea8:	dec01404 	addi	sp,sp,80
  802eac:	f800283a 	ret
  802eb0:	288010c4 	addi	r2,r5,67
  802eb4:	28800015 	stw	r2,0(r5)
  802eb8:	28800415 	stw	r2,16(r5)
  802ebc:	00800044 	movi	r2,1
  802ec0:	28800515 	stw	r2,20(r5)
  802ec4:	f800283a 	ret
  802ec8:	04801004 	movi	r18,64
  802ecc:	003fe006 	br	802e50 <__alt_mem_onchip_mem+0xff782e50>
  802ed0:	81000a17 	ldw	r4,40(r16)
  802ed4:	00c02034 	movhi	r3,128
  802ed8:	18cf8704 	addi	r3,r3,15900
  802edc:	20ffc51e 	bne	r4,r3,802df4 <__alt_mem_onchip_mem+0xff782df4>
  802ee0:	8080030b 	ldhu	r2,12(r16)
  802ee4:	04810004 	movi	r18,1024
  802ee8:	84801315 	stw	r18,76(r16)
  802eec:	1484b03a 	or	r2,r2,r18
  802ef0:	8080030d 	sth	r2,12(r16)
  802ef4:	0027883a 	mov	r19,zero
  802ef8:	003fd806 	br	802e5c <__alt_mem_onchip_mem+0xff782e5c>
  802efc:	8140038f 	ldh	r5,14(r16)
  802f00:	8809883a 	mov	r4,r17
  802f04:	0808cd00 	call	808cd0 <_isatty_r>
  802f08:	103fe226 	beq	r2,zero,802e94 <__alt_mem_onchip_mem+0xff782e94>
  802f0c:	8080030b 	ldhu	r2,12(r16)
  802f10:	10800054 	ori	r2,r2,1
  802f14:	8080030d 	sth	r2,12(r16)
  802f18:	003fde06 	br	802e94 <__alt_mem_onchip_mem+0xff782e94>
  802f1c:	8080030b 	ldhu	r2,12(r16)
  802f20:	10c0800c 	andi	r3,r2,512
  802f24:	183fdb1e 	bne	r3,zero,802e94 <__alt_mem_onchip_mem+0xff782e94>
  802f28:	10800094 	ori	r2,r2,2
  802f2c:	80c010c4 	addi	r3,r16,67
  802f30:	8080030d 	sth	r2,12(r16)
  802f34:	00800044 	movi	r2,1
  802f38:	80c00015 	stw	r3,0(r16)
  802f3c:	80c00415 	stw	r3,16(r16)
  802f40:	80800515 	stw	r2,20(r16)
  802f44:	003fd306 	br	802e94 <__alt_mem_onchip_mem+0xff782e94>
  802f48:	04810004 	movi	r18,1024
  802f4c:	003fc306 	br	802e5c <__alt_mem_onchip_mem+0xff782e5c>
  802f50:	0027883a 	mov	r19,zero
  802f54:	04810004 	movi	r18,1024
  802f58:	003fc006 	br	802e5c <__alt_mem_onchip_mem+0xff782e5c>

00802f5c <malloc>:
  802f5c:	00802074 	movhi	r2,129
  802f60:	1097f204 	addi	r2,r2,24520
  802f64:	200b883a 	mov	r5,r4
  802f68:	11000017 	ldw	r4,0(r2)
  802f6c:	0802f841 	jmpi	802f84 <_malloc_r>

00802f70 <free>:
  802f70:	00802074 	movhi	r2,129
  802f74:	1097f204 	addi	r2,r2,24520
  802f78:	200b883a 	mov	r5,r4
  802f7c:	11000017 	ldw	r4,0(r2)
  802f80:	08085041 	jmpi	808504 <_free_r>

00802f84 <_malloc_r>:
  802f84:	defff504 	addi	sp,sp,-44
  802f88:	dc800315 	stw	r18,12(sp)
  802f8c:	dfc00a15 	stw	ra,40(sp)
  802f90:	df000915 	stw	fp,36(sp)
  802f94:	ddc00815 	stw	r23,32(sp)
  802f98:	dd800715 	stw	r22,28(sp)
  802f9c:	dd400615 	stw	r21,24(sp)
  802fa0:	dd000515 	stw	r20,20(sp)
  802fa4:	dcc00415 	stw	r19,16(sp)
  802fa8:	dc400215 	stw	r17,8(sp)
  802fac:	dc000115 	stw	r16,4(sp)
  802fb0:	288002c4 	addi	r2,r5,11
  802fb4:	00c00584 	movi	r3,22
  802fb8:	2025883a 	mov	r18,r4
  802fbc:	18807f2e 	bgeu	r3,r2,8031bc <_malloc_r+0x238>
  802fc0:	047ffe04 	movi	r17,-8
  802fc4:	1462703a 	and	r17,r2,r17
  802fc8:	8800a316 	blt	r17,zero,803258 <_malloc_r+0x2d4>
  802fcc:	8940a236 	bltu	r17,r5,803258 <_malloc_r+0x2d4>
  802fd0:	08101a80 	call	8101a8 <__malloc_lock>
  802fd4:	00807dc4 	movi	r2,503
  802fd8:	1441e92e 	bgeu	r2,r17,803780 <_malloc_r+0x7fc>
  802fdc:	8804d27a 	srli	r2,r17,9
  802fe0:	1000a126 	beq	r2,zero,803268 <_malloc_r+0x2e4>
  802fe4:	00c00104 	movi	r3,4
  802fe8:	18811e36 	bltu	r3,r2,803464 <_malloc_r+0x4e0>
  802fec:	8804d1ba 	srli	r2,r17,6
  802ff0:	12000e44 	addi	r8,r2,57
  802ff4:	11c00e04 	addi	r7,r2,56
  802ff8:	4209883a 	add	r4,r8,r8
  802ffc:	04c02074 	movhi	r19,129
  803000:	2109883a 	add	r4,r4,r4
  803004:	9cd1cd04 	addi	r19,r19,18228
  803008:	2109883a 	add	r4,r4,r4
  80300c:	9909883a 	add	r4,r19,r4
  803010:	24000117 	ldw	r16,4(r4)
  803014:	213ffe04 	addi	r4,r4,-8
  803018:	24009726 	beq	r4,r16,803278 <_malloc_r+0x2f4>
  80301c:	80800117 	ldw	r2,4(r16)
  803020:	01bfff04 	movi	r6,-4
  803024:	014003c4 	movi	r5,15
  803028:	1184703a 	and	r2,r2,r6
  80302c:	1447c83a 	sub	r3,r2,r17
  803030:	28c00716 	blt	r5,r3,803050 <_malloc_r+0xcc>
  803034:	1800920e 	bge	r3,zero,803280 <_malloc_r+0x2fc>
  803038:	84000317 	ldw	r16,12(r16)
  80303c:	24008e26 	beq	r4,r16,803278 <_malloc_r+0x2f4>
  803040:	80800117 	ldw	r2,4(r16)
  803044:	1184703a 	and	r2,r2,r6
  803048:	1447c83a 	sub	r3,r2,r17
  80304c:	28fff90e 	bge	r5,r3,803034 <__alt_mem_onchip_mem+0xff783034>
  803050:	3809883a 	mov	r4,r7
  803054:	01802074 	movhi	r6,129
  803058:	9c000417 	ldw	r16,16(r19)
  80305c:	3191cd04 	addi	r6,r6,18228
  803060:	32000204 	addi	r8,r6,8
  803064:	82013426 	beq	r16,r8,803538 <_malloc_r+0x5b4>
  803068:	80c00117 	ldw	r3,4(r16)
  80306c:	00bfff04 	movi	r2,-4
  803070:	188e703a 	and	r7,r3,r2
  803074:	3c45c83a 	sub	r2,r7,r17
  803078:	00c003c4 	movi	r3,15
  80307c:	18811f16 	blt	r3,r2,8034fc <_malloc_r+0x578>
  803080:	32000515 	stw	r8,20(r6)
  803084:	32000415 	stw	r8,16(r6)
  803088:	10007f0e 	bge	r2,zero,803288 <_malloc_r+0x304>
  80308c:	00807fc4 	movi	r2,511
  803090:	11c0fd36 	bltu	r2,r7,803488 <_malloc_r+0x504>
  803094:	3806d0fa 	srli	r3,r7,3
  803098:	01c00044 	movi	r7,1
  80309c:	30800117 	ldw	r2,4(r6)
  8030a0:	19400044 	addi	r5,r3,1
  8030a4:	294b883a 	add	r5,r5,r5
  8030a8:	1807d0ba 	srai	r3,r3,2
  8030ac:	294b883a 	add	r5,r5,r5
  8030b0:	294b883a 	add	r5,r5,r5
  8030b4:	298b883a 	add	r5,r5,r6
  8030b8:	38c6983a 	sll	r3,r7,r3
  8030bc:	29c00017 	ldw	r7,0(r5)
  8030c0:	2a7ffe04 	addi	r9,r5,-8
  8030c4:	1886b03a 	or	r3,r3,r2
  8030c8:	82400315 	stw	r9,12(r16)
  8030cc:	81c00215 	stw	r7,8(r16)
  8030d0:	30c00115 	stw	r3,4(r6)
  8030d4:	2c000015 	stw	r16,0(r5)
  8030d8:	3c000315 	stw	r16,12(r7)
  8030dc:	2005d0ba 	srai	r2,r4,2
  8030e0:	01400044 	movi	r5,1
  8030e4:	288a983a 	sll	r5,r5,r2
  8030e8:	19406f36 	bltu	r3,r5,8032a8 <_malloc_r+0x324>
  8030ec:	28c4703a 	and	r2,r5,r3
  8030f0:	10000a1e 	bne	r2,zero,80311c <_malloc_r+0x198>
  8030f4:	00bfff04 	movi	r2,-4
  8030f8:	294b883a 	add	r5,r5,r5
  8030fc:	2088703a 	and	r4,r4,r2
  803100:	28c4703a 	and	r2,r5,r3
  803104:	21000104 	addi	r4,r4,4
  803108:	1000041e 	bne	r2,zero,80311c <_malloc_r+0x198>
  80310c:	294b883a 	add	r5,r5,r5
  803110:	28c4703a 	and	r2,r5,r3
  803114:	21000104 	addi	r4,r4,4
  803118:	103ffc26 	beq	r2,zero,80310c <__alt_mem_onchip_mem+0xff78310c>
  80311c:	02bfff04 	movi	r10,-4
  803120:	024003c4 	movi	r9,15
  803124:	21800044 	addi	r6,r4,1
  803128:	318d883a 	add	r6,r6,r6
  80312c:	318d883a 	add	r6,r6,r6
  803130:	318d883a 	add	r6,r6,r6
  803134:	998d883a 	add	r6,r19,r6
  803138:	333ffe04 	addi	r12,r6,-8
  80313c:	2017883a 	mov	r11,r4
  803140:	31800104 	addi	r6,r6,4
  803144:	34000017 	ldw	r16,0(r6)
  803148:	31fffd04 	addi	r7,r6,-12
  80314c:	81c0041e 	bne	r16,r7,803160 <_malloc_r+0x1dc>
  803150:	0000fb06 	br	803540 <_malloc_r+0x5bc>
  803154:	1801030e 	bge	r3,zero,803564 <_malloc_r+0x5e0>
  803158:	84000317 	ldw	r16,12(r16)
  80315c:	81c0f826 	beq	r16,r7,803540 <_malloc_r+0x5bc>
  803160:	80800117 	ldw	r2,4(r16)
  803164:	1284703a 	and	r2,r2,r10
  803168:	1447c83a 	sub	r3,r2,r17
  80316c:	48fff90e 	bge	r9,r3,803154 <__alt_mem_onchip_mem+0xff783154>
  803170:	80800317 	ldw	r2,12(r16)
  803174:	81000217 	ldw	r4,8(r16)
  803178:	89400054 	ori	r5,r17,1
  80317c:	81400115 	stw	r5,4(r16)
  803180:	20800315 	stw	r2,12(r4)
  803184:	11000215 	stw	r4,8(r2)
  803188:	8463883a 	add	r17,r16,r17
  80318c:	9c400515 	stw	r17,20(r19)
  803190:	9c400415 	stw	r17,16(r19)
  803194:	18800054 	ori	r2,r3,1
  803198:	88800115 	stw	r2,4(r17)
  80319c:	8a000315 	stw	r8,12(r17)
  8031a0:	8a000215 	stw	r8,8(r17)
  8031a4:	88e3883a 	add	r17,r17,r3
  8031a8:	88c00015 	stw	r3,0(r17)
  8031ac:	9009883a 	mov	r4,r18
  8031b0:	08101cc0 	call	8101cc <__malloc_unlock>
  8031b4:	80800204 	addi	r2,r16,8
  8031b8:	00001b06 	br	803228 <_malloc_r+0x2a4>
  8031bc:	04400404 	movi	r17,16
  8031c0:	89402536 	bltu	r17,r5,803258 <_malloc_r+0x2d4>
  8031c4:	08101a80 	call	8101a8 <__malloc_lock>
  8031c8:	00800184 	movi	r2,6
  8031cc:	01000084 	movi	r4,2
  8031d0:	04c02074 	movhi	r19,129
  8031d4:	1085883a 	add	r2,r2,r2
  8031d8:	9cd1cd04 	addi	r19,r19,18228
  8031dc:	1085883a 	add	r2,r2,r2
  8031e0:	9885883a 	add	r2,r19,r2
  8031e4:	14000117 	ldw	r16,4(r2)
  8031e8:	10fffe04 	addi	r3,r2,-8
  8031ec:	80c0d926 	beq	r16,r3,803554 <_malloc_r+0x5d0>
  8031f0:	80c00117 	ldw	r3,4(r16)
  8031f4:	81000317 	ldw	r4,12(r16)
  8031f8:	00bfff04 	movi	r2,-4
  8031fc:	1884703a 	and	r2,r3,r2
  803200:	81400217 	ldw	r5,8(r16)
  803204:	8085883a 	add	r2,r16,r2
  803208:	10c00117 	ldw	r3,4(r2)
  80320c:	29000315 	stw	r4,12(r5)
  803210:	21400215 	stw	r5,8(r4)
  803214:	18c00054 	ori	r3,r3,1
  803218:	10c00115 	stw	r3,4(r2)
  80321c:	9009883a 	mov	r4,r18
  803220:	08101cc0 	call	8101cc <__malloc_unlock>
  803224:	80800204 	addi	r2,r16,8
  803228:	dfc00a17 	ldw	ra,40(sp)
  80322c:	df000917 	ldw	fp,36(sp)
  803230:	ddc00817 	ldw	r23,32(sp)
  803234:	dd800717 	ldw	r22,28(sp)
  803238:	dd400617 	ldw	r21,24(sp)
  80323c:	dd000517 	ldw	r20,20(sp)
  803240:	dcc00417 	ldw	r19,16(sp)
  803244:	dc800317 	ldw	r18,12(sp)
  803248:	dc400217 	ldw	r17,8(sp)
  80324c:	dc000117 	ldw	r16,4(sp)
  803250:	dec00b04 	addi	sp,sp,44
  803254:	f800283a 	ret
  803258:	00800304 	movi	r2,12
  80325c:	90800015 	stw	r2,0(r18)
  803260:	0005883a 	mov	r2,zero
  803264:	003ff006 	br	803228 <__alt_mem_onchip_mem+0xff783228>
  803268:	01002004 	movi	r4,128
  80326c:	02001004 	movi	r8,64
  803270:	01c00fc4 	movi	r7,63
  803274:	003f6106 	br	802ffc <__alt_mem_onchip_mem+0xff782ffc>
  803278:	4009883a 	mov	r4,r8
  80327c:	003f7506 	br	803054 <__alt_mem_onchip_mem+0xff783054>
  803280:	81000317 	ldw	r4,12(r16)
  803284:	003fde06 	br	803200 <__alt_mem_onchip_mem+0xff783200>
  803288:	81c5883a 	add	r2,r16,r7
  80328c:	11400117 	ldw	r5,4(r2)
  803290:	9009883a 	mov	r4,r18
  803294:	29400054 	ori	r5,r5,1
  803298:	11400115 	stw	r5,4(r2)
  80329c:	08101cc0 	call	8101cc <__malloc_unlock>
  8032a0:	80800204 	addi	r2,r16,8
  8032a4:	003fe006 	br	803228 <__alt_mem_onchip_mem+0xff783228>
  8032a8:	9c000217 	ldw	r16,8(r19)
  8032ac:	00bfff04 	movi	r2,-4
  8032b0:	85800117 	ldw	r22,4(r16)
  8032b4:	b0ac703a 	and	r22,r22,r2
  8032b8:	b4400336 	bltu	r22,r17,8032c8 <_malloc_r+0x344>
  8032bc:	b445c83a 	sub	r2,r22,r17
  8032c0:	00c003c4 	movi	r3,15
  8032c4:	18805d16 	blt	r3,r2,80343c <_malloc_r+0x4b8>
  8032c8:	05c02074 	movhi	r23,129
  8032cc:	00802074 	movhi	r2,129
  8032d0:	109f5604 	addi	r2,r2,32088
  8032d4:	bdd7f304 	addi	r23,r23,24524
  8032d8:	15400017 	ldw	r21,0(r2)
  8032dc:	b8c00017 	ldw	r3,0(r23)
  8032e0:	00bfffc4 	movi	r2,-1
  8032e4:	858d883a 	add	r6,r16,r22
  8032e8:	8d6b883a 	add	r21,r17,r21
  8032ec:	1880ea26 	beq	r3,r2,803698 <_malloc_r+0x714>
  8032f0:	ad4403c4 	addi	r21,r21,4111
  8032f4:	00bc0004 	movi	r2,-4096
  8032f8:	a8aa703a 	and	r21,r21,r2
  8032fc:	a80b883a 	mov	r5,r21
  803300:	9009883a 	mov	r4,r18
  803304:	d9800015 	stw	r6,0(sp)
  803308:	0803cf00 	call	803cf0 <_sbrk_r>
  80330c:	1029883a 	mov	r20,r2
  803310:	00bfffc4 	movi	r2,-1
  803314:	d9800017 	ldw	r6,0(sp)
  803318:	a080e826 	beq	r20,r2,8036bc <_malloc_r+0x738>
  80331c:	a180a636 	bltu	r20,r6,8035b8 <_malloc_r+0x634>
  803320:	07002074 	movhi	fp,129
  803324:	e71f6104 	addi	fp,fp,32132
  803328:	e0800017 	ldw	r2,0(fp)
  80332c:	a887883a 	add	r3,r21,r2
  803330:	e0c00015 	stw	r3,0(fp)
  803334:	3500e626 	beq	r6,r20,8036d0 <_malloc_r+0x74c>
  803338:	b9000017 	ldw	r4,0(r23)
  80333c:	00bfffc4 	movi	r2,-1
  803340:	2080ee26 	beq	r4,r2,8036fc <_malloc_r+0x778>
  803344:	a185c83a 	sub	r2,r20,r6
  803348:	10c5883a 	add	r2,r2,r3
  80334c:	e0800015 	stw	r2,0(fp)
  803350:	a0c001cc 	andi	r3,r20,7
  803354:	1800bc26 	beq	r3,zero,803648 <_malloc_r+0x6c4>
  803358:	a0e9c83a 	sub	r20,r20,r3
  80335c:	00840204 	movi	r2,4104
  803360:	a5000204 	addi	r20,r20,8
  803364:	10c7c83a 	sub	r3,r2,r3
  803368:	a545883a 	add	r2,r20,r21
  80336c:	1083ffcc 	andi	r2,r2,4095
  803370:	18abc83a 	sub	r21,r3,r2
  803374:	a80b883a 	mov	r5,r21
  803378:	9009883a 	mov	r4,r18
  80337c:	0803cf00 	call	803cf0 <_sbrk_r>
  803380:	00ffffc4 	movi	r3,-1
  803384:	10c0e126 	beq	r2,r3,80370c <_malloc_r+0x788>
  803388:	1505c83a 	sub	r2,r2,r20
  80338c:	1545883a 	add	r2,r2,r21
  803390:	10800054 	ori	r2,r2,1
  803394:	e0c00017 	ldw	r3,0(fp)
  803398:	9d000215 	stw	r20,8(r19)
  80339c:	a0800115 	stw	r2,4(r20)
  8033a0:	a8c7883a 	add	r3,r21,r3
  8033a4:	e0c00015 	stw	r3,0(fp)
  8033a8:	84c00e26 	beq	r16,r19,8033e4 <_malloc_r+0x460>
  8033ac:	018003c4 	movi	r6,15
  8033b0:	3580a72e 	bgeu	r6,r22,803650 <_malloc_r+0x6cc>
  8033b4:	81400117 	ldw	r5,4(r16)
  8033b8:	013ffe04 	movi	r4,-8
  8033bc:	b0bffd04 	addi	r2,r22,-12
  8033c0:	1104703a 	and	r2,r2,r4
  8033c4:	2900004c 	andi	r4,r5,1
  8033c8:	2088b03a 	or	r4,r4,r2
  8033cc:	81000115 	stw	r4,4(r16)
  8033d0:	01400144 	movi	r5,5
  8033d4:	8089883a 	add	r4,r16,r2
  8033d8:	21400115 	stw	r5,4(r4)
  8033dc:	21400215 	stw	r5,8(r4)
  8033e0:	3080cd36 	bltu	r6,r2,803718 <_malloc_r+0x794>
  8033e4:	00802074 	movhi	r2,129
  8033e8:	109f5504 	addi	r2,r2,32084
  8033ec:	11000017 	ldw	r4,0(r2)
  8033f0:	20c0012e 	bgeu	r4,r3,8033f8 <_malloc_r+0x474>
  8033f4:	10c00015 	stw	r3,0(r2)
  8033f8:	00802074 	movhi	r2,129
  8033fc:	109f5404 	addi	r2,r2,32080
  803400:	11000017 	ldw	r4,0(r2)
  803404:	9c000217 	ldw	r16,8(r19)
  803408:	20c0012e 	bgeu	r4,r3,803410 <_malloc_r+0x48c>
  80340c:	10c00015 	stw	r3,0(r2)
  803410:	80c00117 	ldw	r3,4(r16)
  803414:	00bfff04 	movi	r2,-4
  803418:	1886703a 	and	r3,r3,r2
  80341c:	1c45c83a 	sub	r2,r3,r17
  803420:	1c400236 	bltu	r3,r17,80342c <_malloc_r+0x4a8>
  803424:	00c003c4 	movi	r3,15
  803428:	18800416 	blt	r3,r2,80343c <_malloc_r+0x4b8>
  80342c:	9009883a 	mov	r4,r18
  803430:	08101cc0 	call	8101cc <__malloc_unlock>
  803434:	0005883a 	mov	r2,zero
  803438:	003f7b06 	br	803228 <__alt_mem_onchip_mem+0xff783228>
  80343c:	88c00054 	ori	r3,r17,1
  803440:	80c00115 	stw	r3,4(r16)
  803444:	8463883a 	add	r17,r16,r17
  803448:	10800054 	ori	r2,r2,1
  80344c:	9c400215 	stw	r17,8(r19)
  803450:	88800115 	stw	r2,4(r17)
  803454:	9009883a 	mov	r4,r18
  803458:	08101cc0 	call	8101cc <__malloc_unlock>
  80345c:	80800204 	addi	r2,r16,8
  803460:	003f7106 	br	803228 <__alt_mem_onchip_mem+0xff783228>
  803464:	00c00504 	movi	r3,20
  803468:	18804a2e 	bgeu	r3,r2,803594 <_malloc_r+0x610>
  80346c:	00c01504 	movi	r3,84
  803470:	18806e36 	bltu	r3,r2,80362c <_malloc_r+0x6a8>
  803474:	8804d33a 	srli	r2,r17,12
  803478:	12001bc4 	addi	r8,r2,111
  80347c:	11c01b84 	addi	r7,r2,110
  803480:	4209883a 	add	r4,r8,r8
  803484:	003edd06 	br	802ffc <__alt_mem_onchip_mem+0xff782ffc>
  803488:	3804d27a 	srli	r2,r7,9
  80348c:	00c00104 	movi	r3,4
  803490:	1880442e 	bgeu	r3,r2,8035a4 <_malloc_r+0x620>
  803494:	00c00504 	movi	r3,20
  803498:	18808136 	bltu	r3,r2,8036a0 <_malloc_r+0x71c>
  80349c:	11401704 	addi	r5,r2,92
  8034a0:	10c016c4 	addi	r3,r2,91
  8034a4:	294b883a 	add	r5,r5,r5
  8034a8:	294b883a 	add	r5,r5,r5
  8034ac:	294b883a 	add	r5,r5,r5
  8034b0:	994b883a 	add	r5,r19,r5
  8034b4:	28800017 	ldw	r2,0(r5)
  8034b8:	01802074 	movhi	r6,129
  8034bc:	297ffe04 	addi	r5,r5,-8
  8034c0:	3191cd04 	addi	r6,r6,18228
  8034c4:	28806526 	beq	r5,r2,80365c <_malloc_r+0x6d8>
  8034c8:	01bfff04 	movi	r6,-4
  8034cc:	10c00117 	ldw	r3,4(r2)
  8034d0:	1986703a 	and	r3,r3,r6
  8034d4:	38c0022e 	bgeu	r7,r3,8034e0 <_malloc_r+0x55c>
  8034d8:	10800217 	ldw	r2,8(r2)
  8034dc:	28bffb1e 	bne	r5,r2,8034cc <__alt_mem_onchip_mem+0xff7834cc>
  8034e0:	11400317 	ldw	r5,12(r2)
  8034e4:	98c00117 	ldw	r3,4(r19)
  8034e8:	81400315 	stw	r5,12(r16)
  8034ec:	80800215 	stw	r2,8(r16)
  8034f0:	2c000215 	stw	r16,8(r5)
  8034f4:	14000315 	stw	r16,12(r2)
  8034f8:	003ef806 	br	8030dc <__alt_mem_onchip_mem+0xff7830dc>
  8034fc:	88c00054 	ori	r3,r17,1
  803500:	80c00115 	stw	r3,4(r16)
  803504:	8463883a 	add	r17,r16,r17
  803508:	34400515 	stw	r17,20(r6)
  80350c:	34400415 	stw	r17,16(r6)
  803510:	10c00054 	ori	r3,r2,1
  803514:	8a000315 	stw	r8,12(r17)
  803518:	8a000215 	stw	r8,8(r17)
  80351c:	88c00115 	stw	r3,4(r17)
  803520:	88a3883a 	add	r17,r17,r2
  803524:	88800015 	stw	r2,0(r17)
  803528:	9009883a 	mov	r4,r18
  80352c:	08101cc0 	call	8101cc <__malloc_unlock>
  803530:	80800204 	addi	r2,r16,8
  803534:	003f3c06 	br	803228 <__alt_mem_onchip_mem+0xff783228>
  803538:	30c00117 	ldw	r3,4(r6)
  80353c:	003ee706 	br	8030dc <__alt_mem_onchip_mem+0xff7830dc>
  803540:	5ac00044 	addi	r11,r11,1
  803544:	588000cc 	andi	r2,r11,3
  803548:	31800204 	addi	r6,r6,8
  80354c:	103efd1e 	bne	r2,zero,803144 <__alt_mem_onchip_mem+0xff783144>
  803550:	00002406 	br	8035e4 <_malloc_r+0x660>
  803554:	14000317 	ldw	r16,12(r2)
  803558:	143f251e 	bne	r2,r16,8031f0 <__alt_mem_onchip_mem+0xff7831f0>
  80355c:	21000084 	addi	r4,r4,2
  803560:	003ebc06 	br	803054 <__alt_mem_onchip_mem+0xff783054>
  803564:	8085883a 	add	r2,r16,r2
  803568:	10c00117 	ldw	r3,4(r2)
  80356c:	81000317 	ldw	r4,12(r16)
  803570:	81400217 	ldw	r5,8(r16)
  803574:	18c00054 	ori	r3,r3,1
  803578:	10c00115 	stw	r3,4(r2)
  80357c:	29000315 	stw	r4,12(r5)
  803580:	21400215 	stw	r5,8(r4)
  803584:	9009883a 	mov	r4,r18
  803588:	08101cc0 	call	8101cc <__malloc_unlock>
  80358c:	80800204 	addi	r2,r16,8
  803590:	003f2506 	br	803228 <__alt_mem_onchip_mem+0xff783228>
  803594:	12001704 	addi	r8,r2,92
  803598:	11c016c4 	addi	r7,r2,91
  80359c:	4209883a 	add	r4,r8,r8
  8035a0:	003e9606 	br	802ffc <__alt_mem_onchip_mem+0xff782ffc>
  8035a4:	3804d1ba 	srli	r2,r7,6
  8035a8:	11400e44 	addi	r5,r2,57
  8035ac:	10c00e04 	addi	r3,r2,56
  8035b0:	294b883a 	add	r5,r5,r5
  8035b4:	003fbc06 	br	8034a8 <__alt_mem_onchip_mem+0xff7834a8>
  8035b8:	84ff5926 	beq	r16,r19,803320 <__alt_mem_onchip_mem+0xff783320>
  8035bc:	00802074 	movhi	r2,129
  8035c0:	1091cd04 	addi	r2,r2,18228
  8035c4:	14000217 	ldw	r16,8(r2)
  8035c8:	00bfff04 	movi	r2,-4
  8035cc:	80c00117 	ldw	r3,4(r16)
  8035d0:	1886703a 	and	r3,r3,r2
  8035d4:	003f9106 	br	80341c <__alt_mem_onchip_mem+0xff78341c>
  8035d8:	60800217 	ldw	r2,8(r12)
  8035dc:	213fffc4 	addi	r4,r4,-1
  8035e0:	1300651e 	bne	r2,r12,803778 <_malloc_r+0x7f4>
  8035e4:	208000cc 	andi	r2,r4,3
  8035e8:	633ffe04 	addi	r12,r12,-8
  8035ec:	103ffa1e 	bne	r2,zero,8035d8 <__alt_mem_onchip_mem+0xff7835d8>
  8035f0:	98800117 	ldw	r2,4(r19)
  8035f4:	0146303a 	nor	r3,zero,r5
  8035f8:	1884703a 	and	r2,r3,r2
  8035fc:	98800115 	stw	r2,4(r19)
  803600:	294b883a 	add	r5,r5,r5
  803604:	117f2836 	bltu	r2,r5,8032a8 <__alt_mem_onchip_mem+0xff7832a8>
  803608:	283f2726 	beq	r5,zero,8032a8 <__alt_mem_onchip_mem+0xff7832a8>
  80360c:	2886703a 	and	r3,r5,r2
  803610:	5809883a 	mov	r4,r11
  803614:	183ec31e 	bne	r3,zero,803124 <__alt_mem_onchip_mem+0xff783124>
  803618:	294b883a 	add	r5,r5,r5
  80361c:	2886703a 	and	r3,r5,r2
  803620:	21000104 	addi	r4,r4,4
  803624:	183ffc26 	beq	r3,zero,803618 <__alt_mem_onchip_mem+0xff783618>
  803628:	003ebe06 	br	803124 <__alt_mem_onchip_mem+0xff783124>
  80362c:	00c05504 	movi	r3,340
  803630:	18801236 	bltu	r3,r2,80367c <_malloc_r+0x6f8>
  803634:	8804d3fa 	srli	r2,r17,15
  803638:	12001e04 	addi	r8,r2,120
  80363c:	11c01dc4 	addi	r7,r2,119
  803640:	4209883a 	add	r4,r8,r8
  803644:	003e6d06 	br	802ffc <__alt_mem_onchip_mem+0xff782ffc>
  803648:	00c40004 	movi	r3,4096
  80364c:	003f4606 	br	803368 <__alt_mem_onchip_mem+0xff783368>
  803650:	00800044 	movi	r2,1
  803654:	a0800115 	stw	r2,4(r20)
  803658:	003f7406 	br	80342c <__alt_mem_onchip_mem+0xff78342c>
  80365c:	1805d0ba 	srai	r2,r3,2
  803660:	01c00044 	movi	r7,1
  803664:	30c00117 	ldw	r3,4(r6)
  803668:	388e983a 	sll	r7,r7,r2
  80366c:	2805883a 	mov	r2,r5
  803670:	38c6b03a 	or	r3,r7,r3
  803674:	30c00115 	stw	r3,4(r6)
  803678:	003f9b06 	br	8034e8 <__alt_mem_onchip_mem+0xff7834e8>
  80367c:	00c15504 	movi	r3,1364
  803680:	18801a36 	bltu	r3,r2,8036ec <_malloc_r+0x768>
  803684:	8804d4ba 	srli	r2,r17,18
  803688:	12001f44 	addi	r8,r2,125
  80368c:	11c01f04 	addi	r7,r2,124
  803690:	4209883a 	add	r4,r8,r8
  803694:	003e5906 	br	802ffc <__alt_mem_onchip_mem+0xff782ffc>
  803698:	ad400404 	addi	r21,r21,16
  80369c:	003f1706 	br	8032fc <__alt_mem_onchip_mem+0xff7832fc>
  8036a0:	00c01504 	movi	r3,84
  8036a4:	18802336 	bltu	r3,r2,803734 <_malloc_r+0x7b0>
  8036a8:	3804d33a 	srli	r2,r7,12
  8036ac:	11401bc4 	addi	r5,r2,111
  8036b0:	10c01b84 	addi	r3,r2,110
  8036b4:	294b883a 	add	r5,r5,r5
  8036b8:	003f7b06 	br	8034a8 <__alt_mem_onchip_mem+0xff7834a8>
  8036bc:	9c000217 	ldw	r16,8(r19)
  8036c0:	00bfff04 	movi	r2,-4
  8036c4:	80c00117 	ldw	r3,4(r16)
  8036c8:	1886703a 	and	r3,r3,r2
  8036cc:	003f5306 	br	80341c <__alt_mem_onchip_mem+0xff78341c>
  8036d0:	3083ffcc 	andi	r2,r6,4095
  8036d4:	103f181e 	bne	r2,zero,803338 <__alt_mem_onchip_mem+0xff783338>
  8036d8:	99000217 	ldw	r4,8(r19)
  8036dc:	b545883a 	add	r2,r22,r21
  8036e0:	10800054 	ori	r2,r2,1
  8036e4:	20800115 	stw	r2,4(r4)
  8036e8:	003f3e06 	br	8033e4 <__alt_mem_onchip_mem+0xff7833e4>
  8036ec:	01003f84 	movi	r4,254
  8036f0:	02001fc4 	movi	r8,127
  8036f4:	01c01f84 	movi	r7,126
  8036f8:	003e4006 	br	802ffc <__alt_mem_onchip_mem+0xff782ffc>
  8036fc:	00802074 	movhi	r2,129
  803700:	1097f304 	addi	r2,r2,24524
  803704:	15000015 	stw	r20,0(r2)
  803708:	003f1106 	br	803350 <__alt_mem_onchip_mem+0xff783350>
  80370c:	00800044 	movi	r2,1
  803710:	002b883a 	mov	r21,zero
  803714:	003f1f06 	br	803394 <__alt_mem_onchip_mem+0xff783394>
  803718:	81400204 	addi	r5,r16,8
  80371c:	9009883a 	mov	r4,r18
  803720:	08085040 	call	808504 <_free_r>
  803724:	00802074 	movhi	r2,129
  803728:	109f6104 	addi	r2,r2,32132
  80372c:	10c00017 	ldw	r3,0(r2)
  803730:	003f2c06 	br	8033e4 <__alt_mem_onchip_mem+0xff7833e4>
  803734:	00c05504 	movi	r3,340
  803738:	18800536 	bltu	r3,r2,803750 <_malloc_r+0x7cc>
  80373c:	3804d3fa 	srli	r2,r7,15
  803740:	11401e04 	addi	r5,r2,120
  803744:	10c01dc4 	addi	r3,r2,119
  803748:	294b883a 	add	r5,r5,r5
  80374c:	003f5606 	br	8034a8 <__alt_mem_onchip_mem+0xff7834a8>
  803750:	00c15504 	movi	r3,1364
  803754:	18800536 	bltu	r3,r2,80376c <_malloc_r+0x7e8>
  803758:	3804d4ba 	srli	r2,r7,18
  80375c:	11401f44 	addi	r5,r2,125
  803760:	10c01f04 	addi	r3,r2,124
  803764:	294b883a 	add	r5,r5,r5
  803768:	003f4f06 	br	8034a8 <__alt_mem_onchip_mem+0xff7834a8>
  80376c:	01403f84 	movi	r5,254
  803770:	00c01f84 	movi	r3,126
  803774:	003f4c06 	br	8034a8 <__alt_mem_onchip_mem+0xff7834a8>
  803778:	98800117 	ldw	r2,4(r19)
  80377c:	003fa006 	br	803600 <__alt_mem_onchip_mem+0xff783600>
  803780:	8808d0fa 	srli	r4,r17,3
  803784:	20800044 	addi	r2,r4,1
  803788:	1085883a 	add	r2,r2,r2
  80378c:	003e9006 	br	8031d0 <__alt_mem_onchip_mem+0xff7831d0>

00803790 <memset>:
  803790:	20c000cc 	andi	r3,r4,3
  803794:	2005883a 	mov	r2,r4
  803798:	18004426 	beq	r3,zero,8038ac <memset+0x11c>
  80379c:	31ffffc4 	addi	r7,r6,-1
  8037a0:	30004026 	beq	r6,zero,8038a4 <memset+0x114>
  8037a4:	2813883a 	mov	r9,r5
  8037a8:	200d883a 	mov	r6,r4
  8037ac:	2007883a 	mov	r3,r4
  8037b0:	00000406 	br	8037c4 <memset+0x34>
  8037b4:	3a3fffc4 	addi	r8,r7,-1
  8037b8:	31800044 	addi	r6,r6,1
  8037bc:	38003926 	beq	r7,zero,8038a4 <memset+0x114>
  8037c0:	400f883a 	mov	r7,r8
  8037c4:	18c00044 	addi	r3,r3,1
  8037c8:	32400005 	stb	r9,0(r6)
  8037cc:	1a0000cc 	andi	r8,r3,3
  8037d0:	403ff81e 	bne	r8,zero,8037b4 <__alt_mem_onchip_mem+0xff7837b4>
  8037d4:	010000c4 	movi	r4,3
  8037d8:	21c02d2e 	bgeu	r4,r7,803890 <memset+0x100>
  8037dc:	29003fcc 	andi	r4,r5,255
  8037e0:	200c923a 	slli	r6,r4,8
  8037e4:	3108b03a 	or	r4,r6,r4
  8037e8:	200c943a 	slli	r6,r4,16
  8037ec:	218cb03a 	or	r6,r4,r6
  8037f0:	010003c4 	movi	r4,15
  8037f4:	21c0182e 	bgeu	r4,r7,803858 <memset+0xc8>
  8037f8:	3b3ffc04 	addi	r12,r7,-16
  8037fc:	6018d13a 	srli	r12,r12,4
  803800:	1a000104 	addi	r8,r3,4
  803804:	1ac00204 	addi	r11,r3,8
  803808:	6008913a 	slli	r4,r12,4
  80380c:	1a800304 	addi	r10,r3,12
  803810:	1813883a 	mov	r9,r3
  803814:	21000504 	addi	r4,r4,20
  803818:	1909883a 	add	r4,r3,r4
  80381c:	49800015 	stw	r6,0(r9)
  803820:	41800015 	stw	r6,0(r8)
  803824:	59800015 	stw	r6,0(r11)
  803828:	51800015 	stw	r6,0(r10)
  80382c:	42000404 	addi	r8,r8,16
  803830:	4a400404 	addi	r9,r9,16
  803834:	5ac00404 	addi	r11,r11,16
  803838:	52800404 	addi	r10,r10,16
  80383c:	413ff71e 	bne	r8,r4,80381c <__alt_mem_onchip_mem+0xff78381c>
  803840:	63000044 	addi	r12,r12,1
  803844:	6018913a 	slli	r12,r12,4
  803848:	39c003cc 	andi	r7,r7,15
  80384c:	010000c4 	movi	r4,3
  803850:	1b07883a 	add	r3,r3,r12
  803854:	21c00e2e 	bgeu	r4,r7,803890 <memset+0x100>
  803858:	1813883a 	mov	r9,r3
  80385c:	3811883a 	mov	r8,r7
  803860:	010000c4 	movi	r4,3
  803864:	49800015 	stw	r6,0(r9)
  803868:	423fff04 	addi	r8,r8,-4
  80386c:	4a400104 	addi	r9,r9,4
  803870:	223ffc36 	bltu	r4,r8,803864 <__alt_mem_onchip_mem+0xff783864>
  803874:	393fff04 	addi	r4,r7,-4
  803878:	2008d0ba 	srli	r4,r4,2
  80387c:	39c000cc 	andi	r7,r7,3
  803880:	21000044 	addi	r4,r4,1
  803884:	2109883a 	add	r4,r4,r4
  803888:	2109883a 	add	r4,r4,r4
  80388c:	1907883a 	add	r3,r3,r4
  803890:	38000526 	beq	r7,zero,8038a8 <memset+0x118>
  803894:	19cf883a 	add	r7,r3,r7
  803898:	19400005 	stb	r5,0(r3)
  80389c:	18c00044 	addi	r3,r3,1
  8038a0:	38fffd1e 	bne	r7,r3,803898 <__alt_mem_onchip_mem+0xff783898>
  8038a4:	f800283a 	ret
  8038a8:	f800283a 	ret
  8038ac:	2007883a 	mov	r3,r4
  8038b0:	300f883a 	mov	r7,r6
  8038b4:	003fc706 	br	8037d4 <__alt_mem_onchip_mem+0xff7837d4>

008038b8 <_open_r>:
  8038b8:	defffd04 	addi	sp,sp,-12
  8038bc:	2805883a 	mov	r2,r5
  8038c0:	dc000015 	stw	r16,0(sp)
  8038c4:	04002074 	movhi	r16,129
  8038c8:	dc400115 	stw	r17,4(sp)
  8038cc:	300b883a 	mov	r5,r6
  8038d0:	841f5304 	addi	r16,r16,32076
  8038d4:	2023883a 	mov	r17,r4
  8038d8:	380d883a 	mov	r6,r7
  8038dc:	1009883a 	mov	r4,r2
  8038e0:	dfc00215 	stw	ra,8(sp)
  8038e4:	80000015 	stw	zero,0(r16)
  8038e8:	08102f00 	call	8102f0 <open>
  8038ec:	00ffffc4 	movi	r3,-1
  8038f0:	10c00526 	beq	r2,r3,803908 <_open_r+0x50>
  8038f4:	dfc00217 	ldw	ra,8(sp)
  8038f8:	dc400117 	ldw	r17,4(sp)
  8038fc:	dc000017 	ldw	r16,0(sp)
  803900:	dec00304 	addi	sp,sp,12
  803904:	f800283a 	ret
  803908:	80c00017 	ldw	r3,0(r16)
  80390c:	183ff926 	beq	r3,zero,8038f4 <__alt_mem_onchip_mem+0xff7838f4>
  803910:	88c00015 	stw	r3,0(r17)
  803914:	003ff706 	br	8038f4 <__alt_mem_onchip_mem+0xff7838f4>

00803918 <_printf_r>:
  803918:	defffd04 	addi	sp,sp,-12
  80391c:	2805883a 	mov	r2,r5
  803920:	dfc00015 	stw	ra,0(sp)
  803924:	d9800115 	stw	r6,4(sp)
  803928:	d9c00215 	stw	r7,8(sp)
  80392c:	21400217 	ldw	r5,8(r4)
  803930:	d9c00104 	addi	r7,sp,4
  803934:	100d883a 	mov	r6,r2
  803938:	08042280 	call	804228 <___vfprintf_internal_r>
  80393c:	dfc00017 	ldw	ra,0(sp)
  803940:	dec00304 	addi	sp,sp,12
  803944:	f800283a 	ret

00803948 <printf>:
  803948:	defffc04 	addi	sp,sp,-16
  80394c:	dfc00015 	stw	ra,0(sp)
  803950:	d9400115 	stw	r5,4(sp)
  803954:	d9800215 	stw	r6,8(sp)
  803958:	d9c00315 	stw	r7,12(sp)
  80395c:	00802074 	movhi	r2,129
  803960:	1097f204 	addi	r2,r2,24520
  803964:	10800017 	ldw	r2,0(r2)
  803968:	200b883a 	mov	r5,r4
  80396c:	d9800104 	addi	r6,sp,4
  803970:	11000217 	ldw	r4,8(r2)
  803974:	08064200 	call	806420 <__vfprintf_internal>
  803978:	dfc00017 	ldw	ra,0(sp)
  80397c:	dec00404 	addi	sp,sp,16
  803980:	f800283a 	ret

00803984 <_putchar_r>:
  803984:	21800217 	ldw	r6,8(r4)
  803988:	080a1e41 	jmpi	80a1e4 <_putc_r>

0080398c <putchar>:
  80398c:	00802074 	movhi	r2,129
  803990:	1097f204 	addi	r2,r2,24520
  803994:	200b883a 	mov	r5,r4
  803998:	11000017 	ldw	r4,0(r2)
  80399c:	21800217 	ldw	r6,8(r4)
  8039a0:	080a1e41 	jmpi	80a1e4 <_putc_r>

008039a4 <_puts_r>:
  8039a4:	defff604 	addi	sp,sp,-40
  8039a8:	dc000715 	stw	r16,28(sp)
  8039ac:	2021883a 	mov	r16,r4
  8039b0:	2809883a 	mov	r4,r5
  8039b4:	dc400815 	stw	r17,32(sp)
  8039b8:	dfc00915 	stw	ra,36(sp)
  8039bc:	2823883a 	mov	r17,r5
  8039c0:	0803e800 	call	803e80 <strlen>
  8039c4:	10c00044 	addi	r3,r2,1
  8039c8:	d8800115 	stw	r2,4(sp)
  8039cc:	00802074 	movhi	r2,129
  8039d0:	108f6104 	addi	r2,r2,15748
  8039d4:	d8800215 	stw	r2,8(sp)
  8039d8:	00800044 	movi	r2,1
  8039dc:	d8800315 	stw	r2,12(sp)
  8039e0:	00800084 	movi	r2,2
  8039e4:	dc400015 	stw	r17,0(sp)
  8039e8:	d8c00615 	stw	r3,24(sp)
  8039ec:	dec00415 	stw	sp,16(sp)
  8039f0:	d8800515 	stw	r2,20(sp)
  8039f4:	80000226 	beq	r16,zero,803a00 <_puts_r+0x5c>
  8039f8:	80800e17 	ldw	r2,56(r16)
  8039fc:	10001426 	beq	r2,zero,803a50 <_puts_r+0xac>
  803a00:	81400217 	ldw	r5,8(r16)
  803a04:	2880030b 	ldhu	r2,12(r5)
  803a08:	10c8000c 	andi	r3,r2,8192
  803a0c:	1800061e 	bne	r3,zero,803a28 <_puts_r+0x84>
  803a10:	29001917 	ldw	r4,100(r5)
  803a14:	00f7ffc4 	movi	r3,-8193
  803a18:	10880014 	ori	r2,r2,8192
  803a1c:	20c6703a 	and	r3,r4,r3
  803a20:	2880030d 	sth	r2,12(r5)
  803a24:	28c01915 	stw	r3,100(r5)
  803a28:	d9800404 	addi	r6,sp,16
  803a2c:	8009883a 	mov	r4,r16
  803a30:	08088140 	call	808814 <__sfvwrite_r>
  803a34:	1000091e 	bne	r2,zero,803a5c <_puts_r+0xb8>
  803a38:	00800284 	movi	r2,10
  803a3c:	dfc00917 	ldw	ra,36(sp)
  803a40:	dc400817 	ldw	r17,32(sp)
  803a44:	dc000717 	ldw	r16,28(sp)
  803a48:	dec00a04 	addi	sp,sp,40
  803a4c:	f800283a 	ret
  803a50:	8009883a 	mov	r4,r16
  803a54:	08024940 	call	802494 <__sinit>
  803a58:	003fe906 	br	803a00 <__alt_mem_onchip_mem+0xff783a00>
  803a5c:	00bfffc4 	movi	r2,-1
  803a60:	003ff606 	br	803a3c <__alt_mem_onchip_mem+0xff783a3c>

00803a64 <puts>:
  803a64:	00802074 	movhi	r2,129
  803a68:	1097f204 	addi	r2,r2,24520
  803a6c:	200b883a 	mov	r5,r4
  803a70:	11000017 	ldw	r4,0(r2)
  803a74:	08039a41 	jmpi	8039a4 <_puts_r>

00803a78 <lflush>:
  803a78:	2080030b 	ldhu	r2,12(r4)
  803a7c:	00c00244 	movi	r3,9
  803a80:	1080024c 	andi	r2,r2,9
  803a84:	10c00226 	beq	r2,r3,803a90 <lflush+0x18>
  803a88:	0005883a 	mov	r2,zero
  803a8c:	f800283a 	ret
  803a90:	08083041 	jmpi	808304 <fflush>

00803a94 <__srefill_r>:
  803a94:	defffc04 	addi	sp,sp,-16
  803a98:	dc400115 	stw	r17,4(sp)
  803a9c:	dc000015 	stw	r16,0(sp)
  803aa0:	dfc00315 	stw	ra,12(sp)
  803aa4:	dc800215 	stw	r18,8(sp)
  803aa8:	2023883a 	mov	r17,r4
  803aac:	2821883a 	mov	r16,r5
  803ab0:	20000226 	beq	r4,zero,803abc <__srefill_r+0x28>
  803ab4:	20800e17 	ldw	r2,56(r4)
  803ab8:	10003c26 	beq	r2,zero,803bac <__srefill_r+0x118>
  803abc:	80c0030b 	ldhu	r3,12(r16)
  803ac0:	1908000c 	andi	r4,r3,8192
  803ac4:	1805883a 	mov	r2,r3
  803ac8:	2000071e 	bne	r4,zero,803ae8 <__srefill_r+0x54>
  803acc:	81001917 	ldw	r4,100(r16)
  803ad0:	18880014 	ori	r2,r3,8192
  803ad4:	00f7ffc4 	movi	r3,-8193
  803ad8:	20c8703a 	and	r4,r4,r3
  803adc:	8080030d 	sth	r2,12(r16)
  803ae0:	1007883a 	mov	r3,r2
  803ae4:	81001915 	stw	r4,100(r16)
  803ae8:	80000115 	stw	zero,4(r16)
  803aec:	1100080c 	andi	r4,r2,32
  803af0:	2000571e 	bne	r4,zero,803c50 <__srefill_r+0x1bc>
  803af4:	1100010c 	andi	r4,r2,4
  803af8:	20001f26 	beq	r4,zero,803b78 <__srefill_r+0xe4>
  803afc:	81400c17 	ldw	r5,48(r16)
  803b00:	28000826 	beq	r5,zero,803b24 <__srefill_r+0x90>
  803b04:	80801004 	addi	r2,r16,64
  803b08:	28800226 	beq	r5,r2,803b14 <__srefill_r+0x80>
  803b0c:	8809883a 	mov	r4,r17
  803b10:	08085040 	call	808504 <_free_r>
  803b14:	80800f17 	ldw	r2,60(r16)
  803b18:	80000c15 	stw	zero,48(r16)
  803b1c:	80800115 	stw	r2,4(r16)
  803b20:	1000391e 	bne	r2,zero,803c08 <__srefill_r+0x174>
  803b24:	80800417 	ldw	r2,16(r16)
  803b28:	10004b26 	beq	r2,zero,803c58 <__srefill_r+0x1c4>
  803b2c:	8480030b 	ldhu	r18,12(r16)
  803b30:	908000cc 	andi	r2,r18,3
  803b34:	10001f1e 	bne	r2,zero,803bb4 <__srefill_r+0x120>
  803b38:	81800417 	ldw	r6,16(r16)
  803b3c:	80800817 	ldw	r2,32(r16)
  803b40:	81c00517 	ldw	r7,20(r16)
  803b44:	81400717 	ldw	r5,28(r16)
  803b48:	81800015 	stw	r6,0(r16)
  803b4c:	8809883a 	mov	r4,r17
  803b50:	103ee83a 	callr	r2
  803b54:	80800115 	stw	r2,4(r16)
  803b58:	00800e0e 	bge	zero,r2,803b94 <__srefill_r+0x100>
  803b5c:	0005883a 	mov	r2,zero
  803b60:	dfc00317 	ldw	ra,12(sp)
  803b64:	dc800217 	ldw	r18,8(sp)
  803b68:	dc400117 	ldw	r17,4(sp)
  803b6c:	dc000017 	ldw	r16,0(sp)
  803b70:	dec00404 	addi	sp,sp,16
  803b74:	f800283a 	ret
  803b78:	1100040c 	andi	r4,r2,16
  803b7c:	20003026 	beq	r4,zero,803c40 <__srefill_r+0x1ac>
  803b80:	1080020c 	andi	r2,r2,8
  803b84:	1000241e 	bne	r2,zero,803c18 <__srefill_r+0x184>
  803b88:	18c00114 	ori	r3,r3,4
  803b8c:	80c0030d 	sth	r3,12(r16)
  803b90:	003fe406 	br	803b24 <__alt_mem_onchip_mem+0xff783b24>
  803b94:	80c0030b 	ldhu	r3,12(r16)
  803b98:	1000161e 	bne	r2,zero,803bf4 <__srefill_r+0x160>
  803b9c:	18c00814 	ori	r3,r3,32
  803ba0:	00bfffc4 	movi	r2,-1
  803ba4:	80c0030d 	sth	r3,12(r16)
  803ba8:	003fed06 	br	803b60 <__alt_mem_onchip_mem+0xff783b60>
  803bac:	08024940 	call	802494 <__sinit>
  803bb0:	003fc206 	br	803abc <__alt_mem_onchip_mem+0xff783abc>
  803bb4:	00802074 	movhi	r2,129
  803bb8:	1097f104 	addi	r2,r2,24516
  803bbc:	11000017 	ldw	r4,0(r2)
  803bc0:	01402034 	movhi	r5,128
  803bc4:	00800044 	movi	r2,1
  803bc8:	294e9e04 	addi	r5,r5,14968
  803bcc:	8080030d 	sth	r2,12(r16)
  803bd0:	0802b180 	call	802b18 <_fwalk>
  803bd4:	00800244 	movi	r2,9
  803bd8:	8480030d 	sth	r18,12(r16)
  803bdc:	9480024c 	andi	r18,r18,9
  803be0:	90bfd51e 	bne	r18,r2,803b38 <__alt_mem_onchip_mem+0xff783b38>
  803be4:	800b883a 	mov	r5,r16
  803be8:	8809883a 	mov	r4,r17
  803bec:	080808c0 	call	80808c <__sflush_r>
  803bf0:	003fd106 	br	803b38 <__alt_mem_onchip_mem+0xff783b38>
  803bf4:	18c01014 	ori	r3,r3,64
  803bf8:	80000115 	stw	zero,4(r16)
  803bfc:	00bfffc4 	movi	r2,-1
  803c00:	80c0030d 	sth	r3,12(r16)
  803c04:	003fd606 	br	803b60 <__alt_mem_onchip_mem+0xff783b60>
  803c08:	80c00e17 	ldw	r3,56(r16)
  803c0c:	0005883a 	mov	r2,zero
  803c10:	80c00015 	stw	r3,0(r16)
  803c14:	003fd206 	br	803b60 <__alt_mem_onchip_mem+0xff783b60>
  803c18:	800b883a 	mov	r5,r16
  803c1c:	8809883a 	mov	r4,r17
  803c20:	08082a80 	call	8082a8 <_fflush_r>
  803c24:	10000a1e 	bne	r2,zero,803c50 <__srefill_r+0x1bc>
  803c28:	8080030b 	ldhu	r2,12(r16)
  803c2c:	00fffdc4 	movi	r3,-9
  803c30:	80000215 	stw	zero,8(r16)
  803c34:	1886703a 	and	r3,r3,r2
  803c38:	80000615 	stw	zero,24(r16)
  803c3c:	003fd206 	br	803b88 <__alt_mem_onchip_mem+0xff783b88>
  803c40:	00800244 	movi	r2,9
  803c44:	88800015 	stw	r2,0(r17)
  803c48:	18c01014 	ori	r3,r3,64
  803c4c:	80c0030d 	sth	r3,12(r16)
  803c50:	00bfffc4 	movi	r2,-1
  803c54:	003fc206 	br	803b60 <__alt_mem_onchip_mem+0xff783b60>
  803c58:	800b883a 	mov	r5,r16
  803c5c:	8809883a 	mov	r4,r17
  803c60:	0802da00 	call	802da0 <__smakebuf_r>
  803c64:	003fb106 	br	803b2c <__alt_mem_onchip_mem+0xff783b2c>

00803c68 <__srget_r>:
  803c68:	defffd04 	addi	sp,sp,-12
  803c6c:	dc400115 	stw	r17,4(sp)
  803c70:	dc000015 	stw	r16,0(sp)
  803c74:	dfc00215 	stw	ra,8(sp)
  803c78:	2023883a 	mov	r17,r4
  803c7c:	2821883a 	mov	r16,r5
  803c80:	20000226 	beq	r4,zero,803c8c <__srget_r+0x24>
  803c84:	20800e17 	ldw	r2,56(r4)
  803c88:	10001026 	beq	r2,zero,803ccc <__srget_r+0x64>
  803c8c:	800b883a 	mov	r5,r16
  803c90:	8809883a 	mov	r4,r17
  803c94:	0803a940 	call	803a94 <__srefill_r>
  803c98:	10000e1e 	bne	r2,zero,803cd4 <__srget_r+0x6c>
  803c9c:	80c00017 	ldw	r3,0(r16)
  803ca0:	80800117 	ldw	r2,4(r16)
  803ca4:	19000044 	addi	r4,r3,1
  803ca8:	10bfffc4 	addi	r2,r2,-1
  803cac:	80800115 	stw	r2,4(r16)
  803cb0:	81000015 	stw	r4,0(r16)
  803cb4:	18800003 	ldbu	r2,0(r3)
  803cb8:	dfc00217 	ldw	ra,8(sp)
  803cbc:	dc400117 	ldw	r17,4(sp)
  803cc0:	dc000017 	ldw	r16,0(sp)
  803cc4:	dec00304 	addi	sp,sp,12
  803cc8:	f800283a 	ret
  803ccc:	08024940 	call	802494 <__sinit>
  803cd0:	003fee06 	br	803c8c <__alt_mem_onchip_mem+0xff783c8c>
  803cd4:	00bfffc4 	movi	r2,-1
  803cd8:	003ff706 	br	803cb8 <__alt_mem_onchip_mem+0xff783cb8>

00803cdc <__srget>:
  803cdc:	00802074 	movhi	r2,129
  803ce0:	1097f204 	addi	r2,r2,24520
  803ce4:	200b883a 	mov	r5,r4
  803ce8:	11000017 	ldw	r4,0(r2)
  803cec:	0803c681 	jmpi	803c68 <__srget_r>

00803cf0 <_sbrk_r>:
  803cf0:	defffd04 	addi	sp,sp,-12
  803cf4:	dc000015 	stw	r16,0(sp)
  803cf8:	04002074 	movhi	r16,129
  803cfc:	dc400115 	stw	r17,4(sp)
  803d00:	841f5304 	addi	r16,r16,32076
  803d04:	2023883a 	mov	r17,r4
  803d08:	2809883a 	mov	r4,r5
  803d0c:	dfc00215 	stw	ra,8(sp)
  803d10:	80000015 	stw	zero,0(r16)
  803d14:	08105e00 	call	8105e0 <sbrk>
  803d18:	00ffffc4 	movi	r3,-1
  803d1c:	10c00526 	beq	r2,r3,803d34 <_sbrk_r+0x44>
  803d20:	dfc00217 	ldw	ra,8(sp)
  803d24:	dc400117 	ldw	r17,4(sp)
  803d28:	dc000017 	ldw	r16,0(sp)
  803d2c:	dec00304 	addi	sp,sp,12
  803d30:	f800283a 	ret
  803d34:	80c00017 	ldw	r3,0(r16)
  803d38:	183ff926 	beq	r3,zero,803d20 <__alt_mem_onchip_mem+0xff783d20>
  803d3c:	88c00015 	stw	r3,0(r17)
  803d40:	003ff706 	br	803d20 <__alt_mem_onchip_mem+0xff783d20>

00803d44 <__sread>:
  803d44:	defffe04 	addi	sp,sp,-8
  803d48:	dc000015 	stw	r16,0(sp)
  803d4c:	2821883a 	mov	r16,r5
  803d50:	2940038f 	ldh	r5,14(r5)
  803d54:	dfc00115 	stw	ra,4(sp)
  803d58:	080a34c0 	call	80a34c <_read_r>
  803d5c:	10000716 	blt	r2,zero,803d7c <__sread+0x38>
  803d60:	80c01417 	ldw	r3,80(r16)
  803d64:	1887883a 	add	r3,r3,r2
  803d68:	80c01415 	stw	r3,80(r16)
  803d6c:	dfc00117 	ldw	ra,4(sp)
  803d70:	dc000017 	ldw	r16,0(sp)
  803d74:	dec00204 	addi	sp,sp,8
  803d78:	f800283a 	ret
  803d7c:	80c0030b 	ldhu	r3,12(r16)
  803d80:	18fbffcc 	andi	r3,r3,61439
  803d84:	80c0030d 	sth	r3,12(r16)
  803d88:	dfc00117 	ldw	ra,4(sp)
  803d8c:	dc000017 	ldw	r16,0(sp)
  803d90:	dec00204 	addi	sp,sp,8
  803d94:	f800283a 	ret

00803d98 <__seofread>:
  803d98:	0005883a 	mov	r2,zero
  803d9c:	f800283a 	ret

00803da0 <__swrite>:
  803da0:	2880030b 	ldhu	r2,12(r5)
  803da4:	defffb04 	addi	sp,sp,-20
  803da8:	dcc00315 	stw	r19,12(sp)
  803dac:	dc800215 	stw	r18,8(sp)
  803db0:	dc400115 	stw	r17,4(sp)
  803db4:	dc000015 	stw	r16,0(sp)
  803db8:	dfc00415 	stw	ra,16(sp)
  803dbc:	10c0400c 	andi	r3,r2,256
  803dc0:	2821883a 	mov	r16,r5
  803dc4:	2023883a 	mov	r17,r4
  803dc8:	3025883a 	mov	r18,r6
  803dcc:	3827883a 	mov	r19,r7
  803dd0:	18000526 	beq	r3,zero,803de8 <__swrite+0x48>
  803dd4:	2940038f 	ldh	r5,14(r5)
  803dd8:	01c00084 	movi	r7,2
  803ddc:	000d883a 	mov	r6,zero
  803de0:	0808e000 	call	808e00 <_lseek_r>
  803de4:	8080030b 	ldhu	r2,12(r16)
  803de8:	8140038f 	ldh	r5,14(r16)
  803dec:	10bbffcc 	andi	r2,r2,61439
  803df0:	980f883a 	mov	r7,r19
  803df4:	900d883a 	mov	r6,r18
  803df8:	8809883a 	mov	r4,r17
  803dfc:	8080030d 	sth	r2,12(r16)
  803e00:	dfc00417 	ldw	ra,16(sp)
  803e04:	dcc00317 	ldw	r19,12(sp)
  803e08:	dc800217 	ldw	r18,8(sp)
  803e0c:	dc400117 	ldw	r17,4(sp)
  803e10:	dc000017 	ldw	r16,0(sp)
  803e14:	dec00504 	addi	sp,sp,20
  803e18:	08064f81 	jmpi	8064f8 <_write_r>

00803e1c <__sseek>:
  803e1c:	defffe04 	addi	sp,sp,-8
  803e20:	dc000015 	stw	r16,0(sp)
  803e24:	2821883a 	mov	r16,r5
  803e28:	2940038f 	ldh	r5,14(r5)
  803e2c:	dfc00115 	stw	ra,4(sp)
  803e30:	0808e000 	call	808e00 <_lseek_r>
  803e34:	00ffffc4 	movi	r3,-1
  803e38:	10c00826 	beq	r2,r3,803e5c <__sseek+0x40>
  803e3c:	80c0030b 	ldhu	r3,12(r16)
  803e40:	80801415 	stw	r2,80(r16)
  803e44:	18c40014 	ori	r3,r3,4096
  803e48:	80c0030d 	sth	r3,12(r16)
  803e4c:	dfc00117 	ldw	ra,4(sp)
  803e50:	dc000017 	ldw	r16,0(sp)
  803e54:	dec00204 	addi	sp,sp,8
  803e58:	f800283a 	ret
  803e5c:	80c0030b 	ldhu	r3,12(r16)
  803e60:	18fbffcc 	andi	r3,r3,61439
  803e64:	80c0030d 	sth	r3,12(r16)
  803e68:	dfc00117 	ldw	ra,4(sp)
  803e6c:	dc000017 	ldw	r16,0(sp)
  803e70:	dec00204 	addi	sp,sp,8
  803e74:	f800283a 	ret

00803e78 <__sclose>:
  803e78:	2940038f 	ldh	r5,14(r5)
  803e7c:	08066ac1 	jmpi	8066ac <_close_r>

00803e80 <strlen>:
  803e80:	208000cc 	andi	r2,r4,3
  803e84:	10002026 	beq	r2,zero,803f08 <strlen+0x88>
  803e88:	20800007 	ldb	r2,0(r4)
  803e8c:	10002026 	beq	r2,zero,803f10 <strlen+0x90>
  803e90:	2005883a 	mov	r2,r4
  803e94:	00000206 	br	803ea0 <strlen+0x20>
  803e98:	10c00007 	ldb	r3,0(r2)
  803e9c:	18001826 	beq	r3,zero,803f00 <strlen+0x80>
  803ea0:	10800044 	addi	r2,r2,1
  803ea4:	10c000cc 	andi	r3,r2,3
  803ea8:	183ffb1e 	bne	r3,zero,803e98 <__alt_mem_onchip_mem+0xff783e98>
  803eac:	10c00017 	ldw	r3,0(r2)
  803eb0:	01ffbff4 	movhi	r7,65279
  803eb4:	39ffbfc4 	addi	r7,r7,-257
  803eb8:	00ca303a 	nor	r5,zero,r3
  803ebc:	01a02074 	movhi	r6,32897
  803ec0:	19c7883a 	add	r3,r3,r7
  803ec4:	31a02004 	addi	r6,r6,-32640
  803ec8:	1946703a 	and	r3,r3,r5
  803ecc:	1986703a 	and	r3,r3,r6
  803ed0:	1800091e 	bne	r3,zero,803ef8 <strlen+0x78>
  803ed4:	10800104 	addi	r2,r2,4
  803ed8:	10c00017 	ldw	r3,0(r2)
  803edc:	19cb883a 	add	r5,r3,r7
  803ee0:	00c6303a 	nor	r3,zero,r3
  803ee4:	28c6703a 	and	r3,r5,r3
  803ee8:	1986703a 	and	r3,r3,r6
  803eec:	183ff926 	beq	r3,zero,803ed4 <__alt_mem_onchip_mem+0xff783ed4>
  803ef0:	00000106 	br	803ef8 <strlen+0x78>
  803ef4:	10800044 	addi	r2,r2,1
  803ef8:	10c00007 	ldb	r3,0(r2)
  803efc:	183ffd1e 	bne	r3,zero,803ef4 <__alt_mem_onchip_mem+0xff783ef4>
  803f00:	1105c83a 	sub	r2,r2,r4
  803f04:	f800283a 	ret
  803f08:	2005883a 	mov	r2,r4
  803f0c:	003fe706 	br	803eac <__alt_mem_onchip_mem+0xff783eac>
  803f10:	0005883a 	mov	r2,zero
  803f14:	f800283a 	ret

00803f18 <strtok>:
  803f18:	00802074 	movhi	r2,129
  803f1c:	1097f204 	addi	r2,r2,24520
  803f20:	11800017 	ldw	r6,0(r2)
  803f24:	01c00044 	movi	r7,1
  803f28:	31801704 	addi	r6,r6,92
  803f2c:	0803f301 	jmpi	803f30 <__strtok_r>

00803f30 <__strtok_r>:
  803f30:	20001f26 	beq	r4,zero,803fb0 <__strtok_r+0x80>
  803f34:	2005883a 	mov	r2,r4
  803f38:	22400007 	ldb	r9,0(r4)
  803f3c:	2807883a 	mov	r3,r5
  803f40:	21000044 	addi	r4,r4,1
  803f44:	00000106 	br	803f4c <__strtok_r+0x1c>
  803f48:	4a001226 	beq	r9,r8,803f94 <__strtok_r+0x64>
  803f4c:	1a000007 	ldb	r8,0(r3)
  803f50:	18c00044 	addi	r3,r3,1
  803f54:	403ffc1e 	bne	r8,zero,803f48 <__alt_mem_onchip_mem+0xff783f48>
  803f58:	48001926 	beq	r9,zero,803fc0 <__strtok_r+0x90>
  803f5c:	22000007 	ldb	r8,0(r4)
  803f60:	2013883a 	mov	r9,r4
  803f64:	21000044 	addi	r4,r4,1
  803f68:	2015883a 	mov	r10,r4
  803f6c:	2807883a 	mov	r3,r5
  803f70:	00000106 	br	803f78 <__strtok_r+0x48>
  803f74:	383ff926 	beq	r7,zero,803f5c <__alt_mem_onchip_mem+0xff783f5c>
  803f78:	19c00007 	ldb	r7,0(r3)
  803f7c:	18c00044 	addi	r3,r3,1
  803f80:	41fffc1e 	bne	r8,r7,803f74 <__alt_mem_onchip_mem+0xff783f74>
  803f84:	40000726 	beq	r8,zero,803fa4 <__strtok_r+0x74>
  803f88:	48000005 	stb	zero,0(r9)
  803f8c:	32800015 	stw	r10,0(r6)
  803f90:	f800283a 	ret
  803f94:	383fe71e 	bne	r7,zero,803f34 <__alt_mem_onchip_mem+0xff783f34>
  803f98:	31000015 	stw	r4,0(r6)
  803f9c:	10000005 	stb	zero,0(r2)
  803fa0:	f800283a 	ret
  803fa4:	0015883a 	mov	r10,zero
  803fa8:	32800015 	stw	r10,0(r6)
  803fac:	f800283a 	ret
  803fb0:	31000017 	ldw	r4,0(r6)
  803fb4:	203fdf1e 	bne	r4,zero,803f34 <__alt_mem_onchip_mem+0xff783f34>
  803fb8:	0005883a 	mov	r2,zero
  803fbc:	f800283a 	ret
  803fc0:	30000015 	stw	zero,0(r6)
  803fc4:	0005883a 	mov	r2,zero
  803fc8:	f800283a 	ret

00803fcc <strtok_r>:
  803fcc:	01c00044 	movi	r7,1
  803fd0:	0803f301 	jmpi	803f30 <__strtok_r>

00803fd4 <_strtol_r>:
  803fd4:	00802074 	movhi	r2,129
  803fd8:	defff404 	addi	sp,sp,-48
  803fdc:	1097f504 	addi	r2,r2,24532
  803fe0:	dd400715 	stw	r21,28(sp)
  803fe4:	15400017 	ldw	r21,0(r2)
  803fe8:	dd800815 	stw	r22,32(sp)
  803fec:	dd000615 	stw	r20,24(sp)
  803ff0:	dcc00515 	stw	r19,20(sp)
  803ff4:	d9000015 	stw	r4,0(sp)
  803ff8:	dfc00b15 	stw	ra,44(sp)
  803ffc:	df000a15 	stw	fp,40(sp)
  804000:	ddc00915 	stw	r23,36(sp)
  804004:	dc800415 	stw	r18,16(sp)
  804008:	dc400315 	stw	r17,12(sp)
  80400c:	dc000215 	stw	r16,8(sp)
  804010:	2829883a 	mov	r20,r5
  804014:	3027883a 	mov	r19,r6
  804018:	382d883a 	mov	r22,r7
  80401c:	2809883a 	mov	r4,r5
  804020:	24000003 	ldbu	r16,0(r4)
  804024:	24400044 	addi	r17,r4,1
  804028:	2007883a 	mov	r3,r4
  80402c:	ac05883a 	add	r2,r21,r16
  804030:	10800043 	ldbu	r2,1(r2)
  804034:	8809883a 	mov	r4,r17
  804038:	1080020c 	andi	r2,r2,8
  80403c:	103ff81e 	bne	r2,zero,804020 <__alt_mem_onchip_mem+0xff784020>
  804040:	00800b44 	movi	r2,45
  804044:	80805826 	beq	r16,r2,8041a8 <_strtol_r+0x1d4>
  804048:	00800ac4 	movi	r2,43
  80404c:	80805a26 	beq	r16,r2,8041b8 <_strtol_r+0x1e4>
  804050:	0039883a 	mov	fp,zero
  804054:	b0004426 	beq	r22,zero,804168 <_strtol_r+0x194>
  804058:	00800404 	movi	r2,16
  80405c:	b0806026 	beq	r22,r2,8041e0 <_strtol_r+0x20c>
  804060:	b02f883a 	mov	r23,r22
  804064:	00a00034 	movhi	r2,32768
  804068:	e025003a 	cmpeq	r18,fp,zero
  80406c:	14a5c83a 	sub	r18,r2,r18
  804070:	b80b883a 	mov	r5,r23
  804074:	9009883a 	mov	r4,r18
  804078:	080d2c00 	call	80d2c0 <__umodsi3>
  80407c:	b80b883a 	mov	r5,r23
  804080:	9009883a 	mov	r4,r18
  804084:	d8800115 	stw	r2,4(sp)
  804088:	080d25c0 	call	80d25c <__udivsi3>
  80408c:	ac07883a 	add	r3,r21,r16
  804090:	18c00043 	ldbu	r3,1(r3)
  804094:	880b883a 	mov	r5,r17
  804098:	000d883a 	mov	r6,zero
  80409c:	1a00010c 	andi	r8,r3,4
  8040a0:	0009883a 	mov	r4,zero
  8040a4:	02800044 	movi	r10,1
  8040a8:	027fffc4 	movi	r9,-1
  8040ac:	d9c00117 	ldw	r7,4(sp)
  8040b0:	40000e26 	beq	r8,zero,8040ec <_strtol_r+0x118>
  8040b4:	843ff404 	addi	r16,r16,-48
  8040b8:	8580120e 	bge	r16,r22,804104 <_strtol_r+0x130>
  8040bc:	32400526 	beq	r6,r9,8040d4 <_strtol_r+0x100>
  8040c0:	11002536 	bltu	r2,r4,804158 <_strtol_r+0x184>
  8040c4:	20802326 	beq	r4,r2,804154 <_strtol_r+0x180>
  8040c8:	25c9383a 	mul	r4,r4,r23
  8040cc:	01800044 	movi	r6,1
  8040d0:	8109883a 	add	r4,r16,r4
  8040d4:	2c000003 	ldbu	r16,0(r5)
  8040d8:	29400044 	addi	r5,r5,1
  8040dc:	ac07883a 	add	r3,r21,r16
  8040e0:	18c00043 	ldbu	r3,1(r3)
  8040e4:	1a00010c 	andi	r8,r3,4
  8040e8:	403ff21e 	bne	r8,zero,8040b4 <__alt_mem_onchip_mem+0xff7840b4>
  8040ec:	18c000cc 	andi	r3,r3,3
  8040f0:	18000426 	beq	r3,zero,804104 <_strtol_r+0x130>
  8040f4:	1a801a26 	beq	r3,r10,804160 <_strtol_r+0x18c>
  8040f8:	00c015c4 	movi	r3,87
  8040fc:	80e1c83a 	sub	r16,r16,r3
  804100:	85bfee16 	blt	r16,r22,8040bc <__alt_mem_onchip_mem+0xff7840bc>
  804104:	00bfffc4 	movi	r2,-1
  804108:	30801e26 	beq	r6,r2,804184 <_strtol_r+0x1b0>
  80410c:	e0001b1e 	bne	fp,zero,80417c <_strtol_r+0x1a8>
  804110:	2005883a 	mov	r2,r4
  804114:	98000326 	beq	r19,zero,804124 <_strtol_r+0x150>
  804118:	3000211e 	bne	r6,zero,8041a0 <_strtol_r+0x1cc>
  80411c:	a00b883a 	mov	r5,r20
  804120:	99400015 	stw	r5,0(r19)
  804124:	dfc00b17 	ldw	ra,44(sp)
  804128:	df000a17 	ldw	fp,40(sp)
  80412c:	ddc00917 	ldw	r23,36(sp)
  804130:	dd800817 	ldw	r22,32(sp)
  804134:	dd400717 	ldw	r21,28(sp)
  804138:	dd000617 	ldw	r20,24(sp)
  80413c:	dcc00517 	ldw	r19,20(sp)
  804140:	dc800417 	ldw	r18,16(sp)
  804144:	dc400317 	ldw	r17,12(sp)
  804148:	dc000217 	ldw	r16,8(sp)
  80414c:	dec00c04 	addi	sp,sp,48
  804150:	f800283a 	ret
  804154:	3c3fdc0e 	bge	r7,r16,8040c8 <__alt_mem_onchip_mem+0xff7840c8>
  804158:	01bfffc4 	movi	r6,-1
  80415c:	003fdd06 	br	8040d4 <__alt_mem_onchip_mem+0xff7840d4>
  804160:	00c00dc4 	movi	r3,55
  804164:	003fe506 	br	8040fc <__alt_mem_onchip_mem+0xff7840fc>
  804168:	00800c04 	movi	r2,48
  80416c:	80801626 	beq	r16,r2,8041c8 <_strtol_r+0x1f4>
  804170:	05800284 	movi	r22,10
  804174:	b02f883a 	mov	r23,r22
  804178:	003fba06 	br	804064 <__alt_mem_onchip_mem+0xff784064>
  80417c:	0109c83a 	sub	r4,zero,r4
  804180:	003fe306 	br	804110 <__alt_mem_onchip_mem+0xff784110>
  804184:	d9000017 	ldw	r4,0(sp)
  804188:	00c00884 	movi	r3,34
  80418c:	e005003a 	cmpeq	r2,fp,zero
  804190:	20c00015 	stw	r3,0(r4)
  804194:	00e00034 	movhi	r3,32768
  804198:	1885c83a 	sub	r2,r3,r2
  80419c:	983fe126 	beq	r19,zero,804124 <__alt_mem_onchip_mem+0xff784124>
  8041a0:	297fffc4 	addi	r5,r5,-1
  8041a4:	003fde06 	br	804120 <__alt_mem_onchip_mem+0xff784120>
  8041a8:	1c400084 	addi	r17,r3,2
  8041ac:	1c000043 	ldbu	r16,1(r3)
  8041b0:	07000044 	movi	fp,1
  8041b4:	003fa706 	br	804054 <__alt_mem_onchip_mem+0xff784054>
  8041b8:	1c400084 	addi	r17,r3,2
  8041bc:	1c000043 	ldbu	r16,1(r3)
  8041c0:	0039883a 	mov	fp,zero
  8041c4:	003fa306 	br	804054 <__alt_mem_onchip_mem+0xff784054>
  8041c8:	88800003 	ldbu	r2,0(r17)
  8041cc:	00c01604 	movi	r3,88
  8041d0:	108037cc 	andi	r2,r2,223
  8041d4:	10c00826 	beq	r2,r3,8041f8 <_strtol_r+0x224>
  8041d8:	05800204 	movi	r22,8
  8041dc:	003fa006 	br	804060 <__alt_mem_onchip_mem+0xff784060>
  8041e0:	00800c04 	movi	r2,48
  8041e4:	80bf9e1e 	bne	r16,r2,804060 <__alt_mem_onchip_mem+0xff784060>
  8041e8:	88800003 	ldbu	r2,0(r17)
  8041ec:	00c01604 	movi	r3,88
  8041f0:	108037cc 	andi	r2,r2,223
  8041f4:	10ff9a1e 	bne	r2,r3,804060 <__alt_mem_onchip_mem+0xff784060>
  8041f8:	05c00404 	movi	r23,16
  8041fc:	8c000043 	ldbu	r16,1(r17)
  804200:	b82d883a 	mov	r22,r23
  804204:	8c400084 	addi	r17,r17,2
  804208:	003f9606 	br	804064 <__alt_mem_onchip_mem+0xff784064>

0080420c <strtol>:
  80420c:	00802074 	movhi	r2,129
  804210:	1097f204 	addi	r2,r2,24520
  804214:	300f883a 	mov	r7,r6
  804218:	280d883a 	mov	r6,r5
  80421c:	200b883a 	mov	r5,r4
  804220:	11000017 	ldw	r4,0(r2)
  804224:	0803fd41 	jmpi	803fd4 <_strtol_r>

00804228 <___vfprintf_internal_r>:
  804228:	deffb804 	addi	sp,sp,-288
  80422c:	dfc04715 	stw	ra,284(sp)
  804230:	ddc04515 	stw	r23,276(sp)
  804234:	dd404315 	stw	r21,268(sp)
  804238:	d9002c15 	stw	r4,176(sp)
  80423c:	282f883a 	mov	r23,r5
  804240:	302b883a 	mov	r21,r6
  804244:	d9c02d15 	stw	r7,180(sp)
  804248:	df004615 	stw	fp,280(sp)
  80424c:	dd804415 	stw	r22,272(sp)
  804250:	dd004215 	stw	r20,264(sp)
  804254:	dcc04115 	stw	r19,260(sp)
  804258:	dc804015 	stw	r18,256(sp)
  80425c:	dc403f15 	stw	r17,252(sp)
  804260:	dc003e15 	stw	r16,248(sp)
  804264:	0808dd00 	call	808dd0 <_localeconv_r>
  804268:	10800017 	ldw	r2,0(r2)
  80426c:	1009883a 	mov	r4,r2
  804270:	d8803415 	stw	r2,208(sp)
  804274:	0803e800 	call	803e80 <strlen>
  804278:	d8803715 	stw	r2,220(sp)
  80427c:	d8802c17 	ldw	r2,176(sp)
  804280:	10000226 	beq	r2,zero,80428c <___vfprintf_internal_r+0x64>
  804284:	10800e17 	ldw	r2,56(r2)
  804288:	1000f926 	beq	r2,zero,804670 <___vfprintf_internal_r+0x448>
  80428c:	b880030b 	ldhu	r2,12(r23)
  804290:	10c8000c 	andi	r3,r2,8192
  804294:	1800061e 	bne	r3,zero,8042b0 <___vfprintf_internal_r+0x88>
  804298:	b9001917 	ldw	r4,100(r23)
  80429c:	00f7ffc4 	movi	r3,-8193
  8042a0:	10880014 	ori	r2,r2,8192
  8042a4:	20c6703a 	and	r3,r4,r3
  8042a8:	b880030d 	sth	r2,12(r23)
  8042ac:	b8c01915 	stw	r3,100(r23)
  8042b0:	10c0020c 	andi	r3,r2,8
  8042b4:	1800c126 	beq	r3,zero,8045bc <___vfprintf_internal_r+0x394>
  8042b8:	b8c00417 	ldw	r3,16(r23)
  8042bc:	1800bf26 	beq	r3,zero,8045bc <___vfprintf_internal_r+0x394>
  8042c0:	1080068c 	andi	r2,r2,26
  8042c4:	00c00284 	movi	r3,10
  8042c8:	10c0c426 	beq	r2,r3,8045dc <___vfprintf_internal_r+0x3b4>
  8042cc:	d8c00404 	addi	r3,sp,16
  8042d0:	05002074 	movhi	r20,129
  8042d4:	d9001e04 	addi	r4,sp,120
  8042d8:	a50f7284 	addi	r20,r20,15818
  8042dc:	d8c01e15 	stw	r3,120(sp)
  8042e0:	d8002015 	stw	zero,128(sp)
  8042e4:	d8001f15 	stw	zero,124(sp)
  8042e8:	d8003315 	stw	zero,204(sp)
  8042ec:	d8003615 	stw	zero,216(sp)
  8042f0:	d8003815 	stw	zero,224(sp)
  8042f4:	1811883a 	mov	r8,r3
  8042f8:	d8003915 	stw	zero,228(sp)
  8042fc:	d8003a15 	stw	zero,232(sp)
  804300:	d8002f15 	stw	zero,188(sp)
  804304:	d9002815 	stw	r4,160(sp)
  804308:	a8800007 	ldb	r2,0(r21)
  80430c:	10027b26 	beq	r2,zero,804cfc <___vfprintf_internal_r+0xad4>
  804310:	00c00944 	movi	r3,37
  804314:	a821883a 	mov	r16,r21
  804318:	10c0021e 	bne	r2,r3,804324 <___vfprintf_internal_r+0xfc>
  80431c:	00001406 	br	804370 <___vfprintf_internal_r+0x148>
  804320:	10c00326 	beq	r2,r3,804330 <___vfprintf_internal_r+0x108>
  804324:	84000044 	addi	r16,r16,1
  804328:	80800007 	ldb	r2,0(r16)
  80432c:	103ffc1e 	bne	r2,zero,804320 <__alt_mem_onchip_mem+0xff784320>
  804330:	8563c83a 	sub	r17,r16,r21
  804334:	88000e26 	beq	r17,zero,804370 <___vfprintf_internal_r+0x148>
  804338:	d8c02017 	ldw	r3,128(sp)
  80433c:	d8801f17 	ldw	r2,124(sp)
  804340:	45400015 	stw	r21,0(r8)
  804344:	1c47883a 	add	r3,r3,r17
  804348:	10800044 	addi	r2,r2,1
  80434c:	d8c02015 	stw	r3,128(sp)
  804350:	44400115 	stw	r17,4(r8)
  804354:	d8801f15 	stw	r2,124(sp)
  804358:	00c001c4 	movi	r3,7
  80435c:	1880a716 	blt	r3,r2,8045fc <___vfprintf_internal_r+0x3d4>
  804360:	42000204 	addi	r8,r8,8
  804364:	d9402f17 	ldw	r5,188(sp)
  804368:	2c4b883a 	add	r5,r5,r17
  80436c:	d9402f15 	stw	r5,188(sp)
  804370:	80800007 	ldb	r2,0(r16)
  804374:	1000a826 	beq	r2,zero,804618 <___vfprintf_internal_r+0x3f0>
  804378:	84400047 	ldb	r17,1(r16)
  80437c:	00bfffc4 	movi	r2,-1
  804380:	85400044 	addi	r21,r16,1
  804384:	d8002785 	stb	zero,158(sp)
  804388:	0007883a 	mov	r3,zero
  80438c:	000f883a 	mov	r7,zero
  804390:	d8802915 	stw	r2,164(sp)
  804394:	d8003115 	stw	zero,196(sp)
  804398:	0025883a 	mov	r18,zero
  80439c:	01401604 	movi	r5,88
  8043a0:	01800244 	movi	r6,9
  8043a4:	02800a84 	movi	r10,42
  8043a8:	02401b04 	movi	r9,108
  8043ac:	ad400044 	addi	r21,r21,1
  8043b0:	88bff804 	addi	r2,r17,-32
  8043b4:	28830436 	bltu	r5,r2,804fc8 <___vfprintf_internal_r+0xda0>
  8043b8:	100490ba 	slli	r2,r2,2
  8043bc:	01002034 	movhi	r4,128
  8043c0:	2110f404 	addi	r4,r4,17360
  8043c4:	1105883a 	add	r2,r2,r4
  8043c8:	10800017 	ldw	r2,0(r2)
  8043cc:	1000683a 	jmp	r2
  8043d0:	00804ee8 	cmpgeui	r2,zero,315
  8043d4:	00804fc8 	cmpgei	r2,zero,319
  8043d8:	00804fc8 	cmpgei	r2,zero,319
  8043dc:	00804f08 	cmpgei	r2,zero,316
  8043e0:	00804fc8 	cmpgei	r2,zero,319
  8043e4:	00804fc8 	cmpgei	r2,zero,319
  8043e8:	00804fc8 	cmpgei	r2,zero,319
  8043ec:	00804fc8 	cmpgei	r2,zero,319
  8043f0:	00804fc8 	cmpgei	r2,zero,319
  8043f4:	00804fc8 	cmpgei	r2,zero,319
  8043f8:	0080467c 	xorhi	r2,zero,281
  8043fc:	00804e24 	muli	r2,zero,312
  804400:	00804fc8 	cmpgei	r2,zero,319
  804404:	00804544 	movi	r2,277
  804408:	008046a4 	muli	r2,zero,282
  80440c:	00804fc8 	cmpgei	r2,zero,319
  804410:	008046e4 	muli	r2,zero,283
  804414:	008046f0 	cmpltui	r2,zero,283
  804418:	008046f0 	cmpltui	r2,zero,283
  80441c:	008046f0 	cmpltui	r2,zero,283
  804420:	008046f0 	cmpltui	r2,zero,283
  804424:	008046f0 	cmpltui	r2,zero,283
  804428:	008046f0 	cmpltui	r2,zero,283
  80442c:	008046f0 	cmpltui	r2,zero,283
  804430:	008046f0 	cmpltui	r2,zero,283
  804434:	008046f0 	cmpltui	r2,zero,283
  804438:	00804fc8 	cmpgei	r2,zero,319
  80443c:	00804fc8 	cmpgei	r2,zero,319
  804440:	00804fc8 	cmpgei	r2,zero,319
  804444:	00804fc8 	cmpgei	r2,zero,319
  804448:	00804fc8 	cmpgei	r2,zero,319
  80444c:	00804fc8 	cmpgei	r2,zero,319
  804450:	00804fc8 	cmpgei	r2,zero,319
  804454:	00804fc8 	cmpgei	r2,zero,319
  804458:	00804fc8 	cmpgei	r2,zero,319
  80445c:	00804fc8 	cmpgei	r2,zero,319
  804460:	00804724 	muli	r2,zero,284
  804464:	008047e0 	cmpeqi	r2,zero,287
  804468:	00804fc8 	cmpgei	r2,zero,319
  80446c:	008047e0 	cmpeqi	r2,zero,287
  804470:	00804fc8 	cmpgei	r2,zero,319
  804474:	00804fc8 	cmpgei	r2,zero,319
  804478:	00804fc8 	cmpgei	r2,zero,319
  80447c:	00804fc8 	cmpgei	r2,zero,319
  804480:	00804880 	call	80488 <__alt_mem_sdram-0x77fb78>
  804484:	00804fc8 	cmpgei	r2,zero,319
  804488:	00804fc8 	cmpgei	r2,zero,319
  80448c:	0080488c 	andi	r2,zero,290
  804490:	00804fc8 	cmpgei	r2,zero,319
  804494:	00804fc8 	cmpgei	r2,zero,319
  804498:	00804fc8 	cmpgei	r2,zero,319
  80449c:	00804fc8 	cmpgei	r2,zero,319
  8044a0:	00804fc8 	cmpgei	r2,zero,319
  8044a4:	00804d04 	movi	r2,308
  8044a8:	00804fc8 	cmpgei	r2,zero,319
  8044ac:	00804fc8 	cmpgei	r2,zero,319
  8044b0:	00804d64 	muli	r2,zero,309
  8044b4:	00804fc8 	cmpgei	r2,zero,319
  8044b8:	00804fc8 	cmpgei	r2,zero,319
  8044bc:	00804fc8 	cmpgei	r2,zero,319
  8044c0:	00804fc8 	cmpgei	r2,zero,319
  8044c4:	00804fc8 	cmpgei	r2,zero,319
  8044c8:	00804fc8 	cmpgei	r2,zero,319
  8044cc:	00804fc8 	cmpgei	r2,zero,319
  8044d0:	00804fc8 	cmpgei	r2,zero,319
  8044d4:	00804fc8 	cmpgei	r2,zero,319
  8044d8:	00804fc8 	cmpgei	r2,zero,319
  8044dc:	00804f74 	movhi	r2,317
  8044e0:	00804f14 	movui	r2,316
  8044e4:	008047e0 	cmpeqi	r2,zero,287
  8044e8:	008047e0 	cmpeqi	r2,zero,287
  8044ec:	008047e0 	cmpeqi	r2,zero,287
  8044f0:	00804f24 	muli	r2,zero,316
  8044f4:	00804f14 	movui	r2,316
  8044f8:	00804fc8 	cmpgei	r2,zero,319
  8044fc:	00804fc8 	cmpgei	r2,zero,319
  804500:	00804f30 	cmpltui	r2,zero,316
  804504:	00804fc8 	cmpgei	r2,zero,319
  804508:	00804f40 	call	804f4 <__alt_mem_sdram-0x77fb0c>
  80450c:	00804e14 	movui	r2,312
  804510:	00804550 	cmplti	r2,zero,277
  804514:	00804e34 	movhi	r2,312
  804518:	00804fc8 	cmpgei	r2,zero,319
  80451c:	00804e40 	call	804e4 <__alt_mem_sdram-0x77fb1c>
  804520:	00804fc8 	cmpgei	r2,zero,319
  804524:	00804e9c 	xori	r2,zero,314
  804528:	00804fc8 	cmpgei	r2,zero,319
  80452c:	00804fc8 	cmpgei	r2,zero,319
  804530:	00804eac 	andhi	r2,zero,314
  804534:	d9003117 	ldw	r4,196(sp)
  804538:	d8802d15 	stw	r2,180(sp)
  80453c:	0109c83a 	sub	r4,zero,r4
  804540:	d9003115 	stw	r4,196(sp)
  804544:	94800114 	ori	r18,r18,4
  804548:	ac400007 	ldb	r17,0(r21)
  80454c:	003f9706 	br	8043ac <__alt_mem_onchip_mem+0xff7843ac>
  804550:	00800c04 	movi	r2,48
  804554:	d9002d17 	ldw	r4,180(sp)
  804558:	d9402917 	ldw	r5,164(sp)
  80455c:	d8802705 	stb	r2,156(sp)
  804560:	00801e04 	movi	r2,120
  804564:	d8802745 	stb	r2,157(sp)
  804568:	d8002785 	stb	zero,158(sp)
  80456c:	20c00104 	addi	r3,r4,4
  804570:	24c00017 	ldw	r19,0(r4)
  804574:	002d883a 	mov	r22,zero
  804578:	90800094 	ori	r2,r18,2
  80457c:	28029a16 	blt	r5,zero,804fe8 <___vfprintf_internal_r+0xdc0>
  804580:	00bfdfc4 	movi	r2,-129
  804584:	90a4703a 	and	r18,r18,r2
  804588:	d8c02d15 	stw	r3,180(sp)
  80458c:	94800094 	ori	r18,r18,2
  804590:	9802871e 	bne	r19,zero,804fb0 <___vfprintf_internal_r+0xd88>
  804594:	00802074 	movhi	r2,129
  804598:	108f6b04 	addi	r2,r2,15788
  80459c:	d8803915 	stw	r2,228(sp)
  8045a0:	04401e04 	movi	r17,120
  8045a4:	d8802917 	ldw	r2,164(sp)
  8045a8:	0039883a 	mov	fp,zero
  8045ac:	1001e926 	beq	r2,zero,804d54 <___vfprintf_internal_r+0xb2c>
  8045b0:	0027883a 	mov	r19,zero
  8045b4:	002d883a 	mov	r22,zero
  8045b8:	00020506 	br	804dd0 <___vfprintf_internal_r+0xba8>
  8045bc:	d9002c17 	ldw	r4,176(sp)
  8045c0:	b80b883a 	mov	r5,r23
  8045c4:	08065580 	call	806558 <__swsetup_r>
  8045c8:	1005ac1e 	bne	r2,zero,805c7c <___vfprintf_internal_r+0x1a54>
  8045cc:	b880030b 	ldhu	r2,12(r23)
  8045d0:	00c00284 	movi	r3,10
  8045d4:	1080068c 	andi	r2,r2,26
  8045d8:	10ff3c1e 	bne	r2,r3,8042cc <__alt_mem_onchip_mem+0xff7842cc>
  8045dc:	b880038f 	ldh	r2,14(r23)
  8045e0:	103f3a16 	blt	r2,zero,8042cc <__alt_mem_onchip_mem+0xff7842cc>
  8045e4:	d9c02d17 	ldw	r7,180(sp)
  8045e8:	d9002c17 	ldw	r4,176(sp)
  8045ec:	a80d883a 	mov	r6,r21
  8045f0:	b80b883a 	mov	r5,r23
  8045f4:	080643c0 	call	80643c <__sbprintf>
  8045f8:	00001106 	br	804640 <___vfprintf_internal_r+0x418>
  8045fc:	d9002c17 	ldw	r4,176(sp)
  804600:	d9801e04 	addi	r6,sp,120
  804604:	b80b883a 	mov	r5,r23
  804608:	080ab5c0 	call	80ab5c <__sprint_r>
  80460c:	1000081e 	bne	r2,zero,804630 <___vfprintf_internal_r+0x408>
  804610:	da000404 	addi	r8,sp,16
  804614:	003f5306 	br	804364 <__alt_mem_onchip_mem+0xff784364>
  804618:	d8802017 	ldw	r2,128(sp)
  80461c:	10000426 	beq	r2,zero,804630 <___vfprintf_internal_r+0x408>
  804620:	d9002c17 	ldw	r4,176(sp)
  804624:	d9801e04 	addi	r6,sp,120
  804628:	b80b883a 	mov	r5,r23
  80462c:	080ab5c0 	call	80ab5c <__sprint_r>
  804630:	b880030b 	ldhu	r2,12(r23)
  804634:	1080100c 	andi	r2,r2,64
  804638:	1005901e 	bne	r2,zero,805c7c <___vfprintf_internal_r+0x1a54>
  80463c:	d8802f17 	ldw	r2,188(sp)
  804640:	dfc04717 	ldw	ra,284(sp)
  804644:	df004617 	ldw	fp,280(sp)
  804648:	ddc04517 	ldw	r23,276(sp)
  80464c:	dd804417 	ldw	r22,272(sp)
  804650:	dd404317 	ldw	r21,268(sp)
  804654:	dd004217 	ldw	r20,264(sp)
  804658:	dcc04117 	ldw	r19,260(sp)
  80465c:	dc804017 	ldw	r18,256(sp)
  804660:	dc403f17 	ldw	r17,252(sp)
  804664:	dc003e17 	ldw	r16,248(sp)
  804668:	dec04804 	addi	sp,sp,288
  80466c:	f800283a 	ret
  804670:	d9002c17 	ldw	r4,176(sp)
  804674:	08024940 	call	802494 <__sinit>
  804678:	003f0406 	br	80428c <__alt_mem_onchip_mem+0xff78428c>
  80467c:	d8802d17 	ldw	r2,180(sp)
  804680:	d9002d17 	ldw	r4,180(sp)
  804684:	10800017 	ldw	r2,0(r2)
  804688:	d8803115 	stw	r2,196(sp)
  80468c:	20800104 	addi	r2,r4,4
  804690:	d9003117 	ldw	r4,196(sp)
  804694:	203fa716 	blt	r4,zero,804534 <__alt_mem_onchip_mem+0xff784534>
  804698:	d8802d15 	stw	r2,180(sp)
  80469c:	ac400007 	ldb	r17,0(r21)
  8046a0:	003f4206 	br	8043ac <__alt_mem_onchip_mem+0xff7843ac>
  8046a4:	ac400007 	ldb	r17,0(r21)
  8046a8:	aac00044 	addi	r11,r21,1
  8046ac:	8a872826 	beq	r17,r10,806350 <___vfprintf_internal_r+0x2128>
  8046b0:	88bff404 	addi	r2,r17,-48
  8046b4:	0009883a 	mov	r4,zero
  8046b8:	30867d36 	bltu	r6,r2,8060b0 <___vfprintf_internal_r+0x1e88>
  8046bc:	5c400007 	ldb	r17,0(r11)
  8046c0:	210002a4 	muli	r4,r4,10
  8046c4:	5d400044 	addi	r21,r11,1
  8046c8:	a817883a 	mov	r11,r21
  8046cc:	2089883a 	add	r4,r4,r2
  8046d0:	88bff404 	addi	r2,r17,-48
  8046d4:	30bff92e 	bgeu	r6,r2,8046bc <__alt_mem_onchip_mem+0xff7846bc>
  8046d8:	2005c916 	blt	r4,zero,805e00 <___vfprintf_internal_r+0x1bd8>
  8046dc:	d9002915 	stw	r4,164(sp)
  8046e0:	003f3306 	br	8043b0 <__alt_mem_onchip_mem+0xff7843b0>
  8046e4:	94802014 	ori	r18,r18,128
  8046e8:	ac400007 	ldb	r17,0(r21)
  8046ec:	003f2f06 	br	8043ac <__alt_mem_onchip_mem+0xff7843ac>
  8046f0:	a809883a 	mov	r4,r21
  8046f4:	d8003115 	stw	zero,196(sp)
  8046f8:	88bff404 	addi	r2,r17,-48
  8046fc:	0017883a 	mov	r11,zero
  804700:	24400007 	ldb	r17,0(r4)
  804704:	5ac002a4 	muli	r11,r11,10
  804708:	ad400044 	addi	r21,r21,1
  80470c:	a809883a 	mov	r4,r21
  804710:	12d7883a 	add	r11,r2,r11
  804714:	88bff404 	addi	r2,r17,-48
  804718:	30bff92e 	bgeu	r6,r2,804700 <__alt_mem_onchip_mem+0xff784700>
  80471c:	dac03115 	stw	r11,196(sp)
  804720:	003f2306 	br	8043b0 <__alt_mem_onchip_mem+0xff7843b0>
  804724:	18c03fcc 	andi	r3,r3,255
  804728:	18072b1e 	bne	r3,zero,8063d8 <___vfprintf_internal_r+0x21b0>
  80472c:	94800414 	ori	r18,r18,16
  804730:	9080080c 	andi	r2,r18,32
  804734:	10037b26 	beq	r2,zero,805524 <___vfprintf_internal_r+0x12fc>
  804738:	d9402d17 	ldw	r5,180(sp)
  80473c:	28800117 	ldw	r2,4(r5)
  804740:	2cc00017 	ldw	r19,0(r5)
  804744:	29400204 	addi	r5,r5,8
  804748:	d9402d15 	stw	r5,180(sp)
  80474c:	102d883a 	mov	r22,r2
  804750:	10044b16 	blt	r2,zero,805880 <___vfprintf_internal_r+0x1658>
  804754:	d9402917 	ldw	r5,164(sp)
  804758:	df002783 	ldbu	fp,158(sp)
  80475c:	2803bc16 	blt	r5,zero,805650 <___vfprintf_internal_r+0x1428>
  804760:	00ffdfc4 	movi	r3,-129
  804764:	9d84b03a 	or	r2,r19,r22
  804768:	90e4703a 	and	r18,r18,r3
  80476c:	10017726 	beq	r2,zero,804d4c <___vfprintf_internal_r+0xb24>
  804770:	b0038326 	beq	r22,zero,805580 <___vfprintf_internal_r+0x1358>
  804774:	dc402a15 	stw	r17,168(sp)
  804778:	dc001e04 	addi	r16,sp,120
  80477c:	b023883a 	mov	r17,r22
  804780:	402d883a 	mov	r22,r8
  804784:	9809883a 	mov	r4,r19
  804788:	880b883a 	mov	r5,r17
  80478c:	01800284 	movi	r6,10
  804790:	000f883a 	mov	r7,zero
  804794:	080cc2c0 	call	80cc2c <__umoddi3>
  804798:	10800c04 	addi	r2,r2,48
  80479c:	843fffc4 	addi	r16,r16,-1
  8047a0:	9809883a 	mov	r4,r19
  8047a4:	880b883a 	mov	r5,r17
  8047a8:	80800005 	stb	r2,0(r16)
  8047ac:	01800284 	movi	r6,10
  8047b0:	000f883a 	mov	r7,zero
  8047b4:	080c6b40 	call	80c6b4 <__udivdi3>
  8047b8:	1027883a 	mov	r19,r2
  8047bc:	10c4b03a 	or	r2,r2,r3
  8047c0:	1823883a 	mov	r17,r3
  8047c4:	103fef1e 	bne	r2,zero,804784 <__alt_mem_onchip_mem+0xff784784>
  8047c8:	d8c02817 	ldw	r3,160(sp)
  8047cc:	dc402a17 	ldw	r17,168(sp)
  8047d0:	b011883a 	mov	r8,r22
  8047d4:	1c07c83a 	sub	r3,r3,r16
  8047d8:	d8c02e15 	stw	r3,184(sp)
  8047dc:	00005906 	br	804944 <___vfprintf_internal_r+0x71c>
  8047e0:	18c03fcc 	andi	r3,r3,255
  8047e4:	1806fa1e 	bne	r3,zero,8063d0 <___vfprintf_internal_r+0x21a8>
  8047e8:	9080020c 	andi	r2,r18,8
  8047ec:	10048a26 	beq	r2,zero,805a18 <___vfprintf_internal_r+0x17f0>
  8047f0:	d8c02d17 	ldw	r3,180(sp)
  8047f4:	d9002d17 	ldw	r4,180(sp)
  8047f8:	d9402d17 	ldw	r5,180(sp)
  8047fc:	18c00017 	ldw	r3,0(r3)
  804800:	21000117 	ldw	r4,4(r4)
  804804:	29400204 	addi	r5,r5,8
  804808:	d8c03615 	stw	r3,216(sp)
  80480c:	d9003815 	stw	r4,224(sp)
  804810:	d9402d15 	stw	r5,180(sp)
  804814:	d9003617 	ldw	r4,216(sp)
  804818:	d9403817 	ldw	r5,224(sp)
  80481c:	da003d15 	stw	r8,244(sp)
  804820:	04000044 	movi	r16,1
  804824:	080a9100 	call	80a910 <__fpclassifyd>
  804828:	da003d17 	ldw	r8,244(sp)
  80482c:	14041f1e 	bne	r2,r16,8058ac <___vfprintf_internal_r+0x1684>
  804830:	d9003617 	ldw	r4,216(sp)
  804834:	d9403817 	ldw	r5,224(sp)
  804838:	000d883a 	mov	r6,zero
  80483c:	000f883a 	mov	r7,zero
  804840:	080e6100 	call	80e610 <__ledf2>
  804844:	da003d17 	ldw	r8,244(sp)
  804848:	1005be16 	blt	r2,zero,805f44 <___vfprintf_internal_r+0x1d1c>
  80484c:	df002783 	ldbu	fp,158(sp)
  804850:	008011c4 	movi	r2,71
  804854:	1445330e 	bge	r2,r17,805d24 <___vfprintf_internal_r+0x1afc>
  804858:	04002074 	movhi	r16,129
  80485c:	840f6304 	addi	r16,r16,15756
  804860:	00c000c4 	movi	r3,3
  804864:	00bfdfc4 	movi	r2,-129
  804868:	d8c02a15 	stw	r3,168(sp)
  80486c:	90a4703a 	and	r18,r18,r2
  804870:	d8c02e15 	stw	r3,184(sp)
  804874:	d8002915 	stw	zero,164(sp)
  804878:	d8003215 	stw	zero,200(sp)
  80487c:	00003706 	br	80495c <___vfprintf_internal_r+0x734>
  804880:	94800214 	ori	r18,r18,8
  804884:	ac400007 	ldb	r17,0(r21)
  804888:	003ec806 	br	8043ac <__alt_mem_onchip_mem+0xff7843ac>
  80488c:	18c03fcc 	andi	r3,r3,255
  804890:	1806db1e 	bne	r3,zero,806400 <___vfprintf_internal_r+0x21d8>
  804894:	94800414 	ori	r18,r18,16
  804898:	9080080c 	andi	r2,r18,32
  80489c:	1002d826 	beq	r2,zero,805400 <___vfprintf_internal_r+0x11d8>
  8048a0:	d9402d17 	ldw	r5,180(sp)
  8048a4:	d8c02917 	ldw	r3,164(sp)
  8048a8:	d8002785 	stb	zero,158(sp)
  8048ac:	28800204 	addi	r2,r5,8
  8048b0:	2cc00017 	ldw	r19,0(r5)
  8048b4:	2d800117 	ldw	r22,4(r5)
  8048b8:	18048f16 	blt	r3,zero,805af8 <___vfprintf_internal_r+0x18d0>
  8048bc:	013fdfc4 	movi	r4,-129
  8048c0:	9d86b03a 	or	r3,r19,r22
  8048c4:	d8802d15 	stw	r2,180(sp)
  8048c8:	9124703a 	and	r18,r18,r4
  8048cc:	1802d91e 	bne	r3,zero,805434 <___vfprintf_internal_r+0x120c>
  8048d0:	d8c02917 	ldw	r3,164(sp)
  8048d4:	0039883a 	mov	fp,zero
  8048d8:	1805c326 	beq	r3,zero,805fe8 <___vfprintf_internal_r+0x1dc0>
  8048dc:	0027883a 	mov	r19,zero
  8048e0:	002d883a 	mov	r22,zero
  8048e4:	dc001e04 	addi	r16,sp,120
  8048e8:	9806d0fa 	srli	r3,r19,3
  8048ec:	b008977a 	slli	r4,r22,29
  8048f0:	b02cd0fa 	srli	r22,r22,3
  8048f4:	9cc001cc 	andi	r19,r19,7
  8048f8:	98800c04 	addi	r2,r19,48
  8048fc:	843fffc4 	addi	r16,r16,-1
  804900:	20e6b03a 	or	r19,r4,r3
  804904:	80800005 	stb	r2,0(r16)
  804908:	9d86b03a 	or	r3,r19,r22
  80490c:	183ff61e 	bne	r3,zero,8048e8 <__alt_mem_onchip_mem+0xff7848e8>
  804910:	90c0004c 	andi	r3,r18,1
  804914:	18013b26 	beq	r3,zero,804e04 <___vfprintf_internal_r+0xbdc>
  804918:	10803fcc 	andi	r2,r2,255
  80491c:	1080201c 	xori	r2,r2,128
  804920:	10bfe004 	addi	r2,r2,-128
  804924:	00c00c04 	movi	r3,48
  804928:	10c13626 	beq	r2,r3,804e04 <___vfprintf_internal_r+0xbdc>
  80492c:	80ffffc5 	stb	r3,-1(r16)
  804930:	d8c02817 	ldw	r3,160(sp)
  804934:	80bfffc4 	addi	r2,r16,-1
  804938:	1021883a 	mov	r16,r2
  80493c:	1887c83a 	sub	r3,r3,r2
  804940:	d8c02e15 	stw	r3,184(sp)
  804944:	d8802e17 	ldw	r2,184(sp)
  804948:	d9002917 	ldw	r4,164(sp)
  80494c:	1100010e 	bge	r2,r4,804954 <___vfprintf_internal_r+0x72c>
  804950:	2005883a 	mov	r2,r4
  804954:	d8802a15 	stw	r2,168(sp)
  804958:	d8003215 	stw	zero,200(sp)
  80495c:	e7003fcc 	andi	fp,fp,255
  804960:	e700201c 	xori	fp,fp,128
  804964:	e73fe004 	addi	fp,fp,-128
  804968:	e0000326 	beq	fp,zero,804978 <___vfprintf_internal_r+0x750>
  80496c:	d8c02a17 	ldw	r3,168(sp)
  804970:	18c00044 	addi	r3,r3,1
  804974:	d8c02a15 	stw	r3,168(sp)
  804978:	90c0008c 	andi	r3,r18,2
  80497c:	d8c02b15 	stw	r3,172(sp)
  804980:	18000326 	beq	r3,zero,804990 <___vfprintf_internal_r+0x768>
  804984:	d8c02a17 	ldw	r3,168(sp)
  804988:	18c00084 	addi	r3,r3,2
  80498c:	d8c02a15 	stw	r3,168(sp)
  804990:	90c0210c 	andi	r3,r18,132
  804994:	d8c03015 	stw	r3,192(sp)
  804998:	1801a31e 	bne	r3,zero,805028 <___vfprintf_internal_r+0xe00>
  80499c:	d9003117 	ldw	r4,196(sp)
  8049a0:	d8c02a17 	ldw	r3,168(sp)
  8049a4:	20e7c83a 	sub	r19,r4,r3
  8049a8:	04c19f0e 	bge	zero,r19,805028 <___vfprintf_internal_r+0xe00>
  8049ac:	02400404 	movi	r9,16
  8049b0:	d8c02017 	ldw	r3,128(sp)
  8049b4:	d8801f17 	ldw	r2,124(sp)
  8049b8:	4cc50d0e 	bge	r9,r19,805df0 <___vfprintf_internal_r+0x1bc8>
  8049bc:	01402074 	movhi	r5,129
  8049c0:	294f7684 	addi	r5,r5,15834
  8049c4:	dc403b15 	stw	r17,236(sp)
  8049c8:	d9403515 	stw	r5,212(sp)
  8049cc:	9823883a 	mov	r17,r19
  8049d0:	482d883a 	mov	r22,r9
  8049d4:	9027883a 	mov	r19,r18
  8049d8:	070001c4 	movi	fp,7
  8049dc:	8025883a 	mov	r18,r16
  8049e0:	dc002c17 	ldw	r16,176(sp)
  8049e4:	00000306 	br	8049f4 <___vfprintf_internal_r+0x7cc>
  8049e8:	8c7ffc04 	addi	r17,r17,-16
  8049ec:	42000204 	addi	r8,r8,8
  8049f0:	b440130e 	bge	r22,r17,804a40 <___vfprintf_internal_r+0x818>
  8049f4:	01002074 	movhi	r4,129
  8049f8:	18c00404 	addi	r3,r3,16
  8049fc:	10800044 	addi	r2,r2,1
  804a00:	210f7684 	addi	r4,r4,15834
  804a04:	41000015 	stw	r4,0(r8)
  804a08:	45800115 	stw	r22,4(r8)
  804a0c:	d8c02015 	stw	r3,128(sp)
  804a10:	d8801f15 	stw	r2,124(sp)
  804a14:	e0bff40e 	bge	fp,r2,8049e8 <__alt_mem_onchip_mem+0xff7849e8>
  804a18:	d9801e04 	addi	r6,sp,120
  804a1c:	b80b883a 	mov	r5,r23
  804a20:	8009883a 	mov	r4,r16
  804a24:	080ab5c0 	call	80ab5c <__sprint_r>
  804a28:	103f011e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  804a2c:	8c7ffc04 	addi	r17,r17,-16
  804a30:	d8c02017 	ldw	r3,128(sp)
  804a34:	d8801f17 	ldw	r2,124(sp)
  804a38:	da000404 	addi	r8,sp,16
  804a3c:	b47fed16 	blt	r22,r17,8049f4 <__alt_mem_onchip_mem+0xff7849f4>
  804a40:	9021883a 	mov	r16,r18
  804a44:	9825883a 	mov	r18,r19
  804a48:	8827883a 	mov	r19,r17
  804a4c:	dc403b17 	ldw	r17,236(sp)
  804a50:	d9403517 	ldw	r5,212(sp)
  804a54:	98c7883a 	add	r3,r19,r3
  804a58:	10800044 	addi	r2,r2,1
  804a5c:	41400015 	stw	r5,0(r8)
  804a60:	44c00115 	stw	r19,4(r8)
  804a64:	d8c02015 	stw	r3,128(sp)
  804a68:	d8801f15 	stw	r2,124(sp)
  804a6c:	010001c4 	movi	r4,7
  804a70:	2082a316 	blt	r4,r2,805500 <___vfprintf_internal_r+0x12d8>
  804a74:	df002787 	ldb	fp,158(sp)
  804a78:	42000204 	addi	r8,r8,8
  804a7c:	e0000c26 	beq	fp,zero,804ab0 <___vfprintf_internal_r+0x888>
  804a80:	d8801f17 	ldw	r2,124(sp)
  804a84:	d9002784 	addi	r4,sp,158
  804a88:	18c00044 	addi	r3,r3,1
  804a8c:	10800044 	addi	r2,r2,1
  804a90:	41000015 	stw	r4,0(r8)
  804a94:	01000044 	movi	r4,1
  804a98:	41000115 	stw	r4,4(r8)
  804a9c:	d8c02015 	stw	r3,128(sp)
  804aa0:	d8801f15 	stw	r2,124(sp)
  804aa4:	010001c4 	movi	r4,7
  804aa8:	20823c16 	blt	r4,r2,80539c <___vfprintf_internal_r+0x1174>
  804aac:	42000204 	addi	r8,r8,8
  804ab0:	d8802b17 	ldw	r2,172(sp)
  804ab4:	10000c26 	beq	r2,zero,804ae8 <___vfprintf_internal_r+0x8c0>
  804ab8:	d8801f17 	ldw	r2,124(sp)
  804abc:	d9002704 	addi	r4,sp,156
  804ac0:	18c00084 	addi	r3,r3,2
  804ac4:	10800044 	addi	r2,r2,1
  804ac8:	41000015 	stw	r4,0(r8)
  804acc:	01000084 	movi	r4,2
  804ad0:	41000115 	stw	r4,4(r8)
  804ad4:	d8c02015 	stw	r3,128(sp)
  804ad8:	d8801f15 	stw	r2,124(sp)
  804adc:	010001c4 	movi	r4,7
  804ae0:	20823616 	blt	r4,r2,8053bc <___vfprintf_internal_r+0x1194>
  804ae4:	42000204 	addi	r8,r8,8
  804ae8:	d9003017 	ldw	r4,192(sp)
  804aec:	00802004 	movi	r2,128
  804af0:	20819926 	beq	r4,r2,805158 <___vfprintf_internal_r+0xf30>
  804af4:	d9402917 	ldw	r5,164(sp)
  804af8:	d8802e17 	ldw	r2,184(sp)
  804afc:	28adc83a 	sub	r22,r5,r2
  804b00:	0580310e 	bge	zero,r22,804bc8 <___vfprintf_internal_r+0x9a0>
  804b04:	07000404 	movi	fp,16
  804b08:	d8801f17 	ldw	r2,124(sp)
  804b0c:	e584140e 	bge	fp,r22,805b60 <___vfprintf_internal_r+0x1938>
  804b10:	01402074 	movhi	r5,129
  804b14:	294f7284 	addi	r5,r5,15818
  804b18:	dc402915 	stw	r17,164(sp)
  804b1c:	d9402b15 	stw	r5,172(sp)
  804b20:	b023883a 	mov	r17,r22
  804b24:	04c001c4 	movi	r19,7
  804b28:	a82d883a 	mov	r22,r21
  804b2c:	902b883a 	mov	r21,r18
  804b30:	8025883a 	mov	r18,r16
  804b34:	dc002c17 	ldw	r16,176(sp)
  804b38:	00000306 	br	804b48 <___vfprintf_internal_r+0x920>
  804b3c:	8c7ffc04 	addi	r17,r17,-16
  804b40:	42000204 	addi	r8,r8,8
  804b44:	e440110e 	bge	fp,r17,804b8c <___vfprintf_internal_r+0x964>
  804b48:	18c00404 	addi	r3,r3,16
  804b4c:	10800044 	addi	r2,r2,1
  804b50:	45000015 	stw	r20,0(r8)
  804b54:	47000115 	stw	fp,4(r8)
  804b58:	d8c02015 	stw	r3,128(sp)
  804b5c:	d8801f15 	stw	r2,124(sp)
  804b60:	98bff60e 	bge	r19,r2,804b3c <__alt_mem_onchip_mem+0xff784b3c>
  804b64:	d9801e04 	addi	r6,sp,120
  804b68:	b80b883a 	mov	r5,r23
  804b6c:	8009883a 	mov	r4,r16
  804b70:	080ab5c0 	call	80ab5c <__sprint_r>
  804b74:	103eae1e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  804b78:	8c7ffc04 	addi	r17,r17,-16
  804b7c:	d8c02017 	ldw	r3,128(sp)
  804b80:	d8801f17 	ldw	r2,124(sp)
  804b84:	da000404 	addi	r8,sp,16
  804b88:	e47fef16 	blt	fp,r17,804b48 <__alt_mem_onchip_mem+0xff784b48>
  804b8c:	9021883a 	mov	r16,r18
  804b90:	a825883a 	mov	r18,r21
  804b94:	b02b883a 	mov	r21,r22
  804b98:	882d883a 	mov	r22,r17
  804b9c:	dc402917 	ldw	r17,164(sp)
  804ba0:	d9002b17 	ldw	r4,172(sp)
  804ba4:	1d87883a 	add	r3,r3,r22
  804ba8:	10800044 	addi	r2,r2,1
  804bac:	41000015 	stw	r4,0(r8)
  804bb0:	45800115 	stw	r22,4(r8)
  804bb4:	d8c02015 	stw	r3,128(sp)
  804bb8:	d8801f15 	stw	r2,124(sp)
  804bbc:	010001c4 	movi	r4,7
  804bc0:	2081ee16 	blt	r4,r2,80537c <___vfprintf_internal_r+0x1154>
  804bc4:	42000204 	addi	r8,r8,8
  804bc8:	9080400c 	andi	r2,r18,256
  804bcc:	1001181e 	bne	r2,zero,805030 <___vfprintf_internal_r+0xe08>
  804bd0:	d9402e17 	ldw	r5,184(sp)
  804bd4:	d8801f17 	ldw	r2,124(sp)
  804bd8:	44000015 	stw	r16,0(r8)
  804bdc:	1947883a 	add	r3,r3,r5
  804be0:	10800044 	addi	r2,r2,1
  804be4:	41400115 	stw	r5,4(r8)
  804be8:	d8c02015 	stw	r3,128(sp)
  804bec:	d8801f15 	stw	r2,124(sp)
  804bf0:	010001c4 	movi	r4,7
  804bf4:	2081d316 	blt	r4,r2,805344 <___vfprintf_internal_r+0x111c>
  804bf8:	42000204 	addi	r8,r8,8
  804bfc:	9480010c 	andi	r18,r18,4
  804c00:	90003226 	beq	r18,zero,804ccc <___vfprintf_internal_r+0xaa4>
  804c04:	d9403117 	ldw	r5,196(sp)
  804c08:	d8802a17 	ldw	r2,168(sp)
  804c0c:	28a1c83a 	sub	r16,r5,r2
  804c10:	04002e0e 	bge	zero,r16,804ccc <___vfprintf_internal_r+0xaa4>
  804c14:	04400404 	movi	r17,16
  804c18:	d8801f17 	ldw	r2,124(sp)
  804c1c:	8c04a20e 	bge	r17,r16,805ea8 <___vfprintf_internal_r+0x1c80>
  804c20:	01402074 	movhi	r5,129
  804c24:	294f7684 	addi	r5,r5,15834
  804c28:	d9403515 	stw	r5,212(sp)
  804c2c:	048001c4 	movi	r18,7
  804c30:	dcc02c17 	ldw	r19,176(sp)
  804c34:	00000306 	br	804c44 <___vfprintf_internal_r+0xa1c>
  804c38:	843ffc04 	addi	r16,r16,-16
  804c3c:	42000204 	addi	r8,r8,8
  804c40:	8c00130e 	bge	r17,r16,804c90 <___vfprintf_internal_r+0xa68>
  804c44:	01002074 	movhi	r4,129
  804c48:	18c00404 	addi	r3,r3,16
  804c4c:	10800044 	addi	r2,r2,1
  804c50:	210f7684 	addi	r4,r4,15834
  804c54:	41000015 	stw	r4,0(r8)
  804c58:	44400115 	stw	r17,4(r8)
  804c5c:	d8c02015 	stw	r3,128(sp)
  804c60:	d8801f15 	stw	r2,124(sp)
  804c64:	90bff40e 	bge	r18,r2,804c38 <__alt_mem_onchip_mem+0xff784c38>
  804c68:	d9801e04 	addi	r6,sp,120
  804c6c:	b80b883a 	mov	r5,r23
  804c70:	9809883a 	mov	r4,r19
  804c74:	080ab5c0 	call	80ab5c <__sprint_r>
  804c78:	103e6d1e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  804c7c:	843ffc04 	addi	r16,r16,-16
  804c80:	d8c02017 	ldw	r3,128(sp)
  804c84:	d8801f17 	ldw	r2,124(sp)
  804c88:	da000404 	addi	r8,sp,16
  804c8c:	8c3fed16 	blt	r17,r16,804c44 <__alt_mem_onchip_mem+0xff784c44>
  804c90:	d9403517 	ldw	r5,212(sp)
  804c94:	1c07883a 	add	r3,r3,r16
  804c98:	10800044 	addi	r2,r2,1
  804c9c:	41400015 	stw	r5,0(r8)
  804ca0:	44000115 	stw	r16,4(r8)
  804ca4:	d8c02015 	stw	r3,128(sp)
  804ca8:	d8801f15 	stw	r2,124(sp)
  804cac:	010001c4 	movi	r4,7
  804cb0:	2080060e 	bge	r4,r2,804ccc <___vfprintf_internal_r+0xaa4>
  804cb4:	d9002c17 	ldw	r4,176(sp)
  804cb8:	d9801e04 	addi	r6,sp,120
  804cbc:	b80b883a 	mov	r5,r23
  804cc0:	080ab5c0 	call	80ab5c <__sprint_r>
  804cc4:	103e5a1e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  804cc8:	d8c02017 	ldw	r3,128(sp)
  804ccc:	d8803117 	ldw	r2,196(sp)
  804cd0:	d9002a17 	ldw	r4,168(sp)
  804cd4:	1100010e 	bge	r2,r4,804cdc <___vfprintf_internal_r+0xab4>
  804cd8:	2005883a 	mov	r2,r4
  804cdc:	d9402f17 	ldw	r5,188(sp)
  804ce0:	288b883a 	add	r5,r5,r2
  804ce4:	d9402f15 	stw	r5,188(sp)
  804ce8:	18019e1e 	bne	r3,zero,805364 <___vfprintf_internal_r+0x113c>
  804cec:	a8800007 	ldb	r2,0(r21)
  804cf0:	d8001f15 	stw	zero,124(sp)
  804cf4:	da000404 	addi	r8,sp,16
  804cf8:	103d851e 	bne	r2,zero,804310 <__alt_mem_onchip_mem+0xff784310>
  804cfc:	a821883a 	mov	r16,r21
  804d00:	003d9b06 	br	804370 <__alt_mem_onchip_mem+0xff784370>
  804d04:	18c03fcc 	andi	r3,r3,255
  804d08:	1805c11e 	bne	r3,zero,806410 <___vfprintf_internal_r+0x21e8>
  804d0c:	94800414 	ori	r18,r18,16
  804d10:	9080080c 	andi	r2,r18,32
  804d14:	10020c26 	beq	r2,zero,805548 <___vfprintf_internal_r+0x1320>
  804d18:	d8802d17 	ldw	r2,180(sp)
  804d1c:	d9002917 	ldw	r4,164(sp)
  804d20:	d8002785 	stb	zero,158(sp)
  804d24:	10c00204 	addi	r3,r2,8
  804d28:	14c00017 	ldw	r19,0(r2)
  804d2c:	15800117 	ldw	r22,4(r2)
  804d30:	20040f16 	blt	r4,zero,805d70 <___vfprintf_internal_r+0x1b48>
  804d34:	013fdfc4 	movi	r4,-129
  804d38:	9d84b03a 	or	r2,r19,r22
  804d3c:	d8c02d15 	stw	r3,180(sp)
  804d40:	9124703a 	and	r18,r18,r4
  804d44:	0039883a 	mov	fp,zero
  804d48:	103e891e 	bne	r2,zero,804770 <__alt_mem_onchip_mem+0xff784770>
  804d4c:	d9002917 	ldw	r4,164(sp)
  804d50:	2002c11e 	bne	r4,zero,805858 <___vfprintf_internal_r+0x1630>
  804d54:	d8002915 	stw	zero,164(sp)
  804d58:	d8002e15 	stw	zero,184(sp)
  804d5c:	dc001e04 	addi	r16,sp,120
  804d60:	003ef806 	br	804944 <__alt_mem_onchip_mem+0xff784944>
  804d64:	18c03fcc 	andi	r3,r3,255
  804d68:	18059d1e 	bne	r3,zero,8063e0 <___vfprintf_internal_r+0x21b8>
  804d6c:	01402074 	movhi	r5,129
  804d70:	294f6604 	addi	r5,r5,15768
  804d74:	d9403915 	stw	r5,228(sp)
  804d78:	9080080c 	andi	r2,r18,32
  804d7c:	10005226 	beq	r2,zero,804ec8 <___vfprintf_internal_r+0xca0>
  804d80:	d8802d17 	ldw	r2,180(sp)
  804d84:	14c00017 	ldw	r19,0(r2)
  804d88:	15800117 	ldw	r22,4(r2)
  804d8c:	10800204 	addi	r2,r2,8
  804d90:	d8802d15 	stw	r2,180(sp)
  804d94:	9080004c 	andi	r2,r18,1
  804d98:	10019026 	beq	r2,zero,8053dc <___vfprintf_internal_r+0x11b4>
  804d9c:	9d84b03a 	or	r2,r19,r22
  804da0:	10036926 	beq	r2,zero,805b48 <___vfprintf_internal_r+0x1920>
  804da4:	d8c02917 	ldw	r3,164(sp)
  804da8:	00800c04 	movi	r2,48
  804dac:	d8802705 	stb	r2,156(sp)
  804db0:	dc402745 	stb	r17,157(sp)
  804db4:	d8002785 	stb	zero,158(sp)
  804db8:	90800094 	ori	r2,r18,2
  804dbc:	18045d16 	blt	r3,zero,805f34 <___vfprintf_internal_r+0x1d0c>
  804dc0:	00bfdfc4 	movi	r2,-129
  804dc4:	90a4703a 	and	r18,r18,r2
  804dc8:	94800094 	ori	r18,r18,2
  804dcc:	0039883a 	mov	fp,zero
  804dd0:	d9003917 	ldw	r4,228(sp)
  804dd4:	dc001e04 	addi	r16,sp,120
  804dd8:	988003cc 	andi	r2,r19,15
  804ddc:	b006973a 	slli	r3,r22,28
  804de0:	2085883a 	add	r2,r4,r2
  804de4:	9826d13a 	srli	r19,r19,4
  804de8:	10800003 	ldbu	r2,0(r2)
  804dec:	b02cd13a 	srli	r22,r22,4
  804df0:	843fffc4 	addi	r16,r16,-1
  804df4:	1ce6b03a 	or	r19,r3,r19
  804df8:	80800005 	stb	r2,0(r16)
  804dfc:	9d84b03a 	or	r2,r19,r22
  804e00:	103ff51e 	bne	r2,zero,804dd8 <__alt_mem_onchip_mem+0xff784dd8>
  804e04:	d8c02817 	ldw	r3,160(sp)
  804e08:	1c07c83a 	sub	r3,r3,r16
  804e0c:	d8c02e15 	stw	r3,184(sp)
  804e10:	003ecc06 	br	804944 <__alt_mem_onchip_mem+0xff784944>
  804e14:	18c03fcc 	andi	r3,r3,255
  804e18:	183e9f26 	beq	r3,zero,804898 <__alt_mem_onchip_mem+0xff784898>
  804e1c:	d9c02785 	stb	r7,158(sp)
  804e20:	003e9d06 	br	804898 <__alt_mem_onchip_mem+0xff784898>
  804e24:	00c00044 	movi	r3,1
  804e28:	01c00ac4 	movi	r7,43
  804e2c:	ac400007 	ldb	r17,0(r21)
  804e30:	003d5e06 	br	8043ac <__alt_mem_onchip_mem+0xff7843ac>
  804e34:	94800814 	ori	r18,r18,32
  804e38:	ac400007 	ldb	r17,0(r21)
  804e3c:	003d5b06 	br	8043ac <__alt_mem_onchip_mem+0xff7843ac>
  804e40:	d8c02d17 	ldw	r3,180(sp)
  804e44:	d8002785 	stb	zero,158(sp)
  804e48:	1c000017 	ldw	r16,0(r3)
  804e4c:	1cc00104 	addi	r19,r3,4
  804e50:	80041926 	beq	r16,zero,805eb8 <___vfprintf_internal_r+0x1c90>
  804e54:	d9002917 	ldw	r4,164(sp)
  804e58:	2003d016 	blt	r4,zero,805d9c <___vfprintf_internal_r+0x1b74>
  804e5c:	200d883a 	mov	r6,r4
  804e60:	000b883a 	mov	r5,zero
  804e64:	8009883a 	mov	r4,r16
  804e68:	da003d15 	stw	r8,244(sp)
  804e6c:	0808e600 	call	808e60 <memchr>
  804e70:	da003d17 	ldw	r8,244(sp)
  804e74:	10045426 	beq	r2,zero,805fc8 <___vfprintf_internal_r+0x1da0>
  804e78:	1405c83a 	sub	r2,r2,r16
  804e7c:	d8802e15 	stw	r2,184(sp)
  804e80:	1003cc16 	blt	r2,zero,805db4 <___vfprintf_internal_r+0x1b8c>
  804e84:	df002783 	ldbu	fp,158(sp)
  804e88:	d8802a15 	stw	r2,168(sp)
  804e8c:	dcc02d15 	stw	r19,180(sp)
  804e90:	d8002915 	stw	zero,164(sp)
  804e94:	d8003215 	stw	zero,200(sp)
  804e98:	003eb006 	br	80495c <__alt_mem_onchip_mem+0xff78495c>
  804e9c:	18c03fcc 	andi	r3,r3,255
  804ea0:	183f9b26 	beq	r3,zero,804d10 <__alt_mem_onchip_mem+0xff784d10>
  804ea4:	d9c02785 	stb	r7,158(sp)
  804ea8:	003f9906 	br	804d10 <__alt_mem_onchip_mem+0xff784d10>
  804eac:	18c03fcc 	andi	r3,r3,255
  804eb0:	1805551e 	bne	r3,zero,806408 <___vfprintf_internal_r+0x21e0>
  804eb4:	01402074 	movhi	r5,129
  804eb8:	294f6b04 	addi	r5,r5,15788
  804ebc:	d9403915 	stw	r5,228(sp)
  804ec0:	9080080c 	andi	r2,r18,32
  804ec4:	103fae1e 	bne	r2,zero,804d80 <__alt_mem_onchip_mem+0xff784d80>
  804ec8:	9080040c 	andi	r2,r18,16
  804ecc:	1002de26 	beq	r2,zero,805a48 <___vfprintf_internal_r+0x1820>
  804ed0:	d8c02d17 	ldw	r3,180(sp)
  804ed4:	002d883a 	mov	r22,zero
  804ed8:	1cc00017 	ldw	r19,0(r3)
  804edc:	18c00104 	addi	r3,r3,4
  804ee0:	d8c02d15 	stw	r3,180(sp)
  804ee4:	003fab06 	br	804d94 <__alt_mem_onchip_mem+0xff784d94>
  804ee8:	38803fcc 	andi	r2,r7,255
  804eec:	1080201c 	xori	r2,r2,128
  804ef0:	10bfe004 	addi	r2,r2,-128
  804ef4:	1002d21e 	bne	r2,zero,805a40 <___vfprintf_internal_r+0x1818>
  804ef8:	00c00044 	movi	r3,1
  804efc:	01c00804 	movi	r7,32
  804f00:	ac400007 	ldb	r17,0(r21)
  804f04:	003d2906 	br	8043ac <__alt_mem_onchip_mem+0xff7843ac>
  804f08:	94800054 	ori	r18,r18,1
  804f0c:	ac400007 	ldb	r17,0(r21)
  804f10:	003d2606 	br	8043ac <__alt_mem_onchip_mem+0xff7843ac>
  804f14:	18c03fcc 	andi	r3,r3,255
  804f18:	183e0526 	beq	r3,zero,804730 <__alt_mem_onchip_mem+0xff784730>
  804f1c:	d9c02785 	stb	r7,158(sp)
  804f20:	003e0306 	br	804730 <__alt_mem_onchip_mem+0xff784730>
  804f24:	94801014 	ori	r18,r18,64
  804f28:	ac400007 	ldb	r17,0(r21)
  804f2c:	003d1f06 	br	8043ac <__alt_mem_onchip_mem+0xff7843ac>
  804f30:	ac400007 	ldb	r17,0(r21)
  804f34:	8a438726 	beq	r17,r9,805d54 <___vfprintf_internal_r+0x1b2c>
  804f38:	94800414 	ori	r18,r18,16
  804f3c:	003d1b06 	br	8043ac <__alt_mem_onchip_mem+0xff7843ac>
  804f40:	18c03fcc 	andi	r3,r3,255
  804f44:	1805341e 	bne	r3,zero,806418 <___vfprintf_internal_r+0x21f0>
  804f48:	9080080c 	andi	r2,r18,32
  804f4c:	1002cd26 	beq	r2,zero,805a84 <___vfprintf_internal_r+0x185c>
  804f50:	d9402d17 	ldw	r5,180(sp)
  804f54:	d9002f17 	ldw	r4,188(sp)
  804f58:	28800017 	ldw	r2,0(r5)
  804f5c:	2007d7fa 	srai	r3,r4,31
  804f60:	29400104 	addi	r5,r5,4
  804f64:	d9402d15 	stw	r5,180(sp)
  804f68:	11000015 	stw	r4,0(r2)
  804f6c:	10c00115 	stw	r3,4(r2)
  804f70:	003ce506 	br	804308 <__alt_mem_onchip_mem+0xff784308>
  804f74:	d8c02d17 	ldw	r3,180(sp)
  804f78:	d9002d17 	ldw	r4,180(sp)
  804f7c:	d8002785 	stb	zero,158(sp)
  804f80:	18800017 	ldw	r2,0(r3)
  804f84:	21000104 	addi	r4,r4,4
  804f88:	00c00044 	movi	r3,1
  804f8c:	d8c02a15 	stw	r3,168(sp)
  804f90:	d8801405 	stb	r2,80(sp)
  804f94:	d9002d15 	stw	r4,180(sp)
  804f98:	d8c02e15 	stw	r3,184(sp)
  804f9c:	d8002915 	stw	zero,164(sp)
  804fa0:	d8003215 	stw	zero,200(sp)
  804fa4:	dc001404 	addi	r16,sp,80
  804fa8:	0039883a 	mov	fp,zero
  804fac:	003e7206 	br	804978 <__alt_mem_onchip_mem+0xff784978>
  804fb0:	01002074 	movhi	r4,129
  804fb4:	210f6b04 	addi	r4,r4,15788
  804fb8:	0039883a 	mov	fp,zero
  804fbc:	d9003915 	stw	r4,228(sp)
  804fc0:	04401e04 	movi	r17,120
  804fc4:	003f8206 	br	804dd0 <__alt_mem_onchip_mem+0xff784dd0>
  804fc8:	18c03fcc 	andi	r3,r3,255
  804fcc:	1805061e 	bne	r3,zero,8063e8 <___vfprintf_internal_r+0x21c0>
  804fd0:	883d9126 	beq	r17,zero,804618 <__alt_mem_onchip_mem+0xff784618>
  804fd4:	00c00044 	movi	r3,1
  804fd8:	d8c02a15 	stw	r3,168(sp)
  804fdc:	dc401405 	stb	r17,80(sp)
  804fe0:	d8002785 	stb	zero,158(sp)
  804fe4:	003fec06 	br	804f98 <__alt_mem_onchip_mem+0xff784f98>
  804fe8:	01402074 	movhi	r5,129
  804fec:	294f6b04 	addi	r5,r5,15788
  804ff0:	d9403915 	stw	r5,228(sp)
  804ff4:	d8c02d15 	stw	r3,180(sp)
  804ff8:	1025883a 	mov	r18,r2
  804ffc:	04401e04 	movi	r17,120
  805000:	9d84b03a 	or	r2,r19,r22
  805004:	1000fc1e 	bne	r2,zero,8053f8 <___vfprintf_internal_r+0x11d0>
  805008:	0039883a 	mov	fp,zero
  80500c:	00800084 	movi	r2,2
  805010:	10803fcc 	andi	r2,r2,255
  805014:	00c00044 	movi	r3,1
  805018:	10c20f26 	beq	r2,r3,805858 <___vfprintf_internal_r+0x1630>
  80501c:	00c00084 	movi	r3,2
  805020:	10fd6326 	beq	r2,r3,8045b0 <__alt_mem_onchip_mem+0xff7845b0>
  805024:	003e2d06 	br	8048dc <__alt_mem_onchip_mem+0xff7848dc>
  805028:	d8c02017 	ldw	r3,128(sp)
  80502c:	003e9306 	br	804a7c <__alt_mem_onchip_mem+0xff784a7c>
  805030:	00801944 	movi	r2,101
  805034:	14407e0e 	bge	r2,r17,805230 <___vfprintf_internal_r+0x1008>
  805038:	d9003617 	ldw	r4,216(sp)
  80503c:	d9403817 	ldw	r5,224(sp)
  805040:	000d883a 	mov	r6,zero
  805044:	000f883a 	mov	r7,zero
  805048:	d8c03c15 	stw	r3,240(sp)
  80504c:	da003d15 	stw	r8,244(sp)
  805050:	080e4ac0 	call	80e4ac <__eqdf2>
  805054:	d8c03c17 	ldw	r3,240(sp)
  805058:	da003d17 	ldw	r8,244(sp)
  80505c:	1000f71e 	bne	r2,zero,80543c <___vfprintf_internal_r+0x1214>
  805060:	d8801f17 	ldw	r2,124(sp)
  805064:	01002074 	movhi	r4,129
  805068:	210f7204 	addi	r4,r4,15816
  80506c:	18c00044 	addi	r3,r3,1
  805070:	10800044 	addi	r2,r2,1
  805074:	41000015 	stw	r4,0(r8)
  805078:	01000044 	movi	r4,1
  80507c:	41000115 	stw	r4,4(r8)
  805080:	d8c02015 	stw	r3,128(sp)
  805084:	d8801f15 	stw	r2,124(sp)
  805088:	010001c4 	movi	r4,7
  80508c:	2082b816 	blt	r4,r2,805b70 <___vfprintf_internal_r+0x1948>
  805090:	42000204 	addi	r8,r8,8
  805094:	d8802617 	ldw	r2,152(sp)
  805098:	d9403317 	ldw	r5,204(sp)
  80509c:	11400216 	blt	r2,r5,8050a8 <___vfprintf_internal_r+0xe80>
  8050a0:	9080004c 	andi	r2,r18,1
  8050a4:	103ed526 	beq	r2,zero,804bfc <__alt_mem_onchip_mem+0xff784bfc>
  8050a8:	d8803717 	ldw	r2,220(sp)
  8050ac:	d9003417 	ldw	r4,208(sp)
  8050b0:	d9403717 	ldw	r5,220(sp)
  8050b4:	1887883a 	add	r3,r3,r2
  8050b8:	d8801f17 	ldw	r2,124(sp)
  8050bc:	41000015 	stw	r4,0(r8)
  8050c0:	41400115 	stw	r5,4(r8)
  8050c4:	10800044 	addi	r2,r2,1
  8050c8:	d8c02015 	stw	r3,128(sp)
  8050cc:	d8801f15 	stw	r2,124(sp)
  8050d0:	010001c4 	movi	r4,7
  8050d4:	20832916 	blt	r4,r2,805d7c <___vfprintf_internal_r+0x1b54>
  8050d8:	42000204 	addi	r8,r8,8
  8050dc:	d8803317 	ldw	r2,204(sp)
  8050e0:	143fffc4 	addi	r16,r2,-1
  8050e4:	043ec50e 	bge	zero,r16,804bfc <__alt_mem_onchip_mem+0xff784bfc>
  8050e8:	04400404 	movi	r17,16
  8050ec:	d8801f17 	ldw	r2,124(sp)
  8050f0:	8c00880e 	bge	r17,r16,805314 <___vfprintf_internal_r+0x10ec>
  8050f4:	01402074 	movhi	r5,129
  8050f8:	294f7284 	addi	r5,r5,15818
  8050fc:	d9402b15 	stw	r5,172(sp)
  805100:	058001c4 	movi	r22,7
  805104:	dcc02c17 	ldw	r19,176(sp)
  805108:	00000306 	br	805118 <___vfprintf_internal_r+0xef0>
  80510c:	42000204 	addi	r8,r8,8
  805110:	843ffc04 	addi	r16,r16,-16
  805114:	8c00820e 	bge	r17,r16,805320 <___vfprintf_internal_r+0x10f8>
  805118:	18c00404 	addi	r3,r3,16
  80511c:	10800044 	addi	r2,r2,1
  805120:	45000015 	stw	r20,0(r8)
  805124:	44400115 	stw	r17,4(r8)
  805128:	d8c02015 	stw	r3,128(sp)
  80512c:	d8801f15 	stw	r2,124(sp)
  805130:	b0bff60e 	bge	r22,r2,80510c <__alt_mem_onchip_mem+0xff78510c>
  805134:	d9801e04 	addi	r6,sp,120
  805138:	b80b883a 	mov	r5,r23
  80513c:	9809883a 	mov	r4,r19
  805140:	080ab5c0 	call	80ab5c <__sprint_r>
  805144:	103d3a1e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  805148:	d8c02017 	ldw	r3,128(sp)
  80514c:	d8801f17 	ldw	r2,124(sp)
  805150:	da000404 	addi	r8,sp,16
  805154:	003fee06 	br	805110 <__alt_mem_onchip_mem+0xff785110>
  805158:	d9403117 	ldw	r5,196(sp)
  80515c:	d8802a17 	ldw	r2,168(sp)
  805160:	28adc83a 	sub	r22,r5,r2
  805164:	05be630e 	bge	zero,r22,804af4 <__alt_mem_onchip_mem+0xff784af4>
  805168:	07000404 	movi	fp,16
  80516c:	d8801f17 	ldw	r2,124(sp)
  805170:	e5838f0e 	bge	fp,r22,805fb0 <___vfprintf_internal_r+0x1d88>
  805174:	01402074 	movhi	r5,129
  805178:	294f7284 	addi	r5,r5,15818
  80517c:	dc403015 	stw	r17,192(sp)
  805180:	d9402b15 	stw	r5,172(sp)
  805184:	b023883a 	mov	r17,r22
  805188:	04c001c4 	movi	r19,7
  80518c:	a82d883a 	mov	r22,r21
  805190:	902b883a 	mov	r21,r18
  805194:	8025883a 	mov	r18,r16
  805198:	dc002c17 	ldw	r16,176(sp)
  80519c:	00000306 	br	8051ac <___vfprintf_internal_r+0xf84>
  8051a0:	8c7ffc04 	addi	r17,r17,-16
  8051a4:	42000204 	addi	r8,r8,8
  8051a8:	e440110e 	bge	fp,r17,8051f0 <___vfprintf_internal_r+0xfc8>
  8051ac:	18c00404 	addi	r3,r3,16
  8051b0:	10800044 	addi	r2,r2,1
  8051b4:	45000015 	stw	r20,0(r8)
  8051b8:	47000115 	stw	fp,4(r8)
  8051bc:	d8c02015 	stw	r3,128(sp)
  8051c0:	d8801f15 	stw	r2,124(sp)
  8051c4:	98bff60e 	bge	r19,r2,8051a0 <__alt_mem_onchip_mem+0xff7851a0>
  8051c8:	d9801e04 	addi	r6,sp,120
  8051cc:	b80b883a 	mov	r5,r23
  8051d0:	8009883a 	mov	r4,r16
  8051d4:	080ab5c0 	call	80ab5c <__sprint_r>
  8051d8:	103d151e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  8051dc:	8c7ffc04 	addi	r17,r17,-16
  8051e0:	d8c02017 	ldw	r3,128(sp)
  8051e4:	d8801f17 	ldw	r2,124(sp)
  8051e8:	da000404 	addi	r8,sp,16
  8051ec:	e47fef16 	blt	fp,r17,8051ac <__alt_mem_onchip_mem+0xff7851ac>
  8051f0:	9021883a 	mov	r16,r18
  8051f4:	a825883a 	mov	r18,r21
  8051f8:	b02b883a 	mov	r21,r22
  8051fc:	882d883a 	mov	r22,r17
  805200:	dc403017 	ldw	r17,192(sp)
  805204:	d9002b17 	ldw	r4,172(sp)
  805208:	1d87883a 	add	r3,r3,r22
  80520c:	10800044 	addi	r2,r2,1
  805210:	41000015 	stw	r4,0(r8)
  805214:	45800115 	stw	r22,4(r8)
  805218:	d8c02015 	stw	r3,128(sp)
  80521c:	d8801f15 	stw	r2,124(sp)
  805220:	010001c4 	movi	r4,7
  805224:	20818e16 	blt	r4,r2,805860 <___vfprintf_internal_r+0x1638>
  805228:	42000204 	addi	r8,r8,8
  80522c:	003e3106 	br	804af4 <__alt_mem_onchip_mem+0xff784af4>
  805230:	d9403317 	ldw	r5,204(sp)
  805234:	00800044 	movi	r2,1
  805238:	18c00044 	addi	r3,r3,1
  80523c:	1141530e 	bge	r2,r5,80578c <___vfprintf_internal_r+0x1564>
  805240:	dc401f17 	ldw	r17,124(sp)
  805244:	00800044 	movi	r2,1
  805248:	40800115 	stw	r2,4(r8)
  80524c:	8c400044 	addi	r17,r17,1
  805250:	44000015 	stw	r16,0(r8)
  805254:	d8c02015 	stw	r3,128(sp)
  805258:	dc401f15 	stw	r17,124(sp)
  80525c:	008001c4 	movi	r2,7
  805260:	14416b16 	blt	r2,r17,805810 <___vfprintf_internal_r+0x15e8>
  805264:	42000204 	addi	r8,r8,8
  805268:	d8803717 	ldw	r2,220(sp)
  80526c:	d9003417 	ldw	r4,208(sp)
  805270:	8c400044 	addi	r17,r17,1
  805274:	10c7883a 	add	r3,r2,r3
  805278:	40800115 	stw	r2,4(r8)
  80527c:	41000015 	stw	r4,0(r8)
  805280:	d8c02015 	stw	r3,128(sp)
  805284:	dc401f15 	stw	r17,124(sp)
  805288:	008001c4 	movi	r2,7
  80528c:	14416916 	blt	r2,r17,805834 <___vfprintf_internal_r+0x160c>
  805290:	45800204 	addi	r22,r8,8
  805294:	d9003617 	ldw	r4,216(sp)
  805298:	d9403817 	ldw	r5,224(sp)
  80529c:	000d883a 	mov	r6,zero
  8052a0:	000f883a 	mov	r7,zero
  8052a4:	d8c03c15 	stw	r3,240(sp)
  8052a8:	080e4ac0 	call	80e4ac <__eqdf2>
  8052ac:	d8c03c17 	ldw	r3,240(sp)
  8052b0:	1000bc26 	beq	r2,zero,8055a4 <___vfprintf_internal_r+0x137c>
  8052b4:	d9403317 	ldw	r5,204(sp)
  8052b8:	84000044 	addi	r16,r16,1
  8052bc:	8c400044 	addi	r17,r17,1
  8052c0:	28bfffc4 	addi	r2,r5,-1
  8052c4:	1887883a 	add	r3,r3,r2
  8052c8:	b0800115 	stw	r2,4(r22)
  8052cc:	b4000015 	stw	r16,0(r22)
  8052d0:	d8c02015 	stw	r3,128(sp)
  8052d4:	dc401f15 	stw	r17,124(sp)
  8052d8:	008001c4 	movi	r2,7
  8052dc:	14414316 	blt	r2,r17,8057ec <___vfprintf_internal_r+0x15c4>
  8052e0:	b5800204 	addi	r22,r22,8
  8052e4:	d9003a17 	ldw	r4,232(sp)
  8052e8:	df0022c4 	addi	fp,sp,139
  8052ec:	8c400044 	addi	r17,r17,1
  8052f0:	20c7883a 	add	r3,r4,r3
  8052f4:	b7000015 	stw	fp,0(r22)
  8052f8:	b1000115 	stw	r4,4(r22)
  8052fc:	d8c02015 	stw	r3,128(sp)
  805300:	dc401f15 	stw	r17,124(sp)
  805304:	008001c4 	movi	r2,7
  805308:	14400e16 	blt	r2,r17,805344 <___vfprintf_internal_r+0x111c>
  80530c:	b2000204 	addi	r8,r22,8
  805310:	003e3a06 	br	804bfc <__alt_mem_onchip_mem+0xff784bfc>
  805314:	01002074 	movhi	r4,129
  805318:	210f7284 	addi	r4,r4,15818
  80531c:	d9002b15 	stw	r4,172(sp)
  805320:	d9002b17 	ldw	r4,172(sp)
  805324:	1c07883a 	add	r3,r3,r16
  805328:	44000115 	stw	r16,4(r8)
  80532c:	41000015 	stw	r4,0(r8)
  805330:	10800044 	addi	r2,r2,1
  805334:	d8c02015 	stw	r3,128(sp)
  805338:	d8801f15 	stw	r2,124(sp)
  80533c:	010001c4 	movi	r4,7
  805340:	20be2d0e 	bge	r4,r2,804bf8 <__alt_mem_onchip_mem+0xff784bf8>
  805344:	d9002c17 	ldw	r4,176(sp)
  805348:	d9801e04 	addi	r6,sp,120
  80534c:	b80b883a 	mov	r5,r23
  805350:	080ab5c0 	call	80ab5c <__sprint_r>
  805354:	103cb61e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  805358:	d8c02017 	ldw	r3,128(sp)
  80535c:	da000404 	addi	r8,sp,16
  805360:	003e2606 	br	804bfc <__alt_mem_onchip_mem+0xff784bfc>
  805364:	d9002c17 	ldw	r4,176(sp)
  805368:	d9801e04 	addi	r6,sp,120
  80536c:	b80b883a 	mov	r5,r23
  805370:	080ab5c0 	call	80ab5c <__sprint_r>
  805374:	103e5d26 	beq	r2,zero,804cec <__alt_mem_onchip_mem+0xff784cec>
  805378:	003cad06 	br	804630 <__alt_mem_onchip_mem+0xff784630>
  80537c:	d9002c17 	ldw	r4,176(sp)
  805380:	d9801e04 	addi	r6,sp,120
  805384:	b80b883a 	mov	r5,r23
  805388:	080ab5c0 	call	80ab5c <__sprint_r>
  80538c:	103ca81e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  805390:	d8c02017 	ldw	r3,128(sp)
  805394:	da000404 	addi	r8,sp,16
  805398:	003e0b06 	br	804bc8 <__alt_mem_onchip_mem+0xff784bc8>
  80539c:	d9002c17 	ldw	r4,176(sp)
  8053a0:	d9801e04 	addi	r6,sp,120
  8053a4:	b80b883a 	mov	r5,r23
  8053a8:	080ab5c0 	call	80ab5c <__sprint_r>
  8053ac:	103ca01e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  8053b0:	d8c02017 	ldw	r3,128(sp)
  8053b4:	da000404 	addi	r8,sp,16
  8053b8:	003dbd06 	br	804ab0 <__alt_mem_onchip_mem+0xff784ab0>
  8053bc:	d9002c17 	ldw	r4,176(sp)
  8053c0:	d9801e04 	addi	r6,sp,120
  8053c4:	b80b883a 	mov	r5,r23
  8053c8:	080ab5c0 	call	80ab5c <__sprint_r>
  8053cc:	103c981e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  8053d0:	d8c02017 	ldw	r3,128(sp)
  8053d4:	da000404 	addi	r8,sp,16
  8053d8:	003dc306 	br	804ae8 <__alt_mem_onchip_mem+0xff784ae8>
  8053dc:	d8802917 	ldw	r2,164(sp)
  8053e0:	d8002785 	stb	zero,158(sp)
  8053e4:	103f0616 	blt	r2,zero,805000 <__alt_mem_onchip_mem+0xff785000>
  8053e8:	00ffdfc4 	movi	r3,-129
  8053ec:	9d84b03a 	or	r2,r19,r22
  8053f0:	90e4703a 	and	r18,r18,r3
  8053f4:	103c6b26 	beq	r2,zero,8045a4 <__alt_mem_onchip_mem+0xff7845a4>
  8053f8:	0039883a 	mov	fp,zero
  8053fc:	003e7406 	br	804dd0 <__alt_mem_onchip_mem+0xff784dd0>
  805400:	9080040c 	andi	r2,r18,16
  805404:	1001b326 	beq	r2,zero,805ad4 <___vfprintf_internal_r+0x18ac>
  805408:	d9002d17 	ldw	r4,180(sp)
  80540c:	d9402917 	ldw	r5,164(sp)
  805410:	d8002785 	stb	zero,158(sp)
  805414:	20800104 	addi	r2,r4,4
  805418:	24c00017 	ldw	r19,0(r4)
  80541c:	002d883a 	mov	r22,zero
  805420:	2801b516 	blt	r5,zero,805af8 <___vfprintf_internal_r+0x18d0>
  805424:	00ffdfc4 	movi	r3,-129
  805428:	d8802d15 	stw	r2,180(sp)
  80542c:	90e4703a 	and	r18,r18,r3
  805430:	983d2726 	beq	r19,zero,8048d0 <__alt_mem_onchip_mem+0xff7848d0>
  805434:	0039883a 	mov	fp,zero
  805438:	003d2a06 	br	8048e4 <__alt_mem_onchip_mem+0xff7848e4>
  80543c:	dc402617 	ldw	r17,152(sp)
  805440:	0441d30e 	bge	zero,r17,805b90 <___vfprintf_internal_r+0x1968>
  805444:	dc403217 	ldw	r17,200(sp)
  805448:	d8803317 	ldw	r2,204(sp)
  80544c:	1440010e 	bge	r2,r17,805454 <___vfprintf_internal_r+0x122c>
  805450:	1023883a 	mov	r17,r2
  805454:	04400a0e 	bge	zero,r17,805480 <___vfprintf_internal_r+0x1258>
  805458:	d8801f17 	ldw	r2,124(sp)
  80545c:	1c47883a 	add	r3,r3,r17
  805460:	44000015 	stw	r16,0(r8)
  805464:	10800044 	addi	r2,r2,1
  805468:	44400115 	stw	r17,4(r8)
  80546c:	d8c02015 	stw	r3,128(sp)
  805470:	d8801f15 	stw	r2,124(sp)
  805474:	010001c4 	movi	r4,7
  805478:	20826516 	blt	r4,r2,805e10 <___vfprintf_internal_r+0x1be8>
  80547c:	42000204 	addi	r8,r8,8
  805480:	88026116 	blt	r17,zero,805e08 <___vfprintf_internal_r+0x1be0>
  805484:	d9003217 	ldw	r4,200(sp)
  805488:	2463c83a 	sub	r17,r4,r17
  80548c:	04407b0e 	bge	zero,r17,80567c <___vfprintf_internal_r+0x1454>
  805490:	05800404 	movi	r22,16
  805494:	d8801f17 	ldw	r2,124(sp)
  805498:	b4419d0e 	bge	r22,r17,805b10 <___vfprintf_internal_r+0x18e8>
  80549c:	01002074 	movhi	r4,129
  8054a0:	210f7284 	addi	r4,r4,15818
  8054a4:	d9002b15 	stw	r4,172(sp)
  8054a8:	070001c4 	movi	fp,7
  8054ac:	dcc02c17 	ldw	r19,176(sp)
  8054b0:	00000306 	br	8054c0 <___vfprintf_internal_r+0x1298>
  8054b4:	42000204 	addi	r8,r8,8
  8054b8:	8c7ffc04 	addi	r17,r17,-16
  8054bc:	b441970e 	bge	r22,r17,805b1c <___vfprintf_internal_r+0x18f4>
  8054c0:	18c00404 	addi	r3,r3,16
  8054c4:	10800044 	addi	r2,r2,1
  8054c8:	45000015 	stw	r20,0(r8)
  8054cc:	45800115 	stw	r22,4(r8)
  8054d0:	d8c02015 	stw	r3,128(sp)
  8054d4:	d8801f15 	stw	r2,124(sp)
  8054d8:	e0bff60e 	bge	fp,r2,8054b4 <__alt_mem_onchip_mem+0xff7854b4>
  8054dc:	d9801e04 	addi	r6,sp,120
  8054e0:	b80b883a 	mov	r5,r23
  8054e4:	9809883a 	mov	r4,r19
  8054e8:	080ab5c0 	call	80ab5c <__sprint_r>
  8054ec:	103c501e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  8054f0:	d8c02017 	ldw	r3,128(sp)
  8054f4:	d8801f17 	ldw	r2,124(sp)
  8054f8:	da000404 	addi	r8,sp,16
  8054fc:	003fee06 	br	8054b8 <__alt_mem_onchip_mem+0xff7854b8>
  805500:	d9002c17 	ldw	r4,176(sp)
  805504:	d9801e04 	addi	r6,sp,120
  805508:	b80b883a 	mov	r5,r23
  80550c:	080ab5c0 	call	80ab5c <__sprint_r>
  805510:	103c471e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  805514:	d8c02017 	ldw	r3,128(sp)
  805518:	df002787 	ldb	fp,158(sp)
  80551c:	da000404 	addi	r8,sp,16
  805520:	003d5606 	br	804a7c <__alt_mem_onchip_mem+0xff784a7c>
  805524:	9080040c 	andi	r2,r18,16
  805528:	10016126 	beq	r2,zero,805ab0 <___vfprintf_internal_r+0x1888>
  80552c:	d8802d17 	ldw	r2,180(sp)
  805530:	14c00017 	ldw	r19,0(r2)
  805534:	10800104 	addi	r2,r2,4
  805538:	d8802d15 	stw	r2,180(sp)
  80553c:	982dd7fa 	srai	r22,r19,31
  805540:	b005883a 	mov	r2,r22
  805544:	003c8206 	br	804750 <__alt_mem_onchip_mem+0xff784750>
  805548:	9080040c 	andi	r2,r18,16
  80554c:	10003526 	beq	r2,zero,805624 <___vfprintf_internal_r+0x13fc>
  805550:	d9402d17 	ldw	r5,180(sp)
  805554:	d8c02917 	ldw	r3,164(sp)
  805558:	d8002785 	stb	zero,158(sp)
  80555c:	28800104 	addi	r2,r5,4
  805560:	2cc00017 	ldw	r19,0(r5)
  805564:	002d883a 	mov	r22,zero
  805568:	18003716 	blt	r3,zero,805648 <___vfprintf_internal_r+0x1420>
  80556c:	00ffdfc4 	movi	r3,-129
  805570:	d8802d15 	stw	r2,180(sp)
  805574:	90e4703a 	and	r18,r18,r3
  805578:	0039883a 	mov	fp,zero
  80557c:	983df326 	beq	r19,zero,804d4c <__alt_mem_onchip_mem+0xff784d4c>
  805580:	00800244 	movi	r2,9
  805584:	14fc7b36 	bltu	r2,r19,804774 <__alt_mem_onchip_mem+0xff784774>
  805588:	d8c02817 	ldw	r3,160(sp)
  80558c:	dc001dc4 	addi	r16,sp,119
  805590:	9cc00c04 	addi	r19,r19,48
  805594:	1c07c83a 	sub	r3,r3,r16
  805598:	dcc01dc5 	stb	r19,119(sp)
  80559c:	d8c02e15 	stw	r3,184(sp)
  8055a0:	003ce806 	br	804944 <__alt_mem_onchip_mem+0xff784944>
  8055a4:	d8803317 	ldw	r2,204(sp)
  8055a8:	143fffc4 	addi	r16,r2,-1
  8055ac:	043f4d0e 	bge	zero,r16,8052e4 <__alt_mem_onchip_mem+0xff7852e4>
  8055b0:	07000404 	movi	fp,16
  8055b4:	e400810e 	bge	fp,r16,8057bc <___vfprintf_internal_r+0x1594>
  8055b8:	01402074 	movhi	r5,129
  8055bc:	294f7284 	addi	r5,r5,15818
  8055c0:	d9402b15 	stw	r5,172(sp)
  8055c4:	01c001c4 	movi	r7,7
  8055c8:	dcc02c17 	ldw	r19,176(sp)
  8055cc:	00000306 	br	8055dc <___vfprintf_internal_r+0x13b4>
  8055d0:	b5800204 	addi	r22,r22,8
  8055d4:	843ffc04 	addi	r16,r16,-16
  8055d8:	e4007b0e 	bge	fp,r16,8057c8 <___vfprintf_internal_r+0x15a0>
  8055dc:	18c00404 	addi	r3,r3,16
  8055e0:	8c400044 	addi	r17,r17,1
  8055e4:	b5000015 	stw	r20,0(r22)
  8055e8:	b7000115 	stw	fp,4(r22)
  8055ec:	d8c02015 	stw	r3,128(sp)
  8055f0:	dc401f15 	stw	r17,124(sp)
  8055f4:	3c7ff60e 	bge	r7,r17,8055d0 <__alt_mem_onchip_mem+0xff7855d0>
  8055f8:	d9801e04 	addi	r6,sp,120
  8055fc:	b80b883a 	mov	r5,r23
  805600:	9809883a 	mov	r4,r19
  805604:	d9c03c15 	stw	r7,240(sp)
  805608:	080ab5c0 	call	80ab5c <__sprint_r>
  80560c:	d9c03c17 	ldw	r7,240(sp)
  805610:	103c071e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  805614:	d8c02017 	ldw	r3,128(sp)
  805618:	dc401f17 	ldw	r17,124(sp)
  80561c:	dd800404 	addi	r22,sp,16
  805620:	003fec06 	br	8055d4 <__alt_mem_onchip_mem+0xff7855d4>
  805624:	9080100c 	andi	r2,r18,64
  805628:	d8002785 	stb	zero,158(sp)
  80562c:	10010e26 	beq	r2,zero,805a68 <___vfprintf_internal_r+0x1840>
  805630:	d9002d17 	ldw	r4,180(sp)
  805634:	d9402917 	ldw	r5,164(sp)
  805638:	002d883a 	mov	r22,zero
  80563c:	20800104 	addi	r2,r4,4
  805640:	24c0000b 	ldhu	r19,0(r4)
  805644:	283fc90e 	bge	r5,zero,80556c <__alt_mem_onchip_mem+0xff78556c>
  805648:	d8802d15 	stw	r2,180(sp)
  80564c:	0039883a 	mov	fp,zero
  805650:	9d84b03a 	or	r2,r19,r22
  805654:	103c461e 	bne	r2,zero,804770 <__alt_mem_onchip_mem+0xff784770>
  805658:	00800044 	movi	r2,1
  80565c:	003e6c06 	br	805010 <__alt_mem_onchip_mem+0xff785010>
  805660:	d9002c17 	ldw	r4,176(sp)
  805664:	d9801e04 	addi	r6,sp,120
  805668:	b80b883a 	mov	r5,r23
  80566c:	080ab5c0 	call	80ab5c <__sprint_r>
  805670:	103bef1e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  805674:	d8c02017 	ldw	r3,128(sp)
  805678:	da000404 	addi	r8,sp,16
  80567c:	d9003217 	ldw	r4,200(sp)
  805680:	d8802617 	ldw	r2,152(sp)
  805684:	d9403317 	ldw	r5,204(sp)
  805688:	8123883a 	add	r17,r16,r4
  80568c:	11400216 	blt	r2,r5,805698 <___vfprintf_internal_r+0x1470>
  805690:	9100004c 	andi	r4,r18,1
  805694:	20000d26 	beq	r4,zero,8056cc <___vfprintf_internal_r+0x14a4>
  805698:	d9003717 	ldw	r4,220(sp)
  80569c:	d9403417 	ldw	r5,208(sp)
  8056a0:	1907883a 	add	r3,r3,r4
  8056a4:	d9001f17 	ldw	r4,124(sp)
  8056a8:	41400015 	stw	r5,0(r8)
  8056ac:	d9403717 	ldw	r5,220(sp)
  8056b0:	21000044 	addi	r4,r4,1
  8056b4:	d8c02015 	stw	r3,128(sp)
  8056b8:	41400115 	stw	r5,4(r8)
  8056bc:	d9001f15 	stw	r4,124(sp)
  8056c0:	014001c4 	movi	r5,7
  8056c4:	2901e816 	blt	r5,r4,805e68 <___vfprintf_internal_r+0x1c40>
  8056c8:	42000204 	addi	r8,r8,8
  8056cc:	d9003317 	ldw	r4,204(sp)
  8056d0:	8121883a 	add	r16,r16,r4
  8056d4:	2085c83a 	sub	r2,r4,r2
  8056d8:	8461c83a 	sub	r16,r16,r17
  8056dc:	1400010e 	bge	r2,r16,8056e4 <___vfprintf_internal_r+0x14bc>
  8056e0:	1021883a 	mov	r16,r2
  8056e4:	04000a0e 	bge	zero,r16,805710 <___vfprintf_internal_r+0x14e8>
  8056e8:	d9001f17 	ldw	r4,124(sp)
  8056ec:	1c07883a 	add	r3,r3,r16
  8056f0:	44400015 	stw	r17,0(r8)
  8056f4:	21000044 	addi	r4,r4,1
  8056f8:	44000115 	stw	r16,4(r8)
  8056fc:	d8c02015 	stw	r3,128(sp)
  805700:	d9001f15 	stw	r4,124(sp)
  805704:	014001c4 	movi	r5,7
  805708:	2901fb16 	blt	r5,r4,805ef8 <___vfprintf_internal_r+0x1cd0>
  80570c:	42000204 	addi	r8,r8,8
  805710:	8001f716 	blt	r16,zero,805ef0 <___vfprintf_internal_r+0x1cc8>
  805714:	1421c83a 	sub	r16,r2,r16
  805718:	043d380e 	bge	zero,r16,804bfc <__alt_mem_onchip_mem+0xff784bfc>
  80571c:	04400404 	movi	r17,16
  805720:	d8801f17 	ldw	r2,124(sp)
  805724:	8c3efb0e 	bge	r17,r16,805314 <__alt_mem_onchip_mem+0xff785314>
  805728:	01402074 	movhi	r5,129
  80572c:	294f7284 	addi	r5,r5,15818
  805730:	d9402b15 	stw	r5,172(sp)
  805734:	058001c4 	movi	r22,7
  805738:	dcc02c17 	ldw	r19,176(sp)
  80573c:	00000306 	br	80574c <___vfprintf_internal_r+0x1524>
  805740:	42000204 	addi	r8,r8,8
  805744:	843ffc04 	addi	r16,r16,-16
  805748:	8c3ef50e 	bge	r17,r16,805320 <__alt_mem_onchip_mem+0xff785320>
  80574c:	18c00404 	addi	r3,r3,16
  805750:	10800044 	addi	r2,r2,1
  805754:	45000015 	stw	r20,0(r8)
  805758:	44400115 	stw	r17,4(r8)
  80575c:	d8c02015 	stw	r3,128(sp)
  805760:	d8801f15 	stw	r2,124(sp)
  805764:	b0bff60e 	bge	r22,r2,805740 <__alt_mem_onchip_mem+0xff785740>
  805768:	d9801e04 	addi	r6,sp,120
  80576c:	b80b883a 	mov	r5,r23
  805770:	9809883a 	mov	r4,r19
  805774:	080ab5c0 	call	80ab5c <__sprint_r>
  805778:	103bad1e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  80577c:	d8c02017 	ldw	r3,128(sp)
  805780:	d8801f17 	ldw	r2,124(sp)
  805784:	da000404 	addi	r8,sp,16
  805788:	003fee06 	br	805744 <__alt_mem_onchip_mem+0xff785744>
  80578c:	9088703a 	and	r4,r18,r2
  805790:	203eab1e 	bne	r4,zero,805240 <__alt_mem_onchip_mem+0xff785240>
  805794:	dc401f17 	ldw	r17,124(sp)
  805798:	40800115 	stw	r2,4(r8)
  80579c:	44000015 	stw	r16,0(r8)
  8057a0:	8c400044 	addi	r17,r17,1
  8057a4:	d8c02015 	stw	r3,128(sp)
  8057a8:	dc401f15 	stw	r17,124(sp)
  8057ac:	008001c4 	movi	r2,7
  8057b0:	14400e16 	blt	r2,r17,8057ec <___vfprintf_internal_r+0x15c4>
  8057b4:	45800204 	addi	r22,r8,8
  8057b8:	003eca06 	br	8052e4 <__alt_mem_onchip_mem+0xff7852e4>
  8057bc:	01002074 	movhi	r4,129
  8057c0:	210f7284 	addi	r4,r4,15818
  8057c4:	d9002b15 	stw	r4,172(sp)
  8057c8:	d8802b17 	ldw	r2,172(sp)
  8057cc:	1c07883a 	add	r3,r3,r16
  8057d0:	8c400044 	addi	r17,r17,1
  8057d4:	b0800015 	stw	r2,0(r22)
  8057d8:	b4000115 	stw	r16,4(r22)
  8057dc:	d8c02015 	stw	r3,128(sp)
  8057e0:	dc401f15 	stw	r17,124(sp)
  8057e4:	008001c4 	movi	r2,7
  8057e8:	147ebd0e 	bge	r2,r17,8052e0 <__alt_mem_onchip_mem+0xff7852e0>
  8057ec:	d9002c17 	ldw	r4,176(sp)
  8057f0:	d9801e04 	addi	r6,sp,120
  8057f4:	b80b883a 	mov	r5,r23
  8057f8:	080ab5c0 	call	80ab5c <__sprint_r>
  8057fc:	103b8c1e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  805800:	d8c02017 	ldw	r3,128(sp)
  805804:	dc401f17 	ldw	r17,124(sp)
  805808:	dd800404 	addi	r22,sp,16
  80580c:	003eb506 	br	8052e4 <__alt_mem_onchip_mem+0xff7852e4>
  805810:	d9002c17 	ldw	r4,176(sp)
  805814:	d9801e04 	addi	r6,sp,120
  805818:	b80b883a 	mov	r5,r23
  80581c:	080ab5c0 	call	80ab5c <__sprint_r>
  805820:	103b831e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  805824:	d8c02017 	ldw	r3,128(sp)
  805828:	dc401f17 	ldw	r17,124(sp)
  80582c:	da000404 	addi	r8,sp,16
  805830:	003e8d06 	br	805268 <__alt_mem_onchip_mem+0xff785268>
  805834:	d9002c17 	ldw	r4,176(sp)
  805838:	d9801e04 	addi	r6,sp,120
  80583c:	b80b883a 	mov	r5,r23
  805840:	080ab5c0 	call	80ab5c <__sprint_r>
  805844:	103b7a1e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  805848:	d8c02017 	ldw	r3,128(sp)
  80584c:	dc401f17 	ldw	r17,124(sp)
  805850:	dd800404 	addi	r22,sp,16
  805854:	003e8f06 	br	805294 <__alt_mem_onchip_mem+0xff785294>
  805858:	0027883a 	mov	r19,zero
  80585c:	003f4a06 	br	805588 <__alt_mem_onchip_mem+0xff785588>
  805860:	d9002c17 	ldw	r4,176(sp)
  805864:	d9801e04 	addi	r6,sp,120
  805868:	b80b883a 	mov	r5,r23
  80586c:	080ab5c0 	call	80ab5c <__sprint_r>
  805870:	103b6f1e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  805874:	d8c02017 	ldw	r3,128(sp)
  805878:	da000404 	addi	r8,sp,16
  80587c:	003c9d06 	br	804af4 <__alt_mem_onchip_mem+0xff784af4>
  805880:	04e7c83a 	sub	r19,zero,r19
  805884:	9804c03a 	cmpne	r2,r19,zero
  805888:	05adc83a 	sub	r22,zero,r22
  80588c:	b0adc83a 	sub	r22,r22,r2
  805890:	d8802917 	ldw	r2,164(sp)
  805894:	07000b44 	movi	fp,45
  805898:	df002785 	stb	fp,158(sp)
  80589c:	10017b16 	blt	r2,zero,805e8c <___vfprintf_internal_r+0x1c64>
  8058a0:	00bfdfc4 	movi	r2,-129
  8058a4:	90a4703a 	and	r18,r18,r2
  8058a8:	003bb106 	br	804770 <__alt_mem_onchip_mem+0xff784770>
  8058ac:	d9003617 	ldw	r4,216(sp)
  8058b0:	d9403817 	ldw	r5,224(sp)
  8058b4:	da003d15 	stw	r8,244(sp)
  8058b8:	080a9100 	call	80a910 <__fpclassifyd>
  8058bc:	da003d17 	ldw	r8,244(sp)
  8058c0:	1000f026 	beq	r2,zero,805c84 <___vfprintf_internal_r+0x1a5c>
  8058c4:	d9002917 	ldw	r4,164(sp)
  8058c8:	05bff7c4 	movi	r22,-33
  8058cc:	00bfffc4 	movi	r2,-1
  8058d0:	8dac703a 	and	r22,r17,r22
  8058d4:	20820026 	beq	r4,r2,8060d8 <___vfprintf_internal_r+0x1eb0>
  8058d8:	008011c4 	movi	r2,71
  8058dc:	b081f726 	beq	r22,r2,8060bc <___vfprintf_internal_r+0x1e94>
  8058e0:	d9003817 	ldw	r4,224(sp)
  8058e4:	90c04014 	ori	r3,r18,256
  8058e8:	d8c02b15 	stw	r3,172(sp)
  8058ec:	20021516 	blt	r4,zero,806144 <___vfprintf_internal_r+0x1f1c>
  8058f0:	dcc03817 	ldw	r19,224(sp)
  8058f4:	d8002a05 	stb	zero,168(sp)
  8058f8:	00801984 	movi	r2,102
  8058fc:	8881f926 	beq	r17,r2,8060e4 <___vfprintf_internal_r+0x1ebc>
  805900:	00801184 	movi	r2,70
  805904:	88821c26 	beq	r17,r2,806178 <___vfprintf_internal_r+0x1f50>
  805908:	00801144 	movi	r2,69
  80590c:	b081ef26 	beq	r22,r2,8060cc <___vfprintf_internal_r+0x1ea4>
  805910:	d8c02917 	ldw	r3,164(sp)
  805914:	d8802104 	addi	r2,sp,132
  805918:	d8800315 	stw	r2,12(sp)
  80591c:	d9403617 	ldw	r5,216(sp)
  805920:	d8802504 	addi	r2,sp,148
  805924:	d9002c17 	ldw	r4,176(sp)
  805928:	d8800215 	stw	r2,8(sp)
  80592c:	d8802604 	addi	r2,sp,152
  805930:	d8c00015 	stw	r3,0(sp)
  805934:	d8800115 	stw	r2,4(sp)
  805938:	01c00084 	movi	r7,2
  80593c:	980d883a 	mov	r6,r19
  805940:	d8c03c15 	stw	r3,240(sp)
  805944:	da003d15 	stw	r8,244(sp)
  805948:	08069000 	call	806900 <_dtoa_r>
  80594c:	1021883a 	mov	r16,r2
  805950:	008019c4 	movi	r2,103
  805954:	d8c03c17 	ldw	r3,240(sp)
  805958:	da003d17 	ldw	r8,244(sp)
  80595c:	88817126 	beq	r17,r2,805f24 <___vfprintf_internal_r+0x1cfc>
  805960:	008011c4 	movi	r2,71
  805964:	88829226 	beq	r17,r2,8063b0 <___vfprintf_internal_r+0x2188>
  805968:	80f9883a 	add	fp,r16,r3
  80596c:	d9003617 	ldw	r4,216(sp)
  805970:	000d883a 	mov	r6,zero
  805974:	000f883a 	mov	r7,zero
  805978:	980b883a 	mov	r5,r19
  80597c:	da003d15 	stw	r8,244(sp)
  805980:	080e4ac0 	call	80e4ac <__eqdf2>
  805984:	da003d17 	ldw	r8,244(sp)
  805988:	10018d26 	beq	r2,zero,805fc0 <___vfprintf_internal_r+0x1d98>
  80598c:	d8802117 	ldw	r2,132(sp)
  805990:	1700062e 	bgeu	r2,fp,8059ac <___vfprintf_internal_r+0x1784>
  805994:	01000c04 	movi	r4,48
  805998:	10c00044 	addi	r3,r2,1
  80599c:	d8c02115 	stw	r3,132(sp)
  8059a0:	11000005 	stb	r4,0(r2)
  8059a4:	d8802117 	ldw	r2,132(sp)
  8059a8:	173ffb36 	bltu	r2,fp,805998 <__alt_mem_onchip_mem+0xff785998>
  8059ac:	1405c83a 	sub	r2,r2,r16
  8059b0:	d8803315 	stw	r2,204(sp)
  8059b4:	008011c4 	movi	r2,71
  8059b8:	b0817626 	beq	r22,r2,805f94 <___vfprintf_internal_r+0x1d6c>
  8059bc:	00801944 	movi	r2,101
  8059c0:	1442810e 	bge	r2,r17,8063c8 <___vfprintf_internal_r+0x21a0>
  8059c4:	d8c02617 	ldw	r3,152(sp)
  8059c8:	00801984 	movi	r2,102
  8059cc:	d8c03215 	stw	r3,200(sp)
  8059d0:	8881fe26 	beq	r17,r2,8061cc <___vfprintf_internal_r+0x1fa4>
  8059d4:	d8c03217 	ldw	r3,200(sp)
  8059d8:	d9003317 	ldw	r4,204(sp)
  8059dc:	1901dd16 	blt	r3,r4,806154 <___vfprintf_internal_r+0x1f2c>
  8059e0:	9480004c 	andi	r18,r18,1
  8059e4:	90022b1e 	bne	r18,zero,806294 <___vfprintf_internal_r+0x206c>
  8059e8:	1805883a 	mov	r2,r3
  8059ec:	18028016 	blt	r3,zero,8063f0 <___vfprintf_internal_r+0x21c8>
  8059f0:	d8c03217 	ldw	r3,200(sp)
  8059f4:	044019c4 	movi	r17,103
  8059f8:	d8c02e15 	stw	r3,184(sp)
  8059fc:	df002a07 	ldb	fp,168(sp)
  805a00:	e001531e 	bne	fp,zero,805f50 <___vfprintf_internal_r+0x1d28>
  805a04:	df002783 	ldbu	fp,158(sp)
  805a08:	d8802a15 	stw	r2,168(sp)
  805a0c:	dc802b17 	ldw	r18,172(sp)
  805a10:	d8002915 	stw	zero,164(sp)
  805a14:	003bd106 	br	80495c <__alt_mem_onchip_mem+0xff78495c>
  805a18:	d8802d17 	ldw	r2,180(sp)
  805a1c:	d8c02d17 	ldw	r3,180(sp)
  805a20:	d9002d17 	ldw	r4,180(sp)
  805a24:	10800017 	ldw	r2,0(r2)
  805a28:	18c00117 	ldw	r3,4(r3)
  805a2c:	21000204 	addi	r4,r4,8
  805a30:	d8803615 	stw	r2,216(sp)
  805a34:	d8c03815 	stw	r3,224(sp)
  805a38:	d9002d15 	stw	r4,180(sp)
  805a3c:	003b7506 	br	804814 <__alt_mem_onchip_mem+0xff784814>
  805a40:	ac400007 	ldb	r17,0(r21)
  805a44:	003a5906 	br	8043ac <__alt_mem_onchip_mem+0xff7843ac>
  805a48:	9080100c 	andi	r2,r18,64
  805a4c:	1000a826 	beq	r2,zero,805cf0 <___vfprintf_internal_r+0x1ac8>
  805a50:	d9002d17 	ldw	r4,180(sp)
  805a54:	002d883a 	mov	r22,zero
  805a58:	24c0000b 	ldhu	r19,0(r4)
  805a5c:	21000104 	addi	r4,r4,4
  805a60:	d9002d15 	stw	r4,180(sp)
  805a64:	003ccb06 	br	804d94 <__alt_mem_onchip_mem+0xff784d94>
  805a68:	d8c02d17 	ldw	r3,180(sp)
  805a6c:	d9002917 	ldw	r4,164(sp)
  805a70:	002d883a 	mov	r22,zero
  805a74:	18800104 	addi	r2,r3,4
  805a78:	1cc00017 	ldw	r19,0(r3)
  805a7c:	203ebb0e 	bge	r4,zero,80556c <__alt_mem_onchip_mem+0xff78556c>
  805a80:	003ef106 	br	805648 <__alt_mem_onchip_mem+0xff785648>
  805a84:	9080040c 	andi	r2,r18,16
  805a88:	1000921e 	bne	r2,zero,805cd4 <___vfprintf_internal_r+0x1aac>
  805a8c:	9480100c 	andi	r18,r18,64
  805a90:	90013926 	beq	r18,zero,805f78 <___vfprintf_internal_r+0x1d50>
  805a94:	d9002d17 	ldw	r4,180(sp)
  805a98:	d9402f17 	ldw	r5,188(sp)
  805a9c:	20800017 	ldw	r2,0(r4)
  805aa0:	21000104 	addi	r4,r4,4
  805aa4:	d9002d15 	stw	r4,180(sp)
  805aa8:	1140000d 	sth	r5,0(r2)
  805aac:	003a1606 	br	804308 <__alt_mem_onchip_mem+0xff784308>
  805ab0:	9080100c 	andi	r2,r18,64
  805ab4:	10008026 	beq	r2,zero,805cb8 <___vfprintf_internal_r+0x1a90>
  805ab8:	d8c02d17 	ldw	r3,180(sp)
  805abc:	1cc0000f 	ldh	r19,0(r3)
  805ac0:	18c00104 	addi	r3,r3,4
  805ac4:	d8c02d15 	stw	r3,180(sp)
  805ac8:	982dd7fa 	srai	r22,r19,31
  805acc:	b005883a 	mov	r2,r22
  805ad0:	003b1f06 	br	804750 <__alt_mem_onchip_mem+0xff784750>
  805ad4:	9080100c 	andi	r2,r18,64
  805ad8:	d8002785 	stb	zero,158(sp)
  805adc:	10008a1e 	bne	r2,zero,805d08 <___vfprintf_internal_r+0x1ae0>
  805ae0:	d9402d17 	ldw	r5,180(sp)
  805ae4:	d8c02917 	ldw	r3,164(sp)
  805ae8:	002d883a 	mov	r22,zero
  805aec:	28800104 	addi	r2,r5,4
  805af0:	2cc00017 	ldw	r19,0(r5)
  805af4:	183e4b0e 	bge	r3,zero,805424 <__alt_mem_onchip_mem+0xff785424>
  805af8:	9d86b03a 	or	r3,r19,r22
  805afc:	d8802d15 	stw	r2,180(sp)
  805b00:	183e4c1e 	bne	r3,zero,805434 <__alt_mem_onchip_mem+0xff785434>
  805b04:	0039883a 	mov	fp,zero
  805b08:	0005883a 	mov	r2,zero
  805b0c:	003d4006 	br	805010 <__alt_mem_onchip_mem+0xff785010>
  805b10:	01402074 	movhi	r5,129
  805b14:	294f7284 	addi	r5,r5,15818
  805b18:	d9402b15 	stw	r5,172(sp)
  805b1c:	d9402b17 	ldw	r5,172(sp)
  805b20:	1c47883a 	add	r3,r3,r17
  805b24:	10800044 	addi	r2,r2,1
  805b28:	41400015 	stw	r5,0(r8)
  805b2c:	44400115 	stw	r17,4(r8)
  805b30:	d8c02015 	stw	r3,128(sp)
  805b34:	d8801f15 	stw	r2,124(sp)
  805b38:	010001c4 	movi	r4,7
  805b3c:	20bec816 	blt	r4,r2,805660 <__alt_mem_onchip_mem+0xff785660>
  805b40:	42000204 	addi	r8,r8,8
  805b44:	003ecd06 	br	80567c <__alt_mem_onchip_mem+0xff78567c>
  805b48:	d9002917 	ldw	r4,164(sp)
  805b4c:	d8002785 	stb	zero,158(sp)
  805b50:	203d2d16 	blt	r4,zero,805008 <__alt_mem_onchip_mem+0xff785008>
  805b54:	00bfdfc4 	movi	r2,-129
  805b58:	90a4703a 	and	r18,r18,r2
  805b5c:	003a9106 	br	8045a4 <__alt_mem_onchip_mem+0xff7845a4>
  805b60:	01002074 	movhi	r4,129
  805b64:	210f7284 	addi	r4,r4,15818
  805b68:	d9002b15 	stw	r4,172(sp)
  805b6c:	003c0c06 	br	804ba0 <__alt_mem_onchip_mem+0xff784ba0>
  805b70:	d9002c17 	ldw	r4,176(sp)
  805b74:	d9801e04 	addi	r6,sp,120
  805b78:	b80b883a 	mov	r5,r23
  805b7c:	080ab5c0 	call	80ab5c <__sprint_r>
  805b80:	103aab1e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  805b84:	d8c02017 	ldw	r3,128(sp)
  805b88:	da000404 	addi	r8,sp,16
  805b8c:	003d4106 	br	805094 <__alt_mem_onchip_mem+0xff785094>
  805b90:	d8801f17 	ldw	r2,124(sp)
  805b94:	01402074 	movhi	r5,129
  805b98:	01000044 	movi	r4,1
  805b9c:	18c00044 	addi	r3,r3,1
  805ba0:	10800044 	addi	r2,r2,1
  805ba4:	294f7204 	addi	r5,r5,15816
  805ba8:	41000115 	stw	r4,4(r8)
  805bac:	41400015 	stw	r5,0(r8)
  805bb0:	d8c02015 	stw	r3,128(sp)
  805bb4:	d8801f15 	stw	r2,124(sp)
  805bb8:	010001c4 	movi	r4,7
  805bbc:	20805c16 	blt	r4,r2,805d30 <___vfprintf_internal_r+0x1b08>
  805bc0:	42000204 	addi	r8,r8,8
  805bc4:	8800041e 	bne	r17,zero,805bd8 <___vfprintf_internal_r+0x19b0>
  805bc8:	d8803317 	ldw	r2,204(sp)
  805bcc:	1000021e 	bne	r2,zero,805bd8 <___vfprintf_internal_r+0x19b0>
  805bd0:	9080004c 	andi	r2,r18,1
  805bd4:	103c0926 	beq	r2,zero,804bfc <__alt_mem_onchip_mem+0xff784bfc>
  805bd8:	d9003717 	ldw	r4,220(sp)
  805bdc:	d8801f17 	ldw	r2,124(sp)
  805be0:	d9403417 	ldw	r5,208(sp)
  805be4:	20c7883a 	add	r3,r4,r3
  805be8:	10800044 	addi	r2,r2,1
  805bec:	41000115 	stw	r4,4(r8)
  805bf0:	41400015 	stw	r5,0(r8)
  805bf4:	d8c02015 	stw	r3,128(sp)
  805bf8:	d8801f15 	stw	r2,124(sp)
  805bfc:	010001c4 	movi	r4,7
  805c00:	20812116 	blt	r4,r2,806088 <___vfprintf_internal_r+0x1e60>
  805c04:	42000204 	addi	r8,r8,8
  805c08:	0463c83a 	sub	r17,zero,r17
  805c0c:	0440730e 	bge	zero,r17,805ddc <___vfprintf_internal_r+0x1bb4>
  805c10:	05800404 	movi	r22,16
  805c14:	b440860e 	bge	r22,r17,805e30 <___vfprintf_internal_r+0x1c08>
  805c18:	01402074 	movhi	r5,129
  805c1c:	294f7284 	addi	r5,r5,15818
  805c20:	d9402b15 	stw	r5,172(sp)
  805c24:	070001c4 	movi	fp,7
  805c28:	dcc02c17 	ldw	r19,176(sp)
  805c2c:	00000306 	br	805c3c <___vfprintf_internal_r+0x1a14>
  805c30:	42000204 	addi	r8,r8,8
  805c34:	8c7ffc04 	addi	r17,r17,-16
  805c38:	b440800e 	bge	r22,r17,805e3c <___vfprintf_internal_r+0x1c14>
  805c3c:	18c00404 	addi	r3,r3,16
  805c40:	10800044 	addi	r2,r2,1
  805c44:	45000015 	stw	r20,0(r8)
  805c48:	45800115 	stw	r22,4(r8)
  805c4c:	d8c02015 	stw	r3,128(sp)
  805c50:	d8801f15 	stw	r2,124(sp)
  805c54:	e0bff60e 	bge	fp,r2,805c30 <__alt_mem_onchip_mem+0xff785c30>
  805c58:	d9801e04 	addi	r6,sp,120
  805c5c:	b80b883a 	mov	r5,r23
  805c60:	9809883a 	mov	r4,r19
  805c64:	080ab5c0 	call	80ab5c <__sprint_r>
  805c68:	103a711e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  805c6c:	d8c02017 	ldw	r3,128(sp)
  805c70:	d8801f17 	ldw	r2,124(sp)
  805c74:	da000404 	addi	r8,sp,16
  805c78:	003fee06 	br	805c34 <__alt_mem_onchip_mem+0xff785c34>
  805c7c:	00bfffc4 	movi	r2,-1
  805c80:	003a6f06 	br	804640 <__alt_mem_onchip_mem+0xff784640>
  805c84:	008011c4 	movi	r2,71
  805c88:	1440b816 	blt	r2,r17,805f6c <___vfprintf_internal_r+0x1d44>
  805c8c:	04002074 	movhi	r16,129
  805c90:	840f6404 	addi	r16,r16,15760
  805c94:	00c000c4 	movi	r3,3
  805c98:	00bfdfc4 	movi	r2,-129
  805c9c:	d8c02a15 	stw	r3,168(sp)
  805ca0:	90a4703a 	and	r18,r18,r2
  805ca4:	df002783 	ldbu	fp,158(sp)
  805ca8:	d8c02e15 	stw	r3,184(sp)
  805cac:	d8002915 	stw	zero,164(sp)
  805cb0:	d8003215 	stw	zero,200(sp)
  805cb4:	003b2906 	br	80495c <__alt_mem_onchip_mem+0xff78495c>
  805cb8:	d9002d17 	ldw	r4,180(sp)
  805cbc:	24c00017 	ldw	r19,0(r4)
  805cc0:	21000104 	addi	r4,r4,4
  805cc4:	d9002d15 	stw	r4,180(sp)
  805cc8:	982dd7fa 	srai	r22,r19,31
  805ccc:	b005883a 	mov	r2,r22
  805cd0:	003a9f06 	br	804750 <__alt_mem_onchip_mem+0xff784750>
  805cd4:	d9402d17 	ldw	r5,180(sp)
  805cd8:	d8c02f17 	ldw	r3,188(sp)
  805cdc:	28800017 	ldw	r2,0(r5)
  805ce0:	29400104 	addi	r5,r5,4
  805ce4:	d9402d15 	stw	r5,180(sp)
  805ce8:	10c00015 	stw	r3,0(r2)
  805cec:	00398606 	br	804308 <__alt_mem_onchip_mem+0xff784308>
  805cf0:	d9402d17 	ldw	r5,180(sp)
  805cf4:	002d883a 	mov	r22,zero
  805cf8:	2cc00017 	ldw	r19,0(r5)
  805cfc:	29400104 	addi	r5,r5,4
  805d00:	d9402d15 	stw	r5,180(sp)
  805d04:	003c2306 	br	804d94 <__alt_mem_onchip_mem+0xff784d94>
  805d08:	d8c02d17 	ldw	r3,180(sp)
  805d0c:	d9002917 	ldw	r4,164(sp)
  805d10:	002d883a 	mov	r22,zero
  805d14:	18800104 	addi	r2,r3,4
  805d18:	1cc0000b 	ldhu	r19,0(r3)
  805d1c:	203dc10e 	bge	r4,zero,805424 <__alt_mem_onchip_mem+0xff785424>
  805d20:	003f7506 	br	805af8 <__alt_mem_onchip_mem+0xff785af8>
  805d24:	04002074 	movhi	r16,129
  805d28:	840f6204 	addi	r16,r16,15752
  805d2c:	003acc06 	br	804860 <__alt_mem_onchip_mem+0xff784860>
  805d30:	d9002c17 	ldw	r4,176(sp)
  805d34:	d9801e04 	addi	r6,sp,120
  805d38:	b80b883a 	mov	r5,r23
  805d3c:	080ab5c0 	call	80ab5c <__sprint_r>
  805d40:	103a3b1e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  805d44:	dc402617 	ldw	r17,152(sp)
  805d48:	d8c02017 	ldw	r3,128(sp)
  805d4c:	da000404 	addi	r8,sp,16
  805d50:	003f9c06 	br	805bc4 <__alt_mem_onchip_mem+0xff785bc4>
  805d54:	ac400043 	ldbu	r17,1(r21)
  805d58:	94800814 	ori	r18,r18,32
  805d5c:	ad400044 	addi	r21,r21,1
  805d60:	8c403fcc 	andi	r17,r17,255
  805d64:	8c40201c 	xori	r17,r17,128
  805d68:	8c7fe004 	addi	r17,r17,-128
  805d6c:	00398f06 	br	8043ac <__alt_mem_onchip_mem+0xff7843ac>
  805d70:	d8c02d15 	stw	r3,180(sp)
  805d74:	0039883a 	mov	fp,zero
  805d78:	003e3506 	br	805650 <__alt_mem_onchip_mem+0xff785650>
  805d7c:	d9002c17 	ldw	r4,176(sp)
  805d80:	d9801e04 	addi	r6,sp,120
  805d84:	b80b883a 	mov	r5,r23
  805d88:	080ab5c0 	call	80ab5c <__sprint_r>
  805d8c:	103a281e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  805d90:	d8c02017 	ldw	r3,128(sp)
  805d94:	da000404 	addi	r8,sp,16
  805d98:	003cd006 	br	8050dc <__alt_mem_onchip_mem+0xff7850dc>
  805d9c:	8009883a 	mov	r4,r16
  805da0:	da003d15 	stw	r8,244(sp)
  805da4:	0803e800 	call	803e80 <strlen>
  805da8:	d8802e15 	stw	r2,184(sp)
  805dac:	da003d17 	ldw	r8,244(sp)
  805db0:	103c340e 	bge	r2,zero,804e84 <__alt_mem_onchip_mem+0xff784e84>
  805db4:	0005883a 	mov	r2,zero
  805db8:	003c3206 	br	804e84 <__alt_mem_onchip_mem+0xff784e84>
  805dbc:	d9002c17 	ldw	r4,176(sp)
  805dc0:	d9801e04 	addi	r6,sp,120
  805dc4:	b80b883a 	mov	r5,r23
  805dc8:	080ab5c0 	call	80ab5c <__sprint_r>
  805dcc:	103a181e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  805dd0:	d8c02017 	ldw	r3,128(sp)
  805dd4:	d8801f17 	ldw	r2,124(sp)
  805dd8:	da000404 	addi	r8,sp,16
  805ddc:	d9403317 	ldw	r5,204(sp)
  805de0:	10800044 	addi	r2,r2,1
  805de4:	44000015 	stw	r16,0(r8)
  805de8:	28c7883a 	add	r3,r5,r3
  805dec:	003b7d06 	br	804be4 <__alt_mem_onchip_mem+0xff784be4>
  805df0:	01002074 	movhi	r4,129
  805df4:	210f7684 	addi	r4,r4,15834
  805df8:	d9003515 	stw	r4,212(sp)
  805dfc:	003b1406 	br	804a50 <__alt_mem_onchip_mem+0xff784a50>
  805e00:	013fffc4 	movi	r4,-1
  805e04:	003a3506 	br	8046dc <__alt_mem_onchip_mem+0xff7846dc>
  805e08:	0023883a 	mov	r17,zero
  805e0c:	003d9d06 	br	805484 <__alt_mem_onchip_mem+0xff785484>
  805e10:	d9002c17 	ldw	r4,176(sp)
  805e14:	d9801e04 	addi	r6,sp,120
  805e18:	b80b883a 	mov	r5,r23
  805e1c:	080ab5c0 	call	80ab5c <__sprint_r>
  805e20:	103a031e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  805e24:	d8c02017 	ldw	r3,128(sp)
  805e28:	da000404 	addi	r8,sp,16
  805e2c:	003d9406 	br	805480 <__alt_mem_onchip_mem+0xff785480>
  805e30:	01002074 	movhi	r4,129
  805e34:	210f7284 	addi	r4,r4,15818
  805e38:	d9002b15 	stw	r4,172(sp)
  805e3c:	d9002b17 	ldw	r4,172(sp)
  805e40:	1c47883a 	add	r3,r3,r17
  805e44:	10800044 	addi	r2,r2,1
  805e48:	41000015 	stw	r4,0(r8)
  805e4c:	44400115 	stw	r17,4(r8)
  805e50:	d8c02015 	stw	r3,128(sp)
  805e54:	d8801f15 	stw	r2,124(sp)
  805e58:	010001c4 	movi	r4,7
  805e5c:	20bfd716 	blt	r4,r2,805dbc <__alt_mem_onchip_mem+0xff785dbc>
  805e60:	42000204 	addi	r8,r8,8
  805e64:	003fdd06 	br	805ddc <__alt_mem_onchip_mem+0xff785ddc>
  805e68:	d9002c17 	ldw	r4,176(sp)
  805e6c:	d9801e04 	addi	r6,sp,120
  805e70:	b80b883a 	mov	r5,r23
  805e74:	080ab5c0 	call	80ab5c <__sprint_r>
  805e78:	1039ed1e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  805e7c:	d8802617 	ldw	r2,152(sp)
  805e80:	d8c02017 	ldw	r3,128(sp)
  805e84:	da000404 	addi	r8,sp,16
  805e88:	003e1006 	br	8056cc <__alt_mem_onchip_mem+0xff7856cc>
  805e8c:	00800044 	movi	r2,1
  805e90:	10803fcc 	andi	r2,r2,255
  805e94:	00c00044 	movi	r3,1
  805e98:	10fa3526 	beq	r2,r3,804770 <__alt_mem_onchip_mem+0xff784770>
  805e9c:	00c00084 	movi	r3,2
  805ea0:	10fbcb26 	beq	r2,r3,804dd0 <__alt_mem_onchip_mem+0xff784dd0>
  805ea4:	003a8f06 	br	8048e4 <__alt_mem_onchip_mem+0xff7848e4>
  805ea8:	01002074 	movhi	r4,129
  805eac:	210f7684 	addi	r4,r4,15834
  805eb0:	d9003515 	stw	r4,212(sp)
  805eb4:	003b7606 	br	804c90 <__alt_mem_onchip_mem+0xff784c90>
  805eb8:	d8802917 	ldw	r2,164(sp)
  805ebc:	00c00184 	movi	r3,6
  805ec0:	1880012e 	bgeu	r3,r2,805ec8 <___vfprintf_internal_r+0x1ca0>
  805ec4:	1805883a 	mov	r2,r3
  805ec8:	d8802e15 	stw	r2,184(sp)
  805ecc:	1000ef16 	blt	r2,zero,80628c <___vfprintf_internal_r+0x2064>
  805ed0:	04002074 	movhi	r16,129
  805ed4:	d8802a15 	stw	r2,168(sp)
  805ed8:	dcc02d15 	stw	r19,180(sp)
  805edc:	d8002915 	stw	zero,164(sp)
  805ee0:	d8003215 	stw	zero,200(sp)
  805ee4:	840f7004 	addi	r16,r16,15808
  805ee8:	0039883a 	mov	fp,zero
  805eec:	003aa206 	br	804978 <__alt_mem_onchip_mem+0xff784978>
  805ef0:	0021883a 	mov	r16,zero
  805ef4:	003e0706 	br	805714 <__alt_mem_onchip_mem+0xff785714>
  805ef8:	d9002c17 	ldw	r4,176(sp)
  805efc:	d9801e04 	addi	r6,sp,120
  805f00:	b80b883a 	mov	r5,r23
  805f04:	080ab5c0 	call	80ab5c <__sprint_r>
  805f08:	1039c91e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  805f0c:	d8802617 	ldw	r2,152(sp)
  805f10:	d9403317 	ldw	r5,204(sp)
  805f14:	d8c02017 	ldw	r3,128(sp)
  805f18:	da000404 	addi	r8,sp,16
  805f1c:	2885c83a 	sub	r2,r5,r2
  805f20:	003dfb06 	br	805710 <__alt_mem_onchip_mem+0xff785710>
  805f24:	9080004c 	andi	r2,r18,1
  805f28:	103e8f1e 	bne	r2,zero,805968 <__alt_mem_onchip_mem+0xff785968>
  805f2c:	d8802117 	ldw	r2,132(sp)
  805f30:	003e9e06 	br	8059ac <__alt_mem_onchip_mem+0xff7859ac>
  805f34:	1025883a 	mov	r18,r2
  805f38:	0039883a 	mov	fp,zero
  805f3c:	00800084 	movi	r2,2
  805f40:	003fd306 	br	805e90 <__alt_mem_onchip_mem+0xff785e90>
  805f44:	07000b44 	movi	fp,45
  805f48:	df002785 	stb	fp,158(sp)
  805f4c:	003a4006 	br	804850 <__alt_mem_onchip_mem+0xff784850>
  805f50:	00c00b44 	movi	r3,45
  805f54:	d8c02785 	stb	r3,158(sp)
  805f58:	d8802a15 	stw	r2,168(sp)
  805f5c:	dc802b17 	ldw	r18,172(sp)
  805f60:	d8002915 	stw	zero,164(sp)
  805f64:	07000b44 	movi	fp,45
  805f68:	003a8006 	br	80496c <__alt_mem_onchip_mem+0xff78496c>
  805f6c:	04002074 	movhi	r16,129
  805f70:	840f6504 	addi	r16,r16,15764
  805f74:	003f4706 	br	805c94 <__alt_mem_onchip_mem+0xff785c94>
  805f78:	d8c02d17 	ldw	r3,180(sp)
  805f7c:	d9002f17 	ldw	r4,188(sp)
  805f80:	18800017 	ldw	r2,0(r3)
  805f84:	18c00104 	addi	r3,r3,4
  805f88:	d8c02d15 	stw	r3,180(sp)
  805f8c:	11000015 	stw	r4,0(r2)
  805f90:	0038dd06 	br	804308 <__alt_mem_onchip_mem+0xff784308>
  805f94:	dd802617 	ldw	r22,152(sp)
  805f98:	00bfff44 	movi	r2,-3
  805f9c:	b0801c16 	blt	r22,r2,806010 <___vfprintf_internal_r+0x1de8>
  805fa0:	d9402917 	ldw	r5,164(sp)
  805fa4:	2d801a16 	blt	r5,r22,806010 <___vfprintf_internal_r+0x1de8>
  805fa8:	dd803215 	stw	r22,200(sp)
  805fac:	003e8906 	br	8059d4 <__alt_mem_onchip_mem+0xff7859d4>
  805fb0:	01002074 	movhi	r4,129
  805fb4:	210f7284 	addi	r4,r4,15818
  805fb8:	d9002b15 	stw	r4,172(sp)
  805fbc:	003c9106 	br	805204 <__alt_mem_onchip_mem+0xff785204>
  805fc0:	e005883a 	mov	r2,fp
  805fc4:	003e7906 	br	8059ac <__alt_mem_onchip_mem+0xff7859ac>
  805fc8:	d9402917 	ldw	r5,164(sp)
  805fcc:	df002783 	ldbu	fp,158(sp)
  805fd0:	dcc02d15 	stw	r19,180(sp)
  805fd4:	d9402a15 	stw	r5,168(sp)
  805fd8:	d9402e15 	stw	r5,184(sp)
  805fdc:	d8002915 	stw	zero,164(sp)
  805fe0:	d8003215 	stw	zero,200(sp)
  805fe4:	003a5d06 	br	80495c <__alt_mem_onchip_mem+0xff78495c>
  805fe8:	9080004c 	andi	r2,r18,1
  805fec:	0039883a 	mov	fp,zero
  805ff0:	10000426 	beq	r2,zero,806004 <___vfprintf_internal_r+0x1ddc>
  805ff4:	00800c04 	movi	r2,48
  805ff8:	dc001dc4 	addi	r16,sp,119
  805ffc:	d8801dc5 	stb	r2,119(sp)
  806000:	003b8006 	br	804e04 <__alt_mem_onchip_mem+0xff784e04>
  806004:	d8002e15 	stw	zero,184(sp)
  806008:	dc001e04 	addi	r16,sp,120
  80600c:	003a4d06 	br	804944 <__alt_mem_onchip_mem+0xff784944>
  806010:	8c7fff84 	addi	r17,r17,-2
  806014:	b5bfffc4 	addi	r22,r22,-1
  806018:	dd802615 	stw	r22,152(sp)
  80601c:	dc4022c5 	stb	r17,139(sp)
  806020:	b000bf16 	blt	r22,zero,806320 <___vfprintf_internal_r+0x20f8>
  806024:	00800ac4 	movi	r2,43
  806028:	d8802305 	stb	r2,140(sp)
  80602c:	00800244 	movi	r2,9
  806030:	15807016 	blt	r2,r22,8061f4 <___vfprintf_internal_r+0x1fcc>
  806034:	00800c04 	movi	r2,48
  806038:	b5800c04 	addi	r22,r22,48
  80603c:	d8802345 	stb	r2,141(sp)
  806040:	dd802385 	stb	r22,142(sp)
  806044:	d88023c4 	addi	r2,sp,143
  806048:	df0022c4 	addi	fp,sp,139
  80604c:	d8c03317 	ldw	r3,204(sp)
  806050:	1739c83a 	sub	fp,r2,fp
  806054:	d9003317 	ldw	r4,204(sp)
  806058:	e0c7883a 	add	r3,fp,r3
  80605c:	df003a15 	stw	fp,232(sp)
  806060:	d8c02e15 	stw	r3,184(sp)
  806064:	00800044 	movi	r2,1
  806068:	1100b30e 	bge	r2,r4,806338 <___vfprintf_internal_r+0x2110>
  80606c:	d8c02e17 	ldw	r3,184(sp)
  806070:	18c00044 	addi	r3,r3,1
  806074:	d8c02e15 	stw	r3,184(sp)
  806078:	1805883a 	mov	r2,r3
  80607c:	1800ac16 	blt	r3,zero,806330 <___vfprintf_internal_r+0x2108>
  806080:	d8003215 	stw	zero,200(sp)
  806084:	003e5d06 	br	8059fc <__alt_mem_onchip_mem+0xff7859fc>
  806088:	d9002c17 	ldw	r4,176(sp)
  80608c:	d9801e04 	addi	r6,sp,120
  806090:	b80b883a 	mov	r5,r23
  806094:	080ab5c0 	call	80ab5c <__sprint_r>
  806098:	1039651e 	bne	r2,zero,804630 <__alt_mem_onchip_mem+0xff784630>
  80609c:	dc402617 	ldw	r17,152(sp)
  8060a0:	d8c02017 	ldw	r3,128(sp)
  8060a4:	d8801f17 	ldw	r2,124(sp)
  8060a8:	da000404 	addi	r8,sp,16
  8060ac:	003ed606 	br	805c08 <__alt_mem_onchip_mem+0xff785c08>
  8060b0:	582b883a 	mov	r21,r11
  8060b4:	d8002915 	stw	zero,164(sp)
  8060b8:	0038bd06 	br	8043b0 <__alt_mem_onchip_mem+0xff7843b0>
  8060bc:	d8802917 	ldw	r2,164(sp)
  8060c0:	103e071e 	bne	r2,zero,8058e0 <__alt_mem_onchip_mem+0xff7858e0>
  8060c4:	dc002915 	stw	r16,164(sp)
  8060c8:	003e0506 	br	8058e0 <__alt_mem_onchip_mem+0xff7858e0>
  8060cc:	d9002917 	ldw	r4,164(sp)
  8060d0:	20c00044 	addi	r3,r4,1
  8060d4:	003e0f06 	br	805914 <__alt_mem_onchip_mem+0xff785914>
  8060d8:	01400184 	movi	r5,6
  8060dc:	d9402915 	stw	r5,164(sp)
  8060e0:	003dff06 	br	8058e0 <__alt_mem_onchip_mem+0xff7858e0>
  8060e4:	d8802104 	addi	r2,sp,132
  8060e8:	d8800315 	stw	r2,12(sp)
  8060ec:	d8802504 	addi	r2,sp,148
  8060f0:	d8800215 	stw	r2,8(sp)
  8060f4:	d8802604 	addi	r2,sp,152
  8060f8:	d8800115 	stw	r2,4(sp)
  8060fc:	d8802917 	ldw	r2,164(sp)
  806100:	d9403617 	ldw	r5,216(sp)
  806104:	d9002c17 	ldw	r4,176(sp)
  806108:	d8800015 	stw	r2,0(sp)
  80610c:	01c000c4 	movi	r7,3
  806110:	980d883a 	mov	r6,r19
  806114:	da003d15 	stw	r8,244(sp)
  806118:	08069000 	call	806900 <_dtoa_r>
  80611c:	d8c02917 	ldw	r3,164(sp)
  806120:	da003d17 	ldw	r8,244(sp)
  806124:	1021883a 	mov	r16,r2
  806128:	10f9883a 	add	fp,r2,r3
  80612c:	81000007 	ldb	r4,0(r16)
  806130:	00800c04 	movi	r2,48
  806134:	20805e26 	beq	r4,r2,8062b0 <___vfprintf_internal_r+0x2088>
  806138:	d8c02617 	ldw	r3,152(sp)
  80613c:	e0f9883a 	add	fp,fp,r3
  806140:	003e0a06 	br	80596c <__alt_mem_onchip_mem+0xff78596c>
  806144:	00c00b44 	movi	r3,45
  806148:	24e0003c 	xorhi	r19,r4,32768
  80614c:	d8c02a05 	stb	r3,168(sp)
  806150:	003de906 	br	8058f8 <__alt_mem_onchip_mem+0xff7858f8>
  806154:	d8c03217 	ldw	r3,200(sp)
  806158:	00c07a0e 	bge	zero,r3,806344 <___vfprintf_internal_r+0x211c>
  80615c:	00800044 	movi	r2,1
  806160:	d9003317 	ldw	r4,204(sp)
  806164:	1105883a 	add	r2,r2,r4
  806168:	d8802e15 	stw	r2,184(sp)
  80616c:	10004e16 	blt	r2,zero,8062a8 <___vfprintf_internal_r+0x2080>
  806170:	044019c4 	movi	r17,103
  806174:	003e2106 	br	8059fc <__alt_mem_onchip_mem+0xff7859fc>
  806178:	d9002917 	ldw	r4,164(sp)
  80617c:	d8802104 	addi	r2,sp,132
  806180:	d8800315 	stw	r2,12(sp)
  806184:	d9000015 	stw	r4,0(sp)
  806188:	d8802504 	addi	r2,sp,148
  80618c:	d9403617 	ldw	r5,216(sp)
  806190:	d9002c17 	ldw	r4,176(sp)
  806194:	d8800215 	stw	r2,8(sp)
  806198:	d8802604 	addi	r2,sp,152
  80619c:	d8800115 	stw	r2,4(sp)
  8061a0:	01c000c4 	movi	r7,3
  8061a4:	980d883a 	mov	r6,r19
  8061a8:	da003d15 	stw	r8,244(sp)
  8061ac:	08069000 	call	806900 <_dtoa_r>
  8061b0:	d8c02917 	ldw	r3,164(sp)
  8061b4:	da003d17 	ldw	r8,244(sp)
  8061b8:	1021883a 	mov	r16,r2
  8061bc:	00801184 	movi	r2,70
  8061c0:	80f9883a 	add	fp,r16,r3
  8061c4:	88bfd926 	beq	r17,r2,80612c <__alt_mem_onchip_mem+0xff78612c>
  8061c8:	003de806 	br	80596c <__alt_mem_onchip_mem+0xff78596c>
  8061cc:	d9002917 	ldw	r4,164(sp)
  8061d0:	00c04d0e 	bge	zero,r3,806308 <___vfprintf_internal_r+0x20e0>
  8061d4:	2000441e 	bne	r4,zero,8062e8 <___vfprintf_internal_r+0x20c0>
  8061d8:	9480004c 	andi	r18,r18,1
  8061dc:	9000421e 	bne	r18,zero,8062e8 <___vfprintf_internal_r+0x20c0>
  8061e0:	1805883a 	mov	r2,r3
  8061e4:	18007016 	blt	r3,zero,8063a8 <___vfprintf_internal_r+0x2180>
  8061e8:	d8c03217 	ldw	r3,200(sp)
  8061ec:	d8c02e15 	stw	r3,184(sp)
  8061f0:	003e0206 	br	8059fc <__alt_mem_onchip_mem+0xff7859fc>
  8061f4:	df0022c4 	addi	fp,sp,139
  8061f8:	dc002915 	stw	r16,164(sp)
  8061fc:	4027883a 	mov	r19,r8
  806200:	e021883a 	mov	r16,fp
  806204:	b009883a 	mov	r4,r22
  806208:	01400284 	movi	r5,10
  80620c:	080d1e80 	call	80d1e8 <__modsi3>
  806210:	10800c04 	addi	r2,r2,48
  806214:	843fffc4 	addi	r16,r16,-1
  806218:	b009883a 	mov	r4,r22
  80621c:	01400284 	movi	r5,10
  806220:	80800005 	stb	r2,0(r16)
  806224:	080d1640 	call	80d164 <__divsi3>
  806228:	102d883a 	mov	r22,r2
  80622c:	00800244 	movi	r2,9
  806230:	15bff416 	blt	r2,r22,806204 <__alt_mem_onchip_mem+0xff786204>
  806234:	9811883a 	mov	r8,r19
  806238:	b0800c04 	addi	r2,r22,48
  80623c:	8027883a 	mov	r19,r16
  806240:	997fffc4 	addi	r5,r19,-1
  806244:	98bfffc5 	stb	r2,-1(r19)
  806248:	dc002917 	ldw	r16,164(sp)
  80624c:	2f006a2e 	bgeu	r5,fp,8063f8 <___vfprintf_internal_r+0x21d0>
  806250:	d9c02384 	addi	r7,sp,142
  806254:	3ccfc83a 	sub	r7,r7,r19
  806258:	d9002344 	addi	r4,sp,141
  80625c:	e1cf883a 	add	r7,fp,r7
  806260:	00000106 	br	806268 <___vfprintf_internal_r+0x2040>
  806264:	28800003 	ldbu	r2,0(r5)
  806268:	20800005 	stb	r2,0(r4)
  80626c:	21000044 	addi	r4,r4,1
  806270:	29400044 	addi	r5,r5,1
  806274:	393ffb1e 	bne	r7,r4,806264 <__alt_mem_onchip_mem+0xff786264>
  806278:	d8802304 	addi	r2,sp,140
  80627c:	14c5c83a 	sub	r2,r2,r19
  806280:	d8c02344 	addi	r3,sp,141
  806284:	1885883a 	add	r2,r3,r2
  806288:	003f7006 	br	80604c <__alt_mem_onchip_mem+0xff78604c>
  80628c:	0005883a 	mov	r2,zero
  806290:	003f0f06 	br	805ed0 <__alt_mem_onchip_mem+0xff785ed0>
  806294:	d8c03217 	ldw	r3,200(sp)
  806298:	18c00044 	addi	r3,r3,1
  80629c:	d8c02e15 	stw	r3,184(sp)
  8062a0:	1805883a 	mov	r2,r3
  8062a4:	183fb20e 	bge	r3,zero,806170 <__alt_mem_onchip_mem+0xff786170>
  8062a8:	0005883a 	mov	r2,zero
  8062ac:	003fb006 	br	806170 <__alt_mem_onchip_mem+0xff786170>
  8062b0:	d9003617 	ldw	r4,216(sp)
  8062b4:	000d883a 	mov	r6,zero
  8062b8:	000f883a 	mov	r7,zero
  8062bc:	980b883a 	mov	r5,r19
  8062c0:	d8c03c15 	stw	r3,240(sp)
  8062c4:	da003d15 	stw	r8,244(sp)
  8062c8:	080e4ac0 	call	80e4ac <__eqdf2>
  8062cc:	d8c03c17 	ldw	r3,240(sp)
  8062d0:	da003d17 	ldw	r8,244(sp)
  8062d4:	103f9826 	beq	r2,zero,806138 <__alt_mem_onchip_mem+0xff786138>
  8062d8:	00800044 	movi	r2,1
  8062dc:	10c7c83a 	sub	r3,r2,r3
  8062e0:	d8c02615 	stw	r3,152(sp)
  8062e4:	003f9506 	br	80613c <__alt_mem_onchip_mem+0xff78613c>
  8062e8:	d9002917 	ldw	r4,164(sp)
  8062ec:	d8c03217 	ldw	r3,200(sp)
  8062f0:	20800044 	addi	r2,r4,1
  8062f4:	1885883a 	add	r2,r3,r2
  8062f8:	d8802e15 	stw	r2,184(sp)
  8062fc:	103dbf0e 	bge	r2,zero,8059fc <__alt_mem_onchip_mem+0xff7859fc>
  806300:	0005883a 	mov	r2,zero
  806304:	003dbd06 	br	8059fc <__alt_mem_onchip_mem+0xff7859fc>
  806308:	2000211e 	bne	r4,zero,806390 <___vfprintf_internal_r+0x2168>
  80630c:	9480004c 	andi	r18,r18,1
  806310:	90001f1e 	bne	r18,zero,806390 <___vfprintf_internal_r+0x2168>
  806314:	00800044 	movi	r2,1
  806318:	d8802e15 	stw	r2,184(sp)
  80631c:	003db706 	br	8059fc <__alt_mem_onchip_mem+0xff7859fc>
  806320:	00800b44 	movi	r2,45
  806324:	05adc83a 	sub	r22,zero,r22
  806328:	d8802305 	stb	r2,140(sp)
  80632c:	003f3f06 	br	80602c <__alt_mem_onchip_mem+0xff78602c>
  806330:	0005883a 	mov	r2,zero
  806334:	003f5206 	br	806080 <__alt_mem_onchip_mem+0xff786080>
  806338:	90a4703a 	and	r18,r18,r2
  80633c:	903f4e26 	beq	r18,zero,806078 <__alt_mem_onchip_mem+0xff786078>
  806340:	003f4a06 	br	80606c <__alt_mem_onchip_mem+0xff78606c>
  806344:	00800084 	movi	r2,2
  806348:	10c5c83a 	sub	r2,r2,r3
  80634c:	003f8406 	br	806160 <__alt_mem_onchip_mem+0xff786160>
  806350:	d8802d17 	ldw	r2,180(sp)
  806354:	d9002d17 	ldw	r4,180(sp)
  806358:	ac400043 	ldbu	r17,1(r21)
  80635c:	10800017 	ldw	r2,0(r2)
  806360:	582b883a 	mov	r21,r11
  806364:	d8802915 	stw	r2,164(sp)
  806368:	20800104 	addi	r2,r4,4
  80636c:	d9002917 	ldw	r4,164(sp)
  806370:	d8802d15 	stw	r2,180(sp)
  806374:	203e7a0e 	bge	r4,zero,805d60 <__alt_mem_onchip_mem+0xff785d60>
  806378:	8c403fcc 	andi	r17,r17,255
  80637c:	00bfffc4 	movi	r2,-1
  806380:	8c40201c 	xori	r17,r17,128
  806384:	d8802915 	stw	r2,164(sp)
  806388:	8c7fe004 	addi	r17,r17,-128
  80638c:	00380706 	br	8043ac <__alt_mem_onchip_mem+0xff7843ac>
  806390:	d8c02917 	ldw	r3,164(sp)
  806394:	18c00084 	addi	r3,r3,2
  806398:	d8c02e15 	stw	r3,184(sp)
  80639c:	1805883a 	mov	r2,r3
  8063a0:	183d960e 	bge	r3,zero,8059fc <__alt_mem_onchip_mem+0xff7859fc>
  8063a4:	003fd606 	br	806300 <__alt_mem_onchip_mem+0xff786300>
  8063a8:	0005883a 	mov	r2,zero
  8063ac:	003f8e06 	br	8061e8 <__alt_mem_onchip_mem+0xff7861e8>
  8063b0:	9080004c 	andi	r2,r18,1
  8063b4:	103f811e 	bne	r2,zero,8061bc <__alt_mem_onchip_mem+0xff7861bc>
  8063b8:	d8802117 	ldw	r2,132(sp)
  8063bc:	1405c83a 	sub	r2,r2,r16
  8063c0:	d8803315 	stw	r2,204(sp)
  8063c4:	b47ef326 	beq	r22,r17,805f94 <__alt_mem_onchip_mem+0xff785f94>
  8063c8:	dd802617 	ldw	r22,152(sp)
  8063cc:	003f1106 	br	806014 <__alt_mem_onchip_mem+0xff786014>
  8063d0:	d9c02785 	stb	r7,158(sp)
  8063d4:	00390406 	br	8047e8 <__alt_mem_onchip_mem+0xff7847e8>
  8063d8:	d9c02785 	stb	r7,158(sp)
  8063dc:	0038d306 	br	80472c <__alt_mem_onchip_mem+0xff78472c>
  8063e0:	d9c02785 	stb	r7,158(sp)
  8063e4:	003a6106 	br	804d6c <__alt_mem_onchip_mem+0xff784d6c>
  8063e8:	d9c02785 	stb	r7,158(sp)
  8063ec:	003af806 	br	804fd0 <__alt_mem_onchip_mem+0xff784fd0>
  8063f0:	0005883a 	mov	r2,zero
  8063f4:	003d7e06 	br	8059f0 <__alt_mem_onchip_mem+0xff7859f0>
  8063f8:	d8802344 	addi	r2,sp,141
  8063fc:	003f1306 	br	80604c <__alt_mem_onchip_mem+0xff78604c>
  806400:	d9c02785 	stb	r7,158(sp)
  806404:	00392306 	br	804894 <__alt_mem_onchip_mem+0xff784894>
  806408:	d9c02785 	stb	r7,158(sp)
  80640c:	003aa906 	br	804eb4 <__alt_mem_onchip_mem+0xff784eb4>
  806410:	d9c02785 	stb	r7,158(sp)
  806414:	003a3d06 	br	804d0c <__alt_mem_onchip_mem+0xff784d0c>
  806418:	d9c02785 	stb	r7,158(sp)
  80641c:	003aca06 	br	804f48 <__alt_mem_onchip_mem+0xff784f48>

00806420 <__vfprintf_internal>:
  806420:	00802074 	movhi	r2,129
  806424:	1097f204 	addi	r2,r2,24520
  806428:	300f883a 	mov	r7,r6
  80642c:	280d883a 	mov	r6,r5
  806430:	200b883a 	mov	r5,r4
  806434:	11000017 	ldw	r4,0(r2)
  806438:	08042281 	jmpi	804228 <___vfprintf_internal_r>

0080643c <__sbprintf>:
  80643c:	2880030b 	ldhu	r2,12(r5)
  806440:	2ac01917 	ldw	r11,100(r5)
  806444:	2a80038b 	ldhu	r10,14(r5)
  806448:	2a400717 	ldw	r9,28(r5)
  80644c:	2a000917 	ldw	r8,36(r5)
  806450:	defee204 	addi	sp,sp,-1144
  806454:	00c10004 	movi	r3,1024
  806458:	dc011a15 	stw	r16,1128(sp)
  80645c:	10bfff4c 	andi	r2,r2,65533
  806460:	2821883a 	mov	r16,r5
  806464:	d8cb883a 	add	r5,sp,r3
  806468:	dc811c15 	stw	r18,1136(sp)
  80646c:	dc411b15 	stw	r17,1132(sp)
  806470:	dfc11d15 	stw	ra,1140(sp)
  806474:	2025883a 	mov	r18,r4
  806478:	d881030d 	sth	r2,1036(sp)
  80647c:	dac11915 	stw	r11,1124(sp)
  806480:	da81038d 	sth	r10,1038(sp)
  806484:	da410715 	stw	r9,1052(sp)
  806488:	da010915 	stw	r8,1060(sp)
  80648c:	dec10015 	stw	sp,1024(sp)
  806490:	dec10415 	stw	sp,1040(sp)
  806494:	d8c10215 	stw	r3,1032(sp)
  806498:	d8c10515 	stw	r3,1044(sp)
  80649c:	d8010615 	stw	zero,1048(sp)
  8064a0:	08042280 	call	804228 <___vfprintf_internal_r>
  8064a4:	1023883a 	mov	r17,r2
  8064a8:	10000416 	blt	r2,zero,8064bc <__sbprintf+0x80>
  8064ac:	d9410004 	addi	r5,sp,1024
  8064b0:	9009883a 	mov	r4,r18
  8064b4:	08082a80 	call	8082a8 <_fflush_r>
  8064b8:	10000d1e 	bne	r2,zero,8064f0 <__sbprintf+0xb4>
  8064bc:	d881030b 	ldhu	r2,1036(sp)
  8064c0:	1080100c 	andi	r2,r2,64
  8064c4:	10000326 	beq	r2,zero,8064d4 <__sbprintf+0x98>
  8064c8:	8080030b 	ldhu	r2,12(r16)
  8064cc:	10801014 	ori	r2,r2,64
  8064d0:	8080030d 	sth	r2,12(r16)
  8064d4:	8805883a 	mov	r2,r17
  8064d8:	dfc11d17 	ldw	ra,1140(sp)
  8064dc:	dc811c17 	ldw	r18,1136(sp)
  8064e0:	dc411b17 	ldw	r17,1132(sp)
  8064e4:	dc011a17 	ldw	r16,1128(sp)
  8064e8:	dec11e04 	addi	sp,sp,1144
  8064ec:	f800283a 	ret
  8064f0:	047fffc4 	movi	r17,-1
  8064f4:	003ff106 	br	8064bc <__alt_mem_onchip_mem+0xff7864bc>

008064f8 <_write_r>:
  8064f8:	defffd04 	addi	sp,sp,-12
  8064fc:	2805883a 	mov	r2,r5
  806500:	dc000015 	stw	r16,0(sp)
  806504:	04002074 	movhi	r16,129
  806508:	dc400115 	stw	r17,4(sp)
  80650c:	300b883a 	mov	r5,r6
  806510:	841f5304 	addi	r16,r16,32076
  806514:	2023883a 	mov	r17,r4
  806518:	380d883a 	mov	r6,r7
  80651c:	1009883a 	mov	r4,r2
  806520:	dfc00215 	stw	ra,8(sp)
  806524:	80000015 	stw	zero,0(r16)
  806528:	08108700 	call	810870 <write>
  80652c:	00ffffc4 	movi	r3,-1
  806530:	10c00526 	beq	r2,r3,806548 <_write_r+0x50>
  806534:	dfc00217 	ldw	ra,8(sp)
  806538:	dc400117 	ldw	r17,4(sp)
  80653c:	dc000017 	ldw	r16,0(sp)
  806540:	dec00304 	addi	sp,sp,12
  806544:	f800283a 	ret
  806548:	80c00017 	ldw	r3,0(r16)
  80654c:	183ff926 	beq	r3,zero,806534 <__alt_mem_onchip_mem+0xff786534>
  806550:	88c00015 	stw	r3,0(r17)
  806554:	003ff706 	br	806534 <__alt_mem_onchip_mem+0xff786534>

00806558 <__swsetup_r>:
  806558:	00802074 	movhi	r2,129
  80655c:	defffd04 	addi	sp,sp,-12
  806560:	1097f204 	addi	r2,r2,24520
  806564:	dc400115 	stw	r17,4(sp)
  806568:	2023883a 	mov	r17,r4
  80656c:	11000017 	ldw	r4,0(r2)
  806570:	dc000015 	stw	r16,0(sp)
  806574:	dfc00215 	stw	ra,8(sp)
  806578:	2821883a 	mov	r16,r5
  80657c:	20000226 	beq	r4,zero,806588 <__swsetup_r+0x30>
  806580:	20800e17 	ldw	r2,56(r4)
  806584:	10003126 	beq	r2,zero,80664c <__swsetup_r+0xf4>
  806588:	8080030b 	ldhu	r2,12(r16)
  80658c:	10c0020c 	andi	r3,r2,8
  806590:	1009883a 	mov	r4,r2
  806594:	18000f26 	beq	r3,zero,8065d4 <__swsetup_r+0x7c>
  806598:	80c00417 	ldw	r3,16(r16)
  80659c:	18001526 	beq	r3,zero,8065f4 <__swsetup_r+0x9c>
  8065a0:	1100004c 	andi	r4,r2,1
  8065a4:	20001c1e 	bne	r4,zero,806618 <__swsetup_r+0xc0>
  8065a8:	1080008c 	andi	r2,r2,2
  8065ac:	1000291e 	bne	r2,zero,806654 <__swsetup_r+0xfc>
  8065b0:	80800517 	ldw	r2,20(r16)
  8065b4:	80800215 	stw	r2,8(r16)
  8065b8:	18001c26 	beq	r3,zero,80662c <__swsetup_r+0xd4>
  8065bc:	0005883a 	mov	r2,zero
  8065c0:	dfc00217 	ldw	ra,8(sp)
  8065c4:	dc400117 	ldw	r17,4(sp)
  8065c8:	dc000017 	ldw	r16,0(sp)
  8065cc:	dec00304 	addi	sp,sp,12
  8065d0:	f800283a 	ret
  8065d4:	2080040c 	andi	r2,r4,16
  8065d8:	10002e26 	beq	r2,zero,806694 <__swsetup_r+0x13c>
  8065dc:	2080010c 	andi	r2,r4,4
  8065e0:	10001e1e 	bne	r2,zero,80665c <__swsetup_r+0x104>
  8065e4:	80c00417 	ldw	r3,16(r16)
  8065e8:	20800214 	ori	r2,r4,8
  8065ec:	8080030d 	sth	r2,12(r16)
  8065f0:	183feb1e 	bne	r3,zero,8065a0 <__alt_mem_onchip_mem+0xff7865a0>
  8065f4:	1100a00c 	andi	r4,r2,640
  8065f8:	01408004 	movi	r5,512
  8065fc:	217fe826 	beq	r4,r5,8065a0 <__alt_mem_onchip_mem+0xff7865a0>
  806600:	800b883a 	mov	r5,r16
  806604:	8809883a 	mov	r4,r17
  806608:	0802da00 	call	802da0 <__smakebuf_r>
  80660c:	8080030b 	ldhu	r2,12(r16)
  806610:	80c00417 	ldw	r3,16(r16)
  806614:	003fe206 	br	8065a0 <__alt_mem_onchip_mem+0xff7865a0>
  806618:	80800517 	ldw	r2,20(r16)
  80661c:	80000215 	stw	zero,8(r16)
  806620:	0085c83a 	sub	r2,zero,r2
  806624:	80800615 	stw	r2,24(r16)
  806628:	183fe41e 	bne	r3,zero,8065bc <__alt_mem_onchip_mem+0xff7865bc>
  80662c:	80c0030b 	ldhu	r3,12(r16)
  806630:	0005883a 	mov	r2,zero
  806634:	1900200c 	andi	r4,r3,128
  806638:	203fe126 	beq	r4,zero,8065c0 <__alt_mem_onchip_mem+0xff7865c0>
  80663c:	18c01014 	ori	r3,r3,64
  806640:	80c0030d 	sth	r3,12(r16)
  806644:	00bfffc4 	movi	r2,-1
  806648:	003fdd06 	br	8065c0 <__alt_mem_onchip_mem+0xff7865c0>
  80664c:	08024940 	call	802494 <__sinit>
  806650:	003fcd06 	br	806588 <__alt_mem_onchip_mem+0xff786588>
  806654:	0005883a 	mov	r2,zero
  806658:	003fd606 	br	8065b4 <__alt_mem_onchip_mem+0xff7865b4>
  80665c:	81400c17 	ldw	r5,48(r16)
  806660:	28000626 	beq	r5,zero,80667c <__swsetup_r+0x124>
  806664:	80801004 	addi	r2,r16,64
  806668:	28800326 	beq	r5,r2,806678 <__swsetup_r+0x120>
  80666c:	8809883a 	mov	r4,r17
  806670:	08085040 	call	808504 <_free_r>
  806674:	8100030b 	ldhu	r4,12(r16)
  806678:	80000c15 	stw	zero,48(r16)
  80667c:	80c00417 	ldw	r3,16(r16)
  806680:	00bff6c4 	movi	r2,-37
  806684:	1108703a 	and	r4,r2,r4
  806688:	80000115 	stw	zero,4(r16)
  80668c:	80c00015 	stw	r3,0(r16)
  806690:	003fd506 	br	8065e8 <__alt_mem_onchip_mem+0xff7865e8>
  806694:	00800244 	movi	r2,9
  806698:	88800015 	stw	r2,0(r17)
  80669c:	20801014 	ori	r2,r4,64
  8066a0:	8080030d 	sth	r2,12(r16)
  8066a4:	00bfffc4 	movi	r2,-1
  8066a8:	003fc506 	br	8065c0 <__alt_mem_onchip_mem+0xff7865c0>

008066ac <_close_r>:
  8066ac:	defffd04 	addi	sp,sp,-12
  8066b0:	dc000015 	stw	r16,0(sp)
  8066b4:	04002074 	movhi	r16,129
  8066b8:	dc400115 	stw	r17,4(sp)
  8066bc:	841f5304 	addi	r16,r16,32076
  8066c0:	2023883a 	mov	r17,r4
  8066c4:	2809883a 	mov	r4,r5
  8066c8:	dfc00215 	stw	ra,8(sp)
  8066cc:	80000015 	stw	zero,0(r16)
  8066d0:	080fae80 	call	80fae8 <close>
  8066d4:	00ffffc4 	movi	r3,-1
  8066d8:	10c00526 	beq	r2,r3,8066f0 <_close_r+0x44>
  8066dc:	dfc00217 	ldw	ra,8(sp)
  8066e0:	dc400117 	ldw	r17,4(sp)
  8066e4:	dc000017 	ldw	r16,0(sp)
  8066e8:	dec00304 	addi	sp,sp,12
  8066ec:	f800283a 	ret
  8066f0:	80c00017 	ldw	r3,0(r16)
  8066f4:	183ff926 	beq	r3,zero,8066dc <__alt_mem_onchip_mem+0xff7866dc>
  8066f8:	88c00015 	stw	r3,0(r17)
  8066fc:	003ff706 	br	8066dc <__alt_mem_onchip_mem+0xff7866dc>

00806700 <quorem>:
  806700:	defff704 	addi	sp,sp,-36
  806704:	dc800215 	stw	r18,8(sp)
  806708:	20800417 	ldw	r2,16(r4)
  80670c:	2c800417 	ldw	r18,16(r5)
  806710:	dfc00815 	stw	ra,32(sp)
  806714:	ddc00715 	stw	r23,28(sp)
  806718:	dd800615 	stw	r22,24(sp)
  80671c:	dd400515 	stw	r21,20(sp)
  806720:	dd000415 	stw	r20,16(sp)
  806724:	dcc00315 	stw	r19,12(sp)
  806728:	dc400115 	stw	r17,4(sp)
  80672c:	dc000015 	stw	r16,0(sp)
  806730:	14807116 	blt	r2,r18,8068f8 <quorem+0x1f8>
  806734:	94bfffc4 	addi	r18,r18,-1
  806738:	94ad883a 	add	r22,r18,r18
  80673c:	b5ad883a 	add	r22,r22,r22
  806740:	2c400504 	addi	r17,r5,20
  806744:	8da9883a 	add	r20,r17,r22
  806748:	25400504 	addi	r21,r4,20
  80674c:	282f883a 	mov	r23,r5
  806750:	adad883a 	add	r22,r21,r22
  806754:	a1400017 	ldw	r5,0(r20)
  806758:	2021883a 	mov	r16,r4
  80675c:	b1000017 	ldw	r4,0(r22)
  806760:	29400044 	addi	r5,r5,1
  806764:	080d25c0 	call	80d25c <__udivsi3>
  806768:	1027883a 	mov	r19,r2
  80676c:	10002c26 	beq	r2,zero,806820 <quorem+0x120>
  806770:	a813883a 	mov	r9,r21
  806774:	880b883a 	mov	r5,r17
  806778:	0009883a 	mov	r4,zero
  80677c:	000d883a 	mov	r6,zero
  806780:	2a000017 	ldw	r8,0(r5)
  806784:	49c00017 	ldw	r7,0(r9)
  806788:	29400104 	addi	r5,r5,4
  80678c:	40bfffcc 	andi	r2,r8,65535
  806790:	14c5383a 	mul	r2,r2,r19
  806794:	4010d43a 	srli	r8,r8,16
  806798:	38ffffcc 	andi	r3,r7,65535
  80679c:	1105883a 	add	r2,r2,r4
  8067a0:	1008d43a 	srli	r4,r2,16
  8067a4:	44d1383a 	mul	r8,r8,r19
  8067a8:	198d883a 	add	r6,r3,r6
  8067ac:	10ffffcc 	andi	r3,r2,65535
  8067b0:	30c7c83a 	sub	r3,r6,r3
  8067b4:	380ed43a 	srli	r7,r7,16
  8067b8:	4105883a 	add	r2,r8,r4
  8067bc:	180dd43a 	srai	r6,r3,16
  8067c0:	113fffcc 	andi	r4,r2,65535
  8067c4:	390fc83a 	sub	r7,r7,r4
  8067c8:	398d883a 	add	r6,r7,r6
  8067cc:	300e943a 	slli	r7,r6,16
  8067d0:	18ffffcc 	andi	r3,r3,65535
  8067d4:	1008d43a 	srli	r4,r2,16
  8067d8:	38ceb03a 	or	r7,r7,r3
  8067dc:	49c00015 	stw	r7,0(r9)
  8067e0:	300dd43a 	srai	r6,r6,16
  8067e4:	4a400104 	addi	r9,r9,4
  8067e8:	a17fe52e 	bgeu	r20,r5,806780 <__alt_mem_onchip_mem+0xff786780>
  8067ec:	b0800017 	ldw	r2,0(r22)
  8067f0:	10000b1e 	bne	r2,zero,806820 <quorem+0x120>
  8067f4:	b0bfff04 	addi	r2,r22,-4
  8067f8:	a880082e 	bgeu	r21,r2,80681c <quorem+0x11c>
  8067fc:	b0ffff17 	ldw	r3,-4(r22)
  806800:	18000326 	beq	r3,zero,806810 <quorem+0x110>
  806804:	00000506 	br	80681c <quorem+0x11c>
  806808:	10c00017 	ldw	r3,0(r2)
  80680c:	1800031e 	bne	r3,zero,80681c <quorem+0x11c>
  806810:	10bfff04 	addi	r2,r2,-4
  806814:	94bfffc4 	addi	r18,r18,-1
  806818:	a8bffb36 	bltu	r21,r2,806808 <__alt_mem_onchip_mem+0xff786808>
  80681c:	84800415 	stw	r18,16(r16)
  806820:	b80b883a 	mov	r5,r23
  806824:	8009883a 	mov	r4,r16
  806828:	0809ab00 	call	809ab0 <__mcmp>
  80682c:	10002616 	blt	r2,zero,8068c8 <quorem+0x1c8>
  806830:	9cc00044 	addi	r19,r19,1
  806834:	a805883a 	mov	r2,r21
  806838:	000b883a 	mov	r5,zero
  80683c:	11000017 	ldw	r4,0(r2)
  806840:	89800017 	ldw	r6,0(r17)
  806844:	10800104 	addi	r2,r2,4
  806848:	20ffffcc 	andi	r3,r4,65535
  80684c:	194b883a 	add	r5,r3,r5
  806850:	30ffffcc 	andi	r3,r6,65535
  806854:	28c7c83a 	sub	r3,r5,r3
  806858:	300cd43a 	srli	r6,r6,16
  80685c:	2008d43a 	srli	r4,r4,16
  806860:	180bd43a 	srai	r5,r3,16
  806864:	18ffffcc 	andi	r3,r3,65535
  806868:	2189c83a 	sub	r4,r4,r6
  80686c:	2149883a 	add	r4,r4,r5
  806870:	200c943a 	slli	r6,r4,16
  806874:	8c400104 	addi	r17,r17,4
  806878:	200bd43a 	srai	r5,r4,16
  80687c:	30c6b03a 	or	r3,r6,r3
  806880:	10ffff15 	stw	r3,-4(r2)
  806884:	a47fed2e 	bgeu	r20,r17,80683c <__alt_mem_onchip_mem+0xff78683c>
  806888:	9485883a 	add	r2,r18,r18
  80688c:	1085883a 	add	r2,r2,r2
  806890:	a887883a 	add	r3,r21,r2
  806894:	18800017 	ldw	r2,0(r3)
  806898:	10000b1e 	bne	r2,zero,8068c8 <quorem+0x1c8>
  80689c:	18bfff04 	addi	r2,r3,-4
  8068a0:	a880082e 	bgeu	r21,r2,8068c4 <quorem+0x1c4>
  8068a4:	18ffff17 	ldw	r3,-4(r3)
  8068a8:	18000326 	beq	r3,zero,8068b8 <quorem+0x1b8>
  8068ac:	00000506 	br	8068c4 <quorem+0x1c4>
  8068b0:	10c00017 	ldw	r3,0(r2)
  8068b4:	1800031e 	bne	r3,zero,8068c4 <quorem+0x1c4>
  8068b8:	10bfff04 	addi	r2,r2,-4
  8068bc:	94bfffc4 	addi	r18,r18,-1
  8068c0:	a8bffb36 	bltu	r21,r2,8068b0 <__alt_mem_onchip_mem+0xff7868b0>
  8068c4:	84800415 	stw	r18,16(r16)
  8068c8:	9805883a 	mov	r2,r19
  8068cc:	dfc00817 	ldw	ra,32(sp)
  8068d0:	ddc00717 	ldw	r23,28(sp)
  8068d4:	dd800617 	ldw	r22,24(sp)
  8068d8:	dd400517 	ldw	r21,20(sp)
  8068dc:	dd000417 	ldw	r20,16(sp)
  8068e0:	dcc00317 	ldw	r19,12(sp)
  8068e4:	dc800217 	ldw	r18,8(sp)
  8068e8:	dc400117 	ldw	r17,4(sp)
  8068ec:	dc000017 	ldw	r16,0(sp)
  8068f0:	dec00904 	addi	sp,sp,36
  8068f4:	f800283a 	ret
  8068f8:	0005883a 	mov	r2,zero
  8068fc:	003ff306 	br	8068cc <__alt_mem_onchip_mem+0xff7868cc>

00806900 <_dtoa_r>:
  806900:	20801017 	ldw	r2,64(r4)
  806904:	deffde04 	addi	sp,sp,-136
  806908:	df002015 	stw	fp,128(sp)
  80690c:	dcc01b15 	stw	r19,108(sp)
  806910:	dc801a15 	stw	r18,104(sp)
  806914:	dc401915 	stw	r17,100(sp)
  806918:	dc001815 	stw	r16,96(sp)
  80691c:	dfc02115 	stw	ra,132(sp)
  806920:	ddc01f15 	stw	r23,124(sp)
  806924:	dd801e15 	stw	r22,120(sp)
  806928:	dd401d15 	stw	r21,116(sp)
  80692c:	dd001c15 	stw	r20,112(sp)
  806930:	d9c00315 	stw	r7,12(sp)
  806934:	2039883a 	mov	fp,r4
  806938:	3023883a 	mov	r17,r6
  80693c:	2825883a 	mov	r18,r5
  806940:	dc002417 	ldw	r16,144(sp)
  806944:	3027883a 	mov	r19,r6
  806948:	10000826 	beq	r2,zero,80696c <_dtoa_r+0x6c>
  80694c:	21801117 	ldw	r6,68(r4)
  806950:	00c00044 	movi	r3,1
  806954:	100b883a 	mov	r5,r2
  806958:	1986983a 	sll	r3,r3,r6
  80695c:	11800115 	stw	r6,4(r2)
  806960:	10c00215 	stw	r3,8(r2)
  806964:	08092900 	call	809290 <_Bfree>
  806968:	e0001015 	stw	zero,64(fp)
  80696c:	88002e16 	blt	r17,zero,806a28 <_dtoa_r+0x128>
  806970:	80000015 	stw	zero,0(r16)
  806974:	889ffc2c 	andhi	r2,r17,32752
  806978:	00dffc34 	movhi	r3,32752
  80697c:	10c01c26 	beq	r2,r3,8069f0 <_dtoa_r+0xf0>
  806980:	000d883a 	mov	r6,zero
  806984:	000f883a 	mov	r7,zero
  806988:	9009883a 	mov	r4,r18
  80698c:	980b883a 	mov	r5,r19
  806990:	080e4ac0 	call	80e4ac <__eqdf2>
  806994:	10002b1e 	bne	r2,zero,806a44 <_dtoa_r+0x144>
  806998:	d9c02317 	ldw	r7,140(sp)
  80699c:	00800044 	movi	r2,1
  8069a0:	38800015 	stw	r2,0(r7)
  8069a4:	d8802517 	ldw	r2,148(sp)
  8069a8:	10019e26 	beq	r2,zero,807024 <_dtoa_r+0x724>
  8069ac:	d8c02517 	ldw	r3,148(sp)
  8069b0:	00802074 	movhi	r2,129
  8069b4:	108f7244 	addi	r2,r2,15817
  8069b8:	18800015 	stw	r2,0(r3)
  8069bc:	10bfffc4 	addi	r2,r2,-1
  8069c0:	dfc02117 	ldw	ra,132(sp)
  8069c4:	df002017 	ldw	fp,128(sp)
  8069c8:	ddc01f17 	ldw	r23,124(sp)
  8069cc:	dd801e17 	ldw	r22,120(sp)
  8069d0:	dd401d17 	ldw	r21,116(sp)
  8069d4:	dd001c17 	ldw	r20,112(sp)
  8069d8:	dcc01b17 	ldw	r19,108(sp)
  8069dc:	dc801a17 	ldw	r18,104(sp)
  8069e0:	dc401917 	ldw	r17,100(sp)
  8069e4:	dc001817 	ldw	r16,96(sp)
  8069e8:	dec02204 	addi	sp,sp,136
  8069ec:	f800283a 	ret
  8069f0:	d8c02317 	ldw	r3,140(sp)
  8069f4:	0089c3c4 	movi	r2,9999
  8069f8:	18800015 	stw	r2,0(r3)
  8069fc:	90017726 	beq	r18,zero,806fdc <_dtoa_r+0x6dc>
  806a00:	00802074 	movhi	r2,129
  806a04:	10901e04 	addi	r2,r2,16504
  806a08:	d9002517 	ldw	r4,148(sp)
  806a0c:	203fec26 	beq	r4,zero,8069c0 <__alt_mem_onchip_mem+0xff7869c0>
  806a10:	10c000c7 	ldb	r3,3(r2)
  806a14:	1801781e 	bne	r3,zero,806ff8 <_dtoa_r+0x6f8>
  806a18:	10c000c4 	addi	r3,r2,3
  806a1c:	d9802517 	ldw	r6,148(sp)
  806a20:	30c00015 	stw	r3,0(r6)
  806a24:	003fe606 	br	8069c0 <__alt_mem_onchip_mem+0xff7869c0>
  806a28:	04e00034 	movhi	r19,32768
  806a2c:	9cffffc4 	addi	r19,r19,-1
  806a30:	00800044 	movi	r2,1
  806a34:	8ce6703a 	and	r19,r17,r19
  806a38:	80800015 	stw	r2,0(r16)
  806a3c:	9823883a 	mov	r17,r19
  806a40:	003fcc06 	br	806974 <__alt_mem_onchip_mem+0xff786974>
  806a44:	d8800204 	addi	r2,sp,8
  806a48:	d8800015 	stw	r2,0(sp)
  806a4c:	d9c00104 	addi	r7,sp,4
  806a50:	900b883a 	mov	r5,r18
  806a54:	980d883a 	mov	r6,r19
  806a58:	e009883a 	mov	r4,fp
  806a5c:	8820d53a 	srli	r16,r17,20
  806a60:	0809e7c0 	call	809e7c <__d2b>
  806a64:	d8800915 	stw	r2,36(sp)
  806a68:	8001651e 	bne	r16,zero,807000 <_dtoa_r+0x700>
  806a6c:	dd800217 	ldw	r22,8(sp)
  806a70:	dc000117 	ldw	r16,4(sp)
  806a74:	00800804 	movi	r2,32
  806a78:	b421883a 	add	r16,r22,r16
  806a7c:	80c10c84 	addi	r3,r16,1074
  806a80:	10c2d10e 	bge	r2,r3,8075c8 <_dtoa_r+0xcc8>
  806a84:	00801004 	movi	r2,64
  806a88:	81010484 	addi	r4,r16,1042
  806a8c:	10c7c83a 	sub	r3,r2,r3
  806a90:	9108d83a 	srl	r4,r18,r4
  806a94:	88e2983a 	sll	r17,r17,r3
  806a98:	2448b03a 	or	r4,r4,r17
  806a9c:	080f8740 	call	80f874 <__floatunsidf>
  806aa0:	017f8434 	movhi	r5,65040
  806aa4:	01800044 	movi	r6,1
  806aa8:	1009883a 	mov	r4,r2
  806aac:	194b883a 	add	r5,r3,r5
  806ab0:	843fffc4 	addi	r16,r16,-1
  806ab4:	d9801115 	stw	r6,68(sp)
  806ab8:	000d883a 	mov	r6,zero
  806abc:	01cffe34 	movhi	r7,16376
  806ac0:	080ee1c0 	call	80ee1c <__subdf3>
  806ac4:	0198dbf4 	movhi	r6,25455
  806ac8:	01cff4f4 	movhi	r7,16339
  806acc:	3190d844 	addi	r6,r6,17249
  806ad0:	39e1e9c4 	addi	r7,r7,-30809
  806ad4:	1009883a 	mov	r4,r2
  806ad8:	180b883a 	mov	r5,r3
  806adc:	080e7040 	call	80e704 <__muldf3>
  806ae0:	01a2d874 	movhi	r6,35681
  806ae4:	01cff1f4 	movhi	r7,16327
  806ae8:	31b22cc4 	addi	r6,r6,-14157
  806aec:	39e28a04 	addi	r7,r7,-30168
  806af0:	180b883a 	mov	r5,r3
  806af4:	1009883a 	mov	r4,r2
  806af8:	080d3180 	call	80d318 <__adddf3>
  806afc:	8009883a 	mov	r4,r16
  806b00:	1029883a 	mov	r20,r2
  806b04:	1823883a 	mov	r17,r3
  806b08:	080f7980 	call	80f798 <__floatsidf>
  806b0c:	019427f4 	movhi	r6,20639
  806b10:	01cff4f4 	movhi	r7,16339
  806b14:	319e7ec4 	addi	r6,r6,31227
  806b18:	39d104c4 	addi	r7,r7,17427
  806b1c:	1009883a 	mov	r4,r2
  806b20:	180b883a 	mov	r5,r3
  806b24:	080e7040 	call	80e704 <__muldf3>
  806b28:	100d883a 	mov	r6,r2
  806b2c:	180f883a 	mov	r7,r3
  806b30:	a009883a 	mov	r4,r20
  806b34:	880b883a 	mov	r5,r17
  806b38:	080d3180 	call	80d318 <__adddf3>
  806b3c:	1009883a 	mov	r4,r2
  806b40:	180b883a 	mov	r5,r3
  806b44:	1029883a 	mov	r20,r2
  806b48:	1823883a 	mov	r17,r3
  806b4c:	080f7180 	call	80f718 <__fixdfsi>
  806b50:	000d883a 	mov	r6,zero
  806b54:	000f883a 	mov	r7,zero
  806b58:	a009883a 	mov	r4,r20
  806b5c:	880b883a 	mov	r5,r17
  806b60:	d8800515 	stw	r2,20(sp)
  806b64:	080e6100 	call	80e610 <__ledf2>
  806b68:	10028716 	blt	r2,zero,807588 <_dtoa_r+0xc88>
  806b6c:	d8c00517 	ldw	r3,20(sp)
  806b70:	00800584 	movi	r2,22
  806b74:	10c27536 	bltu	r2,r3,80754c <_dtoa_r+0xc4c>
  806b78:	180490fa 	slli	r2,r3,3
  806b7c:	00c02074 	movhi	r3,129
  806b80:	18d03904 	addi	r3,r3,16612
  806b84:	1885883a 	add	r2,r3,r2
  806b88:	11000017 	ldw	r4,0(r2)
  806b8c:	11400117 	ldw	r5,4(r2)
  806b90:	900d883a 	mov	r6,r18
  806b94:	980f883a 	mov	r7,r19
  806b98:	080e5340 	call	80e534 <__gedf2>
  806b9c:	00828d0e 	bge	zero,r2,8075d4 <_dtoa_r+0xcd4>
  806ba0:	d9000517 	ldw	r4,20(sp)
  806ba4:	d8000e15 	stw	zero,56(sp)
  806ba8:	213fffc4 	addi	r4,r4,-1
  806bac:	d9000515 	stw	r4,20(sp)
  806bb0:	b42dc83a 	sub	r22,r22,r16
  806bb4:	b5bfffc4 	addi	r22,r22,-1
  806bb8:	b0026f16 	blt	r22,zero,807578 <_dtoa_r+0xc78>
  806bbc:	d8000815 	stw	zero,32(sp)
  806bc0:	d9c00517 	ldw	r7,20(sp)
  806bc4:	38026416 	blt	r7,zero,807558 <_dtoa_r+0xc58>
  806bc8:	b1ed883a 	add	r22,r22,r7
  806bcc:	d9c00d15 	stw	r7,52(sp)
  806bd0:	d8000a15 	stw	zero,40(sp)
  806bd4:	d9800317 	ldw	r6,12(sp)
  806bd8:	00800244 	movi	r2,9
  806bdc:	11811436 	bltu	r2,r6,807030 <_dtoa_r+0x730>
  806be0:	00800144 	movi	r2,5
  806be4:	1184e10e 	bge	r2,r6,807f6c <_dtoa_r+0x166c>
  806be8:	31bfff04 	addi	r6,r6,-4
  806bec:	d9800315 	stw	r6,12(sp)
  806bf0:	0023883a 	mov	r17,zero
  806bf4:	d9800317 	ldw	r6,12(sp)
  806bf8:	008000c4 	movi	r2,3
  806bfc:	30836726 	beq	r6,r2,80799c <_dtoa_r+0x109c>
  806c00:	1183410e 	bge	r2,r6,807908 <_dtoa_r+0x1008>
  806c04:	d9c00317 	ldw	r7,12(sp)
  806c08:	00800104 	movi	r2,4
  806c0c:	38827c26 	beq	r7,r2,807600 <_dtoa_r+0xd00>
  806c10:	00800144 	movi	r2,5
  806c14:	3884c41e 	bne	r7,r2,807f28 <_dtoa_r+0x1628>
  806c18:	00800044 	movi	r2,1
  806c1c:	d8800b15 	stw	r2,44(sp)
  806c20:	d8c00517 	ldw	r3,20(sp)
  806c24:	d9002217 	ldw	r4,136(sp)
  806c28:	1907883a 	add	r3,r3,r4
  806c2c:	19800044 	addi	r6,r3,1
  806c30:	d8c00c15 	stw	r3,48(sp)
  806c34:	d9800615 	stw	r6,24(sp)
  806c38:	0183a40e 	bge	zero,r6,807acc <_dtoa_r+0x11cc>
  806c3c:	d9800617 	ldw	r6,24(sp)
  806c40:	3021883a 	mov	r16,r6
  806c44:	e0001115 	stw	zero,68(fp)
  806c48:	008005c4 	movi	r2,23
  806c4c:	1184c92e 	bgeu	r2,r6,807f74 <_dtoa_r+0x1674>
  806c50:	00c00044 	movi	r3,1
  806c54:	00800104 	movi	r2,4
  806c58:	1085883a 	add	r2,r2,r2
  806c5c:	11000504 	addi	r4,r2,20
  806c60:	180b883a 	mov	r5,r3
  806c64:	18c00044 	addi	r3,r3,1
  806c68:	313ffb2e 	bgeu	r6,r4,806c58 <__alt_mem_onchip_mem+0xff786c58>
  806c6c:	e1401115 	stw	r5,68(fp)
  806c70:	e009883a 	mov	r4,fp
  806c74:	08091e80 	call	8091e8 <_Balloc>
  806c78:	d8800715 	stw	r2,28(sp)
  806c7c:	e0801015 	stw	r2,64(fp)
  806c80:	00800384 	movi	r2,14
  806c84:	1400f736 	bltu	r2,r16,807064 <_dtoa_r+0x764>
  806c88:	8800f626 	beq	r17,zero,807064 <_dtoa_r+0x764>
  806c8c:	d9c00517 	ldw	r7,20(sp)
  806c90:	01c39a0e 	bge	zero,r7,807afc <_dtoa_r+0x11fc>
  806c94:	388003cc 	andi	r2,r7,15
  806c98:	100490fa 	slli	r2,r2,3
  806c9c:	382bd13a 	srai	r21,r7,4
  806ca0:	00c02074 	movhi	r3,129
  806ca4:	18d03904 	addi	r3,r3,16612
  806ca8:	1885883a 	add	r2,r3,r2
  806cac:	a8c0040c 	andi	r3,r21,16
  806cb0:	12400017 	ldw	r9,0(r2)
  806cb4:	12000117 	ldw	r8,4(r2)
  806cb8:	18037926 	beq	r3,zero,807aa0 <_dtoa_r+0x11a0>
  806cbc:	00802074 	movhi	r2,129
  806cc0:	10902f04 	addi	r2,r2,16572
  806cc4:	11800817 	ldw	r6,32(r2)
  806cc8:	11c00917 	ldw	r7,36(r2)
  806ccc:	9009883a 	mov	r4,r18
  806cd0:	980b883a 	mov	r5,r19
  806cd4:	da001715 	stw	r8,92(sp)
  806cd8:	da401615 	stw	r9,88(sp)
  806cdc:	080dbc40 	call	80dbc4 <__divdf3>
  806ce0:	da001717 	ldw	r8,92(sp)
  806ce4:	da401617 	ldw	r9,88(sp)
  806ce8:	ad4003cc 	andi	r21,r21,15
  806cec:	040000c4 	movi	r16,3
  806cf0:	1023883a 	mov	r17,r2
  806cf4:	1829883a 	mov	r20,r3
  806cf8:	a8001126 	beq	r21,zero,806d40 <_dtoa_r+0x440>
  806cfc:	05c02074 	movhi	r23,129
  806d00:	bdd02f04 	addi	r23,r23,16572
  806d04:	4805883a 	mov	r2,r9
  806d08:	4007883a 	mov	r3,r8
  806d0c:	a980004c 	andi	r6,r21,1
  806d10:	1009883a 	mov	r4,r2
  806d14:	a82bd07a 	srai	r21,r21,1
  806d18:	180b883a 	mov	r5,r3
  806d1c:	30000426 	beq	r6,zero,806d30 <_dtoa_r+0x430>
  806d20:	b9800017 	ldw	r6,0(r23)
  806d24:	b9c00117 	ldw	r7,4(r23)
  806d28:	84000044 	addi	r16,r16,1
  806d2c:	080e7040 	call	80e704 <__muldf3>
  806d30:	bdc00204 	addi	r23,r23,8
  806d34:	a83ff51e 	bne	r21,zero,806d0c <__alt_mem_onchip_mem+0xff786d0c>
  806d38:	1013883a 	mov	r9,r2
  806d3c:	1811883a 	mov	r8,r3
  806d40:	480d883a 	mov	r6,r9
  806d44:	400f883a 	mov	r7,r8
  806d48:	8809883a 	mov	r4,r17
  806d4c:	a00b883a 	mov	r5,r20
  806d50:	080dbc40 	call	80dbc4 <__divdf3>
  806d54:	d8800f15 	stw	r2,60(sp)
  806d58:	d8c01015 	stw	r3,64(sp)
  806d5c:	d8c00e17 	ldw	r3,56(sp)
  806d60:	18000626 	beq	r3,zero,806d7c <_dtoa_r+0x47c>
  806d64:	d9000f17 	ldw	r4,60(sp)
  806d68:	d9401017 	ldw	r5,64(sp)
  806d6c:	000d883a 	mov	r6,zero
  806d70:	01cffc34 	movhi	r7,16368
  806d74:	080e6100 	call	80e610 <__ledf2>
  806d78:	10040b16 	blt	r2,zero,807da8 <_dtoa_r+0x14a8>
  806d7c:	8009883a 	mov	r4,r16
  806d80:	080f7980 	call	80f798 <__floatsidf>
  806d84:	d9800f17 	ldw	r6,60(sp)
  806d88:	d9c01017 	ldw	r7,64(sp)
  806d8c:	1009883a 	mov	r4,r2
  806d90:	180b883a 	mov	r5,r3
  806d94:	080e7040 	call	80e704 <__muldf3>
  806d98:	000d883a 	mov	r6,zero
  806d9c:	01d00734 	movhi	r7,16412
  806da0:	1009883a 	mov	r4,r2
  806da4:	180b883a 	mov	r5,r3
  806da8:	080d3180 	call	80d318 <__adddf3>
  806dac:	1021883a 	mov	r16,r2
  806db0:	d8800617 	ldw	r2,24(sp)
  806db4:	047f3034 	movhi	r17,64704
  806db8:	1c63883a 	add	r17,r3,r17
  806dbc:	10031826 	beq	r2,zero,807a20 <_dtoa_r+0x1120>
  806dc0:	d8c00517 	ldw	r3,20(sp)
  806dc4:	db000617 	ldw	r12,24(sp)
  806dc8:	d8c01315 	stw	r3,76(sp)
  806dcc:	d9000b17 	ldw	r4,44(sp)
  806dd0:	20038f26 	beq	r4,zero,807c10 <_dtoa_r+0x1310>
  806dd4:	60bfffc4 	addi	r2,r12,-1
  806dd8:	100490fa 	slli	r2,r2,3
  806ddc:	00c02074 	movhi	r3,129
  806de0:	18d03904 	addi	r3,r3,16612
  806de4:	1885883a 	add	r2,r3,r2
  806de8:	11800017 	ldw	r6,0(r2)
  806dec:	11c00117 	ldw	r7,4(r2)
  806df0:	d8800717 	ldw	r2,28(sp)
  806df4:	0009883a 	mov	r4,zero
  806df8:	014ff834 	movhi	r5,16352
  806dfc:	db001615 	stw	r12,88(sp)
  806e00:	15c00044 	addi	r23,r2,1
  806e04:	080dbc40 	call	80dbc4 <__divdf3>
  806e08:	800d883a 	mov	r6,r16
  806e0c:	880f883a 	mov	r7,r17
  806e10:	1009883a 	mov	r4,r2
  806e14:	180b883a 	mov	r5,r3
  806e18:	080ee1c0 	call	80ee1c <__subdf3>
  806e1c:	d9401017 	ldw	r5,64(sp)
  806e20:	d9000f17 	ldw	r4,60(sp)
  806e24:	102b883a 	mov	r21,r2
  806e28:	d8c01215 	stw	r3,72(sp)
  806e2c:	080f7180 	call	80f718 <__fixdfsi>
  806e30:	1009883a 	mov	r4,r2
  806e34:	1029883a 	mov	r20,r2
  806e38:	080f7980 	call	80f798 <__floatsidf>
  806e3c:	d9000f17 	ldw	r4,60(sp)
  806e40:	d9401017 	ldw	r5,64(sp)
  806e44:	100d883a 	mov	r6,r2
  806e48:	180f883a 	mov	r7,r3
  806e4c:	080ee1c0 	call	80ee1c <__subdf3>
  806e50:	1823883a 	mov	r17,r3
  806e54:	d8c00717 	ldw	r3,28(sp)
  806e58:	d9401217 	ldw	r5,72(sp)
  806e5c:	a2000c04 	addi	r8,r20,48
  806e60:	1021883a 	mov	r16,r2
  806e64:	1a000005 	stb	r8,0(r3)
  806e68:	800d883a 	mov	r6,r16
  806e6c:	880f883a 	mov	r7,r17
  806e70:	a809883a 	mov	r4,r21
  806e74:	4029883a 	mov	r20,r8
  806e78:	080e5340 	call	80e534 <__gedf2>
  806e7c:	00841d16 	blt	zero,r2,807ef4 <_dtoa_r+0x15f4>
  806e80:	800d883a 	mov	r6,r16
  806e84:	880f883a 	mov	r7,r17
  806e88:	0009883a 	mov	r4,zero
  806e8c:	014ffc34 	movhi	r5,16368
  806e90:	080ee1c0 	call	80ee1c <__subdf3>
  806e94:	d9401217 	ldw	r5,72(sp)
  806e98:	100d883a 	mov	r6,r2
  806e9c:	180f883a 	mov	r7,r3
  806ea0:	a809883a 	mov	r4,r21
  806ea4:	080e5340 	call	80e534 <__gedf2>
  806ea8:	db001617 	ldw	r12,88(sp)
  806eac:	00840e16 	blt	zero,r2,807ee8 <_dtoa_r+0x15e8>
  806eb0:	00800044 	movi	r2,1
  806eb4:	13006b0e 	bge	r2,r12,807064 <_dtoa_r+0x764>
  806eb8:	d9000717 	ldw	r4,28(sp)
  806ebc:	dd800f15 	stw	r22,60(sp)
  806ec0:	dcc01015 	stw	r19,64(sp)
  806ec4:	2319883a 	add	r12,r4,r12
  806ec8:	dcc01217 	ldw	r19,72(sp)
  806ecc:	602d883a 	mov	r22,r12
  806ed0:	dc801215 	stw	r18,72(sp)
  806ed4:	b825883a 	mov	r18,r23
  806ed8:	00000906 	br	806f00 <_dtoa_r+0x600>
  806edc:	080ee1c0 	call	80ee1c <__subdf3>
  806ee0:	a80d883a 	mov	r6,r21
  806ee4:	980f883a 	mov	r7,r19
  806ee8:	1009883a 	mov	r4,r2
  806eec:	180b883a 	mov	r5,r3
  806ef0:	080e6100 	call	80e610 <__ledf2>
  806ef4:	1003e816 	blt	r2,zero,807e98 <_dtoa_r+0x1598>
  806ef8:	b825883a 	mov	r18,r23
  806efc:	bd83e926 	beq	r23,r22,807ea4 <_dtoa_r+0x15a4>
  806f00:	a809883a 	mov	r4,r21
  806f04:	980b883a 	mov	r5,r19
  806f08:	000d883a 	mov	r6,zero
  806f0c:	01d00934 	movhi	r7,16420
  806f10:	080e7040 	call	80e704 <__muldf3>
  806f14:	000d883a 	mov	r6,zero
  806f18:	01d00934 	movhi	r7,16420
  806f1c:	8009883a 	mov	r4,r16
  806f20:	880b883a 	mov	r5,r17
  806f24:	102b883a 	mov	r21,r2
  806f28:	1827883a 	mov	r19,r3
  806f2c:	080e7040 	call	80e704 <__muldf3>
  806f30:	180b883a 	mov	r5,r3
  806f34:	1009883a 	mov	r4,r2
  806f38:	1821883a 	mov	r16,r3
  806f3c:	1023883a 	mov	r17,r2
  806f40:	080f7180 	call	80f718 <__fixdfsi>
  806f44:	1009883a 	mov	r4,r2
  806f48:	1029883a 	mov	r20,r2
  806f4c:	080f7980 	call	80f798 <__floatsidf>
  806f50:	8809883a 	mov	r4,r17
  806f54:	800b883a 	mov	r5,r16
  806f58:	100d883a 	mov	r6,r2
  806f5c:	180f883a 	mov	r7,r3
  806f60:	080ee1c0 	call	80ee1c <__subdf3>
  806f64:	a5000c04 	addi	r20,r20,48
  806f68:	a80d883a 	mov	r6,r21
  806f6c:	980f883a 	mov	r7,r19
  806f70:	1009883a 	mov	r4,r2
  806f74:	180b883a 	mov	r5,r3
  806f78:	95000005 	stb	r20,0(r18)
  806f7c:	1021883a 	mov	r16,r2
  806f80:	1823883a 	mov	r17,r3
  806f84:	080e6100 	call	80e610 <__ledf2>
  806f88:	bdc00044 	addi	r23,r23,1
  806f8c:	800d883a 	mov	r6,r16
  806f90:	880f883a 	mov	r7,r17
  806f94:	0009883a 	mov	r4,zero
  806f98:	014ffc34 	movhi	r5,16368
  806f9c:	103fcf0e 	bge	r2,zero,806edc <__alt_mem_onchip_mem+0xff786edc>
  806fa0:	d8c01317 	ldw	r3,76(sp)
  806fa4:	d8c00515 	stw	r3,20(sp)
  806fa8:	d9400917 	ldw	r5,36(sp)
  806fac:	e009883a 	mov	r4,fp
  806fb0:	08092900 	call	809290 <_Bfree>
  806fb4:	d9000517 	ldw	r4,20(sp)
  806fb8:	d9802317 	ldw	r6,140(sp)
  806fbc:	d9c02517 	ldw	r7,148(sp)
  806fc0:	b8000005 	stb	zero,0(r23)
  806fc4:	20800044 	addi	r2,r4,1
  806fc8:	30800015 	stw	r2,0(r6)
  806fcc:	3802aa26 	beq	r7,zero,807a78 <_dtoa_r+0x1178>
  806fd0:	3dc00015 	stw	r23,0(r7)
  806fd4:	d8800717 	ldw	r2,28(sp)
  806fd8:	003e7906 	br	8069c0 <__alt_mem_onchip_mem+0xff7869c0>
  806fdc:	00800434 	movhi	r2,16
  806fe0:	10bfffc4 	addi	r2,r2,-1
  806fe4:	88a2703a 	and	r17,r17,r2
  806fe8:	883e851e 	bne	r17,zero,806a00 <__alt_mem_onchip_mem+0xff786a00>
  806fec:	00802074 	movhi	r2,129
  806ff0:	10901b04 	addi	r2,r2,16492
  806ff4:	003e8406 	br	806a08 <__alt_mem_onchip_mem+0xff786a08>
  806ff8:	10c00204 	addi	r3,r2,8
  806ffc:	003e8706 	br	806a1c <__alt_mem_onchip_mem+0xff786a1c>
  807000:	01400434 	movhi	r5,16
  807004:	297fffc4 	addi	r5,r5,-1
  807008:	994a703a 	and	r5,r19,r5
  80700c:	9009883a 	mov	r4,r18
  807010:	843f0044 	addi	r16,r16,-1023
  807014:	294ffc34 	orhi	r5,r5,16368
  807018:	dd800217 	ldw	r22,8(sp)
  80701c:	d8001115 	stw	zero,68(sp)
  807020:	003ea506 	br	806ab8 <__alt_mem_onchip_mem+0xff786ab8>
  807024:	00802074 	movhi	r2,129
  807028:	108f7204 	addi	r2,r2,15816
  80702c:	003e6406 	br	8069c0 <__alt_mem_onchip_mem+0xff7869c0>
  807030:	e0001115 	stw	zero,68(fp)
  807034:	000b883a 	mov	r5,zero
  807038:	e009883a 	mov	r4,fp
  80703c:	08091e80 	call	8091e8 <_Balloc>
  807040:	01bfffc4 	movi	r6,-1
  807044:	01c00044 	movi	r7,1
  807048:	d8800715 	stw	r2,28(sp)
  80704c:	d9800c15 	stw	r6,48(sp)
  807050:	e0801015 	stw	r2,64(fp)
  807054:	d8000315 	stw	zero,12(sp)
  807058:	d9c00b15 	stw	r7,44(sp)
  80705c:	d9800615 	stw	r6,24(sp)
  807060:	d8002215 	stw	zero,136(sp)
  807064:	d8800117 	ldw	r2,4(sp)
  807068:	10008916 	blt	r2,zero,807290 <_dtoa_r+0x990>
  80706c:	d9000517 	ldw	r4,20(sp)
  807070:	00c00384 	movi	r3,14
  807074:	19008616 	blt	r3,r4,807290 <_dtoa_r+0x990>
  807078:	200490fa 	slli	r2,r4,3
  80707c:	00c02074 	movhi	r3,129
  807080:	d9802217 	ldw	r6,136(sp)
  807084:	18d03904 	addi	r3,r3,16612
  807088:	1885883a 	add	r2,r3,r2
  80708c:	14000017 	ldw	r16,0(r2)
  807090:	14400117 	ldw	r17,4(r2)
  807094:	30016316 	blt	r6,zero,807624 <_dtoa_r+0xd24>
  807098:	800d883a 	mov	r6,r16
  80709c:	880f883a 	mov	r7,r17
  8070a0:	9009883a 	mov	r4,r18
  8070a4:	980b883a 	mov	r5,r19
  8070a8:	080dbc40 	call	80dbc4 <__divdf3>
  8070ac:	180b883a 	mov	r5,r3
  8070b0:	1009883a 	mov	r4,r2
  8070b4:	080f7180 	call	80f718 <__fixdfsi>
  8070b8:	1009883a 	mov	r4,r2
  8070bc:	102b883a 	mov	r21,r2
  8070c0:	080f7980 	call	80f798 <__floatsidf>
  8070c4:	800d883a 	mov	r6,r16
  8070c8:	880f883a 	mov	r7,r17
  8070cc:	1009883a 	mov	r4,r2
  8070d0:	180b883a 	mov	r5,r3
  8070d4:	080e7040 	call	80e704 <__muldf3>
  8070d8:	100d883a 	mov	r6,r2
  8070dc:	180f883a 	mov	r7,r3
  8070e0:	9009883a 	mov	r4,r18
  8070e4:	980b883a 	mov	r5,r19
  8070e8:	080ee1c0 	call	80ee1c <__subdf3>
  8070ec:	d9c00717 	ldw	r7,28(sp)
  8070f0:	1009883a 	mov	r4,r2
  8070f4:	a8800c04 	addi	r2,r21,48
  8070f8:	38800005 	stb	r2,0(r7)
  8070fc:	3dc00044 	addi	r23,r7,1
  807100:	d9c00617 	ldw	r7,24(sp)
  807104:	01800044 	movi	r6,1
  807108:	180b883a 	mov	r5,r3
  80710c:	2005883a 	mov	r2,r4
  807110:	39803826 	beq	r7,r6,8071f4 <_dtoa_r+0x8f4>
  807114:	000d883a 	mov	r6,zero
  807118:	01d00934 	movhi	r7,16420
  80711c:	080e7040 	call	80e704 <__muldf3>
  807120:	000d883a 	mov	r6,zero
  807124:	000f883a 	mov	r7,zero
  807128:	1009883a 	mov	r4,r2
  80712c:	180b883a 	mov	r5,r3
  807130:	1025883a 	mov	r18,r2
  807134:	1827883a 	mov	r19,r3
  807138:	080e4ac0 	call	80e4ac <__eqdf2>
  80713c:	103f9a26 	beq	r2,zero,806fa8 <__alt_mem_onchip_mem+0xff786fa8>
  807140:	d9c00617 	ldw	r7,24(sp)
  807144:	d8c00717 	ldw	r3,28(sp)
  807148:	b829883a 	mov	r20,r23
  80714c:	38bfffc4 	addi	r2,r7,-1
  807150:	18ad883a 	add	r22,r3,r2
  807154:	00000a06 	br	807180 <_dtoa_r+0x880>
  807158:	080e7040 	call	80e704 <__muldf3>
  80715c:	000d883a 	mov	r6,zero
  807160:	000f883a 	mov	r7,zero
  807164:	1009883a 	mov	r4,r2
  807168:	180b883a 	mov	r5,r3
  80716c:	1025883a 	mov	r18,r2
  807170:	1827883a 	mov	r19,r3
  807174:	b829883a 	mov	r20,r23
  807178:	080e4ac0 	call	80e4ac <__eqdf2>
  80717c:	103f8a26 	beq	r2,zero,806fa8 <__alt_mem_onchip_mem+0xff786fa8>
  807180:	800d883a 	mov	r6,r16
  807184:	880f883a 	mov	r7,r17
  807188:	9009883a 	mov	r4,r18
  80718c:	980b883a 	mov	r5,r19
  807190:	080dbc40 	call	80dbc4 <__divdf3>
  807194:	180b883a 	mov	r5,r3
  807198:	1009883a 	mov	r4,r2
  80719c:	080f7180 	call	80f718 <__fixdfsi>
  8071a0:	1009883a 	mov	r4,r2
  8071a4:	102b883a 	mov	r21,r2
  8071a8:	080f7980 	call	80f798 <__floatsidf>
  8071ac:	800d883a 	mov	r6,r16
  8071b0:	880f883a 	mov	r7,r17
  8071b4:	1009883a 	mov	r4,r2
  8071b8:	180b883a 	mov	r5,r3
  8071bc:	080e7040 	call	80e704 <__muldf3>
  8071c0:	100d883a 	mov	r6,r2
  8071c4:	180f883a 	mov	r7,r3
  8071c8:	9009883a 	mov	r4,r18
  8071cc:	980b883a 	mov	r5,r19
  8071d0:	080ee1c0 	call	80ee1c <__subdf3>
  8071d4:	aa000c04 	addi	r8,r21,48
  8071d8:	a2000005 	stb	r8,0(r20)
  8071dc:	000d883a 	mov	r6,zero
  8071e0:	01d00934 	movhi	r7,16420
  8071e4:	1009883a 	mov	r4,r2
  8071e8:	180b883a 	mov	r5,r3
  8071ec:	a5c00044 	addi	r23,r20,1
  8071f0:	b53fd91e 	bne	r22,r20,807158 <__alt_mem_onchip_mem+0xff787158>
  8071f4:	100d883a 	mov	r6,r2
  8071f8:	180f883a 	mov	r7,r3
  8071fc:	1009883a 	mov	r4,r2
  807200:	180b883a 	mov	r5,r3
  807204:	080d3180 	call	80d318 <__adddf3>
  807208:	100d883a 	mov	r6,r2
  80720c:	180f883a 	mov	r7,r3
  807210:	8009883a 	mov	r4,r16
  807214:	880b883a 	mov	r5,r17
  807218:	1027883a 	mov	r19,r2
  80721c:	1825883a 	mov	r18,r3
  807220:	080e6100 	call	80e610 <__ledf2>
  807224:	10000816 	blt	r2,zero,807248 <_dtoa_r+0x948>
  807228:	980d883a 	mov	r6,r19
  80722c:	900f883a 	mov	r7,r18
  807230:	8009883a 	mov	r4,r16
  807234:	880b883a 	mov	r5,r17
  807238:	080e4ac0 	call	80e4ac <__eqdf2>
  80723c:	103f5a1e 	bne	r2,zero,806fa8 <__alt_mem_onchip_mem+0xff786fa8>
  807240:	ad40004c 	andi	r21,r21,1
  807244:	a83f5826 	beq	r21,zero,806fa8 <__alt_mem_onchip_mem+0xff786fa8>
  807248:	bd3fffc3 	ldbu	r20,-1(r23)
  80724c:	b8bfffc4 	addi	r2,r23,-1
  807250:	1007883a 	mov	r3,r2
  807254:	01400e44 	movi	r5,57
  807258:	d9800717 	ldw	r6,28(sp)
  80725c:	00000506 	br	807274 <_dtoa_r+0x974>
  807260:	18ffffc4 	addi	r3,r3,-1
  807264:	11824726 	beq	r2,r6,807b84 <_dtoa_r+0x1284>
  807268:	1d000003 	ldbu	r20,0(r3)
  80726c:	102f883a 	mov	r23,r2
  807270:	10bfffc4 	addi	r2,r2,-1
  807274:	a1003fcc 	andi	r4,r20,255
  807278:	2100201c 	xori	r4,r4,128
  80727c:	213fe004 	addi	r4,r4,-128
  807280:	217ff726 	beq	r4,r5,807260 <__alt_mem_onchip_mem+0xff787260>
  807284:	a2000044 	addi	r8,r20,1
  807288:	12000005 	stb	r8,0(r2)
  80728c:	003f4606 	br	806fa8 <__alt_mem_onchip_mem+0xff786fa8>
  807290:	d9000b17 	ldw	r4,44(sp)
  807294:	2000c826 	beq	r4,zero,8075b8 <_dtoa_r+0xcb8>
  807298:	d9800317 	ldw	r6,12(sp)
  80729c:	00c00044 	movi	r3,1
  8072a0:	1980f90e 	bge	r3,r6,807688 <_dtoa_r+0xd88>
  8072a4:	d8800617 	ldw	r2,24(sp)
  8072a8:	d8c00a17 	ldw	r3,40(sp)
  8072ac:	157fffc4 	addi	r21,r2,-1
  8072b0:	1d41f316 	blt	r3,r21,807a80 <_dtoa_r+0x1180>
  8072b4:	1d6bc83a 	sub	r21,r3,r21
  8072b8:	d9c00617 	ldw	r7,24(sp)
  8072bc:	3802aa16 	blt	r7,zero,807d68 <_dtoa_r+0x1468>
  8072c0:	dd000817 	ldw	r20,32(sp)
  8072c4:	d8800617 	ldw	r2,24(sp)
  8072c8:	d8c00817 	ldw	r3,32(sp)
  8072cc:	01400044 	movi	r5,1
  8072d0:	e009883a 	mov	r4,fp
  8072d4:	1887883a 	add	r3,r3,r2
  8072d8:	d8c00815 	stw	r3,32(sp)
  8072dc:	b0ad883a 	add	r22,r22,r2
  8072e0:	08095f40 	call	8095f4 <__i2b>
  8072e4:	1023883a 	mov	r17,r2
  8072e8:	a0000826 	beq	r20,zero,80730c <_dtoa_r+0xa0c>
  8072ec:	0580070e 	bge	zero,r22,80730c <_dtoa_r+0xa0c>
  8072f0:	a005883a 	mov	r2,r20
  8072f4:	b500b916 	blt	r22,r20,8075dc <_dtoa_r+0xcdc>
  8072f8:	d9000817 	ldw	r4,32(sp)
  8072fc:	a0a9c83a 	sub	r20,r20,r2
  807300:	b0adc83a 	sub	r22,r22,r2
  807304:	2089c83a 	sub	r4,r4,r2
  807308:	d9000815 	stw	r4,32(sp)
  80730c:	d9800a17 	ldw	r6,40(sp)
  807310:	0181810e 	bge	zero,r6,807918 <_dtoa_r+0x1018>
  807314:	d9c00b17 	ldw	r7,44(sp)
  807318:	3800b326 	beq	r7,zero,8075e8 <_dtoa_r+0xce8>
  80731c:	a800b226 	beq	r21,zero,8075e8 <_dtoa_r+0xce8>
  807320:	880b883a 	mov	r5,r17
  807324:	a80d883a 	mov	r6,r21
  807328:	e009883a 	mov	r4,fp
  80732c:	08098280 	call	809828 <__pow5mult>
  807330:	d9800917 	ldw	r6,36(sp)
  807334:	100b883a 	mov	r5,r2
  807338:	e009883a 	mov	r4,fp
  80733c:	1023883a 	mov	r17,r2
  807340:	08096300 	call	809630 <__multiply>
  807344:	1021883a 	mov	r16,r2
  807348:	d8800a17 	ldw	r2,40(sp)
  80734c:	d9400917 	ldw	r5,36(sp)
  807350:	e009883a 	mov	r4,fp
  807354:	1545c83a 	sub	r2,r2,r21
  807358:	d8800a15 	stw	r2,40(sp)
  80735c:	08092900 	call	809290 <_Bfree>
  807360:	d8c00a17 	ldw	r3,40(sp)
  807364:	18009f1e 	bne	r3,zero,8075e4 <_dtoa_r+0xce4>
  807368:	05c00044 	movi	r23,1
  80736c:	e009883a 	mov	r4,fp
  807370:	b80b883a 	mov	r5,r23
  807374:	08095f40 	call	8095f4 <__i2b>
  807378:	d9000d17 	ldw	r4,52(sp)
  80737c:	102b883a 	mov	r21,r2
  807380:	2000ce26 	beq	r4,zero,8076bc <_dtoa_r+0xdbc>
  807384:	200d883a 	mov	r6,r4
  807388:	100b883a 	mov	r5,r2
  80738c:	e009883a 	mov	r4,fp
  807390:	08098280 	call	809828 <__pow5mult>
  807394:	d9800317 	ldw	r6,12(sp)
  807398:	102b883a 	mov	r21,r2
  80739c:	b981810e 	bge	r23,r6,8079a4 <_dtoa_r+0x10a4>
  8073a0:	0027883a 	mov	r19,zero
  8073a4:	a8800417 	ldw	r2,16(r21)
  8073a8:	05c00804 	movi	r23,32
  8073ac:	10800104 	addi	r2,r2,4
  8073b0:	1085883a 	add	r2,r2,r2
  8073b4:	1085883a 	add	r2,r2,r2
  8073b8:	a885883a 	add	r2,r21,r2
  8073bc:	11000017 	ldw	r4,0(r2)
  8073c0:	08094dc0 	call	8094dc <__hi0bits>
  8073c4:	b885c83a 	sub	r2,r23,r2
  8073c8:	1585883a 	add	r2,r2,r22
  8073cc:	108007cc 	andi	r2,r2,31
  8073d0:	1000b326 	beq	r2,zero,8076a0 <_dtoa_r+0xda0>
  8073d4:	00c00804 	movi	r3,32
  8073d8:	1887c83a 	sub	r3,r3,r2
  8073dc:	01000104 	movi	r4,4
  8073e0:	20c2cd0e 	bge	r4,r3,807f18 <_dtoa_r+0x1618>
  8073e4:	00c00704 	movi	r3,28
  8073e8:	1885c83a 	sub	r2,r3,r2
  8073ec:	d8c00817 	ldw	r3,32(sp)
  8073f0:	a0a9883a 	add	r20,r20,r2
  8073f4:	b0ad883a 	add	r22,r22,r2
  8073f8:	1887883a 	add	r3,r3,r2
  8073fc:	d8c00815 	stw	r3,32(sp)
  807400:	d9800817 	ldw	r6,32(sp)
  807404:	0180040e 	bge	zero,r6,807418 <_dtoa_r+0xb18>
  807408:	800b883a 	mov	r5,r16
  80740c:	e009883a 	mov	r4,fp
  807410:	08099680 	call	809968 <__lshift>
  807414:	1021883a 	mov	r16,r2
  807418:	0580050e 	bge	zero,r22,807430 <_dtoa_r+0xb30>
  80741c:	a80b883a 	mov	r5,r21
  807420:	b00d883a 	mov	r6,r22
  807424:	e009883a 	mov	r4,fp
  807428:	08099680 	call	809968 <__lshift>
  80742c:	102b883a 	mov	r21,r2
  807430:	d9c00e17 	ldw	r7,56(sp)
  807434:	3801211e 	bne	r7,zero,8078bc <_dtoa_r+0xfbc>
  807438:	d9800617 	ldw	r6,24(sp)
  80743c:	0181380e 	bge	zero,r6,807920 <_dtoa_r+0x1020>
  807440:	d8c00b17 	ldw	r3,44(sp)
  807444:	1800ab1e 	bne	r3,zero,8076f4 <_dtoa_r+0xdf4>
  807448:	dc800717 	ldw	r18,28(sp)
  80744c:	dcc00617 	ldw	r19,24(sp)
  807450:	9029883a 	mov	r20,r18
  807454:	00000206 	br	807460 <_dtoa_r+0xb60>
  807458:	08092b80 	call	8092b8 <__multadd>
  80745c:	1021883a 	mov	r16,r2
  807460:	a80b883a 	mov	r5,r21
  807464:	8009883a 	mov	r4,r16
  807468:	08067000 	call	806700 <quorem>
  80746c:	10800c04 	addi	r2,r2,48
  807470:	90800005 	stb	r2,0(r18)
  807474:	94800044 	addi	r18,r18,1
  807478:	9507c83a 	sub	r3,r18,r20
  80747c:	000f883a 	mov	r7,zero
  807480:	01800284 	movi	r6,10
  807484:	800b883a 	mov	r5,r16
  807488:	e009883a 	mov	r4,fp
  80748c:	1cfff216 	blt	r3,r19,807458 <__alt_mem_onchip_mem+0xff787458>
  807490:	1011883a 	mov	r8,r2
  807494:	d8800617 	ldw	r2,24(sp)
  807498:	0082370e 	bge	zero,r2,807d78 <_dtoa_r+0x1478>
  80749c:	d9000717 	ldw	r4,28(sp)
  8074a0:	0025883a 	mov	r18,zero
  8074a4:	20af883a 	add	r23,r4,r2
  8074a8:	01800044 	movi	r6,1
  8074ac:	800b883a 	mov	r5,r16
  8074b0:	e009883a 	mov	r4,fp
  8074b4:	da001715 	stw	r8,92(sp)
  8074b8:	08099680 	call	809968 <__lshift>
  8074bc:	a80b883a 	mov	r5,r21
  8074c0:	1009883a 	mov	r4,r2
  8074c4:	d8800915 	stw	r2,36(sp)
  8074c8:	0809ab00 	call	809ab0 <__mcmp>
  8074cc:	da001717 	ldw	r8,92(sp)
  8074d0:	0081800e 	bge	zero,r2,807ad4 <_dtoa_r+0x11d4>
  8074d4:	b93fffc3 	ldbu	r4,-1(r23)
  8074d8:	b8bfffc4 	addi	r2,r23,-1
  8074dc:	1007883a 	mov	r3,r2
  8074e0:	01800e44 	movi	r6,57
  8074e4:	d9c00717 	ldw	r7,28(sp)
  8074e8:	00000506 	br	807500 <_dtoa_r+0xc00>
  8074ec:	18ffffc4 	addi	r3,r3,-1
  8074f0:	11c12326 	beq	r2,r7,807980 <_dtoa_r+0x1080>
  8074f4:	19000003 	ldbu	r4,0(r3)
  8074f8:	102f883a 	mov	r23,r2
  8074fc:	10bfffc4 	addi	r2,r2,-1
  807500:	21403fcc 	andi	r5,r4,255
  807504:	2940201c 	xori	r5,r5,128
  807508:	297fe004 	addi	r5,r5,-128
  80750c:	29bff726 	beq	r5,r6,8074ec <__alt_mem_onchip_mem+0xff7874ec>
  807510:	21000044 	addi	r4,r4,1
  807514:	11000005 	stb	r4,0(r2)
  807518:	a80b883a 	mov	r5,r21
  80751c:	e009883a 	mov	r4,fp
  807520:	08092900 	call	809290 <_Bfree>
  807524:	883ea026 	beq	r17,zero,806fa8 <__alt_mem_onchip_mem+0xff786fa8>
  807528:	90000426 	beq	r18,zero,80753c <_dtoa_r+0xc3c>
  80752c:	94400326 	beq	r18,r17,80753c <_dtoa_r+0xc3c>
  807530:	900b883a 	mov	r5,r18
  807534:	e009883a 	mov	r4,fp
  807538:	08092900 	call	809290 <_Bfree>
  80753c:	880b883a 	mov	r5,r17
  807540:	e009883a 	mov	r4,fp
  807544:	08092900 	call	809290 <_Bfree>
  807548:	003e9706 	br	806fa8 <__alt_mem_onchip_mem+0xff786fa8>
  80754c:	01800044 	movi	r6,1
  807550:	d9800e15 	stw	r6,56(sp)
  807554:	003d9606 	br	806bb0 <__alt_mem_onchip_mem+0xff786bb0>
  807558:	d8800817 	ldw	r2,32(sp)
  80755c:	d8c00517 	ldw	r3,20(sp)
  807560:	d8000d15 	stw	zero,52(sp)
  807564:	10c5c83a 	sub	r2,r2,r3
  807568:	00c9c83a 	sub	r4,zero,r3
  80756c:	d8800815 	stw	r2,32(sp)
  807570:	d9000a15 	stw	r4,40(sp)
  807574:	003d9706 	br	806bd4 <__alt_mem_onchip_mem+0xff786bd4>
  807578:	05adc83a 	sub	r22,zero,r22
  80757c:	dd800815 	stw	r22,32(sp)
  807580:	002d883a 	mov	r22,zero
  807584:	003d8e06 	br	806bc0 <__alt_mem_onchip_mem+0xff786bc0>
  807588:	d9000517 	ldw	r4,20(sp)
  80758c:	080f7980 	call	80f798 <__floatsidf>
  807590:	100d883a 	mov	r6,r2
  807594:	180f883a 	mov	r7,r3
  807598:	a009883a 	mov	r4,r20
  80759c:	880b883a 	mov	r5,r17
  8075a0:	080e4ac0 	call	80e4ac <__eqdf2>
  8075a4:	103d7126 	beq	r2,zero,806b6c <__alt_mem_onchip_mem+0xff786b6c>
  8075a8:	d9c00517 	ldw	r7,20(sp)
  8075ac:	39ffffc4 	addi	r7,r7,-1
  8075b0:	d9c00515 	stw	r7,20(sp)
  8075b4:	003d6d06 	br	806b6c <__alt_mem_onchip_mem+0xff786b6c>
  8075b8:	dd400a17 	ldw	r21,40(sp)
  8075bc:	dd000817 	ldw	r20,32(sp)
  8075c0:	0023883a 	mov	r17,zero
  8075c4:	003f4806 	br	8072e8 <__alt_mem_onchip_mem+0xff7872e8>
  8075c8:	10e3c83a 	sub	r17,r2,r3
  8075cc:	9448983a 	sll	r4,r18,r17
  8075d0:	003d3206 	br	806a9c <__alt_mem_onchip_mem+0xff786a9c>
  8075d4:	d8000e15 	stw	zero,56(sp)
  8075d8:	003d7506 	br	806bb0 <__alt_mem_onchip_mem+0xff786bb0>
  8075dc:	b005883a 	mov	r2,r22
  8075e0:	003f4506 	br	8072f8 <__alt_mem_onchip_mem+0xff7872f8>
  8075e4:	dc000915 	stw	r16,36(sp)
  8075e8:	d9800a17 	ldw	r6,40(sp)
  8075ec:	d9400917 	ldw	r5,36(sp)
  8075f0:	e009883a 	mov	r4,fp
  8075f4:	08098280 	call	809828 <__pow5mult>
  8075f8:	1021883a 	mov	r16,r2
  8075fc:	003f5a06 	br	807368 <__alt_mem_onchip_mem+0xff787368>
  807600:	01c00044 	movi	r7,1
  807604:	d9c00b15 	stw	r7,44(sp)
  807608:	d8802217 	ldw	r2,136(sp)
  80760c:	0081280e 	bge	zero,r2,807ab0 <_dtoa_r+0x11b0>
  807610:	100d883a 	mov	r6,r2
  807614:	1021883a 	mov	r16,r2
  807618:	d8800c15 	stw	r2,48(sp)
  80761c:	d8800615 	stw	r2,24(sp)
  807620:	003d8806 	br	806c44 <__alt_mem_onchip_mem+0xff786c44>
  807624:	d8800617 	ldw	r2,24(sp)
  807628:	00be9b16 	blt	zero,r2,807098 <__alt_mem_onchip_mem+0xff787098>
  80762c:	10010f1e 	bne	r2,zero,807a6c <_dtoa_r+0x116c>
  807630:	880b883a 	mov	r5,r17
  807634:	000d883a 	mov	r6,zero
  807638:	01d00534 	movhi	r7,16404
  80763c:	8009883a 	mov	r4,r16
  807640:	080e7040 	call	80e704 <__muldf3>
  807644:	900d883a 	mov	r6,r18
  807648:	980f883a 	mov	r7,r19
  80764c:	1009883a 	mov	r4,r2
  807650:	180b883a 	mov	r5,r3
  807654:	080e5340 	call	80e534 <__gedf2>
  807658:	002b883a 	mov	r21,zero
  80765c:	0023883a 	mov	r17,zero
  807660:	1000bf16 	blt	r2,zero,807960 <_dtoa_r+0x1060>
  807664:	d9802217 	ldw	r6,136(sp)
  807668:	ddc00717 	ldw	r23,28(sp)
  80766c:	018c303a 	nor	r6,zero,r6
  807670:	d9800515 	stw	r6,20(sp)
  807674:	a80b883a 	mov	r5,r21
  807678:	e009883a 	mov	r4,fp
  80767c:	08092900 	call	809290 <_Bfree>
  807680:	883e4926 	beq	r17,zero,806fa8 <__alt_mem_onchip_mem+0xff786fa8>
  807684:	003fad06 	br	80753c <__alt_mem_onchip_mem+0xff78753c>
  807688:	d9c01117 	ldw	r7,68(sp)
  80768c:	3801bc26 	beq	r7,zero,807d80 <_dtoa_r+0x1480>
  807690:	10810cc4 	addi	r2,r2,1075
  807694:	dd400a17 	ldw	r21,40(sp)
  807698:	dd000817 	ldw	r20,32(sp)
  80769c:	003f0a06 	br	8072c8 <__alt_mem_onchip_mem+0xff7872c8>
  8076a0:	00800704 	movi	r2,28
  8076a4:	d9000817 	ldw	r4,32(sp)
  8076a8:	a0a9883a 	add	r20,r20,r2
  8076ac:	b0ad883a 	add	r22,r22,r2
  8076b0:	2089883a 	add	r4,r4,r2
  8076b4:	d9000815 	stw	r4,32(sp)
  8076b8:	003f5106 	br	807400 <__alt_mem_onchip_mem+0xff787400>
  8076bc:	d8c00317 	ldw	r3,12(sp)
  8076c0:	b8c1fc0e 	bge	r23,r3,807eb4 <_dtoa_r+0x15b4>
  8076c4:	0027883a 	mov	r19,zero
  8076c8:	b805883a 	mov	r2,r23
  8076cc:	003f3e06 	br	8073c8 <__alt_mem_onchip_mem+0xff7873c8>
  8076d0:	880b883a 	mov	r5,r17
  8076d4:	e009883a 	mov	r4,fp
  8076d8:	000f883a 	mov	r7,zero
  8076dc:	01800284 	movi	r6,10
  8076e0:	08092b80 	call	8092b8 <__multadd>
  8076e4:	d9000c17 	ldw	r4,48(sp)
  8076e8:	1023883a 	mov	r17,r2
  8076ec:	0102040e 	bge	zero,r4,807f00 <_dtoa_r+0x1600>
  8076f0:	d9000615 	stw	r4,24(sp)
  8076f4:	0500050e 	bge	zero,r20,80770c <_dtoa_r+0xe0c>
  8076f8:	880b883a 	mov	r5,r17
  8076fc:	a00d883a 	mov	r6,r20
  807700:	e009883a 	mov	r4,fp
  807704:	08099680 	call	809968 <__lshift>
  807708:	1023883a 	mov	r17,r2
  80770c:	9801241e 	bne	r19,zero,807ba0 <_dtoa_r+0x12a0>
  807710:	8829883a 	mov	r20,r17
  807714:	d9000617 	ldw	r4,24(sp)
  807718:	dcc00717 	ldw	r19,28(sp)
  80771c:	9480004c 	andi	r18,r18,1
  807720:	20bfffc4 	addi	r2,r4,-1
  807724:	9885883a 	add	r2,r19,r2
  807728:	d8800415 	stw	r2,16(sp)
  80772c:	dc800615 	stw	r18,24(sp)
  807730:	a80b883a 	mov	r5,r21
  807734:	8009883a 	mov	r4,r16
  807738:	08067000 	call	806700 <quorem>
  80773c:	880b883a 	mov	r5,r17
  807740:	8009883a 	mov	r4,r16
  807744:	102f883a 	mov	r23,r2
  807748:	0809ab00 	call	809ab0 <__mcmp>
  80774c:	a80b883a 	mov	r5,r21
  807750:	a00d883a 	mov	r6,r20
  807754:	e009883a 	mov	r4,fp
  807758:	102d883a 	mov	r22,r2
  80775c:	0809b100 	call	809b10 <__mdiff>
  807760:	1007883a 	mov	r3,r2
  807764:	10800317 	ldw	r2,12(r2)
  807768:	bc800c04 	addi	r18,r23,48
  80776c:	180b883a 	mov	r5,r3
  807770:	10004e1e 	bne	r2,zero,8078ac <_dtoa_r+0xfac>
  807774:	8009883a 	mov	r4,r16
  807778:	d8c01615 	stw	r3,88(sp)
  80777c:	0809ab00 	call	809ab0 <__mcmp>
  807780:	d8c01617 	ldw	r3,88(sp)
  807784:	e009883a 	mov	r4,fp
  807788:	d8801615 	stw	r2,88(sp)
  80778c:	180b883a 	mov	r5,r3
  807790:	08092900 	call	809290 <_Bfree>
  807794:	d8801617 	ldw	r2,88(sp)
  807798:	1000041e 	bne	r2,zero,8077ac <_dtoa_r+0xeac>
  80779c:	d9800317 	ldw	r6,12(sp)
  8077a0:	3000021e 	bne	r6,zero,8077ac <_dtoa_r+0xeac>
  8077a4:	d8c00617 	ldw	r3,24(sp)
  8077a8:	18003726 	beq	r3,zero,807888 <_dtoa_r+0xf88>
  8077ac:	b0002016 	blt	r22,zero,807830 <_dtoa_r+0xf30>
  8077b0:	b000041e 	bne	r22,zero,8077c4 <_dtoa_r+0xec4>
  8077b4:	d9000317 	ldw	r4,12(sp)
  8077b8:	2000021e 	bne	r4,zero,8077c4 <_dtoa_r+0xec4>
  8077bc:	d8c00617 	ldw	r3,24(sp)
  8077c0:	18001b26 	beq	r3,zero,807830 <_dtoa_r+0xf30>
  8077c4:	00810716 	blt	zero,r2,807be4 <_dtoa_r+0x12e4>
  8077c8:	d8c00417 	ldw	r3,16(sp)
  8077cc:	9d800044 	addi	r22,r19,1
  8077d0:	9c800005 	stb	r18,0(r19)
  8077d4:	b02f883a 	mov	r23,r22
  8077d8:	98c10626 	beq	r19,r3,807bf4 <_dtoa_r+0x12f4>
  8077dc:	800b883a 	mov	r5,r16
  8077e0:	000f883a 	mov	r7,zero
  8077e4:	01800284 	movi	r6,10
  8077e8:	e009883a 	mov	r4,fp
  8077ec:	08092b80 	call	8092b8 <__multadd>
  8077f0:	1021883a 	mov	r16,r2
  8077f4:	000f883a 	mov	r7,zero
  8077f8:	01800284 	movi	r6,10
  8077fc:	880b883a 	mov	r5,r17
  807800:	e009883a 	mov	r4,fp
  807804:	8d002526 	beq	r17,r20,80789c <_dtoa_r+0xf9c>
  807808:	08092b80 	call	8092b8 <__multadd>
  80780c:	a00b883a 	mov	r5,r20
  807810:	000f883a 	mov	r7,zero
  807814:	01800284 	movi	r6,10
  807818:	e009883a 	mov	r4,fp
  80781c:	1023883a 	mov	r17,r2
  807820:	08092b80 	call	8092b8 <__multadd>
  807824:	1029883a 	mov	r20,r2
  807828:	b027883a 	mov	r19,r22
  80782c:	003fc006 	br	807730 <__alt_mem_onchip_mem+0xff787730>
  807830:	9011883a 	mov	r8,r18
  807834:	00800e0e 	bge	zero,r2,807870 <_dtoa_r+0xf70>
  807838:	800b883a 	mov	r5,r16
  80783c:	01800044 	movi	r6,1
  807840:	e009883a 	mov	r4,fp
  807844:	da001715 	stw	r8,92(sp)
  807848:	08099680 	call	809968 <__lshift>
  80784c:	a80b883a 	mov	r5,r21
  807850:	1009883a 	mov	r4,r2
  807854:	1021883a 	mov	r16,r2
  807858:	0809ab00 	call	809ab0 <__mcmp>
  80785c:	da001717 	ldw	r8,92(sp)
  807860:	0081960e 	bge	zero,r2,807ebc <_dtoa_r+0x15bc>
  807864:	00800e44 	movi	r2,57
  807868:	40817026 	beq	r8,r2,807e2c <_dtoa_r+0x152c>
  80786c:	ba000c44 	addi	r8,r23,49
  807870:	8825883a 	mov	r18,r17
  807874:	9dc00044 	addi	r23,r19,1
  807878:	9a000005 	stb	r8,0(r19)
  80787c:	a023883a 	mov	r17,r20
  807880:	dc000915 	stw	r16,36(sp)
  807884:	003f2406 	br	807518 <__alt_mem_onchip_mem+0xff787518>
  807888:	00800e44 	movi	r2,57
  80788c:	9011883a 	mov	r8,r18
  807890:	90816626 	beq	r18,r2,807e2c <_dtoa_r+0x152c>
  807894:	05bff516 	blt	zero,r22,80786c <__alt_mem_onchip_mem+0xff78786c>
  807898:	003ff506 	br	807870 <__alt_mem_onchip_mem+0xff787870>
  80789c:	08092b80 	call	8092b8 <__multadd>
  8078a0:	1023883a 	mov	r17,r2
  8078a4:	1029883a 	mov	r20,r2
  8078a8:	003fdf06 	br	807828 <__alt_mem_onchip_mem+0xff787828>
  8078ac:	e009883a 	mov	r4,fp
  8078b0:	08092900 	call	809290 <_Bfree>
  8078b4:	00800044 	movi	r2,1
  8078b8:	003fbc06 	br	8077ac <__alt_mem_onchip_mem+0xff7877ac>
  8078bc:	a80b883a 	mov	r5,r21
  8078c0:	8009883a 	mov	r4,r16
  8078c4:	0809ab00 	call	809ab0 <__mcmp>
  8078c8:	103edb0e 	bge	r2,zero,807438 <__alt_mem_onchip_mem+0xff787438>
  8078cc:	800b883a 	mov	r5,r16
  8078d0:	000f883a 	mov	r7,zero
  8078d4:	01800284 	movi	r6,10
  8078d8:	e009883a 	mov	r4,fp
  8078dc:	08092b80 	call	8092b8 <__multadd>
  8078e0:	1021883a 	mov	r16,r2
  8078e4:	d8800517 	ldw	r2,20(sp)
  8078e8:	d8c00b17 	ldw	r3,44(sp)
  8078ec:	10bfffc4 	addi	r2,r2,-1
  8078f0:	d8800515 	stw	r2,20(sp)
  8078f4:	183f761e 	bne	r3,zero,8076d0 <__alt_mem_onchip_mem+0xff7876d0>
  8078f8:	d9000c17 	ldw	r4,48(sp)
  8078fc:	0101730e 	bge	zero,r4,807ecc <_dtoa_r+0x15cc>
  807900:	d9000615 	stw	r4,24(sp)
  807904:	003ed006 	br	807448 <__alt_mem_onchip_mem+0xff787448>
  807908:	00800084 	movi	r2,2
  80790c:	3081861e 	bne	r6,r2,807f28 <_dtoa_r+0x1628>
  807910:	d8000b15 	stw	zero,44(sp)
  807914:	003f3c06 	br	807608 <__alt_mem_onchip_mem+0xff787608>
  807918:	dc000917 	ldw	r16,36(sp)
  80791c:	003e9206 	br	807368 <__alt_mem_onchip_mem+0xff787368>
  807920:	d9c00317 	ldw	r7,12(sp)
  807924:	00800084 	movi	r2,2
  807928:	11fec50e 	bge	r2,r7,807440 <__alt_mem_onchip_mem+0xff787440>
  80792c:	d9000617 	ldw	r4,24(sp)
  807930:	20013c1e 	bne	r4,zero,807e24 <_dtoa_r+0x1524>
  807934:	a80b883a 	mov	r5,r21
  807938:	000f883a 	mov	r7,zero
  80793c:	01800144 	movi	r6,5
  807940:	e009883a 	mov	r4,fp
  807944:	08092b80 	call	8092b8 <__multadd>
  807948:	100b883a 	mov	r5,r2
  80794c:	8009883a 	mov	r4,r16
  807950:	102b883a 	mov	r21,r2
  807954:	0809ab00 	call	809ab0 <__mcmp>
  807958:	dc000915 	stw	r16,36(sp)
  80795c:	00bf410e 	bge	zero,r2,807664 <__alt_mem_onchip_mem+0xff787664>
  807960:	d9c00717 	ldw	r7,28(sp)
  807964:	00800c44 	movi	r2,49
  807968:	38800005 	stb	r2,0(r7)
  80796c:	d8800517 	ldw	r2,20(sp)
  807970:	3dc00044 	addi	r23,r7,1
  807974:	10800044 	addi	r2,r2,1
  807978:	d8800515 	stw	r2,20(sp)
  80797c:	003f3d06 	br	807674 <__alt_mem_onchip_mem+0xff787674>
  807980:	d9800517 	ldw	r6,20(sp)
  807984:	d9c00717 	ldw	r7,28(sp)
  807988:	00800c44 	movi	r2,49
  80798c:	31800044 	addi	r6,r6,1
  807990:	d9800515 	stw	r6,20(sp)
  807994:	38800005 	stb	r2,0(r7)
  807998:	003edf06 	br	807518 <__alt_mem_onchip_mem+0xff787518>
  80799c:	d8000b15 	stw	zero,44(sp)
  8079a0:	003c9f06 	br	806c20 <__alt_mem_onchip_mem+0xff786c20>
  8079a4:	903e7e1e 	bne	r18,zero,8073a0 <__alt_mem_onchip_mem+0xff7873a0>
  8079a8:	00800434 	movhi	r2,16
  8079ac:	10bfffc4 	addi	r2,r2,-1
  8079b0:	9884703a 	and	r2,r19,r2
  8079b4:	1000ea1e 	bne	r2,zero,807d60 <_dtoa_r+0x1460>
  8079b8:	9cdffc2c 	andhi	r19,r19,32752
  8079bc:	9800e826 	beq	r19,zero,807d60 <_dtoa_r+0x1460>
  8079c0:	d9c00817 	ldw	r7,32(sp)
  8079c4:	b5800044 	addi	r22,r22,1
  8079c8:	04c00044 	movi	r19,1
  8079cc:	39c00044 	addi	r7,r7,1
  8079d0:	d9c00815 	stw	r7,32(sp)
  8079d4:	d8800d17 	ldw	r2,52(sp)
  8079d8:	103e721e 	bne	r2,zero,8073a4 <__alt_mem_onchip_mem+0xff7873a4>
  8079dc:	00800044 	movi	r2,1
  8079e0:	003e7906 	br	8073c8 <__alt_mem_onchip_mem+0xff7873c8>
  8079e4:	8009883a 	mov	r4,r16
  8079e8:	080f7980 	call	80f798 <__floatsidf>
  8079ec:	d9800f17 	ldw	r6,60(sp)
  8079f0:	d9c01017 	ldw	r7,64(sp)
  8079f4:	1009883a 	mov	r4,r2
  8079f8:	180b883a 	mov	r5,r3
  8079fc:	080e7040 	call	80e704 <__muldf3>
  807a00:	000d883a 	mov	r6,zero
  807a04:	01d00734 	movhi	r7,16412
  807a08:	1009883a 	mov	r4,r2
  807a0c:	180b883a 	mov	r5,r3
  807a10:	080d3180 	call	80d318 <__adddf3>
  807a14:	047f3034 	movhi	r17,64704
  807a18:	1021883a 	mov	r16,r2
  807a1c:	1c63883a 	add	r17,r3,r17
  807a20:	d9000f17 	ldw	r4,60(sp)
  807a24:	d9401017 	ldw	r5,64(sp)
  807a28:	000d883a 	mov	r6,zero
  807a2c:	01d00534 	movhi	r7,16404
  807a30:	080ee1c0 	call	80ee1c <__subdf3>
  807a34:	800d883a 	mov	r6,r16
  807a38:	880f883a 	mov	r7,r17
  807a3c:	1009883a 	mov	r4,r2
  807a40:	180b883a 	mov	r5,r3
  807a44:	102b883a 	mov	r21,r2
  807a48:	1829883a 	mov	r20,r3
  807a4c:	080e5340 	call	80e534 <__gedf2>
  807a50:	00806c16 	blt	zero,r2,807c04 <_dtoa_r+0x1304>
  807a54:	89e0003c 	xorhi	r7,r17,32768
  807a58:	800d883a 	mov	r6,r16
  807a5c:	a809883a 	mov	r4,r21
  807a60:	a00b883a 	mov	r5,r20
  807a64:	080e6100 	call	80e610 <__ledf2>
  807a68:	103d7e0e 	bge	r2,zero,807064 <__alt_mem_onchip_mem+0xff787064>
  807a6c:	002b883a 	mov	r21,zero
  807a70:	0023883a 	mov	r17,zero
  807a74:	003efb06 	br	807664 <__alt_mem_onchip_mem+0xff787664>
  807a78:	d8800717 	ldw	r2,28(sp)
  807a7c:	003bd006 	br	8069c0 <__alt_mem_onchip_mem+0xff7869c0>
  807a80:	d9000a17 	ldw	r4,40(sp)
  807a84:	d9800d17 	ldw	r6,52(sp)
  807a88:	dd400a15 	stw	r21,40(sp)
  807a8c:	a905c83a 	sub	r2,r21,r4
  807a90:	308d883a 	add	r6,r6,r2
  807a94:	d9800d15 	stw	r6,52(sp)
  807a98:	002b883a 	mov	r21,zero
  807a9c:	003e0606 	br	8072b8 <__alt_mem_onchip_mem+0xff7872b8>
  807aa0:	9023883a 	mov	r17,r18
  807aa4:	9829883a 	mov	r20,r19
  807aa8:	04000084 	movi	r16,2
  807aac:	003c9206 	br	806cf8 <__alt_mem_onchip_mem+0xff786cf8>
  807ab0:	04000044 	movi	r16,1
  807ab4:	dc000c15 	stw	r16,48(sp)
  807ab8:	dc000615 	stw	r16,24(sp)
  807abc:	dc002215 	stw	r16,136(sp)
  807ac0:	e0001115 	stw	zero,68(fp)
  807ac4:	000b883a 	mov	r5,zero
  807ac8:	003c6906 	br	806c70 <__alt_mem_onchip_mem+0xff786c70>
  807acc:	3021883a 	mov	r16,r6
  807ad0:	003ffb06 	br	807ac0 <__alt_mem_onchip_mem+0xff787ac0>
  807ad4:	1000021e 	bne	r2,zero,807ae0 <_dtoa_r+0x11e0>
  807ad8:	4200004c 	andi	r8,r8,1
  807adc:	403e7d1e 	bne	r8,zero,8074d4 <__alt_mem_onchip_mem+0xff7874d4>
  807ae0:	01000c04 	movi	r4,48
  807ae4:	00000106 	br	807aec <_dtoa_r+0x11ec>
  807ae8:	102f883a 	mov	r23,r2
  807aec:	b8bfffc4 	addi	r2,r23,-1
  807af0:	10c00007 	ldb	r3,0(r2)
  807af4:	193ffc26 	beq	r3,r4,807ae8 <__alt_mem_onchip_mem+0xff787ae8>
  807af8:	003e8706 	br	807518 <__alt_mem_onchip_mem+0xff787518>
  807afc:	d8800517 	ldw	r2,20(sp)
  807b00:	00a3c83a 	sub	r17,zero,r2
  807b04:	8800a426 	beq	r17,zero,807d98 <_dtoa_r+0x1498>
  807b08:	888003cc 	andi	r2,r17,15
  807b0c:	100490fa 	slli	r2,r2,3
  807b10:	00c02074 	movhi	r3,129
  807b14:	18d03904 	addi	r3,r3,16612
  807b18:	1885883a 	add	r2,r3,r2
  807b1c:	11800017 	ldw	r6,0(r2)
  807b20:	11c00117 	ldw	r7,4(r2)
  807b24:	9009883a 	mov	r4,r18
  807b28:	980b883a 	mov	r5,r19
  807b2c:	8823d13a 	srai	r17,r17,4
  807b30:	080e7040 	call	80e704 <__muldf3>
  807b34:	d8800f15 	stw	r2,60(sp)
  807b38:	d8c01015 	stw	r3,64(sp)
  807b3c:	8800e826 	beq	r17,zero,807ee0 <_dtoa_r+0x15e0>
  807b40:	05002074 	movhi	r20,129
  807b44:	a5102f04 	addi	r20,r20,16572
  807b48:	04000084 	movi	r16,2
  807b4c:	8980004c 	andi	r6,r17,1
  807b50:	1009883a 	mov	r4,r2
  807b54:	8823d07a 	srai	r17,r17,1
  807b58:	180b883a 	mov	r5,r3
  807b5c:	30000426 	beq	r6,zero,807b70 <_dtoa_r+0x1270>
  807b60:	a1800017 	ldw	r6,0(r20)
  807b64:	a1c00117 	ldw	r7,4(r20)
  807b68:	84000044 	addi	r16,r16,1
  807b6c:	080e7040 	call	80e704 <__muldf3>
  807b70:	a5000204 	addi	r20,r20,8
  807b74:	883ff51e 	bne	r17,zero,807b4c <__alt_mem_onchip_mem+0xff787b4c>
  807b78:	d8800f15 	stw	r2,60(sp)
  807b7c:	d8c01015 	stw	r3,64(sp)
  807b80:	003c7606 	br	806d5c <__alt_mem_onchip_mem+0xff786d5c>
  807b84:	00c00c04 	movi	r3,48
  807b88:	10c00005 	stb	r3,0(r2)
  807b8c:	d8c00517 	ldw	r3,20(sp)
  807b90:	bd3fffc3 	ldbu	r20,-1(r23)
  807b94:	18c00044 	addi	r3,r3,1
  807b98:	d8c00515 	stw	r3,20(sp)
  807b9c:	003db906 	br	807284 <__alt_mem_onchip_mem+0xff787284>
  807ba0:	89400117 	ldw	r5,4(r17)
  807ba4:	e009883a 	mov	r4,fp
  807ba8:	08091e80 	call	8091e8 <_Balloc>
  807bac:	89800417 	ldw	r6,16(r17)
  807bb0:	89400304 	addi	r5,r17,12
  807bb4:	11000304 	addi	r4,r2,12
  807bb8:	31800084 	addi	r6,r6,2
  807bbc:	318d883a 	add	r6,r6,r6
  807bc0:	318d883a 	add	r6,r6,r6
  807bc4:	1027883a 	mov	r19,r2
  807bc8:	0808f440 	call	808f44 <memcpy>
  807bcc:	01800044 	movi	r6,1
  807bd0:	980b883a 	mov	r5,r19
  807bd4:	e009883a 	mov	r4,fp
  807bd8:	08099680 	call	809968 <__lshift>
  807bdc:	1029883a 	mov	r20,r2
  807be0:	003ecc06 	br	807714 <__alt_mem_onchip_mem+0xff787714>
  807be4:	00800e44 	movi	r2,57
  807be8:	90809026 	beq	r18,r2,807e2c <_dtoa_r+0x152c>
  807bec:	92000044 	addi	r8,r18,1
  807bf0:	003f1f06 	br	807870 <__alt_mem_onchip_mem+0xff787870>
  807bf4:	9011883a 	mov	r8,r18
  807bf8:	8825883a 	mov	r18,r17
  807bfc:	a023883a 	mov	r17,r20
  807c00:	003e2906 	br	8074a8 <__alt_mem_onchip_mem+0xff7874a8>
  807c04:	002b883a 	mov	r21,zero
  807c08:	0023883a 	mov	r17,zero
  807c0c:	003f5406 	br	807960 <__alt_mem_onchip_mem+0xff787960>
  807c10:	61bfffc4 	addi	r6,r12,-1
  807c14:	300490fa 	slli	r2,r6,3
  807c18:	00c02074 	movhi	r3,129
  807c1c:	18d03904 	addi	r3,r3,16612
  807c20:	1885883a 	add	r2,r3,r2
  807c24:	11000017 	ldw	r4,0(r2)
  807c28:	11400117 	ldw	r5,4(r2)
  807c2c:	d8800717 	ldw	r2,28(sp)
  807c30:	880f883a 	mov	r7,r17
  807c34:	d9801215 	stw	r6,72(sp)
  807c38:	800d883a 	mov	r6,r16
  807c3c:	db001615 	stw	r12,88(sp)
  807c40:	15c00044 	addi	r23,r2,1
  807c44:	080e7040 	call	80e704 <__muldf3>
  807c48:	d9401017 	ldw	r5,64(sp)
  807c4c:	d9000f17 	ldw	r4,60(sp)
  807c50:	d8c01515 	stw	r3,84(sp)
  807c54:	d8801415 	stw	r2,80(sp)
  807c58:	080f7180 	call	80f718 <__fixdfsi>
  807c5c:	1009883a 	mov	r4,r2
  807c60:	1021883a 	mov	r16,r2
  807c64:	080f7980 	call	80f798 <__floatsidf>
  807c68:	d9000f17 	ldw	r4,60(sp)
  807c6c:	d9401017 	ldw	r5,64(sp)
  807c70:	100d883a 	mov	r6,r2
  807c74:	180f883a 	mov	r7,r3
  807c78:	080ee1c0 	call	80ee1c <__subdf3>
  807c7c:	1829883a 	mov	r20,r3
  807c80:	d8c00717 	ldw	r3,28(sp)
  807c84:	84000c04 	addi	r16,r16,48
  807c88:	1023883a 	mov	r17,r2
  807c8c:	1c000005 	stb	r16,0(r3)
  807c90:	db001617 	ldw	r12,88(sp)
  807c94:	00800044 	movi	r2,1
  807c98:	60802226 	beq	r12,r2,807d24 <_dtoa_r+0x1424>
  807c9c:	d9c00717 	ldw	r7,28(sp)
  807ca0:	8805883a 	mov	r2,r17
  807ca4:	b82b883a 	mov	r21,r23
  807ca8:	3b19883a 	add	r12,r7,r12
  807cac:	6023883a 	mov	r17,r12
  807cb0:	a007883a 	mov	r3,r20
  807cb4:	dc800f15 	stw	r18,60(sp)
  807cb8:	000d883a 	mov	r6,zero
  807cbc:	01d00934 	movhi	r7,16420
  807cc0:	1009883a 	mov	r4,r2
  807cc4:	180b883a 	mov	r5,r3
  807cc8:	080e7040 	call	80e704 <__muldf3>
  807ccc:	180b883a 	mov	r5,r3
  807cd0:	1009883a 	mov	r4,r2
  807cd4:	1829883a 	mov	r20,r3
  807cd8:	1025883a 	mov	r18,r2
  807cdc:	080f7180 	call	80f718 <__fixdfsi>
  807ce0:	1009883a 	mov	r4,r2
  807ce4:	1021883a 	mov	r16,r2
  807ce8:	080f7980 	call	80f798 <__floatsidf>
  807cec:	100d883a 	mov	r6,r2
  807cf0:	180f883a 	mov	r7,r3
  807cf4:	9009883a 	mov	r4,r18
  807cf8:	a00b883a 	mov	r5,r20
  807cfc:	84000c04 	addi	r16,r16,48
  807d00:	080ee1c0 	call	80ee1c <__subdf3>
  807d04:	ad400044 	addi	r21,r21,1
  807d08:	ac3fffc5 	stb	r16,-1(r21)
  807d0c:	ac7fea1e 	bne	r21,r17,807cb8 <__alt_mem_onchip_mem+0xff787cb8>
  807d10:	1023883a 	mov	r17,r2
  807d14:	d8801217 	ldw	r2,72(sp)
  807d18:	dc800f17 	ldw	r18,60(sp)
  807d1c:	1829883a 	mov	r20,r3
  807d20:	b8af883a 	add	r23,r23,r2
  807d24:	d9001417 	ldw	r4,80(sp)
  807d28:	d9401517 	ldw	r5,84(sp)
  807d2c:	000d883a 	mov	r6,zero
  807d30:	01cff834 	movhi	r7,16352
  807d34:	080d3180 	call	80d318 <__adddf3>
  807d38:	880d883a 	mov	r6,r17
  807d3c:	a00f883a 	mov	r7,r20
  807d40:	1009883a 	mov	r4,r2
  807d44:	180b883a 	mov	r5,r3
  807d48:	080e6100 	call	80e610 <__ledf2>
  807d4c:	10003e0e 	bge	r2,zero,807e48 <_dtoa_r+0x1548>
  807d50:	d9001317 	ldw	r4,76(sp)
  807d54:	bd3fffc3 	ldbu	r20,-1(r23)
  807d58:	d9000515 	stw	r4,20(sp)
  807d5c:	003d3b06 	br	80724c <__alt_mem_onchip_mem+0xff78724c>
  807d60:	0027883a 	mov	r19,zero
  807d64:	003f1b06 	br	8079d4 <__alt_mem_onchip_mem+0xff7879d4>
  807d68:	d8800817 	ldw	r2,32(sp)
  807d6c:	11e9c83a 	sub	r20,r2,r7
  807d70:	0005883a 	mov	r2,zero
  807d74:	003d5406 	br	8072c8 <__alt_mem_onchip_mem+0xff7872c8>
  807d78:	00800044 	movi	r2,1
  807d7c:	003dc706 	br	80749c <__alt_mem_onchip_mem+0xff78749c>
  807d80:	d8c00217 	ldw	r3,8(sp)
  807d84:	00800d84 	movi	r2,54
  807d88:	dd400a17 	ldw	r21,40(sp)
  807d8c:	10c5c83a 	sub	r2,r2,r3
  807d90:	dd000817 	ldw	r20,32(sp)
  807d94:	003d4c06 	br	8072c8 <__alt_mem_onchip_mem+0xff7872c8>
  807d98:	dc800f15 	stw	r18,60(sp)
  807d9c:	dcc01015 	stw	r19,64(sp)
  807da0:	04000084 	movi	r16,2
  807da4:	003bed06 	br	806d5c <__alt_mem_onchip_mem+0xff786d5c>
  807da8:	d9000617 	ldw	r4,24(sp)
  807dac:	203f0d26 	beq	r4,zero,8079e4 <__alt_mem_onchip_mem+0xff7879e4>
  807db0:	d9800c17 	ldw	r6,48(sp)
  807db4:	01bcab0e 	bge	zero,r6,807064 <__alt_mem_onchip_mem+0xff787064>
  807db8:	d9401017 	ldw	r5,64(sp)
  807dbc:	d9000f17 	ldw	r4,60(sp)
  807dc0:	000d883a 	mov	r6,zero
  807dc4:	01d00934 	movhi	r7,16420
  807dc8:	080e7040 	call	80e704 <__muldf3>
  807dcc:	81000044 	addi	r4,r16,1
  807dd0:	d8800f15 	stw	r2,60(sp)
  807dd4:	d8c01015 	stw	r3,64(sp)
  807dd8:	080f7980 	call	80f798 <__floatsidf>
  807ddc:	d9800f17 	ldw	r6,60(sp)
  807de0:	d9c01017 	ldw	r7,64(sp)
  807de4:	1009883a 	mov	r4,r2
  807de8:	180b883a 	mov	r5,r3
  807dec:	080e7040 	call	80e704 <__muldf3>
  807df0:	01d00734 	movhi	r7,16412
  807df4:	000d883a 	mov	r6,zero
  807df8:	1009883a 	mov	r4,r2
  807dfc:	180b883a 	mov	r5,r3
  807e00:	080d3180 	call	80d318 <__adddf3>
  807e04:	d9c00517 	ldw	r7,20(sp)
  807e08:	047f3034 	movhi	r17,64704
  807e0c:	1021883a 	mov	r16,r2
  807e10:	39ffffc4 	addi	r7,r7,-1
  807e14:	d9c01315 	stw	r7,76(sp)
  807e18:	1c63883a 	add	r17,r3,r17
  807e1c:	db000c17 	ldw	r12,48(sp)
  807e20:	003bea06 	br	806dcc <__alt_mem_onchip_mem+0xff786dcc>
  807e24:	dc000915 	stw	r16,36(sp)
  807e28:	003e0e06 	br	807664 <__alt_mem_onchip_mem+0xff787664>
  807e2c:	01000e44 	movi	r4,57
  807e30:	8825883a 	mov	r18,r17
  807e34:	9dc00044 	addi	r23,r19,1
  807e38:	99000005 	stb	r4,0(r19)
  807e3c:	a023883a 	mov	r17,r20
  807e40:	dc000915 	stw	r16,36(sp)
  807e44:	003da406 	br	8074d8 <__alt_mem_onchip_mem+0xff7874d8>
  807e48:	d9801417 	ldw	r6,80(sp)
  807e4c:	d9c01517 	ldw	r7,84(sp)
  807e50:	0009883a 	mov	r4,zero
  807e54:	014ff834 	movhi	r5,16352
  807e58:	080ee1c0 	call	80ee1c <__subdf3>
  807e5c:	880d883a 	mov	r6,r17
  807e60:	a00f883a 	mov	r7,r20
  807e64:	1009883a 	mov	r4,r2
  807e68:	180b883a 	mov	r5,r3
  807e6c:	080e5340 	call	80e534 <__gedf2>
  807e70:	00bc7c0e 	bge	zero,r2,807064 <__alt_mem_onchip_mem+0xff787064>
  807e74:	01000c04 	movi	r4,48
  807e78:	00000106 	br	807e80 <_dtoa_r+0x1580>
  807e7c:	102f883a 	mov	r23,r2
  807e80:	b8bfffc4 	addi	r2,r23,-1
  807e84:	10c00007 	ldb	r3,0(r2)
  807e88:	193ffc26 	beq	r3,r4,807e7c <__alt_mem_onchip_mem+0xff787e7c>
  807e8c:	d9801317 	ldw	r6,76(sp)
  807e90:	d9800515 	stw	r6,20(sp)
  807e94:	003c4406 	br	806fa8 <__alt_mem_onchip_mem+0xff786fa8>
  807e98:	d9801317 	ldw	r6,76(sp)
  807e9c:	d9800515 	stw	r6,20(sp)
  807ea0:	003cea06 	br	80724c <__alt_mem_onchip_mem+0xff78724c>
  807ea4:	dd800f17 	ldw	r22,60(sp)
  807ea8:	dcc01017 	ldw	r19,64(sp)
  807eac:	dc801217 	ldw	r18,72(sp)
  807eb0:	003c6c06 	br	807064 <__alt_mem_onchip_mem+0xff787064>
  807eb4:	903e031e 	bne	r18,zero,8076c4 <__alt_mem_onchip_mem+0xff7876c4>
  807eb8:	003ebb06 	br	8079a8 <__alt_mem_onchip_mem+0xff7879a8>
  807ebc:	103e6c1e 	bne	r2,zero,807870 <__alt_mem_onchip_mem+0xff787870>
  807ec0:	4080004c 	andi	r2,r8,1
  807ec4:	103e6a26 	beq	r2,zero,807870 <__alt_mem_onchip_mem+0xff787870>
  807ec8:	003e6606 	br	807864 <__alt_mem_onchip_mem+0xff787864>
  807ecc:	d8c00317 	ldw	r3,12(sp)
  807ed0:	00800084 	movi	r2,2
  807ed4:	10c02916 	blt	r2,r3,807f7c <_dtoa_r+0x167c>
  807ed8:	d9000c17 	ldw	r4,48(sp)
  807edc:	003e8806 	br	807900 <__alt_mem_onchip_mem+0xff787900>
  807ee0:	04000084 	movi	r16,2
  807ee4:	003b9d06 	br	806d5c <__alt_mem_onchip_mem+0xff786d5c>
  807ee8:	d9001317 	ldw	r4,76(sp)
  807eec:	d9000515 	stw	r4,20(sp)
  807ef0:	003cd606 	br	80724c <__alt_mem_onchip_mem+0xff78724c>
  807ef4:	d8801317 	ldw	r2,76(sp)
  807ef8:	d8800515 	stw	r2,20(sp)
  807efc:	003c2a06 	br	806fa8 <__alt_mem_onchip_mem+0xff786fa8>
  807f00:	d9800317 	ldw	r6,12(sp)
  807f04:	00800084 	movi	r2,2
  807f08:	11801516 	blt	r2,r6,807f60 <_dtoa_r+0x1660>
  807f0c:	d9c00c17 	ldw	r7,48(sp)
  807f10:	d9c00615 	stw	r7,24(sp)
  807f14:	003df706 	br	8076f4 <__alt_mem_onchip_mem+0xff7876f4>
  807f18:	193d3926 	beq	r3,r4,807400 <__alt_mem_onchip_mem+0xff787400>
  807f1c:	00c00f04 	movi	r3,60
  807f20:	1885c83a 	sub	r2,r3,r2
  807f24:	003ddf06 	br	8076a4 <__alt_mem_onchip_mem+0xff7876a4>
  807f28:	e009883a 	mov	r4,fp
  807f2c:	e0001115 	stw	zero,68(fp)
  807f30:	000b883a 	mov	r5,zero
  807f34:	08091e80 	call	8091e8 <_Balloc>
  807f38:	d8800715 	stw	r2,28(sp)
  807f3c:	d8c00717 	ldw	r3,28(sp)
  807f40:	00bfffc4 	movi	r2,-1
  807f44:	01000044 	movi	r4,1
  807f48:	d8800c15 	stw	r2,48(sp)
  807f4c:	e0c01015 	stw	r3,64(fp)
  807f50:	d9000b15 	stw	r4,44(sp)
  807f54:	d8800615 	stw	r2,24(sp)
  807f58:	d8002215 	stw	zero,136(sp)
  807f5c:	003c4106 	br	807064 <__alt_mem_onchip_mem+0xff787064>
  807f60:	d8c00c17 	ldw	r3,48(sp)
  807f64:	d8c00615 	stw	r3,24(sp)
  807f68:	003e7006 	br	80792c <__alt_mem_onchip_mem+0xff78792c>
  807f6c:	04400044 	movi	r17,1
  807f70:	003b2006 	br	806bf4 <__alt_mem_onchip_mem+0xff786bf4>
  807f74:	000b883a 	mov	r5,zero
  807f78:	003b3d06 	br	806c70 <__alt_mem_onchip_mem+0xff786c70>
  807f7c:	d8800c17 	ldw	r2,48(sp)
  807f80:	d8800615 	stw	r2,24(sp)
  807f84:	003e6906 	br	80792c <__alt_mem_onchip_mem+0xff78792c>

00807f88 <_fclose_r>:
  807f88:	28003926 	beq	r5,zero,808070 <_fclose_r+0xe8>
  807f8c:	defffc04 	addi	sp,sp,-16
  807f90:	dc400115 	stw	r17,4(sp)
  807f94:	dc000015 	stw	r16,0(sp)
  807f98:	dfc00315 	stw	ra,12(sp)
  807f9c:	dc800215 	stw	r18,8(sp)
  807fa0:	2023883a 	mov	r17,r4
  807fa4:	2821883a 	mov	r16,r5
  807fa8:	20000226 	beq	r4,zero,807fb4 <_fclose_r+0x2c>
  807fac:	20800e17 	ldw	r2,56(r4)
  807fb0:	10002726 	beq	r2,zero,808050 <_fclose_r+0xc8>
  807fb4:	8080030f 	ldh	r2,12(r16)
  807fb8:	1000071e 	bne	r2,zero,807fd8 <_fclose_r+0x50>
  807fbc:	0005883a 	mov	r2,zero
  807fc0:	dfc00317 	ldw	ra,12(sp)
  807fc4:	dc800217 	ldw	r18,8(sp)
  807fc8:	dc400117 	ldw	r17,4(sp)
  807fcc:	dc000017 	ldw	r16,0(sp)
  807fd0:	dec00404 	addi	sp,sp,16
  807fd4:	f800283a 	ret
  807fd8:	800b883a 	mov	r5,r16
  807fdc:	8809883a 	mov	r4,r17
  807fe0:	080808c0 	call	80808c <__sflush_r>
  807fe4:	1025883a 	mov	r18,r2
  807fe8:	80800b17 	ldw	r2,44(r16)
  807fec:	10000426 	beq	r2,zero,808000 <_fclose_r+0x78>
  807ff0:	81400717 	ldw	r5,28(r16)
  807ff4:	8809883a 	mov	r4,r17
  807ff8:	103ee83a 	callr	r2
  807ffc:	10001616 	blt	r2,zero,808058 <_fclose_r+0xd0>
  808000:	8080030b 	ldhu	r2,12(r16)
  808004:	1080200c 	andi	r2,r2,128
  808008:	1000151e 	bne	r2,zero,808060 <_fclose_r+0xd8>
  80800c:	81400c17 	ldw	r5,48(r16)
  808010:	28000526 	beq	r5,zero,808028 <_fclose_r+0xa0>
  808014:	80801004 	addi	r2,r16,64
  808018:	28800226 	beq	r5,r2,808024 <_fclose_r+0x9c>
  80801c:	8809883a 	mov	r4,r17
  808020:	08085040 	call	808504 <_free_r>
  808024:	80000c15 	stw	zero,48(r16)
  808028:	81401117 	ldw	r5,68(r16)
  80802c:	28000326 	beq	r5,zero,80803c <_fclose_r+0xb4>
  808030:	8809883a 	mov	r4,r17
  808034:	08085040 	call	808504 <_free_r>
  808038:	80001115 	stw	zero,68(r16)
  80803c:	08024a40 	call	8024a4 <__sfp_lock_acquire>
  808040:	8000030d 	sth	zero,12(r16)
  808044:	08024a80 	call	8024a8 <__sfp_lock_release>
  808048:	9005883a 	mov	r2,r18
  80804c:	003fdc06 	br	807fc0 <__alt_mem_onchip_mem+0xff787fc0>
  808050:	08024940 	call	802494 <__sinit>
  808054:	003fd706 	br	807fb4 <__alt_mem_onchip_mem+0xff787fb4>
  808058:	04bfffc4 	movi	r18,-1
  80805c:	003fe806 	br	808000 <__alt_mem_onchip_mem+0xff788000>
  808060:	81400417 	ldw	r5,16(r16)
  808064:	8809883a 	mov	r4,r17
  808068:	08085040 	call	808504 <_free_r>
  80806c:	003fe706 	br	80800c <__alt_mem_onchip_mem+0xff78800c>
  808070:	0005883a 	mov	r2,zero
  808074:	f800283a 	ret

00808078 <fclose>:
  808078:	00802074 	movhi	r2,129
  80807c:	1097f204 	addi	r2,r2,24520
  808080:	200b883a 	mov	r5,r4
  808084:	11000017 	ldw	r4,0(r2)
  808088:	0807f881 	jmpi	807f88 <_fclose_r>

0080808c <__sflush_r>:
  80808c:	2880030b 	ldhu	r2,12(r5)
  808090:	defffb04 	addi	sp,sp,-20
  808094:	dcc00315 	stw	r19,12(sp)
  808098:	dc400115 	stw	r17,4(sp)
  80809c:	dfc00415 	stw	ra,16(sp)
  8080a0:	dc800215 	stw	r18,8(sp)
  8080a4:	dc000015 	stw	r16,0(sp)
  8080a8:	10c0020c 	andi	r3,r2,8
  8080ac:	2823883a 	mov	r17,r5
  8080b0:	2027883a 	mov	r19,r4
  8080b4:	1800311e 	bne	r3,zero,80817c <__sflush_r+0xf0>
  8080b8:	28c00117 	ldw	r3,4(r5)
  8080bc:	10820014 	ori	r2,r2,2048
  8080c0:	2880030d 	sth	r2,12(r5)
  8080c4:	00c04b0e 	bge	zero,r3,8081f4 <__sflush_r+0x168>
  8080c8:	8a000a17 	ldw	r8,40(r17)
  8080cc:	40002326 	beq	r8,zero,80815c <__sflush_r+0xd0>
  8080d0:	9c000017 	ldw	r16,0(r19)
  8080d4:	10c4000c 	andi	r3,r2,4096
  8080d8:	98000015 	stw	zero,0(r19)
  8080dc:	18004826 	beq	r3,zero,808200 <__sflush_r+0x174>
  8080e0:	89801417 	ldw	r6,80(r17)
  8080e4:	10c0010c 	andi	r3,r2,4
  8080e8:	18000626 	beq	r3,zero,808104 <__sflush_r+0x78>
  8080ec:	88c00117 	ldw	r3,4(r17)
  8080f0:	88800c17 	ldw	r2,48(r17)
  8080f4:	30cdc83a 	sub	r6,r6,r3
  8080f8:	10000226 	beq	r2,zero,808104 <__sflush_r+0x78>
  8080fc:	88800f17 	ldw	r2,60(r17)
  808100:	308dc83a 	sub	r6,r6,r2
  808104:	89400717 	ldw	r5,28(r17)
  808108:	000f883a 	mov	r7,zero
  80810c:	9809883a 	mov	r4,r19
  808110:	403ee83a 	callr	r8
  808114:	00ffffc4 	movi	r3,-1
  808118:	10c04426 	beq	r2,r3,80822c <__sflush_r+0x1a0>
  80811c:	88c0030b 	ldhu	r3,12(r17)
  808120:	89000417 	ldw	r4,16(r17)
  808124:	88000115 	stw	zero,4(r17)
  808128:	197dffcc 	andi	r5,r3,63487
  80812c:	8940030d 	sth	r5,12(r17)
  808130:	89000015 	stw	r4,0(r17)
  808134:	18c4000c 	andi	r3,r3,4096
  808138:	18002c1e 	bne	r3,zero,8081ec <__sflush_r+0x160>
  80813c:	89400c17 	ldw	r5,48(r17)
  808140:	9c000015 	stw	r16,0(r19)
  808144:	28000526 	beq	r5,zero,80815c <__sflush_r+0xd0>
  808148:	88801004 	addi	r2,r17,64
  80814c:	28800226 	beq	r5,r2,808158 <__sflush_r+0xcc>
  808150:	9809883a 	mov	r4,r19
  808154:	08085040 	call	808504 <_free_r>
  808158:	88000c15 	stw	zero,48(r17)
  80815c:	0005883a 	mov	r2,zero
  808160:	dfc00417 	ldw	ra,16(sp)
  808164:	dcc00317 	ldw	r19,12(sp)
  808168:	dc800217 	ldw	r18,8(sp)
  80816c:	dc400117 	ldw	r17,4(sp)
  808170:	dc000017 	ldw	r16,0(sp)
  808174:	dec00504 	addi	sp,sp,20
  808178:	f800283a 	ret
  80817c:	2c800417 	ldw	r18,16(r5)
  808180:	903ff626 	beq	r18,zero,80815c <__alt_mem_onchip_mem+0xff78815c>
  808184:	2c000017 	ldw	r16,0(r5)
  808188:	108000cc 	andi	r2,r2,3
  80818c:	2c800015 	stw	r18,0(r5)
  808190:	84a1c83a 	sub	r16,r16,r18
  808194:	1000131e 	bne	r2,zero,8081e4 <__sflush_r+0x158>
  808198:	28800517 	ldw	r2,20(r5)
  80819c:	88800215 	stw	r2,8(r17)
  8081a0:	04000316 	blt	zero,r16,8081b0 <__sflush_r+0x124>
  8081a4:	003fed06 	br	80815c <__alt_mem_onchip_mem+0xff78815c>
  8081a8:	90a5883a 	add	r18,r18,r2
  8081ac:	043feb0e 	bge	zero,r16,80815c <__alt_mem_onchip_mem+0xff78815c>
  8081b0:	88800917 	ldw	r2,36(r17)
  8081b4:	89400717 	ldw	r5,28(r17)
  8081b8:	800f883a 	mov	r7,r16
  8081bc:	900d883a 	mov	r6,r18
  8081c0:	9809883a 	mov	r4,r19
  8081c4:	103ee83a 	callr	r2
  8081c8:	80a1c83a 	sub	r16,r16,r2
  8081cc:	00bff616 	blt	zero,r2,8081a8 <__alt_mem_onchip_mem+0xff7881a8>
  8081d0:	88c0030b 	ldhu	r3,12(r17)
  8081d4:	00bfffc4 	movi	r2,-1
  8081d8:	18c01014 	ori	r3,r3,64
  8081dc:	88c0030d 	sth	r3,12(r17)
  8081e0:	003fdf06 	br	808160 <__alt_mem_onchip_mem+0xff788160>
  8081e4:	0005883a 	mov	r2,zero
  8081e8:	003fec06 	br	80819c <__alt_mem_onchip_mem+0xff78819c>
  8081ec:	88801415 	stw	r2,80(r17)
  8081f0:	003fd206 	br	80813c <__alt_mem_onchip_mem+0xff78813c>
  8081f4:	28c00f17 	ldw	r3,60(r5)
  8081f8:	00ffb316 	blt	zero,r3,8080c8 <__alt_mem_onchip_mem+0xff7880c8>
  8081fc:	003fd706 	br	80815c <__alt_mem_onchip_mem+0xff78815c>
  808200:	89400717 	ldw	r5,28(r17)
  808204:	000d883a 	mov	r6,zero
  808208:	01c00044 	movi	r7,1
  80820c:	9809883a 	mov	r4,r19
  808210:	403ee83a 	callr	r8
  808214:	100d883a 	mov	r6,r2
  808218:	00bfffc4 	movi	r2,-1
  80821c:	30801426 	beq	r6,r2,808270 <__sflush_r+0x1e4>
  808220:	8880030b 	ldhu	r2,12(r17)
  808224:	8a000a17 	ldw	r8,40(r17)
  808228:	003fae06 	br	8080e4 <__alt_mem_onchip_mem+0xff7880e4>
  80822c:	98c00017 	ldw	r3,0(r19)
  808230:	183fba26 	beq	r3,zero,80811c <__alt_mem_onchip_mem+0xff78811c>
  808234:	01000744 	movi	r4,29
  808238:	19000626 	beq	r3,r4,808254 <__sflush_r+0x1c8>
  80823c:	01000584 	movi	r4,22
  808240:	19000426 	beq	r3,r4,808254 <__sflush_r+0x1c8>
  808244:	88c0030b 	ldhu	r3,12(r17)
  808248:	18c01014 	ori	r3,r3,64
  80824c:	88c0030d 	sth	r3,12(r17)
  808250:	003fc306 	br	808160 <__alt_mem_onchip_mem+0xff788160>
  808254:	8880030b 	ldhu	r2,12(r17)
  808258:	88c00417 	ldw	r3,16(r17)
  80825c:	88000115 	stw	zero,4(r17)
  808260:	10bdffcc 	andi	r2,r2,63487
  808264:	8880030d 	sth	r2,12(r17)
  808268:	88c00015 	stw	r3,0(r17)
  80826c:	003fb306 	br	80813c <__alt_mem_onchip_mem+0xff78813c>
  808270:	98800017 	ldw	r2,0(r19)
  808274:	103fea26 	beq	r2,zero,808220 <__alt_mem_onchip_mem+0xff788220>
  808278:	00c00744 	movi	r3,29
  80827c:	10c00226 	beq	r2,r3,808288 <__sflush_r+0x1fc>
  808280:	00c00584 	movi	r3,22
  808284:	10c0031e 	bne	r2,r3,808294 <__sflush_r+0x208>
  808288:	9c000015 	stw	r16,0(r19)
  80828c:	0005883a 	mov	r2,zero
  808290:	003fb306 	br	808160 <__alt_mem_onchip_mem+0xff788160>
  808294:	88c0030b 	ldhu	r3,12(r17)
  808298:	3005883a 	mov	r2,r6
  80829c:	18c01014 	ori	r3,r3,64
  8082a0:	88c0030d 	sth	r3,12(r17)
  8082a4:	003fae06 	br	808160 <__alt_mem_onchip_mem+0xff788160>

008082a8 <_fflush_r>:
  8082a8:	defffd04 	addi	sp,sp,-12
  8082ac:	dc000115 	stw	r16,4(sp)
  8082b0:	dfc00215 	stw	ra,8(sp)
  8082b4:	2021883a 	mov	r16,r4
  8082b8:	20000226 	beq	r4,zero,8082c4 <_fflush_r+0x1c>
  8082bc:	20800e17 	ldw	r2,56(r4)
  8082c0:	10000c26 	beq	r2,zero,8082f4 <_fflush_r+0x4c>
  8082c4:	2880030f 	ldh	r2,12(r5)
  8082c8:	1000051e 	bne	r2,zero,8082e0 <_fflush_r+0x38>
  8082cc:	0005883a 	mov	r2,zero
  8082d0:	dfc00217 	ldw	ra,8(sp)
  8082d4:	dc000117 	ldw	r16,4(sp)
  8082d8:	dec00304 	addi	sp,sp,12
  8082dc:	f800283a 	ret
  8082e0:	8009883a 	mov	r4,r16
  8082e4:	dfc00217 	ldw	ra,8(sp)
  8082e8:	dc000117 	ldw	r16,4(sp)
  8082ec:	dec00304 	addi	sp,sp,12
  8082f0:	080808c1 	jmpi	80808c <__sflush_r>
  8082f4:	d9400015 	stw	r5,0(sp)
  8082f8:	08024940 	call	802494 <__sinit>
  8082fc:	d9400017 	ldw	r5,0(sp)
  808300:	003ff006 	br	8082c4 <__alt_mem_onchip_mem+0xff7882c4>

00808304 <fflush>:
  808304:	20000526 	beq	r4,zero,80831c <fflush+0x18>
  808308:	00802074 	movhi	r2,129
  80830c:	1097f204 	addi	r2,r2,24520
  808310:	200b883a 	mov	r5,r4
  808314:	11000017 	ldw	r4,0(r2)
  808318:	08082a81 	jmpi	8082a8 <_fflush_r>
  80831c:	00802074 	movhi	r2,129
  808320:	1097f104 	addi	r2,r2,24516
  808324:	11000017 	ldw	r4,0(r2)
  808328:	01402074 	movhi	r5,129
  80832c:	2960aa04 	addi	r5,r5,-32088
  808330:	0802bdc1 	jmpi	802bdc <_fwalk_reent>

00808334 <__sflags>:
  808334:	28800007 	ldb	r2,0(r5)
  808338:	00c01c84 	movi	r3,114
  80833c:	10c02426 	beq	r2,r3,8083d0 <__sflags+0x9c>
  808340:	00c01dc4 	movi	r3,119
  808344:	10c01e26 	beq	r2,r3,8083c0 <__sflags+0x8c>
  808348:	00c01844 	movi	r3,97
  80834c:	10c00426 	beq	r2,r3,808360 <__sflags+0x2c>
  808350:	00800584 	movi	r2,22
  808354:	20800015 	stw	r2,0(r4)
  808358:	0005883a 	mov	r2,zero
  80835c:	f800283a 	ret
  808360:	02c08204 	movi	r11,520
  808364:	01000044 	movi	r4,1
  808368:	00804204 	movi	r2,264
  80836c:	01c00ac4 	movi	r7,43
  808370:	02bff8c4 	movi	r10,-29
  808374:	027fff04 	movi	r9,-4
  808378:	02001e04 	movi	r8,120
  80837c:	29400044 	addi	r5,r5,1
  808380:	28c00007 	ldb	r3,0(r5)
  808384:	18000626 	beq	r3,zero,8083a0 <__sflags+0x6c>
  808388:	19c00826 	beq	r3,r7,8083ac <__sflags+0x78>
  80838c:	1a3ffb1e 	bne	r3,r8,80837c <__alt_mem_onchip_mem+0xff78837c>
  808390:	29400044 	addi	r5,r5,1
  808394:	28c00007 	ldb	r3,0(r5)
  808398:	21020014 	ori	r4,r4,2048
  80839c:	183ffa1e 	bne	r3,zero,808388 <__alt_mem_onchip_mem+0xff788388>
  8083a0:	22c8b03a 	or	r4,r4,r11
  8083a4:	31000015 	stw	r4,0(r6)
  8083a8:	f800283a 	ret
  8083ac:	1284703a 	and	r2,r2,r10
  8083b0:	2248703a 	and	r4,r4,r9
  8083b4:	10800414 	ori	r2,r2,16
  8083b8:	21000094 	ori	r4,r4,2
  8083bc:	003fef06 	br	80837c <__alt_mem_onchip_mem+0xff78837c>
  8083c0:	02c18004 	movi	r11,1536
  8083c4:	01000044 	movi	r4,1
  8083c8:	00800204 	movi	r2,8
  8083cc:	003fe706 	br	80836c <__alt_mem_onchip_mem+0xff78836c>
  8083d0:	0017883a 	mov	r11,zero
  8083d4:	0009883a 	mov	r4,zero
  8083d8:	00800104 	movi	r2,4
  8083dc:	003fe306 	br	80836c <__alt_mem_onchip_mem+0xff78836c>

008083e0 <_malloc_trim_r>:
  8083e0:	defffb04 	addi	sp,sp,-20
  8083e4:	dcc00315 	stw	r19,12(sp)
  8083e8:	04c02074 	movhi	r19,129
  8083ec:	dc800215 	stw	r18,8(sp)
  8083f0:	dc400115 	stw	r17,4(sp)
  8083f4:	dc000015 	stw	r16,0(sp)
  8083f8:	dfc00415 	stw	ra,16(sp)
  8083fc:	2821883a 	mov	r16,r5
  808400:	9cd1cd04 	addi	r19,r19,18228
  808404:	2025883a 	mov	r18,r4
  808408:	08101a80 	call	8101a8 <__malloc_lock>
  80840c:	98800217 	ldw	r2,8(r19)
  808410:	14400117 	ldw	r17,4(r2)
  808414:	00bfff04 	movi	r2,-4
  808418:	88a2703a 	and	r17,r17,r2
  80841c:	8c21c83a 	sub	r16,r17,r16
  808420:	8403fbc4 	addi	r16,r16,4079
  808424:	8020d33a 	srli	r16,r16,12
  808428:	0083ffc4 	movi	r2,4095
  80842c:	843fffc4 	addi	r16,r16,-1
  808430:	8020933a 	slli	r16,r16,12
  808434:	1400060e 	bge	r2,r16,808450 <_malloc_trim_r+0x70>
  808438:	000b883a 	mov	r5,zero
  80843c:	9009883a 	mov	r4,r18
  808440:	0803cf00 	call	803cf0 <_sbrk_r>
  808444:	98c00217 	ldw	r3,8(r19)
  808448:	1c47883a 	add	r3,r3,r17
  80844c:	10c00a26 	beq	r2,r3,808478 <_malloc_trim_r+0x98>
  808450:	9009883a 	mov	r4,r18
  808454:	08101cc0 	call	8101cc <__malloc_unlock>
  808458:	0005883a 	mov	r2,zero
  80845c:	dfc00417 	ldw	ra,16(sp)
  808460:	dcc00317 	ldw	r19,12(sp)
  808464:	dc800217 	ldw	r18,8(sp)
  808468:	dc400117 	ldw	r17,4(sp)
  80846c:	dc000017 	ldw	r16,0(sp)
  808470:	dec00504 	addi	sp,sp,20
  808474:	f800283a 	ret
  808478:	040bc83a 	sub	r5,zero,r16
  80847c:	9009883a 	mov	r4,r18
  808480:	0803cf00 	call	803cf0 <_sbrk_r>
  808484:	00ffffc4 	movi	r3,-1
  808488:	10c00d26 	beq	r2,r3,8084c0 <_malloc_trim_r+0xe0>
  80848c:	00c02074 	movhi	r3,129
  808490:	18df6104 	addi	r3,r3,32132
  808494:	18800017 	ldw	r2,0(r3)
  808498:	99000217 	ldw	r4,8(r19)
  80849c:	8c23c83a 	sub	r17,r17,r16
  8084a0:	8c400054 	ori	r17,r17,1
  8084a4:	1421c83a 	sub	r16,r2,r16
  8084a8:	24400115 	stw	r17,4(r4)
  8084ac:	9009883a 	mov	r4,r18
  8084b0:	1c000015 	stw	r16,0(r3)
  8084b4:	08101cc0 	call	8101cc <__malloc_unlock>
  8084b8:	00800044 	movi	r2,1
  8084bc:	003fe706 	br	80845c <__alt_mem_onchip_mem+0xff78845c>
  8084c0:	000b883a 	mov	r5,zero
  8084c4:	9009883a 	mov	r4,r18
  8084c8:	0803cf00 	call	803cf0 <_sbrk_r>
  8084cc:	99000217 	ldw	r4,8(r19)
  8084d0:	014003c4 	movi	r5,15
  8084d4:	1107c83a 	sub	r3,r2,r4
  8084d8:	28ffdd0e 	bge	r5,r3,808450 <__alt_mem_onchip_mem+0xff788450>
  8084dc:	01402074 	movhi	r5,129
  8084e0:	2957f304 	addi	r5,r5,24524
  8084e4:	29400017 	ldw	r5,0(r5)
  8084e8:	18c00054 	ori	r3,r3,1
  8084ec:	20c00115 	stw	r3,4(r4)
  8084f0:	00c02074 	movhi	r3,129
  8084f4:	1145c83a 	sub	r2,r2,r5
  8084f8:	18df6104 	addi	r3,r3,32132
  8084fc:	18800015 	stw	r2,0(r3)
  808500:	003fd306 	br	808450 <__alt_mem_onchip_mem+0xff788450>

00808504 <_free_r>:
  808504:	28004126 	beq	r5,zero,80860c <_free_r+0x108>
  808508:	defffd04 	addi	sp,sp,-12
  80850c:	dc400115 	stw	r17,4(sp)
  808510:	dc000015 	stw	r16,0(sp)
  808514:	2023883a 	mov	r17,r4
  808518:	2821883a 	mov	r16,r5
  80851c:	dfc00215 	stw	ra,8(sp)
  808520:	08101a80 	call	8101a8 <__malloc_lock>
  808524:	81ffff17 	ldw	r7,-4(r16)
  808528:	00bfff84 	movi	r2,-2
  80852c:	01002074 	movhi	r4,129
  808530:	81bffe04 	addi	r6,r16,-8
  808534:	3884703a 	and	r2,r7,r2
  808538:	2111cd04 	addi	r4,r4,18228
  80853c:	308b883a 	add	r5,r6,r2
  808540:	2a400117 	ldw	r9,4(r5)
  808544:	22000217 	ldw	r8,8(r4)
  808548:	00ffff04 	movi	r3,-4
  80854c:	48c6703a 	and	r3,r9,r3
  808550:	2a005726 	beq	r5,r8,8086b0 <_free_r+0x1ac>
  808554:	28c00115 	stw	r3,4(r5)
  808558:	39c0004c 	andi	r7,r7,1
  80855c:	3800091e 	bne	r7,zero,808584 <_free_r+0x80>
  808560:	823ffe17 	ldw	r8,-8(r16)
  808564:	22400204 	addi	r9,r4,8
  808568:	320dc83a 	sub	r6,r6,r8
  80856c:	31c00217 	ldw	r7,8(r6)
  808570:	1205883a 	add	r2,r2,r8
  808574:	3a406526 	beq	r7,r9,80870c <_free_r+0x208>
  808578:	32000317 	ldw	r8,12(r6)
  80857c:	3a000315 	stw	r8,12(r7)
  808580:	41c00215 	stw	r7,8(r8)
  808584:	28cf883a 	add	r7,r5,r3
  808588:	39c00117 	ldw	r7,4(r7)
  80858c:	39c0004c 	andi	r7,r7,1
  808590:	38003a26 	beq	r7,zero,80867c <_free_r+0x178>
  808594:	10c00054 	ori	r3,r2,1
  808598:	30c00115 	stw	r3,4(r6)
  80859c:	3087883a 	add	r3,r6,r2
  8085a0:	18800015 	stw	r2,0(r3)
  8085a4:	00c07fc4 	movi	r3,511
  8085a8:	18801936 	bltu	r3,r2,808610 <_free_r+0x10c>
  8085ac:	1004d0fa 	srli	r2,r2,3
  8085b0:	01c00044 	movi	r7,1
  8085b4:	21400117 	ldw	r5,4(r4)
  8085b8:	10c00044 	addi	r3,r2,1
  8085bc:	18c7883a 	add	r3,r3,r3
  8085c0:	1005d0ba 	srai	r2,r2,2
  8085c4:	18c7883a 	add	r3,r3,r3
  8085c8:	18c7883a 	add	r3,r3,r3
  8085cc:	1907883a 	add	r3,r3,r4
  8085d0:	3884983a 	sll	r2,r7,r2
  8085d4:	19c00017 	ldw	r7,0(r3)
  8085d8:	1a3ffe04 	addi	r8,r3,-8
  8085dc:	1144b03a 	or	r2,r2,r5
  8085e0:	32000315 	stw	r8,12(r6)
  8085e4:	31c00215 	stw	r7,8(r6)
  8085e8:	20800115 	stw	r2,4(r4)
  8085ec:	19800015 	stw	r6,0(r3)
  8085f0:	39800315 	stw	r6,12(r7)
  8085f4:	8809883a 	mov	r4,r17
  8085f8:	dfc00217 	ldw	ra,8(sp)
  8085fc:	dc400117 	ldw	r17,4(sp)
  808600:	dc000017 	ldw	r16,0(sp)
  808604:	dec00304 	addi	sp,sp,12
  808608:	08101cc1 	jmpi	8101cc <__malloc_unlock>
  80860c:	f800283a 	ret
  808610:	100ad27a 	srli	r5,r2,9
  808614:	00c00104 	movi	r3,4
  808618:	19404a36 	bltu	r3,r5,808744 <_free_r+0x240>
  80861c:	100ad1ba 	srli	r5,r2,6
  808620:	28c00e44 	addi	r3,r5,57
  808624:	18c7883a 	add	r3,r3,r3
  808628:	29400e04 	addi	r5,r5,56
  80862c:	18c7883a 	add	r3,r3,r3
  808630:	18c7883a 	add	r3,r3,r3
  808634:	1909883a 	add	r4,r3,r4
  808638:	20c00017 	ldw	r3,0(r4)
  80863c:	01c02074 	movhi	r7,129
  808640:	213ffe04 	addi	r4,r4,-8
  808644:	39d1cd04 	addi	r7,r7,18228
  808648:	20c04426 	beq	r4,r3,80875c <_free_r+0x258>
  80864c:	01ffff04 	movi	r7,-4
  808650:	19400117 	ldw	r5,4(r3)
  808654:	29ca703a 	and	r5,r5,r7
  808658:	1140022e 	bgeu	r2,r5,808664 <_free_r+0x160>
  80865c:	18c00217 	ldw	r3,8(r3)
  808660:	20fffb1e 	bne	r4,r3,808650 <__alt_mem_onchip_mem+0xff788650>
  808664:	19000317 	ldw	r4,12(r3)
  808668:	31000315 	stw	r4,12(r6)
  80866c:	30c00215 	stw	r3,8(r6)
  808670:	21800215 	stw	r6,8(r4)
  808674:	19800315 	stw	r6,12(r3)
  808678:	003fde06 	br	8085f4 <__alt_mem_onchip_mem+0xff7885f4>
  80867c:	29c00217 	ldw	r7,8(r5)
  808680:	10c5883a 	add	r2,r2,r3
  808684:	00c02074 	movhi	r3,129
  808688:	18d1cf04 	addi	r3,r3,18236
  80868c:	38c03b26 	beq	r7,r3,80877c <_free_r+0x278>
  808690:	2a000317 	ldw	r8,12(r5)
  808694:	11400054 	ori	r5,r2,1
  808698:	3087883a 	add	r3,r6,r2
  80869c:	3a000315 	stw	r8,12(r7)
  8086a0:	41c00215 	stw	r7,8(r8)
  8086a4:	31400115 	stw	r5,4(r6)
  8086a8:	18800015 	stw	r2,0(r3)
  8086ac:	003fbd06 	br	8085a4 <__alt_mem_onchip_mem+0xff7885a4>
  8086b0:	39c0004c 	andi	r7,r7,1
  8086b4:	10c5883a 	add	r2,r2,r3
  8086b8:	3800071e 	bne	r7,zero,8086d8 <_free_r+0x1d4>
  8086bc:	81fffe17 	ldw	r7,-8(r16)
  8086c0:	31cdc83a 	sub	r6,r6,r7
  8086c4:	30c00317 	ldw	r3,12(r6)
  8086c8:	31400217 	ldw	r5,8(r6)
  8086cc:	11c5883a 	add	r2,r2,r7
  8086d0:	28c00315 	stw	r3,12(r5)
  8086d4:	19400215 	stw	r5,8(r3)
  8086d8:	10c00054 	ori	r3,r2,1
  8086dc:	30c00115 	stw	r3,4(r6)
  8086e0:	00c02074 	movhi	r3,129
  8086e4:	18d7f404 	addi	r3,r3,24528
  8086e8:	18c00017 	ldw	r3,0(r3)
  8086ec:	21800215 	stw	r6,8(r4)
  8086f0:	10ffc036 	bltu	r2,r3,8085f4 <__alt_mem_onchip_mem+0xff7885f4>
  8086f4:	00802074 	movhi	r2,129
  8086f8:	109f5604 	addi	r2,r2,32088
  8086fc:	11400017 	ldw	r5,0(r2)
  808700:	8809883a 	mov	r4,r17
  808704:	08083e00 	call	8083e0 <_malloc_trim_r>
  808708:	003fba06 	br	8085f4 <__alt_mem_onchip_mem+0xff7885f4>
  80870c:	28c9883a 	add	r4,r5,r3
  808710:	21000117 	ldw	r4,4(r4)
  808714:	2100004c 	andi	r4,r4,1
  808718:	2000391e 	bne	r4,zero,808800 <_free_r+0x2fc>
  80871c:	29c00217 	ldw	r7,8(r5)
  808720:	29000317 	ldw	r4,12(r5)
  808724:	1885883a 	add	r2,r3,r2
  808728:	10c00054 	ori	r3,r2,1
  80872c:	39000315 	stw	r4,12(r7)
  808730:	21c00215 	stw	r7,8(r4)
  808734:	30c00115 	stw	r3,4(r6)
  808738:	308d883a 	add	r6,r6,r2
  80873c:	30800015 	stw	r2,0(r6)
  808740:	003fac06 	br	8085f4 <__alt_mem_onchip_mem+0xff7885f4>
  808744:	00c00504 	movi	r3,20
  808748:	19401536 	bltu	r3,r5,8087a0 <_free_r+0x29c>
  80874c:	28c01704 	addi	r3,r5,92
  808750:	18c7883a 	add	r3,r3,r3
  808754:	294016c4 	addi	r5,r5,91
  808758:	003fb406 	br	80862c <__alt_mem_onchip_mem+0xff78862c>
  80875c:	280bd0ba 	srai	r5,r5,2
  808760:	00c00044 	movi	r3,1
  808764:	38800117 	ldw	r2,4(r7)
  808768:	194a983a 	sll	r5,r3,r5
  80876c:	2007883a 	mov	r3,r4
  808770:	2884b03a 	or	r2,r5,r2
  808774:	38800115 	stw	r2,4(r7)
  808778:	003fbb06 	br	808668 <__alt_mem_onchip_mem+0xff788668>
  80877c:	21800515 	stw	r6,20(r4)
  808780:	21800415 	stw	r6,16(r4)
  808784:	10c00054 	ori	r3,r2,1
  808788:	31c00315 	stw	r7,12(r6)
  80878c:	31c00215 	stw	r7,8(r6)
  808790:	30c00115 	stw	r3,4(r6)
  808794:	308d883a 	add	r6,r6,r2
  808798:	30800015 	stw	r2,0(r6)
  80879c:	003f9506 	br	8085f4 <__alt_mem_onchip_mem+0xff7885f4>
  8087a0:	00c01504 	movi	r3,84
  8087a4:	19400536 	bltu	r3,r5,8087bc <_free_r+0x2b8>
  8087a8:	100ad33a 	srli	r5,r2,12
  8087ac:	28c01bc4 	addi	r3,r5,111
  8087b0:	18c7883a 	add	r3,r3,r3
  8087b4:	29401b84 	addi	r5,r5,110
  8087b8:	003f9c06 	br	80862c <__alt_mem_onchip_mem+0xff78862c>
  8087bc:	00c05504 	movi	r3,340
  8087c0:	19400536 	bltu	r3,r5,8087d8 <_free_r+0x2d4>
  8087c4:	100ad3fa 	srli	r5,r2,15
  8087c8:	28c01e04 	addi	r3,r5,120
  8087cc:	18c7883a 	add	r3,r3,r3
  8087d0:	29401dc4 	addi	r5,r5,119
  8087d4:	003f9506 	br	80862c <__alt_mem_onchip_mem+0xff78862c>
  8087d8:	00c15504 	movi	r3,1364
  8087dc:	19400536 	bltu	r3,r5,8087f4 <_free_r+0x2f0>
  8087e0:	100ad4ba 	srli	r5,r2,18
  8087e4:	28c01f44 	addi	r3,r5,125
  8087e8:	18c7883a 	add	r3,r3,r3
  8087ec:	29401f04 	addi	r5,r5,124
  8087f0:	003f8e06 	br	80862c <__alt_mem_onchip_mem+0xff78862c>
  8087f4:	00c03f84 	movi	r3,254
  8087f8:	01401f84 	movi	r5,126
  8087fc:	003f8b06 	br	80862c <__alt_mem_onchip_mem+0xff78862c>
  808800:	10c00054 	ori	r3,r2,1
  808804:	30c00115 	stw	r3,4(r6)
  808808:	308d883a 	add	r6,r6,r2
  80880c:	30800015 	stw	r2,0(r6)
  808810:	003f7806 	br	8085f4 <__alt_mem_onchip_mem+0xff7885f4>

00808814 <__sfvwrite_r>:
  808814:	30800217 	ldw	r2,8(r6)
  808818:	10006726 	beq	r2,zero,8089b8 <__sfvwrite_r+0x1a4>
  80881c:	28c0030b 	ldhu	r3,12(r5)
  808820:	defff404 	addi	sp,sp,-48
  808824:	dd400715 	stw	r21,28(sp)
  808828:	dd000615 	stw	r20,24(sp)
  80882c:	dc000215 	stw	r16,8(sp)
  808830:	dfc00b15 	stw	ra,44(sp)
  808834:	df000a15 	stw	fp,40(sp)
  808838:	ddc00915 	stw	r23,36(sp)
  80883c:	dd800815 	stw	r22,32(sp)
  808840:	dcc00515 	stw	r19,20(sp)
  808844:	dc800415 	stw	r18,16(sp)
  808848:	dc400315 	stw	r17,12(sp)
  80884c:	1880020c 	andi	r2,r3,8
  808850:	2821883a 	mov	r16,r5
  808854:	202b883a 	mov	r21,r4
  808858:	3029883a 	mov	r20,r6
  80885c:	10002726 	beq	r2,zero,8088fc <__sfvwrite_r+0xe8>
  808860:	28800417 	ldw	r2,16(r5)
  808864:	10002526 	beq	r2,zero,8088fc <__sfvwrite_r+0xe8>
  808868:	1880008c 	andi	r2,r3,2
  80886c:	a4400017 	ldw	r17,0(r20)
  808870:	10002a26 	beq	r2,zero,80891c <__sfvwrite_r+0x108>
  808874:	05a00034 	movhi	r22,32768
  808878:	0027883a 	mov	r19,zero
  80887c:	0025883a 	mov	r18,zero
  808880:	b5bf0004 	addi	r22,r22,-1024
  808884:	980d883a 	mov	r6,r19
  808888:	a809883a 	mov	r4,r21
  80888c:	90004626 	beq	r18,zero,8089a8 <__sfvwrite_r+0x194>
  808890:	900f883a 	mov	r7,r18
  808894:	b480022e 	bgeu	r22,r18,8088a0 <__sfvwrite_r+0x8c>
  808898:	01e00034 	movhi	r7,32768
  80889c:	39ff0004 	addi	r7,r7,-1024
  8088a0:	80800917 	ldw	r2,36(r16)
  8088a4:	81400717 	ldw	r5,28(r16)
  8088a8:	103ee83a 	callr	r2
  8088ac:	0080570e 	bge	zero,r2,808a0c <__sfvwrite_r+0x1f8>
  8088b0:	a0c00217 	ldw	r3,8(r20)
  8088b4:	98a7883a 	add	r19,r19,r2
  8088b8:	90a5c83a 	sub	r18,r18,r2
  8088bc:	1885c83a 	sub	r2,r3,r2
  8088c0:	a0800215 	stw	r2,8(r20)
  8088c4:	103fef1e 	bne	r2,zero,808884 <__alt_mem_onchip_mem+0xff788884>
  8088c8:	0005883a 	mov	r2,zero
  8088cc:	dfc00b17 	ldw	ra,44(sp)
  8088d0:	df000a17 	ldw	fp,40(sp)
  8088d4:	ddc00917 	ldw	r23,36(sp)
  8088d8:	dd800817 	ldw	r22,32(sp)
  8088dc:	dd400717 	ldw	r21,28(sp)
  8088e0:	dd000617 	ldw	r20,24(sp)
  8088e4:	dcc00517 	ldw	r19,20(sp)
  8088e8:	dc800417 	ldw	r18,16(sp)
  8088ec:	dc400317 	ldw	r17,12(sp)
  8088f0:	dc000217 	ldw	r16,8(sp)
  8088f4:	dec00c04 	addi	sp,sp,48
  8088f8:	f800283a 	ret
  8088fc:	800b883a 	mov	r5,r16
  808900:	a809883a 	mov	r4,r21
  808904:	08065580 	call	806558 <__swsetup_r>
  808908:	1000eb1e 	bne	r2,zero,808cb8 <__sfvwrite_r+0x4a4>
  80890c:	80c0030b 	ldhu	r3,12(r16)
  808910:	a4400017 	ldw	r17,0(r20)
  808914:	1880008c 	andi	r2,r3,2
  808918:	103fd61e 	bne	r2,zero,808874 <__alt_mem_onchip_mem+0xff788874>
  80891c:	1880004c 	andi	r2,r3,1
  808920:	10003f1e 	bne	r2,zero,808a20 <__sfvwrite_r+0x20c>
  808924:	0039883a 	mov	fp,zero
  808928:	0025883a 	mov	r18,zero
  80892c:	90001a26 	beq	r18,zero,808998 <__sfvwrite_r+0x184>
  808930:	1880800c 	andi	r2,r3,512
  808934:	84c00217 	ldw	r19,8(r16)
  808938:	10002126 	beq	r2,zero,8089c0 <__sfvwrite_r+0x1ac>
  80893c:	982f883a 	mov	r23,r19
  808940:	94c09336 	bltu	r18,r19,808b90 <__sfvwrite_r+0x37c>
  808944:	1881200c 	andi	r2,r3,1152
  808948:	10009e1e 	bne	r2,zero,808bc4 <__sfvwrite_r+0x3b0>
  80894c:	81000017 	ldw	r4,0(r16)
  808950:	b80d883a 	mov	r6,r23
  808954:	e00b883a 	mov	r5,fp
  808958:	080908c0 	call	80908c <memmove>
  80895c:	80c00217 	ldw	r3,8(r16)
  808960:	81000017 	ldw	r4,0(r16)
  808964:	9005883a 	mov	r2,r18
  808968:	1ce7c83a 	sub	r19,r3,r19
  80896c:	25cf883a 	add	r7,r4,r23
  808970:	84c00215 	stw	r19,8(r16)
  808974:	81c00015 	stw	r7,0(r16)
  808978:	a0c00217 	ldw	r3,8(r20)
  80897c:	e0b9883a 	add	fp,fp,r2
  808980:	90a5c83a 	sub	r18,r18,r2
  808984:	18a7c83a 	sub	r19,r3,r2
  808988:	a4c00215 	stw	r19,8(r20)
  80898c:	983fce26 	beq	r19,zero,8088c8 <__alt_mem_onchip_mem+0xff7888c8>
  808990:	80c0030b 	ldhu	r3,12(r16)
  808994:	903fe61e 	bne	r18,zero,808930 <__alt_mem_onchip_mem+0xff788930>
  808998:	8f000017 	ldw	fp,0(r17)
  80899c:	8c800117 	ldw	r18,4(r17)
  8089a0:	8c400204 	addi	r17,r17,8
  8089a4:	003fe106 	br	80892c <__alt_mem_onchip_mem+0xff78892c>
  8089a8:	8cc00017 	ldw	r19,0(r17)
  8089ac:	8c800117 	ldw	r18,4(r17)
  8089b0:	8c400204 	addi	r17,r17,8
  8089b4:	003fb306 	br	808884 <__alt_mem_onchip_mem+0xff788884>
  8089b8:	0005883a 	mov	r2,zero
  8089bc:	f800283a 	ret
  8089c0:	81000017 	ldw	r4,0(r16)
  8089c4:	80800417 	ldw	r2,16(r16)
  8089c8:	11005736 	bltu	r2,r4,808b28 <__sfvwrite_r+0x314>
  8089cc:	85c00517 	ldw	r23,20(r16)
  8089d0:	95c05536 	bltu	r18,r23,808b28 <__sfvwrite_r+0x314>
  8089d4:	00a00034 	movhi	r2,32768
  8089d8:	10bfffc4 	addi	r2,r2,-1
  8089dc:	9009883a 	mov	r4,r18
  8089e0:	1480012e 	bgeu	r2,r18,8089e8 <__sfvwrite_r+0x1d4>
  8089e4:	1009883a 	mov	r4,r2
  8089e8:	b80b883a 	mov	r5,r23
  8089ec:	080d1640 	call	80d164 <__divsi3>
  8089f0:	15cf383a 	mul	r7,r2,r23
  8089f4:	81400717 	ldw	r5,28(r16)
  8089f8:	80800917 	ldw	r2,36(r16)
  8089fc:	e00d883a 	mov	r6,fp
  808a00:	a809883a 	mov	r4,r21
  808a04:	103ee83a 	callr	r2
  808a08:	00bfdb16 	blt	zero,r2,808978 <__alt_mem_onchip_mem+0xff788978>
  808a0c:	8080030b 	ldhu	r2,12(r16)
  808a10:	10801014 	ori	r2,r2,64
  808a14:	8080030d 	sth	r2,12(r16)
  808a18:	00bfffc4 	movi	r2,-1
  808a1c:	003fab06 	br	8088cc <__alt_mem_onchip_mem+0xff7888cc>
  808a20:	0027883a 	mov	r19,zero
  808a24:	0011883a 	mov	r8,zero
  808a28:	0039883a 	mov	fp,zero
  808a2c:	0025883a 	mov	r18,zero
  808a30:	90001f26 	beq	r18,zero,808ab0 <__sfvwrite_r+0x29c>
  808a34:	40005a26 	beq	r8,zero,808ba0 <__sfvwrite_r+0x38c>
  808a38:	982d883a 	mov	r22,r19
  808a3c:	94c0012e 	bgeu	r18,r19,808a44 <__sfvwrite_r+0x230>
  808a40:	902d883a 	mov	r22,r18
  808a44:	81000017 	ldw	r4,0(r16)
  808a48:	80800417 	ldw	r2,16(r16)
  808a4c:	b02f883a 	mov	r23,r22
  808a50:	81c00517 	ldw	r7,20(r16)
  808a54:	1100032e 	bgeu	r2,r4,808a64 <__sfvwrite_r+0x250>
  808a58:	80c00217 	ldw	r3,8(r16)
  808a5c:	38c7883a 	add	r3,r7,r3
  808a60:	1d801816 	blt	r3,r22,808ac4 <__sfvwrite_r+0x2b0>
  808a64:	b1c03e16 	blt	r22,r7,808b60 <__sfvwrite_r+0x34c>
  808a68:	80800917 	ldw	r2,36(r16)
  808a6c:	81400717 	ldw	r5,28(r16)
  808a70:	e00d883a 	mov	r6,fp
  808a74:	da000115 	stw	r8,4(sp)
  808a78:	a809883a 	mov	r4,r21
  808a7c:	103ee83a 	callr	r2
  808a80:	102f883a 	mov	r23,r2
  808a84:	da000117 	ldw	r8,4(sp)
  808a88:	00bfe00e 	bge	zero,r2,808a0c <__alt_mem_onchip_mem+0xff788a0c>
  808a8c:	9de7c83a 	sub	r19,r19,r23
  808a90:	98001f26 	beq	r19,zero,808b10 <__sfvwrite_r+0x2fc>
  808a94:	a0800217 	ldw	r2,8(r20)
  808a98:	e5f9883a 	add	fp,fp,r23
  808a9c:	95e5c83a 	sub	r18,r18,r23
  808aa0:	15efc83a 	sub	r23,r2,r23
  808aa4:	a5c00215 	stw	r23,8(r20)
  808aa8:	b83f8726 	beq	r23,zero,8088c8 <__alt_mem_onchip_mem+0xff7888c8>
  808aac:	903fe11e 	bne	r18,zero,808a34 <__alt_mem_onchip_mem+0xff788a34>
  808ab0:	8f000017 	ldw	fp,0(r17)
  808ab4:	8c800117 	ldw	r18,4(r17)
  808ab8:	0011883a 	mov	r8,zero
  808abc:	8c400204 	addi	r17,r17,8
  808ac0:	003fdb06 	br	808a30 <__alt_mem_onchip_mem+0xff788a30>
  808ac4:	180d883a 	mov	r6,r3
  808ac8:	e00b883a 	mov	r5,fp
  808acc:	da000115 	stw	r8,4(sp)
  808ad0:	d8c00015 	stw	r3,0(sp)
  808ad4:	080908c0 	call	80908c <memmove>
  808ad8:	d8c00017 	ldw	r3,0(sp)
  808adc:	80800017 	ldw	r2,0(r16)
  808ae0:	800b883a 	mov	r5,r16
  808ae4:	a809883a 	mov	r4,r21
  808ae8:	10c5883a 	add	r2,r2,r3
  808aec:	80800015 	stw	r2,0(r16)
  808af0:	d8c00015 	stw	r3,0(sp)
  808af4:	08082a80 	call	8082a8 <_fflush_r>
  808af8:	d8c00017 	ldw	r3,0(sp)
  808afc:	da000117 	ldw	r8,4(sp)
  808b00:	103fc21e 	bne	r2,zero,808a0c <__alt_mem_onchip_mem+0xff788a0c>
  808b04:	182f883a 	mov	r23,r3
  808b08:	9de7c83a 	sub	r19,r19,r23
  808b0c:	983fe11e 	bne	r19,zero,808a94 <__alt_mem_onchip_mem+0xff788a94>
  808b10:	800b883a 	mov	r5,r16
  808b14:	a809883a 	mov	r4,r21
  808b18:	08082a80 	call	8082a8 <_fflush_r>
  808b1c:	103fbb1e 	bne	r2,zero,808a0c <__alt_mem_onchip_mem+0xff788a0c>
  808b20:	0011883a 	mov	r8,zero
  808b24:	003fdb06 	br	808a94 <__alt_mem_onchip_mem+0xff788a94>
  808b28:	94c0012e 	bgeu	r18,r19,808b30 <__sfvwrite_r+0x31c>
  808b2c:	9027883a 	mov	r19,r18
  808b30:	980d883a 	mov	r6,r19
  808b34:	e00b883a 	mov	r5,fp
  808b38:	080908c0 	call	80908c <memmove>
  808b3c:	80800217 	ldw	r2,8(r16)
  808b40:	80c00017 	ldw	r3,0(r16)
  808b44:	14c5c83a 	sub	r2,r2,r19
  808b48:	1cc7883a 	add	r3,r3,r19
  808b4c:	80800215 	stw	r2,8(r16)
  808b50:	80c00015 	stw	r3,0(r16)
  808b54:	10004326 	beq	r2,zero,808c64 <__sfvwrite_r+0x450>
  808b58:	9805883a 	mov	r2,r19
  808b5c:	003f8606 	br	808978 <__alt_mem_onchip_mem+0xff788978>
  808b60:	b00d883a 	mov	r6,r22
  808b64:	e00b883a 	mov	r5,fp
  808b68:	da000115 	stw	r8,4(sp)
  808b6c:	080908c0 	call	80908c <memmove>
  808b70:	80800217 	ldw	r2,8(r16)
  808b74:	80c00017 	ldw	r3,0(r16)
  808b78:	da000117 	ldw	r8,4(sp)
  808b7c:	1585c83a 	sub	r2,r2,r22
  808b80:	1dad883a 	add	r22,r3,r22
  808b84:	80800215 	stw	r2,8(r16)
  808b88:	85800015 	stw	r22,0(r16)
  808b8c:	003fbf06 	br	808a8c <__alt_mem_onchip_mem+0xff788a8c>
  808b90:	81000017 	ldw	r4,0(r16)
  808b94:	9027883a 	mov	r19,r18
  808b98:	902f883a 	mov	r23,r18
  808b9c:	003f6c06 	br	808950 <__alt_mem_onchip_mem+0xff788950>
  808ba0:	900d883a 	mov	r6,r18
  808ba4:	01400284 	movi	r5,10
  808ba8:	e009883a 	mov	r4,fp
  808bac:	0808e600 	call	808e60 <memchr>
  808bb0:	10003e26 	beq	r2,zero,808cac <__sfvwrite_r+0x498>
  808bb4:	10800044 	addi	r2,r2,1
  808bb8:	1727c83a 	sub	r19,r2,fp
  808bbc:	02000044 	movi	r8,1
  808bc0:	003f9d06 	br	808a38 <__alt_mem_onchip_mem+0xff788a38>
  808bc4:	80800517 	ldw	r2,20(r16)
  808bc8:	81400417 	ldw	r5,16(r16)
  808bcc:	81c00017 	ldw	r7,0(r16)
  808bd0:	10a7883a 	add	r19,r2,r2
  808bd4:	9885883a 	add	r2,r19,r2
  808bd8:	1026d7fa 	srli	r19,r2,31
  808bdc:	396dc83a 	sub	r22,r7,r5
  808be0:	b1000044 	addi	r4,r22,1
  808be4:	9885883a 	add	r2,r19,r2
  808be8:	1027d07a 	srai	r19,r2,1
  808bec:	2485883a 	add	r2,r4,r18
  808bf0:	980d883a 	mov	r6,r19
  808bf4:	9880022e 	bgeu	r19,r2,808c00 <__sfvwrite_r+0x3ec>
  808bf8:	1027883a 	mov	r19,r2
  808bfc:	100d883a 	mov	r6,r2
  808c00:	18c1000c 	andi	r3,r3,1024
  808c04:	18001c26 	beq	r3,zero,808c78 <__sfvwrite_r+0x464>
  808c08:	300b883a 	mov	r5,r6
  808c0c:	a809883a 	mov	r4,r21
  808c10:	0802f840 	call	802f84 <_malloc_r>
  808c14:	102f883a 	mov	r23,r2
  808c18:	10002926 	beq	r2,zero,808cc0 <__sfvwrite_r+0x4ac>
  808c1c:	81400417 	ldw	r5,16(r16)
  808c20:	b00d883a 	mov	r6,r22
  808c24:	1009883a 	mov	r4,r2
  808c28:	0808f440 	call	808f44 <memcpy>
  808c2c:	8080030b 	ldhu	r2,12(r16)
  808c30:	00fedfc4 	movi	r3,-1153
  808c34:	10c4703a 	and	r2,r2,r3
  808c38:	10802014 	ori	r2,r2,128
  808c3c:	8080030d 	sth	r2,12(r16)
  808c40:	bd89883a 	add	r4,r23,r22
  808c44:	9d8fc83a 	sub	r7,r19,r22
  808c48:	85c00415 	stw	r23,16(r16)
  808c4c:	84c00515 	stw	r19,20(r16)
  808c50:	81000015 	stw	r4,0(r16)
  808c54:	9027883a 	mov	r19,r18
  808c58:	81c00215 	stw	r7,8(r16)
  808c5c:	902f883a 	mov	r23,r18
  808c60:	003f3b06 	br	808950 <__alt_mem_onchip_mem+0xff788950>
  808c64:	800b883a 	mov	r5,r16
  808c68:	a809883a 	mov	r4,r21
  808c6c:	08082a80 	call	8082a8 <_fflush_r>
  808c70:	103fb926 	beq	r2,zero,808b58 <__alt_mem_onchip_mem+0xff788b58>
  808c74:	003f6506 	br	808a0c <__alt_mem_onchip_mem+0xff788a0c>
  808c78:	a809883a 	mov	r4,r21
  808c7c:	080a3ac0 	call	80a3ac <_realloc_r>
  808c80:	102f883a 	mov	r23,r2
  808c84:	103fee1e 	bne	r2,zero,808c40 <__alt_mem_onchip_mem+0xff788c40>
  808c88:	81400417 	ldw	r5,16(r16)
  808c8c:	a809883a 	mov	r4,r21
  808c90:	08085040 	call	808504 <_free_r>
  808c94:	8080030b 	ldhu	r2,12(r16)
  808c98:	00ffdfc4 	movi	r3,-129
  808c9c:	1884703a 	and	r2,r3,r2
  808ca0:	00c00304 	movi	r3,12
  808ca4:	a8c00015 	stw	r3,0(r21)
  808ca8:	003f5906 	br	808a10 <__alt_mem_onchip_mem+0xff788a10>
  808cac:	94c00044 	addi	r19,r18,1
  808cb0:	02000044 	movi	r8,1
  808cb4:	003f6006 	br	808a38 <__alt_mem_onchip_mem+0xff788a38>
  808cb8:	00bfffc4 	movi	r2,-1
  808cbc:	003f0306 	br	8088cc <__alt_mem_onchip_mem+0xff7888cc>
  808cc0:	00800304 	movi	r2,12
  808cc4:	a8800015 	stw	r2,0(r21)
  808cc8:	8080030b 	ldhu	r2,12(r16)
  808ccc:	003f5006 	br	808a10 <__alt_mem_onchip_mem+0xff788a10>

00808cd0 <_isatty_r>:
  808cd0:	defffd04 	addi	sp,sp,-12
  808cd4:	dc000015 	stw	r16,0(sp)
  808cd8:	04002074 	movhi	r16,129
  808cdc:	dc400115 	stw	r17,4(sp)
  808ce0:	841f5304 	addi	r16,r16,32076
  808ce4:	2023883a 	mov	r17,r4
  808ce8:	2809883a 	mov	r4,r5
  808cec:	dfc00215 	stw	ra,8(sp)
  808cf0:	80000015 	stw	zero,0(r16)
  808cf4:	080fe8c0 	call	80fe8c <isatty>
  808cf8:	00ffffc4 	movi	r3,-1
  808cfc:	10c00526 	beq	r2,r3,808d14 <_isatty_r+0x44>
  808d00:	dfc00217 	ldw	ra,8(sp)
  808d04:	dc400117 	ldw	r17,4(sp)
  808d08:	dc000017 	ldw	r16,0(sp)
  808d0c:	dec00304 	addi	sp,sp,12
  808d10:	f800283a 	ret
  808d14:	80c00017 	ldw	r3,0(r16)
  808d18:	183ff926 	beq	r3,zero,808d00 <__alt_mem_onchip_mem+0xff788d00>
  808d1c:	88c00015 	stw	r3,0(r17)
  808d20:	003ff706 	br	808d00 <__alt_mem_onchip_mem+0xff788d00>

00808d24 <_setlocale_r>:
  808d24:	30001b26 	beq	r6,zero,808d94 <_setlocale_r+0x70>
  808d28:	01402074 	movhi	r5,129
  808d2c:	defffe04 	addi	sp,sp,-8
  808d30:	29501f04 	addi	r5,r5,16508
  808d34:	3009883a 	mov	r4,r6
  808d38:	dc000015 	stw	r16,0(sp)
  808d3c:	dfc00115 	stw	ra,4(sp)
  808d40:	3021883a 	mov	r16,r6
  808d44:	080a9840 	call	80a984 <strcmp>
  808d48:	1000061e 	bne	r2,zero,808d64 <_setlocale_r+0x40>
  808d4c:	00802074 	movhi	r2,129
  808d50:	108f6004 	addi	r2,r2,15744
  808d54:	dfc00117 	ldw	ra,4(sp)
  808d58:	dc000017 	ldw	r16,0(sp)
  808d5c:	dec00204 	addi	sp,sp,8
  808d60:	f800283a 	ret
  808d64:	01402074 	movhi	r5,129
  808d68:	294f6004 	addi	r5,r5,15744
  808d6c:	8009883a 	mov	r4,r16
  808d70:	080a9840 	call	80a984 <strcmp>
  808d74:	103ff526 	beq	r2,zero,808d4c <__alt_mem_onchip_mem+0xff788d4c>
  808d78:	01402074 	movhi	r5,129
  808d7c:	294f6a04 	addi	r5,r5,15784
  808d80:	8009883a 	mov	r4,r16
  808d84:	080a9840 	call	80a984 <strcmp>
  808d88:	103ff026 	beq	r2,zero,808d4c <__alt_mem_onchip_mem+0xff788d4c>
  808d8c:	0005883a 	mov	r2,zero
  808d90:	003ff006 	br	808d54 <__alt_mem_onchip_mem+0xff788d54>
  808d94:	00802074 	movhi	r2,129
  808d98:	108f6004 	addi	r2,r2,15744
  808d9c:	f800283a 	ret

00808da0 <__locale_charset>:
  808da0:	00802074 	movhi	r2,129
  808da4:	1092d704 	addi	r2,r2,19292
  808da8:	f800283a 	ret

00808dac <__locale_mb_cur_max>:
  808dac:	00802074 	movhi	r2,129
  808db0:	1097f604 	addi	r2,r2,24536
  808db4:	10800017 	ldw	r2,0(r2)
  808db8:	f800283a 	ret

00808dbc <__locale_msgcharset>:
  808dbc:	00802074 	movhi	r2,129
  808dc0:	1092cf04 	addi	r2,r2,19260
  808dc4:	f800283a 	ret

00808dc8 <__locale_cjk_lang>:
  808dc8:	0005883a 	mov	r2,zero
  808dcc:	f800283a 	ret

00808dd0 <_localeconv_r>:
  808dd0:	00802074 	movhi	r2,129
  808dd4:	1092df04 	addi	r2,r2,19324
  808dd8:	f800283a 	ret

00808ddc <setlocale>:
  808ddc:	00802074 	movhi	r2,129
  808de0:	1097f204 	addi	r2,r2,24520
  808de4:	280d883a 	mov	r6,r5
  808de8:	200b883a 	mov	r5,r4
  808dec:	11000017 	ldw	r4,0(r2)
  808df0:	0808d241 	jmpi	808d24 <_setlocale_r>

00808df4 <localeconv>:
  808df4:	00802074 	movhi	r2,129
  808df8:	1092df04 	addi	r2,r2,19324
  808dfc:	f800283a 	ret

00808e00 <_lseek_r>:
  808e00:	defffd04 	addi	sp,sp,-12
  808e04:	2805883a 	mov	r2,r5
  808e08:	dc000015 	stw	r16,0(sp)
  808e0c:	04002074 	movhi	r16,129
  808e10:	dc400115 	stw	r17,4(sp)
  808e14:	300b883a 	mov	r5,r6
  808e18:	841f5304 	addi	r16,r16,32076
  808e1c:	2023883a 	mov	r17,r4
  808e20:	380d883a 	mov	r6,r7
  808e24:	1009883a 	mov	r4,r2
  808e28:	dfc00215 	stw	ra,8(sp)
  808e2c:	80000015 	stw	zero,0(r16)
  808e30:	08100580 	call	810058 <lseek>
  808e34:	00ffffc4 	movi	r3,-1
  808e38:	10c00526 	beq	r2,r3,808e50 <_lseek_r+0x50>
  808e3c:	dfc00217 	ldw	ra,8(sp)
  808e40:	dc400117 	ldw	r17,4(sp)
  808e44:	dc000017 	ldw	r16,0(sp)
  808e48:	dec00304 	addi	sp,sp,12
  808e4c:	f800283a 	ret
  808e50:	80c00017 	ldw	r3,0(r16)
  808e54:	183ff926 	beq	r3,zero,808e3c <__alt_mem_onchip_mem+0xff788e3c>
  808e58:	88c00015 	stw	r3,0(r17)
  808e5c:	003ff706 	br	808e3c <__alt_mem_onchip_mem+0xff788e3c>

00808e60 <memchr>:
  808e60:	208000cc 	andi	r2,r4,3
  808e64:	280f883a 	mov	r7,r5
  808e68:	10003426 	beq	r2,zero,808f3c <memchr+0xdc>
  808e6c:	30bfffc4 	addi	r2,r6,-1
  808e70:	30001a26 	beq	r6,zero,808edc <memchr+0x7c>
  808e74:	20c00003 	ldbu	r3,0(r4)
  808e78:	29803fcc 	andi	r6,r5,255
  808e7c:	30c0051e 	bne	r6,r3,808e94 <memchr+0x34>
  808e80:	00001806 	br	808ee4 <memchr+0x84>
  808e84:	10001526 	beq	r2,zero,808edc <memchr+0x7c>
  808e88:	20c00003 	ldbu	r3,0(r4)
  808e8c:	10bfffc4 	addi	r2,r2,-1
  808e90:	30c01426 	beq	r6,r3,808ee4 <memchr+0x84>
  808e94:	21000044 	addi	r4,r4,1
  808e98:	20c000cc 	andi	r3,r4,3
  808e9c:	183ff91e 	bne	r3,zero,808e84 <__alt_mem_onchip_mem+0xff788e84>
  808ea0:	020000c4 	movi	r8,3
  808ea4:	40801136 	bltu	r8,r2,808eec <memchr+0x8c>
  808ea8:	10000c26 	beq	r2,zero,808edc <memchr+0x7c>
  808eac:	20c00003 	ldbu	r3,0(r4)
  808eb0:	29403fcc 	andi	r5,r5,255
  808eb4:	28c00b26 	beq	r5,r3,808ee4 <memchr+0x84>
  808eb8:	20c00044 	addi	r3,r4,1
  808ebc:	39803fcc 	andi	r6,r7,255
  808ec0:	2089883a 	add	r4,r4,r2
  808ec4:	00000306 	br	808ed4 <memchr+0x74>
  808ec8:	18c00044 	addi	r3,r3,1
  808ecc:	197fffc3 	ldbu	r5,-1(r3)
  808ed0:	31400526 	beq	r6,r5,808ee8 <memchr+0x88>
  808ed4:	1805883a 	mov	r2,r3
  808ed8:	20fffb1e 	bne	r4,r3,808ec8 <__alt_mem_onchip_mem+0xff788ec8>
  808edc:	0005883a 	mov	r2,zero
  808ee0:	f800283a 	ret
  808ee4:	2005883a 	mov	r2,r4
  808ee8:	f800283a 	ret
  808eec:	28c03fcc 	andi	r3,r5,255
  808ef0:	1812923a 	slli	r9,r3,8
  808ef4:	02ffbff4 	movhi	r11,65279
  808ef8:	02a02074 	movhi	r10,32897
  808efc:	48d2b03a 	or	r9,r9,r3
  808f00:	4806943a 	slli	r3,r9,16
  808f04:	5affbfc4 	addi	r11,r11,-257
  808f08:	52a02004 	addi	r10,r10,-32640
  808f0c:	48d2b03a 	or	r9,r9,r3
  808f10:	20c00017 	ldw	r3,0(r4)
  808f14:	48c6f03a 	xor	r3,r9,r3
  808f18:	1acd883a 	add	r6,r3,r11
  808f1c:	00c6303a 	nor	r3,zero,r3
  808f20:	30c6703a 	and	r3,r6,r3
  808f24:	1a86703a 	and	r3,r3,r10
  808f28:	183fe01e 	bne	r3,zero,808eac <__alt_mem_onchip_mem+0xff788eac>
  808f2c:	10bfff04 	addi	r2,r2,-4
  808f30:	21000104 	addi	r4,r4,4
  808f34:	40bff636 	bltu	r8,r2,808f10 <__alt_mem_onchip_mem+0xff788f10>
  808f38:	003fdb06 	br	808ea8 <__alt_mem_onchip_mem+0xff788ea8>
  808f3c:	3005883a 	mov	r2,r6
  808f40:	003fd706 	br	808ea0 <__alt_mem_onchip_mem+0xff788ea0>

00808f44 <memcpy>:
  808f44:	defffd04 	addi	sp,sp,-12
  808f48:	dfc00215 	stw	ra,8(sp)
  808f4c:	dc400115 	stw	r17,4(sp)
  808f50:	dc000015 	stw	r16,0(sp)
  808f54:	00c003c4 	movi	r3,15
  808f58:	2005883a 	mov	r2,r4
  808f5c:	1980452e 	bgeu	r3,r6,809074 <memcpy+0x130>
  808f60:	2906b03a 	or	r3,r5,r4
  808f64:	18c000cc 	andi	r3,r3,3
  808f68:	1800441e 	bne	r3,zero,80907c <memcpy+0x138>
  808f6c:	347ffc04 	addi	r17,r6,-16
  808f70:	8822d13a 	srli	r17,r17,4
  808f74:	28c00104 	addi	r3,r5,4
  808f78:	23400104 	addi	r13,r4,4
  808f7c:	8820913a 	slli	r16,r17,4
  808f80:	2b000204 	addi	r12,r5,8
  808f84:	22c00204 	addi	r11,r4,8
  808f88:	84000504 	addi	r16,r16,20
  808f8c:	2a800304 	addi	r10,r5,12
  808f90:	22400304 	addi	r9,r4,12
  808f94:	2c21883a 	add	r16,r5,r16
  808f98:	2811883a 	mov	r8,r5
  808f9c:	200f883a 	mov	r7,r4
  808fa0:	41000017 	ldw	r4,0(r8)
  808fa4:	1fc00017 	ldw	ra,0(r3)
  808fa8:	63c00017 	ldw	r15,0(r12)
  808fac:	39000015 	stw	r4,0(r7)
  808fb0:	53800017 	ldw	r14,0(r10)
  808fb4:	6fc00015 	stw	ra,0(r13)
  808fb8:	5bc00015 	stw	r15,0(r11)
  808fbc:	4b800015 	stw	r14,0(r9)
  808fc0:	18c00404 	addi	r3,r3,16
  808fc4:	39c00404 	addi	r7,r7,16
  808fc8:	42000404 	addi	r8,r8,16
  808fcc:	6b400404 	addi	r13,r13,16
  808fd0:	63000404 	addi	r12,r12,16
  808fd4:	5ac00404 	addi	r11,r11,16
  808fd8:	52800404 	addi	r10,r10,16
  808fdc:	4a400404 	addi	r9,r9,16
  808fe0:	1c3fef1e 	bne	r3,r16,808fa0 <__alt_mem_onchip_mem+0xff788fa0>
  808fe4:	89c00044 	addi	r7,r17,1
  808fe8:	380e913a 	slli	r7,r7,4
  808fec:	310003cc 	andi	r4,r6,15
  808ff0:	02c000c4 	movi	r11,3
  808ff4:	11c7883a 	add	r3,r2,r7
  808ff8:	29cb883a 	add	r5,r5,r7
  808ffc:	5900212e 	bgeu	r11,r4,809084 <memcpy+0x140>
  809000:	1813883a 	mov	r9,r3
  809004:	2811883a 	mov	r8,r5
  809008:	200f883a 	mov	r7,r4
  80900c:	42800017 	ldw	r10,0(r8)
  809010:	4a400104 	addi	r9,r9,4
  809014:	39ffff04 	addi	r7,r7,-4
  809018:	4abfff15 	stw	r10,-4(r9)
  80901c:	42000104 	addi	r8,r8,4
  809020:	59fffa36 	bltu	r11,r7,80900c <__alt_mem_onchip_mem+0xff78900c>
  809024:	213fff04 	addi	r4,r4,-4
  809028:	2008d0ba 	srli	r4,r4,2
  80902c:	318000cc 	andi	r6,r6,3
  809030:	21000044 	addi	r4,r4,1
  809034:	2109883a 	add	r4,r4,r4
  809038:	2109883a 	add	r4,r4,r4
  80903c:	1907883a 	add	r3,r3,r4
  809040:	290b883a 	add	r5,r5,r4
  809044:	30000626 	beq	r6,zero,809060 <memcpy+0x11c>
  809048:	198d883a 	add	r6,r3,r6
  80904c:	29c00003 	ldbu	r7,0(r5)
  809050:	18c00044 	addi	r3,r3,1
  809054:	29400044 	addi	r5,r5,1
  809058:	19ffffc5 	stb	r7,-1(r3)
  80905c:	19bffb1e 	bne	r3,r6,80904c <__alt_mem_onchip_mem+0xff78904c>
  809060:	dfc00217 	ldw	ra,8(sp)
  809064:	dc400117 	ldw	r17,4(sp)
  809068:	dc000017 	ldw	r16,0(sp)
  80906c:	dec00304 	addi	sp,sp,12
  809070:	f800283a 	ret
  809074:	2007883a 	mov	r3,r4
  809078:	003ff206 	br	809044 <__alt_mem_onchip_mem+0xff789044>
  80907c:	2007883a 	mov	r3,r4
  809080:	003ff106 	br	809048 <__alt_mem_onchip_mem+0xff789048>
  809084:	200d883a 	mov	r6,r4
  809088:	003fee06 	br	809044 <__alt_mem_onchip_mem+0xff789044>

0080908c <memmove>:
  80908c:	2005883a 	mov	r2,r4
  809090:	29000b2e 	bgeu	r5,r4,8090c0 <memmove+0x34>
  809094:	298f883a 	add	r7,r5,r6
  809098:	21c0092e 	bgeu	r4,r7,8090c0 <memmove+0x34>
  80909c:	2187883a 	add	r3,r4,r6
  8090a0:	198bc83a 	sub	r5,r3,r6
  8090a4:	30004826 	beq	r6,zero,8091c8 <memmove+0x13c>
  8090a8:	39ffffc4 	addi	r7,r7,-1
  8090ac:	39000003 	ldbu	r4,0(r7)
  8090b0:	18ffffc4 	addi	r3,r3,-1
  8090b4:	19000005 	stb	r4,0(r3)
  8090b8:	28fffb1e 	bne	r5,r3,8090a8 <__alt_mem_onchip_mem+0xff7890a8>
  8090bc:	f800283a 	ret
  8090c0:	00c003c4 	movi	r3,15
  8090c4:	1980412e 	bgeu	r3,r6,8091cc <memmove+0x140>
  8090c8:	2886b03a 	or	r3,r5,r2
  8090cc:	18c000cc 	andi	r3,r3,3
  8090d0:	1800401e 	bne	r3,zero,8091d4 <memmove+0x148>
  8090d4:	33fffc04 	addi	r15,r6,-16
  8090d8:	781ed13a 	srli	r15,r15,4
  8090dc:	28c00104 	addi	r3,r5,4
  8090e0:	13400104 	addi	r13,r2,4
  8090e4:	781c913a 	slli	r14,r15,4
  8090e8:	2b000204 	addi	r12,r5,8
  8090ec:	12c00204 	addi	r11,r2,8
  8090f0:	73800504 	addi	r14,r14,20
  8090f4:	2a800304 	addi	r10,r5,12
  8090f8:	12400304 	addi	r9,r2,12
  8090fc:	2b9d883a 	add	r14,r5,r14
  809100:	2811883a 	mov	r8,r5
  809104:	100f883a 	mov	r7,r2
  809108:	41000017 	ldw	r4,0(r8)
  80910c:	39c00404 	addi	r7,r7,16
  809110:	18c00404 	addi	r3,r3,16
  809114:	393ffc15 	stw	r4,-16(r7)
  809118:	193ffc17 	ldw	r4,-16(r3)
  80911c:	6b400404 	addi	r13,r13,16
  809120:	5ac00404 	addi	r11,r11,16
  809124:	693ffc15 	stw	r4,-16(r13)
  809128:	61000017 	ldw	r4,0(r12)
  80912c:	4a400404 	addi	r9,r9,16
  809130:	42000404 	addi	r8,r8,16
  809134:	593ffc15 	stw	r4,-16(r11)
  809138:	51000017 	ldw	r4,0(r10)
  80913c:	63000404 	addi	r12,r12,16
  809140:	52800404 	addi	r10,r10,16
  809144:	493ffc15 	stw	r4,-16(r9)
  809148:	1bbfef1e 	bne	r3,r14,809108 <__alt_mem_onchip_mem+0xff789108>
  80914c:	79000044 	addi	r4,r15,1
  809150:	2008913a 	slli	r4,r4,4
  809154:	328003cc 	andi	r10,r6,15
  809158:	02c000c4 	movi	r11,3
  80915c:	1107883a 	add	r3,r2,r4
  809160:	290b883a 	add	r5,r5,r4
  809164:	5a801e2e 	bgeu	r11,r10,8091e0 <memmove+0x154>
  809168:	1813883a 	mov	r9,r3
  80916c:	2811883a 	mov	r8,r5
  809170:	500f883a 	mov	r7,r10
  809174:	41000017 	ldw	r4,0(r8)
  809178:	4a400104 	addi	r9,r9,4
  80917c:	39ffff04 	addi	r7,r7,-4
  809180:	493fff15 	stw	r4,-4(r9)
  809184:	42000104 	addi	r8,r8,4
  809188:	59fffa36 	bltu	r11,r7,809174 <__alt_mem_onchip_mem+0xff789174>
  80918c:	513fff04 	addi	r4,r10,-4
  809190:	2008d0ba 	srli	r4,r4,2
  809194:	318000cc 	andi	r6,r6,3
  809198:	21000044 	addi	r4,r4,1
  80919c:	2109883a 	add	r4,r4,r4
  8091a0:	2109883a 	add	r4,r4,r4
  8091a4:	1907883a 	add	r3,r3,r4
  8091a8:	290b883a 	add	r5,r5,r4
  8091ac:	30000b26 	beq	r6,zero,8091dc <memmove+0x150>
  8091b0:	198d883a 	add	r6,r3,r6
  8091b4:	29c00003 	ldbu	r7,0(r5)
  8091b8:	18c00044 	addi	r3,r3,1
  8091bc:	29400044 	addi	r5,r5,1
  8091c0:	19ffffc5 	stb	r7,-1(r3)
  8091c4:	19bffb1e 	bne	r3,r6,8091b4 <__alt_mem_onchip_mem+0xff7891b4>
  8091c8:	f800283a 	ret
  8091cc:	1007883a 	mov	r3,r2
  8091d0:	003ff606 	br	8091ac <__alt_mem_onchip_mem+0xff7891ac>
  8091d4:	1007883a 	mov	r3,r2
  8091d8:	003ff506 	br	8091b0 <__alt_mem_onchip_mem+0xff7891b0>
  8091dc:	f800283a 	ret
  8091e0:	500d883a 	mov	r6,r10
  8091e4:	003ff106 	br	8091ac <__alt_mem_onchip_mem+0xff7891ac>

008091e8 <_Balloc>:
  8091e8:	20801317 	ldw	r2,76(r4)
  8091ec:	defffc04 	addi	sp,sp,-16
  8091f0:	dc400115 	stw	r17,4(sp)
  8091f4:	dc000015 	stw	r16,0(sp)
  8091f8:	dfc00315 	stw	ra,12(sp)
  8091fc:	dc800215 	stw	r18,8(sp)
  809200:	2023883a 	mov	r17,r4
  809204:	2821883a 	mov	r16,r5
  809208:	10000f26 	beq	r2,zero,809248 <_Balloc+0x60>
  80920c:	8407883a 	add	r3,r16,r16
  809210:	18c7883a 	add	r3,r3,r3
  809214:	10c7883a 	add	r3,r2,r3
  809218:	18800017 	ldw	r2,0(r3)
  80921c:	10001126 	beq	r2,zero,809264 <_Balloc+0x7c>
  809220:	11000017 	ldw	r4,0(r2)
  809224:	19000015 	stw	r4,0(r3)
  809228:	10000415 	stw	zero,16(r2)
  80922c:	10000315 	stw	zero,12(r2)
  809230:	dfc00317 	ldw	ra,12(sp)
  809234:	dc800217 	ldw	r18,8(sp)
  809238:	dc400117 	ldw	r17,4(sp)
  80923c:	dc000017 	ldw	r16,0(sp)
  809240:	dec00404 	addi	sp,sp,16
  809244:	f800283a 	ret
  809248:	01800844 	movi	r6,33
  80924c:	01400104 	movi	r5,4
  809250:	080c2000 	call	80c200 <_calloc_r>
  809254:	88801315 	stw	r2,76(r17)
  809258:	103fec1e 	bne	r2,zero,80920c <__alt_mem_onchip_mem+0xff78920c>
  80925c:	0005883a 	mov	r2,zero
  809260:	003ff306 	br	809230 <__alt_mem_onchip_mem+0xff789230>
  809264:	01400044 	movi	r5,1
  809268:	2c24983a 	sll	r18,r5,r16
  80926c:	8809883a 	mov	r4,r17
  809270:	91800144 	addi	r6,r18,5
  809274:	318d883a 	add	r6,r6,r6
  809278:	318d883a 	add	r6,r6,r6
  80927c:	080c2000 	call	80c200 <_calloc_r>
  809280:	103ff626 	beq	r2,zero,80925c <__alt_mem_onchip_mem+0xff78925c>
  809284:	14000115 	stw	r16,4(r2)
  809288:	14800215 	stw	r18,8(r2)
  80928c:	003fe606 	br	809228 <__alt_mem_onchip_mem+0xff789228>

00809290 <_Bfree>:
  809290:	28000826 	beq	r5,zero,8092b4 <_Bfree+0x24>
  809294:	28c00117 	ldw	r3,4(r5)
  809298:	20801317 	ldw	r2,76(r4)
  80929c:	18c7883a 	add	r3,r3,r3
  8092a0:	18c7883a 	add	r3,r3,r3
  8092a4:	10c5883a 	add	r2,r2,r3
  8092a8:	10c00017 	ldw	r3,0(r2)
  8092ac:	28c00015 	stw	r3,0(r5)
  8092b0:	11400015 	stw	r5,0(r2)
  8092b4:	f800283a 	ret

008092b8 <__multadd>:
  8092b8:	defffa04 	addi	sp,sp,-24
  8092bc:	dc800315 	stw	r18,12(sp)
  8092c0:	dc400215 	stw	r17,8(sp)
  8092c4:	dc000115 	stw	r16,4(sp)
  8092c8:	2823883a 	mov	r17,r5
  8092cc:	2c000417 	ldw	r16,16(r5)
  8092d0:	dfc00515 	stw	ra,20(sp)
  8092d4:	dcc00415 	stw	r19,16(sp)
  8092d8:	2025883a 	mov	r18,r4
  8092dc:	29400504 	addi	r5,r5,20
  8092e0:	0011883a 	mov	r8,zero
  8092e4:	28c00017 	ldw	r3,0(r5)
  8092e8:	29400104 	addi	r5,r5,4
  8092ec:	42000044 	addi	r8,r8,1
  8092f0:	18bfffcc 	andi	r2,r3,65535
  8092f4:	1185383a 	mul	r2,r2,r6
  8092f8:	1806d43a 	srli	r3,r3,16
  8092fc:	11cf883a 	add	r7,r2,r7
  809300:	3808d43a 	srli	r4,r7,16
  809304:	1987383a 	mul	r3,r3,r6
  809308:	38bfffcc 	andi	r2,r7,65535
  80930c:	1907883a 	add	r3,r3,r4
  809310:	1808943a 	slli	r4,r3,16
  809314:	180ed43a 	srli	r7,r3,16
  809318:	2085883a 	add	r2,r4,r2
  80931c:	28bfff15 	stw	r2,-4(r5)
  809320:	443ff016 	blt	r8,r16,8092e4 <__alt_mem_onchip_mem+0xff7892e4>
  809324:	38000926 	beq	r7,zero,80934c <__multadd+0x94>
  809328:	88800217 	ldw	r2,8(r17)
  80932c:	80800f0e 	bge	r16,r2,80936c <__multadd+0xb4>
  809330:	80800144 	addi	r2,r16,5
  809334:	1085883a 	add	r2,r2,r2
  809338:	1085883a 	add	r2,r2,r2
  80933c:	8885883a 	add	r2,r17,r2
  809340:	11c00015 	stw	r7,0(r2)
  809344:	84000044 	addi	r16,r16,1
  809348:	8c000415 	stw	r16,16(r17)
  80934c:	8805883a 	mov	r2,r17
  809350:	dfc00517 	ldw	ra,20(sp)
  809354:	dcc00417 	ldw	r19,16(sp)
  809358:	dc800317 	ldw	r18,12(sp)
  80935c:	dc400217 	ldw	r17,8(sp)
  809360:	dc000117 	ldw	r16,4(sp)
  809364:	dec00604 	addi	sp,sp,24
  809368:	f800283a 	ret
  80936c:	89400117 	ldw	r5,4(r17)
  809370:	9009883a 	mov	r4,r18
  809374:	d9c00015 	stw	r7,0(sp)
  809378:	29400044 	addi	r5,r5,1
  80937c:	08091e80 	call	8091e8 <_Balloc>
  809380:	89800417 	ldw	r6,16(r17)
  809384:	89400304 	addi	r5,r17,12
  809388:	11000304 	addi	r4,r2,12
  80938c:	31800084 	addi	r6,r6,2
  809390:	318d883a 	add	r6,r6,r6
  809394:	318d883a 	add	r6,r6,r6
  809398:	1027883a 	mov	r19,r2
  80939c:	0808f440 	call	808f44 <memcpy>
  8093a0:	d9c00017 	ldw	r7,0(sp)
  8093a4:	88000a26 	beq	r17,zero,8093d0 <__multadd+0x118>
  8093a8:	88c00117 	ldw	r3,4(r17)
  8093ac:	90801317 	ldw	r2,76(r18)
  8093b0:	18c7883a 	add	r3,r3,r3
  8093b4:	18c7883a 	add	r3,r3,r3
  8093b8:	10c5883a 	add	r2,r2,r3
  8093bc:	10c00017 	ldw	r3,0(r2)
  8093c0:	88c00015 	stw	r3,0(r17)
  8093c4:	14400015 	stw	r17,0(r2)
  8093c8:	9823883a 	mov	r17,r19
  8093cc:	003fd806 	br	809330 <__alt_mem_onchip_mem+0xff789330>
  8093d0:	9823883a 	mov	r17,r19
  8093d4:	003fd606 	br	809330 <__alt_mem_onchip_mem+0xff789330>

008093d8 <__s2b>:
  8093d8:	defff904 	addi	sp,sp,-28
  8093dc:	dc400115 	stw	r17,4(sp)
  8093e0:	dc000015 	stw	r16,0(sp)
  8093e4:	2023883a 	mov	r17,r4
  8093e8:	2821883a 	mov	r16,r5
  8093ec:	39000204 	addi	r4,r7,8
  8093f0:	01400244 	movi	r5,9
  8093f4:	dcc00315 	stw	r19,12(sp)
  8093f8:	dc800215 	stw	r18,8(sp)
  8093fc:	dfc00615 	stw	ra,24(sp)
  809400:	dd400515 	stw	r21,20(sp)
  809404:	dd000415 	stw	r20,16(sp)
  809408:	3825883a 	mov	r18,r7
  80940c:	3027883a 	mov	r19,r6
  809410:	080d1640 	call	80d164 <__divsi3>
  809414:	00c00044 	movi	r3,1
  809418:	000b883a 	mov	r5,zero
  80941c:	1880030e 	bge	r3,r2,80942c <__s2b+0x54>
  809420:	18c7883a 	add	r3,r3,r3
  809424:	29400044 	addi	r5,r5,1
  809428:	18bffd16 	blt	r3,r2,809420 <__alt_mem_onchip_mem+0xff789420>
  80942c:	8809883a 	mov	r4,r17
  809430:	08091e80 	call	8091e8 <_Balloc>
  809434:	d8c00717 	ldw	r3,28(sp)
  809438:	10c00515 	stw	r3,20(r2)
  80943c:	00c00044 	movi	r3,1
  809440:	10c00415 	stw	r3,16(r2)
  809444:	00c00244 	movi	r3,9
  809448:	1cc0210e 	bge	r3,r19,8094d0 <__s2b+0xf8>
  80944c:	80eb883a 	add	r21,r16,r3
  809450:	a829883a 	mov	r20,r21
  809454:	84e1883a 	add	r16,r16,r19
  809458:	a1c00007 	ldb	r7,0(r20)
  80945c:	01800284 	movi	r6,10
  809460:	a5000044 	addi	r20,r20,1
  809464:	100b883a 	mov	r5,r2
  809468:	39fff404 	addi	r7,r7,-48
  80946c:	8809883a 	mov	r4,r17
  809470:	08092b80 	call	8092b8 <__multadd>
  809474:	a43ff81e 	bne	r20,r16,809458 <__alt_mem_onchip_mem+0xff789458>
  809478:	ace1883a 	add	r16,r21,r19
  80947c:	843ffe04 	addi	r16,r16,-8
  809480:	9c800a0e 	bge	r19,r18,8094ac <__s2b+0xd4>
  809484:	94e5c83a 	sub	r18,r18,r19
  809488:	84a5883a 	add	r18,r16,r18
  80948c:	81c00007 	ldb	r7,0(r16)
  809490:	01800284 	movi	r6,10
  809494:	84000044 	addi	r16,r16,1
  809498:	100b883a 	mov	r5,r2
  80949c:	39fff404 	addi	r7,r7,-48
  8094a0:	8809883a 	mov	r4,r17
  8094a4:	08092b80 	call	8092b8 <__multadd>
  8094a8:	84bff81e 	bne	r16,r18,80948c <__alt_mem_onchip_mem+0xff78948c>
  8094ac:	dfc00617 	ldw	ra,24(sp)
  8094b0:	dd400517 	ldw	r21,20(sp)
  8094b4:	dd000417 	ldw	r20,16(sp)
  8094b8:	dcc00317 	ldw	r19,12(sp)
  8094bc:	dc800217 	ldw	r18,8(sp)
  8094c0:	dc400117 	ldw	r17,4(sp)
  8094c4:	dc000017 	ldw	r16,0(sp)
  8094c8:	dec00704 	addi	sp,sp,28
  8094cc:	f800283a 	ret
  8094d0:	84000284 	addi	r16,r16,10
  8094d4:	1827883a 	mov	r19,r3
  8094d8:	003fe906 	br	809480 <__alt_mem_onchip_mem+0xff789480>

008094dc <__hi0bits>:
  8094dc:	20bfffec 	andhi	r2,r4,65535
  8094e0:	1000141e 	bne	r2,zero,809534 <__hi0bits+0x58>
  8094e4:	2008943a 	slli	r4,r4,16
  8094e8:	00800404 	movi	r2,16
  8094ec:	20ffc02c 	andhi	r3,r4,65280
  8094f0:	1800021e 	bne	r3,zero,8094fc <__hi0bits+0x20>
  8094f4:	2008923a 	slli	r4,r4,8
  8094f8:	10800204 	addi	r2,r2,8
  8094fc:	20fc002c 	andhi	r3,r4,61440
  809500:	1800021e 	bne	r3,zero,80950c <__hi0bits+0x30>
  809504:	2008913a 	slli	r4,r4,4
  809508:	10800104 	addi	r2,r2,4
  80950c:	20f0002c 	andhi	r3,r4,49152
  809510:	1800031e 	bne	r3,zero,809520 <__hi0bits+0x44>
  809514:	2109883a 	add	r4,r4,r4
  809518:	10800084 	addi	r2,r2,2
  80951c:	2109883a 	add	r4,r4,r4
  809520:	20000316 	blt	r4,zero,809530 <__hi0bits+0x54>
  809524:	2110002c 	andhi	r4,r4,16384
  809528:	2000041e 	bne	r4,zero,80953c <__hi0bits+0x60>
  80952c:	00800804 	movi	r2,32
  809530:	f800283a 	ret
  809534:	0005883a 	mov	r2,zero
  809538:	003fec06 	br	8094ec <__alt_mem_onchip_mem+0xff7894ec>
  80953c:	10800044 	addi	r2,r2,1
  809540:	f800283a 	ret

00809544 <__lo0bits>:
  809544:	20c00017 	ldw	r3,0(r4)
  809548:	188001cc 	andi	r2,r3,7
  80954c:	10000826 	beq	r2,zero,809570 <__lo0bits+0x2c>
  809550:	1880004c 	andi	r2,r3,1
  809554:	1000211e 	bne	r2,zero,8095dc <__lo0bits+0x98>
  809558:	1880008c 	andi	r2,r3,2
  80955c:	1000211e 	bne	r2,zero,8095e4 <__lo0bits+0xa0>
  809560:	1806d0ba 	srli	r3,r3,2
  809564:	00800084 	movi	r2,2
  809568:	20c00015 	stw	r3,0(r4)
  80956c:	f800283a 	ret
  809570:	18bfffcc 	andi	r2,r3,65535
  809574:	10001326 	beq	r2,zero,8095c4 <__lo0bits+0x80>
  809578:	0005883a 	mov	r2,zero
  80957c:	19403fcc 	andi	r5,r3,255
  809580:	2800021e 	bne	r5,zero,80958c <__lo0bits+0x48>
  809584:	1806d23a 	srli	r3,r3,8
  809588:	10800204 	addi	r2,r2,8
  80958c:	194003cc 	andi	r5,r3,15
  809590:	2800021e 	bne	r5,zero,80959c <__lo0bits+0x58>
  809594:	1806d13a 	srli	r3,r3,4
  809598:	10800104 	addi	r2,r2,4
  80959c:	194000cc 	andi	r5,r3,3
  8095a0:	2800021e 	bne	r5,zero,8095ac <__lo0bits+0x68>
  8095a4:	1806d0ba 	srli	r3,r3,2
  8095a8:	10800084 	addi	r2,r2,2
  8095ac:	1940004c 	andi	r5,r3,1
  8095b0:	2800081e 	bne	r5,zero,8095d4 <__lo0bits+0x90>
  8095b4:	1806d07a 	srli	r3,r3,1
  8095b8:	1800051e 	bne	r3,zero,8095d0 <__lo0bits+0x8c>
  8095bc:	00800804 	movi	r2,32
  8095c0:	f800283a 	ret
  8095c4:	1806d43a 	srli	r3,r3,16
  8095c8:	00800404 	movi	r2,16
  8095cc:	003feb06 	br	80957c <__alt_mem_onchip_mem+0xff78957c>
  8095d0:	10800044 	addi	r2,r2,1
  8095d4:	20c00015 	stw	r3,0(r4)
  8095d8:	f800283a 	ret
  8095dc:	0005883a 	mov	r2,zero
  8095e0:	f800283a 	ret
  8095e4:	1806d07a 	srli	r3,r3,1
  8095e8:	00800044 	movi	r2,1
  8095ec:	20c00015 	stw	r3,0(r4)
  8095f0:	f800283a 	ret

008095f4 <__i2b>:
  8095f4:	defffd04 	addi	sp,sp,-12
  8095f8:	dc000015 	stw	r16,0(sp)
  8095fc:	04000044 	movi	r16,1
  809600:	dc400115 	stw	r17,4(sp)
  809604:	2823883a 	mov	r17,r5
  809608:	800b883a 	mov	r5,r16
  80960c:	dfc00215 	stw	ra,8(sp)
  809610:	08091e80 	call	8091e8 <_Balloc>
  809614:	14400515 	stw	r17,20(r2)
  809618:	14000415 	stw	r16,16(r2)
  80961c:	dfc00217 	ldw	ra,8(sp)
  809620:	dc400117 	ldw	r17,4(sp)
  809624:	dc000017 	ldw	r16,0(sp)
  809628:	dec00304 	addi	sp,sp,12
  80962c:	f800283a 	ret

00809630 <__multiply>:
  809630:	defffa04 	addi	sp,sp,-24
  809634:	dcc00315 	stw	r19,12(sp)
  809638:	dc800215 	stw	r18,8(sp)
  80963c:	34c00417 	ldw	r19,16(r6)
  809640:	2c800417 	ldw	r18,16(r5)
  809644:	dd000415 	stw	r20,16(sp)
  809648:	dc400115 	stw	r17,4(sp)
  80964c:	dfc00515 	stw	ra,20(sp)
  809650:	dc000015 	stw	r16,0(sp)
  809654:	2829883a 	mov	r20,r5
  809658:	3023883a 	mov	r17,r6
  80965c:	94c0050e 	bge	r18,r19,809674 <__multiply+0x44>
  809660:	9007883a 	mov	r3,r18
  809664:	3029883a 	mov	r20,r6
  809668:	9825883a 	mov	r18,r19
  80966c:	2823883a 	mov	r17,r5
  809670:	1827883a 	mov	r19,r3
  809674:	a0800217 	ldw	r2,8(r20)
  809678:	94e1883a 	add	r16,r18,r19
  80967c:	a1400117 	ldw	r5,4(r20)
  809680:	1400010e 	bge	r2,r16,809688 <__multiply+0x58>
  809684:	29400044 	addi	r5,r5,1
  809688:	08091e80 	call	8091e8 <_Balloc>
  80968c:	8415883a 	add	r10,r16,r16
  809690:	12c00504 	addi	r11,r2,20
  809694:	5295883a 	add	r10,r10,r10
  809698:	5a95883a 	add	r10,r11,r10
  80969c:	5807883a 	mov	r3,r11
  8096a0:	5a80032e 	bgeu	r11,r10,8096b0 <__multiply+0x80>
  8096a4:	18000015 	stw	zero,0(r3)
  8096a8:	18c00104 	addi	r3,r3,4
  8096ac:	1abffd36 	bltu	r3,r10,8096a4 <__alt_mem_onchip_mem+0xff7896a4>
  8096b0:	9ce7883a 	add	r19,r19,r19
  8096b4:	94a5883a 	add	r18,r18,r18
  8096b8:	89800504 	addi	r6,r17,20
  8096bc:	9ce7883a 	add	r19,r19,r19
  8096c0:	a3400504 	addi	r13,r20,20
  8096c4:	94a5883a 	add	r18,r18,r18
  8096c8:	34d9883a 	add	r12,r6,r19
  8096cc:	6c93883a 	add	r9,r13,r18
  8096d0:	3300422e 	bgeu	r6,r12,8097dc <__multiply+0x1ac>
  8096d4:	37c00017 	ldw	ra,0(r6)
  8096d8:	fbffffcc 	andi	r15,ra,65535
  8096dc:	78001b26 	beq	r15,zero,80974c <__multiply+0x11c>
  8096e0:	5811883a 	mov	r8,r11
  8096e4:	681d883a 	mov	r14,r13
  8096e8:	000f883a 	mov	r7,zero
  8096ec:	71000017 	ldw	r4,0(r14)
  8096f0:	40c00017 	ldw	r3,0(r8)
  8096f4:	73800104 	addi	r14,r14,4
  8096f8:	217fffcc 	andi	r5,r4,65535
  8096fc:	2bcb383a 	mul	r5,r5,r15
  809700:	2008d43a 	srli	r4,r4,16
  809704:	1c7fffcc 	andi	r17,r3,65535
  809708:	2c4b883a 	add	r5,r5,r17
  80970c:	29cb883a 	add	r5,r5,r7
  809710:	23c9383a 	mul	r4,r4,r15
  809714:	1806d43a 	srli	r3,r3,16
  809718:	280ed43a 	srli	r7,r5,16
  80971c:	297fffcc 	andi	r5,r5,65535
  809720:	20c7883a 	add	r3,r4,r3
  809724:	19c7883a 	add	r3,r3,r7
  809728:	1808943a 	slli	r4,r3,16
  80972c:	4023883a 	mov	r17,r8
  809730:	180ed43a 	srli	r7,r3,16
  809734:	214ab03a 	or	r5,r4,r5
  809738:	41400015 	stw	r5,0(r8)
  80973c:	42000104 	addi	r8,r8,4
  809740:	727fea36 	bltu	r14,r9,8096ec <__alt_mem_onchip_mem+0xff7896ec>
  809744:	89c00115 	stw	r7,4(r17)
  809748:	37c00017 	ldw	ra,0(r6)
  80974c:	f83ed43a 	srli	ra,ra,16
  809750:	f8001f26 	beq	ra,zero,8097d0 <__multiply+0x1a0>
  809754:	58c00017 	ldw	r3,0(r11)
  809758:	681d883a 	mov	r14,r13
  80975c:	581f883a 	mov	r15,r11
  809760:	1811883a 	mov	r8,r3
  809764:	5825883a 	mov	r18,r11
  809768:	000f883a 	mov	r7,zero
  80976c:	00000106 	br	809774 <__multiply+0x144>
  809770:	8825883a 	mov	r18,r17
  809774:	7140000b 	ldhu	r5,0(r14)
  809778:	4010d43a 	srli	r8,r8,16
  80977c:	193fffcc 	andi	r4,r3,65535
  809780:	2fcb383a 	mul	r5,r5,ra
  809784:	7bc00104 	addi	r15,r15,4
  809788:	73800104 	addi	r14,r14,4
  80978c:	2a0b883a 	add	r5,r5,r8
  809790:	29cb883a 	add	r5,r5,r7
  809794:	2806943a 	slli	r3,r5,16
  809798:	94400104 	addi	r17,r18,4
  80979c:	280ad43a 	srli	r5,r5,16
  8097a0:	1908b03a 	or	r4,r3,r4
  8097a4:	793fff15 	stw	r4,-4(r15)
  8097a8:	70ffff17 	ldw	r3,-4(r14)
  8097ac:	8a000017 	ldw	r8,0(r17)
  8097b0:	1806d43a 	srli	r3,r3,16
  8097b4:	413fffcc 	andi	r4,r8,65535
  8097b8:	1fc7383a 	mul	r3,r3,ra
  8097bc:	1907883a 	add	r3,r3,r4
  8097c0:	1947883a 	add	r3,r3,r5
  8097c4:	180ed43a 	srli	r7,r3,16
  8097c8:	727fe936 	bltu	r14,r9,809770 <__alt_mem_onchip_mem+0xff789770>
  8097cc:	90c00115 	stw	r3,4(r18)
  8097d0:	31800104 	addi	r6,r6,4
  8097d4:	5ac00104 	addi	r11,r11,4
  8097d8:	333fbe36 	bltu	r6,r12,8096d4 <__alt_mem_onchip_mem+0xff7896d4>
  8097dc:	0400090e 	bge	zero,r16,809804 <__multiply+0x1d4>
  8097e0:	50ffff17 	ldw	r3,-4(r10)
  8097e4:	52bfff04 	addi	r10,r10,-4
  8097e8:	18000326 	beq	r3,zero,8097f8 <__multiply+0x1c8>
  8097ec:	00000506 	br	809804 <__multiply+0x1d4>
  8097f0:	50c00017 	ldw	r3,0(r10)
  8097f4:	1800031e 	bne	r3,zero,809804 <__multiply+0x1d4>
  8097f8:	843fffc4 	addi	r16,r16,-1
  8097fc:	52bfff04 	addi	r10,r10,-4
  809800:	803ffb1e 	bne	r16,zero,8097f0 <__alt_mem_onchip_mem+0xff7897f0>
  809804:	14000415 	stw	r16,16(r2)
  809808:	dfc00517 	ldw	ra,20(sp)
  80980c:	dd000417 	ldw	r20,16(sp)
  809810:	dcc00317 	ldw	r19,12(sp)
  809814:	dc800217 	ldw	r18,8(sp)
  809818:	dc400117 	ldw	r17,4(sp)
  80981c:	dc000017 	ldw	r16,0(sp)
  809820:	dec00604 	addi	sp,sp,24
  809824:	f800283a 	ret

00809828 <__pow5mult>:
  809828:	defffa04 	addi	sp,sp,-24
  80982c:	dcc00315 	stw	r19,12(sp)
  809830:	dc000015 	stw	r16,0(sp)
  809834:	dfc00515 	stw	ra,20(sp)
  809838:	dd000415 	stw	r20,16(sp)
  80983c:	dc800215 	stw	r18,8(sp)
  809840:	dc400115 	stw	r17,4(sp)
  809844:	308000cc 	andi	r2,r6,3
  809848:	3021883a 	mov	r16,r6
  80984c:	2027883a 	mov	r19,r4
  809850:	10002f1e 	bne	r2,zero,809910 <__pow5mult+0xe8>
  809854:	2825883a 	mov	r18,r5
  809858:	8021d0ba 	srai	r16,r16,2
  80985c:	80001a26 	beq	r16,zero,8098c8 <__pow5mult+0xa0>
  809860:	9c401217 	ldw	r17,72(r19)
  809864:	8800061e 	bne	r17,zero,809880 <__pow5mult+0x58>
  809868:	00003406 	br	80993c <__pow5mult+0x114>
  80986c:	8021d07a 	srai	r16,r16,1
  809870:	80001526 	beq	r16,zero,8098c8 <__pow5mult+0xa0>
  809874:	88800017 	ldw	r2,0(r17)
  809878:	10001c26 	beq	r2,zero,8098ec <__pow5mult+0xc4>
  80987c:	1023883a 	mov	r17,r2
  809880:	8080004c 	andi	r2,r16,1
  809884:	103ff926 	beq	r2,zero,80986c <__alt_mem_onchip_mem+0xff78986c>
  809888:	880d883a 	mov	r6,r17
  80988c:	900b883a 	mov	r5,r18
  809890:	9809883a 	mov	r4,r19
  809894:	08096300 	call	809630 <__multiply>
  809898:	90001b26 	beq	r18,zero,809908 <__pow5mult+0xe0>
  80989c:	91000117 	ldw	r4,4(r18)
  8098a0:	98c01317 	ldw	r3,76(r19)
  8098a4:	8021d07a 	srai	r16,r16,1
  8098a8:	2109883a 	add	r4,r4,r4
  8098ac:	2109883a 	add	r4,r4,r4
  8098b0:	1907883a 	add	r3,r3,r4
  8098b4:	19000017 	ldw	r4,0(r3)
  8098b8:	91000015 	stw	r4,0(r18)
  8098bc:	1c800015 	stw	r18,0(r3)
  8098c0:	1025883a 	mov	r18,r2
  8098c4:	803feb1e 	bne	r16,zero,809874 <__alt_mem_onchip_mem+0xff789874>
  8098c8:	9005883a 	mov	r2,r18
  8098cc:	dfc00517 	ldw	ra,20(sp)
  8098d0:	dd000417 	ldw	r20,16(sp)
  8098d4:	dcc00317 	ldw	r19,12(sp)
  8098d8:	dc800217 	ldw	r18,8(sp)
  8098dc:	dc400117 	ldw	r17,4(sp)
  8098e0:	dc000017 	ldw	r16,0(sp)
  8098e4:	dec00604 	addi	sp,sp,24
  8098e8:	f800283a 	ret
  8098ec:	880d883a 	mov	r6,r17
  8098f0:	880b883a 	mov	r5,r17
  8098f4:	9809883a 	mov	r4,r19
  8098f8:	08096300 	call	809630 <__multiply>
  8098fc:	88800015 	stw	r2,0(r17)
  809900:	10000015 	stw	zero,0(r2)
  809904:	003fdd06 	br	80987c <__alt_mem_onchip_mem+0xff78987c>
  809908:	1025883a 	mov	r18,r2
  80990c:	003fd706 	br	80986c <__alt_mem_onchip_mem+0xff78986c>
  809910:	10bfffc4 	addi	r2,r2,-1
  809914:	1085883a 	add	r2,r2,r2
  809918:	00c02074 	movhi	r3,129
  80991c:	18d02204 	addi	r3,r3,16520
  809920:	1085883a 	add	r2,r2,r2
  809924:	1885883a 	add	r2,r3,r2
  809928:	11800017 	ldw	r6,0(r2)
  80992c:	000f883a 	mov	r7,zero
  809930:	08092b80 	call	8092b8 <__multadd>
  809934:	1025883a 	mov	r18,r2
  809938:	003fc706 	br	809858 <__alt_mem_onchip_mem+0xff789858>
  80993c:	05000044 	movi	r20,1
  809940:	a00b883a 	mov	r5,r20
  809944:	9809883a 	mov	r4,r19
  809948:	08091e80 	call	8091e8 <_Balloc>
  80994c:	1023883a 	mov	r17,r2
  809950:	00809c44 	movi	r2,625
  809954:	88800515 	stw	r2,20(r17)
  809958:	8d000415 	stw	r20,16(r17)
  80995c:	9c401215 	stw	r17,72(r19)
  809960:	88000015 	stw	zero,0(r17)
  809964:	003fc606 	br	809880 <__alt_mem_onchip_mem+0xff789880>

00809968 <__lshift>:
  809968:	defff904 	addi	sp,sp,-28
  80996c:	dd400515 	stw	r21,20(sp)
  809970:	dcc00315 	stw	r19,12(sp)
  809974:	302bd17a 	srai	r21,r6,5
  809978:	2cc00417 	ldw	r19,16(r5)
  80997c:	28800217 	ldw	r2,8(r5)
  809980:	dd000415 	stw	r20,16(sp)
  809984:	ace7883a 	add	r19,r21,r19
  809988:	dc800215 	stw	r18,8(sp)
  80998c:	dc400115 	stw	r17,4(sp)
  809990:	dc000015 	stw	r16,0(sp)
  809994:	dfc00615 	stw	ra,24(sp)
  809998:	9c000044 	addi	r16,r19,1
  80999c:	2823883a 	mov	r17,r5
  8099a0:	3029883a 	mov	r20,r6
  8099a4:	2025883a 	mov	r18,r4
  8099a8:	29400117 	ldw	r5,4(r5)
  8099ac:	1400030e 	bge	r2,r16,8099bc <__lshift+0x54>
  8099b0:	1085883a 	add	r2,r2,r2
  8099b4:	29400044 	addi	r5,r5,1
  8099b8:	143ffd16 	blt	r2,r16,8099b0 <__alt_mem_onchip_mem+0xff7899b0>
  8099bc:	9009883a 	mov	r4,r18
  8099c0:	08091e80 	call	8091e8 <_Balloc>
  8099c4:	10c00504 	addi	r3,r2,20
  8099c8:	0540070e 	bge	zero,r21,8099e8 <__lshift+0x80>
  8099cc:	ad6b883a 	add	r21,r21,r21
  8099d0:	ad6b883a 	add	r21,r21,r21
  8099d4:	1809883a 	mov	r4,r3
  8099d8:	1d47883a 	add	r3,r3,r21
  8099dc:	20000015 	stw	zero,0(r4)
  8099e0:	21000104 	addi	r4,r4,4
  8099e4:	193ffd1e 	bne	r3,r4,8099dc <__alt_mem_onchip_mem+0xff7899dc>
  8099e8:	8a000417 	ldw	r8,16(r17)
  8099ec:	89000504 	addi	r4,r17,20
  8099f0:	a18007cc 	andi	r6,r20,31
  8099f4:	4211883a 	add	r8,r8,r8
  8099f8:	4211883a 	add	r8,r8,r8
  8099fc:	2211883a 	add	r8,r4,r8
  809a00:	30002326 	beq	r6,zero,809a90 <__lshift+0x128>
  809a04:	02400804 	movi	r9,32
  809a08:	4993c83a 	sub	r9,r9,r6
  809a0c:	000b883a 	mov	r5,zero
  809a10:	21c00017 	ldw	r7,0(r4)
  809a14:	1815883a 	mov	r10,r3
  809a18:	18c00104 	addi	r3,r3,4
  809a1c:	398e983a 	sll	r7,r7,r6
  809a20:	21000104 	addi	r4,r4,4
  809a24:	394ab03a 	or	r5,r7,r5
  809a28:	197fff15 	stw	r5,-4(r3)
  809a2c:	217fff17 	ldw	r5,-4(r4)
  809a30:	2a4ad83a 	srl	r5,r5,r9
  809a34:	223ff636 	bltu	r4,r8,809a10 <__alt_mem_onchip_mem+0xff789a10>
  809a38:	51400115 	stw	r5,4(r10)
  809a3c:	28001a1e 	bne	r5,zero,809aa8 <__lshift+0x140>
  809a40:	843fffc4 	addi	r16,r16,-1
  809a44:	14000415 	stw	r16,16(r2)
  809a48:	88000826 	beq	r17,zero,809a6c <__lshift+0x104>
  809a4c:	89000117 	ldw	r4,4(r17)
  809a50:	90c01317 	ldw	r3,76(r18)
  809a54:	2109883a 	add	r4,r4,r4
  809a58:	2109883a 	add	r4,r4,r4
  809a5c:	1907883a 	add	r3,r3,r4
  809a60:	19000017 	ldw	r4,0(r3)
  809a64:	89000015 	stw	r4,0(r17)
  809a68:	1c400015 	stw	r17,0(r3)
  809a6c:	dfc00617 	ldw	ra,24(sp)
  809a70:	dd400517 	ldw	r21,20(sp)
  809a74:	dd000417 	ldw	r20,16(sp)
  809a78:	dcc00317 	ldw	r19,12(sp)
  809a7c:	dc800217 	ldw	r18,8(sp)
  809a80:	dc400117 	ldw	r17,4(sp)
  809a84:	dc000017 	ldw	r16,0(sp)
  809a88:	dec00704 	addi	sp,sp,28
  809a8c:	f800283a 	ret
  809a90:	21400017 	ldw	r5,0(r4)
  809a94:	18c00104 	addi	r3,r3,4
  809a98:	21000104 	addi	r4,r4,4
  809a9c:	197fff15 	stw	r5,-4(r3)
  809aa0:	223ffb36 	bltu	r4,r8,809a90 <__alt_mem_onchip_mem+0xff789a90>
  809aa4:	003fe606 	br	809a40 <__alt_mem_onchip_mem+0xff789a40>
  809aa8:	9c000084 	addi	r16,r19,2
  809aac:	003fe406 	br	809a40 <__alt_mem_onchip_mem+0xff789a40>

00809ab0 <__mcmp>:
  809ab0:	20800417 	ldw	r2,16(r4)
  809ab4:	28c00417 	ldw	r3,16(r5)
  809ab8:	10c5c83a 	sub	r2,r2,r3
  809abc:	1000111e 	bne	r2,zero,809b04 <__mcmp+0x54>
  809ac0:	18c7883a 	add	r3,r3,r3
  809ac4:	18c7883a 	add	r3,r3,r3
  809ac8:	21000504 	addi	r4,r4,20
  809acc:	29400504 	addi	r5,r5,20
  809ad0:	20c5883a 	add	r2,r4,r3
  809ad4:	28cb883a 	add	r5,r5,r3
  809ad8:	00000106 	br	809ae0 <__mcmp+0x30>
  809adc:	20800a2e 	bgeu	r4,r2,809b08 <__mcmp+0x58>
  809ae0:	10bfff04 	addi	r2,r2,-4
  809ae4:	297fff04 	addi	r5,r5,-4
  809ae8:	11800017 	ldw	r6,0(r2)
  809aec:	28c00017 	ldw	r3,0(r5)
  809af0:	30fffa26 	beq	r6,r3,809adc <__alt_mem_onchip_mem+0xff789adc>
  809af4:	30c00236 	bltu	r6,r3,809b00 <__mcmp+0x50>
  809af8:	00800044 	movi	r2,1
  809afc:	f800283a 	ret
  809b00:	00bfffc4 	movi	r2,-1
  809b04:	f800283a 	ret
  809b08:	0005883a 	mov	r2,zero
  809b0c:	f800283a 	ret

00809b10 <__mdiff>:
  809b10:	28c00417 	ldw	r3,16(r5)
  809b14:	30800417 	ldw	r2,16(r6)
  809b18:	defffa04 	addi	sp,sp,-24
  809b1c:	dcc00315 	stw	r19,12(sp)
  809b20:	dc800215 	stw	r18,8(sp)
  809b24:	dfc00515 	stw	ra,20(sp)
  809b28:	dd000415 	stw	r20,16(sp)
  809b2c:	dc400115 	stw	r17,4(sp)
  809b30:	dc000015 	stw	r16,0(sp)
  809b34:	1887c83a 	sub	r3,r3,r2
  809b38:	2825883a 	mov	r18,r5
  809b3c:	3027883a 	mov	r19,r6
  809b40:	1800141e 	bne	r3,zero,809b94 <__mdiff+0x84>
  809b44:	1085883a 	add	r2,r2,r2
  809b48:	1085883a 	add	r2,r2,r2
  809b4c:	2a000504 	addi	r8,r5,20
  809b50:	34000504 	addi	r16,r6,20
  809b54:	4087883a 	add	r3,r8,r2
  809b58:	8085883a 	add	r2,r16,r2
  809b5c:	00000106 	br	809b64 <__mdiff+0x54>
  809b60:	40c0592e 	bgeu	r8,r3,809cc8 <__mdiff+0x1b8>
  809b64:	18ffff04 	addi	r3,r3,-4
  809b68:	10bfff04 	addi	r2,r2,-4
  809b6c:	19c00017 	ldw	r7,0(r3)
  809b70:	11400017 	ldw	r5,0(r2)
  809b74:	397ffa26 	beq	r7,r5,809b60 <__alt_mem_onchip_mem+0xff789b60>
  809b78:	3940592e 	bgeu	r7,r5,809ce0 <__mdiff+0x1d0>
  809b7c:	9005883a 	mov	r2,r18
  809b80:	4023883a 	mov	r17,r8
  809b84:	9825883a 	mov	r18,r19
  809b88:	05000044 	movi	r20,1
  809b8c:	1027883a 	mov	r19,r2
  809b90:	00000406 	br	809ba4 <__mdiff+0x94>
  809b94:	18005616 	blt	r3,zero,809cf0 <__mdiff+0x1e0>
  809b98:	34400504 	addi	r17,r6,20
  809b9c:	2c000504 	addi	r16,r5,20
  809ba0:	0029883a 	mov	r20,zero
  809ba4:	91400117 	ldw	r5,4(r18)
  809ba8:	08091e80 	call	8091e8 <_Balloc>
  809bac:	92400417 	ldw	r9,16(r18)
  809bb0:	9b000417 	ldw	r12,16(r19)
  809bb4:	12c00504 	addi	r11,r2,20
  809bb8:	4a51883a 	add	r8,r9,r9
  809bbc:	6319883a 	add	r12,r12,r12
  809bc0:	4211883a 	add	r8,r8,r8
  809bc4:	6319883a 	add	r12,r12,r12
  809bc8:	15000315 	stw	r20,12(r2)
  809bcc:	8211883a 	add	r8,r16,r8
  809bd0:	8b19883a 	add	r12,r17,r12
  809bd4:	0007883a 	mov	r3,zero
  809bd8:	81400017 	ldw	r5,0(r16)
  809bdc:	89c00017 	ldw	r7,0(r17)
  809be0:	59800104 	addi	r6,r11,4
  809be4:	293fffcc 	andi	r4,r5,65535
  809be8:	20c7883a 	add	r3,r4,r3
  809bec:	393fffcc 	andi	r4,r7,65535
  809bf0:	1909c83a 	sub	r4,r3,r4
  809bf4:	280ad43a 	srli	r5,r5,16
  809bf8:	380ed43a 	srli	r7,r7,16
  809bfc:	2007d43a 	srai	r3,r4,16
  809c00:	213fffcc 	andi	r4,r4,65535
  809c04:	29cbc83a 	sub	r5,r5,r7
  809c08:	28c7883a 	add	r3,r5,r3
  809c0c:	180a943a 	slli	r5,r3,16
  809c10:	8c400104 	addi	r17,r17,4
  809c14:	84000104 	addi	r16,r16,4
  809c18:	2908b03a 	or	r4,r5,r4
  809c1c:	59000015 	stw	r4,0(r11)
  809c20:	1807d43a 	srai	r3,r3,16
  809c24:	3015883a 	mov	r10,r6
  809c28:	3017883a 	mov	r11,r6
  809c2c:	8b3fea36 	bltu	r17,r12,809bd8 <__alt_mem_onchip_mem+0xff789bd8>
  809c30:	8200162e 	bgeu	r16,r8,809c8c <__mdiff+0x17c>
  809c34:	8017883a 	mov	r11,r16
  809c38:	59400017 	ldw	r5,0(r11)
  809c3c:	31800104 	addi	r6,r6,4
  809c40:	5ac00104 	addi	r11,r11,4
  809c44:	293fffcc 	andi	r4,r5,65535
  809c48:	20c7883a 	add	r3,r4,r3
  809c4c:	280ed43a 	srli	r7,r5,16
  809c50:	180bd43a 	srai	r5,r3,16
  809c54:	193fffcc 	andi	r4,r3,65535
  809c58:	3947883a 	add	r3,r7,r5
  809c5c:	180a943a 	slli	r5,r3,16
  809c60:	1807d43a 	srai	r3,r3,16
  809c64:	2908b03a 	or	r4,r5,r4
  809c68:	313fff15 	stw	r4,-4(r6)
  809c6c:	5a3ff236 	bltu	r11,r8,809c38 <__alt_mem_onchip_mem+0xff789c38>
  809c70:	0406303a 	nor	r3,zero,r16
  809c74:	1a07883a 	add	r3,r3,r8
  809c78:	1806d0ba 	srli	r3,r3,2
  809c7c:	18c00044 	addi	r3,r3,1
  809c80:	18c7883a 	add	r3,r3,r3
  809c84:	18c7883a 	add	r3,r3,r3
  809c88:	50d5883a 	add	r10,r10,r3
  809c8c:	50ffff04 	addi	r3,r10,-4
  809c90:	2000041e 	bne	r4,zero,809ca4 <__mdiff+0x194>
  809c94:	18ffff04 	addi	r3,r3,-4
  809c98:	19000017 	ldw	r4,0(r3)
  809c9c:	4a7fffc4 	addi	r9,r9,-1
  809ca0:	203ffc26 	beq	r4,zero,809c94 <__alt_mem_onchip_mem+0xff789c94>
  809ca4:	12400415 	stw	r9,16(r2)
  809ca8:	dfc00517 	ldw	ra,20(sp)
  809cac:	dd000417 	ldw	r20,16(sp)
  809cb0:	dcc00317 	ldw	r19,12(sp)
  809cb4:	dc800217 	ldw	r18,8(sp)
  809cb8:	dc400117 	ldw	r17,4(sp)
  809cbc:	dc000017 	ldw	r16,0(sp)
  809cc0:	dec00604 	addi	sp,sp,24
  809cc4:	f800283a 	ret
  809cc8:	000b883a 	mov	r5,zero
  809ccc:	08091e80 	call	8091e8 <_Balloc>
  809cd0:	00c00044 	movi	r3,1
  809cd4:	10c00415 	stw	r3,16(r2)
  809cd8:	10000515 	stw	zero,20(r2)
  809cdc:	003ff206 	br	809ca8 <__alt_mem_onchip_mem+0xff789ca8>
  809ce0:	8023883a 	mov	r17,r16
  809ce4:	0029883a 	mov	r20,zero
  809ce8:	4021883a 	mov	r16,r8
  809cec:	003fad06 	br	809ba4 <__alt_mem_onchip_mem+0xff789ba4>
  809cf0:	9005883a 	mov	r2,r18
  809cf4:	94400504 	addi	r17,r18,20
  809cf8:	9c000504 	addi	r16,r19,20
  809cfc:	9825883a 	mov	r18,r19
  809d00:	05000044 	movi	r20,1
  809d04:	1027883a 	mov	r19,r2
  809d08:	003fa606 	br	809ba4 <__alt_mem_onchip_mem+0xff789ba4>

00809d0c <__ulp>:
  809d0c:	295ffc2c 	andhi	r5,r5,32752
  809d10:	00bf3034 	movhi	r2,64704
  809d14:	2887883a 	add	r3,r5,r2
  809d18:	00c0020e 	bge	zero,r3,809d24 <__ulp+0x18>
  809d1c:	0005883a 	mov	r2,zero
  809d20:	f800283a 	ret
  809d24:	00c7c83a 	sub	r3,zero,r3
  809d28:	1807d53a 	srai	r3,r3,20
  809d2c:	008004c4 	movi	r2,19
  809d30:	10c00b0e 	bge	r2,r3,809d60 <__ulp+0x54>
  809d34:	18bffb04 	addi	r2,r3,-20
  809d38:	01000784 	movi	r4,30
  809d3c:	0007883a 	mov	r3,zero
  809d40:	20800516 	blt	r4,r2,809d58 <__ulp+0x4c>
  809d44:	010007c4 	movi	r4,31
  809d48:	2089c83a 	sub	r4,r4,r2
  809d4c:	00800044 	movi	r2,1
  809d50:	1104983a 	sll	r2,r2,r4
  809d54:	f800283a 	ret
  809d58:	00800044 	movi	r2,1
  809d5c:	f800283a 	ret
  809d60:	01400234 	movhi	r5,8
  809d64:	28c7d83a 	sra	r3,r5,r3
  809d68:	0005883a 	mov	r2,zero
  809d6c:	f800283a 	ret

00809d70 <__b2d>:
  809d70:	defffa04 	addi	sp,sp,-24
  809d74:	dc000015 	stw	r16,0(sp)
  809d78:	24000417 	ldw	r16,16(r4)
  809d7c:	dc400115 	stw	r17,4(sp)
  809d80:	24400504 	addi	r17,r4,20
  809d84:	8421883a 	add	r16,r16,r16
  809d88:	8421883a 	add	r16,r16,r16
  809d8c:	8c21883a 	add	r16,r17,r16
  809d90:	dc800215 	stw	r18,8(sp)
  809d94:	84bfff17 	ldw	r18,-4(r16)
  809d98:	dd000415 	stw	r20,16(sp)
  809d9c:	dcc00315 	stw	r19,12(sp)
  809da0:	9009883a 	mov	r4,r18
  809da4:	2829883a 	mov	r20,r5
  809da8:	dfc00515 	stw	ra,20(sp)
  809dac:	08094dc0 	call	8094dc <__hi0bits>
  809db0:	00c00804 	movi	r3,32
  809db4:	1889c83a 	sub	r4,r3,r2
  809db8:	a1000015 	stw	r4,0(r20)
  809dbc:	01000284 	movi	r4,10
  809dc0:	84ffff04 	addi	r19,r16,-4
  809dc4:	20801216 	blt	r4,r2,809e10 <__b2d+0xa0>
  809dc8:	018002c4 	movi	r6,11
  809dcc:	308dc83a 	sub	r6,r6,r2
  809dd0:	9186d83a 	srl	r3,r18,r6
  809dd4:	18cffc34 	orhi	r3,r3,16368
  809dd8:	8cc0212e 	bgeu	r17,r19,809e60 <__b2d+0xf0>
  809ddc:	813ffe17 	ldw	r4,-8(r16)
  809de0:	218cd83a 	srl	r6,r4,r6
  809de4:	10800544 	addi	r2,r2,21
  809de8:	9084983a 	sll	r2,r18,r2
  809dec:	1184b03a 	or	r2,r2,r6
  809df0:	dfc00517 	ldw	ra,20(sp)
  809df4:	dd000417 	ldw	r20,16(sp)
  809df8:	dcc00317 	ldw	r19,12(sp)
  809dfc:	dc800217 	ldw	r18,8(sp)
  809e00:	dc400117 	ldw	r17,4(sp)
  809e04:	dc000017 	ldw	r16,0(sp)
  809e08:	dec00604 	addi	sp,sp,24
  809e0c:	f800283a 	ret
  809e10:	8cc00f2e 	bgeu	r17,r19,809e50 <__b2d+0xe0>
  809e14:	117ffd44 	addi	r5,r2,-11
  809e18:	80bffe17 	ldw	r2,-8(r16)
  809e1c:	28000e26 	beq	r5,zero,809e58 <__b2d+0xe8>
  809e20:	1949c83a 	sub	r4,r3,r5
  809e24:	9164983a 	sll	r18,r18,r5
  809e28:	1106d83a 	srl	r3,r2,r4
  809e2c:	81bffe04 	addi	r6,r16,-8
  809e30:	948ffc34 	orhi	r18,r18,16368
  809e34:	90c6b03a 	or	r3,r18,r3
  809e38:	89800e2e 	bgeu	r17,r6,809e74 <__b2d+0x104>
  809e3c:	81bffd17 	ldw	r6,-12(r16)
  809e40:	1144983a 	sll	r2,r2,r5
  809e44:	310ad83a 	srl	r5,r6,r4
  809e48:	2884b03a 	or	r2,r5,r2
  809e4c:	003fe806 	br	809df0 <__alt_mem_onchip_mem+0xff789df0>
  809e50:	10bffd44 	addi	r2,r2,-11
  809e54:	1000041e 	bne	r2,zero,809e68 <__b2d+0xf8>
  809e58:	90cffc34 	orhi	r3,r18,16368
  809e5c:	003fe406 	br	809df0 <__alt_mem_onchip_mem+0xff789df0>
  809e60:	000d883a 	mov	r6,zero
  809e64:	003fdf06 	br	809de4 <__alt_mem_onchip_mem+0xff789de4>
  809e68:	90a4983a 	sll	r18,r18,r2
  809e6c:	0005883a 	mov	r2,zero
  809e70:	003ff906 	br	809e58 <__alt_mem_onchip_mem+0xff789e58>
  809e74:	1144983a 	sll	r2,r2,r5
  809e78:	003fdd06 	br	809df0 <__alt_mem_onchip_mem+0xff789df0>

00809e7c <__d2b>:
  809e7c:	defff804 	addi	sp,sp,-32
  809e80:	dc000215 	stw	r16,8(sp)
  809e84:	3021883a 	mov	r16,r6
  809e88:	dc400315 	stw	r17,12(sp)
  809e8c:	8022907a 	slli	r17,r16,1
  809e90:	dd000615 	stw	r20,24(sp)
  809e94:	2829883a 	mov	r20,r5
  809e98:	01400044 	movi	r5,1
  809e9c:	dcc00515 	stw	r19,20(sp)
  809ea0:	dc800415 	stw	r18,16(sp)
  809ea4:	dfc00715 	stw	ra,28(sp)
  809ea8:	3825883a 	mov	r18,r7
  809eac:	8822d57a 	srli	r17,r17,21
  809eb0:	08091e80 	call	8091e8 <_Balloc>
  809eb4:	1027883a 	mov	r19,r2
  809eb8:	00800434 	movhi	r2,16
  809ebc:	10bfffc4 	addi	r2,r2,-1
  809ec0:	808c703a 	and	r6,r16,r2
  809ec4:	88000126 	beq	r17,zero,809ecc <__d2b+0x50>
  809ec8:	31800434 	orhi	r6,r6,16
  809ecc:	d9800015 	stw	r6,0(sp)
  809ed0:	a0002426 	beq	r20,zero,809f64 <__d2b+0xe8>
  809ed4:	d9000104 	addi	r4,sp,4
  809ed8:	dd000115 	stw	r20,4(sp)
  809edc:	08095440 	call	809544 <__lo0bits>
  809ee0:	d8c00017 	ldw	r3,0(sp)
  809ee4:	10002f1e 	bne	r2,zero,809fa4 <__d2b+0x128>
  809ee8:	d9000117 	ldw	r4,4(sp)
  809eec:	99000515 	stw	r4,20(r19)
  809ef0:	1821003a 	cmpeq	r16,r3,zero
  809ef4:	01000084 	movi	r4,2
  809ef8:	2421c83a 	sub	r16,r4,r16
  809efc:	98c00615 	stw	r3,24(r19)
  809f00:	9c000415 	stw	r16,16(r19)
  809f04:	88001f1e 	bne	r17,zero,809f84 <__d2b+0x108>
  809f08:	10bef384 	addi	r2,r2,-1074
  809f0c:	90800015 	stw	r2,0(r18)
  809f10:	00900034 	movhi	r2,16384
  809f14:	10bfffc4 	addi	r2,r2,-1
  809f18:	8085883a 	add	r2,r16,r2
  809f1c:	1085883a 	add	r2,r2,r2
  809f20:	1085883a 	add	r2,r2,r2
  809f24:	9885883a 	add	r2,r19,r2
  809f28:	11000517 	ldw	r4,20(r2)
  809f2c:	8020917a 	slli	r16,r16,5
  809f30:	08094dc0 	call	8094dc <__hi0bits>
  809f34:	d8c00817 	ldw	r3,32(sp)
  809f38:	8085c83a 	sub	r2,r16,r2
  809f3c:	18800015 	stw	r2,0(r3)
  809f40:	9805883a 	mov	r2,r19
  809f44:	dfc00717 	ldw	ra,28(sp)
  809f48:	dd000617 	ldw	r20,24(sp)
  809f4c:	dcc00517 	ldw	r19,20(sp)
  809f50:	dc800417 	ldw	r18,16(sp)
  809f54:	dc400317 	ldw	r17,12(sp)
  809f58:	dc000217 	ldw	r16,8(sp)
  809f5c:	dec00804 	addi	sp,sp,32
  809f60:	f800283a 	ret
  809f64:	d809883a 	mov	r4,sp
  809f68:	08095440 	call	809544 <__lo0bits>
  809f6c:	d8c00017 	ldw	r3,0(sp)
  809f70:	04000044 	movi	r16,1
  809f74:	9c000415 	stw	r16,16(r19)
  809f78:	98c00515 	stw	r3,20(r19)
  809f7c:	10800804 	addi	r2,r2,32
  809f80:	883fe126 	beq	r17,zero,809f08 <__alt_mem_onchip_mem+0xff789f08>
  809f84:	00c00d44 	movi	r3,53
  809f88:	8c7ef344 	addi	r17,r17,-1075
  809f8c:	88a3883a 	add	r17,r17,r2
  809f90:	1885c83a 	sub	r2,r3,r2
  809f94:	d8c00817 	ldw	r3,32(sp)
  809f98:	94400015 	stw	r17,0(r18)
  809f9c:	18800015 	stw	r2,0(r3)
  809fa0:	003fe706 	br	809f40 <__alt_mem_onchip_mem+0xff789f40>
  809fa4:	01000804 	movi	r4,32
  809fa8:	2089c83a 	sub	r4,r4,r2
  809fac:	1908983a 	sll	r4,r3,r4
  809fb0:	d9400117 	ldw	r5,4(sp)
  809fb4:	1886d83a 	srl	r3,r3,r2
  809fb8:	2148b03a 	or	r4,r4,r5
  809fbc:	99000515 	stw	r4,20(r19)
  809fc0:	d8c00015 	stw	r3,0(sp)
  809fc4:	003fca06 	br	809ef0 <__alt_mem_onchip_mem+0xff789ef0>

00809fc8 <__ratio>:
  809fc8:	defff904 	addi	sp,sp,-28
  809fcc:	dc400315 	stw	r17,12(sp)
  809fd0:	2823883a 	mov	r17,r5
  809fd4:	d9400104 	addi	r5,sp,4
  809fd8:	dfc00615 	stw	ra,24(sp)
  809fdc:	dcc00515 	stw	r19,20(sp)
  809fe0:	dc800415 	stw	r18,16(sp)
  809fe4:	2027883a 	mov	r19,r4
  809fe8:	dc000215 	stw	r16,8(sp)
  809fec:	0809d700 	call	809d70 <__b2d>
  809ff0:	d80b883a 	mov	r5,sp
  809ff4:	8809883a 	mov	r4,r17
  809ff8:	1025883a 	mov	r18,r2
  809ffc:	1821883a 	mov	r16,r3
  80a000:	0809d700 	call	809d70 <__b2d>
  80a004:	8a000417 	ldw	r8,16(r17)
  80a008:	99000417 	ldw	r4,16(r19)
  80a00c:	d9400117 	ldw	r5,4(sp)
  80a010:	2209c83a 	sub	r4,r4,r8
  80a014:	2010917a 	slli	r8,r4,5
  80a018:	d9000017 	ldw	r4,0(sp)
  80a01c:	2909c83a 	sub	r4,r5,r4
  80a020:	4109883a 	add	r4,r8,r4
  80a024:	01000e0e 	bge	zero,r4,80a060 <__ratio+0x98>
  80a028:	2008953a 	slli	r4,r4,20
  80a02c:	2421883a 	add	r16,r4,r16
  80a030:	100d883a 	mov	r6,r2
  80a034:	180f883a 	mov	r7,r3
  80a038:	9009883a 	mov	r4,r18
  80a03c:	800b883a 	mov	r5,r16
  80a040:	080dbc40 	call	80dbc4 <__divdf3>
  80a044:	dfc00617 	ldw	ra,24(sp)
  80a048:	dcc00517 	ldw	r19,20(sp)
  80a04c:	dc800417 	ldw	r18,16(sp)
  80a050:	dc400317 	ldw	r17,12(sp)
  80a054:	dc000217 	ldw	r16,8(sp)
  80a058:	dec00704 	addi	sp,sp,28
  80a05c:	f800283a 	ret
  80a060:	2008953a 	slli	r4,r4,20
  80a064:	1907c83a 	sub	r3,r3,r4
  80a068:	003ff106 	br	80a030 <__alt_mem_onchip_mem+0xff78a030>

0080a06c <_mprec_log10>:
  80a06c:	defffe04 	addi	sp,sp,-8
  80a070:	dc000015 	stw	r16,0(sp)
  80a074:	dfc00115 	stw	ra,4(sp)
  80a078:	008005c4 	movi	r2,23
  80a07c:	2021883a 	mov	r16,r4
  80a080:	11000d0e 	bge	r2,r4,80a0b8 <_mprec_log10+0x4c>
  80a084:	0005883a 	mov	r2,zero
  80a088:	00cffc34 	movhi	r3,16368
  80a08c:	843fffc4 	addi	r16,r16,-1
  80a090:	000d883a 	mov	r6,zero
  80a094:	01d00934 	movhi	r7,16420
  80a098:	1009883a 	mov	r4,r2
  80a09c:	180b883a 	mov	r5,r3
  80a0a0:	080e7040 	call	80e704 <__muldf3>
  80a0a4:	803ff91e 	bne	r16,zero,80a08c <__alt_mem_onchip_mem+0xff78a08c>
  80a0a8:	dfc00117 	ldw	ra,4(sp)
  80a0ac:	dc000017 	ldw	r16,0(sp)
  80a0b0:	dec00204 	addi	sp,sp,8
  80a0b4:	f800283a 	ret
  80a0b8:	202090fa 	slli	r16,r4,3
  80a0bc:	00802074 	movhi	r2,129
  80a0c0:	10903904 	addi	r2,r2,16612
  80a0c4:	1421883a 	add	r16,r2,r16
  80a0c8:	80800017 	ldw	r2,0(r16)
  80a0cc:	80c00117 	ldw	r3,4(r16)
  80a0d0:	dfc00117 	ldw	ra,4(sp)
  80a0d4:	dc000017 	ldw	r16,0(sp)
  80a0d8:	dec00204 	addi	sp,sp,8
  80a0dc:	f800283a 	ret

0080a0e0 <__copybits>:
  80a0e0:	297fffc4 	addi	r5,r5,-1
  80a0e4:	280fd17a 	srai	r7,r5,5
  80a0e8:	30c00417 	ldw	r3,16(r6)
  80a0ec:	30800504 	addi	r2,r6,20
  80a0f0:	39c00044 	addi	r7,r7,1
  80a0f4:	18c7883a 	add	r3,r3,r3
  80a0f8:	39cf883a 	add	r7,r7,r7
  80a0fc:	18c7883a 	add	r3,r3,r3
  80a100:	39cf883a 	add	r7,r7,r7
  80a104:	10c7883a 	add	r3,r2,r3
  80a108:	21cf883a 	add	r7,r4,r7
  80a10c:	10c00d2e 	bgeu	r2,r3,80a144 <__copybits+0x64>
  80a110:	200b883a 	mov	r5,r4
  80a114:	12000017 	ldw	r8,0(r2)
  80a118:	29400104 	addi	r5,r5,4
  80a11c:	10800104 	addi	r2,r2,4
  80a120:	2a3fff15 	stw	r8,-4(r5)
  80a124:	10fffb36 	bltu	r2,r3,80a114 <__alt_mem_onchip_mem+0xff78a114>
  80a128:	1985c83a 	sub	r2,r3,r6
  80a12c:	10bffac4 	addi	r2,r2,-21
  80a130:	1004d0ba 	srli	r2,r2,2
  80a134:	10800044 	addi	r2,r2,1
  80a138:	1085883a 	add	r2,r2,r2
  80a13c:	1085883a 	add	r2,r2,r2
  80a140:	2089883a 	add	r4,r4,r2
  80a144:	21c0032e 	bgeu	r4,r7,80a154 <__copybits+0x74>
  80a148:	20000015 	stw	zero,0(r4)
  80a14c:	21000104 	addi	r4,r4,4
  80a150:	21fffd36 	bltu	r4,r7,80a148 <__alt_mem_onchip_mem+0xff78a148>
  80a154:	f800283a 	ret

0080a158 <__any_on>:
  80a158:	20c00417 	ldw	r3,16(r4)
  80a15c:	2805d17a 	srai	r2,r5,5
  80a160:	21000504 	addi	r4,r4,20
  80a164:	18800d0e 	bge	r3,r2,80a19c <__any_on+0x44>
  80a168:	18c7883a 	add	r3,r3,r3
  80a16c:	18c7883a 	add	r3,r3,r3
  80a170:	20c7883a 	add	r3,r4,r3
  80a174:	20c0192e 	bgeu	r4,r3,80a1dc <__any_on+0x84>
  80a178:	18bfff17 	ldw	r2,-4(r3)
  80a17c:	18ffff04 	addi	r3,r3,-4
  80a180:	1000041e 	bne	r2,zero,80a194 <__any_on+0x3c>
  80a184:	20c0142e 	bgeu	r4,r3,80a1d8 <__any_on+0x80>
  80a188:	18ffff04 	addi	r3,r3,-4
  80a18c:	19400017 	ldw	r5,0(r3)
  80a190:	283ffc26 	beq	r5,zero,80a184 <__alt_mem_onchip_mem+0xff78a184>
  80a194:	00800044 	movi	r2,1
  80a198:	f800283a 	ret
  80a19c:	10c00a0e 	bge	r2,r3,80a1c8 <__any_on+0x70>
  80a1a0:	1085883a 	add	r2,r2,r2
  80a1a4:	1085883a 	add	r2,r2,r2
  80a1a8:	294007cc 	andi	r5,r5,31
  80a1ac:	2087883a 	add	r3,r4,r2
  80a1b0:	283ff026 	beq	r5,zero,80a174 <__alt_mem_onchip_mem+0xff78a174>
  80a1b4:	19800017 	ldw	r6,0(r3)
  80a1b8:	3144d83a 	srl	r2,r6,r5
  80a1bc:	114a983a 	sll	r5,r2,r5
  80a1c0:	317ff41e 	bne	r6,r5,80a194 <__alt_mem_onchip_mem+0xff78a194>
  80a1c4:	003feb06 	br	80a174 <__alt_mem_onchip_mem+0xff78a174>
  80a1c8:	1085883a 	add	r2,r2,r2
  80a1cc:	1085883a 	add	r2,r2,r2
  80a1d0:	2087883a 	add	r3,r4,r2
  80a1d4:	003fe706 	br	80a174 <__alt_mem_onchip_mem+0xff78a174>
  80a1d8:	f800283a 	ret
  80a1dc:	0005883a 	mov	r2,zero
  80a1e0:	f800283a 	ret

0080a1e4 <_putc_r>:
  80a1e4:	defffc04 	addi	sp,sp,-16
  80a1e8:	dc000215 	stw	r16,8(sp)
  80a1ec:	dfc00315 	stw	ra,12(sp)
  80a1f0:	2021883a 	mov	r16,r4
  80a1f4:	20000226 	beq	r4,zero,80a200 <_putc_r+0x1c>
  80a1f8:	20800e17 	ldw	r2,56(r4)
  80a1fc:	10001b26 	beq	r2,zero,80a26c <_putc_r+0x88>
  80a200:	30800217 	ldw	r2,8(r6)
  80a204:	10bfffc4 	addi	r2,r2,-1
  80a208:	30800215 	stw	r2,8(r6)
  80a20c:	10000a16 	blt	r2,zero,80a238 <_putc_r+0x54>
  80a210:	30800017 	ldw	r2,0(r6)
  80a214:	11400005 	stb	r5,0(r2)
  80a218:	30800017 	ldw	r2,0(r6)
  80a21c:	10c00044 	addi	r3,r2,1
  80a220:	30c00015 	stw	r3,0(r6)
  80a224:	10800003 	ldbu	r2,0(r2)
  80a228:	dfc00317 	ldw	ra,12(sp)
  80a22c:	dc000217 	ldw	r16,8(sp)
  80a230:	dec00404 	addi	sp,sp,16
  80a234:	f800283a 	ret
  80a238:	30c00617 	ldw	r3,24(r6)
  80a23c:	10c00616 	blt	r2,r3,80a258 <_putc_r+0x74>
  80a240:	30800017 	ldw	r2,0(r6)
  80a244:	00c00284 	movi	r3,10
  80a248:	11400005 	stb	r5,0(r2)
  80a24c:	30800017 	ldw	r2,0(r6)
  80a250:	11400003 	ldbu	r5,0(r2)
  80a254:	28fff11e 	bne	r5,r3,80a21c <__alt_mem_onchip_mem+0xff78a21c>
  80a258:	8009883a 	mov	r4,r16
  80a25c:	dfc00317 	ldw	ra,12(sp)
  80a260:	dc000217 	ldw	r16,8(sp)
  80a264:	dec00404 	addi	sp,sp,16
  80a268:	080c0a81 	jmpi	80c0a8 <__swbuf_r>
  80a26c:	d9400015 	stw	r5,0(sp)
  80a270:	d9800115 	stw	r6,4(sp)
  80a274:	08024940 	call	802494 <__sinit>
  80a278:	d9800117 	ldw	r6,4(sp)
  80a27c:	d9400017 	ldw	r5,0(sp)
  80a280:	003fdf06 	br	80a200 <__alt_mem_onchip_mem+0xff78a200>

0080a284 <putc>:
  80a284:	00802074 	movhi	r2,129
  80a288:	defffc04 	addi	sp,sp,-16
  80a28c:	1097f204 	addi	r2,r2,24520
  80a290:	dc000115 	stw	r16,4(sp)
  80a294:	14000017 	ldw	r16,0(r2)
  80a298:	dc400215 	stw	r17,8(sp)
  80a29c:	dfc00315 	stw	ra,12(sp)
  80a2a0:	2023883a 	mov	r17,r4
  80a2a4:	80000226 	beq	r16,zero,80a2b0 <putc+0x2c>
  80a2a8:	80800e17 	ldw	r2,56(r16)
  80a2ac:	10001a26 	beq	r2,zero,80a318 <putc+0x94>
  80a2b0:	28800217 	ldw	r2,8(r5)
  80a2b4:	10bfffc4 	addi	r2,r2,-1
  80a2b8:	28800215 	stw	r2,8(r5)
  80a2bc:	10000b16 	blt	r2,zero,80a2ec <putc+0x68>
  80a2c0:	28800017 	ldw	r2,0(r5)
  80a2c4:	14400005 	stb	r17,0(r2)
  80a2c8:	28800017 	ldw	r2,0(r5)
  80a2cc:	10c00044 	addi	r3,r2,1
  80a2d0:	28c00015 	stw	r3,0(r5)
  80a2d4:	10800003 	ldbu	r2,0(r2)
  80a2d8:	dfc00317 	ldw	ra,12(sp)
  80a2dc:	dc400217 	ldw	r17,8(sp)
  80a2e0:	dc000117 	ldw	r16,4(sp)
  80a2e4:	dec00404 	addi	sp,sp,16
  80a2e8:	f800283a 	ret
  80a2ec:	28c00617 	ldw	r3,24(r5)
  80a2f0:	10c00e16 	blt	r2,r3,80a32c <putc+0xa8>
  80a2f4:	28800017 	ldw	r2,0(r5)
  80a2f8:	01000284 	movi	r4,10
  80a2fc:	14400005 	stb	r17,0(r2)
  80a300:	28800017 	ldw	r2,0(r5)
  80a304:	10c00003 	ldbu	r3,0(r2)
  80a308:	193ff01e 	bne	r3,r4,80a2cc <__alt_mem_onchip_mem+0xff78a2cc>
  80a30c:	280d883a 	mov	r6,r5
  80a310:	180b883a 	mov	r5,r3
  80a314:	00000706 	br	80a334 <putc+0xb0>
  80a318:	8009883a 	mov	r4,r16
  80a31c:	d9400015 	stw	r5,0(sp)
  80a320:	08024940 	call	802494 <__sinit>
  80a324:	d9400017 	ldw	r5,0(sp)
  80a328:	003fe106 	br	80a2b0 <__alt_mem_onchip_mem+0xff78a2b0>
  80a32c:	280d883a 	mov	r6,r5
  80a330:	880b883a 	mov	r5,r17
  80a334:	8009883a 	mov	r4,r16
  80a338:	dfc00317 	ldw	ra,12(sp)
  80a33c:	dc400217 	ldw	r17,8(sp)
  80a340:	dc000117 	ldw	r16,4(sp)
  80a344:	dec00404 	addi	sp,sp,16
  80a348:	080c0a81 	jmpi	80c0a8 <__swbuf_r>

0080a34c <_read_r>:
  80a34c:	defffd04 	addi	sp,sp,-12
  80a350:	2805883a 	mov	r2,r5
  80a354:	dc000015 	stw	r16,0(sp)
  80a358:	04002074 	movhi	r16,129
  80a35c:	dc400115 	stw	r17,4(sp)
  80a360:	300b883a 	mov	r5,r6
  80a364:	841f5304 	addi	r16,r16,32076
  80a368:	2023883a 	mov	r17,r4
  80a36c:	380d883a 	mov	r6,r7
  80a370:	1009883a 	mov	r4,r2
  80a374:	dfc00215 	stw	ra,8(sp)
  80a378:	80000015 	stw	zero,0(r16)
  80a37c:	08104800 	call	810480 <read>
  80a380:	00ffffc4 	movi	r3,-1
  80a384:	10c00526 	beq	r2,r3,80a39c <_read_r+0x50>
  80a388:	dfc00217 	ldw	ra,8(sp)
  80a38c:	dc400117 	ldw	r17,4(sp)
  80a390:	dc000017 	ldw	r16,0(sp)
  80a394:	dec00304 	addi	sp,sp,12
  80a398:	f800283a 	ret
  80a39c:	80c00017 	ldw	r3,0(r16)
  80a3a0:	183ff926 	beq	r3,zero,80a388 <__alt_mem_onchip_mem+0xff78a388>
  80a3a4:	88c00015 	stw	r3,0(r17)
  80a3a8:	003ff706 	br	80a388 <__alt_mem_onchip_mem+0xff78a388>

0080a3ac <_realloc_r>:
  80a3ac:	defff604 	addi	sp,sp,-40
  80a3b0:	dc800215 	stw	r18,8(sp)
  80a3b4:	dfc00915 	stw	ra,36(sp)
  80a3b8:	df000815 	stw	fp,32(sp)
  80a3bc:	ddc00715 	stw	r23,28(sp)
  80a3c0:	dd800615 	stw	r22,24(sp)
  80a3c4:	dd400515 	stw	r21,20(sp)
  80a3c8:	dd000415 	stw	r20,16(sp)
  80a3cc:	dcc00315 	stw	r19,12(sp)
  80a3d0:	dc400115 	stw	r17,4(sp)
  80a3d4:	dc000015 	stw	r16,0(sp)
  80a3d8:	3025883a 	mov	r18,r6
  80a3dc:	2800b726 	beq	r5,zero,80a6bc <_realloc_r+0x310>
  80a3e0:	282b883a 	mov	r21,r5
  80a3e4:	2029883a 	mov	r20,r4
  80a3e8:	08101a80 	call	8101a8 <__malloc_lock>
  80a3ec:	a8bfff17 	ldw	r2,-4(r21)
  80a3f0:	043fff04 	movi	r16,-4
  80a3f4:	90c002c4 	addi	r3,r18,11
  80a3f8:	01000584 	movi	r4,22
  80a3fc:	acfffe04 	addi	r19,r21,-8
  80a400:	1420703a 	and	r16,r2,r16
  80a404:	20c0332e 	bgeu	r4,r3,80a4d4 <_realloc_r+0x128>
  80a408:	047ffe04 	movi	r17,-8
  80a40c:	1c62703a 	and	r17,r3,r17
  80a410:	8807883a 	mov	r3,r17
  80a414:	88005816 	blt	r17,zero,80a578 <_realloc_r+0x1cc>
  80a418:	8c805736 	bltu	r17,r18,80a578 <_realloc_r+0x1cc>
  80a41c:	80c0300e 	bge	r16,r3,80a4e0 <_realloc_r+0x134>
  80a420:	07002074 	movhi	fp,129
  80a424:	e711cd04 	addi	fp,fp,18228
  80a428:	e1c00217 	ldw	r7,8(fp)
  80a42c:	9c09883a 	add	r4,r19,r16
  80a430:	22000117 	ldw	r8,4(r4)
  80a434:	21c06326 	beq	r4,r7,80a5c4 <_realloc_r+0x218>
  80a438:	017fff84 	movi	r5,-2
  80a43c:	414a703a 	and	r5,r8,r5
  80a440:	214b883a 	add	r5,r4,r5
  80a444:	29800117 	ldw	r6,4(r5)
  80a448:	3180004c 	andi	r6,r6,1
  80a44c:	30003f26 	beq	r6,zero,80a54c <_realloc_r+0x1a0>
  80a450:	1080004c 	andi	r2,r2,1
  80a454:	10008326 	beq	r2,zero,80a664 <_realloc_r+0x2b8>
  80a458:	900b883a 	mov	r5,r18
  80a45c:	a009883a 	mov	r4,r20
  80a460:	0802f840 	call	802f84 <_malloc_r>
  80a464:	1025883a 	mov	r18,r2
  80a468:	10011e26 	beq	r2,zero,80a8e4 <_realloc_r+0x538>
  80a46c:	a93fff17 	ldw	r4,-4(r21)
  80a470:	10fffe04 	addi	r3,r2,-8
  80a474:	00bfff84 	movi	r2,-2
  80a478:	2084703a 	and	r2,r4,r2
  80a47c:	9885883a 	add	r2,r19,r2
  80a480:	1880ee26 	beq	r3,r2,80a83c <_realloc_r+0x490>
  80a484:	81bfff04 	addi	r6,r16,-4
  80a488:	00800904 	movi	r2,36
  80a48c:	1180b836 	bltu	r2,r6,80a770 <_realloc_r+0x3c4>
  80a490:	00c004c4 	movi	r3,19
  80a494:	19809636 	bltu	r3,r6,80a6f0 <_realloc_r+0x344>
  80a498:	9005883a 	mov	r2,r18
  80a49c:	a807883a 	mov	r3,r21
  80a4a0:	19000017 	ldw	r4,0(r3)
  80a4a4:	11000015 	stw	r4,0(r2)
  80a4a8:	19000117 	ldw	r4,4(r3)
  80a4ac:	11000115 	stw	r4,4(r2)
  80a4b0:	18c00217 	ldw	r3,8(r3)
  80a4b4:	10c00215 	stw	r3,8(r2)
  80a4b8:	a80b883a 	mov	r5,r21
  80a4bc:	a009883a 	mov	r4,r20
  80a4c0:	08085040 	call	808504 <_free_r>
  80a4c4:	a009883a 	mov	r4,r20
  80a4c8:	08101cc0 	call	8101cc <__malloc_unlock>
  80a4cc:	9005883a 	mov	r2,r18
  80a4d0:	00001206 	br	80a51c <_realloc_r+0x170>
  80a4d4:	00c00404 	movi	r3,16
  80a4d8:	1823883a 	mov	r17,r3
  80a4dc:	003fce06 	br	80a418 <__alt_mem_onchip_mem+0xff78a418>
  80a4e0:	a825883a 	mov	r18,r21
  80a4e4:	8445c83a 	sub	r2,r16,r17
  80a4e8:	00c003c4 	movi	r3,15
  80a4ec:	18802636 	bltu	r3,r2,80a588 <_realloc_r+0x1dc>
  80a4f0:	99800117 	ldw	r6,4(r19)
  80a4f4:	9c07883a 	add	r3,r19,r16
  80a4f8:	3180004c 	andi	r6,r6,1
  80a4fc:	3420b03a 	or	r16,r6,r16
  80a500:	9c000115 	stw	r16,4(r19)
  80a504:	18800117 	ldw	r2,4(r3)
  80a508:	10800054 	ori	r2,r2,1
  80a50c:	18800115 	stw	r2,4(r3)
  80a510:	a009883a 	mov	r4,r20
  80a514:	08101cc0 	call	8101cc <__malloc_unlock>
  80a518:	9005883a 	mov	r2,r18
  80a51c:	dfc00917 	ldw	ra,36(sp)
  80a520:	df000817 	ldw	fp,32(sp)
  80a524:	ddc00717 	ldw	r23,28(sp)
  80a528:	dd800617 	ldw	r22,24(sp)
  80a52c:	dd400517 	ldw	r21,20(sp)
  80a530:	dd000417 	ldw	r20,16(sp)
  80a534:	dcc00317 	ldw	r19,12(sp)
  80a538:	dc800217 	ldw	r18,8(sp)
  80a53c:	dc400117 	ldw	r17,4(sp)
  80a540:	dc000017 	ldw	r16,0(sp)
  80a544:	dec00a04 	addi	sp,sp,40
  80a548:	f800283a 	ret
  80a54c:	017fff04 	movi	r5,-4
  80a550:	414a703a 	and	r5,r8,r5
  80a554:	814d883a 	add	r6,r16,r5
  80a558:	30c01f16 	blt	r6,r3,80a5d8 <_realloc_r+0x22c>
  80a55c:	20800317 	ldw	r2,12(r4)
  80a560:	20c00217 	ldw	r3,8(r4)
  80a564:	a825883a 	mov	r18,r21
  80a568:	3021883a 	mov	r16,r6
  80a56c:	18800315 	stw	r2,12(r3)
  80a570:	10c00215 	stw	r3,8(r2)
  80a574:	003fdb06 	br	80a4e4 <__alt_mem_onchip_mem+0xff78a4e4>
  80a578:	00800304 	movi	r2,12
  80a57c:	a0800015 	stw	r2,0(r20)
  80a580:	0005883a 	mov	r2,zero
  80a584:	003fe506 	br	80a51c <__alt_mem_onchip_mem+0xff78a51c>
  80a588:	98c00117 	ldw	r3,4(r19)
  80a58c:	9c4b883a 	add	r5,r19,r17
  80a590:	11000054 	ori	r4,r2,1
  80a594:	18c0004c 	andi	r3,r3,1
  80a598:	1c62b03a 	or	r17,r3,r17
  80a59c:	9c400115 	stw	r17,4(r19)
  80a5a0:	29000115 	stw	r4,4(r5)
  80a5a4:	2885883a 	add	r2,r5,r2
  80a5a8:	10c00117 	ldw	r3,4(r2)
  80a5ac:	29400204 	addi	r5,r5,8
  80a5b0:	a009883a 	mov	r4,r20
  80a5b4:	18c00054 	ori	r3,r3,1
  80a5b8:	10c00115 	stw	r3,4(r2)
  80a5bc:	08085040 	call	808504 <_free_r>
  80a5c0:	003fd306 	br	80a510 <__alt_mem_onchip_mem+0xff78a510>
  80a5c4:	017fff04 	movi	r5,-4
  80a5c8:	414a703a 	and	r5,r8,r5
  80a5cc:	89800404 	addi	r6,r17,16
  80a5d0:	8151883a 	add	r8,r16,r5
  80a5d4:	4180590e 	bge	r8,r6,80a73c <_realloc_r+0x390>
  80a5d8:	1080004c 	andi	r2,r2,1
  80a5dc:	103f9e1e 	bne	r2,zero,80a458 <__alt_mem_onchip_mem+0xff78a458>
  80a5e0:	adbffe17 	ldw	r22,-8(r21)
  80a5e4:	00bfff04 	movi	r2,-4
  80a5e8:	9dadc83a 	sub	r22,r19,r22
  80a5ec:	b1800117 	ldw	r6,4(r22)
  80a5f0:	3084703a 	and	r2,r6,r2
  80a5f4:	20002026 	beq	r4,zero,80a678 <_realloc_r+0x2cc>
  80a5f8:	80af883a 	add	r23,r16,r2
  80a5fc:	b96f883a 	add	r23,r23,r5
  80a600:	21c05f26 	beq	r4,r7,80a780 <_realloc_r+0x3d4>
  80a604:	b8c01c16 	blt	r23,r3,80a678 <_realloc_r+0x2cc>
  80a608:	20800317 	ldw	r2,12(r4)
  80a60c:	20c00217 	ldw	r3,8(r4)
  80a610:	81bfff04 	addi	r6,r16,-4
  80a614:	01000904 	movi	r4,36
  80a618:	18800315 	stw	r2,12(r3)
  80a61c:	10c00215 	stw	r3,8(r2)
  80a620:	b0c00217 	ldw	r3,8(r22)
  80a624:	b0800317 	ldw	r2,12(r22)
  80a628:	b4800204 	addi	r18,r22,8
  80a62c:	18800315 	stw	r2,12(r3)
  80a630:	10c00215 	stw	r3,8(r2)
  80a634:	21801b36 	bltu	r4,r6,80a6a4 <_realloc_r+0x2f8>
  80a638:	008004c4 	movi	r2,19
  80a63c:	1180352e 	bgeu	r2,r6,80a714 <_realloc_r+0x368>
  80a640:	a8800017 	ldw	r2,0(r21)
  80a644:	b0800215 	stw	r2,8(r22)
  80a648:	a8800117 	ldw	r2,4(r21)
  80a64c:	b0800315 	stw	r2,12(r22)
  80a650:	008006c4 	movi	r2,27
  80a654:	11807f36 	bltu	r2,r6,80a854 <_realloc_r+0x4a8>
  80a658:	b0800404 	addi	r2,r22,16
  80a65c:	ad400204 	addi	r21,r21,8
  80a660:	00002d06 	br	80a718 <_realloc_r+0x36c>
  80a664:	adbffe17 	ldw	r22,-8(r21)
  80a668:	00bfff04 	movi	r2,-4
  80a66c:	9dadc83a 	sub	r22,r19,r22
  80a670:	b1000117 	ldw	r4,4(r22)
  80a674:	2084703a 	and	r2,r4,r2
  80a678:	b03f7726 	beq	r22,zero,80a458 <__alt_mem_onchip_mem+0xff78a458>
  80a67c:	80af883a 	add	r23,r16,r2
  80a680:	b8ff7516 	blt	r23,r3,80a458 <__alt_mem_onchip_mem+0xff78a458>
  80a684:	b0800317 	ldw	r2,12(r22)
  80a688:	b0c00217 	ldw	r3,8(r22)
  80a68c:	81bfff04 	addi	r6,r16,-4
  80a690:	01000904 	movi	r4,36
  80a694:	18800315 	stw	r2,12(r3)
  80a698:	10c00215 	stw	r3,8(r2)
  80a69c:	b4800204 	addi	r18,r22,8
  80a6a0:	21bfe52e 	bgeu	r4,r6,80a638 <__alt_mem_onchip_mem+0xff78a638>
  80a6a4:	a80b883a 	mov	r5,r21
  80a6a8:	9009883a 	mov	r4,r18
  80a6ac:	080908c0 	call	80908c <memmove>
  80a6b0:	b821883a 	mov	r16,r23
  80a6b4:	b027883a 	mov	r19,r22
  80a6b8:	003f8a06 	br	80a4e4 <__alt_mem_onchip_mem+0xff78a4e4>
  80a6bc:	300b883a 	mov	r5,r6
  80a6c0:	dfc00917 	ldw	ra,36(sp)
  80a6c4:	df000817 	ldw	fp,32(sp)
  80a6c8:	ddc00717 	ldw	r23,28(sp)
  80a6cc:	dd800617 	ldw	r22,24(sp)
  80a6d0:	dd400517 	ldw	r21,20(sp)
  80a6d4:	dd000417 	ldw	r20,16(sp)
  80a6d8:	dcc00317 	ldw	r19,12(sp)
  80a6dc:	dc800217 	ldw	r18,8(sp)
  80a6e0:	dc400117 	ldw	r17,4(sp)
  80a6e4:	dc000017 	ldw	r16,0(sp)
  80a6e8:	dec00a04 	addi	sp,sp,40
  80a6ec:	0802f841 	jmpi	802f84 <_malloc_r>
  80a6f0:	a8c00017 	ldw	r3,0(r21)
  80a6f4:	90c00015 	stw	r3,0(r18)
  80a6f8:	a8c00117 	ldw	r3,4(r21)
  80a6fc:	90c00115 	stw	r3,4(r18)
  80a700:	00c006c4 	movi	r3,27
  80a704:	19804536 	bltu	r3,r6,80a81c <_realloc_r+0x470>
  80a708:	90800204 	addi	r2,r18,8
  80a70c:	a8c00204 	addi	r3,r21,8
  80a710:	003f6306 	br	80a4a0 <__alt_mem_onchip_mem+0xff78a4a0>
  80a714:	9005883a 	mov	r2,r18
  80a718:	a8c00017 	ldw	r3,0(r21)
  80a71c:	b821883a 	mov	r16,r23
  80a720:	b027883a 	mov	r19,r22
  80a724:	10c00015 	stw	r3,0(r2)
  80a728:	a8c00117 	ldw	r3,4(r21)
  80a72c:	10c00115 	stw	r3,4(r2)
  80a730:	a8c00217 	ldw	r3,8(r21)
  80a734:	10c00215 	stw	r3,8(r2)
  80a738:	003f6a06 	br	80a4e4 <__alt_mem_onchip_mem+0xff78a4e4>
  80a73c:	9c67883a 	add	r19,r19,r17
  80a740:	4445c83a 	sub	r2,r8,r17
  80a744:	e4c00215 	stw	r19,8(fp)
  80a748:	10800054 	ori	r2,r2,1
  80a74c:	98800115 	stw	r2,4(r19)
  80a750:	a8bfff17 	ldw	r2,-4(r21)
  80a754:	a009883a 	mov	r4,r20
  80a758:	1080004c 	andi	r2,r2,1
  80a75c:	1462b03a 	or	r17,r2,r17
  80a760:	ac7fff15 	stw	r17,-4(r21)
  80a764:	08101cc0 	call	8101cc <__malloc_unlock>
  80a768:	a805883a 	mov	r2,r21
  80a76c:	003f6b06 	br	80a51c <__alt_mem_onchip_mem+0xff78a51c>
  80a770:	a80b883a 	mov	r5,r21
  80a774:	9009883a 	mov	r4,r18
  80a778:	080908c0 	call	80908c <memmove>
  80a77c:	003f4e06 	br	80a4b8 <__alt_mem_onchip_mem+0xff78a4b8>
  80a780:	89000404 	addi	r4,r17,16
  80a784:	b93fbc16 	blt	r23,r4,80a678 <__alt_mem_onchip_mem+0xff78a678>
  80a788:	b0800317 	ldw	r2,12(r22)
  80a78c:	b0c00217 	ldw	r3,8(r22)
  80a790:	81bfff04 	addi	r6,r16,-4
  80a794:	01000904 	movi	r4,36
  80a798:	18800315 	stw	r2,12(r3)
  80a79c:	10c00215 	stw	r3,8(r2)
  80a7a0:	b4800204 	addi	r18,r22,8
  80a7a4:	21804336 	bltu	r4,r6,80a8b4 <_realloc_r+0x508>
  80a7a8:	008004c4 	movi	r2,19
  80a7ac:	11803f2e 	bgeu	r2,r6,80a8ac <_realloc_r+0x500>
  80a7b0:	a8800017 	ldw	r2,0(r21)
  80a7b4:	b0800215 	stw	r2,8(r22)
  80a7b8:	a8800117 	ldw	r2,4(r21)
  80a7bc:	b0800315 	stw	r2,12(r22)
  80a7c0:	008006c4 	movi	r2,27
  80a7c4:	11803f36 	bltu	r2,r6,80a8c4 <_realloc_r+0x518>
  80a7c8:	b0800404 	addi	r2,r22,16
  80a7cc:	ad400204 	addi	r21,r21,8
  80a7d0:	a8c00017 	ldw	r3,0(r21)
  80a7d4:	10c00015 	stw	r3,0(r2)
  80a7d8:	a8c00117 	ldw	r3,4(r21)
  80a7dc:	10c00115 	stw	r3,4(r2)
  80a7e0:	a8c00217 	ldw	r3,8(r21)
  80a7e4:	10c00215 	stw	r3,8(r2)
  80a7e8:	b447883a 	add	r3,r22,r17
  80a7ec:	bc45c83a 	sub	r2,r23,r17
  80a7f0:	e0c00215 	stw	r3,8(fp)
  80a7f4:	10800054 	ori	r2,r2,1
  80a7f8:	18800115 	stw	r2,4(r3)
  80a7fc:	b0800117 	ldw	r2,4(r22)
  80a800:	a009883a 	mov	r4,r20
  80a804:	1080004c 	andi	r2,r2,1
  80a808:	1462b03a 	or	r17,r2,r17
  80a80c:	b4400115 	stw	r17,4(r22)
  80a810:	08101cc0 	call	8101cc <__malloc_unlock>
  80a814:	9005883a 	mov	r2,r18
  80a818:	003f4006 	br	80a51c <__alt_mem_onchip_mem+0xff78a51c>
  80a81c:	a8c00217 	ldw	r3,8(r21)
  80a820:	90c00215 	stw	r3,8(r18)
  80a824:	a8c00317 	ldw	r3,12(r21)
  80a828:	90c00315 	stw	r3,12(r18)
  80a82c:	30801126 	beq	r6,r2,80a874 <_realloc_r+0x4c8>
  80a830:	90800404 	addi	r2,r18,16
  80a834:	a8c00404 	addi	r3,r21,16
  80a838:	003f1906 	br	80a4a0 <__alt_mem_onchip_mem+0xff78a4a0>
  80a83c:	90ffff17 	ldw	r3,-4(r18)
  80a840:	00bfff04 	movi	r2,-4
  80a844:	a825883a 	mov	r18,r21
  80a848:	1884703a 	and	r2,r3,r2
  80a84c:	80a1883a 	add	r16,r16,r2
  80a850:	003f2406 	br	80a4e4 <__alt_mem_onchip_mem+0xff78a4e4>
  80a854:	a8800217 	ldw	r2,8(r21)
  80a858:	b0800415 	stw	r2,16(r22)
  80a85c:	a8800317 	ldw	r2,12(r21)
  80a860:	b0800515 	stw	r2,20(r22)
  80a864:	31000a26 	beq	r6,r4,80a890 <_realloc_r+0x4e4>
  80a868:	b0800604 	addi	r2,r22,24
  80a86c:	ad400404 	addi	r21,r21,16
  80a870:	003fa906 	br	80a718 <__alt_mem_onchip_mem+0xff78a718>
  80a874:	a9000417 	ldw	r4,16(r21)
  80a878:	90800604 	addi	r2,r18,24
  80a87c:	a8c00604 	addi	r3,r21,24
  80a880:	91000415 	stw	r4,16(r18)
  80a884:	a9000517 	ldw	r4,20(r21)
  80a888:	91000515 	stw	r4,20(r18)
  80a88c:	003f0406 	br	80a4a0 <__alt_mem_onchip_mem+0xff78a4a0>
  80a890:	a8c00417 	ldw	r3,16(r21)
  80a894:	ad400604 	addi	r21,r21,24
  80a898:	b0800804 	addi	r2,r22,32
  80a89c:	b0c00615 	stw	r3,24(r22)
  80a8a0:	a8ffff17 	ldw	r3,-4(r21)
  80a8a4:	b0c00715 	stw	r3,28(r22)
  80a8a8:	003f9b06 	br	80a718 <__alt_mem_onchip_mem+0xff78a718>
  80a8ac:	9005883a 	mov	r2,r18
  80a8b0:	003fc706 	br	80a7d0 <__alt_mem_onchip_mem+0xff78a7d0>
  80a8b4:	a80b883a 	mov	r5,r21
  80a8b8:	9009883a 	mov	r4,r18
  80a8bc:	080908c0 	call	80908c <memmove>
  80a8c0:	003fc906 	br	80a7e8 <__alt_mem_onchip_mem+0xff78a7e8>
  80a8c4:	a8800217 	ldw	r2,8(r21)
  80a8c8:	b0800415 	stw	r2,16(r22)
  80a8cc:	a8800317 	ldw	r2,12(r21)
  80a8d0:	b0800515 	stw	r2,20(r22)
  80a8d4:	31000726 	beq	r6,r4,80a8f4 <_realloc_r+0x548>
  80a8d8:	b0800604 	addi	r2,r22,24
  80a8dc:	ad400404 	addi	r21,r21,16
  80a8e0:	003fbb06 	br	80a7d0 <__alt_mem_onchip_mem+0xff78a7d0>
  80a8e4:	a009883a 	mov	r4,r20
  80a8e8:	08101cc0 	call	8101cc <__malloc_unlock>
  80a8ec:	0005883a 	mov	r2,zero
  80a8f0:	003f0a06 	br	80a51c <__alt_mem_onchip_mem+0xff78a51c>
  80a8f4:	a8c00417 	ldw	r3,16(r21)
  80a8f8:	ad400604 	addi	r21,r21,24
  80a8fc:	b0800804 	addi	r2,r22,32
  80a900:	b0c00615 	stw	r3,24(r22)
  80a904:	a8ffff17 	ldw	r3,-4(r21)
  80a908:	b0c00715 	stw	r3,28(r22)
  80a90c:	003fb006 	br	80a7d0 <__alt_mem_onchip_mem+0xff78a7d0>

0080a910 <__fpclassifyd>:
  80a910:	00a00034 	movhi	r2,32768
  80a914:	10bfffc4 	addi	r2,r2,-1
  80a918:	2884703a 	and	r2,r5,r2
  80a91c:	10000726 	beq	r2,zero,80a93c <__fpclassifyd+0x2c>
  80a920:	00fffc34 	movhi	r3,65520
  80a924:	019ff834 	movhi	r6,32736
  80a928:	28c7883a 	add	r3,r5,r3
  80a92c:	31bfffc4 	addi	r6,r6,-1
  80a930:	30c00536 	bltu	r6,r3,80a948 <__fpclassifyd+0x38>
  80a934:	00800104 	movi	r2,4
  80a938:	f800283a 	ret
  80a93c:	2000021e 	bne	r4,zero,80a948 <__fpclassifyd+0x38>
  80a940:	00800084 	movi	r2,2
  80a944:	f800283a 	ret
  80a948:	00dffc34 	movhi	r3,32752
  80a94c:	019ff834 	movhi	r6,32736
  80a950:	28cb883a 	add	r5,r5,r3
  80a954:	31bfffc4 	addi	r6,r6,-1
  80a958:	317ff62e 	bgeu	r6,r5,80a934 <__alt_mem_onchip_mem+0xff78a934>
  80a95c:	01400434 	movhi	r5,16
  80a960:	297fffc4 	addi	r5,r5,-1
  80a964:	28800236 	bltu	r5,r2,80a970 <__fpclassifyd+0x60>
  80a968:	008000c4 	movi	r2,3
  80a96c:	f800283a 	ret
  80a970:	10c00226 	beq	r2,r3,80a97c <__fpclassifyd+0x6c>
  80a974:	0005883a 	mov	r2,zero
  80a978:	f800283a 	ret
  80a97c:	2005003a 	cmpeq	r2,r4,zero
  80a980:	f800283a 	ret

0080a984 <strcmp>:
  80a984:	2144b03a 	or	r2,r4,r5
  80a988:	108000cc 	andi	r2,r2,3
  80a98c:	1000171e 	bne	r2,zero,80a9ec <strcmp+0x68>
  80a990:	20800017 	ldw	r2,0(r4)
  80a994:	28c00017 	ldw	r3,0(r5)
  80a998:	10c0141e 	bne	r2,r3,80a9ec <strcmp+0x68>
  80a99c:	027fbff4 	movhi	r9,65279
  80a9a0:	4a7fbfc4 	addi	r9,r9,-257
  80a9a4:	0086303a 	nor	r3,zero,r2
  80a9a8:	02202074 	movhi	r8,32897
  80a9ac:	1245883a 	add	r2,r2,r9
  80a9b0:	42202004 	addi	r8,r8,-32640
  80a9b4:	10c4703a 	and	r2,r2,r3
  80a9b8:	1204703a 	and	r2,r2,r8
  80a9bc:	10000226 	beq	r2,zero,80a9c8 <strcmp+0x44>
  80a9c0:	00002306 	br	80aa50 <strcmp+0xcc>
  80a9c4:	1000221e 	bne	r2,zero,80aa50 <strcmp+0xcc>
  80a9c8:	21000104 	addi	r4,r4,4
  80a9cc:	20c00017 	ldw	r3,0(r4)
  80a9d0:	29400104 	addi	r5,r5,4
  80a9d4:	29800017 	ldw	r6,0(r5)
  80a9d8:	1a4f883a 	add	r7,r3,r9
  80a9dc:	00c4303a 	nor	r2,zero,r3
  80a9e0:	3884703a 	and	r2,r7,r2
  80a9e4:	1204703a 	and	r2,r2,r8
  80a9e8:	19bff626 	beq	r3,r6,80a9c4 <__alt_mem_onchip_mem+0xff78a9c4>
  80a9ec:	20800003 	ldbu	r2,0(r4)
  80a9f0:	10c03fcc 	andi	r3,r2,255
  80a9f4:	18c0201c 	xori	r3,r3,128
  80a9f8:	18ffe004 	addi	r3,r3,-128
  80a9fc:	18000c26 	beq	r3,zero,80aa30 <strcmp+0xac>
  80aa00:	29800007 	ldb	r6,0(r5)
  80aa04:	19800326 	beq	r3,r6,80aa14 <strcmp+0x90>
  80aa08:	00001306 	br	80aa58 <strcmp+0xd4>
  80aa0c:	29800007 	ldb	r6,0(r5)
  80aa10:	11800b1e 	bne	r2,r6,80aa40 <strcmp+0xbc>
  80aa14:	21000044 	addi	r4,r4,1
  80aa18:	20c00003 	ldbu	r3,0(r4)
  80aa1c:	29400044 	addi	r5,r5,1
  80aa20:	18803fcc 	andi	r2,r3,255
  80aa24:	1080201c 	xori	r2,r2,128
  80aa28:	10bfe004 	addi	r2,r2,-128
  80aa2c:	103ff71e 	bne	r2,zero,80aa0c <__alt_mem_onchip_mem+0xff78aa0c>
  80aa30:	0007883a 	mov	r3,zero
  80aa34:	28800003 	ldbu	r2,0(r5)
  80aa38:	1885c83a 	sub	r2,r3,r2
  80aa3c:	f800283a 	ret
  80aa40:	28800003 	ldbu	r2,0(r5)
  80aa44:	18c03fcc 	andi	r3,r3,255
  80aa48:	1885c83a 	sub	r2,r3,r2
  80aa4c:	f800283a 	ret
  80aa50:	0005883a 	mov	r2,zero
  80aa54:	f800283a 	ret
  80aa58:	10c03fcc 	andi	r3,r2,255
  80aa5c:	003ff506 	br	80aa34 <__alt_mem_onchip_mem+0xff78aa34>

0080aa60 <__sprint_r.part.0>:
  80aa60:	28801917 	ldw	r2,100(r5)
  80aa64:	defff604 	addi	sp,sp,-40
  80aa68:	dd400515 	stw	r21,20(sp)
  80aa6c:	dfc00915 	stw	ra,36(sp)
  80aa70:	df000815 	stw	fp,32(sp)
  80aa74:	ddc00715 	stw	r23,28(sp)
  80aa78:	dd800615 	stw	r22,24(sp)
  80aa7c:	dd000415 	stw	r20,16(sp)
  80aa80:	dcc00315 	stw	r19,12(sp)
  80aa84:	dc800215 	stw	r18,8(sp)
  80aa88:	dc400115 	stw	r17,4(sp)
  80aa8c:	dc000015 	stw	r16,0(sp)
  80aa90:	1088000c 	andi	r2,r2,8192
  80aa94:	302b883a 	mov	r21,r6
  80aa98:	10002e26 	beq	r2,zero,80ab54 <__sprint_r.part.0+0xf4>
  80aa9c:	30800217 	ldw	r2,8(r6)
  80aaa0:	35800017 	ldw	r22,0(r6)
  80aaa4:	10002926 	beq	r2,zero,80ab4c <__sprint_r.part.0+0xec>
  80aaa8:	2827883a 	mov	r19,r5
  80aaac:	2029883a 	mov	r20,r4
  80aab0:	b5c00104 	addi	r23,r22,4
  80aab4:	04bfffc4 	movi	r18,-1
  80aab8:	bc400017 	ldw	r17,0(r23)
  80aabc:	b4000017 	ldw	r16,0(r22)
  80aac0:	0039883a 	mov	fp,zero
  80aac4:	8822d0ba 	srli	r17,r17,2
  80aac8:	8800031e 	bne	r17,zero,80aad8 <__sprint_r.part.0+0x78>
  80aacc:	00001806 	br	80ab30 <__sprint_r.part.0+0xd0>
  80aad0:	84000104 	addi	r16,r16,4
  80aad4:	8f001526 	beq	r17,fp,80ab2c <__sprint_r.part.0+0xcc>
  80aad8:	81400017 	ldw	r5,0(r16)
  80aadc:	980d883a 	mov	r6,r19
  80aae0:	a009883a 	mov	r4,r20
  80aae4:	080c4280 	call	80c428 <_fputwc_r>
  80aae8:	e7000044 	addi	fp,fp,1
  80aaec:	14bff81e 	bne	r2,r18,80aad0 <__alt_mem_onchip_mem+0xff78aad0>
  80aaf0:	9005883a 	mov	r2,r18
  80aaf4:	a8000215 	stw	zero,8(r21)
  80aaf8:	a8000115 	stw	zero,4(r21)
  80aafc:	dfc00917 	ldw	ra,36(sp)
  80ab00:	df000817 	ldw	fp,32(sp)
  80ab04:	ddc00717 	ldw	r23,28(sp)
  80ab08:	dd800617 	ldw	r22,24(sp)
  80ab0c:	dd400517 	ldw	r21,20(sp)
  80ab10:	dd000417 	ldw	r20,16(sp)
  80ab14:	dcc00317 	ldw	r19,12(sp)
  80ab18:	dc800217 	ldw	r18,8(sp)
  80ab1c:	dc400117 	ldw	r17,4(sp)
  80ab20:	dc000017 	ldw	r16,0(sp)
  80ab24:	dec00a04 	addi	sp,sp,40
  80ab28:	f800283a 	ret
  80ab2c:	a8800217 	ldw	r2,8(r21)
  80ab30:	8c63883a 	add	r17,r17,r17
  80ab34:	8c63883a 	add	r17,r17,r17
  80ab38:	1445c83a 	sub	r2,r2,r17
  80ab3c:	a8800215 	stw	r2,8(r21)
  80ab40:	b5800204 	addi	r22,r22,8
  80ab44:	bdc00204 	addi	r23,r23,8
  80ab48:	103fdb1e 	bne	r2,zero,80aab8 <__alt_mem_onchip_mem+0xff78aab8>
  80ab4c:	0005883a 	mov	r2,zero
  80ab50:	003fe806 	br	80aaf4 <__alt_mem_onchip_mem+0xff78aaf4>
  80ab54:	08088140 	call	808814 <__sfvwrite_r>
  80ab58:	003fe606 	br	80aaf4 <__alt_mem_onchip_mem+0xff78aaf4>

0080ab5c <__sprint_r>:
  80ab5c:	30c00217 	ldw	r3,8(r6)
  80ab60:	18000126 	beq	r3,zero,80ab68 <__sprint_r+0xc>
  80ab64:	080aa601 	jmpi	80aa60 <__sprint_r.part.0>
  80ab68:	30000115 	stw	zero,4(r6)
  80ab6c:	0005883a 	mov	r2,zero
  80ab70:	f800283a 	ret

0080ab74 <___vfiprintf_internal_r>:
  80ab74:	deffc904 	addi	sp,sp,-220
  80ab78:	df003515 	stw	fp,212(sp)
  80ab7c:	dd003115 	stw	r20,196(sp)
  80ab80:	dfc03615 	stw	ra,216(sp)
  80ab84:	ddc03415 	stw	r23,208(sp)
  80ab88:	dd803315 	stw	r22,204(sp)
  80ab8c:	dd403215 	stw	r21,200(sp)
  80ab90:	dcc03015 	stw	r19,192(sp)
  80ab94:	dc802f15 	stw	r18,188(sp)
  80ab98:	dc402e15 	stw	r17,184(sp)
  80ab9c:	dc002d15 	stw	r16,180(sp)
  80aba0:	d9002015 	stw	r4,128(sp)
  80aba4:	d9c02215 	stw	r7,136(sp)
  80aba8:	2829883a 	mov	r20,r5
  80abac:	3039883a 	mov	fp,r6
  80abb0:	20000226 	beq	r4,zero,80abbc <___vfiprintf_internal_r+0x48>
  80abb4:	20800e17 	ldw	r2,56(r4)
  80abb8:	1000cf26 	beq	r2,zero,80aef8 <___vfiprintf_internal_r+0x384>
  80abbc:	a080030b 	ldhu	r2,12(r20)
  80abc0:	10c8000c 	andi	r3,r2,8192
  80abc4:	1800061e 	bne	r3,zero,80abe0 <___vfiprintf_internal_r+0x6c>
  80abc8:	a1001917 	ldw	r4,100(r20)
  80abcc:	00f7ffc4 	movi	r3,-8193
  80abd0:	10880014 	ori	r2,r2,8192
  80abd4:	20c6703a 	and	r3,r4,r3
  80abd8:	a080030d 	sth	r2,12(r20)
  80abdc:	a0c01915 	stw	r3,100(r20)
  80abe0:	10c0020c 	andi	r3,r2,8
  80abe4:	1800a926 	beq	r3,zero,80ae8c <___vfiprintf_internal_r+0x318>
  80abe8:	a0c00417 	ldw	r3,16(r20)
  80abec:	1800a726 	beq	r3,zero,80ae8c <___vfiprintf_internal_r+0x318>
  80abf0:	1080068c 	andi	r2,r2,26
  80abf4:	00c00284 	movi	r3,10
  80abf8:	10c0ac26 	beq	r2,r3,80aeac <___vfiprintf_internal_r+0x338>
  80abfc:	da801a04 	addi	r10,sp,104
  80ac00:	da801e15 	stw	r10,120(sp)
  80ac04:	d8801e17 	ldw	r2,120(sp)
  80ac08:	da8019c4 	addi	r10,sp,103
  80ac0c:	05802074 	movhi	r22,129
  80ac10:	05c02074 	movhi	r23,129
  80ac14:	da801f15 	stw	r10,124(sp)
  80ac18:	1295c83a 	sub	r10,r2,r10
  80ac1c:	b5906f04 	addi	r22,r22,16828
  80ac20:	bdd06b04 	addi	r23,r23,16812
  80ac24:	dec01a15 	stw	sp,104(sp)
  80ac28:	d8001c15 	stw	zero,112(sp)
  80ac2c:	d8001b15 	stw	zero,108(sp)
  80ac30:	d8002615 	stw	zero,152(sp)
  80ac34:	d8002315 	stw	zero,140(sp)
  80ac38:	da802715 	stw	r10,156(sp)
  80ac3c:	d811883a 	mov	r8,sp
  80ac40:	dd002115 	stw	r20,132(sp)
  80ac44:	e021883a 	mov	r16,fp
  80ac48:	80800007 	ldb	r2,0(r16)
  80ac4c:	1003ea26 	beq	r2,zero,80bbf8 <___vfiprintf_internal_r+0x1084>
  80ac50:	00c00944 	movi	r3,37
  80ac54:	8025883a 	mov	r18,r16
  80ac58:	10c0021e 	bne	r2,r3,80ac64 <___vfiprintf_internal_r+0xf0>
  80ac5c:	00001606 	br	80acb8 <___vfiprintf_internal_r+0x144>
  80ac60:	10c00326 	beq	r2,r3,80ac70 <___vfiprintf_internal_r+0xfc>
  80ac64:	94800044 	addi	r18,r18,1
  80ac68:	90800007 	ldb	r2,0(r18)
  80ac6c:	103ffc1e 	bne	r2,zero,80ac60 <__alt_mem_onchip_mem+0xff78ac60>
  80ac70:	9423c83a 	sub	r17,r18,r16
  80ac74:	88001026 	beq	r17,zero,80acb8 <___vfiprintf_internal_r+0x144>
  80ac78:	d8c01c17 	ldw	r3,112(sp)
  80ac7c:	d8801b17 	ldw	r2,108(sp)
  80ac80:	44000015 	stw	r16,0(r8)
  80ac84:	88c7883a 	add	r3,r17,r3
  80ac88:	10800044 	addi	r2,r2,1
  80ac8c:	44400115 	stw	r17,4(r8)
  80ac90:	d8c01c15 	stw	r3,112(sp)
  80ac94:	d8801b15 	stw	r2,108(sp)
  80ac98:	010001c4 	movi	r4,7
  80ac9c:	2080760e 	bge	r4,r2,80ae78 <___vfiprintf_internal_r+0x304>
  80aca0:	1803821e 	bne	r3,zero,80baac <___vfiprintf_internal_r+0xf38>
  80aca4:	da802317 	ldw	r10,140(sp)
  80aca8:	d8001b15 	stw	zero,108(sp)
  80acac:	d811883a 	mov	r8,sp
  80acb0:	5455883a 	add	r10,r10,r17
  80acb4:	da802315 	stw	r10,140(sp)
  80acb8:	90800007 	ldb	r2,0(r18)
  80acbc:	10044626 	beq	r2,zero,80bdd8 <___vfiprintf_internal_r+0x1264>
  80acc0:	90c00047 	ldb	r3,1(r18)
  80acc4:	94000044 	addi	r16,r18,1
  80acc8:	d8001d85 	stb	zero,118(sp)
  80accc:	0009883a 	mov	r4,zero
  80acd0:	000f883a 	mov	r7,zero
  80acd4:	027fffc4 	movi	r9,-1
  80acd8:	0023883a 	mov	r17,zero
  80acdc:	0029883a 	mov	r20,zero
  80ace0:	01401604 	movi	r5,88
  80ace4:	01800244 	movi	r6,9
  80ace8:	03400a84 	movi	r13,42
  80acec:	03001b04 	movi	r12,108
  80acf0:	84000044 	addi	r16,r16,1
  80acf4:	18bff804 	addi	r2,r3,-32
  80acf8:	28827336 	bltu	r5,r2,80b6c8 <___vfiprintf_internal_r+0xb54>
  80acfc:	100490ba 	slli	r2,r2,2
  80ad00:	02802074 	movhi	r10,129
  80ad04:	52ab4504 	addi	r10,r10,-21228
  80ad08:	1285883a 	add	r2,r2,r10
  80ad0c:	10800017 	ldw	r2,0(r2)
  80ad10:	1000683a 	jmp	r2
  80ad14:	0080b3fc 	xorhi	r2,zero,719
  80ad18:	0080b6c8 	cmpgei	r2,zero,731
  80ad1c:	0080b6c8 	cmpgei	r2,zero,731
  80ad20:	0080b41c 	xori	r2,zero,720
  80ad24:	0080b6c8 	cmpgei	r2,zero,731
  80ad28:	0080b6c8 	cmpgei	r2,zero,731
  80ad2c:	0080b6c8 	cmpgei	r2,zero,731
  80ad30:	0080b6c8 	cmpgei	r2,zero,731
  80ad34:	0080b6c8 	cmpgei	r2,zero,731
  80ad38:	0080b6c8 	cmpgei	r2,zero,731
  80ad3c:	0080b604 	movi	r2,728
  80ad40:	0080b620 	cmpeqi	r2,zero,728
  80ad44:	0080b6c8 	cmpgei	r2,zero,731
  80ad48:	0080af08 	cmpgei	r2,zero,700
  80ad4c:	0080b630 	cmpltui	r2,zero,728
  80ad50:	0080b6c8 	cmpgei	r2,zero,731
  80ad54:	0080b428 	cmpgeui	r2,zero,720
  80ad58:	0080b434 	movhi	r2,720
  80ad5c:	0080b434 	movhi	r2,720
  80ad60:	0080b434 	movhi	r2,720
  80ad64:	0080b434 	movhi	r2,720
  80ad68:	0080b434 	movhi	r2,720
  80ad6c:	0080b434 	movhi	r2,720
  80ad70:	0080b434 	movhi	r2,720
  80ad74:	0080b434 	movhi	r2,720
  80ad78:	0080b434 	movhi	r2,720
  80ad7c:	0080b6c8 	cmpgei	r2,zero,731
  80ad80:	0080b6c8 	cmpgei	r2,zero,731
  80ad84:	0080b6c8 	cmpgei	r2,zero,731
  80ad88:	0080b6c8 	cmpgei	r2,zero,731
  80ad8c:	0080b6c8 	cmpgei	r2,zero,731
  80ad90:	0080b6c8 	cmpgei	r2,zero,731
  80ad94:	0080b6c8 	cmpgei	r2,zero,731
  80ad98:	0080b6c8 	cmpgei	r2,zero,731
  80ad9c:	0080b6c8 	cmpgei	r2,zero,731
  80ada0:	0080b6c8 	cmpgei	r2,zero,731
  80ada4:	0080b460 	cmpeqi	r2,zero,721
  80ada8:	0080b6c8 	cmpgei	r2,zero,731
  80adac:	0080b6c8 	cmpgei	r2,zero,731
  80adb0:	0080b6c8 	cmpgei	r2,zero,731
  80adb4:	0080b6c8 	cmpgei	r2,zero,731
  80adb8:	0080b6c8 	cmpgei	r2,zero,731
  80adbc:	0080b6c8 	cmpgei	r2,zero,731
  80adc0:	0080b6c8 	cmpgei	r2,zero,731
  80adc4:	0080b6c8 	cmpgei	r2,zero,731
  80adc8:	0080b6c8 	cmpgei	r2,zero,731
  80adcc:	0080b6c8 	cmpgei	r2,zero,731
  80add0:	0080b498 	cmpnei	r2,zero,722
  80add4:	0080b6c8 	cmpgei	r2,zero,731
  80add8:	0080b6c8 	cmpgei	r2,zero,731
  80addc:	0080b6c8 	cmpgei	r2,zero,731
  80ade0:	0080b6c8 	cmpgei	r2,zero,731
  80ade4:	0080b6c8 	cmpgei	r2,zero,731
  80ade8:	0080b4f0 	cmpltui	r2,zero,723
  80adec:	0080b6c8 	cmpgei	r2,zero,731
  80adf0:	0080b6c8 	cmpgei	r2,zero,731
  80adf4:	0080b560 	cmpeqi	r2,zero,725
  80adf8:	0080b6c8 	cmpgei	r2,zero,731
  80adfc:	0080b6c8 	cmpgei	r2,zero,731
  80ae00:	0080b6c8 	cmpgei	r2,zero,731
  80ae04:	0080b6c8 	cmpgei	r2,zero,731
  80ae08:	0080b6c8 	cmpgei	r2,zero,731
  80ae0c:	0080b6c8 	cmpgei	r2,zero,731
  80ae10:	0080b6c8 	cmpgei	r2,zero,731
  80ae14:	0080b6c8 	cmpgei	r2,zero,731
  80ae18:	0080b6c8 	cmpgei	r2,zero,731
  80ae1c:	0080b6c8 	cmpgei	r2,zero,731
  80ae20:	0080b30c 	andi	r2,zero,716
  80ae24:	0080b338 	rdprs	r2,zero,716
  80ae28:	0080b6c8 	cmpgei	r2,zero,731
  80ae2c:	0080b6c8 	cmpgei	r2,zero,731
  80ae30:	0080b6c8 	cmpgei	r2,zero,731
  80ae34:	0080b670 	cmpltui	r2,zero,729
  80ae38:	0080b338 	rdprs	r2,zero,716
  80ae3c:	0080b6c8 	cmpgei	r2,zero,731
  80ae40:	0080b6c8 	cmpgei	r2,zero,731
  80ae44:	0080b1cc 	andi	r2,zero,711
  80ae48:	0080b6c8 	cmpgei	r2,zero,731
  80ae4c:	0080b1dc 	xori	r2,zero,711
  80ae50:	0080b218 	cmpnei	r2,zero,712
  80ae54:	0080af14 	movui	r2,700
  80ae58:	0080b1c0 	call	80b1c <__alt_mem_sdram-0x77f4e4>
  80ae5c:	0080b6c8 	cmpgei	r2,zero,731
  80ae60:	0080b59c 	xori	r2,zero,726
  80ae64:	0080b6c8 	cmpgei	r2,zero,731
  80ae68:	0080b5f4 	movhi	r2,727
  80ae6c:	0080b6c8 	cmpgei	r2,zero,731
  80ae70:	0080b6c8 	cmpgei	r2,zero,731
  80ae74:	0080b2b8 	rdprs	r2,zero,714
  80ae78:	42000204 	addi	r8,r8,8
  80ae7c:	da802317 	ldw	r10,140(sp)
  80ae80:	5455883a 	add	r10,r10,r17
  80ae84:	da802315 	stw	r10,140(sp)
  80ae88:	003f8b06 	br	80acb8 <__alt_mem_onchip_mem+0xff78acb8>
  80ae8c:	d9002017 	ldw	r4,128(sp)
  80ae90:	a00b883a 	mov	r5,r20
  80ae94:	08065580 	call	806558 <__swsetup_r>
  80ae98:	1003b11e 	bne	r2,zero,80bd60 <___vfiprintf_internal_r+0x11ec>
  80ae9c:	a080030b 	ldhu	r2,12(r20)
  80aea0:	00c00284 	movi	r3,10
  80aea4:	1080068c 	andi	r2,r2,26
  80aea8:	10ff541e 	bne	r2,r3,80abfc <__alt_mem_onchip_mem+0xff78abfc>
  80aeac:	a080038f 	ldh	r2,14(r20)
  80aeb0:	103f5216 	blt	r2,zero,80abfc <__alt_mem_onchip_mem+0xff78abfc>
  80aeb4:	d9c02217 	ldw	r7,136(sp)
  80aeb8:	d9002017 	ldw	r4,128(sp)
  80aebc:	e00d883a 	mov	r6,fp
  80aec0:	a00b883a 	mov	r5,r20
  80aec4:	080bfec0 	call	80bfec <__sbprintf>
  80aec8:	dfc03617 	ldw	ra,216(sp)
  80aecc:	df003517 	ldw	fp,212(sp)
  80aed0:	ddc03417 	ldw	r23,208(sp)
  80aed4:	dd803317 	ldw	r22,204(sp)
  80aed8:	dd403217 	ldw	r21,200(sp)
  80aedc:	dd003117 	ldw	r20,196(sp)
  80aee0:	dcc03017 	ldw	r19,192(sp)
  80aee4:	dc802f17 	ldw	r18,188(sp)
  80aee8:	dc402e17 	ldw	r17,184(sp)
  80aeec:	dc002d17 	ldw	r16,180(sp)
  80aef0:	dec03704 	addi	sp,sp,220
  80aef4:	f800283a 	ret
  80aef8:	08024940 	call	802494 <__sinit>
  80aefc:	003f2f06 	br	80abbc <__alt_mem_onchip_mem+0xff78abbc>
  80af00:	0463c83a 	sub	r17,zero,r17
  80af04:	d8802215 	stw	r2,136(sp)
  80af08:	a5000114 	ori	r20,r20,4
  80af0c:	80c00007 	ldb	r3,0(r16)
  80af10:	003f7706 	br	80acf0 <__alt_mem_onchip_mem+0xff78acf0>
  80af14:	00800c04 	movi	r2,48
  80af18:	da802217 	ldw	r10,136(sp)
  80af1c:	d8801d05 	stb	r2,116(sp)
  80af20:	00801e04 	movi	r2,120
  80af24:	d8801d45 	stb	r2,117(sp)
  80af28:	d8001d85 	stb	zero,118(sp)
  80af2c:	50c00104 	addi	r3,r10,4
  80af30:	54800017 	ldw	r18,0(r10)
  80af34:	0027883a 	mov	r19,zero
  80af38:	a0800094 	ori	r2,r20,2
  80af3c:	48030b16 	blt	r9,zero,80bb6c <___vfiprintf_internal_r+0xff8>
  80af40:	00bfdfc4 	movi	r2,-129
  80af44:	a096703a 	and	r11,r20,r2
  80af48:	d8c02215 	stw	r3,136(sp)
  80af4c:	5d000094 	ori	r20,r11,2
  80af50:	90032b1e 	bne	r18,zero,80bc00 <___vfiprintf_internal_r+0x108c>
  80af54:	00802074 	movhi	r2,129
  80af58:	108f6b04 	addi	r2,r2,15788
  80af5c:	d8802615 	stw	r2,152(sp)
  80af60:	0039883a 	mov	fp,zero
  80af64:	48017b1e 	bne	r9,zero,80b554 <___vfiprintf_internal_r+0x9e0>
  80af68:	0013883a 	mov	r9,zero
  80af6c:	0027883a 	mov	r19,zero
  80af70:	dd401a04 	addi	r21,sp,104
  80af74:	4825883a 	mov	r18,r9
  80af78:	4cc0010e 	bge	r9,r19,80af80 <___vfiprintf_internal_r+0x40c>
  80af7c:	9825883a 	mov	r18,r19
  80af80:	e7003fcc 	andi	fp,fp,255
  80af84:	e700201c 	xori	fp,fp,128
  80af88:	e73fe004 	addi	fp,fp,-128
  80af8c:	e0000126 	beq	fp,zero,80af94 <___vfiprintf_internal_r+0x420>
  80af90:	94800044 	addi	r18,r18,1
  80af94:	a380008c 	andi	r14,r20,2
  80af98:	70000126 	beq	r14,zero,80afa0 <___vfiprintf_internal_r+0x42c>
  80af9c:	94800084 	addi	r18,r18,2
  80afa0:	a700210c 	andi	fp,r20,132
  80afa4:	e001df1e 	bne	fp,zero,80b724 <___vfiprintf_internal_r+0xbb0>
  80afa8:	8c87c83a 	sub	r3,r17,r18
  80afac:	00c1dd0e 	bge	zero,r3,80b724 <___vfiprintf_internal_r+0xbb0>
  80afb0:	01c00404 	movi	r7,16
  80afb4:	d8801c17 	ldw	r2,112(sp)
  80afb8:	38c3ad0e 	bge	r7,r3,80be70 <___vfiprintf_internal_r+0x12fc>
  80afbc:	02802074 	movhi	r10,129
  80afc0:	52906f04 	addi	r10,r10,16828
  80afc4:	dc002915 	stw	r16,164(sp)
  80afc8:	d9801b17 	ldw	r6,108(sp)
  80afcc:	da802415 	stw	r10,144(sp)
  80afd0:	03c001c4 	movi	r15,7
  80afd4:	da402515 	stw	r9,148(sp)
  80afd8:	db802815 	stw	r14,160(sp)
  80afdc:	1821883a 	mov	r16,r3
  80afe0:	00000506 	br	80aff8 <___vfiprintf_internal_r+0x484>
  80afe4:	31400084 	addi	r5,r6,2
  80afe8:	42000204 	addi	r8,r8,8
  80afec:	200d883a 	mov	r6,r4
  80aff0:	843ffc04 	addi	r16,r16,-16
  80aff4:	3c000d0e 	bge	r7,r16,80b02c <___vfiprintf_internal_r+0x4b8>
  80aff8:	10800404 	addi	r2,r2,16
  80affc:	31000044 	addi	r4,r6,1
  80b000:	45800015 	stw	r22,0(r8)
  80b004:	41c00115 	stw	r7,4(r8)
  80b008:	d8801c15 	stw	r2,112(sp)
  80b00c:	d9001b15 	stw	r4,108(sp)
  80b010:	793ff40e 	bge	r15,r4,80afe4 <__alt_mem_onchip_mem+0xff78afe4>
  80b014:	1001b51e 	bne	r2,zero,80b6ec <___vfiprintf_internal_r+0xb78>
  80b018:	843ffc04 	addi	r16,r16,-16
  80b01c:	000d883a 	mov	r6,zero
  80b020:	01400044 	movi	r5,1
  80b024:	d811883a 	mov	r8,sp
  80b028:	3c3ff316 	blt	r7,r16,80aff8 <__alt_mem_onchip_mem+0xff78aff8>
  80b02c:	8007883a 	mov	r3,r16
  80b030:	da402517 	ldw	r9,148(sp)
  80b034:	db802817 	ldw	r14,160(sp)
  80b038:	dc002917 	ldw	r16,164(sp)
  80b03c:	da802417 	ldw	r10,144(sp)
  80b040:	1885883a 	add	r2,r3,r2
  80b044:	40c00115 	stw	r3,4(r8)
  80b048:	42800015 	stw	r10,0(r8)
  80b04c:	d8801c15 	stw	r2,112(sp)
  80b050:	d9401b15 	stw	r5,108(sp)
  80b054:	00c001c4 	movi	r3,7
  80b058:	19426016 	blt	r3,r5,80b9dc <___vfiprintf_internal_r+0xe68>
  80b05c:	d8c01d87 	ldb	r3,118(sp)
  80b060:	42000204 	addi	r8,r8,8
  80b064:	29000044 	addi	r4,r5,1
  80b068:	1801b31e 	bne	r3,zero,80b738 <___vfiprintf_internal_r+0xbc4>
  80b06c:	7001c026 	beq	r14,zero,80b770 <___vfiprintf_internal_r+0xbfc>
  80b070:	d8c01d04 	addi	r3,sp,116
  80b074:	10800084 	addi	r2,r2,2
  80b078:	40c00015 	stw	r3,0(r8)
  80b07c:	00c00084 	movi	r3,2
  80b080:	40c00115 	stw	r3,4(r8)
  80b084:	d8801c15 	stw	r2,112(sp)
  80b088:	d9001b15 	stw	r4,108(sp)
  80b08c:	00c001c4 	movi	r3,7
  80b090:	1902650e 	bge	r3,r4,80ba28 <___vfiprintf_internal_r+0xeb4>
  80b094:	10029a1e 	bne	r2,zero,80bb00 <___vfiprintf_internal_r+0xf8c>
  80b098:	00c02004 	movi	r3,128
  80b09c:	01000044 	movi	r4,1
  80b0a0:	000b883a 	mov	r5,zero
  80b0a4:	d811883a 	mov	r8,sp
  80b0a8:	e0c1b31e 	bne	fp,r3,80b778 <___vfiprintf_internal_r+0xc04>
  80b0ac:	8cb9c83a 	sub	fp,r17,r18
  80b0b0:	0701b10e 	bge	zero,fp,80b778 <___vfiprintf_internal_r+0xc04>
  80b0b4:	01c00404 	movi	r7,16
  80b0b8:	3f03890e 	bge	r7,fp,80bee0 <___vfiprintf_internal_r+0x136c>
  80b0bc:	00c02074 	movhi	r3,129
  80b0c0:	18d06b04 	addi	r3,r3,16812
  80b0c4:	d8c02415 	stw	r3,144(sp)
  80b0c8:	8007883a 	mov	r3,r16
  80b0cc:	034001c4 	movi	r13,7
  80b0d0:	e021883a 	mov	r16,fp
  80b0d4:	da402515 	stw	r9,148(sp)
  80b0d8:	1839883a 	mov	fp,r3
  80b0dc:	00000506 	br	80b0f4 <___vfiprintf_internal_r+0x580>
  80b0e0:	29800084 	addi	r6,r5,2
  80b0e4:	42000204 	addi	r8,r8,8
  80b0e8:	180b883a 	mov	r5,r3
  80b0ec:	843ffc04 	addi	r16,r16,-16
  80b0f0:	3c000d0e 	bge	r7,r16,80b128 <___vfiprintf_internal_r+0x5b4>
  80b0f4:	10800404 	addi	r2,r2,16
  80b0f8:	28c00044 	addi	r3,r5,1
  80b0fc:	45c00015 	stw	r23,0(r8)
  80b100:	41c00115 	stw	r7,4(r8)
  80b104:	d8801c15 	stw	r2,112(sp)
  80b108:	d8c01b15 	stw	r3,108(sp)
  80b10c:	68fff40e 	bge	r13,r3,80b0e0 <__alt_mem_onchip_mem+0xff78b0e0>
  80b110:	1002241e 	bne	r2,zero,80b9a4 <___vfiprintf_internal_r+0xe30>
  80b114:	843ffc04 	addi	r16,r16,-16
  80b118:	01800044 	movi	r6,1
  80b11c:	000b883a 	mov	r5,zero
  80b120:	d811883a 	mov	r8,sp
  80b124:	3c3ff316 	blt	r7,r16,80b0f4 <__alt_mem_onchip_mem+0xff78b0f4>
  80b128:	da402517 	ldw	r9,148(sp)
  80b12c:	e007883a 	mov	r3,fp
  80b130:	8039883a 	mov	fp,r16
  80b134:	1821883a 	mov	r16,r3
  80b138:	d8c02417 	ldw	r3,144(sp)
  80b13c:	1705883a 	add	r2,r2,fp
  80b140:	47000115 	stw	fp,4(r8)
  80b144:	40c00015 	stw	r3,0(r8)
  80b148:	d8801c15 	stw	r2,112(sp)
  80b14c:	d9801b15 	stw	r6,108(sp)
  80b150:	00c001c4 	movi	r3,7
  80b154:	19827616 	blt	r3,r6,80bb30 <___vfiprintf_internal_r+0xfbc>
  80b158:	4cf9c83a 	sub	fp,r9,r19
  80b15c:	42000204 	addi	r8,r8,8
  80b160:	31000044 	addi	r4,r6,1
  80b164:	300b883a 	mov	r5,r6
  80b168:	07018516 	blt	zero,fp,80b780 <___vfiprintf_internal_r+0xc0c>
  80b16c:	9885883a 	add	r2,r19,r2
  80b170:	45400015 	stw	r21,0(r8)
  80b174:	44c00115 	stw	r19,4(r8)
  80b178:	d8801c15 	stw	r2,112(sp)
  80b17c:	d9001b15 	stw	r4,108(sp)
  80b180:	00c001c4 	movi	r3,7
  80b184:	1901dd0e 	bge	r3,r4,80b8fc <___vfiprintf_internal_r+0xd88>
  80b188:	1002401e 	bne	r2,zero,80ba8c <___vfiprintf_internal_r+0xf18>
  80b18c:	d8001b15 	stw	zero,108(sp)
  80b190:	a2c0010c 	andi	r11,r20,4
  80b194:	58000226 	beq	r11,zero,80b1a0 <___vfiprintf_internal_r+0x62c>
  80b198:	8ca7c83a 	sub	r19,r17,r18
  80b19c:	04c2f216 	blt	zero,r19,80bd68 <___vfiprintf_internal_r+0x11f4>
  80b1a0:	8c80010e 	bge	r17,r18,80b1a8 <___vfiprintf_internal_r+0x634>
  80b1a4:	9023883a 	mov	r17,r18
  80b1a8:	da802317 	ldw	r10,140(sp)
  80b1ac:	5455883a 	add	r10,r10,r17
  80b1b0:	da802315 	stw	r10,140(sp)
  80b1b4:	d8001b15 	stw	zero,108(sp)
  80b1b8:	d811883a 	mov	r8,sp
  80b1bc:	003ea206 	br	80ac48 <__alt_mem_onchip_mem+0xff78ac48>
  80b1c0:	a5000814 	ori	r20,r20,32
  80b1c4:	80c00007 	ldb	r3,0(r16)
  80b1c8:	003ec906 	br	80acf0 <__alt_mem_onchip_mem+0xff78acf0>
  80b1cc:	80c00007 	ldb	r3,0(r16)
  80b1d0:	1b030926 	beq	r3,r12,80bdf8 <___vfiprintf_internal_r+0x1284>
  80b1d4:	a5000414 	ori	r20,r20,16
  80b1d8:	003ec506 	br	80acf0 <__alt_mem_onchip_mem+0xff78acf0>
  80b1dc:	21003fcc 	andi	r4,r4,255
  80b1e0:	20035e1e 	bne	r4,zero,80bf5c <___vfiprintf_internal_r+0x13e8>
  80b1e4:	a080080c 	andi	r2,r20,32
  80b1e8:	1002a526 	beq	r2,zero,80bc80 <___vfiprintf_internal_r+0x110c>
  80b1ec:	da802217 	ldw	r10,136(sp)
  80b1f0:	50800017 	ldw	r2,0(r10)
  80b1f4:	da802317 	ldw	r10,140(sp)
  80b1f8:	5007d7fa 	srai	r3,r10,31
  80b1fc:	da802217 	ldw	r10,136(sp)
  80b200:	10c00115 	stw	r3,4(r2)
  80b204:	52800104 	addi	r10,r10,4
  80b208:	da802215 	stw	r10,136(sp)
  80b20c:	da802317 	ldw	r10,140(sp)
  80b210:	12800015 	stw	r10,0(r2)
  80b214:	003e8c06 	br	80ac48 <__alt_mem_onchip_mem+0xff78ac48>
  80b218:	21003fcc 	andi	r4,r4,255
  80b21c:	2003511e 	bne	r4,zero,80bf64 <___vfiprintf_internal_r+0x13f0>
  80b220:	a080080c 	andi	r2,r20,32
  80b224:	1000a126 	beq	r2,zero,80b4ac <___vfiprintf_internal_r+0x938>
  80b228:	da802217 	ldw	r10,136(sp)
  80b22c:	d8001d85 	stb	zero,118(sp)
  80b230:	50800204 	addi	r2,r10,8
  80b234:	54800017 	ldw	r18,0(r10)
  80b238:	54c00117 	ldw	r19,4(r10)
  80b23c:	4802b416 	blt	r9,zero,80bd10 <___vfiprintf_internal_r+0x119c>
  80b240:	013fdfc4 	movi	r4,-129
  80b244:	94c6b03a 	or	r3,r18,r19
  80b248:	d8802215 	stw	r2,136(sp)
  80b24c:	a128703a 	and	r20,r20,r4
  80b250:	1800a226 	beq	r3,zero,80b4dc <___vfiprintf_internal_r+0x968>
  80b254:	0039883a 	mov	fp,zero
  80b258:	dd401a04 	addi	r21,sp,104
  80b25c:	9006d0fa 	srli	r3,r18,3
  80b260:	9808977a 	slli	r4,r19,29
  80b264:	9826d0fa 	srli	r19,r19,3
  80b268:	948001cc 	andi	r18,r18,7
  80b26c:	90800c04 	addi	r2,r18,48
  80b270:	ad7fffc4 	addi	r21,r21,-1
  80b274:	20e4b03a 	or	r18,r4,r3
  80b278:	a8800005 	stb	r2,0(r21)
  80b27c:	94c6b03a 	or	r3,r18,r19
  80b280:	183ff61e 	bne	r3,zero,80b25c <__alt_mem_onchip_mem+0xff78b25c>
  80b284:	a0c0004c 	andi	r3,r20,1
  80b288:	18005926 	beq	r3,zero,80b3f0 <___vfiprintf_internal_r+0x87c>
  80b28c:	10803fcc 	andi	r2,r2,255
  80b290:	1080201c 	xori	r2,r2,128
  80b294:	10bfe004 	addi	r2,r2,-128
  80b298:	00c00c04 	movi	r3,48
  80b29c:	10c05426 	beq	r2,r3,80b3f0 <___vfiprintf_internal_r+0x87c>
  80b2a0:	da801e17 	ldw	r10,120(sp)
  80b2a4:	a8bfffc4 	addi	r2,r21,-1
  80b2a8:	a8ffffc5 	stb	r3,-1(r21)
  80b2ac:	50a7c83a 	sub	r19,r10,r2
  80b2b0:	102b883a 	mov	r21,r2
  80b2b4:	003f2f06 	br	80af74 <__alt_mem_onchip_mem+0xff78af74>
  80b2b8:	21003fcc 	andi	r4,r4,255
  80b2bc:	2003421e 	bne	r4,zero,80bfc8 <___vfiprintf_internal_r+0x1454>
  80b2c0:	00802074 	movhi	r2,129
  80b2c4:	108f6b04 	addi	r2,r2,15788
  80b2c8:	d8802615 	stw	r2,152(sp)
  80b2cc:	a080080c 	andi	r2,r20,32
  80b2d0:	1000aa26 	beq	r2,zero,80b57c <___vfiprintf_internal_r+0xa08>
  80b2d4:	da802217 	ldw	r10,136(sp)
  80b2d8:	54800017 	ldw	r18,0(r10)
  80b2dc:	54c00117 	ldw	r19,4(r10)
  80b2e0:	52800204 	addi	r10,r10,8
  80b2e4:	da802215 	stw	r10,136(sp)
  80b2e8:	a080004c 	andi	r2,r20,1
  80b2ec:	1001d226 	beq	r2,zero,80ba38 <___vfiprintf_internal_r+0xec4>
  80b2f0:	94c4b03a 	or	r2,r18,r19
  80b2f4:	1002351e 	bne	r2,zero,80bbcc <___vfiprintf_internal_r+0x1058>
  80b2f8:	d8001d85 	stb	zero,118(sp)
  80b2fc:	48022216 	blt	r9,zero,80bb88 <___vfiprintf_internal_r+0x1014>
  80b300:	00bfdfc4 	movi	r2,-129
  80b304:	a0a8703a 	and	r20,r20,r2
  80b308:	003f1506 	br	80af60 <__alt_mem_onchip_mem+0xff78af60>
  80b30c:	da802217 	ldw	r10,136(sp)
  80b310:	04800044 	movi	r18,1
  80b314:	d8001d85 	stb	zero,118(sp)
  80b318:	50800017 	ldw	r2,0(r10)
  80b31c:	52800104 	addi	r10,r10,4
  80b320:	da802215 	stw	r10,136(sp)
  80b324:	d8801005 	stb	r2,64(sp)
  80b328:	9027883a 	mov	r19,r18
  80b32c:	dd401004 	addi	r21,sp,64
  80b330:	0013883a 	mov	r9,zero
  80b334:	003f1706 	br	80af94 <__alt_mem_onchip_mem+0xff78af94>
  80b338:	21003fcc 	andi	r4,r4,255
  80b33c:	2003201e 	bne	r4,zero,80bfc0 <___vfiprintf_internal_r+0x144c>
  80b340:	a080080c 	andi	r2,r20,32
  80b344:	10004b26 	beq	r2,zero,80b474 <___vfiprintf_internal_r+0x900>
  80b348:	da802217 	ldw	r10,136(sp)
  80b34c:	50800117 	ldw	r2,4(r10)
  80b350:	54800017 	ldw	r18,0(r10)
  80b354:	52800204 	addi	r10,r10,8
  80b358:	da802215 	stw	r10,136(sp)
  80b35c:	1027883a 	mov	r19,r2
  80b360:	10022c16 	blt	r2,zero,80bc14 <___vfiprintf_internal_r+0x10a0>
  80b364:	df001d83 	ldbu	fp,118(sp)
  80b368:	48007216 	blt	r9,zero,80b534 <___vfiprintf_internal_r+0x9c0>
  80b36c:	00ffdfc4 	movi	r3,-129
  80b370:	94c4b03a 	or	r2,r18,r19
  80b374:	a0e8703a 	and	r20,r20,r3
  80b378:	1000cc26 	beq	r2,zero,80b6ac <___vfiprintf_internal_r+0xb38>
  80b37c:	98021026 	beq	r19,zero,80bbc0 <___vfiprintf_internal_r+0x104c>
  80b380:	dc402415 	stw	r17,144(sp)
  80b384:	dc002515 	stw	r16,148(sp)
  80b388:	9823883a 	mov	r17,r19
  80b38c:	9021883a 	mov	r16,r18
  80b390:	dd401a04 	addi	r21,sp,104
  80b394:	4825883a 	mov	r18,r9
  80b398:	4027883a 	mov	r19,r8
  80b39c:	8009883a 	mov	r4,r16
  80b3a0:	880b883a 	mov	r5,r17
  80b3a4:	01800284 	movi	r6,10
  80b3a8:	000f883a 	mov	r7,zero
  80b3ac:	080cc2c0 	call	80cc2c <__umoddi3>
  80b3b0:	10800c04 	addi	r2,r2,48
  80b3b4:	ad7fffc4 	addi	r21,r21,-1
  80b3b8:	8009883a 	mov	r4,r16
  80b3bc:	880b883a 	mov	r5,r17
  80b3c0:	a8800005 	stb	r2,0(r21)
  80b3c4:	01800284 	movi	r6,10
  80b3c8:	000f883a 	mov	r7,zero
  80b3cc:	080c6b40 	call	80c6b4 <__udivdi3>
  80b3d0:	1021883a 	mov	r16,r2
  80b3d4:	10c4b03a 	or	r2,r2,r3
  80b3d8:	1823883a 	mov	r17,r3
  80b3dc:	103fef1e 	bne	r2,zero,80b39c <__alt_mem_onchip_mem+0xff78b39c>
  80b3e0:	dc402417 	ldw	r17,144(sp)
  80b3e4:	dc002517 	ldw	r16,148(sp)
  80b3e8:	9013883a 	mov	r9,r18
  80b3ec:	9811883a 	mov	r8,r19
  80b3f0:	da801e17 	ldw	r10,120(sp)
  80b3f4:	5567c83a 	sub	r19,r10,r21
  80b3f8:	003ede06 	br	80af74 <__alt_mem_onchip_mem+0xff78af74>
  80b3fc:	38803fcc 	andi	r2,r7,255
  80b400:	1080201c 	xori	r2,r2,128
  80b404:	10bfe004 	addi	r2,r2,-128
  80b408:	1002371e 	bne	r2,zero,80bce8 <___vfiprintf_internal_r+0x1174>
  80b40c:	01000044 	movi	r4,1
  80b410:	01c00804 	movi	r7,32
  80b414:	80c00007 	ldb	r3,0(r16)
  80b418:	003e3506 	br	80acf0 <__alt_mem_onchip_mem+0xff78acf0>
  80b41c:	a5000054 	ori	r20,r20,1
  80b420:	80c00007 	ldb	r3,0(r16)
  80b424:	003e3206 	br	80acf0 <__alt_mem_onchip_mem+0xff78acf0>
  80b428:	a5002014 	ori	r20,r20,128
  80b42c:	80c00007 	ldb	r3,0(r16)
  80b430:	003e2f06 	br	80acf0 <__alt_mem_onchip_mem+0xff78acf0>
  80b434:	8015883a 	mov	r10,r16
  80b438:	0023883a 	mov	r17,zero
  80b43c:	18bff404 	addi	r2,r3,-48
  80b440:	50c00007 	ldb	r3,0(r10)
  80b444:	8c4002a4 	muli	r17,r17,10
  80b448:	84000044 	addi	r16,r16,1
  80b44c:	8015883a 	mov	r10,r16
  80b450:	1463883a 	add	r17,r2,r17
  80b454:	18bff404 	addi	r2,r3,-48
  80b458:	30bff92e 	bgeu	r6,r2,80b440 <__alt_mem_onchip_mem+0xff78b440>
  80b45c:	003e2506 	br	80acf4 <__alt_mem_onchip_mem+0xff78acf4>
  80b460:	21003fcc 	andi	r4,r4,255
  80b464:	2002d41e 	bne	r4,zero,80bfb8 <___vfiprintf_internal_r+0x1444>
  80b468:	a5000414 	ori	r20,r20,16
  80b46c:	a080080c 	andi	r2,r20,32
  80b470:	103fb51e 	bne	r2,zero,80b348 <__alt_mem_onchip_mem+0xff78b348>
  80b474:	a080040c 	andi	r2,r20,16
  80b478:	1001f826 	beq	r2,zero,80bc5c <___vfiprintf_internal_r+0x10e8>
  80b47c:	da802217 	ldw	r10,136(sp)
  80b480:	54800017 	ldw	r18,0(r10)
  80b484:	52800104 	addi	r10,r10,4
  80b488:	da802215 	stw	r10,136(sp)
  80b48c:	9027d7fa 	srai	r19,r18,31
  80b490:	9805883a 	mov	r2,r19
  80b494:	003fb206 	br	80b360 <__alt_mem_onchip_mem+0xff78b360>
  80b498:	21003fcc 	andi	r4,r4,255
  80b49c:	2002c41e 	bne	r4,zero,80bfb0 <___vfiprintf_internal_r+0x143c>
  80b4a0:	a5000414 	ori	r20,r20,16
  80b4a4:	a080080c 	andi	r2,r20,32
  80b4a8:	103f5f1e 	bne	r2,zero,80b228 <__alt_mem_onchip_mem+0xff78b228>
  80b4ac:	a080040c 	andi	r2,r20,16
  80b4b0:	10020f26 	beq	r2,zero,80bcf0 <___vfiprintf_internal_r+0x117c>
  80b4b4:	da802217 	ldw	r10,136(sp)
  80b4b8:	d8001d85 	stb	zero,118(sp)
  80b4bc:	0027883a 	mov	r19,zero
  80b4c0:	50800104 	addi	r2,r10,4
  80b4c4:	54800017 	ldw	r18,0(r10)
  80b4c8:	48021116 	blt	r9,zero,80bd10 <___vfiprintf_internal_r+0x119c>
  80b4cc:	00ffdfc4 	movi	r3,-129
  80b4d0:	d8802215 	stw	r2,136(sp)
  80b4d4:	a0e8703a 	and	r20,r20,r3
  80b4d8:	903f5e1e 	bne	r18,zero,80b254 <__alt_mem_onchip_mem+0xff78b254>
  80b4dc:	0039883a 	mov	fp,zero
  80b4e0:	4802a626 	beq	r9,zero,80bf7c <___vfiprintf_internal_r+0x1408>
  80b4e4:	0025883a 	mov	r18,zero
  80b4e8:	0027883a 	mov	r19,zero
  80b4ec:	003f5a06 	br	80b258 <__alt_mem_onchip_mem+0xff78b258>
  80b4f0:	21003fcc 	andi	r4,r4,255
  80b4f4:	20029f1e 	bne	r4,zero,80bf74 <___vfiprintf_internal_r+0x1400>
  80b4f8:	a5000414 	ori	r20,r20,16
  80b4fc:	a080080c 	andi	r2,r20,32
  80b500:	10005e1e 	bne	r2,zero,80b67c <___vfiprintf_internal_r+0xb08>
  80b504:	a080040c 	andi	r2,r20,16
  80b508:	1001a21e 	bne	r2,zero,80bb94 <___vfiprintf_internal_r+0x1020>
  80b50c:	a080100c 	andi	r2,r20,64
  80b510:	d8001d85 	stb	zero,118(sp)
  80b514:	da802217 	ldw	r10,136(sp)
  80b518:	1002231e 	bne	r2,zero,80bda8 <___vfiprintf_internal_r+0x1234>
  80b51c:	50800104 	addi	r2,r10,4
  80b520:	54800017 	ldw	r18,0(r10)
  80b524:	0027883a 	mov	r19,zero
  80b528:	4801a00e 	bge	r9,zero,80bbac <___vfiprintf_internal_r+0x1038>
  80b52c:	d8802215 	stw	r2,136(sp)
  80b530:	0039883a 	mov	fp,zero
  80b534:	94c4b03a 	or	r2,r18,r19
  80b538:	103f901e 	bne	r2,zero,80b37c <__alt_mem_onchip_mem+0xff78b37c>
  80b53c:	00800044 	movi	r2,1
  80b540:	10803fcc 	andi	r2,r2,255
  80b544:	00c00044 	movi	r3,1
  80b548:	10c05926 	beq	r2,r3,80b6b0 <___vfiprintf_internal_r+0xb3c>
  80b54c:	00c00084 	movi	r3,2
  80b550:	10ffe41e 	bne	r2,r3,80b4e4 <__alt_mem_onchip_mem+0xff78b4e4>
  80b554:	0025883a 	mov	r18,zero
  80b558:	0027883a 	mov	r19,zero
  80b55c:	00013d06 	br	80ba54 <___vfiprintf_internal_r+0xee0>
  80b560:	21003fcc 	andi	r4,r4,255
  80b564:	2002811e 	bne	r4,zero,80bf6c <___vfiprintf_internal_r+0x13f8>
  80b568:	00802074 	movhi	r2,129
  80b56c:	108f6604 	addi	r2,r2,15768
  80b570:	d8802615 	stw	r2,152(sp)
  80b574:	a080080c 	andi	r2,r20,32
  80b578:	103f561e 	bne	r2,zero,80b2d4 <__alt_mem_onchip_mem+0xff78b2d4>
  80b57c:	a080040c 	andi	r2,r20,16
  80b580:	1001d126 	beq	r2,zero,80bcc8 <___vfiprintf_internal_r+0x1154>
  80b584:	da802217 	ldw	r10,136(sp)
  80b588:	0027883a 	mov	r19,zero
  80b58c:	54800017 	ldw	r18,0(r10)
  80b590:	52800104 	addi	r10,r10,4
  80b594:	da802215 	stw	r10,136(sp)
  80b598:	003f5306 	br	80b2e8 <__alt_mem_onchip_mem+0xff78b2e8>
  80b59c:	da802217 	ldw	r10,136(sp)
  80b5a0:	d8001d85 	stb	zero,118(sp)
  80b5a4:	55400017 	ldw	r21,0(r10)
  80b5a8:	50c00104 	addi	r3,r10,4
  80b5ac:	a8024226 	beq	r21,zero,80beb8 <___vfiprintf_internal_r+0x1344>
  80b5b0:	48021816 	blt	r9,zero,80be14 <___vfiprintf_internal_r+0x12a0>
  80b5b4:	480d883a 	mov	r6,r9
  80b5b8:	000b883a 	mov	r5,zero
  80b5bc:	a809883a 	mov	r4,r21
  80b5c0:	d8c02a15 	stw	r3,168(sp)
  80b5c4:	da002b15 	stw	r8,172(sp)
  80b5c8:	da402c15 	stw	r9,176(sp)
  80b5cc:	0808e600 	call	808e60 <memchr>
  80b5d0:	d8c02a17 	ldw	r3,168(sp)
  80b5d4:	da002b17 	ldw	r8,172(sp)
  80b5d8:	da402c17 	ldw	r9,176(sp)
  80b5dc:	10024826 	beq	r2,zero,80bf00 <___vfiprintf_internal_r+0x138c>
  80b5e0:	1567c83a 	sub	r19,r2,r21
  80b5e4:	df001d83 	ldbu	fp,118(sp)
  80b5e8:	d8c02215 	stw	r3,136(sp)
  80b5ec:	0013883a 	mov	r9,zero
  80b5f0:	003e6006 	br	80af74 <__alt_mem_onchip_mem+0xff78af74>
  80b5f4:	21003fcc 	andi	r4,r4,255
  80b5f8:	203fc026 	beq	r4,zero,80b4fc <__alt_mem_onchip_mem+0xff78b4fc>
  80b5fc:	d9c01d85 	stb	r7,118(sp)
  80b600:	003fbe06 	br	80b4fc <__alt_mem_onchip_mem+0xff78b4fc>
  80b604:	da802217 	ldw	r10,136(sp)
  80b608:	54400017 	ldw	r17,0(r10)
  80b60c:	50800104 	addi	r2,r10,4
  80b610:	883e3b16 	blt	r17,zero,80af00 <__alt_mem_onchip_mem+0xff78af00>
  80b614:	d8802215 	stw	r2,136(sp)
  80b618:	80c00007 	ldb	r3,0(r16)
  80b61c:	003db406 	br	80acf0 <__alt_mem_onchip_mem+0xff78acf0>
  80b620:	01000044 	movi	r4,1
  80b624:	01c00ac4 	movi	r7,43
  80b628:	80c00007 	ldb	r3,0(r16)
  80b62c:	003db006 	br	80acf0 <__alt_mem_onchip_mem+0xff78acf0>
  80b630:	80c00007 	ldb	r3,0(r16)
  80b634:	82800044 	addi	r10,r16,1
  80b638:	1b423c26 	beq	r3,r13,80bf2c <___vfiprintf_internal_r+0x13b8>
  80b63c:	18bff404 	addi	r2,r3,-48
  80b640:	0013883a 	mov	r9,zero
  80b644:	30822b36 	bltu	r6,r2,80bef4 <___vfiprintf_internal_r+0x1380>
  80b648:	50c00007 	ldb	r3,0(r10)
  80b64c:	4a4002a4 	muli	r9,r9,10
  80b650:	54000044 	addi	r16,r10,1
  80b654:	8015883a 	mov	r10,r16
  80b658:	4893883a 	add	r9,r9,r2
  80b65c:	18bff404 	addi	r2,r3,-48
  80b660:	30bff92e 	bgeu	r6,r2,80b648 <__alt_mem_onchip_mem+0xff78b648>
  80b664:	483da30e 	bge	r9,zero,80acf4 <__alt_mem_onchip_mem+0xff78acf4>
  80b668:	027fffc4 	movi	r9,-1
  80b66c:	003da106 	br	80acf4 <__alt_mem_onchip_mem+0xff78acf4>
  80b670:	a5001014 	ori	r20,r20,64
  80b674:	80c00007 	ldb	r3,0(r16)
  80b678:	003d9d06 	br	80acf0 <__alt_mem_onchip_mem+0xff78acf0>
  80b67c:	da802217 	ldw	r10,136(sp)
  80b680:	d8001d85 	stb	zero,118(sp)
  80b684:	50c00204 	addi	r3,r10,8
  80b688:	54800017 	ldw	r18,0(r10)
  80b68c:	54c00117 	ldw	r19,4(r10)
  80b690:	4801ca16 	blt	r9,zero,80bdbc <___vfiprintf_internal_r+0x1248>
  80b694:	013fdfc4 	movi	r4,-129
  80b698:	94c4b03a 	or	r2,r18,r19
  80b69c:	d8c02215 	stw	r3,136(sp)
  80b6a0:	a128703a 	and	r20,r20,r4
  80b6a4:	0039883a 	mov	fp,zero
  80b6a8:	103f341e 	bne	r2,zero,80b37c <__alt_mem_onchip_mem+0xff78b37c>
  80b6ac:	483e2e26 	beq	r9,zero,80af68 <__alt_mem_onchip_mem+0xff78af68>
  80b6b0:	0025883a 	mov	r18,zero
  80b6b4:	94800c04 	addi	r18,r18,48
  80b6b8:	dc8019c5 	stb	r18,103(sp)
  80b6bc:	dcc02717 	ldw	r19,156(sp)
  80b6c0:	dd4019c4 	addi	r21,sp,103
  80b6c4:	003e2b06 	br	80af74 <__alt_mem_onchip_mem+0xff78af74>
  80b6c8:	21003fcc 	andi	r4,r4,255
  80b6cc:	2002361e 	bne	r4,zero,80bfa8 <___vfiprintf_internal_r+0x1434>
  80b6d0:	1801c126 	beq	r3,zero,80bdd8 <___vfiprintf_internal_r+0x1264>
  80b6d4:	04800044 	movi	r18,1
  80b6d8:	d8c01005 	stb	r3,64(sp)
  80b6dc:	d8001d85 	stb	zero,118(sp)
  80b6e0:	9027883a 	mov	r19,r18
  80b6e4:	dd401004 	addi	r21,sp,64
  80b6e8:	003f1106 	br	80b330 <__alt_mem_onchip_mem+0xff78b330>
  80b6ec:	d9402117 	ldw	r5,132(sp)
  80b6f0:	d9002017 	ldw	r4,128(sp)
  80b6f4:	d9801a04 	addi	r6,sp,104
  80b6f8:	d9c02b15 	stw	r7,172(sp)
  80b6fc:	dbc02a15 	stw	r15,168(sp)
  80b700:	080aa600 	call	80aa60 <__sprint_r.part.0>
  80b704:	d9c02b17 	ldw	r7,172(sp)
  80b708:	dbc02a17 	ldw	r15,168(sp)
  80b70c:	10006d1e 	bne	r2,zero,80b8c4 <___vfiprintf_internal_r+0xd50>
  80b710:	d9801b17 	ldw	r6,108(sp)
  80b714:	d8801c17 	ldw	r2,112(sp)
  80b718:	d811883a 	mov	r8,sp
  80b71c:	31400044 	addi	r5,r6,1
  80b720:	003e3306 	br	80aff0 <__alt_mem_onchip_mem+0xff78aff0>
  80b724:	d9401b17 	ldw	r5,108(sp)
  80b728:	d8801c17 	ldw	r2,112(sp)
  80b72c:	29000044 	addi	r4,r5,1
  80b730:	d8c01d87 	ldb	r3,118(sp)
  80b734:	183e4d26 	beq	r3,zero,80b06c <__alt_mem_onchip_mem+0xff78b06c>
  80b738:	00c00044 	movi	r3,1
  80b73c:	d9401d84 	addi	r5,sp,118
  80b740:	10c5883a 	add	r2,r2,r3
  80b744:	41400015 	stw	r5,0(r8)
  80b748:	40c00115 	stw	r3,4(r8)
  80b74c:	d8801c15 	stw	r2,112(sp)
  80b750:	d9001b15 	stw	r4,108(sp)
  80b754:	014001c4 	movi	r5,7
  80b758:	2900a90e 	bge	r5,r4,80ba00 <___vfiprintf_internal_r+0xe8c>
  80b75c:	1000da1e 	bne	r2,zero,80bac8 <___vfiprintf_internal_r+0xf54>
  80b760:	7000ab1e 	bne	r14,zero,80ba10 <___vfiprintf_internal_r+0xe9c>
  80b764:	000b883a 	mov	r5,zero
  80b768:	1809883a 	mov	r4,r3
  80b76c:	d811883a 	mov	r8,sp
  80b770:	00c02004 	movi	r3,128
  80b774:	e0fe4d26 	beq	fp,r3,80b0ac <__alt_mem_onchip_mem+0xff78b0ac>
  80b778:	4cf9c83a 	sub	fp,r9,r19
  80b77c:	073e7b0e 	bge	zero,fp,80b16c <__alt_mem_onchip_mem+0xff78b16c>
  80b780:	01c00404 	movi	r7,16
  80b784:	3f01900e 	bge	r7,fp,80bdc8 <___vfiprintf_internal_r+0x1254>
  80b788:	00c02074 	movhi	r3,129
  80b78c:	18d06b04 	addi	r3,r3,16812
  80b790:	d8c02415 	stw	r3,144(sp)
  80b794:	034001c4 	movi	r13,7
  80b798:	00000506 	br	80b7b0 <___vfiprintf_internal_r+0xc3c>
  80b79c:	29000084 	addi	r4,r5,2
  80b7a0:	42000204 	addi	r8,r8,8
  80b7a4:	180b883a 	mov	r5,r3
  80b7a8:	e73ffc04 	addi	fp,fp,-16
  80b7ac:	3f000d0e 	bge	r7,fp,80b7e4 <___vfiprintf_internal_r+0xc70>
  80b7b0:	10800404 	addi	r2,r2,16
  80b7b4:	28c00044 	addi	r3,r5,1
  80b7b8:	45c00015 	stw	r23,0(r8)
  80b7bc:	41c00115 	stw	r7,4(r8)
  80b7c0:	d8801c15 	stw	r2,112(sp)
  80b7c4:	d8c01b15 	stw	r3,108(sp)
  80b7c8:	68fff40e 	bge	r13,r3,80b79c <__alt_mem_onchip_mem+0xff78b79c>
  80b7cc:	1000101e 	bne	r2,zero,80b810 <___vfiprintf_internal_r+0xc9c>
  80b7d0:	e73ffc04 	addi	fp,fp,-16
  80b7d4:	01000044 	movi	r4,1
  80b7d8:	000b883a 	mov	r5,zero
  80b7dc:	d811883a 	mov	r8,sp
  80b7e0:	3f3ff316 	blt	r7,fp,80b7b0 <__alt_mem_onchip_mem+0xff78b7b0>
  80b7e4:	da802417 	ldw	r10,144(sp)
  80b7e8:	1705883a 	add	r2,r2,fp
  80b7ec:	47000115 	stw	fp,4(r8)
  80b7f0:	42800015 	stw	r10,0(r8)
  80b7f4:	d8801c15 	stw	r2,112(sp)
  80b7f8:	d9001b15 	stw	r4,108(sp)
  80b7fc:	00c001c4 	movi	r3,7
  80b800:	19003616 	blt	r3,r4,80b8dc <___vfiprintf_internal_r+0xd68>
  80b804:	42000204 	addi	r8,r8,8
  80b808:	21000044 	addi	r4,r4,1
  80b80c:	003e5706 	br	80b16c <__alt_mem_onchip_mem+0xff78b16c>
  80b810:	d9402117 	ldw	r5,132(sp)
  80b814:	d9002017 	ldw	r4,128(sp)
  80b818:	d9801a04 	addi	r6,sp,104
  80b81c:	d9c02b15 	stw	r7,172(sp)
  80b820:	db402a15 	stw	r13,168(sp)
  80b824:	080aa600 	call	80aa60 <__sprint_r.part.0>
  80b828:	d9c02b17 	ldw	r7,172(sp)
  80b82c:	db402a17 	ldw	r13,168(sp)
  80b830:	1000241e 	bne	r2,zero,80b8c4 <___vfiprintf_internal_r+0xd50>
  80b834:	d9401b17 	ldw	r5,108(sp)
  80b838:	d8801c17 	ldw	r2,112(sp)
  80b83c:	d811883a 	mov	r8,sp
  80b840:	29000044 	addi	r4,r5,1
  80b844:	003fd806 	br	80b7a8 <__alt_mem_onchip_mem+0xff78b7a8>
  80b848:	d9401b17 	ldw	r5,108(sp)
  80b84c:	00c02074 	movhi	r3,129
  80b850:	18d06f04 	addi	r3,r3,16828
  80b854:	d8c02415 	stw	r3,144(sp)
  80b858:	29400044 	addi	r5,r5,1
  80b85c:	d8c02417 	ldw	r3,144(sp)
  80b860:	14c5883a 	add	r2,r2,r19
  80b864:	44c00115 	stw	r19,4(r8)
  80b868:	40c00015 	stw	r3,0(r8)
  80b86c:	d8801c15 	stw	r2,112(sp)
  80b870:	d9401b15 	stw	r5,108(sp)
  80b874:	00c001c4 	movi	r3,7
  80b878:	1940070e 	bge	r3,r5,80b898 <___vfiprintf_internal_r+0xd24>
  80b87c:	103e4826 	beq	r2,zero,80b1a0 <__alt_mem_onchip_mem+0xff78b1a0>
  80b880:	d9402117 	ldw	r5,132(sp)
  80b884:	d9002017 	ldw	r4,128(sp)
  80b888:	d9801a04 	addi	r6,sp,104
  80b88c:	080aa600 	call	80aa60 <__sprint_r.part.0>
  80b890:	10000c1e 	bne	r2,zero,80b8c4 <___vfiprintf_internal_r+0xd50>
  80b894:	d8801c17 	ldw	r2,112(sp)
  80b898:	8c80010e 	bge	r17,r18,80b8a0 <___vfiprintf_internal_r+0xd2c>
  80b89c:	9023883a 	mov	r17,r18
  80b8a0:	da802317 	ldw	r10,140(sp)
  80b8a4:	5455883a 	add	r10,r10,r17
  80b8a8:	da802315 	stw	r10,140(sp)
  80b8ac:	103e4126 	beq	r2,zero,80b1b4 <__alt_mem_onchip_mem+0xff78b1b4>
  80b8b0:	d9402117 	ldw	r5,132(sp)
  80b8b4:	d9002017 	ldw	r4,128(sp)
  80b8b8:	d9801a04 	addi	r6,sp,104
  80b8bc:	080aa600 	call	80aa60 <__sprint_r.part.0>
  80b8c0:	103e3c26 	beq	r2,zero,80b1b4 <__alt_mem_onchip_mem+0xff78b1b4>
  80b8c4:	dd002117 	ldw	r20,132(sp)
  80b8c8:	a080030b 	ldhu	r2,12(r20)
  80b8cc:	1080100c 	andi	r2,r2,64
  80b8d0:	1001231e 	bne	r2,zero,80bd60 <___vfiprintf_internal_r+0x11ec>
  80b8d4:	d8802317 	ldw	r2,140(sp)
  80b8d8:	003d7b06 	br	80aec8 <__alt_mem_onchip_mem+0xff78aec8>
  80b8dc:	1000991e 	bne	r2,zero,80bb44 <___vfiprintf_internal_r+0xfd0>
  80b8e0:	00c00044 	movi	r3,1
  80b8e4:	9805883a 	mov	r2,r19
  80b8e8:	dd400015 	stw	r21,0(sp)
  80b8ec:	dcc00115 	stw	r19,4(sp)
  80b8f0:	dcc01c15 	stw	r19,112(sp)
  80b8f4:	d8c01b15 	stw	r3,108(sp)
  80b8f8:	d811883a 	mov	r8,sp
  80b8fc:	42000204 	addi	r8,r8,8
  80b900:	a2c0010c 	andi	r11,r20,4
  80b904:	583fe426 	beq	r11,zero,80b898 <__alt_mem_onchip_mem+0xff78b898>
  80b908:	8ca7c83a 	sub	r19,r17,r18
  80b90c:	04ffe20e 	bge	zero,r19,80b898 <__alt_mem_onchip_mem+0xff78b898>
  80b910:	01c00404 	movi	r7,16
  80b914:	3cffcc0e 	bge	r7,r19,80b848 <__alt_mem_onchip_mem+0xff78b848>
  80b918:	02802074 	movhi	r10,129
  80b91c:	52906f04 	addi	r10,r10,16828
  80b920:	d9001b17 	ldw	r4,108(sp)
  80b924:	da802415 	stw	r10,144(sp)
  80b928:	382b883a 	mov	r21,r7
  80b92c:	050001c4 	movi	r20,7
  80b930:	df002017 	ldw	fp,128(sp)
  80b934:	00000506 	br	80b94c <___vfiprintf_internal_r+0xdd8>
  80b938:	21400084 	addi	r5,r4,2
  80b93c:	42000204 	addi	r8,r8,8
  80b940:	1809883a 	mov	r4,r3
  80b944:	9cfffc04 	addi	r19,r19,-16
  80b948:	acffc40e 	bge	r21,r19,80b85c <__alt_mem_onchip_mem+0xff78b85c>
  80b94c:	10800404 	addi	r2,r2,16
  80b950:	20c00044 	addi	r3,r4,1
  80b954:	45800015 	stw	r22,0(r8)
  80b958:	45400115 	stw	r21,4(r8)
  80b95c:	d8801c15 	stw	r2,112(sp)
  80b960:	d8c01b15 	stw	r3,108(sp)
  80b964:	a0fff40e 	bge	r20,r3,80b938 <__alt_mem_onchip_mem+0xff78b938>
  80b968:	1000041e 	bne	r2,zero,80b97c <___vfiprintf_internal_r+0xe08>
  80b96c:	01400044 	movi	r5,1
  80b970:	0009883a 	mov	r4,zero
  80b974:	d811883a 	mov	r8,sp
  80b978:	003ff206 	br	80b944 <__alt_mem_onchip_mem+0xff78b944>
  80b97c:	d9402117 	ldw	r5,132(sp)
  80b980:	d9801a04 	addi	r6,sp,104
  80b984:	e009883a 	mov	r4,fp
  80b988:	080aa600 	call	80aa60 <__sprint_r.part.0>
  80b98c:	103fcd1e 	bne	r2,zero,80b8c4 <__alt_mem_onchip_mem+0xff78b8c4>
  80b990:	d9001b17 	ldw	r4,108(sp)
  80b994:	d8801c17 	ldw	r2,112(sp)
  80b998:	d811883a 	mov	r8,sp
  80b99c:	21400044 	addi	r5,r4,1
  80b9a0:	003fe806 	br	80b944 <__alt_mem_onchip_mem+0xff78b944>
  80b9a4:	d9402117 	ldw	r5,132(sp)
  80b9a8:	d9002017 	ldw	r4,128(sp)
  80b9ac:	d9801a04 	addi	r6,sp,104
  80b9b0:	d9c02b15 	stw	r7,172(sp)
  80b9b4:	db402a15 	stw	r13,168(sp)
  80b9b8:	080aa600 	call	80aa60 <__sprint_r.part.0>
  80b9bc:	d9c02b17 	ldw	r7,172(sp)
  80b9c0:	db402a17 	ldw	r13,168(sp)
  80b9c4:	103fbf1e 	bne	r2,zero,80b8c4 <__alt_mem_onchip_mem+0xff78b8c4>
  80b9c8:	d9401b17 	ldw	r5,108(sp)
  80b9cc:	d8801c17 	ldw	r2,112(sp)
  80b9d0:	d811883a 	mov	r8,sp
  80b9d4:	29800044 	addi	r6,r5,1
  80b9d8:	003dc406 	br	80b0ec <__alt_mem_onchip_mem+0xff78b0ec>
  80b9dc:	1000d21e 	bne	r2,zero,80bd28 <___vfiprintf_internal_r+0x11b4>
  80b9e0:	d8c01d87 	ldb	r3,118(sp)
  80b9e4:	18009526 	beq	r3,zero,80bc3c <___vfiprintf_internal_r+0x10c8>
  80b9e8:	00800044 	movi	r2,1
  80b9ec:	d8c01d84 	addi	r3,sp,118
  80b9f0:	1009883a 	mov	r4,r2
  80b9f4:	d8c00015 	stw	r3,0(sp)
  80b9f8:	d8800115 	stw	r2,4(sp)
  80b9fc:	d811883a 	mov	r8,sp
  80ba00:	200b883a 	mov	r5,r4
  80ba04:	42000204 	addi	r8,r8,8
  80ba08:	21000044 	addi	r4,r4,1
  80ba0c:	003d9706 	br	80b06c <__alt_mem_onchip_mem+0xff78b06c>
  80ba10:	d9001d04 	addi	r4,sp,116
  80ba14:	00800084 	movi	r2,2
  80ba18:	d9000015 	stw	r4,0(sp)
  80ba1c:	d8800115 	stw	r2,4(sp)
  80ba20:	1809883a 	mov	r4,r3
  80ba24:	d811883a 	mov	r8,sp
  80ba28:	200b883a 	mov	r5,r4
  80ba2c:	42000204 	addi	r8,r8,8
  80ba30:	21000044 	addi	r4,r4,1
  80ba34:	003f4e06 	br	80b770 <__alt_mem_onchip_mem+0xff78b770>
  80ba38:	d8001d85 	stb	zero,118(sp)
  80ba3c:	48005016 	blt	r9,zero,80bb80 <___vfiprintf_internal_r+0x100c>
  80ba40:	00ffdfc4 	movi	r3,-129
  80ba44:	94c4b03a 	or	r2,r18,r19
  80ba48:	a0e8703a 	and	r20,r20,r3
  80ba4c:	103d4426 	beq	r2,zero,80af60 <__alt_mem_onchip_mem+0xff78af60>
  80ba50:	0039883a 	mov	fp,zero
  80ba54:	d9002617 	ldw	r4,152(sp)
  80ba58:	dd401a04 	addi	r21,sp,104
  80ba5c:	908003cc 	andi	r2,r18,15
  80ba60:	9806973a 	slli	r3,r19,28
  80ba64:	2085883a 	add	r2,r4,r2
  80ba68:	9024d13a 	srli	r18,r18,4
  80ba6c:	10800003 	ldbu	r2,0(r2)
  80ba70:	9826d13a 	srli	r19,r19,4
  80ba74:	ad7fffc4 	addi	r21,r21,-1
  80ba78:	1ca4b03a 	or	r18,r3,r18
  80ba7c:	a8800005 	stb	r2,0(r21)
  80ba80:	94c4b03a 	or	r2,r18,r19
  80ba84:	103ff51e 	bne	r2,zero,80ba5c <__alt_mem_onchip_mem+0xff78ba5c>
  80ba88:	003e5906 	br	80b3f0 <__alt_mem_onchip_mem+0xff78b3f0>
  80ba8c:	d9402117 	ldw	r5,132(sp)
  80ba90:	d9002017 	ldw	r4,128(sp)
  80ba94:	d9801a04 	addi	r6,sp,104
  80ba98:	080aa600 	call	80aa60 <__sprint_r.part.0>
  80ba9c:	103f891e 	bne	r2,zero,80b8c4 <__alt_mem_onchip_mem+0xff78b8c4>
  80baa0:	d8801c17 	ldw	r2,112(sp)
  80baa4:	d811883a 	mov	r8,sp
  80baa8:	003f9506 	br	80b900 <__alt_mem_onchip_mem+0xff78b900>
  80baac:	d9402117 	ldw	r5,132(sp)
  80bab0:	d9002017 	ldw	r4,128(sp)
  80bab4:	d9801a04 	addi	r6,sp,104
  80bab8:	080aa600 	call	80aa60 <__sprint_r.part.0>
  80babc:	103f811e 	bne	r2,zero,80b8c4 <__alt_mem_onchip_mem+0xff78b8c4>
  80bac0:	d811883a 	mov	r8,sp
  80bac4:	003ced06 	br	80ae7c <__alt_mem_onchip_mem+0xff78ae7c>
  80bac8:	d9402117 	ldw	r5,132(sp)
  80bacc:	d9002017 	ldw	r4,128(sp)
  80bad0:	d9801a04 	addi	r6,sp,104
  80bad4:	da402c15 	stw	r9,176(sp)
  80bad8:	db802a15 	stw	r14,168(sp)
  80badc:	080aa600 	call	80aa60 <__sprint_r.part.0>
  80bae0:	da402c17 	ldw	r9,176(sp)
  80bae4:	db802a17 	ldw	r14,168(sp)
  80bae8:	103f761e 	bne	r2,zero,80b8c4 <__alt_mem_onchip_mem+0xff78b8c4>
  80baec:	d9401b17 	ldw	r5,108(sp)
  80baf0:	d8801c17 	ldw	r2,112(sp)
  80baf4:	d811883a 	mov	r8,sp
  80baf8:	29000044 	addi	r4,r5,1
  80bafc:	003d5b06 	br	80b06c <__alt_mem_onchip_mem+0xff78b06c>
  80bb00:	d9402117 	ldw	r5,132(sp)
  80bb04:	d9002017 	ldw	r4,128(sp)
  80bb08:	d9801a04 	addi	r6,sp,104
  80bb0c:	da402c15 	stw	r9,176(sp)
  80bb10:	080aa600 	call	80aa60 <__sprint_r.part.0>
  80bb14:	da402c17 	ldw	r9,176(sp)
  80bb18:	103f6a1e 	bne	r2,zero,80b8c4 <__alt_mem_onchip_mem+0xff78b8c4>
  80bb1c:	d9401b17 	ldw	r5,108(sp)
  80bb20:	d8801c17 	ldw	r2,112(sp)
  80bb24:	d811883a 	mov	r8,sp
  80bb28:	29000044 	addi	r4,r5,1
  80bb2c:	003f1006 	br	80b770 <__alt_mem_onchip_mem+0xff78b770>
  80bb30:	1000c31e 	bne	r2,zero,80be40 <___vfiprintf_internal_r+0x12cc>
  80bb34:	01000044 	movi	r4,1
  80bb38:	000b883a 	mov	r5,zero
  80bb3c:	d811883a 	mov	r8,sp
  80bb40:	003f0d06 	br	80b778 <__alt_mem_onchip_mem+0xff78b778>
  80bb44:	d9402117 	ldw	r5,132(sp)
  80bb48:	d9002017 	ldw	r4,128(sp)
  80bb4c:	d9801a04 	addi	r6,sp,104
  80bb50:	080aa600 	call	80aa60 <__sprint_r.part.0>
  80bb54:	103f5b1e 	bne	r2,zero,80b8c4 <__alt_mem_onchip_mem+0xff78b8c4>
  80bb58:	d9001b17 	ldw	r4,108(sp)
  80bb5c:	d8801c17 	ldw	r2,112(sp)
  80bb60:	d811883a 	mov	r8,sp
  80bb64:	21000044 	addi	r4,r4,1
  80bb68:	003d8006 	br	80b16c <__alt_mem_onchip_mem+0xff78b16c>
  80bb6c:	01002074 	movhi	r4,129
  80bb70:	210f6b04 	addi	r4,r4,15788
  80bb74:	d9002615 	stw	r4,152(sp)
  80bb78:	d8c02215 	stw	r3,136(sp)
  80bb7c:	1029883a 	mov	r20,r2
  80bb80:	94c4b03a 	or	r2,r18,r19
  80bb84:	103fb21e 	bne	r2,zero,80ba50 <__alt_mem_onchip_mem+0xff78ba50>
  80bb88:	0039883a 	mov	fp,zero
  80bb8c:	00800084 	movi	r2,2
  80bb90:	003e6b06 	br	80b540 <__alt_mem_onchip_mem+0xff78b540>
  80bb94:	da802217 	ldw	r10,136(sp)
  80bb98:	d8001d85 	stb	zero,118(sp)
  80bb9c:	0027883a 	mov	r19,zero
  80bba0:	50800104 	addi	r2,r10,4
  80bba4:	54800017 	ldw	r18,0(r10)
  80bba8:	483e6016 	blt	r9,zero,80b52c <__alt_mem_onchip_mem+0xff78b52c>
  80bbac:	00ffdfc4 	movi	r3,-129
  80bbb0:	d8802215 	stw	r2,136(sp)
  80bbb4:	a0e8703a 	and	r20,r20,r3
  80bbb8:	0039883a 	mov	fp,zero
  80bbbc:	903ebb26 	beq	r18,zero,80b6ac <__alt_mem_onchip_mem+0xff78b6ac>
  80bbc0:	00800244 	movi	r2,9
  80bbc4:	14bdee36 	bltu	r2,r18,80b380 <__alt_mem_onchip_mem+0xff78b380>
  80bbc8:	003eba06 	br	80b6b4 <__alt_mem_onchip_mem+0xff78b6b4>
  80bbcc:	00800c04 	movi	r2,48
  80bbd0:	d8c01d45 	stb	r3,117(sp)
  80bbd4:	d8801d05 	stb	r2,116(sp)
  80bbd8:	d8001d85 	stb	zero,118(sp)
  80bbdc:	a0c00094 	ori	r3,r20,2
  80bbe0:	4800a916 	blt	r9,zero,80be88 <___vfiprintf_internal_r+0x1314>
  80bbe4:	00bfdfc4 	movi	r2,-129
  80bbe8:	a096703a 	and	r11,r20,r2
  80bbec:	5d000094 	ori	r20,r11,2
  80bbf0:	0039883a 	mov	fp,zero
  80bbf4:	003f9706 	br	80ba54 <__alt_mem_onchip_mem+0xff78ba54>
  80bbf8:	8025883a 	mov	r18,r16
  80bbfc:	003c2e06 	br	80acb8 <__alt_mem_onchip_mem+0xff78acb8>
  80bc00:	00802074 	movhi	r2,129
  80bc04:	108f6b04 	addi	r2,r2,15788
  80bc08:	0039883a 	mov	fp,zero
  80bc0c:	d8802615 	stw	r2,152(sp)
  80bc10:	003f9006 	br	80ba54 <__alt_mem_onchip_mem+0xff78ba54>
  80bc14:	04a5c83a 	sub	r18,zero,r18
  80bc18:	07000b44 	movi	fp,45
  80bc1c:	9004c03a 	cmpne	r2,r18,zero
  80bc20:	04e7c83a 	sub	r19,zero,r19
  80bc24:	df001d85 	stb	fp,118(sp)
  80bc28:	98a7c83a 	sub	r19,r19,r2
  80bc2c:	48009f16 	blt	r9,zero,80beac <___vfiprintf_internal_r+0x1338>
  80bc30:	00bfdfc4 	movi	r2,-129
  80bc34:	a0a8703a 	and	r20,r20,r2
  80bc38:	003dd006 	br	80b37c <__alt_mem_onchip_mem+0xff78b37c>
  80bc3c:	70004c26 	beq	r14,zero,80bd70 <___vfiprintf_internal_r+0x11fc>
  80bc40:	00800084 	movi	r2,2
  80bc44:	d8c01d04 	addi	r3,sp,116
  80bc48:	d8c00015 	stw	r3,0(sp)
  80bc4c:	d8800115 	stw	r2,4(sp)
  80bc50:	01000044 	movi	r4,1
  80bc54:	d811883a 	mov	r8,sp
  80bc58:	003f7306 	br	80ba28 <__alt_mem_onchip_mem+0xff78ba28>
  80bc5c:	a080100c 	andi	r2,r20,64
  80bc60:	da802217 	ldw	r10,136(sp)
  80bc64:	103e0626 	beq	r2,zero,80b480 <__alt_mem_onchip_mem+0xff78b480>
  80bc68:	5480000f 	ldh	r18,0(r10)
  80bc6c:	52800104 	addi	r10,r10,4
  80bc70:	da802215 	stw	r10,136(sp)
  80bc74:	9027d7fa 	srai	r19,r18,31
  80bc78:	9805883a 	mov	r2,r19
  80bc7c:	003db806 	br	80b360 <__alt_mem_onchip_mem+0xff78b360>
  80bc80:	a080040c 	andi	r2,r20,16
  80bc84:	1000091e 	bne	r2,zero,80bcac <___vfiprintf_internal_r+0x1138>
  80bc88:	a2c0100c 	andi	r11,r20,64
  80bc8c:	58000726 	beq	r11,zero,80bcac <___vfiprintf_internal_r+0x1138>
  80bc90:	da802217 	ldw	r10,136(sp)
  80bc94:	50800017 	ldw	r2,0(r10)
  80bc98:	52800104 	addi	r10,r10,4
  80bc9c:	da802215 	stw	r10,136(sp)
  80bca0:	da802317 	ldw	r10,140(sp)
  80bca4:	1280000d 	sth	r10,0(r2)
  80bca8:	003be706 	br	80ac48 <__alt_mem_onchip_mem+0xff78ac48>
  80bcac:	da802217 	ldw	r10,136(sp)
  80bcb0:	50800017 	ldw	r2,0(r10)
  80bcb4:	52800104 	addi	r10,r10,4
  80bcb8:	da802215 	stw	r10,136(sp)
  80bcbc:	da802317 	ldw	r10,140(sp)
  80bcc0:	12800015 	stw	r10,0(r2)
  80bcc4:	003be006 	br	80ac48 <__alt_mem_onchip_mem+0xff78ac48>
  80bcc8:	a080100c 	andi	r2,r20,64
  80bccc:	da802217 	ldw	r10,136(sp)
  80bcd0:	10003026 	beq	r2,zero,80bd94 <___vfiprintf_internal_r+0x1220>
  80bcd4:	5480000b 	ldhu	r18,0(r10)
  80bcd8:	52800104 	addi	r10,r10,4
  80bcdc:	0027883a 	mov	r19,zero
  80bce0:	da802215 	stw	r10,136(sp)
  80bce4:	003d8006 	br	80b2e8 <__alt_mem_onchip_mem+0xff78b2e8>
  80bce8:	80c00007 	ldb	r3,0(r16)
  80bcec:	003c0006 	br	80acf0 <__alt_mem_onchip_mem+0xff78acf0>
  80bcf0:	a080100c 	andi	r2,r20,64
  80bcf4:	d8001d85 	stb	zero,118(sp)
  80bcf8:	da802217 	ldw	r10,136(sp)
  80bcfc:	1000201e 	bne	r2,zero,80bd80 <___vfiprintf_internal_r+0x120c>
  80bd00:	50800104 	addi	r2,r10,4
  80bd04:	54800017 	ldw	r18,0(r10)
  80bd08:	0027883a 	mov	r19,zero
  80bd0c:	483def0e 	bge	r9,zero,80b4cc <__alt_mem_onchip_mem+0xff78b4cc>
  80bd10:	94c6b03a 	or	r3,r18,r19
  80bd14:	d8802215 	stw	r2,136(sp)
  80bd18:	183d4e1e 	bne	r3,zero,80b254 <__alt_mem_onchip_mem+0xff78b254>
  80bd1c:	0039883a 	mov	fp,zero
  80bd20:	0005883a 	mov	r2,zero
  80bd24:	003e0606 	br	80b540 <__alt_mem_onchip_mem+0xff78b540>
  80bd28:	d9402117 	ldw	r5,132(sp)
  80bd2c:	d9002017 	ldw	r4,128(sp)
  80bd30:	d9801a04 	addi	r6,sp,104
  80bd34:	da402c15 	stw	r9,176(sp)
  80bd38:	db802a15 	stw	r14,168(sp)
  80bd3c:	080aa600 	call	80aa60 <__sprint_r.part.0>
  80bd40:	da402c17 	ldw	r9,176(sp)
  80bd44:	db802a17 	ldw	r14,168(sp)
  80bd48:	103ede1e 	bne	r2,zero,80b8c4 <__alt_mem_onchip_mem+0xff78b8c4>
  80bd4c:	d9401b17 	ldw	r5,108(sp)
  80bd50:	d8801c17 	ldw	r2,112(sp)
  80bd54:	d811883a 	mov	r8,sp
  80bd58:	29000044 	addi	r4,r5,1
  80bd5c:	003e7406 	br	80b730 <__alt_mem_onchip_mem+0xff78b730>
  80bd60:	00bfffc4 	movi	r2,-1
  80bd64:	003c5806 	br	80aec8 <__alt_mem_onchip_mem+0xff78aec8>
  80bd68:	d811883a 	mov	r8,sp
  80bd6c:	003ee806 	br	80b910 <__alt_mem_onchip_mem+0xff78b910>
  80bd70:	000b883a 	mov	r5,zero
  80bd74:	01000044 	movi	r4,1
  80bd78:	d811883a 	mov	r8,sp
  80bd7c:	003e7c06 	br	80b770 <__alt_mem_onchip_mem+0xff78b770>
  80bd80:	50800104 	addi	r2,r10,4
  80bd84:	5480000b 	ldhu	r18,0(r10)
  80bd88:	0027883a 	mov	r19,zero
  80bd8c:	483dcf0e 	bge	r9,zero,80b4cc <__alt_mem_onchip_mem+0xff78b4cc>
  80bd90:	003fdf06 	br	80bd10 <__alt_mem_onchip_mem+0xff78bd10>
  80bd94:	54800017 	ldw	r18,0(r10)
  80bd98:	52800104 	addi	r10,r10,4
  80bd9c:	0027883a 	mov	r19,zero
  80bda0:	da802215 	stw	r10,136(sp)
  80bda4:	003d5006 	br	80b2e8 <__alt_mem_onchip_mem+0xff78b2e8>
  80bda8:	50800104 	addi	r2,r10,4
  80bdac:	5480000b 	ldhu	r18,0(r10)
  80bdb0:	0027883a 	mov	r19,zero
  80bdb4:	483f7d0e 	bge	r9,zero,80bbac <__alt_mem_onchip_mem+0xff78bbac>
  80bdb8:	003ddc06 	br	80b52c <__alt_mem_onchip_mem+0xff78b52c>
  80bdbc:	d8c02215 	stw	r3,136(sp)
  80bdc0:	0039883a 	mov	fp,zero
  80bdc4:	003ddb06 	br	80b534 <__alt_mem_onchip_mem+0xff78b534>
  80bdc8:	02802074 	movhi	r10,129
  80bdcc:	52906b04 	addi	r10,r10,16812
  80bdd0:	da802415 	stw	r10,144(sp)
  80bdd4:	003e8306 	br	80b7e4 <__alt_mem_onchip_mem+0xff78b7e4>
  80bdd8:	d8801c17 	ldw	r2,112(sp)
  80bddc:	dd002117 	ldw	r20,132(sp)
  80bde0:	103eb926 	beq	r2,zero,80b8c8 <__alt_mem_onchip_mem+0xff78b8c8>
  80bde4:	d9002017 	ldw	r4,128(sp)
  80bde8:	d9801a04 	addi	r6,sp,104
  80bdec:	a00b883a 	mov	r5,r20
  80bdf0:	080aa600 	call	80aa60 <__sprint_r.part.0>
  80bdf4:	003eb406 	br	80b8c8 <__alt_mem_onchip_mem+0xff78b8c8>
  80bdf8:	80c00043 	ldbu	r3,1(r16)
  80bdfc:	a5000814 	ori	r20,r20,32
  80be00:	84000044 	addi	r16,r16,1
  80be04:	18c03fcc 	andi	r3,r3,255
  80be08:	18c0201c 	xori	r3,r3,128
  80be0c:	18ffe004 	addi	r3,r3,-128
  80be10:	003bb706 	br	80acf0 <__alt_mem_onchip_mem+0xff78acf0>
  80be14:	a809883a 	mov	r4,r21
  80be18:	d8c02a15 	stw	r3,168(sp)
  80be1c:	da002b15 	stw	r8,172(sp)
  80be20:	0803e800 	call	803e80 <strlen>
  80be24:	d8c02a17 	ldw	r3,168(sp)
  80be28:	1027883a 	mov	r19,r2
  80be2c:	df001d83 	ldbu	fp,118(sp)
  80be30:	d8c02215 	stw	r3,136(sp)
  80be34:	0013883a 	mov	r9,zero
  80be38:	da002b17 	ldw	r8,172(sp)
  80be3c:	003c4d06 	br	80af74 <__alt_mem_onchip_mem+0xff78af74>
  80be40:	d9402117 	ldw	r5,132(sp)
  80be44:	d9002017 	ldw	r4,128(sp)
  80be48:	d9801a04 	addi	r6,sp,104
  80be4c:	da402c15 	stw	r9,176(sp)
  80be50:	080aa600 	call	80aa60 <__sprint_r.part.0>
  80be54:	da402c17 	ldw	r9,176(sp)
  80be58:	103e9a1e 	bne	r2,zero,80b8c4 <__alt_mem_onchip_mem+0xff78b8c4>
  80be5c:	d9401b17 	ldw	r5,108(sp)
  80be60:	d8801c17 	ldw	r2,112(sp)
  80be64:	d811883a 	mov	r8,sp
  80be68:	29000044 	addi	r4,r5,1
  80be6c:	003e4206 	br	80b778 <__alt_mem_onchip_mem+0xff78b778>
  80be70:	d9401b17 	ldw	r5,108(sp)
  80be74:	01002074 	movhi	r4,129
  80be78:	21106f04 	addi	r4,r4,16828
  80be7c:	d9002415 	stw	r4,144(sp)
  80be80:	29400044 	addi	r5,r5,1
  80be84:	003c6d06 	br	80b03c <__alt_mem_onchip_mem+0xff78b03c>
  80be88:	0039883a 	mov	fp,zero
  80be8c:	00800084 	movi	r2,2
  80be90:	10803fcc 	andi	r2,r2,255
  80be94:	01000044 	movi	r4,1
  80be98:	11001e26 	beq	r2,r4,80bf14 <___vfiprintf_internal_r+0x13a0>
  80be9c:	01000084 	movi	r4,2
  80bea0:	11001e1e 	bne	r2,r4,80bf1c <___vfiprintf_internal_r+0x13a8>
  80bea4:	1829883a 	mov	r20,r3
  80bea8:	003eea06 	br	80ba54 <__alt_mem_onchip_mem+0xff78ba54>
  80beac:	a007883a 	mov	r3,r20
  80beb0:	00800044 	movi	r2,1
  80beb4:	003ff606 	br	80be90 <__alt_mem_onchip_mem+0xff78be90>
  80beb8:	00800184 	movi	r2,6
  80bebc:	1240012e 	bgeu	r2,r9,80bec4 <___vfiprintf_internal_r+0x1350>
  80bec0:	1013883a 	mov	r9,r2
  80bec4:	4827883a 	mov	r19,r9
  80bec8:	4825883a 	mov	r18,r9
  80becc:	48001516 	blt	r9,zero,80bf24 <___vfiprintf_internal_r+0x13b0>
  80bed0:	05402074 	movhi	r21,129
  80bed4:	d8c02215 	stw	r3,136(sp)
  80bed8:	ad4f7004 	addi	r21,r21,15808
  80bedc:	003d1406 	br	80b330 <__alt_mem_onchip_mem+0xff78b330>
  80bee0:	02802074 	movhi	r10,129
  80bee4:	52906b04 	addi	r10,r10,16812
  80bee8:	da802415 	stw	r10,144(sp)
  80beec:	200d883a 	mov	r6,r4
  80bef0:	003c9106 	br	80b138 <__alt_mem_onchip_mem+0xff78b138>
  80bef4:	5021883a 	mov	r16,r10
  80bef8:	0013883a 	mov	r9,zero
  80befc:	003b7d06 	br	80acf4 <__alt_mem_onchip_mem+0xff78acf4>
  80bf00:	4827883a 	mov	r19,r9
  80bf04:	df001d83 	ldbu	fp,118(sp)
  80bf08:	d8c02215 	stw	r3,136(sp)
  80bf0c:	0013883a 	mov	r9,zero
  80bf10:	003c1806 	br	80af74 <__alt_mem_onchip_mem+0xff78af74>
  80bf14:	1829883a 	mov	r20,r3
  80bf18:	003d1806 	br	80b37c <__alt_mem_onchip_mem+0xff78b37c>
  80bf1c:	1829883a 	mov	r20,r3
  80bf20:	003ccd06 	br	80b258 <__alt_mem_onchip_mem+0xff78b258>
  80bf24:	0025883a 	mov	r18,zero
  80bf28:	003fe906 	br	80bed0 <__alt_mem_onchip_mem+0xff78bed0>
  80bf2c:	d8802217 	ldw	r2,136(sp)
  80bf30:	80c00043 	ldbu	r3,1(r16)
  80bf34:	5021883a 	mov	r16,r10
  80bf38:	12400017 	ldw	r9,0(r2)
  80bf3c:	10800104 	addi	r2,r2,4
  80bf40:	d8802215 	stw	r2,136(sp)
  80bf44:	483faf0e 	bge	r9,zero,80be04 <__alt_mem_onchip_mem+0xff78be04>
  80bf48:	18c03fcc 	andi	r3,r3,255
  80bf4c:	18c0201c 	xori	r3,r3,128
  80bf50:	027fffc4 	movi	r9,-1
  80bf54:	18ffe004 	addi	r3,r3,-128
  80bf58:	003b6506 	br	80acf0 <__alt_mem_onchip_mem+0xff78acf0>
  80bf5c:	d9c01d85 	stb	r7,118(sp)
  80bf60:	003ca006 	br	80b1e4 <__alt_mem_onchip_mem+0xff78b1e4>
  80bf64:	d9c01d85 	stb	r7,118(sp)
  80bf68:	003cad06 	br	80b220 <__alt_mem_onchip_mem+0xff78b220>
  80bf6c:	d9c01d85 	stb	r7,118(sp)
  80bf70:	003d7d06 	br	80b568 <__alt_mem_onchip_mem+0xff78b568>
  80bf74:	d9c01d85 	stb	r7,118(sp)
  80bf78:	003d5f06 	br	80b4f8 <__alt_mem_onchip_mem+0xff78b4f8>
  80bf7c:	a080004c 	andi	r2,r20,1
  80bf80:	0039883a 	mov	fp,zero
  80bf84:	10000526 	beq	r2,zero,80bf9c <___vfiprintf_internal_r+0x1428>
  80bf88:	00800c04 	movi	r2,48
  80bf8c:	d88019c5 	stb	r2,103(sp)
  80bf90:	dcc02717 	ldw	r19,156(sp)
  80bf94:	dd4019c4 	addi	r21,sp,103
  80bf98:	003bf606 	br	80af74 <__alt_mem_onchip_mem+0xff78af74>
  80bf9c:	0027883a 	mov	r19,zero
  80bfa0:	dd401a04 	addi	r21,sp,104
  80bfa4:	003bf306 	br	80af74 <__alt_mem_onchip_mem+0xff78af74>
  80bfa8:	d9c01d85 	stb	r7,118(sp)
  80bfac:	003dc806 	br	80b6d0 <__alt_mem_onchip_mem+0xff78b6d0>
  80bfb0:	d9c01d85 	stb	r7,118(sp)
  80bfb4:	003d3a06 	br	80b4a0 <__alt_mem_onchip_mem+0xff78b4a0>
  80bfb8:	d9c01d85 	stb	r7,118(sp)
  80bfbc:	003d2a06 	br	80b468 <__alt_mem_onchip_mem+0xff78b468>
  80bfc0:	d9c01d85 	stb	r7,118(sp)
  80bfc4:	003cde06 	br	80b340 <__alt_mem_onchip_mem+0xff78b340>
  80bfc8:	d9c01d85 	stb	r7,118(sp)
  80bfcc:	003cbc06 	br	80b2c0 <__alt_mem_onchip_mem+0xff78b2c0>

0080bfd0 <__vfiprintf_internal>:
  80bfd0:	00802074 	movhi	r2,129
  80bfd4:	1097f204 	addi	r2,r2,24520
  80bfd8:	300f883a 	mov	r7,r6
  80bfdc:	280d883a 	mov	r6,r5
  80bfe0:	200b883a 	mov	r5,r4
  80bfe4:	11000017 	ldw	r4,0(r2)
  80bfe8:	080ab741 	jmpi	80ab74 <___vfiprintf_internal_r>

0080bfec <__sbprintf>:
  80bfec:	2880030b 	ldhu	r2,12(r5)
  80bff0:	2ac01917 	ldw	r11,100(r5)
  80bff4:	2a80038b 	ldhu	r10,14(r5)
  80bff8:	2a400717 	ldw	r9,28(r5)
  80bffc:	2a000917 	ldw	r8,36(r5)
  80c000:	defee204 	addi	sp,sp,-1144
  80c004:	00c10004 	movi	r3,1024
  80c008:	dc011a15 	stw	r16,1128(sp)
  80c00c:	10bfff4c 	andi	r2,r2,65533
  80c010:	2821883a 	mov	r16,r5
  80c014:	d8cb883a 	add	r5,sp,r3
  80c018:	dc811c15 	stw	r18,1136(sp)
  80c01c:	dc411b15 	stw	r17,1132(sp)
  80c020:	dfc11d15 	stw	ra,1140(sp)
  80c024:	2025883a 	mov	r18,r4
  80c028:	d881030d 	sth	r2,1036(sp)
  80c02c:	dac11915 	stw	r11,1124(sp)
  80c030:	da81038d 	sth	r10,1038(sp)
  80c034:	da410715 	stw	r9,1052(sp)
  80c038:	da010915 	stw	r8,1060(sp)
  80c03c:	dec10015 	stw	sp,1024(sp)
  80c040:	dec10415 	stw	sp,1040(sp)
  80c044:	d8c10215 	stw	r3,1032(sp)
  80c048:	d8c10515 	stw	r3,1044(sp)
  80c04c:	d8010615 	stw	zero,1048(sp)
  80c050:	080ab740 	call	80ab74 <___vfiprintf_internal_r>
  80c054:	1023883a 	mov	r17,r2
  80c058:	10000416 	blt	r2,zero,80c06c <__sbprintf+0x80>
  80c05c:	d9410004 	addi	r5,sp,1024
  80c060:	9009883a 	mov	r4,r18
  80c064:	08082a80 	call	8082a8 <_fflush_r>
  80c068:	10000d1e 	bne	r2,zero,80c0a0 <__sbprintf+0xb4>
  80c06c:	d881030b 	ldhu	r2,1036(sp)
  80c070:	1080100c 	andi	r2,r2,64
  80c074:	10000326 	beq	r2,zero,80c084 <__sbprintf+0x98>
  80c078:	8080030b 	ldhu	r2,12(r16)
  80c07c:	10801014 	ori	r2,r2,64
  80c080:	8080030d 	sth	r2,12(r16)
  80c084:	8805883a 	mov	r2,r17
  80c088:	dfc11d17 	ldw	ra,1140(sp)
  80c08c:	dc811c17 	ldw	r18,1136(sp)
  80c090:	dc411b17 	ldw	r17,1132(sp)
  80c094:	dc011a17 	ldw	r16,1128(sp)
  80c098:	dec11e04 	addi	sp,sp,1144
  80c09c:	f800283a 	ret
  80c0a0:	047fffc4 	movi	r17,-1
  80c0a4:	003ff106 	br	80c06c <__alt_mem_onchip_mem+0xff78c06c>

0080c0a8 <__swbuf_r>:
  80c0a8:	defffb04 	addi	sp,sp,-20
  80c0ac:	dcc00315 	stw	r19,12(sp)
  80c0b0:	dc800215 	stw	r18,8(sp)
  80c0b4:	dc000015 	stw	r16,0(sp)
  80c0b8:	dfc00415 	stw	ra,16(sp)
  80c0bc:	dc400115 	stw	r17,4(sp)
  80c0c0:	2025883a 	mov	r18,r4
  80c0c4:	2827883a 	mov	r19,r5
  80c0c8:	3021883a 	mov	r16,r6
  80c0cc:	20000226 	beq	r4,zero,80c0d8 <__swbuf_r+0x30>
  80c0d0:	20800e17 	ldw	r2,56(r4)
  80c0d4:	10004226 	beq	r2,zero,80c1e0 <__swbuf_r+0x138>
  80c0d8:	80800617 	ldw	r2,24(r16)
  80c0dc:	8100030b 	ldhu	r4,12(r16)
  80c0e0:	80800215 	stw	r2,8(r16)
  80c0e4:	2080020c 	andi	r2,r4,8
  80c0e8:	10003626 	beq	r2,zero,80c1c4 <__swbuf_r+0x11c>
  80c0ec:	80c00417 	ldw	r3,16(r16)
  80c0f0:	18003426 	beq	r3,zero,80c1c4 <__swbuf_r+0x11c>
  80c0f4:	2088000c 	andi	r2,r4,8192
  80c0f8:	9c403fcc 	andi	r17,r19,255
  80c0fc:	10001a26 	beq	r2,zero,80c168 <__swbuf_r+0xc0>
  80c100:	80800017 	ldw	r2,0(r16)
  80c104:	81000517 	ldw	r4,20(r16)
  80c108:	10c7c83a 	sub	r3,r2,r3
  80c10c:	1900200e 	bge	r3,r4,80c190 <__swbuf_r+0xe8>
  80c110:	18c00044 	addi	r3,r3,1
  80c114:	81000217 	ldw	r4,8(r16)
  80c118:	11400044 	addi	r5,r2,1
  80c11c:	81400015 	stw	r5,0(r16)
  80c120:	213fffc4 	addi	r4,r4,-1
  80c124:	81000215 	stw	r4,8(r16)
  80c128:	14c00005 	stb	r19,0(r2)
  80c12c:	80800517 	ldw	r2,20(r16)
  80c130:	10c01e26 	beq	r2,r3,80c1ac <__swbuf_r+0x104>
  80c134:	8080030b 	ldhu	r2,12(r16)
  80c138:	1080004c 	andi	r2,r2,1
  80c13c:	10000226 	beq	r2,zero,80c148 <__swbuf_r+0xa0>
  80c140:	00800284 	movi	r2,10
  80c144:	88801926 	beq	r17,r2,80c1ac <__swbuf_r+0x104>
  80c148:	8805883a 	mov	r2,r17
  80c14c:	dfc00417 	ldw	ra,16(sp)
  80c150:	dcc00317 	ldw	r19,12(sp)
  80c154:	dc800217 	ldw	r18,8(sp)
  80c158:	dc400117 	ldw	r17,4(sp)
  80c15c:	dc000017 	ldw	r16,0(sp)
  80c160:	dec00504 	addi	sp,sp,20
  80c164:	f800283a 	ret
  80c168:	81401917 	ldw	r5,100(r16)
  80c16c:	00b7ffc4 	movi	r2,-8193
  80c170:	21080014 	ori	r4,r4,8192
  80c174:	2884703a 	and	r2,r5,r2
  80c178:	80801915 	stw	r2,100(r16)
  80c17c:	80800017 	ldw	r2,0(r16)
  80c180:	8100030d 	sth	r4,12(r16)
  80c184:	81000517 	ldw	r4,20(r16)
  80c188:	10c7c83a 	sub	r3,r2,r3
  80c18c:	193fe016 	blt	r3,r4,80c110 <__alt_mem_onchip_mem+0xff78c110>
  80c190:	800b883a 	mov	r5,r16
  80c194:	9009883a 	mov	r4,r18
  80c198:	08082a80 	call	8082a8 <_fflush_r>
  80c19c:	1000071e 	bne	r2,zero,80c1bc <__swbuf_r+0x114>
  80c1a0:	80800017 	ldw	r2,0(r16)
  80c1a4:	00c00044 	movi	r3,1
  80c1a8:	003fda06 	br	80c114 <__alt_mem_onchip_mem+0xff78c114>
  80c1ac:	800b883a 	mov	r5,r16
  80c1b0:	9009883a 	mov	r4,r18
  80c1b4:	08082a80 	call	8082a8 <_fflush_r>
  80c1b8:	103fe326 	beq	r2,zero,80c148 <__alt_mem_onchip_mem+0xff78c148>
  80c1bc:	00bfffc4 	movi	r2,-1
  80c1c0:	003fe206 	br	80c14c <__alt_mem_onchip_mem+0xff78c14c>
  80c1c4:	800b883a 	mov	r5,r16
  80c1c8:	9009883a 	mov	r4,r18
  80c1cc:	08065580 	call	806558 <__swsetup_r>
  80c1d0:	103ffa1e 	bne	r2,zero,80c1bc <__alt_mem_onchip_mem+0xff78c1bc>
  80c1d4:	8100030b 	ldhu	r4,12(r16)
  80c1d8:	80c00417 	ldw	r3,16(r16)
  80c1dc:	003fc506 	br	80c0f4 <__alt_mem_onchip_mem+0xff78c0f4>
  80c1e0:	08024940 	call	802494 <__sinit>
  80c1e4:	003fbc06 	br	80c0d8 <__alt_mem_onchip_mem+0xff78c0d8>

0080c1e8 <__swbuf>:
  80c1e8:	00802074 	movhi	r2,129
  80c1ec:	1097f204 	addi	r2,r2,24520
  80c1f0:	280d883a 	mov	r6,r5
  80c1f4:	200b883a 	mov	r5,r4
  80c1f8:	11000017 	ldw	r4,0(r2)
  80c1fc:	080c0a81 	jmpi	80c0a8 <__swbuf_r>

0080c200 <_calloc_r>:
  80c200:	298b383a 	mul	r5,r5,r6
  80c204:	defffe04 	addi	sp,sp,-8
  80c208:	dfc00115 	stw	ra,4(sp)
  80c20c:	dc000015 	stw	r16,0(sp)
  80c210:	0802f840 	call	802f84 <_malloc_r>
  80c214:	10002926 	beq	r2,zero,80c2bc <_calloc_r+0xbc>
  80c218:	11bfff17 	ldw	r6,-4(r2)
  80c21c:	1021883a 	mov	r16,r2
  80c220:	00bfff04 	movi	r2,-4
  80c224:	308c703a 	and	r6,r6,r2
  80c228:	00c00904 	movi	r3,36
  80c22c:	308d883a 	add	r6,r6,r2
  80c230:	19801636 	bltu	r3,r6,80c28c <_calloc_r+0x8c>
  80c234:	008004c4 	movi	r2,19
  80c238:	11800b2e 	bgeu	r2,r6,80c268 <_calloc_r+0x68>
  80c23c:	80000015 	stw	zero,0(r16)
  80c240:	80000115 	stw	zero,4(r16)
  80c244:	008006c4 	movi	r2,27
  80c248:	11801a2e 	bgeu	r2,r6,80c2b4 <_calloc_r+0xb4>
  80c24c:	80000215 	stw	zero,8(r16)
  80c250:	80000315 	stw	zero,12(r16)
  80c254:	30c0151e 	bne	r6,r3,80c2ac <_calloc_r+0xac>
  80c258:	80000415 	stw	zero,16(r16)
  80c25c:	80800604 	addi	r2,r16,24
  80c260:	80000515 	stw	zero,20(r16)
  80c264:	00000106 	br	80c26c <_calloc_r+0x6c>
  80c268:	8005883a 	mov	r2,r16
  80c26c:	10000015 	stw	zero,0(r2)
  80c270:	10000115 	stw	zero,4(r2)
  80c274:	10000215 	stw	zero,8(r2)
  80c278:	8005883a 	mov	r2,r16
  80c27c:	dfc00117 	ldw	ra,4(sp)
  80c280:	dc000017 	ldw	r16,0(sp)
  80c284:	dec00204 	addi	sp,sp,8
  80c288:	f800283a 	ret
  80c28c:	000b883a 	mov	r5,zero
  80c290:	8009883a 	mov	r4,r16
  80c294:	08037900 	call	803790 <memset>
  80c298:	8005883a 	mov	r2,r16
  80c29c:	dfc00117 	ldw	ra,4(sp)
  80c2a0:	dc000017 	ldw	r16,0(sp)
  80c2a4:	dec00204 	addi	sp,sp,8
  80c2a8:	f800283a 	ret
  80c2ac:	80800404 	addi	r2,r16,16
  80c2b0:	003fee06 	br	80c26c <__alt_mem_onchip_mem+0xff78c26c>
  80c2b4:	80800204 	addi	r2,r16,8
  80c2b8:	003fec06 	br	80c26c <__alt_mem_onchip_mem+0xff78c26c>
  80c2bc:	0005883a 	mov	r2,zero
  80c2c0:	003fee06 	br	80c27c <__alt_mem_onchip_mem+0xff78c27c>

0080c2c4 <__fputwc>:
  80c2c4:	defff804 	addi	sp,sp,-32
  80c2c8:	dcc00415 	stw	r19,16(sp)
  80c2cc:	dc800315 	stw	r18,12(sp)
  80c2d0:	dc000115 	stw	r16,4(sp)
  80c2d4:	dfc00715 	stw	ra,28(sp)
  80c2d8:	dd400615 	stw	r21,24(sp)
  80c2dc:	dd000515 	stw	r20,20(sp)
  80c2e0:	dc400215 	stw	r17,8(sp)
  80c2e4:	2027883a 	mov	r19,r4
  80c2e8:	2825883a 	mov	r18,r5
  80c2ec:	3021883a 	mov	r16,r6
  80c2f0:	0808dac0 	call	808dac <__locale_mb_cur_max>
  80c2f4:	00c00044 	movi	r3,1
  80c2f8:	10c03e26 	beq	r2,r3,80c3f4 <__fputwc+0x130>
  80c2fc:	81c01704 	addi	r7,r16,92
  80c300:	900d883a 	mov	r6,r18
  80c304:	d80b883a 	mov	r5,sp
  80c308:	9809883a 	mov	r4,r19
  80c30c:	080c4cc0 	call	80c4cc <_wcrtomb_r>
  80c310:	1029883a 	mov	r20,r2
  80c314:	00bfffc4 	movi	r2,-1
  80c318:	a0802026 	beq	r20,r2,80c39c <__fputwc+0xd8>
  80c31c:	d9400003 	ldbu	r5,0(sp)
  80c320:	a0001c26 	beq	r20,zero,80c394 <__fputwc+0xd0>
  80c324:	0023883a 	mov	r17,zero
  80c328:	05400284 	movi	r21,10
  80c32c:	00000906 	br	80c354 <__fputwc+0x90>
  80c330:	80800017 	ldw	r2,0(r16)
  80c334:	11400005 	stb	r5,0(r2)
  80c338:	80c00017 	ldw	r3,0(r16)
  80c33c:	18c00044 	addi	r3,r3,1
  80c340:	80c00015 	stw	r3,0(r16)
  80c344:	8c400044 	addi	r17,r17,1
  80c348:	dc45883a 	add	r2,sp,r17
  80c34c:	8d00112e 	bgeu	r17,r20,80c394 <__fputwc+0xd0>
  80c350:	11400003 	ldbu	r5,0(r2)
  80c354:	80c00217 	ldw	r3,8(r16)
  80c358:	18ffffc4 	addi	r3,r3,-1
  80c35c:	80c00215 	stw	r3,8(r16)
  80c360:	183ff30e 	bge	r3,zero,80c330 <__alt_mem_onchip_mem+0xff78c330>
  80c364:	80800617 	ldw	r2,24(r16)
  80c368:	18801916 	blt	r3,r2,80c3d0 <__fputwc+0x10c>
  80c36c:	80800017 	ldw	r2,0(r16)
  80c370:	11400005 	stb	r5,0(r2)
  80c374:	80800017 	ldw	r2,0(r16)
  80c378:	10c00003 	ldbu	r3,0(r2)
  80c37c:	10800044 	addi	r2,r2,1
  80c380:	1d402326 	beq	r3,r21,80c410 <__fputwc+0x14c>
  80c384:	80800015 	stw	r2,0(r16)
  80c388:	8c400044 	addi	r17,r17,1
  80c38c:	dc45883a 	add	r2,sp,r17
  80c390:	8d3fef36 	bltu	r17,r20,80c350 <__alt_mem_onchip_mem+0xff78c350>
  80c394:	9005883a 	mov	r2,r18
  80c398:	00000406 	br	80c3ac <__fputwc+0xe8>
  80c39c:	80c0030b 	ldhu	r3,12(r16)
  80c3a0:	a005883a 	mov	r2,r20
  80c3a4:	18c01014 	ori	r3,r3,64
  80c3a8:	80c0030d 	sth	r3,12(r16)
  80c3ac:	dfc00717 	ldw	ra,28(sp)
  80c3b0:	dd400617 	ldw	r21,24(sp)
  80c3b4:	dd000517 	ldw	r20,20(sp)
  80c3b8:	dcc00417 	ldw	r19,16(sp)
  80c3bc:	dc800317 	ldw	r18,12(sp)
  80c3c0:	dc400217 	ldw	r17,8(sp)
  80c3c4:	dc000117 	ldw	r16,4(sp)
  80c3c8:	dec00804 	addi	sp,sp,32
  80c3cc:	f800283a 	ret
  80c3d0:	800d883a 	mov	r6,r16
  80c3d4:	29403fcc 	andi	r5,r5,255
  80c3d8:	9809883a 	mov	r4,r19
  80c3dc:	080c0a80 	call	80c0a8 <__swbuf_r>
  80c3e0:	10bfffe0 	cmpeqi	r2,r2,-1
  80c3e4:	10803fcc 	andi	r2,r2,255
  80c3e8:	103fd626 	beq	r2,zero,80c344 <__alt_mem_onchip_mem+0xff78c344>
  80c3ec:	00bfffc4 	movi	r2,-1
  80c3f0:	003fee06 	br	80c3ac <__alt_mem_onchip_mem+0xff78c3ac>
  80c3f4:	90ffffc4 	addi	r3,r18,-1
  80c3f8:	01003f84 	movi	r4,254
  80c3fc:	20ffbf36 	bltu	r4,r3,80c2fc <__alt_mem_onchip_mem+0xff78c2fc>
  80c400:	900b883a 	mov	r5,r18
  80c404:	dc800005 	stb	r18,0(sp)
  80c408:	1029883a 	mov	r20,r2
  80c40c:	003fc506 	br	80c324 <__alt_mem_onchip_mem+0xff78c324>
  80c410:	800d883a 	mov	r6,r16
  80c414:	a80b883a 	mov	r5,r21
  80c418:	9809883a 	mov	r4,r19
  80c41c:	080c0a80 	call	80c0a8 <__swbuf_r>
  80c420:	10bfffe0 	cmpeqi	r2,r2,-1
  80c424:	003fef06 	br	80c3e4 <__alt_mem_onchip_mem+0xff78c3e4>

0080c428 <_fputwc_r>:
  80c428:	3080030b 	ldhu	r2,12(r6)
  80c42c:	10c8000c 	andi	r3,r2,8192
  80c430:	1800051e 	bne	r3,zero,80c448 <_fputwc_r+0x20>
  80c434:	30c01917 	ldw	r3,100(r6)
  80c438:	10880014 	ori	r2,r2,8192
  80c43c:	3080030d 	sth	r2,12(r6)
  80c440:	18880014 	ori	r2,r3,8192
  80c444:	30801915 	stw	r2,100(r6)
  80c448:	080c2c41 	jmpi	80c2c4 <__fputwc>

0080c44c <fputwc>:
  80c44c:	00802074 	movhi	r2,129
  80c450:	defffc04 	addi	sp,sp,-16
  80c454:	1097f204 	addi	r2,r2,24520
  80c458:	dc000115 	stw	r16,4(sp)
  80c45c:	14000017 	ldw	r16,0(r2)
  80c460:	dc400215 	stw	r17,8(sp)
  80c464:	dfc00315 	stw	ra,12(sp)
  80c468:	2023883a 	mov	r17,r4
  80c46c:	80000226 	beq	r16,zero,80c478 <fputwc+0x2c>
  80c470:	80800e17 	ldw	r2,56(r16)
  80c474:	10001026 	beq	r2,zero,80c4b8 <fputwc+0x6c>
  80c478:	2880030b 	ldhu	r2,12(r5)
  80c47c:	10c8000c 	andi	r3,r2,8192
  80c480:	1800051e 	bne	r3,zero,80c498 <fputwc+0x4c>
  80c484:	28c01917 	ldw	r3,100(r5)
  80c488:	10880014 	ori	r2,r2,8192
  80c48c:	2880030d 	sth	r2,12(r5)
  80c490:	18880014 	ori	r2,r3,8192
  80c494:	28801915 	stw	r2,100(r5)
  80c498:	280d883a 	mov	r6,r5
  80c49c:	8009883a 	mov	r4,r16
  80c4a0:	880b883a 	mov	r5,r17
  80c4a4:	dfc00317 	ldw	ra,12(sp)
  80c4a8:	dc400217 	ldw	r17,8(sp)
  80c4ac:	dc000117 	ldw	r16,4(sp)
  80c4b0:	dec00404 	addi	sp,sp,16
  80c4b4:	080c2c41 	jmpi	80c2c4 <__fputwc>
  80c4b8:	8009883a 	mov	r4,r16
  80c4bc:	d9400015 	stw	r5,0(sp)
  80c4c0:	08024940 	call	802494 <__sinit>
  80c4c4:	d9400017 	ldw	r5,0(sp)
  80c4c8:	003feb06 	br	80c478 <__alt_mem_onchip_mem+0xff78c478>

0080c4cc <_wcrtomb_r>:
  80c4cc:	defff604 	addi	sp,sp,-40
  80c4d0:	00802074 	movhi	r2,129
  80c4d4:	dc800815 	stw	r18,32(sp)
  80c4d8:	dc400715 	stw	r17,28(sp)
  80c4dc:	dc000615 	stw	r16,24(sp)
  80c4e0:	1097f704 	addi	r2,r2,24540
  80c4e4:	dfc00915 	stw	ra,36(sp)
  80c4e8:	2021883a 	mov	r16,r4
  80c4ec:	3823883a 	mov	r17,r7
  80c4f0:	14800017 	ldw	r18,0(r2)
  80c4f4:	28001426 	beq	r5,zero,80c548 <_wcrtomb_r+0x7c>
  80c4f8:	d9400415 	stw	r5,16(sp)
  80c4fc:	d9800515 	stw	r6,20(sp)
  80c500:	0808da00 	call	808da0 <__locale_charset>
  80c504:	d9800517 	ldw	r6,20(sp)
  80c508:	d9400417 	ldw	r5,16(sp)
  80c50c:	100f883a 	mov	r7,r2
  80c510:	dc400015 	stw	r17,0(sp)
  80c514:	8009883a 	mov	r4,r16
  80c518:	903ee83a 	callr	r18
  80c51c:	00ffffc4 	movi	r3,-1
  80c520:	10c0031e 	bne	r2,r3,80c530 <_wcrtomb_r+0x64>
  80c524:	88000015 	stw	zero,0(r17)
  80c528:	00c02284 	movi	r3,138
  80c52c:	80c00015 	stw	r3,0(r16)
  80c530:	dfc00917 	ldw	ra,36(sp)
  80c534:	dc800817 	ldw	r18,32(sp)
  80c538:	dc400717 	ldw	r17,28(sp)
  80c53c:	dc000617 	ldw	r16,24(sp)
  80c540:	dec00a04 	addi	sp,sp,40
  80c544:	f800283a 	ret
  80c548:	0808da00 	call	808da0 <__locale_charset>
  80c54c:	100f883a 	mov	r7,r2
  80c550:	dc400015 	stw	r17,0(sp)
  80c554:	000d883a 	mov	r6,zero
  80c558:	d9400104 	addi	r5,sp,4
  80c55c:	8009883a 	mov	r4,r16
  80c560:	903ee83a 	callr	r18
  80c564:	003fed06 	br	80c51c <__alt_mem_onchip_mem+0xff78c51c>

0080c568 <wcrtomb>:
  80c568:	defff604 	addi	sp,sp,-40
  80c56c:	00802074 	movhi	r2,129
  80c570:	dc800615 	stw	r18,24(sp)
  80c574:	dc400515 	stw	r17,20(sp)
  80c578:	1097f204 	addi	r2,r2,24520
  80c57c:	dfc00915 	stw	ra,36(sp)
  80c580:	dd000815 	stw	r20,32(sp)
  80c584:	dcc00715 	stw	r19,28(sp)
  80c588:	dc000415 	stw	r16,16(sp)
  80c58c:	3025883a 	mov	r18,r6
  80c590:	14400017 	ldw	r17,0(r2)
  80c594:	20001926 	beq	r4,zero,80c5fc <wcrtomb+0x94>
  80c598:	00802074 	movhi	r2,129
  80c59c:	1097f704 	addi	r2,r2,24540
  80c5a0:	15000017 	ldw	r20,0(r2)
  80c5a4:	2021883a 	mov	r16,r4
  80c5a8:	2827883a 	mov	r19,r5
  80c5ac:	0808da00 	call	808da0 <__locale_charset>
  80c5b0:	100f883a 	mov	r7,r2
  80c5b4:	dc800015 	stw	r18,0(sp)
  80c5b8:	980d883a 	mov	r6,r19
  80c5bc:	800b883a 	mov	r5,r16
  80c5c0:	8809883a 	mov	r4,r17
  80c5c4:	a03ee83a 	callr	r20
  80c5c8:	00ffffc4 	movi	r3,-1
  80c5cc:	10c0031e 	bne	r2,r3,80c5dc <wcrtomb+0x74>
  80c5d0:	90000015 	stw	zero,0(r18)
  80c5d4:	00c02284 	movi	r3,138
  80c5d8:	88c00015 	stw	r3,0(r17)
  80c5dc:	dfc00917 	ldw	ra,36(sp)
  80c5e0:	dd000817 	ldw	r20,32(sp)
  80c5e4:	dcc00717 	ldw	r19,28(sp)
  80c5e8:	dc800617 	ldw	r18,24(sp)
  80c5ec:	dc400517 	ldw	r17,20(sp)
  80c5f0:	dc000417 	ldw	r16,16(sp)
  80c5f4:	dec00a04 	addi	sp,sp,40
  80c5f8:	f800283a 	ret
  80c5fc:	00802074 	movhi	r2,129
  80c600:	1097f704 	addi	r2,r2,24540
  80c604:	14000017 	ldw	r16,0(r2)
  80c608:	0808da00 	call	808da0 <__locale_charset>
  80c60c:	100f883a 	mov	r7,r2
  80c610:	dc800015 	stw	r18,0(sp)
  80c614:	000d883a 	mov	r6,zero
  80c618:	d9400104 	addi	r5,sp,4
  80c61c:	8809883a 	mov	r4,r17
  80c620:	803ee83a 	callr	r16
  80c624:	003fe806 	br	80c5c8 <__alt_mem_onchip_mem+0xff78c5c8>

0080c628 <__ascii_wctomb>:
  80c628:	28000526 	beq	r5,zero,80c640 <__ascii_wctomb+0x18>
  80c62c:	00803fc4 	movi	r2,255
  80c630:	11800536 	bltu	r2,r6,80c648 <__ascii_wctomb+0x20>
  80c634:	29800005 	stb	r6,0(r5)
  80c638:	00800044 	movi	r2,1
  80c63c:	f800283a 	ret
  80c640:	0005883a 	mov	r2,zero
  80c644:	f800283a 	ret
  80c648:	00802284 	movi	r2,138
  80c64c:	20800015 	stw	r2,0(r4)
  80c650:	00bfffc4 	movi	r2,-1
  80c654:	f800283a 	ret

0080c658 <_wctomb_r>:
  80c658:	00802074 	movhi	r2,129
  80c65c:	defff904 	addi	sp,sp,-28
  80c660:	1097f704 	addi	r2,r2,24540
  80c664:	dfc00615 	stw	ra,24(sp)
  80c668:	dc400515 	stw	r17,20(sp)
  80c66c:	dc000415 	stw	r16,16(sp)
  80c670:	3823883a 	mov	r17,r7
  80c674:	14000017 	ldw	r16,0(r2)
  80c678:	d9000115 	stw	r4,4(sp)
  80c67c:	d9400215 	stw	r5,8(sp)
  80c680:	d9800315 	stw	r6,12(sp)
  80c684:	0808da00 	call	808da0 <__locale_charset>
  80c688:	d9800317 	ldw	r6,12(sp)
  80c68c:	d9400217 	ldw	r5,8(sp)
  80c690:	d9000117 	ldw	r4,4(sp)
  80c694:	100f883a 	mov	r7,r2
  80c698:	dc400015 	stw	r17,0(sp)
  80c69c:	803ee83a 	callr	r16
  80c6a0:	dfc00617 	ldw	ra,24(sp)
  80c6a4:	dc400517 	ldw	r17,20(sp)
  80c6a8:	dc000417 	ldw	r16,16(sp)
  80c6ac:	dec00704 	addi	sp,sp,28
  80c6b0:	f800283a 	ret

0080c6b4 <__udivdi3>:
  80c6b4:	defff504 	addi	sp,sp,-44
  80c6b8:	dcc00415 	stw	r19,16(sp)
  80c6bc:	dc000115 	stw	r16,4(sp)
  80c6c0:	dfc00a15 	stw	ra,40(sp)
  80c6c4:	df000915 	stw	fp,36(sp)
  80c6c8:	ddc00815 	stw	r23,32(sp)
  80c6cc:	dd800715 	stw	r22,28(sp)
  80c6d0:	dd400615 	stw	r21,24(sp)
  80c6d4:	dd000515 	stw	r20,20(sp)
  80c6d8:	dc800315 	stw	r18,12(sp)
  80c6dc:	dc400215 	stw	r17,8(sp)
  80c6e0:	2027883a 	mov	r19,r4
  80c6e4:	2821883a 	mov	r16,r5
  80c6e8:	3800411e 	bne	r7,zero,80c7f0 <__udivdi3+0x13c>
  80c6ec:	3023883a 	mov	r17,r6
  80c6f0:	2025883a 	mov	r18,r4
  80c6f4:	2980522e 	bgeu	r5,r6,80c840 <__udivdi3+0x18c>
  80c6f8:	00bfffd4 	movui	r2,65535
  80c6fc:	282d883a 	mov	r22,r5
  80c700:	1180a836 	bltu	r2,r6,80c9a4 <__udivdi3+0x2f0>
  80c704:	00803fc4 	movi	r2,255
  80c708:	1185803a 	cmpltu	r2,r2,r6
  80c70c:	100490fa 	slli	r2,r2,3
  80c710:	3086d83a 	srl	r3,r6,r2
  80c714:	01002074 	movhi	r4,129
  80c718:	21107304 	addi	r4,r4,16844
  80c71c:	20c7883a 	add	r3,r4,r3
  80c720:	18c00003 	ldbu	r3,0(r3)
  80c724:	1885883a 	add	r2,r3,r2
  80c728:	00c00804 	movi	r3,32
  80c72c:	1887c83a 	sub	r3,r3,r2
  80c730:	18000526 	beq	r3,zero,80c748 <__udivdi3+0x94>
  80c734:	80e0983a 	sll	r16,r16,r3
  80c738:	9884d83a 	srl	r2,r19,r2
  80c73c:	30e2983a 	sll	r17,r6,r3
  80c740:	98e4983a 	sll	r18,r19,r3
  80c744:	142cb03a 	or	r22,r2,r16
  80c748:	882ad43a 	srli	r21,r17,16
  80c74c:	b009883a 	mov	r4,r22
  80c750:	8d3fffcc 	andi	r20,r17,65535
  80c754:	a80b883a 	mov	r5,r21
  80c758:	080d2c00 	call	80d2c0 <__umodsi3>
  80c75c:	b009883a 	mov	r4,r22
  80c760:	a80b883a 	mov	r5,r21
  80c764:	1027883a 	mov	r19,r2
  80c768:	080d25c0 	call	80d25c <__udivsi3>
  80c76c:	102d883a 	mov	r22,r2
  80c770:	9826943a 	slli	r19,r19,16
  80c774:	9004d43a 	srli	r2,r18,16
  80c778:	a5a1383a 	mul	r16,r20,r22
  80c77c:	14c4b03a 	or	r2,r2,r19
  80c780:	1400052e 	bgeu	r2,r16,80c798 <__udivdi3+0xe4>
  80c784:	1445883a 	add	r2,r2,r17
  80c788:	b0ffffc4 	addi	r3,r22,-1
  80c78c:	14400136 	bltu	r2,r17,80c794 <__udivdi3+0xe0>
  80c790:	14012336 	bltu	r2,r16,80cc20 <__udivdi3+0x56c>
  80c794:	182d883a 	mov	r22,r3
  80c798:	1421c83a 	sub	r16,r2,r16
  80c79c:	a80b883a 	mov	r5,r21
  80c7a0:	8009883a 	mov	r4,r16
  80c7a4:	080d2c00 	call	80d2c0 <__umodsi3>
  80c7a8:	1027883a 	mov	r19,r2
  80c7ac:	a80b883a 	mov	r5,r21
  80c7b0:	8009883a 	mov	r4,r16
  80c7b4:	080d25c0 	call	80d25c <__udivsi3>
  80c7b8:	9826943a 	slli	r19,r19,16
  80c7bc:	a0a9383a 	mul	r20,r20,r2
  80c7c0:	94bfffcc 	andi	r18,r18,65535
  80c7c4:	94e4b03a 	or	r18,r18,r19
  80c7c8:	9500052e 	bgeu	r18,r20,80c7e0 <__udivdi3+0x12c>
  80c7cc:	8ca5883a 	add	r18,r17,r18
  80c7d0:	10ffffc4 	addi	r3,r2,-1
  80c7d4:	9440f136 	bltu	r18,r17,80cb9c <__udivdi3+0x4e8>
  80c7d8:	9500f02e 	bgeu	r18,r20,80cb9c <__udivdi3+0x4e8>
  80c7dc:	10bfff84 	addi	r2,r2,-2
  80c7e0:	b00c943a 	slli	r6,r22,16
  80c7e4:	0007883a 	mov	r3,zero
  80c7e8:	3084b03a 	or	r2,r6,r2
  80c7ec:	00005906 	br	80c954 <__udivdi3+0x2a0>
  80c7f0:	29c05636 	bltu	r5,r7,80c94c <__udivdi3+0x298>
  80c7f4:	00bfffd4 	movui	r2,65535
  80c7f8:	11c0622e 	bgeu	r2,r7,80c984 <__udivdi3+0x2d0>
  80c7fc:	00804034 	movhi	r2,256
  80c800:	10bfffc4 	addi	r2,r2,-1
  80c804:	11c0ee36 	bltu	r2,r7,80cbc0 <__udivdi3+0x50c>
  80c808:	00800404 	movi	r2,16
  80c80c:	3886d83a 	srl	r3,r7,r2
  80c810:	01002074 	movhi	r4,129
  80c814:	21107304 	addi	r4,r4,16844
  80c818:	20c7883a 	add	r3,r4,r3
  80c81c:	18c00003 	ldbu	r3,0(r3)
  80c820:	05400804 	movi	r21,32
  80c824:	1885883a 	add	r2,r3,r2
  80c828:	a8abc83a 	sub	r21,r21,r2
  80c82c:	a800621e 	bne	r21,zero,80c9b8 <__udivdi3+0x304>
  80c830:	3c00e936 	bltu	r7,r16,80cbd8 <__udivdi3+0x524>
  80c834:	9985403a 	cmpgeu	r2,r19,r6
  80c838:	0007883a 	mov	r3,zero
  80c83c:	00004506 	br	80c954 <__udivdi3+0x2a0>
  80c840:	3000041e 	bne	r6,zero,80c854 <__udivdi3+0x1a0>
  80c844:	000b883a 	mov	r5,zero
  80c848:	01000044 	movi	r4,1
  80c84c:	080d25c0 	call	80d25c <__udivsi3>
  80c850:	1023883a 	mov	r17,r2
  80c854:	00bfffd4 	movui	r2,65535
  80c858:	14404e2e 	bgeu	r2,r17,80c994 <__udivdi3+0x2e0>
  80c85c:	00804034 	movhi	r2,256
  80c860:	10bfffc4 	addi	r2,r2,-1
  80c864:	1440d836 	bltu	r2,r17,80cbc8 <__udivdi3+0x514>
  80c868:	00800404 	movi	r2,16
  80c86c:	8886d83a 	srl	r3,r17,r2
  80c870:	01002074 	movhi	r4,129
  80c874:	21107304 	addi	r4,r4,16844
  80c878:	20c7883a 	add	r3,r4,r3
  80c87c:	18c00003 	ldbu	r3,0(r3)
  80c880:	1885883a 	add	r2,r3,r2
  80c884:	00c00804 	movi	r3,32
  80c888:	1887c83a 	sub	r3,r3,r2
  80c88c:	18008f1e 	bne	r3,zero,80cacc <__udivdi3+0x418>
  80c890:	882ad43a 	srli	r21,r17,16
  80c894:	8461c83a 	sub	r16,r16,r17
  80c898:	8d3fffcc 	andi	r20,r17,65535
  80c89c:	00c00044 	movi	r3,1
  80c8a0:	8009883a 	mov	r4,r16
  80c8a4:	a80b883a 	mov	r5,r21
  80c8a8:	d8c00015 	stw	r3,0(sp)
  80c8ac:	080d2c00 	call	80d2c0 <__umodsi3>
  80c8b0:	8009883a 	mov	r4,r16
  80c8b4:	a80b883a 	mov	r5,r21
  80c8b8:	1027883a 	mov	r19,r2
  80c8bc:	080d25c0 	call	80d25c <__udivsi3>
  80c8c0:	9826943a 	slli	r19,r19,16
  80c8c4:	9008d43a 	srli	r4,r18,16
  80c8c8:	1521383a 	mul	r16,r2,r20
  80c8cc:	102d883a 	mov	r22,r2
  80c8d0:	24c8b03a 	or	r4,r4,r19
  80c8d4:	d8c00017 	ldw	r3,0(sp)
  80c8d8:	2400052e 	bgeu	r4,r16,80c8f0 <__udivdi3+0x23c>
  80c8dc:	2449883a 	add	r4,r4,r17
  80c8e0:	b0bfffc4 	addi	r2,r22,-1
  80c8e4:	24400136 	bltu	r4,r17,80c8ec <__udivdi3+0x238>
  80c8e8:	2400ca36 	bltu	r4,r16,80cc14 <__udivdi3+0x560>
  80c8ec:	102d883a 	mov	r22,r2
  80c8f0:	2421c83a 	sub	r16,r4,r16
  80c8f4:	a80b883a 	mov	r5,r21
  80c8f8:	8009883a 	mov	r4,r16
  80c8fc:	d8c00015 	stw	r3,0(sp)
  80c900:	080d2c00 	call	80d2c0 <__umodsi3>
  80c904:	1027883a 	mov	r19,r2
  80c908:	a80b883a 	mov	r5,r21
  80c90c:	8009883a 	mov	r4,r16
  80c910:	080d25c0 	call	80d25c <__udivsi3>
  80c914:	9826943a 	slli	r19,r19,16
  80c918:	1529383a 	mul	r20,r2,r20
  80c91c:	94bfffcc 	andi	r18,r18,65535
  80c920:	94e4b03a 	or	r18,r18,r19
  80c924:	d8c00017 	ldw	r3,0(sp)
  80c928:	9500052e 	bgeu	r18,r20,80c940 <__udivdi3+0x28c>
  80c92c:	8ca5883a 	add	r18,r17,r18
  80c930:	113fffc4 	addi	r4,r2,-1
  80c934:	94409736 	bltu	r18,r17,80cb94 <__udivdi3+0x4e0>
  80c938:	9500962e 	bgeu	r18,r20,80cb94 <__udivdi3+0x4e0>
  80c93c:	10bfff84 	addi	r2,r2,-2
  80c940:	b00c943a 	slli	r6,r22,16
  80c944:	3084b03a 	or	r2,r6,r2
  80c948:	00000206 	br	80c954 <__udivdi3+0x2a0>
  80c94c:	0007883a 	mov	r3,zero
  80c950:	0005883a 	mov	r2,zero
  80c954:	dfc00a17 	ldw	ra,40(sp)
  80c958:	df000917 	ldw	fp,36(sp)
  80c95c:	ddc00817 	ldw	r23,32(sp)
  80c960:	dd800717 	ldw	r22,28(sp)
  80c964:	dd400617 	ldw	r21,24(sp)
  80c968:	dd000517 	ldw	r20,20(sp)
  80c96c:	dcc00417 	ldw	r19,16(sp)
  80c970:	dc800317 	ldw	r18,12(sp)
  80c974:	dc400217 	ldw	r17,8(sp)
  80c978:	dc000117 	ldw	r16,4(sp)
  80c97c:	dec00b04 	addi	sp,sp,44
  80c980:	f800283a 	ret
  80c984:	00803fc4 	movi	r2,255
  80c988:	11c5803a 	cmpltu	r2,r2,r7
  80c98c:	100490fa 	slli	r2,r2,3
  80c990:	003f9e06 	br	80c80c <__alt_mem_onchip_mem+0xff78c80c>
  80c994:	00803fc4 	movi	r2,255
  80c998:	1445803a 	cmpltu	r2,r2,r17
  80c99c:	100490fa 	slli	r2,r2,3
  80c9a0:	003fb206 	br	80c86c <__alt_mem_onchip_mem+0xff78c86c>
  80c9a4:	00804034 	movhi	r2,256
  80c9a8:	10bfffc4 	addi	r2,r2,-1
  80c9ac:	11808836 	bltu	r2,r6,80cbd0 <__udivdi3+0x51c>
  80c9b0:	00800404 	movi	r2,16
  80c9b4:	003f5606 	br	80c710 <__alt_mem_onchip_mem+0xff78c710>
  80c9b8:	30aed83a 	srl	r23,r6,r2
  80c9bc:	3d4e983a 	sll	r7,r7,r21
  80c9c0:	80acd83a 	srl	r22,r16,r2
  80c9c4:	9884d83a 	srl	r2,r19,r2
  80c9c8:	3deeb03a 	or	r23,r7,r23
  80c9cc:	b824d43a 	srli	r18,r23,16
  80c9d0:	8560983a 	sll	r16,r16,r21
  80c9d4:	b009883a 	mov	r4,r22
  80c9d8:	900b883a 	mov	r5,r18
  80c9dc:	3568983a 	sll	r20,r6,r21
  80c9e0:	1420b03a 	or	r16,r2,r16
  80c9e4:	080d2c00 	call	80d2c0 <__umodsi3>
  80c9e8:	b009883a 	mov	r4,r22
  80c9ec:	900b883a 	mov	r5,r18
  80c9f0:	1023883a 	mov	r17,r2
  80c9f4:	080d25c0 	call	80d25c <__udivsi3>
  80c9f8:	8808943a 	slli	r4,r17,16
  80c9fc:	bf3fffcc 	andi	fp,r23,65535
  80ca00:	8006d43a 	srli	r3,r16,16
  80ca04:	e0a3383a 	mul	r17,fp,r2
  80ca08:	100d883a 	mov	r6,r2
  80ca0c:	1906b03a 	or	r3,r3,r4
  80ca10:	1c40042e 	bgeu	r3,r17,80ca24 <__udivdi3+0x370>
  80ca14:	1dc7883a 	add	r3,r3,r23
  80ca18:	10bfffc4 	addi	r2,r2,-1
  80ca1c:	1dc0752e 	bgeu	r3,r23,80cbf4 <__udivdi3+0x540>
  80ca20:	100d883a 	mov	r6,r2
  80ca24:	1c63c83a 	sub	r17,r3,r17
  80ca28:	900b883a 	mov	r5,r18
  80ca2c:	8809883a 	mov	r4,r17
  80ca30:	d9800015 	stw	r6,0(sp)
  80ca34:	080d2c00 	call	80d2c0 <__umodsi3>
  80ca38:	102d883a 	mov	r22,r2
  80ca3c:	8809883a 	mov	r4,r17
  80ca40:	900b883a 	mov	r5,r18
  80ca44:	080d25c0 	call	80d25c <__udivsi3>
  80ca48:	b02c943a 	slli	r22,r22,16
  80ca4c:	e089383a 	mul	r4,fp,r2
  80ca50:	843fffcc 	andi	r16,r16,65535
  80ca54:	85a0b03a 	or	r16,r16,r22
  80ca58:	d9800017 	ldw	r6,0(sp)
  80ca5c:	8100042e 	bgeu	r16,r4,80ca70 <__udivdi3+0x3bc>
  80ca60:	85e1883a 	add	r16,r16,r23
  80ca64:	10ffffc4 	addi	r3,r2,-1
  80ca68:	85c05e2e 	bgeu	r16,r23,80cbe4 <__udivdi3+0x530>
  80ca6c:	1805883a 	mov	r2,r3
  80ca70:	300c943a 	slli	r6,r6,16
  80ca74:	a17fffcc 	andi	r5,r20,65535
  80ca78:	a028d43a 	srli	r20,r20,16
  80ca7c:	3084b03a 	or	r2,r6,r2
  80ca80:	10ffffcc 	andi	r3,r2,65535
  80ca84:	100cd43a 	srli	r6,r2,16
  80ca88:	194f383a 	mul	r7,r3,r5
  80ca8c:	1d07383a 	mul	r3,r3,r20
  80ca90:	314b383a 	mul	r5,r6,r5
  80ca94:	3810d43a 	srli	r8,r7,16
  80ca98:	8121c83a 	sub	r16,r16,r4
  80ca9c:	1947883a 	add	r3,r3,r5
  80caa0:	40c7883a 	add	r3,r8,r3
  80caa4:	350d383a 	mul	r6,r6,r20
  80caa8:	1940022e 	bgeu	r3,r5,80cab4 <__udivdi3+0x400>
  80caac:	01000074 	movhi	r4,1
  80cab0:	310d883a 	add	r6,r6,r4
  80cab4:	1828d43a 	srli	r20,r3,16
  80cab8:	a18d883a 	add	r6,r20,r6
  80cabc:	81803e36 	bltu	r16,r6,80cbb8 <__udivdi3+0x504>
  80cac0:	81803826 	beq	r16,r6,80cba4 <__udivdi3+0x4f0>
  80cac4:	0007883a 	mov	r3,zero
  80cac8:	003fa206 	br	80c954 <__alt_mem_onchip_mem+0xff78c954>
  80cacc:	88e2983a 	sll	r17,r17,r3
  80cad0:	80a8d83a 	srl	r20,r16,r2
  80cad4:	80e0983a 	sll	r16,r16,r3
  80cad8:	882ad43a 	srli	r21,r17,16
  80cadc:	9884d83a 	srl	r2,r19,r2
  80cae0:	a009883a 	mov	r4,r20
  80cae4:	a80b883a 	mov	r5,r21
  80cae8:	142eb03a 	or	r23,r2,r16
  80caec:	98e4983a 	sll	r18,r19,r3
  80caf0:	080d2c00 	call	80d2c0 <__umodsi3>
  80caf4:	a009883a 	mov	r4,r20
  80caf8:	a80b883a 	mov	r5,r21
  80cafc:	1021883a 	mov	r16,r2
  80cb00:	080d25c0 	call	80d25c <__udivsi3>
  80cb04:	1039883a 	mov	fp,r2
  80cb08:	8d3fffcc 	andi	r20,r17,65535
  80cb0c:	8020943a 	slli	r16,r16,16
  80cb10:	b804d43a 	srli	r2,r23,16
  80cb14:	a72d383a 	mul	r22,r20,fp
  80cb18:	1404b03a 	or	r2,r2,r16
  80cb1c:	1580062e 	bgeu	r2,r22,80cb38 <__udivdi3+0x484>
  80cb20:	1445883a 	add	r2,r2,r17
  80cb24:	e0ffffc4 	addi	r3,fp,-1
  80cb28:	14403836 	bltu	r2,r17,80cc0c <__udivdi3+0x558>
  80cb2c:	1580372e 	bgeu	r2,r22,80cc0c <__udivdi3+0x558>
  80cb30:	e73fff84 	addi	fp,fp,-2
  80cb34:	1445883a 	add	r2,r2,r17
  80cb38:	15adc83a 	sub	r22,r2,r22
  80cb3c:	a80b883a 	mov	r5,r21
  80cb40:	b009883a 	mov	r4,r22
  80cb44:	080d2c00 	call	80d2c0 <__umodsi3>
  80cb48:	1027883a 	mov	r19,r2
  80cb4c:	b009883a 	mov	r4,r22
  80cb50:	a80b883a 	mov	r5,r21
  80cb54:	080d25c0 	call	80d25c <__udivsi3>
  80cb58:	9826943a 	slli	r19,r19,16
  80cb5c:	a0a1383a 	mul	r16,r20,r2
  80cb60:	b93fffcc 	andi	r4,r23,65535
  80cb64:	24c8b03a 	or	r4,r4,r19
  80cb68:	2400062e 	bgeu	r4,r16,80cb84 <__udivdi3+0x4d0>
  80cb6c:	2449883a 	add	r4,r4,r17
  80cb70:	10ffffc4 	addi	r3,r2,-1
  80cb74:	24402336 	bltu	r4,r17,80cc04 <__udivdi3+0x550>
  80cb78:	2400222e 	bgeu	r4,r16,80cc04 <__udivdi3+0x550>
  80cb7c:	10bfff84 	addi	r2,r2,-2
  80cb80:	2449883a 	add	r4,r4,r17
  80cb84:	e038943a 	slli	fp,fp,16
  80cb88:	2421c83a 	sub	r16,r4,r16
  80cb8c:	e086b03a 	or	r3,fp,r2
  80cb90:	003f4306 	br	80c8a0 <__alt_mem_onchip_mem+0xff78c8a0>
  80cb94:	2005883a 	mov	r2,r4
  80cb98:	003f6906 	br	80c940 <__alt_mem_onchip_mem+0xff78c940>
  80cb9c:	1805883a 	mov	r2,r3
  80cba0:	003f0f06 	br	80c7e0 <__alt_mem_onchip_mem+0xff78c7e0>
  80cba4:	1806943a 	slli	r3,r3,16
  80cba8:	9d66983a 	sll	r19,r19,r21
  80cbac:	39ffffcc 	andi	r7,r7,65535
  80cbb0:	19c7883a 	add	r3,r3,r7
  80cbb4:	98ffc32e 	bgeu	r19,r3,80cac4 <__alt_mem_onchip_mem+0xff78cac4>
  80cbb8:	10bfffc4 	addi	r2,r2,-1
  80cbbc:	003fc106 	br	80cac4 <__alt_mem_onchip_mem+0xff78cac4>
  80cbc0:	00800604 	movi	r2,24
  80cbc4:	003f1106 	br	80c80c <__alt_mem_onchip_mem+0xff78c80c>
  80cbc8:	00800604 	movi	r2,24
  80cbcc:	003f2706 	br	80c86c <__alt_mem_onchip_mem+0xff78c86c>
  80cbd0:	00800604 	movi	r2,24
  80cbd4:	003ece06 	br	80c710 <__alt_mem_onchip_mem+0xff78c710>
  80cbd8:	0007883a 	mov	r3,zero
  80cbdc:	00800044 	movi	r2,1
  80cbe0:	003f5c06 	br	80c954 <__alt_mem_onchip_mem+0xff78c954>
  80cbe4:	813fa12e 	bgeu	r16,r4,80ca6c <__alt_mem_onchip_mem+0xff78ca6c>
  80cbe8:	10bfff84 	addi	r2,r2,-2
  80cbec:	85e1883a 	add	r16,r16,r23
  80cbf0:	003f9f06 	br	80ca70 <__alt_mem_onchip_mem+0xff78ca70>
  80cbf4:	1c7f8a2e 	bgeu	r3,r17,80ca20 <__alt_mem_onchip_mem+0xff78ca20>
  80cbf8:	31bfff84 	addi	r6,r6,-2
  80cbfc:	1dc7883a 	add	r3,r3,r23
  80cc00:	003f8806 	br	80ca24 <__alt_mem_onchip_mem+0xff78ca24>
  80cc04:	1805883a 	mov	r2,r3
  80cc08:	003fde06 	br	80cb84 <__alt_mem_onchip_mem+0xff78cb84>
  80cc0c:	1839883a 	mov	fp,r3
  80cc10:	003fc906 	br	80cb38 <__alt_mem_onchip_mem+0xff78cb38>
  80cc14:	b5bfff84 	addi	r22,r22,-2
  80cc18:	2449883a 	add	r4,r4,r17
  80cc1c:	003f3406 	br	80c8f0 <__alt_mem_onchip_mem+0xff78c8f0>
  80cc20:	b5bfff84 	addi	r22,r22,-2
  80cc24:	1445883a 	add	r2,r2,r17
  80cc28:	003edb06 	br	80c798 <__alt_mem_onchip_mem+0xff78c798>

0080cc2c <__umoddi3>:
  80cc2c:	defff404 	addi	sp,sp,-48
  80cc30:	df000a15 	stw	fp,40(sp)
  80cc34:	dc400315 	stw	r17,12(sp)
  80cc38:	dc000215 	stw	r16,8(sp)
  80cc3c:	dfc00b15 	stw	ra,44(sp)
  80cc40:	ddc00915 	stw	r23,36(sp)
  80cc44:	dd800815 	stw	r22,32(sp)
  80cc48:	dd400715 	stw	r21,28(sp)
  80cc4c:	dd000615 	stw	r20,24(sp)
  80cc50:	dcc00515 	stw	r19,20(sp)
  80cc54:	dc800415 	stw	r18,16(sp)
  80cc58:	2021883a 	mov	r16,r4
  80cc5c:	2823883a 	mov	r17,r5
  80cc60:	2839883a 	mov	fp,r5
  80cc64:	38003c1e 	bne	r7,zero,80cd58 <__umoddi3+0x12c>
  80cc68:	3027883a 	mov	r19,r6
  80cc6c:	2029883a 	mov	r20,r4
  80cc70:	2980512e 	bgeu	r5,r6,80cdb8 <__umoddi3+0x18c>
  80cc74:	00bfffd4 	movui	r2,65535
  80cc78:	11809a36 	bltu	r2,r6,80cee4 <__umoddi3+0x2b8>
  80cc7c:	01003fc4 	movi	r4,255
  80cc80:	2189803a 	cmpltu	r4,r4,r6
  80cc84:	200890fa 	slli	r4,r4,3
  80cc88:	3104d83a 	srl	r2,r6,r4
  80cc8c:	00c02074 	movhi	r3,129
  80cc90:	18d07304 	addi	r3,r3,16844
  80cc94:	1885883a 	add	r2,r3,r2
  80cc98:	10c00003 	ldbu	r3,0(r2)
  80cc9c:	00800804 	movi	r2,32
  80cca0:	1909883a 	add	r4,r3,r4
  80cca4:	1125c83a 	sub	r18,r2,r4
  80cca8:	90000526 	beq	r18,zero,80ccc0 <__umoddi3+0x94>
  80ccac:	8ca2983a 	sll	r17,r17,r18
  80ccb0:	8108d83a 	srl	r4,r16,r4
  80ccb4:	34a6983a 	sll	r19,r6,r18
  80ccb8:	84a8983a 	sll	r20,r16,r18
  80ccbc:	2478b03a 	or	fp,r4,r17
  80ccc0:	982ed43a 	srli	r23,r19,16
  80ccc4:	e009883a 	mov	r4,fp
  80ccc8:	9dbfffcc 	andi	r22,r19,65535
  80cccc:	b80b883a 	mov	r5,r23
  80ccd0:	080d2c00 	call	80d2c0 <__umodsi3>
  80ccd4:	e009883a 	mov	r4,fp
  80ccd8:	b80b883a 	mov	r5,r23
  80ccdc:	102b883a 	mov	r21,r2
  80cce0:	080d25c0 	call	80d25c <__udivsi3>
  80cce4:	a806943a 	slli	r3,r21,16
  80cce8:	a008d43a 	srli	r4,r20,16
  80ccec:	b085383a 	mul	r2,r22,r2
  80ccf0:	20c8b03a 	or	r4,r4,r3
  80ccf4:	2080032e 	bgeu	r4,r2,80cd04 <__umoddi3+0xd8>
  80ccf8:	24c9883a 	add	r4,r4,r19
  80ccfc:	24c00136 	bltu	r4,r19,80cd04 <__umoddi3+0xd8>
  80cd00:	20811036 	bltu	r4,r2,80d144 <__umoddi3+0x518>
  80cd04:	20abc83a 	sub	r21,r4,r2
  80cd08:	b80b883a 	mov	r5,r23
  80cd0c:	a809883a 	mov	r4,r21
  80cd10:	080d2c00 	call	80d2c0 <__umodsi3>
  80cd14:	1023883a 	mov	r17,r2
  80cd18:	b80b883a 	mov	r5,r23
  80cd1c:	a809883a 	mov	r4,r21
  80cd20:	080d25c0 	call	80d25c <__udivsi3>
  80cd24:	8822943a 	slli	r17,r17,16
  80cd28:	b085383a 	mul	r2,r22,r2
  80cd2c:	a0ffffcc 	andi	r3,r20,65535
  80cd30:	1c46b03a 	or	r3,r3,r17
  80cd34:	1880042e 	bgeu	r3,r2,80cd48 <__umoddi3+0x11c>
  80cd38:	1cc7883a 	add	r3,r3,r19
  80cd3c:	1cc00236 	bltu	r3,r19,80cd48 <__umoddi3+0x11c>
  80cd40:	1880012e 	bgeu	r3,r2,80cd48 <__umoddi3+0x11c>
  80cd44:	1cc7883a 	add	r3,r3,r19
  80cd48:	1885c83a 	sub	r2,r3,r2
  80cd4c:	1484d83a 	srl	r2,r2,r18
  80cd50:	0007883a 	mov	r3,zero
  80cd54:	00004f06 	br	80ce94 <__umoddi3+0x268>
  80cd58:	29c04c36 	bltu	r5,r7,80ce8c <__umoddi3+0x260>
  80cd5c:	00bfffd4 	movui	r2,65535
  80cd60:	11c0582e 	bgeu	r2,r7,80cec4 <__umoddi3+0x298>
  80cd64:	00804034 	movhi	r2,256
  80cd68:	10bfffc4 	addi	r2,r2,-1
  80cd6c:	11c0e736 	bltu	r2,r7,80d10c <__umoddi3+0x4e0>
  80cd70:	01000404 	movi	r4,16
  80cd74:	3904d83a 	srl	r2,r7,r4
  80cd78:	00c02074 	movhi	r3,129
  80cd7c:	18d07304 	addi	r3,r3,16844
  80cd80:	1885883a 	add	r2,r3,r2
  80cd84:	14c00003 	ldbu	r19,0(r2)
  80cd88:	00c00804 	movi	r3,32
  80cd8c:	9927883a 	add	r19,r19,r4
  80cd90:	1ce9c83a 	sub	r20,r3,r19
  80cd94:	a000581e 	bne	r20,zero,80cef8 <__umoddi3+0x2cc>
  80cd98:	3c400136 	bltu	r7,r17,80cda0 <__umoddi3+0x174>
  80cd9c:	8180eb36 	bltu	r16,r6,80d14c <__umoddi3+0x520>
  80cda0:	8185c83a 	sub	r2,r16,r6
  80cda4:	89e3c83a 	sub	r17,r17,r7
  80cda8:	8089803a 	cmpltu	r4,r16,r2
  80cdac:	8939c83a 	sub	fp,r17,r4
  80cdb0:	e007883a 	mov	r3,fp
  80cdb4:	00003706 	br	80ce94 <__umoddi3+0x268>
  80cdb8:	3000041e 	bne	r6,zero,80cdcc <__umoddi3+0x1a0>
  80cdbc:	000b883a 	mov	r5,zero
  80cdc0:	01000044 	movi	r4,1
  80cdc4:	080d25c0 	call	80d25c <__udivsi3>
  80cdc8:	1027883a 	mov	r19,r2
  80cdcc:	00bfffd4 	movui	r2,65535
  80cdd0:	14c0402e 	bgeu	r2,r19,80ced4 <__umoddi3+0x2a8>
  80cdd4:	00804034 	movhi	r2,256
  80cdd8:	10bfffc4 	addi	r2,r2,-1
  80cddc:	14c0cd36 	bltu	r2,r19,80d114 <__umoddi3+0x4e8>
  80cde0:	00800404 	movi	r2,16
  80cde4:	9886d83a 	srl	r3,r19,r2
  80cde8:	01002074 	movhi	r4,129
  80cdec:	21107304 	addi	r4,r4,16844
  80cdf0:	20c7883a 	add	r3,r4,r3
  80cdf4:	18c00003 	ldbu	r3,0(r3)
  80cdf8:	1887883a 	add	r3,r3,r2
  80cdfc:	00800804 	movi	r2,32
  80ce00:	10e5c83a 	sub	r18,r2,r3
  80ce04:	9000901e 	bne	r18,zero,80d048 <__umoddi3+0x41c>
  80ce08:	982cd43a 	srli	r22,r19,16
  80ce0c:	8ce3c83a 	sub	r17,r17,r19
  80ce10:	9d7fffcc 	andi	r21,r19,65535
  80ce14:	b00b883a 	mov	r5,r22
  80ce18:	8809883a 	mov	r4,r17
  80ce1c:	080d2c00 	call	80d2c0 <__umodsi3>
  80ce20:	8809883a 	mov	r4,r17
  80ce24:	b00b883a 	mov	r5,r22
  80ce28:	1021883a 	mov	r16,r2
  80ce2c:	080d25c0 	call	80d25c <__udivsi3>
  80ce30:	8006943a 	slli	r3,r16,16
  80ce34:	a008d43a 	srli	r4,r20,16
  80ce38:	1545383a 	mul	r2,r2,r21
  80ce3c:	20c8b03a 	or	r4,r4,r3
  80ce40:	2080042e 	bgeu	r4,r2,80ce54 <__umoddi3+0x228>
  80ce44:	24c9883a 	add	r4,r4,r19
  80ce48:	24c00236 	bltu	r4,r19,80ce54 <__umoddi3+0x228>
  80ce4c:	2080012e 	bgeu	r4,r2,80ce54 <__umoddi3+0x228>
  80ce50:	24c9883a 	add	r4,r4,r19
  80ce54:	20a1c83a 	sub	r16,r4,r2
  80ce58:	b00b883a 	mov	r5,r22
  80ce5c:	8009883a 	mov	r4,r16
  80ce60:	080d2c00 	call	80d2c0 <__umodsi3>
  80ce64:	1023883a 	mov	r17,r2
  80ce68:	b00b883a 	mov	r5,r22
  80ce6c:	8009883a 	mov	r4,r16
  80ce70:	080d25c0 	call	80d25c <__udivsi3>
  80ce74:	8822943a 	slli	r17,r17,16
  80ce78:	1545383a 	mul	r2,r2,r21
  80ce7c:	a53fffcc 	andi	r20,r20,65535
  80ce80:	a446b03a 	or	r3,r20,r17
  80ce84:	18bfb02e 	bgeu	r3,r2,80cd48 <__alt_mem_onchip_mem+0xff78cd48>
  80ce88:	003fab06 	br	80cd38 <__alt_mem_onchip_mem+0xff78cd38>
  80ce8c:	2005883a 	mov	r2,r4
  80ce90:	2807883a 	mov	r3,r5
  80ce94:	dfc00b17 	ldw	ra,44(sp)
  80ce98:	df000a17 	ldw	fp,40(sp)
  80ce9c:	ddc00917 	ldw	r23,36(sp)
  80cea0:	dd800817 	ldw	r22,32(sp)
  80cea4:	dd400717 	ldw	r21,28(sp)
  80cea8:	dd000617 	ldw	r20,24(sp)
  80ceac:	dcc00517 	ldw	r19,20(sp)
  80ceb0:	dc800417 	ldw	r18,16(sp)
  80ceb4:	dc400317 	ldw	r17,12(sp)
  80ceb8:	dc000217 	ldw	r16,8(sp)
  80cebc:	dec00c04 	addi	sp,sp,48
  80cec0:	f800283a 	ret
  80cec4:	04c03fc4 	movi	r19,255
  80cec8:	99c9803a 	cmpltu	r4,r19,r7
  80cecc:	200890fa 	slli	r4,r4,3
  80ced0:	003fa806 	br	80cd74 <__alt_mem_onchip_mem+0xff78cd74>
  80ced4:	00803fc4 	movi	r2,255
  80ced8:	14c5803a 	cmpltu	r2,r2,r19
  80cedc:	100490fa 	slli	r2,r2,3
  80cee0:	003fc006 	br	80cde4 <__alt_mem_onchip_mem+0xff78cde4>
  80cee4:	00804034 	movhi	r2,256
  80cee8:	10bfffc4 	addi	r2,r2,-1
  80ceec:	11808b36 	bltu	r2,r6,80d11c <__umoddi3+0x4f0>
  80cef0:	01000404 	movi	r4,16
  80cef4:	003f6406 	br	80cc88 <__alt_mem_onchip_mem+0xff78cc88>
  80cef8:	34c4d83a 	srl	r2,r6,r19
  80cefc:	3d0e983a 	sll	r7,r7,r20
  80cf00:	8cf8d83a 	srl	fp,r17,r19
  80cf04:	8d10983a 	sll	r8,r17,r20
  80cf08:	38aab03a 	or	r21,r7,r2
  80cf0c:	a82cd43a 	srli	r22,r21,16
  80cf10:	84e2d83a 	srl	r17,r16,r19
  80cf14:	e009883a 	mov	r4,fp
  80cf18:	b00b883a 	mov	r5,r22
  80cf1c:	8a22b03a 	or	r17,r17,r8
  80cf20:	3524983a 	sll	r18,r6,r20
  80cf24:	080d2c00 	call	80d2c0 <__umodsi3>
  80cf28:	e009883a 	mov	r4,fp
  80cf2c:	b00b883a 	mov	r5,r22
  80cf30:	102f883a 	mov	r23,r2
  80cf34:	080d25c0 	call	80d25c <__udivsi3>
  80cf38:	100d883a 	mov	r6,r2
  80cf3c:	b808943a 	slli	r4,r23,16
  80cf40:	aa3fffcc 	andi	r8,r21,65535
  80cf44:	8804d43a 	srli	r2,r17,16
  80cf48:	41af383a 	mul	r23,r8,r6
  80cf4c:	8520983a 	sll	r16,r16,r20
  80cf50:	1104b03a 	or	r2,r2,r4
  80cf54:	15c0042e 	bgeu	r2,r23,80cf68 <__umoddi3+0x33c>
  80cf58:	1545883a 	add	r2,r2,r21
  80cf5c:	30ffffc4 	addi	r3,r6,-1
  80cf60:	1540742e 	bgeu	r2,r21,80d134 <__umoddi3+0x508>
  80cf64:	180d883a 	mov	r6,r3
  80cf68:	15efc83a 	sub	r23,r2,r23
  80cf6c:	b00b883a 	mov	r5,r22
  80cf70:	b809883a 	mov	r4,r23
  80cf74:	d9800115 	stw	r6,4(sp)
  80cf78:	da000015 	stw	r8,0(sp)
  80cf7c:	080d2c00 	call	80d2c0 <__umodsi3>
  80cf80:	b00b883a 	mov	r5,r22
  80cf84:	b809883a 	mov	r4,r23
  80cf88:	1039883a 	mov	fp,r2
  80cf8c:	080d25c0 	call	80d25c <__udivsi3>
  80cf90:	da000017 	ldw	r8,0(sp)
  80cf94:	e038943a 	slli	fp,fp,16
  80cf98:	100b883a 	mov	r5,r2
  80cf9c:	4089383a 	mul	r4,r8,r2
  80cfa0:	8a3fffcc 	andi	r8,r17,65535
  80cfa4:	4710b03a 	or	r8,r8,fp
  80cfa8:	d9800117 	ldw	r6,4(sp)
  80cfac:	4100042e 	bgeu	r8,r4,80cfc0 <__umoddi3+0x394>
  80cfb0:	4551883a 	add	r8,r8,r21
  80cfb4:	10bfffc4 	addi	r2,r2,-1
  80cfb8:	45405a2e 	bgeu	r8,r21,80d124 <__umoddi3+0x4f8>
  80cfbc:	100b883a 	mov	r5,r2
  80cfc0:	300c943a 	slli	r6,r6,16
  80cfc4:	91ffffcc 	andi	r7,r18,65535
  80cfc8:	9004d43a 	srli	r2,r18,16
  80cfcc:	314cb03a 	or	r6,r6,r5
  80cfd0:	317fffcc 	andi	r5,r6,65535
  80cfd4:	300cd43a 	srli	r6,r6,16
  80cfd8:	29d3383a 	mul	r9,r5,r7
  80cfdc:	288b383a 	mul	r5,r5,r2
  80cfe0:	31cf383a 	mul	r7,r6,r7
  80cfe4:	4806d43a 	srli	r3,r9,16
  80cfe8:	4111c83a 	sub	r8,r8,r4
  80cfec:	29cb883a 	add	r5,r5,r7
  80cff0:	194b883a 	add	r5,r3,r5
  80cff4:	3085383a 	mul	r2,r6,r2
  80cff8:	29c0022e 	bgeu	r5,r7,80d004 <__umoddi3+0x3d8>
  80cffc:	00c00074 	movhi	r3,1
  80d000:	10c5883a 	add	r2,r2,r3
  80d004:	2808d43a 	srli	r4,r5,16
  80d008:	280a943a 	slli	r5,r5,16
  80d00c:	4a7fffcc 	andi	r9,r9,65535
  80d010:	2085883a 	add	r2,r4,r2
  80d014:	2a4b883a 	add	r5,r5,r9
  80d018:	40803636 	bltu	r8,r2,80d0f4 <__umoddi3+0x4c8>
  80d01c:	40804d26 	beq	r8,r2,80d154 <__umoddi3+0x528>
  80d020:	4089c83a 	sub	r4,r8,r2
  80d024:	280f883a 	mov	r7,r5
  80d028:	81cfc83a 	sub	r7,r16,r7
  80d02c:	81c7803a 	cmpltu	r3,r16,r7
  80d030:	20c7c83a 	sub	r3,r4,r3
  80d034:	1cc4983a 	sll	r2,r3,r19
  80d038:	3d0ed83a 	srl	r7,r7,r20
  80d03c:	1d06d83a 	srl	r3,r3,r20
  80d040:	11c4b03a 	or	r2,r2,r7
  80d044:	003f9306 	br	80ce94 <__alt_mem_onchip_mem+0xff78ce94>
  80d048:	9ca6983a 	sll	r19,r19,r18
  80d04c:	88e8d83a 	srl	r20,r17,r3
  80d050:	80c4d83a 	srl	r2,r16,r3
  80d054:	982cd43a 	srli	r22,r19,16
  80d058:	8ca2983a 	sll	r17,r17,r18
  80d05c:	a009883a 	mov	r4,r20
  80d060:	b00b883a 	mov	r5,r22
  80d064:	1478b03a 	or	fp,r2,r17
  80d068:	080d2c00 	call	80d2c0 <__umodsi3>
  80d06c:	a009883a 	mov	r4,r20
  80d070:	b00b883a 	mov	r5,r22
  80d074:	1023883a 	mov	r17,r2
  80d078:	080d25c0 	call	80d25c <__udivsi3>
  80d07c:	9d7fffcc 	andi	r21,r19,65535
  80d080:	880a943a 	slli	r5,r17,16
  80d084:	e008d43a 	srli	r4,fp,16
  80d088:	a885383a 	mul	r2,r21,r2
  80d08c:	84a8983a 	sll	r20,r16,r18
  80d090:	2148b03a 	or	r4,r4,r5
  80d094:	2080042e 	bgeu	r4,r2,80d0a8 <__umoddi3+0x47c>
  80d098:	24c9883a 	add	r4,r4,r19
  80d09c:	24c00236 	bltu	r4,r19,80d0a8 <__umoddi3+0x47c>
  80d0a0:	2080012e 	bgeu	r4,r2,80d0a8 <__umoddi3+0x47c>
  80d0a4:	24c9883a 	add	r4,r4,r19
  80d0a8:	20a3c83a 	sub	r17,r4,r2
  80d0ac:	b00b883a 	mov	r5,r22
  80d0b0:	8809883a 	mov	r4,r17
  80d0b4:	080d2c00 	call	80d2c0 <__umodsi3>
  80d0b8:	102f883a 	mov	r23,r2
  80d0bc:	8809883a 	mov	r4,r17
  80d0c0:	b00b883a 	mov	r5,r22
  80d0c4:	080d25c0 	call	80d25c <__udivsi3>
  80d0c8:	b82e943a 	slli	r23,r23,16
  80d0cc:	a885383a 	mul	r2,r21,r2
  80d0d0:	e13fffcc 	andi	r4,fp,65535
  80d0d4:	25c8b03a 	or	r4,r4,r23
  80d0d8:	2080042e 	bgeu	r4,r2,80d0ec <__umoddi3+0x4c0>
  80d0dc:	24c9883a 	add	r4,r4,r19
  80d0e0:	24c00236 	bltu	r4,r19,80d0ec <__umoddi3+0x4c0>
  80d0e4:	2080012e 	bgeu	r4,r2,80d0ec <__umoddi3+0x4c0>
  80d0e8:	24c9883a 	add	r4,r4,r19
  80d0ec:	20a3c83a 	sub	r17,r4,r2
  80d0f0:	003f4806 	br	80ce14 <__alt_mem_onchip_mem+0xff78ce14>
  80d0f4:	2c8fc83a 	sub	r7,r5,r18
  80d0f8:	1545c83a 	sub	r2,r2,r21
  80d0fc:	29cb803a 	cmpltu	r5,r5,r7
  80d100:	1145c83a 	sub	r2,r2,r5
  80d104:	4089c83a 	sub	r4,r8,r2
  80d108:	003fc706 	br	80d028 <__alt_mem_onchip_mem+0xff78d028>
  80d10c:	01000604 	movi	r4,24
  80d110:	003f1806 	br	80cd74 <__alt_mem_onchip_mem+0xff78cd74>
  80d114:	00800604 	movi	r2,24
  80d118:	003f3206 	br	80cde4 <__alt_mem_onchip_mem+0xff78cde4>
  80d11c:	01000604 	movi	r4,24
  80d120:	003ed906 	br	80cc88 <__alt_mem_onchip_mem+0xff78cc88>
  80d124:	413fa52e 	bgeu	r8,r4,80cfbc <__alt_mem_onchip_mem+0xff78cfbc>
  80d128:	297fff84 	addi	r5,r5,-2
  80d12c:	4551883a 	add	r8,r8,r21
  80d130:	003fa306 	br	80cfc0 <__alt_mem_onchip_mem+0xff78cfc0>
  80d134:	15ff8b2e 	bgeu	r2,r23,80cf64 <__alt_mem_onchip_mem+0xff78cf64>
  80d138:	31bfff84 	addi	r6,r6,-2
  80d13c:	1545883a 	add	r2,r2,r21
  80d140:	003f8906 	br	80cf68 <__alt_mem_onchip_mem+0xff78cf68>
  80d144:	24c9883a 	add	r4,r4,r19
  80d148:	003eee06 	br	80cd04 <__alt_mem_onchip_mem+0xff78cd04>
  80d14c:	8005883a 	mov	r2,r16
  80d150:	003f1706 	br	80cdb0 <__alt_mem_onchip_mem+0xff78cdb0>
  80d154:	817fe736 	bltu	r16,r5,80d0f4 <__alt_mem_onchip_mem+0xff78d0f4>
  80d158:	280f883a 	mov	r7,r5
  80d15c:	0009883a 	mov	r4,zero
  80d160:	003fb106 	br	80d028 <__alt_mem_onchip_mem+0xff78d028>

0080d164 <__divsi3>:
  80d164:	20001b16 	blt	r4,zero,80d1d4 <__divsi3+0x70>
  80d168:	000f883a 	mov	r7,zero
  80d16c:	28001616 	blt	r5,zero,80d1c8 <__divsi3+0x64>
  80d170:	200d883a 	mov	r6,r4
  80d174:	29001a2e 	bgeu	r5,r4,80d1e0 <__divsi3+0x7c>
  80d178:	00800804 	movi	r2,32
  80d17c:	00c00044 	movi	r3,1
  80d180:	00000106 	br	80d188 <__divsi3+0x24>
  80d184:	10000d26 	beq	r2,zero,80d1bc <__divsi3+0x58>
  80d188:	294b883a 	add	r5,r5,r5
  80d18c:	10bfffc4 	addi	r2,r2,-1
  80d190:	18c7883a 	add	r3,r3,r3
  80d194:	293ffb36 	bltu	r5,r4,80d184 <__alt_mem_onchip_mem+0xff78d184>
  80d198:	0005883a 	mov	r2,zero
  80d19c:	18000726 	beq	r3,zero,80d1bc <__divsi3+0x58>
  80d1a0:	0005883a 	mov	r2,zero
  80d1a4:	31400236 	bltu	r6,r5,80d1b0 <__divsi3+0x4c>
  80d1a8:	314dc83a 	sub	r6,r6,r5
  80d1ac:	10c4b03a 	or	r2,r2,r3
  80d1b0:	1806d07a 	srli	r3,r3,1
  80d1b4:	280ad07a 	srli	r5,r5,1
  80d1b8:	183ffa1e 	bne	r3,zero,80d1a4 <__alt_mem_onchip_mem+0xff78d1a4>
  80d1bc:	38000126 	beq	r7,zero,80d1c4 <__divsi3+0x60>
  80d1c0:	0085c83a 	sub	r2,zero,r2
  80d1c4:	f800283a 	ret
  80d1c8:	014bc83a 	sub	r5,zero,r5
  80d1cc:	39c0005c 	xori	r7,r7,1
  80d1d0:	003fe706 	br	80d170 <__alt_mem_onchip_mem+0xff78d170>
  80d1d4:	0109c83a 	sub	r4,zero,r4
  80d1d8:	01c00044 	movi	r7,1
  80d1dc:	003fe306 	br	80d16c <__alt_mem_onchip_mem+0xff78d16c>
  80d1e0:	00c00044 	movi	r3,1
  80d1e4:	003fee06 	br	80d1a0 <__alt_mem_onchip_mem+0xff78d1a0>

0080d1e8 <__modsi3>:
  80d1e8:	20001716 	blt	r4,zero,80d248 <__modsi3+0x60>
  80d1ec:	000f883a 	mov	r7,zero
  80d1f0:	2005883a 	mov	r2,r4
  80d1f4:	28001216 	blt	r5,zero,80d240 <__modsi3+0x58>
  80d1f8:	2900162e 	bgeu	r5,r4,80d254 <__modsi3+0x6c>
  80d1fc:	01800804 	movi	r6,32
  80d200:	00c00044 	movi	r3,1
  80d204:	00000106 	br	80d20c <__modsi3+0x24>
  80d208:	30000a26 	beq	r6,zero,80d234 <__modsi3+0x4c>
  80d20c:	294b883a 	add	r5,r5,r5
  80d210:	31bfffc4 	addi	r6,r6,-1
  80d214:	18c7883a 	add	r3,r3,r3
  80d218:	293ffb36 	bltu	r5,r4,80d208 <__alt_mem_onchip_mem+0xff78d208>
  80d21c:	18000526 	beq	r3,zero,80d234 <__modsi3+0x4c>
  80d220:	1806d07a 	srli	r3,r3,1
  80d224:	11400136 	bltu	r2,r5,80d22c <__modsi3+0x44>
  80d228:	1145c83a 	sub	r2,r2,r5
  80d22c:	280ad07a 	srli	r5,r5,1
  80d230:	183ffb1e 	bne	r3,zero,80d220 <__alt_mem_onchip_mem+0xff78d220>
  80d234:	38000126 	beq	r7,zero,80d23c <__modsi3+0x54>
  80d238:	0085c83a 	sub	r2,zero,r2
  80d23c:	f800283a 	ret
  80d240:	014bc83a 	sub	r5,zero,r5
  80d244:	003fec06 	br	80d1f8 <__alt_mem_onchip_mem+0xff78d1f8>
  80d248:	0109c83a 	sub	r4,zero,r4
  80d24c:	01c00044 	movi	r7,1
  80d250:	003fe706 	br	80d1f0 <__alt_mem_onchip_mem+0xff78d1f0>
  80d254:	00c00044 	movi	r3,1
  80d258:	003ff106 	br	80d220 <__alt_mem_onchip_mem+0xff78d220>

0080d25c <__udivsi3>:
  80d25c:	200d883a 	mov	r6,r4
  80d260:	2900152e 	bgeu	r5,r4,80d2b8 <__udivsi3+0x5c>
  80d264:	28001416 	blt	r5,zero,80d2b8 <__udivsi3+0x5c>
  80d268:	00800804 	movi	r2,32
  80d26c:	00c00044 	movi	r3,1
  80d270:	00000206 	br	80d27c <__udivsi3+0x20>
  80d274:	10000e26 	beq	r2,zero,80d2b0 <__udivsi3+0x54>
  80d278:	28000516 	blt	r5,zero,80d290 <__udivsi3+0x34>
  80d27c:	294b883a 	add	r5,r5,r5
  80d280:	10bfffc4 	addi	r2,r2,-1
  80d284:	18c7883a 	add	r3,r3,r3
  80d288:	293ffa36 	bltu	r5,r4,80d274 <__alt_mem_onchip_mem+0xff78d274>
  80d28c:	18000826 	beq	r3,zero,80d2b0 <__udivsi3+0x54>
  80d290:	0005883a 	mov	r2,zero
  80d294:	31400236 	bltu	r6,r5,80d2a0 <__udivsi3+0x44>
  80d298:	314dc83a 	sub	r6,r6,r5
  80d29c:	10c4b03a 	or	r2,r2,r3
  80d2a0:	1806d07a 	srli	r3,r3,1
  80d2a4:	280ad07a 	srli	r5,r5,1
  80d2a8:	183ffa1e 	bne	r3,zero,80d294 <__alt_mem_onchip_mem+0xff78d294>
  80d2ac:	f800283a 	ret
  80d2b0:	0005883a 	mov	r2,zero
  80d2b4:	f800283a 	ret
  80d2b8:	00c00044 	movi	r3,1
  80d2bc:	003ff406 	br	80d290 <__alt_mem_onchip_mem+0xff78d290>

0080d2c0 <__umodsi3>:
  80d2c0:	2005883a 	mov	r2,r4
  80d2c4:	2900122e 	bgeu	r5,r4,80d310 <__umodsi3+0x50>
  80d2c8:	28001116 	blt	r5,zero,80d310 <__umodsi3+0x50>
  80d2cc:	01800804 	movi	r6,32
  80d2d0:	00c00044 	movi	r3,1
  80d2d4:	00000206 	br	80d2e0 <__umodsi3+0x20>
  80d2d8:	30000c26 	beq	r6,zero,80d30c <__umodsi3+0x4c>
  80d2dc:	28000516 	blt	r5,zero,80d2f4 <__umodsi3+0x34>
  80d2e0:	294b883a 	add	r5,r5,r5
  80d2e4:	31bfffc4 	addi	r6,r6,-1
  80d2e8:	18c7883a 	add	r3,r3,r3
  80d2ec:	293ffa36 	bltu	r5,r4,80d2d8 <__alt_mem_onchip_mem+0xff78d2d8>
  80d2f0:	18000626 	beq	r3,zero,80d30c <__umodsi3+0x4c>
  80d2f4:	1806d07a 	srli	r3,r3,1
  80d2f8:	11400136 	bltu	r2,r5,80d300 <__umodsi3+0x40>
  80d2fc:	1145c83a 	sub	r2,r2,r5
  80d300:	280ad07a 	srli	r5,r5,1
  80d304:	183ffb1e 	bne	r3,zero,80d2f4 <__alt_mem_onchip_mem+0xff78d2f4>
  80d308:	f800283a 	ret
  80d30c:	f800283a 	ret
  80d310:	00c00044 	movi	r3,1
  80d314:	003ff706 	br	80d2f4 <__alt_mem_onchip_mem+0xff78d2f4>

0080d318 <__adddf3>:
  80d318:	02c00434 	movhi	r11,16
  80d31c:	5affffc4 	addi	r11,r11,-1
  80d320:	2806d7fa 	srli	r3,r5,31
  80d324:	2ad4703a 	and	r10,r5,r11
  80d328:	3ad2703a 	and	r9,r7,r11
  80d32c:	3804d53a 	srli	r2,r7,20
  80d330:	3018d77a 	srli	r12,r6,29
  80d334:	280ad53a 	srli	r5,r5,20
  80d338:	501490fa 	slli	r10,r10,3
  80d33c:	2010d77a 	srli	r8,r4,29
  80d340:	481290fa 	slli	r9,r9,3
  80d344:	380ed7fa 	srli	r7,r7,31
  80d348:	defffb04 	addi	sp,sp,-20
  80d34c:	dc800215 	stw	r18,8(sp)
  80d350:	dc400115 	stw	r17,4(sp)
  80d354:	dc000015 	stw	r16,0(sp)
  80d358:	dfc00415 	stw	ra,16(sp)
  80d35c:	dcc00315 	stw	r19,12(sp)
  80d360:	1c803fcc 	andi	r18,r3,255
  80d364:	2c01ffcc 	andi	r16,r5,2047
  80d368:	5210b03a 	or	r8,r10,r8
  80d36c:	202290fa 	slli	r17,r4,3
  80d370:	1081ffcc 	andi	r2,r2,2047
  80d374:	4b12b03a 	or	r9,r9,r12
  80d378:	300c90fa 	slli	r6,r6,3
  80d37c:	91c07526 	beq	r18,r7,80d554 <__adddf3+0x23c>
  80d380:	8087c83a 	sub	r3,r16,r2
  80d384:	00c0ab0e 	bge	zero,r3,80d634 <__adddf3+0x31c>
  80d388:	10002a1e 	bne	r2,zero,80d434 <__adddf3+0x11c>
  80d38c:	4984b03a 	or	r2,r9,r6
  80d390:	1000961e 	bne	r2,zero,80d5ec <__adddf3+0x2d4>
  80d394:	888001cc 	andi	r2,r17,7
  80d398:	10000726 	beq	r2,zero,80d3b8 <__adddf3+0xa0>
  80d39c:	888003cc 	andi	r2,r17,15
  80d3a0:	00c00104 	movi	r3,4
  80d3a4:	10c00426 	beq	r2,r3,80d3b8 <__adddf3+0xa0>
  80d3a8:	88c7883a 	add	r3,r17,r3
  80d3ac:	1c63803a 	cmpltu	r17,r3,r17
  80d3b0:	4451883a 	add	r8,r8,r17
  80d3b4:	1823883a 	mov	r17,r3
  80d3b8:	4080202c 	andhi	r2,r8,128
  80d3bc:	10005926 	beq	r2,zero,80d524 <__adddf3+0x20c>
  80d3c0:	84000044 	addi	r16,r16,1
  80d3c4:	0081ffc4 	movi	r2,2047
  80d3c8:	8080ba26 	beq	r16,r2,80d6b4 <__adddf3+0x39c>
  80d3cc:	00bfe034 	movhi	r2,65408
  80d3d0:	10bfffc4 	addi	r2,r2,-1
  80d3d4:	4090703a 	and	r8,r8,r2
  80d3d8:	4004977a 	slli	r2,r8,29
  80d3dc:	4010927a 	slli	r8,r8,9
  80d3e0:	8822d0fa 	srli	r17,r17,3
  80d3e4:	8401ffcc 	andi	r16,r16,2047
  80d3e8:	4010d33a 	srli	r8,r8,12
  80d3ec:	9007883a 	mov	r3,r18
  80d3f0:	1444b03a 	or	r2,r2,r17
  80d3f4:	8401ffcc 	andi	r16,r16,2047
  80d3f8:	8020953a 	slli	r16,r16,20
  80d3fc:	18c03fcc 	andi	r3,r3,255
  80d400:	01000434 	movhi	r4,16
  80d404:	213fffc4 	addi	r4,r4,-1
  80d408:	180697fa 	slli	r3,r3,31
  80d40c:	4110703a 	and	r8,r8,r4
  80d410:	4410b03a 	or	r8,r8,r16
  80d414:	40c6b03a 	or	r3,r8,r3
  80d418:	dfc00417 	ldw	ra,16(sp)
  80d41c:	dcc00317 	ldw	r19,12(sp)
  80d420:	dc800217 	ldw	r18,8(sp)
  80d424:	dc400117 	ldw	r17,4(sp)
  80d428:	dc000017 	ldw	r16,0(sp)
  80d42c:	dec00504 	addi	sp,sp,20
  80d430:	f800283a 	ret
  80d434:	0081ffc4 	movi	r2,2047
  80d438:	80bfd626 	beq	r16,r2,80d394 <__alt_mem_onchip_mem+0xff78d394>
  80d43c:	4a402034 	orhi	r9,r9,128
  80d440:	00800e04 	movi	r2,56
  80d444:	10c09f16 	blt	r2,r3,80d6c4 <__adddf3+0x3ac>
  80d448:	008007c4 	movi	r2,31
  80d44c:	10c0c216 	blt	r2,r3,80d758 <__adddf3+0x440>
  80d450:	00800804 	movi	r2,32
  80d454:	10c5c83a 	sub	r2,r2,r3
  80d458:	488a983a 	sll	r5,r9,r2
  80d45c:	30c8d83a 	srl	r4,r6,r3
  80d460:	3084983a 	sll	r2,r6,r2
  80d464:	48c6d83a 	srl	r3,r9,r3
  80d468:	290cb03a 	or	r6,r5,r4
  80d46c:	1004c03a 	cmpne	r2,r2,zero
  80d470:	308cb03a 	or	r6,r6,r2
  80d474:	898dc83a 	sub	r6,r17,r6
  80d478:	89a3803a 	cmpltu	r17,r17,r6
  80d47c:	40d1c83a 	sub	r8,r8,r3
  80d480:	4451c83a 	sub	r8,r8,r17
  80d484:	3023883a 	mov	r17,r6
  80d488:	4080202c 	andhi	r2,r8,128
  80d48c:	10002326 	beq	r2,zero,80d51c <__adddf3+0x204>
  80d490:	04c02034 	movhi	r19,128
  80d494:	9cffffc4 	addi	r19,r19,-1
  80d498:	44e6703a 	and	r19,r8,r19
  80d49c:	98007626 	beq	r19,zero,80d678 <__adddf3+0x360>
  80d4a0:	9809883a 	mov	r4,r19
  80d4a4:	080f91c0 	call	80f91c <__clzsi2>
  80d4a8:	10fffe04 	addi	r3,r2,-8
  80d4ac:	010007c4 	movi	r4,31
  80d4b0:	20c07716 	blt	r4,r3,80d690 <__adddf3+0x378>
  80d4b4:	00800804 	movi	r2,32
  80d4b8:	10c5c83a 	sub	r2,r2,r3
  80d4bc:	8884d83a 	srl	r2,r17,r2
  80d4c0:	98d0983a 	sll	r8,r19,r3
  80d4c4:	88e2983a 	sll	r17,r17,r3
  80d4c8:	1204b03a 	or	r2,r2,r8
  80d4cc:	1c007416 	blt	r3,r16,80d6a0 <__adddf3+0x388>
  80d4d0:	1c21c83a 	sub	r16,r3,r16
  80d4d4:	82000044 	addi	r8,r16,1
  80d4d8:	00c007c4 	movi	r3,31
  80d4dc:	1a009116 	blt	r3,r8,80d724 <__adddf3+0x40c>
  80d4e0:	00c00804 	movi	r3,32
  80d4e4:	1a07c83a 	sub	r3,r3,r8
  80d4e8:	8a08d83a 	srl	r4,r17,r8
  80d4ec:	88e2983a 	sll	r17,r17,r3
  80d4f0:	10c6983a 	sll	r3,r2,r3
  80d4f4:	1210d83a 	srl	r8,r2,r8
  80d4f8:	8804c03a 	cmpne	r2,r17,zero
  80d4fc:	1906b03a 	or	r3,r3,r4
  80d500:	18a2b03a 	or	r17,r3,r2
  80d504:	0021883a 	mov	r16,zero
  80d508:	003fa206 	br	80d394 <__alt_mem_onchip_mem+0xff78d394>
  80d50c:	1890b03a 	or	r8,r3,r2
  80d510:	40017d26 	beq	r8,zero,80db08 <__adddf3+0x7f0>
  80d514:	1011883a 	mov	r8,r2
  80d518:	1823883a 	mov	r17,r3
  80d51c:	888001cc 	andi	r2,r17,7
  80d520:	103f9e1e 	bne	r2,zero,80d39c <__alt_mem_onchip_mem+0xff78d39c>
  80d524:	4004977a 	slli	r2,r8,29
  80d528:	8822d0fa 	srli	r17,r17,3
  80d52c:	4010d0fa 	srli	r8,r8,3
  80d530:	9007883a 	mov	r3,r18
  80d534:	1444b03a 	or	r2,r2,r17
  80d538:	0101ffc4 	movi	r4,2047
  80d53c:	81002426 	beq	r16,r4,80d5d0 <__adddf3+0x2b8>
  80d540:	8120703a 	and	r16,r16,r4
  80d544:	01000434 	movhi	r4,16
  80d548:	213fffc4 	addi	r4,r4,-1
  80d54c:	4110703a 	and	r8,r8,r4
  80d550:	003fa806 	br	80d3f4 <__alt_mem_onchip_mem+0xff78d3f4>
  80d554:	8089c83a 	sub	r4,r16,r2
  80d558:	01005e0e 	bge	zero,r4,80d6d4 <__adddf3+0x3bc>
  80d55c:	10002b26 	beq	r2,zero,80d60c <__adddf3+0x2f4>
  80d560:	0081ffc4 	movi	r2,2047
  80d564:	80bf8b26 	beq	r16,r2,80d394 <__alt_mem_onchip_mem+0xff78d394>
  80d568:	4a402034 	orhi	r9,r9,128
  80d56c:	00800e04 	movi	r2,56
  80d570:	1100a40e 	bge	r2,r4,80d804 <__adddf3+0x4ec>
  80d574:	498cb03a 	or	r6,r9,r6
  80d578:	300ac03a 	cmpne	r5,r6,zero
  80d57c:	0013883a 	mov	r9,zero
  80d580:	2c4b883a 	add	r5,r5,r17
  80d584:	2c63803a 	cmpltu	r17,r5,r17
  80d588:	4a11883a 	add	r8,r9,r8
  80d58c:	8a11883a 	add	r8,r17,r8
  80d590:	2823883a 	mov	r17,r5
  80d594:	4080202c 	andhi	r2,r8,128
  80d598:	103fe026 	beq	r2,zero,80d51c <__alt_mem_onchip_mem+0xff78d51c>
  80d59c:	84000044 	addi	r16,r16,1
  80d5a0:	0081ffc4 	movi	r2,2047
  80d5a4:	8080d226 	beq	r16,r2,80d8f0 <__adddf3+0x5d8>
  80d5a8:	00bfe034 	movhi	r2,65408
  80d5ac:	10bfffc4 	addi	r2,r2,-1
  80d5b0:	4090703a 	and	r8,r8,r2
  80d5b4:	880ad07a 	srli	r5,r17,1
  80d5b8:	400897fa 	slli	r4,r8,31
  80d5bc:	88c0004c 	andi	r3,r17,1
  80d5c0:	28e2b03a 	or	r17,r5,r3
  80d5c4:	4010d07a 	srli	r8,r8,1
  80d5c8:	2462b03a 	or	r17,r4,r17
  80d5cc:	003f7106 	br	80d394 <__alt_mem_onchip_mem+0xff78d394>
  80d5d0:	4088b03a 	or	r4,r8,r2
  80d5d4:	20014526 	beq	r4,zero,80daec <__adddf3+0x7d4>
  80d5d8:	01000434 	movhi	r4,16
  80d5dc:	42000234 	orhi	r8,r8,8
  80d5e0:	213fffc4 	addi	r4,r4,-1
  80d5e4:	4110703a 	and	r8,r8,r4
  80d5e8:	003f8206 	br	80d3f4 <__alt_mem_onchip_mem+0xff78d3f4>
  80d5ec:	18ffffc4 	addi	r3,r3,-1
  80d5f0:	1800491e 	bne	r3,zero,80d718 <__adddf3+0x400>
  80d5f4:	898bc83a 	sub	r5,r17,r6
  80d5f8:	8963803a 	cmpltu	r17,r17,r5
  80d5fc:	4251c83a 	sub	r8,r8,r9
  80d600:	4451c83a 	sub	r8,r8,r17
  80d604:	2823883a 	mov	r17,r5
  80d608:	003f9f06 	br	80d488 <__alt_mem_onchip_mem+0xff78d488>
  80d60c:	4984b03a 	or	r2,r9,r6
  80d610:	103f6026 	beq	r2,zero,80d394 <__alt_mem_onchip_mem+0xff78d394>
  80d614:	213fffc4 	addi	r4,r4,-1
  80d618:	2000931e 	bne	r4,zero,80d868 <__adddf3+0x550>
  80d61c:	898d883a 	add	r6,r17,r6
  80d620:	3463803a 	cmpltu	r17,r6,r17
  80d624:	4251883a 	add	r8,r8,r9
  80d628:	8a11883a 	add	r8,r17,r8
  80d62c:	3023883a 	mov	r17,r6
  80d630:	003fd806 	br	80d594 <__alt_mem_onchip_mem+0xff78d594>
  80d634:	1800541e 	bne	r3,zero,80d788 <__adddf3+0x470>
  80d638:	80800044 	addi	r2,r16,1
  80d63c:	1081ffcc 	andi	r2,r2,2047
  80d640:	00c00044 	movi	r3,1
  80d644:	1880a00e 	bge	r3,r2,80d8c8 <__adddf3+0x5b0>
  80d648:	8989c83a 	sub	r4,r17,r6
  80d64c:	8905803a 	cmpltu	r2,r17,r4
  80d650:	4267c83a 	sub	r19,r8,r9
  80d654:	98a7c83a 	sub	r19,r19,r2
  80d658:	9880202c 	andhi	r2,r19,128
  80d65c:	10006326 	beq	r2,zero,80d7ec <__adddf3+0x4d4>
  80d660:	3463c83a 	sub	r17,r6,r17
  80d664:	4a07c83a 	sub	r3,r9,r8
  80d668:	344d803a 	cmpltu	r6,r6,r17
  80d66c:	19a7c83a 	sub	r19,r3,r6
  80d670:	3825883a 	mov	r18,r7
  80d674:	983f8a1e 	bne	r19,zero,80d4a0 <__alt_mem_onchip_mem+0xff78d4a0>
  80d678:	8809883a 	mov	r4,r17
  80d67c:	080f91c0 	call	80f91c <__clzsi2>
  80d680:	10800804 	addi	r2,r2,32
  80d684:	10fffe04 	addi	r3,r2,-8
  80d688:	010007c4 	movi	r4,31
  80d68c:	20ff890e 	bge	r4,r3,80d4b4 <__alt_mem_onchip_mem+0xff78d4b4>
  80d690:	10bff604 	addi	r2,r2,-40
  80d694:	8884983a 	sll	r2,r17,r2
  80d698:	0023883a 	mov	r17,zero
  80d69c:	1c3f8c0e 	bge	r3,r16,80d4d0 <__alt_mem_onchip_mem+0xff78d4d0>
  80d6a0:	023fe034 	movhi	r8,65408
  80d6a4:	423fffc4 	addi	r8,r8,-1
  80d6a8:	80e1c83a 	sub	r16,r16,r3
  80d6ac:	1210703a 	and	r8,r2,r8
  80d6b0:	003f3806 	br	80d394 <__alt_mem_onchip_mem+0xff78d394>
  80d6b4:	9007883a 	mov	r3,r18
  80d6b8:	0011883a 	mov	r8,zero
  80d6bc:	0005883a 	mov	r2,zero
  80d6c0:	003f4c06 	br	80d3f4 <__alt_mem_onchip_mem+0xff78d3f4>
  80d6c4:	498cb03a 	or	r6,r9,r6
  80d6c8:	300cc03a 	cmpne	r6,r6,zero
  80d6cc:	0007883a 	mov	r3,zero
  80d6d0:	003f6806 	br	80d474 <__alt_mem_onchip_mem+0xff78d474>
  80d6d4:	20009c1e 	bne	r4,zero,80d948 <__adddf3+0x630>
  80d6d8:	80800044 	addi	r2,r16,1
  80d6dc:	1141ffcc 	andi	r5,r2,2047
  80d6e0:	01000044 	movi	r4,1
  80d6e4:	2140670e 	bge	r4,r5,80d884 <__adddf3+0x56c>
  80d6e8:	0101ffc4 	movi	r4,2047
  80d6ec:	11007f26 	beq	r2,r4,80d8ec <__adddf3+0x5d4>
  80d6f0:	898d883a 	add	r6,r17,r6
  80d6f4:	4247883a 	add	r3,r8,r9
  80d6f8:	3451803a 	cmpltu	r8,r6,r17
  80d6fc:	40d1883a 	add	r8,r8,r3
  80d700:	402297fa 	slli	r17,r8,31
  80d704:	300cd07a 	srli	r6,r6,1
  80d708:	4010d07a 	srli	r8,r8,1
  80d70c:	1021883a 	mov	r16,r2
  80d710:	89a2b03a 	or	r17,r17,r6
  80d714:	003f1f06 	br	80d394 <__alt_mem_onchip_mem+0xff78d394>
  80d718:	0081ffc4 	movi	r2,2047
  80d71c:	80bf481e 	bne	r16,r2,80d440 <__alt_mem_onchip_mem+0xff78d440>
  80d720:	003f1c06 	br	80d394 <__alt_mem_onchip_mem+0xff78d394>
  80d724:	843ff844 	addi	r16,r16,-31
  80d728:	01000804 	movi	r4,32
  80d72c:	1406d83a 	srl	r3,r2,r16
  80d730:	41005026 	beq	r8,r4,80d874 <__adddf3+0x55c>
  80d734:	01001004 	movi	r4,64
  80d738:	2211c83a 	sub	r8,r4,r8
  80d73c:	1204983a 	sll	r2,r2,r8
  80d740:	88a2b03a 	or	r17,r17,r2
  80d744:	8822c03a 	cmpne	r17,r17,zero
  80d748:	1c62b03a 	or	r17,r3,r17
  80d74c:	0011883a 	mov	r8,zero
  80d750:	0021883a 	mov	r16,zero
  80d754:	003f7106 	br	80d51c <__alt_mem_onchip_mem+0xff78d51c>
  80d758:	193ff804 	addi	r4,r3,-32
  80d75c:	00800804 	movi	r2,32
  80d760:	4908d83a 	srl	r4,r9,r4
  80d764:	18804526 	beq	r3,r2,80d87c <__adddf3+0x564>
  80d768:	00801004 	movi	r2,64
  80d76c:	10c5c83a 	sub	r2,r2,r3
  80d770:	4886983a 	sll	r3,r9,r2
  80d774:	198cb03a 	or	r6,r3,r6
  80d778:	300cc03a 	cmpne	r6,r6,zero
  80d77c:	218cb03a 	or	r6,r4,r6
  80d780:	0007883a 	mov	r3,zero
  80d784:	003f3b06 	br	80d474 <__alt_mem_onchip_mem+0xff78d474>
  80d788:	80002a26 	beq	r16,zero,80d834 <__adddf3+0x51c>
  80d78c:	0101ffc4 	movi	r4,2047
  80d790:	11006826 	beq	r2,r4,80d934 <__adddf3+0x61c>
  80d794:	00c7c83a 	sub	r3,zero,r3
  80d798:	42002034 	orhi	r8,r8,128
  80d79c:	01000e04 	movi	r4,56
  80d7a0:	20c07c16 	blt	r4,r3,80d994 <__adddf3+0x67c>
  80d7a4:	010007c4 	movi	r4,31
  80d7a8:	20c0da16 	blt	r4,r3,80db14 <__adddf3+0x7fc>
  80d7ac:	01000804 	movi	r4,32
  80d7b0:	20c9c83a 	sub	r4,r4,r3
  80d7b4:	4114983a 	sll	r10,r8,r4
  80d7b8:	88cad83a 	srl	r5,r17,r3
  80d7bc:	8908983a 	sll	r4,r17,r4
  80d7c0:	40c6d83a 	srl	r3,r8,r3
  80d7c4:	5162b03a 	or	r17,r10,r5
  80d7c8:	2008c03a 	cmpne	r4,r4,zero
  80d7cc:	8922b03a 	or	r17,r17,r4
  80d7d0:	3463c83a 	sub	r17,r6,r17
  80d7d4:	48c7c83a 	sub	r3,r9,r3
  80d7d8:	344d803a 	cmpltu	r6,r6,r17
  80d7dc:	1991c83a 	sub	r8,r3,r6
  80d7e0:	1021883a 	mov	r16,r2
  80d7e4:	3825883a 	mov	r18,r7
  80d7e8:	003f2706 	br	80d488 <__alt_mem_onchip_mem+0xff78d488>
  80d7ec:	24d0b03a 	or	r8,r4,r19
  80d7f0:	40001b1e 	bne	r8,zero,80d860 <__adddf3+0x548>
  80d7f4:	0005883a 	mov	r2,zero
  80d7f8:	0007883a 	mov	r3,zero
  80d7fc:	0021883a 	mov	r16,zero
  80d800:	003f4d06 	br	80d538 <__alt_mem_onchip_mem+0xff78d538>
  80d804:	008007c4 	movi	r2,31
  80d808:	11003c16 	blt	r2,r4,80d8fc <__adddf3+0x5e4>
  80d80c:	00800804 	movi	r2,32
  80d810:	1105c83a 	sub	r2,r2,r4
  80d814:	488e983a 	sll	r7,r9,r2
  80d818:	310ad83a 	srl	r5,r6,r4
  80d81c:	3084983a 	sll	r2,r6,r2
  80d820:	4912d83a 	srl	r9,r9,r4
  80d824:	394ab03a 	or	r5,r7,r5
  80d828:	1004c03a 	cmpne	r2,r2,zero
  80d82c:	288ab03a 	or	r5,r5,r2
  80d830:	003f5306 	br	80d580 <__alt_mem_onchip_mem+0xff78d580>
  80d834:	4448b03a 	or	r4,r8,r17
  80d838:	20003e26 	beq	r4,zero,80d934 <__adddf3+0x61c>
  80d83c:	00c6303a 	nor	r3,zero,r3
  80d840:	18003a1e 	bne	r3,zero,80d92c <__adddf3+0x614>
  80d844:	3463c83a 	sub	r17,r6,r17
  80d848:	4a07c83a 	sub	r3,r9,r8
  80d84c:	344d803a 	cmpltu	r6,r6,r17
  80d850:	1991c83a 	sub	r8,r3,r6
  80d854:	1021883a 	mov	r16,r2
  80d858:	3825883a 	mov	r18,r7
  80d85c:	003f0a06 	br	80d488 <__alt_mem_onchip_mem+0xff78d488>
  80d860:	2023883a 	mov	r17,r4
  80d864:	003f0d06 	br	80d49c <__alt_mem_onchip_mem+0xff78d49c>
  80d868:	0081ffc4 	movi	r2,2047
  80d86c:	80bf3f1e 	bne	r16,r2,80d56c <__alt_mem_onchip_mem+0xff78d56c>
  80d870:	003ec806 	br	80d394 <__alt_mem_onchip_mem+0xff78d394>
  80d874:	0005883a 	mov	r2,zero
  80d878:	003fb106 	br	80d740 <__alt_mem_onchip_mem+0xff78d740>
  80d87c:	0007883a 	mov	r3,zero
  80d880:	003fbc06 	br	80d774 <__alt_mem_onchip_mem+0xff78d774>
  80d884:	4444b03a 	or	r2,r8,r17
  80d888:	8000871e 	bne	r16,zero,80daa8 <__adddf3+0x790>
  80d88c:	1000ba26 	beq	r2,zero,80db78 <__adddf3+0x860>
  80d890:	4984b03a 	or	r2,r9,r6
  80d894:	103ebf26 	beq	r2,zero,80d394 <__alt_mem_onchip_mem+0xff78d394>
  80d898:	8985883a 	add	r2,r17,r6
  80d89c:	4247883a 	add	r3,r8,r9
  80d8a0:	1451803a 	cmpltu	r8,r2,r17
  80d8a4:	40d1883a 	add	r8,r8,r3
  80d8a8:	40c0202c 	andhi	r3,r8,128
  80d8ac:	1023883a 	mov	r17,r2
  80d8b0:	183f1a26 	beq	r3,zero,80d51c <__alt_mem_onchip_mem+0xff78d51c>
  80d8b4:	00bfe034 	movhi	r2,65408
  80d8b8:	10bfffc4 	addi	r2,r2,-1
  80d8bc:	2021883a 	mov	r16,r4
  80d8c0:	4090703a 	and	r8,r8,r2
  80d8c4:	003eb306 	br	80d394 <__alt_mem_onchip_mem+0xff78d394>
  80d8c8:	4444b03a 	or	r2,r8,r17
  80d8cc:	8000291e 	bne	r16,zero,80d974 <__adddf3+0x65c>
  80d8d0:	10004b1e 	bne	r2,zero,80da00 <__adddf3+0x6e8>
  80d8d4:	4990b03a 	or	r8,r9,r6
  80d8d8:	40008b26 	beq	r8,zero,80db08 <__adddf3+0x7f0>
  80d8dc:	4811883a 	mov	r8,r9
  80d8e0:	3023883a 	mov	r17,r6
  80d8e4:	3825883a 	mov	r18,r7
  80d8e8:	003eaa06 	br	80d394 <__alt_mem_onchip_mem+0xff78d394>
  80d8ec:	1021883a 	mov	r16,r2
  80d8f0:	0011883a 	mov	r8,zero
  80d8f4:	0005883a 	mov	r2,zero
  80d8f8:	003f0f06 	br	80d538 <__alt_mem_onchip_mem+0xff78d538>
  80d8fc:	217ff804 	addi	r5,r4,-32
  80d900:	00800804 	movi	r2,32
  80d904:	494ad83a 	srl	r5,r9,r5
  80d908:	20807d26 	beq	r4,r2,80db00 <__adddf3+0x7e8>
  80d90c:	00801004 	movi	r2,64
  80d910:	1109c83a 	sub	r4,r2,r4
  80d914:	4912983a 	sll	r9,r9,r4
  80d918:	498cb03a 	or	r6,r9,r6
  80d91c:	300cc03a 	cmpne	r6,r6,zero
  80d920:	298ab03a 	or	r5,r5,r6
  80d924:	0013883a 	mov	r9,zero
  80d928:	003f1506 	br	80d580 <__alt_mem_onchip_mem+0xff78d580>
  80d92c:	0101ffc4 	movi	r4,2047
  80d930:	113f9a1e 	bne	r2,r4,80d79c <__alt_mem_onchip_mem+0xff78d79c>
  80d934:	4811883a 	mov	r8,r9
  80d938:	3023883a 	mov	r17,r6
  80d93c:	1021883a 	mov	r16,r2
  80d940:	3825883a 	mov	r18,r7
  80d944:	003e9306 	br	80d394 <__alt_mem_onchip_mem+0xff78d394>
  80d948:	8000161e 	bne	r16,zero,80d9a4 <__adddf3+0x68c>
  80d94c:	444ab03a 	or	r5,r8,r17
  80d950:	28005126 	beq	r5,zero,80da98 <__adddf3+0x780>
  80d954:	0108303a 	nor	r4,zero,r4
  80d958:	20004d1e 	bne	r4,zero,80da90 <__adddf3+0x778>
  80d95c:	89a3883a 	add	r17,r17,r6
  80d960:	4253883a 	add	r9,r8,r9
  80d964:	898d803a 	cmpltu	r6,r17,r6
  80d968:	3251883a 	add	r8,r6,r9
  80d96c:	1021883a 	mov	r16,r2
  80d970:	003f0806 	br	80d594 <__alt_mem_onchip_mem+0xff78d594>
  80d974:	1000301e 	bne	r2,zero,80da38 <__adddf3+0x720>
  80d978:	4984b03a 	or	r2,r9,r6
  80d97c:	10007126 	beq	r2,zero,80db44 <__adddf3+0x82c>
  80d980:	4811883a 	mov	r8,r9
  80d984:	3023883a 	mov	r17,r6
  80d988:	3825883a 	mov	r18,r7
  80d98c:	0401ffc4 	movi	r16,2047
  80d990:	003e8006 	br	80d394 <__alt_mem_onchip_mem+0xff78d394>
  80d994:	4462b03a 	or	r17,r8,r17
  80d998:	8822c03a 	cmpne	r17,r17,zero
  80d99c:	0007883a 	mov	r3,zero
  80d9a0:	003f8b06 	br	80d7d0 <__alt_mem_onchip_mem+0xff78d7d0>
  80d9a4:	0141ffc4 	movi	r5,2047
  80d9a8:	11403b26 	beq	r2,r5,80da98 <__adddf3+0x780>
  80d9ac:	0109c83a 	sub	r4,zero,r4
  80d9b0:	42002034 	orhi	r8,r8,128
  80d9b4:	01400e04 	movi	r5,56
  80d9b8:	29006716 	blt	r5,r4,80db58 <__adddf3+0x840>
  80d9bc:	014007c4 	movi	r5,31
  80d9c0:	29007016 	blt	r5,r4,80db84 <__adddf3+0x86c>
  80d9c4:	01400804 	movi	r5,32
  80d9c8:	290bc83a 	sub	r5,r5,r4
  80d9cc:	4154983a 	sll	r10,r8,r5
  80d9d0:	890ed83a 	srl	r7,r17,r4
  80d9d4:	894a983a 	sll	r5,r17,r5
  80d9d8:	4108d83a 	srl	r4,r8,r4
  80d9dc:	51e2b03a 	or	r17,r10,r7
  80d9e0:	280ac03a 	cmpne	r5,r5,zero
  80d9e4:	8962b03a 	or	r17,r17,r5
  80d9e8:	89a3883a 	add	r17,r17,r6
  80d9ec:	2253883a 	add	r9,r4,r9
  80d9f0:	898d803a 	cmpltu	r6,r17,r6
  80d9f4:	3251883a 	add	r8,r6,r9
  80d9f8:	1021883a 	mov	r16,r2
  80d9fc:	003ee506 	br	80d594 <__alt_mem_onchip_mem+0xff78d594>
  80da00:	4984b03a 	or	r2,r9,r6
  80da04:	103e6326 	beq	r2,zero,80d394 <__alt_mem_onchip_mem+0xff78d394>
  80da08:	8987c83a 	sub	r3,r17,r6
  80da0c:	88c9803a 	cmpltu	r4,r17,r3
  80da10:	4245c83a 	sub	r2,r8,r9
  80da14:	1105c83a 	sub	r2,r2,r4
  80da18:	1100202c 	andhi	r4,r2,128
  80da1c:	203ebb26 	beq	r4,zero,80d50c <__alt_mem_onchip_mem+0xff78d50c>
  80da20:	3463c83a 	sub	r17,r6,r17
  80da24:	4a07c83a 	sub	r3,r9,r8
  80da28:	344d803a 	cmpltu	r6,r6,r17
  80da2c:	1991c83a 	sub	r8,r3,r6
  80da30:	3825883a 	mov	r18,r7
  80da34:	003e5706 	br	80d394 <__alt_mem_onchip_mem+0xff78d394>
  80da38:	4984b03a 	or	r2,r9,r6
  80da3c:	10002e26 	beq	r2,zero,80daf8 <__adddf3+0x7e0>
  80da40:	4004d0fa 	srli	r2,r8,3
  80da44:	8822d0fa 	srli	r17,r17,3
  80da48:	4010977a 	slli	r8,r8,29
  80da4c:	10c0022c 	andhi	r3,r2,8
  80da50:	4462b03a 	or	r17,r8,r17
  80da54:	18000826 	beq	r3,zero,80da78 <__adddf3+0x760>
  80da58:	4808d0fa 	srli	r4,r9,3
  80da5c:	20c0022c 	andhi	r3,r4,8
  80da60:	1800051e 	bne	r3,zero,80da78 <__adddf3+0x760>
  80da64:	300cd0fa 	srli	r6,r6,3
  80da68:	4806977a 	slli	r3,r9,29
  80da6c:	2005883a 	mov	r2,r4
  80da70:	3825883a 	mov	r18,r7
  80da74:	19a2b03a 	or	r17,r3,r6
  80da78:	8810d77a 	srli	r8,r17,29
  80da7c:	100490fa 	slli	r2,r2,3
  80da80:	882290fa 	slli	r17,r17,3
  80da84:	0401ffc4 	movi	r16,2047
  80da88:	4090b03a 	or	r8,r8,r2
  80da8c:	003e4106 	br	80d394 <__alt_mem_onchip_mem+0xff78d394>
  80da90:	0141ffc4 	movi	r5,2047
  80da94:	117fc71e 	bne	r2,r5,80d9b4 <__alt_mem_onchip_mem+0xff78d9b4>
  80da98:	4811883a 	mov	r8,r9
  80da9c:	3023883a 	mov	r17,r6
  80daa0:	1021883a 	mov	r16,r2
  80daa4:	003e3b06 	br	80d394 <__alt_mem_onchip_mem+0xff78d394>
  80daa8:	10002f26 	beq	r2,zero,80db68 <__adddf3+0x850>
  80daac:	4984b03a 	or	r2,r9,r6
  80dab0:	10001126 	beq	r2,zero,80daf8 <__adddf3+0x7e0>
  80dab4:	4004d0fa 	srli	r2,r8,3
  80dab8:	8822d0fa 	srli	r17,r17,3
  80dabc:	4010977a 	slli	r8,r8,29
  80dac0:	10c0022c 	andhi	r3,r2,8
  80dac4:	4462b03a 	or	r17,r8,r17
  80dac8:	183feb26 	beq	r3,zero,80da78 <__alt_mem_onchip_mem+0xff78da78>
  80dacc:	4808d0fa 	srli	r4,r9,3
  80dad0:	20c0022c 	andhi	r3,r4,8
  80dad4:	183fe81e 	bne	r3,zero,80da78 <__alt_mem_onchip_mem+0xff78da78>
  80dad8:	300cd0fa 	srli	r6,r6,3
  80dadc:	4806977a 	slli	r3,r9,29
  80dae0:	2005883a 	mov	r2,r4
  80dae4:	19a2b03a 	or	r17,r3,r6
  80dae8:	003fe306 	br	80da78 <__alt_mem_onchip_mem+0xff78da78>
  80daec:	0011883a 	mov	r8,zero
  80daf0:	0005883a 	mov	r2,zero
  80daf4:	003e3f06 	br	80d3f4 <__alt_mem_onchip_mem+0xff78d3f4>
  80daf8:	0401ffc4 	movi	r16,2047
  80dafc:	003e2506 	br	80d394 <__alt_mem_onchip_mem+0xff78d394>
  80db00:	0013883a 	mov	r9,zero
  80db04:	003f8406 	br	80d918 <__alt_mem_onchip_mem+0xff78d918>
  80db08:	0005883a 	mov	r2,zero
  80db0c:	0007883a 	mov	r3,zero
  80db10:	003e8906 	br	80d538 <__alt_mem_onchip_mem+0xff78d538>
  80db14:	197ff804 	addi	r5,r3,-32
  80db18:	01000804 	movi	r4,32
  80db1c:	414ad83a 	srl	r5,r8,r5
  80db20:	19002426 	beq	r3,r4,80dbb4 <__adddf3+0x89c>
  80db24:	01001004 	movi	r4,64
  80db28:	20c7c83a 	sub	r3,r4,r3
  80db2c:	40c6983a 	sll	r3,r8,r3
  80db30:	1c46b03a 	or	r3,r3,r17
  80db34:	1806c03a 	cmpne	r3,r3,zero
  80db38:	28e2b03a 	or	r17,r5,r3
  80db3c:	0007883a 	mov	r3,zero
  80db40:	003f2306 	br	80d7d0 <__alt_mem_onchip_mem+0xff78d7d0>
  80db44:	0007883a 	mov	r3,zero
  80db48:	5811883a 	mov	r8,r11
  80db4c:	00bfffc4 	movi	r2,-1
  80db50:	0401ffc4 	movi	r16,2047
  80db54:	003e7806 	br	80d538 <__alt_mem_onchip_mem+0xff78d538>
  80db58:	4462b03a 	or	r17,r8,r17
  80db5c:	8822c03a 	cmpne	r17,r17,zero
  80db60:	0009883a 	mov	r4,zero
  80db64:	003fa006 	br	80d9e8 <__alt_mem_onchip_mem+0xff78d9e8>
  80db68:	4811883a 	mov	r8,r9
  80db6c:	3023883a 	mov	r17,r6
  80db70:	0401ffc4 	movi	r16,2047
  80db74:	003e0706 	br	80d394 <__alt_mem_onchip_mem+0xff78d394>
  80db78:	4811883a 	mov	r8,r9
  80db7c:	3023883a 	mov	r17,r6
  80db80:	003e0406 	br	80d394 <__alt_mem_onchip_mem+0xff78d394>
  80db84:	21fff804 	addi	r7,r4,-32
  80db88:	01400804 	movi	r5,32
  80db8c:	41ced83a 	srl	r7,r8,r7
  80db90:	21400a26 	beq	r4,r5,80dbbc <__adddf3+0x8a4>
  80db94:	01401004 	movi	r5,64
  80db98:	2909c83a 	sub	r4,r5,r4
  80db9c:	4108983a 	sll	r4,r8,r4
  80dba0:	2448b03a 	or	r4,r4,r17
  80dba4:	2008c03a 	cmpne	r4,r4,zero
  80dba8:	3922b03a 	or	r17,r7,r4
  80dbac:	0009883a 	mov	r4,zero
  80dbb0:	003f8d06 	br	80d9e8 <__alt_mem_onchip_mem+0xff78d9e8>
  80dbb4:	0007883a 	mov	r3,zero
  80dbb8:	003fdd06 	br	80db30 <__alt_mem_onchip_mem+0xff78db30>
  80dbbc:	0009883a 	mov	r4,zero
  80dbc0:	003ff706 	br	80dba0 <__alt_mem_onchip_mem+0xff78dba0>

0080dbc4 <__divdf3>:
  80dbc4:	defff204 	addi	sp,sp,-56
  80dbc8:	dd400915 	stw	r21,36(sp)
  80dbcc:	282ad53a 	srli	r21,r5,20
  80dbd0:	dd000815 	stw	r20,32(sp)
  80dbd4:	2828d7fa 	srli	r20,r5,31
  80dbd8:	dc000415 	stw	r16,16(sp)
  80dbdc:	04000434 	movhi	r16,16
  80dbe0:	df000c15 	stw	fp,48(sp)
  80dbe4:	843fffc4 	addi	r16,r16,-1
  80dbe8:	dfc00d15 	stw	ra,52(sp)
  80dbec:	ddc00b15 	stw	r23,44(sp)
  80dbf0:	dd800a15 	stw	r22,40(sp)
  80dbf4:	dcc00715 	stw	r19,28(sp)
  80dbf8:	dc800615 	stw	r18,24(sp)
  80dbfc:	dc400515 	stw	r17,20(sp)
  80dc00:	ad41ffcc 	andi	r21,r21,2047
  80dc04:	2c20703a 	and	r16,r5,r16
  80dc08:	a7003fcc 	andi	fp,r20,255
  80dc0c:	a8006126 	beq	r21,zero,80dd94 <__divdf3+0x1d0>
  80dc10:	0081ffc4 	movi	r2,2047
  80dc14:	2025883a 	mov	r18,r4
  80dc18:	a8803726 	beq	r21,r2,80dcf8 <__divdf3+0x134>
  80dc1c:	80800434 	orhi	r2,r16,16
  80dc20:	100490fa 	slli	r2,r2,3
  80dc24:	2020d77a 	srli	r16,r4,29
  80dc28:	202490fa 	slli	r18,r4,3
  80dc2c:	ad7f0044 	addi	r21,r21,-1023
  80dc30:	80a0b03a 	or	r16,r16,r2
  80dc34:	0027883a 	mov	r19,zero
  80dc38:	0013883a 	mov	r9,zero
  80dc3c:	3804d53a 	srli	r2,r7,20
  80dc40:	382cd7fa 	srli	r22,r7,31
  80dc44:	04400434 	movhi	r17,16
  80dc48:	8c7fffc4 	addi	r17,r17,-1
  80dc4c:	1081ffcc 	andi	r2,r2,2047
  80dc50:	3011883a 	mov	r8,r6
  80dc54:	3c62703a 	and	r17,r7,r17
  80dc58:	b5c03fcc 	andi	r23,r22,255
  80dc5c:	10006c26 	beq	r2,zero,80de10 <__divdf3+0x24c>
  80dc60:	00c1ffc4 	movi	r3,2047
  80dc64:	10c06426 	beq	r2,r3,80ddf8 <__divdf3+0x234>
  80dc68:	88c00434 	orhi	r3,r17,16
  80dc6c:	180690fa 	slli	r3,r3,3
  80dc70:	3022d77a 	srli	r17,r6,29
  80dc74:	301090fa 	slli	r8,r6,3
  80dc78:	10bf0044 	addi	r2,r2,-1023
  80dc7c:	88e2b03a 	or	r17,r17,r3
  80dc80:	000f883a 	mov	r7,zero
  80dc84:	a58cf03a 	xor	r6,r20,r22
  80dc88:	3cc8b03a 	or	r4,r7,r19
  80dc8c:	a8abc83a 	sub	r21,r21,r2
  80dc90:	008003c4 	movi	r2,15
  80dc94:	3007883a 	mov	r3,r6
  80dc98:	34c03fcc 	andi	r19,r6,255
  80dc9c:	11009036 	bltu	r2,r4,80dee0 <__divdf3+0x31c>
  80dca0:	200890ba 	slli	r4,r4,2
  80dca4:	00802074 	movhi	r2,129
  80dca8:	10b72e04 	addi	r2,r2,-9032
  80dcac:	2089883a 	add	r4,r4,r2
  80dcb0:	20800017 	ldw	r2,0(r4)
  80dcb4:	1000683a 	jmp	r2
  80dcb8:	0080dee0 	cmpeqi	r2,zero,891
  80dcbc:	0080dd30 	cmpltui	r2,zero,884
  80dcc0:	0080ded0 	cmplti	r2,zero,891
  80dcc4:	0080dd24 	muli	r2,zero,884
  80dcc8:	0080ded0 	cmplti	r2,zero,891
  80dccc:	0080dea4 	muli	r2,zero,890
  80dcd0:	0080ded0 	cmplti	r2,zero,891
  80dcd4:	0080dd24 	muli	r2,zero,884
  80dcd8:	0080dd30 	cmpltui	r2,zero,884
  80dcdc:	0080dd30 	cmpltui	r2,zero,884
  80dce0:	0080dea4 	muli	r2,zero,890
  80dce4:	0080dd24 	muli	r2,zero,884
  80dce8:	0080dd14 	movui	r2,884
  80dcec:	0080dd14 	movui	r2,884
  80dcf0:	0080dd14 	movui	r2,884
  80dcf4:	0080e1c4 	movi	r2,903
  80dcf8:	2404b03a 	or	r2,r4,r16
  80dcfc:	1000661e 	bne	r2,zero,80de98 <__divdf3+0x2d4>
  80dd00:	04c00204 	movi	r19,8
  80dd04:	0021883a 	mov	r16,zero
  80dd08:	0025883a 	mov	r18,zero
  80dd0c:	02400084 	movi	r9,2
  80dd10:	003fca06 	br	80dc3c <__alt_mem_onchip_mem+0xff78dc3c>
  80dd14:	8023883a 	mov	r17,r16
  80dd18:	9011883a 	mov	r8,r18
  80dd1c:	e02f883a 	mov	r23,fp
  80dd20:	480f883a 	mov	r7,r9
  80dd24:	00800084 	movi	r2,2
  80dd28:	3881311e 	bne	r7,r2,80e1f0 <__divdf3+0x62c>
  80dd2c:	b827883a 	mov	r19,r23
  80dd30:	98c0004c 	andi	r3,r19,1
  80dd34:	0081ffc4 	movi	r2,2047
  80dd38:	000b883a 	mov	r5,zero
  80dd3c:	0025883a 	mov	r18,zero
  80dd40:	1004953a 	slli	r2,r2,20
  80dd44:	18c03fcc 	andi	r3,r3,255
  80dd48:	04400434 	movhi	r17,16
  80dd4c:	8c7fffc4 	addi	r17,r17,-1
  80dd50:	180697fa 	slli	r3,r3,31
  80dd54:	2c4a703a 	and	r5,r5,r17
  80dd58:	288ab03a 	or	r5,r5,r2
  80dd5c:	28c6b03a 	or	r3,r5,r3
  80dd60:	9005883a 	mov	r2,r18
  80dd64:	dfc00d17 	ldw	ra,52(sp)
  80dd68:	df000c17 	ldw	fp,48(sp)
  80dd6c:	ddc00b17 	ldw	r23,44(sp)
  80dd70:	dd800a17 	ldw	r22,40(sp)
  80dd74:	dd400917 	ldw	r21,36(sp)
  80dd78:	dd000817 	ldw	r20,32(sp)
  80dd7c:	dcc00717 	ldw	r19,28(sp)
  80dd80:	dc800617 	ldw	r18,24(sp)
  80dd84:	dc400517 	ldw	r17,20(sp)
  80dd88:	dc000417 	ldw	r16,16(sp)
  80dd8c:	dec00e04 	addi	sp,sp,56
  80dd90:	f800283a 	ret
  80dd94:	2404b03a 	or	r2,r4,r16
  80dd98:	2027883a 	mov	r19,r4
  80dd9c:	10003926 	beq	r2,zero,80de84 <__divdf3+0x2c0>
  80dda0:	80012e26 	beq	r16,zero,80e25c <__divdf3+0x698>
  80dda4:	8009883a 	mov	r4,r16
  80dda8:	d9800315 	stw	r6,12(sp)
  80ddac:	d9c00215 	stw	r7,8(sp)
  80ddb0:	080f91c0 	call	80f91c <__clzsi2>
  80ddb4:	d9800317 	ldw	r6,12(sp)
  80ddb8:	d9c00217 	ldw	r7,8(sp)
  80ddbc:	113ffd44 	addi	r4,r2,-11
  80ddc0:	00c00704 	movi	r3,28
  80ddc4:	19012116 	blt	r3,r4,80e24c <__divdf3+0x688>
  80ddc8:	00c00744 	movi	r3,29
  80ddcc:	147ffe04 	addi	r17,r2,-8
  80ddd0:	1907c83a 	sub	r3,r3,r4
  80ddd4:	8460983a 	sll	r16,r16,r17
  80ddd8:	98c6d83a 	srl	r3,r19,r3
  80dddc:	9c64983a 	sll	r18,r19,r17
  80dde0:	1c20b03a 	or	r16,r3,r16
  80dde4:	1080fcc4 	addi	r2,r2,1011
  80dde8:	00abc83a 	sub	r21,zero,r2
  80ddec:	0027883a 	mov	r19,zero
  80ddf0:	0013883a 	mov	r9,zero
  80ddf4:	003f9106 	br	80dc3c <__alt_mem_onchip_mem+0xff78dc3c>
  80ddf8:	3446b03a 	or	r3,r6,r17
  80ddfc:	18001f1e 	bne	r3,zero,80de7c <__divdf3+0x2b8>
  80de00:	0023883a 	mov	r17,zero
  80de04:	0011883a 	mov	r8,zero
  80de08:	01c00084 	movi	r7,2
  80de0c:	003f9d06 	br	80dc84 <__alt_mem_onchip_mem+0xff78dc84>
  80de10:	3446b03a 	or	r3,r6,r17
  80de14:	18001526 	beq	r3,zero,80de6c <__divdf3+0x2a8>
  80de18:	88011b26 	beq	r17,zero,80e288 <__divdf3+0x6c4>
  80de1c:	8809883a 	mov	r4,r17
  80de20:	d9800315 	stw	r6,12(sp)
  80de24:	da400115 	stw	r9,4(sp)
  80de28:	080f91c0 	call	80f91c <__clzsi2>
  80de2c:	d9800317 	ldw	r6,12(sp)
  80de30:	da400117 	ldw	r9,4(sp)
  80de34:	113ffd44 	addi	r4,r2,-11
  80de38:	00c00704 	movi	r3,28
  80de3c:	19010e16 	blt	r3,r4,80e278 <__divdf3+0x6b4>
  80de40:	00c00744 	movi	r3,29
  80de44:	123ffe04 	addi	r8,r2,-8
  80de48:	1907c83a 	sub	r3,r3,r4
  80de4c:	8a22983a 	sll	r17,r17,r8
  80de50:	30c6d83a 	srl	r3,r6,r3
  80de54:	3210983a 	sll	r8,r6,r8
  80de58:	1c62b03a 	or	r17,r3,r17
  80de5c:	1080fcc4 	addi	r2,r2,1011
  80de60:	0085c83a 	sub	r2,zero,r2
  80de64:	000f883a 	mov	r7,zero
  80de68:	003f8606 	br	80dc84 <__alt_mem_onchip_mem+0xff78dc84>
  80de6c:	0023883a 	mov	r17,zero
  80de70:	0011883a 	mov	r8,zero
  80de74:	01c00044 	movi	r7,1
  80de78:	003f8206 	br	80dc84 <__alt_mem_onchip_mem+0xff78dc84>
  80de7c:	01c000c4 	movi	r7,3
  80de80:	003f8006 	br	80dc84 <__alt_mem_onchip_mem+0xff78dc84>
  80de84:	04c00104 	movi	r19,4
  80de88:	0021883a 	mov	r16,zero
  80de8c:	0025883a 	mov	r18,zero
  80de90:	02400044 	movi	r9,1
  80de94:	003f6906 	br	80dc3c <__alt_mem_onchip_mem+0xff78dc3c>
  80de98:	04c00304 	movi	r19,12
  80de9c:	024000c4 	movi	r9,3
  80dea0:	003f6606 	br	80dc3c <__alt_mem_onchip_mem+0xff78dc3c>
  80dea4:	01400434 	movhi	r5,16
  80dea8:	0007883a 	mov	r3,zero
  80deac:	297fffc4 	addi	r5,r5,-1
  80deb0:	04bfffc4 	movi	r18,-1
  80deb4:	0081ffc4 	movi	r2,2047
  80deb8:	003fa106 	br	80dd40 <__alt_mem_onchip_mem+0xff78dd40>
  80debc:	00c00044 	movi	r3,1
  80dec0:	1887c83a 	sub	r3,r3,r2
  80dec4:	01000e04 	movi	r4,56
  80dec8:	20c1210e 	bge	r4,r3,80e350 <__divdf3+0x78c>
  80decc:	98c0004c 	andi	r3,r19,1
  80ded0:	0005883a 	mov	r2,zero
  80ded4:	000b883a 	mov	r5,zero
  80ded8:	0025883a 	mov	r18,zero
  80dedc:	003f9806 	br	80dd40 <__alt_mem_onchip_mem+0xff78dd40>
  80dee0:	8c00fd36 	bltu	r17,r16,80e2d8 <__divdf3+0x714>
  80dee4:	8440fb26 	beq	r16,r17,80e2d4 <__divdf3+0x710>
  80dee8:	8007883a 	mov	r3,r16
  80deec:	ad7fffc4 	addi	r21,r21,-1
  80def0:	0021883a 	mov	r16,zero
  80def4:	4004d63a 	srli	r2,r8,24
  80def8:	8822923a 	slli	r17,r17,8
  80defc:	1809883a 	mov	r4,r3
  80df00:	402c923a 	slli	r22,r8,8
  80df04:	88b8b03a 	or	fp,r17,r2
  80df08:	e028d43a 	srli	r20,fp,16
  80df0c:	d8c00015 	stw	r3,0(sp)
  80df10:	e5ffffcc 	andi	r23,fp,65535
  80df14:	a00b883a 	mov	r5,r20
  80df18:	080d25c0 	call	80d25c <__udivsi3>
  80df1c:	d8c00017 	ldw	r3,0(sp)
  80df20:	a00b883a 	mov	r5,r20
  80df24:	d8800315 	stw	r2,12(sp)
  80df28:	1809883a 	mov	r4,r3
  80df2c:	080d2c00 	call	80d2c0 <__umodsi3>
  80df30:	d9800317 	ldw	r6,12(sp)
  80df34:	1006943a 	slli	r3,r2,16
  80df38:	9004d43a 	srli	r2,r18,16
  80df3c:	b9a3383a 	mul	r17,r23,r6
  80df40:	10c4b03a 	or	r2,r2,r3
  80df44:	1440062e 	bgeu	r2,r17,80df60 <__divdf3+0x39c>
  80df48:	1705883a 	add	r2,r2,fp
  80df4c:	30ffffc4 	addi	r3,r6,-1
  80df50:	1700ee36 	bltu	r2,fp,80e30c <__divdf3+0x748>
  80df54:	1440ed2e 	bgeu	r2,r17,80e30c <__divdf3+0x748>
  80df58:	31bfff84 	addi	r6,r6,-2
  80df5c:	1705883a 	add	r2,r2,fp
  80df60:	1463c83a 	sub	r17,r2,r17
  80df64:	a00b883a 	mov	r5,r20
  80df68:	8809883a 	mov	r4,r17
  80df6c:	d9800315 	stw	r6,12(sp)
  80df70:	080d25c0 	call	80d25c <__udivsi3>
  80df74:	a00b883a 	mov	r5,r20
  80df78:	8809883a 	mov	r4,r17
  80df7c:	d8800215 	stw	r2,8(sp)
  80df80:	080d2c00 	call	80d2c0 <__umodsi3>
  80df84:	d9c00217 	ldw	r7,8(sp)
  80df88:	1004943a 	slli	r2,r2,16
  80df8c:	94bfffcc 	andi	r18,r18,65535
  80df90:	b9d1383a 	mul	r8,r23,r7
  80df94:	90a4b03a 	or	r18,r18,r2
  80df98:	d9800317 	ldw	r6,12(sp)
  80df9c:	9200062e 	bgeu	r18,r8,80dfb8 <__divdf3+0x3f4>
  80dfa0:	9725883a 	add	r18,r18,fp
  80dfa4:	38bfffc4 	addi	r2,r7,-1
  80dfa8:	9700d636 	bltu	r18,fp,80e304 <__divdf3+0x740>
  80dfac:	9200d52e 	bgeu	r18,r8,80e304 <__divdf3+0x740>
  80dfb0:	39ffff84 	addi	r7,r7,-2
  80dfb4:	9725883a 	add	r18,r18,fp
  80dfb8:	3004943a 	slli	r2,r6,16
  80dfbc:	b012d43a 	srli	r9,r22,16
  80dfc0:	b1bfffcc 	andi	r6,r22,65535
  80dfc4:	11e2b03a 	or	r17,r2,r7
  80dfc8:	8806d43a 	srli	r3,r17,16
  80dfcc:	893fffcc 	andi	r4,r17,65535
  80dfd0:	218b383a 	mul	r5,r4,r6
  80dfd4:	30c5383a 	mul	r2,r6,r3
  80dfd8:	2249383a 	mul	r4,r4,r9
  80dfdc:	280ed43a 	srli	r7,r5,16
  80dfe0:	9225c83a 	sub	r18,r18,r8
  80dfe4:	2089883a 	add	r4,r4,r2
  80dfe8:	3909883a 	add	r4,r7,r4
  80dfec:	1a47383a 	mul	r3,r3,r9
  80dff0:	2080022e 	bgeu	r4,r2,80dffc <__divdf3+0x438>
  80dff4:	00800074 	movhi	r2,1
  80dff8:	1887883a 	add	r3,r3,r2
  80dffc:	2004d43a 	srli	r2,r4,16
  80e000:	2008943a 	slli	r4,r4,16
  80e004:	297fffcc 	andi	r5,r5,65535
  80e008:	10c7883a 	add	r3,r2,r3
  80e00c:	2149883a 	add	r4,r4,r5
  80e010:	90c0a536 	bltu	r18,r3,80e2a8 <__divdf3+0x6e4>
  80e014:	90c0bf26 	beq	r18,r3,80e314 <__divdf3+0x750>
  80e018:	90c7c83a 	sub	r3,r18,r3
  80e01c:	810fc83a 	sub	r7,r16,r4
  80e020:	81e5803a 	cmpltu	r18,r16,r7
  80e024:	1ca5c83a 	sub	r18,r3,r18
  80e028:	e480c126 	beq	fp,r18,80e330 <__divdf3+0x76c>
  80e02c:	a00b883a 	mov	r5,r20
  80e030:	9009883a 	mov	r4,r18
  80e034:	d9800315 	stw	r6,12(sp)
  80e038:	d9c00215 	stw	r7,8(sp)
  80e03c:	da400115 	stw	r9,4(sp)
  80e040:	080d25c0 	call	80d25c <__udivsi3>
  80e044:	a00b883a 	mov	r5,r20
  80e048:	9009883a 	mov	r4,r18
  80e04c:	d8800015 	stw	r2,0(sp)
  80e050:	080d2c00 	call	80d2c0 <__umodsi3>
  80e054:	d9c00217 	ldw	r7,8(sp)
  80e058:	da000017 	ldw	r8,0(sp)
  80e05c:	1006943a 	slli	r3,r2,16
  80e060:	3804d43a 	srli	r2,r7,16
  80e064:	ba21383a 	mul	r16,r23,r8
  80e068:	d9800317 	ldw	r6,12(sp)
  80e06c:	10c4b03a 	or	r2,r2,r3
  80e070:	da400117 	ldw	r9,4(sp)
  80e074:	1400062e 	bgeu	r2,r16,80e090 <__divdf3+0x4cc>
  80e078:	1705883a 	add	r2,r2,fp
  80e07c:	40ffffc4 	addi	r3,r8,-1
  80e080:	1700ad36 	bltu	r2,fp,80e338 <__divdf3+0x774>
  80e084:	1400ac2e 	bgeu	r2,r16,80e338 <__divdf3+0x774>
  80e088:	423fff84 	addi	r8,r8,-2
  80e08c:	1705883a 	add	r2,r2,fp
  80e090:	1421c83a 	sub	r16,r2,r16
  80e094:	a00b883a 	mov	r5,r20
  80e098:	8009883a 	mov	r4,r16
  80e09c:	d9800315 	stw	r6,12(sp)
  80e0a0:	d9c00215 	stw	r7,8(sp)
  80e0a4:	da000015 	stw	r8,0(sp)
  80e0a8:	da400115 	stw	r9,4(sp)
  80e0ac:	080d25c0 	call	80d25c <__udivsi3>
  80e0b0:	8009883a 	mov	r4,r16
  80e0b4:	a00b883a 	mov	r5,r20
  80e0b8:	1025883a 	mov	r18,r2
  80e0bc:	080d2c00 	call	80d2c0 <__umodsi3>
  80e0c0:	d9c00217 	ldw	r7,8(sp)
  80e0c4:	1004943a 	slli	r2,r2,16
  80e0c8:	bcaf383a 	mul	r23,r23,r18
  80e0cc:	393fffcc 	andi	r4,r7,65535
  80e0d0:	2088b03a 	or	r4,r4,r2
  80e0d4:	d9800317 	ldw	r6,12(sp)
  80e0d8:	da000017 	ldw	r8,0(sp)
  80e0dc:	da400117 	ldw	r9,4(sp)
  80e0e0:	25c0062e 	bgeu	r4,r23,80e0fc <__divdf3+0x538>
  80e0e4:	2709883a 	add	r4,r4,fp
  80e0e8:	90bfffc4 	addi	r2,r18,-1
  80e0ec:	27009436 	bltu	r4,fp,80e340 <__divdf3+0x77c>
  80e0f0:	25c0932e 	bgeu	r4,r23,80e340 <__divdf3+0x77c>
  80e0f4:	94bfff84 	addi	r18,r18,-2
  80e0f8:	2709883a 	add	r4,r4,fp
  80e0fc:	4004943a 	slli	r2,r8,16
  80e100:	25efc83a 	sub	r23,r4,r23
  80e104:	1490b03a 	or	r8,r2,r18
  80e108:	4008d43a 	srli	r4,r8,16
  80e10c:	40ffffcc 	andi	r3,r8,65535
  80e110:	30c5383a 	mul	r2,r6,r3
  80e114:	1a47383a 	mul	r3,r3,r9
  80e118:	310d383a 	mul	r6,r6,r4
  80e11c:	100ad43a 	srli	r5,r2,16
  80e120:	4913383a 	mul	r9,r9,r4
  80e124:	1987883a 	add	r3,r3,r6
  80e128:	28c7883a 	add	r3,r5,r3
  80e12c:	1980022e 	bgeu	r3,r6,80e138 <__divdf3+0x574>
  80e130:	01000074 	movhi	r4,1
  80e134:	4913883a 	add	r9,r9,r4
  80e138:	1808d43a 	srli	r4,r3,16
  80e13c:	1806943a 	slli	r3,r3,16
  80e140:	10bfffcc 	andi	r2,r2,65535
  80e144:	2253883a 	add	r9,r4,r9
  80e148:	1887883a 	add	r3,r3,r2
  80e14c:	ba403836 	bltu	r23,r9,80e230 <__divdf3+0x66c>
  80e150:	ba403626 	beq	r23,r9,80e22c <__divdf3+0x668>
  80e154:	42000054 	ori	r8,r8,1
  80e158:	a880ffc4 	addi	r2,r21,1023
  80e15c:	00bf570e 	bge	zero,r2,80debc <__alt_mem_onchip_mem+0xff78debc>
  80e160:	40c001cc 	andi	r3,r8,7
  80e164:	18000726 	beq	r3,zero,80e184 <__divdf3+0x5c0>
  80e168:	40c003cc 	andi	r3,r8,15
  80e16c:	01000104 	movi	r4,4
  80e170:	19000426 	beq	r3,r4,80e184 <__divdf3+0x5c0>
  80e174:	4107883a 	add	r3,r8,r4
  80e178:	1a11803a 	cmpltu	r8,r3,r8
  80e17c:	8a23883a 	add	r17,r17,r8
  80e180:	1811883a 	mov	r8,r3
  80e184:	88c0402c 	andhi	r3,r17,256
  80e188:	18000426 	beq	r3,zero,80e19c <__divdf3+0x5d8>
  80e18c:	00ffc034 	movhi	r3,65280
  80e190:	18ffffc4 	addi	r3,r3,-1
  80e194:	a8810004 	addi	r2,r21,1024
  80e198:	88e2703a 	and	r17,r17,r3
  80e19c:	00c1ff84 	movi	r3,2046
  80e1a0:	18bee316 	blt	r3,r2,80dd30 <__alt_mem_onchip_mem+0xff78dd30>
  80e1a4:	8824977a 	slli	r18,r17,29
  80e1a8:	4010d0fa 	srli	r8,r8,3
  80e1ac:	8822927a 	slli	r17,r17,9
  80e1b0:	1081ffcc 	andi	r2,r2,2047
  80e1b4:	9224b03a 	or	r18,r18,r8
  80e1b8:	880ad33a 	srli	r5,r17,12
  80e1bc:	98c0004c 	andi	r3,r19,1
  80e1c0:	003edf06 	br	80dd40 <__alt_mem_onchip_mem+0xff78dd40>
  80e1c4:	8080022c 	andhi	r2,r16,8
  80e1c8:	10001226 	beq	r2,zero,80e214 <__divdf3+0x650>
  80e1cc:	8880022c 	andhi	r2,r17,8
  80e1d0:	1000101e 	bne	r2,zero,80e214 <__divdf3+0x650>
  80e1d4:	00800434 	movhi	r2,16
  80e1d8:	89400234 	orhi	r5,r17,8
  80e1dc:	10bfffc4 	addi	r2,r2,-1
  80e1e0:	b007883a 	mov	r3,r22
  80e1e4:	288a703a 	and	r5,r5,r2
  80e1e8:	4025883a 	mov	r18,r8
  80e1ec:	003f3106 	br	80deb4 <__alt_mem_onchip_mem+0xff78deb4>
  80e1f0:	008000c4 	movi	r2,3
  80e1f4:	3880a626 	beq	r7,r2,80e490 <__divdf3+0x8cc>
  80e1f8:	00800044 	movi	r2,1
  80e1fc:	3880521e 	bne	r7,r2,80e348 <__divdf3+0x784>
  80e200:	b807883a 	mov	r3,r23
  80e204:	0005883a 	mov	r2,zero
  80e208:	000b883a 	mov	r5,zero
  80e20c:	0025883a 	mov	r18,zero
  80e210:	003ecb06 	br	80dd40 <__alt_mem_onchip_mem+0xff78dd40>
  80e214:	00800434 	movhi	r2,16
  80e218:	81400234 	orhi	r5,r16,8
  80e21c:	10bfffc4 	addi	r2,r2,-1
  80e220:	a007883a 	mov	r3,r20
  80e224:	288a703a 	and	r5,r5,r2
  80e228:	003f2206 	br	80deb4 <__alt_mem_onchip_mem+0xff78deb4>
  80e22c:	183fca26 	beq	r3,zero,80e158 <__alt_mem_onchip_mem+0xff78e158>
  80e230:	e5ef883a 	add	r23,fp,r23
  80e234:	40bfffc4 	addi	r2,r8,-1
  80e238:	bf00392e 	bgeu	r23,fp,80e320 <__divdf3+0x75c>
  80e23c:	1011883a 	mov	r8,r2
  80e240:	ba7fc41e 	bne	r23,r9,80e154 <__alt_mem_onchip_mem+0xff78e154>
  80e244:	b0ffc31e 	bne	r22,r3,80e154 <__alt_mem_onchip_mem+0xff78e154>
  80e248:	003fc306 	br	80e158 <__alt_mem_onchip_mem+0xff78e158>
  80e24c:	143ff604 	addi	r16,r2,-40
  80e250:	9c20983a 	sll	r16,r19,r16
  80e254:	0025883a 	mov	r18,zero
  80e258:	003ee206 	br	80dde4 <__alt_mem_onchip_mem+0xff78dde4>
  80e25c:	d9800315 	stw	r6,12(sp)
  80e260:	d9c00215 	stw	r7,8(sp)
  80e264:	080f91c0 	call	80f91c <__clzsi2>
  80e268:	10800804 	addi	r2,r2,32
  80e26c:	d9c00217 	ldw	r7,8(sp)
  80e270:	d9800317 	ldw	r6,12(sp)
  80e274:	003ed106 	br	80ddbc <__alt_mem_onchip_mem+0xff78ddbc>
  80e278:	147ff604 	addi	r17,r2,-40
  80e27c:	3462983a 	sll	r17,r6,r17
  80e280:	0011883a 	mov	r8,zero
  80e284:	003ef506 	br	80de5c <__alt_mem_onchip_mem+0xff78de5c>
  80e288:	3009883a 	mov	r4,r6
  80e28c:	d9800315 	stw	r6,12(sp)
  80e290:	da400115 	stw	r9,4(sp)
  80e294:	080f91c0 	call	80f91c <__clzsi2>
  80e298:	10800804 	addi	r2,r2,32
  80e29c:	da400117 	ldw	r9,4(sp)
  80e2a0:	d9800317 	ldw	r6,12(sp)
  80e2a4:	003ee306 	br	80de34 <__alt_mem_onchip_mem+0xff78de34>
  80e2a8:	85a1883a 	add	r16,r16,r22
  80e2ac:	8585803a 	cmpltu	r2,r16,r22
  80e2b0:	1705883a 	add	r2,r2,fp
  80e2b4:	14a5883a 	add	r18,r2,r18
  80e2b8:	88bfffc4 	addi	r2,r17,-1
  80e2bc:	e4800c2e 	bgeu	fp,r18,80e2f0 <__divdf3+0x72c>
  80e2c0:	90c03e36 	bltu	r18,r3,80e3bc <__divdf3+0x7f8>
  80e2c4:	1c806926 	beq	r3,r18,80e46c <__divdf3+0x8a8>
  80e2c8:	90c7c83a 	sub	r3,r18,r3
  80e2cc:	1023883a 	mov	r17,r2
  80e2d0:	003f5206 	br	80e01c <__alt_mem_onchip_mem+0xff78e01c>
  80e2d4:	923f0436 	bltu	r18,r8,80dee8 <__alt_mem_onchip_mem+0xff78dee8>
  80e2d8:	800897fa 	slli	r4,r16,31
  80e2dc:	9004d07a 	srli	r2,r18,1
  80e2e0:	8006d07a 	srli	r3,r16,1
  80e2e4:	902097fa 	slli	r16,r18,31
  80e2e8:	20a4b03a 	or	r18,r4,r2
  80e2ec:	003f0106 	br	80def4 <__alt_mem_onchip_mem+0xff78def4>
  80e2f0:	e4bff51e 	bne	fp,r18,80e2c8 <__alt_mem_onchip_mem+0xff78e2c8>
  80e2f4:	85bff22e 	bgeu	r16,r22,80e2c0 <__alt_mem_onchip_mem+0xff78e2c0>
  80e2f8:	e0c7c83a 	sub	r3,fp,r3
  80e2fc:	1023883a 	mov	r17,r2
  80e300:	003f4606 	br	80e01c <__alt_mem_onchip_mem+0xff78e01c>
  80e304:	100f883a 	mov	r7,r2
  80e308:	003f2b06 	br	80dfb8 <__alt_mem_onchip_mem+0xff78dfb8>
  80e30c:	180d883a 	mov	r6,r3
  80e310:	003f1306 	br	80df60 <__alt_mem_onchip_mem+0xff78df60>
  80e314:	813fe436 	bltu	r16,r4,80e2a8 <__alt_mem_onchip_mem+0xff78e2a8>
  80e318:	0007883a 	mov	r3,zero
  80e31c:	003f3f06 	br	80e01c <__alt_mem_onchip_mem+0xff78e01c>
  80e320:	ba402c36 	bltu	r23,r9,80e3d4 <__divdf3+0x810>
  80e324:	4dc05426 	beq	r9,r23,80e478 <__divdf3+0x8b4>
  80e328:	1011883a 	mov	r8,r2
  80e32c:	003f8906 	br	80e154 <__alt_mem_onchip_mem+0xff78e154>
  80e330:	023fffc4 	movi	r8,-1
  80e334:	003f8806 	br	80e158 <__alt_mem_onchip_mem+0xff78e158>
  80e338:	1811883a 	mov	r8,r3
  80e33c:	003f5406 	br	80e090 <__alt_mem_onchip_mem+0xff78e090>
  80e340:	1025883a 	mov	r18,r2
  80e344:	003f6d06 	br	80e0fc <__alt_mem_onchip_mem+0xff78e0fc>
  80e348:	b827883a 	mov	r19,r23
  80e34c:	003f8206 	br	80e158 <__alt_mem_onchip_mem+0xff78e158>
  80e350:	010007c4 	movi	r4,31
  80e354:	20c02616 	blt	r4,r3,80e3f0 <__divdf3+0x82c>
  80e358:	00800804 	movi	r2,32
  80e35c:	10c5c83a 	sub	r2,r2,r3
  80e360:	888a983a 	sll	r5,r17,r2
  80e364:	40c8d83a 	srl	r4,r8,r3
  80e368:	4084983a 	sll	r2,r8,r2
  80e36c:	88e2d83a 	srl	r17,r17,r3
  80e370:	2906b03a 	or	r3,r5,r4
  80e374:	1004c03a 	cmpne	r2,r2,zero
  80e378:	1886b03a 	or	r3,r3,r2
  80e37c:	188001cc 	andi	r2,r3,7
  80e380:	10000726 	beq	r2,zero,80e3a0 <__divdf3+0x7dc>
  80e384:	188003cc 	andi	r2,r3,15
  80e388:	01000104 	movi	r4,4
  80e38c:	11000426 	beq	r2,r4,80e3a0 <__divdf3+0x7dc>
  80e390:	1805883a 	mov	r2,r3
  80e394:	10c00104 	addi	r3,r2,4
  80e398:	1885803a 	cmpltu	r2,r3,r2
  80e39c:	88a3883a 	add	r17,r17,r2
  80e3a0:	8880202c 	andhi	r2,r17,128
  80e3a4:	10002726 	beq	r2,zero,80e444 <__divdf3+0x880>
  80e3a8:	98c0004c 	andi	r3,r19,1
  80e3ac:	00800044 	movi	r2,1
  80e3b0:	000b883a 	mov	r5,zero
  80e3b4:	0025883a 	mov	r18,zero
  80e3b8:	003e6106 	br	80dd40 <__alt_mem_onchip_mem+0xff78dd40>
  80e3bc:	85a1883a 	add	r16,r16,r22
  80e3c0:	8585803a 	cmpltu	r2,r16,r22
  80e3c4:	1705883a 	add	r2,r2,fp
  80e3c8:	14a5883a 	add	r18,r2,r18
  80e3cc:	8c7fff84 	addi	r17,r17,-2
  80e3d0:	003f1106 	br	80e018 <__alt_mem_onchip_mem+0xff78e018>
  80e3d4:	b589883a 	add	r4,r22,r22
  80e3d8:	25ad803a 	cmpltu	r22,r4,r22
  80e3dc:	b739883a 	add	fp,r22,fp
  80e3e0:	40bfff84 	addi	r2,r8,-2
  80e3e4:	bf2f883a 	add	r23,r23,fp
  80e3e8:	202d883a 	mov	r22,r4
  80e3ec:	003f9306 	br	80e23c <__alt_mem_onchip_mem+0xff78e23c>
  80e3f0:	013ff844 	movi	r4,-31
  80e3f4:	2085c83a 	sub	r2,r4,r2
  80e3f8:	8888d83a 	srl	r4,r17,r2
  80e3fc:	00800804 	movi	r2,32
  80e400:	18802126 	beq	r3,r2,80e488 <__divdf3+0x8c4>
  80e404:	00801004 	movi	r2,64
  80e408:	10c5c83a 	sub	r2,r2,r3
  80e40c:	8884983a 	sll	r2,r17,r2
  80e410:	1204b03a 	or	r2,r2,r8
  80e414:	1004c03a 	cmpne	r2,r2,zero
  80e418:	2084b03a 	or	r2,r4,r2
  80e41c:	144001cc 	andi	r17,r2,7
  80e420:	88000d1e 	bne	r17,zero,80e458 <__divdf3+0x894>
  80e424:	000b883a 	mov	r5,zero
  80e428:	1024d0fa 	srli	r18,r2,3
  80e42c:	98c0004c 	andi	r3,r19,1
  80e430:	0005883a 	mov	r2,zero
  80e434:	9464b03a 	or	r18,r18,r17
  80e438:	003e4106 	br	80dd40 <__alt_mem_onchip_mem+0xff78dd40>
  80e43c:	1007883a 	mov	r3,r2
  80e440:	0023883a 	mov	r17,zero
  80e444:	880a927a 	slli	r5,r17,9
  80e448:	1805883a 	mov	r2,r3
  80e44c:	8822977a 	slli	r17,r17,29
  80e450:	280ad33a 	srli	r5,r5,12
  80e454:	003ff406 	br	80e428 <__alt_mem_onchip_mem+0xff78e428>
  80e458:	10c003cc 	andi	r3,r2,15
  80e45c:	01000104 	movi	r4,4
  80e460:	193ff626 	beq	r3,r4,80e43c <__alt_mem_onchip_mem+0xff78e43c>
  80e464:	0023883a 	mov	r17,zero
  80e468:	003fca06 	br	80e394 <__alt_mem_onchip_mem+0xff78e394>
  80e46c:	813fd336 	bltu	r16,r4,80e3bc <__alt_mem_onchip_mem+0xff78e3bc>
  80e470:	1023883a 	mov	r17,r2
  80e474:	003fa806 	br	80e318 <__alt_mem_onchip_mem+0xff78e318>
  80e478:	b0ffd636 	bltu	r22,r3,80e3d4 <__alt_mem_onchip_mem+0xff78e3d4>
  80e47c:	1011883a 	mov	r8,r2
  80e480:	b0ff341e 	bne	r22,r3,80e154 <__alt_mem_onchip_mem+0xff78e154>
  80e484:	003f3406 	br	80e158 <__alt_mem_onchip_mem+0xff78e158>
  80e488:	0005883a 	mov	r2,zero
  80e48c:	003fe006 	br	80e410 <__alt_mem_onchip_mem+0xff78e410>
  80e490:	00800434 	movhi	r2,16
  80e494:	89400234 	orhi	r5,r17,8
  80e498:	10bfffc4 	addi	r2,r2,-1
  80e49c:	b807883a 	mov	r3,r23
  80e4a0:	288a703a 	and	r5,r5,r2
  80e4a4:	4025883a 	mov	r18,r8
  80e4a8:	003e8206 	br	80deb4 <__alt_mem_onchip_mem+0xff78deb4>

0080e4ac <__eqdf2>:
  80e4ac:	2804d53a 	srli	r2,r5,20
  80e4b0:	3806d53a 	srli	r3,r7,20
  80e4b4:	02000434 	movhi	r8,16
  80e4b8:	423fffc4 	addi	r8,r8,-1
  80e4bc:	1081ffcc 	andi	r2,r2,2047
  80e4c0:	0281ffc4 	movi	r10,2047
  80e4c4:	2a12703a 	and	r9,r5,r8
  80e4c8:	18c1ffcc 	andi	r3,r3,2047
  80e4cc:	3a10703a 	and	r8,r7,r8
  80e4d0:	280ad7fa 	srli	r5,r5,31
  80e4d4:	380ed7fa 	srli	r7,r7,31
  80e4d8:	12801026 	beq	r2,r10,80e51c <__eqdf2+0x70>
  80e4dc:	0281ffc4 	movi	r10,2047
  80e4e0:	1a800a26 	beq	r3,r10,80e50c <__eqdf2+0x60>
  80e4e4:	10c00226 	beq	r2,r3,80e4f0 <__eqdf2+0x44>
  80e4e8:	00800044 	movi	r2,1
  80e4ec:	f800283a 	ret
  80e4f0:	4a3ffd1e 	bne	r9,r8,80e4e8 <__alt_mem_onchip_mem+0xff78e4e8>
  80e4f4:	21bffc1e 	bne	r4,r6,80e4e8 <__alt_mem_onchip_mem+0xff78e4e8>
  80e4f8:	29c00c26 	beq	r5,r7,80e52c <__eqdf2+0x80>
  80e4fc:	103ffa1e 	bne	r2,zero,80e4e8 <__alt_mem_onchip_mem+0xff78e4e8>
  80e500:	2244b03a 	or	r2,r4,r9
  80e504:	1004c03a 	cmpne	r2,r2,zero
  80e508:	f800283a 	ret
  80e50c:	3214b03a 	or	r10,r6,r8
  80e510:	503ff426 	beq	r10,zero,80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80e514:	00800044 	movi	r2,1
  80e518:	f800283a 	ret
  80e51c:	2254b03a 	or	r10,r4,r9
  80e520:	503fee26 	beq	r10,zero,80e4dc <__alt_mem_onchip_mem+0xff78e4dc>
  80e524:	00800044 	movi	r2,1
  80e528:	f800283a 	ret
  80e52c:	0005883a 	mov	r2,zero
  80e530:	f800283a 	ret

0080e534 <__gedf2>:
  80e534:	2804d53a 	srli	r2,r5,20
  80e538:	3806d53a 	srli	r3,r7,20
  80e53c:	02000434 	movhi	r8,16
  80e540:	423fffc4 	addi	r8,r8,-1
  80e544:	1081ffcc 	andi	r2,r2,2047
  80e548:	0241ffc4 	movi	r9,2047
  80e54c:	2a14703a 	and	r10,r5,r8
  80e550:	18c1ffcc 	andi	r3,r3,2047
  80e554:	3a10703a 	and	r8,r7,r8
  80e558:	280ad7fa 	srli	r5,r5,31
  80e55c:	380ed7fa 	srli	r7,r7,31
  80e560:	12401d26 	beq	r2,r9,80e5d8 <__gedf2+0xa4>
  80e564:	0241ffc4 	movi	r9,2047
  80e568:	1a401226 	beq	r3,r9,80e5b4 <__gedf2+0x80>
  80e56c:	1000081e 	bne	r2,zero,80e590 <__gedf2+0x5c>
  80e570:	2296b03a 	or	r11,r4,r10
  80e574:	5813003a 	cmpeq	r9,r11,zero
  80e578:	1800091e 	bne	r3,zero,80e5a0 <__gedf2+0x6c>
  80e57c:	3218b03a 	or	r12,r6,r8
  80e580:	6000071e 	bne	r12,zero,80e5a0 <__gedf2+0x6c>
  80e584:	0005883a 	mov	r2,zero
  80e588:	5800101e 	bne	r11,zero,80e5cc <__gedf2+0x98>
  80e58c:	f800283a 	ret
  80e590:	18000c1e 	bne	r3,zero,80e5c4 <__gedf2+0x90>
  80e594:	3212b03a 	or	r9,r6,r8
  80e598:	48000c26 	beq	r9,zero,80e5cc <__gedf2+0x98>
  80e59c:	0013883a 	mov	r9,zero
  80e5a0:	39c03fcc 	andi	r7,r7,255
  80e5a4:	48000826 	beq	r9,zero,80e5c8 <__gedf2+0x94>
  80e5a8:	38000926 	beq	r7,zero,80e5d0 <__gedf2+0x9c>
  80e5ac:	00800044 	movi	r2,1
  80e5b0:	f800283a 	ret
  80e5b4:	3212b03a 	or	r9,r6,r8
  80e5b8:	483fec26 	beq	r9,zero,80e56c <__alt_mem_onchip_mem+0xff78e56c>
  80e5bc:	00bfff84 	movi	r2,-2
  80e5c0:	f800283a 	ret
  80e5c4:	39c03fcc 	andi	r7,r7,255
  80e5c8:	29c00626 	beq	r5,r7,80e5e4 <__gedf2+0xb0>
  80e5cc:	283ff726 	beq	r5,zero,80e5ac <__alt_mem_onchip_mem+0xff78e5ac>
  80e5d0:	00bfffc4 	movi	r2,-1
  80e5d4:	f800283a 	ret
  80e5d8:	2292b03a 	or	r9,r4,r10
  80e5dc:	483fe126 	beq	r9,zero,80e564 <__alt_mem_onchip_mem+0xff78e564>
  80e5e0:	003ff606 	br	80e5bc <__alt_mem_onchip_mem+0xff78e5bc>
  80e5e4:	18bff916 	blt	r3,r2,80e5cc <__alt_mem_onchip_mem+0xff78e5cc>
  80e5e8:	10c00316 	blt	r2,r3,80e5f8 <__gedf2+0xc4>
  80e5ec:	42bff736 	bltu	r8,r10,80e5cc <__alt_mem_onchip_mem+0xff78e5cc>
  80e5f0:	52000326 	beq	r10,r8,80e600 <__gedf2+0xcc>
  80e5f4:	5200042e 	bgeu	r10,r8,80e608 <__gedf2+0xd4>
  80e5f8:	283fec1e 	bne	r5,zero,80e5ac <__alt_mem_onchip_mem+0xff78e5ac>
  80e5fc:	003ff406 	br	80e5d0 <__alt_mem_onchip_mem+0xff78e5d0>
  80e600:	313ff236 	bltu	r6,r4,80e5cc <__alt_mem_onchip_mem+0xff78e5cc>
  80e604:	21bffc36 	bltu	r4,r6,80e5f8 <__alt_mem_onchip_mem+0xff78e5f8>
  80e608:	0005883a 	mov	r2,zero
  80e60c:	f800283a 	ret

0080e610 <__ledf2>:
  80e610:	2804d53a 	srli	r2,r5,20
  80e614:	3810d53a 	srli	r8,r7,20
  80e618:	00c00434 	movhi	r3,16
  80e61c:	18ffffc4 	addi	r3,r3,-1
  80e620:	1081ffcc 	andi	r2,r2,2047
  80e624:	0241ffc4 	movi	r9,2047
  80e628:	28d4703a 	and	r10,r5,r3
  80e62c:	4201ffcc 	andi	r8,r8,2047
  80e630:	38c6703a 	and	r3,r7,r3
  80e634:	280ad7fa 	srli	r5,r5,31
  80e638:	380ed7fa 	srli	r7,r7,31
  80e63c:	12401f26 	beq	r2,r9,80e6bc <__ledf2+0xac>
  80e640:	0241ffc4 	movi	r9,2047
  80e644:	42401426 	beq	r8,r9,80e698 <__ledf2+0x88>
  80e648:	1000091e 	bne	r2,zero,80e670 <__ledf2+0x60>
  80e64c:	2296b03a 	or	r11,r4,r10
  80e650:	5813003a 	cmpeq	r9,r11,zero
  80e654:	29403fcc 	andi	r5,r5,255
  80e658:	40000a1e 	bne	r8,zero,80e684 <__ledf2+0x74>
  80e65c:	30d8b03a 	or	r12,r6,r3
  80e660:	6000081e 	bne	r12,zero,80e684 <__ledf2+0x74>
  80e664:	0005883a 	mov	r2,zero
  80e668:	5800111e 	bne	r11,zero,80e6b0 <__ledf2+0xa0>
  80e66c:	f800283a 	ret
  80e670:	29403fcc 	andi	r5,r5,255
  80e674:	40000c1e 	bne	r8,zero,80e6a8 <__ledf2+0x98>
  80e678:	30d2b03a 	or	r9,r6,r3
  80e67c:	48000c26 	beq	r9,zero,80e6b0 <__ledf2+0xa0>
  80e680:	0013883a 	mov	r9,zero
  80e684:	39c03fcc 	andi	r7,r7,255
  80e688:	48000826 	beq	r9,zero,80e6ac <__ledf2+0x9c>
  80e68c:	38001126 	beq	r7,zero,80e6d4 <__ledf2+0xc4>
  80e690:	00800044 	movi	r2,1
  80e694:	f800283a 	ret
  80e698:	30d2b03a 	or	r9,r6,r3
  80e69c:	483fea26 	beq	r9,zero,80e648 <__alt_mem_onchip_mem+0xff78e648>
  80e6a0:	00800084 	movi	r2,2
  80e6a4:	f800283a 	ret
  80e6a8:	39c03fcc 	andi	r7,r7,255
  80e6ac:	39400726 	beq	r7,r5,80e6cc <__ledf2+0xbc>
  80e6b0:	2800081e 	bne	r5,zero,80e6d4 <__ledf2+0xc4>
  80e6b4:	00800044 	movi	r2,1
  80e6b8:	f800283a 	ret
  80e6bc:	2292b03a 	or	r9,r4,r10
  80e6c0:	483fdf26 	beq	r9,zero,80e640 <__alt_mem_onchip_mem+0xff78e640>
  80e6c4:	00800084 	movi	r2,2
  80e6c8:	f800283a 	ret
  80e6cc:	4080030e 	bge	r8,r2,80e6dc <__ledf2+0xcc>
  80e6d0:	383fef26 	beq	r7,zero,80e690 <__alt_mem_onchip_mem+0xff78e690>
  80e6d4:	00bfffc4 	movi	r2,-1
  80e6d8:	f800283a 	ret
  80e6dc:	123feb16 	blt	r2,r8,80e68c <__alt_mem_onchip_mem+0xff78e68c>
  80e6e0:	1abff336 	bltu	r3,r10,80e6b0 <__alt_mem_onchip_mem+0xff78e6b0>
  80e6e4:	50c00326 	beq	r10,r3,80e6f4 <__ledf2+0xe4>
  80e6e8:	50c0042e 	bgeu	r10,r3,80e6fc <__ledf2+0xec>
  80e6ec:	283fe81e 	bne	r5,zero,80e690 <__alt_mem_onchip_mem+0xff78e690>
  80e6f0:	003ff806 	br	80e6d4 <__alt_mem_onchip_mem+0xff78e6d4>
  80e6f4:	313fee36 	bltu	r6,r4,80e6b0 <__alt_mem_onchip_mem+0xff78e6b0>
  80e6f8:	21bffc36 	bltu	r4,r6,80e6ec <__alt_mem_onchip_mem+0xff78e6ec>
  80e6fc:	0005883a 	mov	r2,zero
  80e700:	f800283a 	ret

0080e704 <__muldf3>:
  80e704:	defff304 	addi	sp,sp,-52
  80e708:	2804d53a 	srli	r2,r5,20
  80e70c:	dd800915 	stw	r22,36(sp)
  80e710:	282cd7fa 	srli	r22,r5,31
  80e714:	dc000315 	stw	r16,12(sp)
  80e718:	04000434 	movhi	r16,16
  80e71c:	dd400815 	stw	r21,32(sp)
  80e720:	dc800515 	stw	r18,20(sp)
  80e724:	843fffc4 	addi	r16,r16,-1
  80e728:	dfc00c15 	stw	ra,48(sp)
  80e72c:	df000b15 	stw	fp,44(sp)
  80e730:	ddc00a15 	stw	r23,40(sp)
  80e734:	dd000715 	stw	r20,28(sp)
  80e738:	dcc00615 	stw	r19,24(sp)
  80e73c:	dc400415 	stw	r17,16(sp)
  80e740:	1481ffcc 	andi	r18,r2,2047
  80e744:	2c20703a 	and	r16,r5,r16
  80e748:	b02b883a 	mov	r21,r22
  80e74c:	b2403fcc 	andi	r9,r22,255
  80e750:	90006026 	beq	r18,zero,80e8d4 <__muldf3+0x1d0>
  80e754:	0081ffc4 	movi	r2,2047
  80e758:	2029883a 	mov	r20,r4
  80e75c:	90803626 	beq	r18,r2,80e838 <__muldf3+0x134>
  80e760:	80800434 	orhi	r2,r16,16
  80e764:	100490fa 	slli	r2,r2,3
  80e768:	2020d77a 	srli	r16,r4,29
  80e76c:	202890fa 	slli	r20,r4,3
  80e770:	94bf0044 	addi	r18,r18,-1023
  80e774:	80a0b03a 	or	r16,r16,r2
  80e778:	0027883a 	mov	r19,zero
  80e77c:	0039883a 	mov	fp,zero
  80e780:	3804d53a 	srli	r2,r7,20
  80e784:	382ed7fa 	srli	r23,r7,31
  80e788:	04400434 	movhi	r17,16
  80e78c:	8c7fffc4 	addi	r17,r17,-1
  80e790:	1081ffcc 	andi	r2,r2,2047
  80e794:	3011883a 	mov	r8,r6
  80e798:	3c62703a 	and	r17,r7,r17
  80e79c:	ba803fcc 	andi	r10,r23,255
  80e7a0:	10006d26 	beq	r2,zero,80e958 <__muldf3+0x254>
  80e7a4:	00c1ffc4 	movi	r3,2047
  80e7a8:	10c06526 	beq	r2,r3,80e940 <__muldf3+0x23c>
  80e7ac:	88c00434 	orhi	r3,r17,16
  80e7b0:	180690fa 	slli	r3,r3,3
  80e7b4:	3022d77a 	srli	r17,r6,29
  80e7b8:	301090fa 	slli	r8,r6,3
  80e7bc:	10bf0044 	addi	r2,r2,-1023
  80e7c0:	88e2b03a 	or	r17,r17,r3
  80e7c4:	000b883a 	mov	r5,zero
  80e7c8:	9085883a 	add	r2,r18,r2
  80e7cc:	2cc8b03a 	or	r4,r5,r19
  80e7d0:	00c003c4 	movi	r3,15
  80e7d4:	bdacf03a 	xor	r22,r23,r22
  80e7d8:	12c00044 	addi	r11,r2,1
  80e7dc:	19009936 	bltu	r3,r4,80ea44 <__muldf3+0x340>
  80e7e0:	200890ba 	slli	r4,r4,2
  80e7e4:	00c02074 	movhi	r3,129
  80e7e8:	18f9fe04 	addi	r3,r3,-6152
  80e7ec:	20c9883a 	add	r4,r4,r3
  80e7f0:	20c00017 	ldw	r3,0(r4)
  80e7f4:	1800683a 	jmp	r3
  80e7f8:	0080ea44 	movi	r2,937
  80e7fc:	0080e858 	cmpnei	r2,zero,929
  80e800:	0080e858 	cmpnei	r2,zero,929
  80e804:	0080e854 	movui	r2,929
  80e808:	0080ea20 	cmpeqi	r2,zero,936
  80e80c:	0080ea20 	cmpeqi	r2,zero,936
  80e810:	0080ea08 	cmpgei	r2,zero,936
  80e814:	0080e854 	movui	r2,929
  80e818:	0080ea20 	cmpeqi	r2,zero,936
  80e81c:	0080ea08 	cmpgei	r2,zero,936
  80e820:	0080ea20 	cmpeqi	r2,zero,936
  80e824:	0080e854 	movui	r2,929
  80e828:	0080ea30 	cmpltui	r2,zero,936
  80e82c:	0080ea30 	cmpltui	r2,zero,936
  80e830:	0080ea30 	cmpltui	r2,zero,936
  80e834:	0080ec4c 	andi	r2,zero,945
  80e838:	2404b03a 	or	r2,r4,r16
  80e83c:	10006f1e 	bne	r2,zero,80e9fc <__muldf3+0x2f8>
  80e840:	04c00204 	movi	r19,8
  80e844:	0021883a 	mov	r16,zero
  80e848:	0029883a 	mov	r20,zero
  80e84c:	07000084 	movi	fp,2
  80e850:	003fcb06 	br	80e780 <__alt_mem_onchip_mem+0xff78e780>
  80e854:	502d883a 	mov	r22,r10
  80e858:	00800084 	movi	r2,2
  80e85c:	28805726 	beq	r5,r2,80e9bc <__muldf3+0x2b8>
  80e860:	008000c4 	movi	r2,3
  80e864:	28816626 	beq	r5,r2,80ee00 <__muldf3+0x6fc>
  80e868:	00800044 	movi	r2,1
  80e86c:	2881411e 	bne	r5,r2,80ed74 <__muldf3+0x670>
  80e870:	b02b883a 	mov	r21,r22
  80e874:	0005883a 	mov	r2,zero
  80e878:	000b883a 	mov	r5,zero
  80e87c:	0029883a 	mov	r20,zero
  80e880:	1004953a 	slli	r2,r2,20
  80e884:	a8c03fcc 	andi	r3,r21,255
  80e888:	04400434 	movhi	r17,16
  80e88c:	8c7fffc4 	addi	r17,r17,-1
  80e890:	180697fa 	slli	r3,r3,31
  80e894:	2c4a703a 	and	r5,r5,r17
  80e898:	288ab03a 	or	r5,r5,r2
  80e89c:	28c6b03a 	or	r3,r5,r3
  80e8a0:	a005883a 	mov	r2,r20
  80e8a4:	dfc00c17 	ldw	ra,48(sp)
  80e8a8:	df000b17 	ldw	fp,44(sp)
  80e8ac:	ddc00a17 	ldw	r23,40(sp)
  80e8b0:	dd800917 	ldw	r22,36(sp)
  80e8b4:	dd400817 	ldw	r21,32(sp)
  80e8b8:	dd000717 	ldw	r20,28(sp)
  80e8bc:	dcc00617 	ldw	r19,24(sp)
  80e8c0:	dc800517 	ldw	r18,20(sp)
  80e8c4:	dc400417 	ldw	r17,16(sp)
  80e8c8:	dc000317 	ldw	r16,12(sp)
  80e8cc:	dec00d04 	addi	sp,sp,52
  80e8d0:	f800283a 	ret
  80e8d4:	2404b03a 	or	r2,r4,r16
  80e8d8:	2027883a 	mov	r19,r4
  80e8dc:	10004226 	beq	r2,zero,80e9e8 <__muldf3+0x2e4>
  80e8e0:	8000fc26 	beq	r16,zero,80ecd4 <__muldf3+0x5d0>
  80e8e4:	8009883a 	mov	r4,r16
  80e8e8:	d9800215 	stw	r6,8(sp)
  80e8ec:	d9c00015 	stw	r7,0(sp)
  80e8f0:	da400115 	stw	r9,4(sp)
  80e8f4:	080f91c0 	call	80f91c <__clzsi2>
  80e8f8:	d9800217 	ldw	r6,8(sp)
  80e8fc:	d9c00017 	ldw	r7,0(sp)
  80e900:	da400117 	ldw	r9,4(sp)
  80e904:	113ffd44 	addi	r4,r2,-11
  80e908:	00c00704 	movi	r3,28
  80e90c:	1900ed16 	blt	r3,r4,80ecc4 <__muldf3+0x5c0>
  80e910:	00c00744 	movi	r3,29
  80e914:	147ffe04 	addi	r17,r2,-8
  80e918:	1907c83a 	sub	r3,r3,r4
  80e91c:	8460983a 	sll	r16,r16,r17
  80e920:	98c6d83a 	srl	r3,r19,r3
  80e924:	9c68983a 	sll	r20,r19,r17
  80e928:	1c20b03a 	or	r16,r3,r16
  80e92c:	1080fcc4 	addi	r2,r2,1011
  80e930:	00a5c83a 	sub	r18,zero,r2
  80e934:	0027883a 	mov	r19,zero
  80e938:	0039883a 	mov	fp,zero
  80e93c:	003f9006 	br	80e780 <__alt_mem_onchip_mem+0xff78e780>
  80e940:	3446b03a 	or	r3,r6,r17
  80e944:	1800261e 	bne	r3,zero,80e9e0 <__muldf3+0x2dc>
  80e948:	0023883a 	mov	r17,zero
  80e94c:	0011883a 	mov	r8,zero
  80e950:	01400084 	movi	r5,2
  80e954:	003f9c06 	br	80e7c8 <__alt_mem_onchip_mem+0xff78e7c8>
  80e958:	3446b03a 	or	r3,r6,r17
  80e95c:	18001c26 	beq	r3,zero,80e9d0 <__muldf3+0x2cc>
  80e960:	8800ce26 	beq	r17,zero,80ec9c <__muldf3+0x598>
  80e964:	8809883a 	mov	r4,r17
  80e968:	d9800215 	stw	r6,8(sp)
  80e96c:	da400115 	stw	r9,4(sp)
  80e970:	da800015 	stw	r10,0(sp)
  80e974:	080f91c0 	call	80f91c <__clzsi2>
  80e978:	d9800217 	ldw	r6,8(sp)
  80e97c:	da400117 	ldw	r9,4(sp)
  80e980:	da800017 	ldw	r10,0(sp)
  80e984:	113ffd44 	addi	r4,r2,-11
  80e988:	00c00704 	movi	r3,28
  80e98c:	1900bf16 	blt	r3,r4,80ec8c <__muldf3+0x588>
  80e990:	00c00744 	movi	r3,29
  80e994:	123ffe04 	addi	r8,r2,-8
  80e998:	1907c83a 	sub	r3,r3,r4
  80e99c:	8a22983a 	sll	r17,r17,r8
  80e9a0:	30c6d83a 	srl	r3,r6,r3
  80e9a4:	3210983a 	sll	r8,r6,r8
  80e9a8:	1c62b03a 	or	r17,r3,r17
  80e9ac:	1080fcc4 	addi	r2,r2,1011
  80e9b0:	0085c83a 	sub	r2,zero,r2
  80e9b4:	000b883a 	mov	r5,zero
  80e9b8:	003f8306 	br	80e7c8 <__alt_mem_onchip_mem+0xff78e7c8>
  80e9bc:	b02b883a 	mov	r21,r22
  80e9c0:	0081ffc4 	movi	r2,2047
  80e9c4:	000b883a 	mov	r5,zero
  80e9c8:	0029883a 	mov	r20,zero
  80e9cc:	003fac06 	br	80e880 <__alt_mem_onchip_mem+0xff78e880>
  80e9d0:	0023883a 	mov	r17,zero
  80e9d4:	0011883a 	mov	r8,zero
  80e9d8:	01400044 	movi	r5,1
  80e9dc:	003f7a06 	br	80e7c8 <__alt_mem_onchip_mem+0xff78e7c8>
  80e9e0:	014000c4 	movi	r5,3
  80e9e4:	003f7806 	br	80e7c8 <__alt_mem_onchip_mem+0xff78e7c8>
  80e9e8:	04c00104 	movi	r19,4
  80e9ec:	0021883a 	mov	r16,zero
  80e9f0:	0029883a 	mov	r20,zero
  80e9f4:	07000044 	movi	fp,1
  80e9f8:	003f6106 	br	80e780 <__alt_mem_onchip_mem+0xff78e780>
  80e9fc:	04c00304 	movi	r19,12
  80ea00:	070000c4 	movi	fp,3
  80ea04:	003f5e06 	br	80e780 <__alt_mem_onchip_mem+0xff78e780>
  80ea08:	01400434 	movhi	r5,16
  80ea0c:	002b883a 	mov	r21,zero
  80ea10:	297fffc4 	addi	r5,r5,-1
  80ea14:	053fffc4 	movi	r20,-1
  80ea18:	0081ffc4 	movi	r2,2047
  80ea1c:	003f9806 	br	80e880 <__alt_mem_onchip_mem+0xff78e880>
  80ea20:	8023883a 	mov	r17,r16
  80ea24:	a011883a 	mov	r8,r20
  80ea28:	e00b883a 	mov	r5,fp
  80ea2c:	003f8a06 	br	80e858 <__alt_mem_onchip_mem+0xff78e858>
  80ea30:	8023883a 	mov	r17,r16
  80ea34:	a011883a 	mov	r8,r20
  80ea38:	482d883a 	mov	r22,r9
  80ea3c:	e00b883a 	mov	r5,fp
  80ea40:	003f8506 	br	80e858 <__alt_mem_onchip_mem+0xff78e858>
  80ea44:	a00ad43a 	srli	r5,r20,16
  80ea48:	401ad43a 	srli	r13,r8,16
  80ea4c:	a53fffcc 	andi	r20,r20,65535
  80ea50:	423fffcc 	andi	r8,r8,65535
  80ea54:	4519383a 	mul	r12,r8,r20
  80ea58:	4147383a 	mul	r3,r8,r5
  80ea5c:	6d09383a 	mul	r4,r13,r20
  80ea60:	600cd43a 	srli	r6,r12,16
  80ea64:	2b5d383a 	mul	r14,r5,r13
  80ea68:	20c9883a 	add	r4,r4,r3
  80ea6c:	310d883a 	add	r6,r6,r4
  80ea70:	30c0022e 	bgeu	r6,r3,80ea7c <__muldf3+0x378>
  80ea74:	00c00074 	movhi	r3,1
  80ea78:	70dd883a 	add	r14,r14,r3
  80ea7c:	8826d43a 	srli	r19,r17,16
  80ea80:	8bffffcc 	andi	r15,r17,65535
  80ea84:	7d23383a 	mul	r17,r15,r20
  80ea88:	7949383a 	mul	r4,r15,r5
  80ea8c:	9d29383a 	mul	r20,r19,r20
  80ea90:	8814d43a 	srli	r10,r17,16
  80ea94:	3012943a 	slli	r9,r6,16
  80ea98:	a129883a 	add	r20,r20,r4
  80ea9c:	633fffcc 	andi	r12,r12,65535
  80eaa0:	5515883a 	add	r10,r10,r20
  80eaa4:	3006d43a 	srli	r3,r6,16
  80eaa8:	4b13883a 	add	r9,r9,r12
  80eaac:	2ccb383a 	mul	r5,r5,r19
  80eab0:	5100022e 	bgeu	r10,r4,80eabc <__muldf3+0x3b8>
  80eab4:	01000074 	movhi	r4,1
  80eab8:	290b883a 	add	r5,r5,r4
  80eabc:	802ad43a 	srli	r21,r16,16
  80eac0:	843fffcc 	andi	r16,r16,65535
  80eac4:	440d383a 	mul	r6,r8,r16
  80eac8:	4565383a 	mul	r18,r8,r21
  80eacc:	8349383a 	mul	r4,r16,r13
  80ead0:	500e943a 	slli	r7,r10,16
  80ead4:	3010d43a 	srli	r8,r6,16
  80ead8:	5028d43a 	srli	r20,r10,16
  80eadc:	2489883a 	add	r4,r4,r18
  80eae0:	8abfffcc 	andi	r10,r17,65535
  80eae4:	3a95883a 	add	r10,r7,r10
  80eae8:	4119883a 	add	r12,r8,r4
  80eaec:	a169883a 	add	r20,r20,r5
  80eaf0:	1a87883a 	add	r3,r3,r10
  80eaf4:	6d5b383a 	mul	r13,r13,r21
  80eaf8:	6480022e 	bgeu	r12,r18,80eb04 <__muldf3+0x400>
  80eafc:	01000074 	movhi	r4,1
  80eb00:	691b883a 	add	r13,r13,r4
  80eb04:	7c25383a 	mul	r18,r15,r16
  80eb08:	7d4b383a 	mul	r5,r15,r21
  80eb0c:	84cf383a 	mul	r7,r16,r19
  80eb10:	901ed43a 	srli	r15,r18,16
  80eb14:	6008d43a 	srli	r4,r12,16
  80eb18:	6010943a 	slli	r8,r12,16
  80eb1c:	394f883a 	add	r7,r7,r5
  80eb20:	333fffcc 	andi	r12,r6,65535
  80eb24:	79df883a 	add	r15,r15,r7
  80eb28:	235b883a 	add	r13,r4,r13
  80eb2c:	9d63383a 	mul	r17,r19,r21
  80eb30:	4309883a 	add	r4,r8,r12
  80eb34:	7940022e 	bgeu	r15,r5,80eb40 <__muldf3+0x43c>
  80eb38:	01400074 	movhi	r5,1
  80eb3c:	8963883a 	add	r17,r17,r5
  80eb40:	780a943a 	slli	r5,r15,16
  80eb44:	91bfffcc 	andi	r6,r18,65535
  80eb48:	70c7883a 	add	r3,r14,r3
  80eb4c:	298d883a 	add	r6,r5,r6
  80eb50:	1a8f803a 	cmpltu	r7,r3,r10
  80eb54:	350b883a 	add	r5,r6,r20
  80eb58:	20c7883a 	add	r3,r4,r3
  80eb5c:	3955883a 	add	r10,r7,r5
  80eb60:	1909803a 	cmpltu	r4,r3,r4
  80eb64:	6a91883a 	add	r8,r13,r10
  80eb68:	780cd43a 	srli	r6,r15,16
  80eb6c:	2219883a 	add	r12,r4,r8
  80eb70:	2d0b803a 	cmpltu	r5,r5,r20
  80eb74:	51cf803a 	cmpltu	r7,r10,r7
  80eb78:	29ceb03a 	or	r7,r5,r7
  80eb7c:	4351803a 	cmpltu	r8,r8,r13
  80eb80:	610b803a 	cmpltu	r5,r12,r4
  80eb84:	4148b03a 	or	r4,r8,r5
  80eb88:	398f883a 	add	r7,r7,r6
  80eb8c:	3909883a 	add	r4,r7,r4
  80eb90:	1810927a 	slli	r8,r3,9
  80eb94:	2449883a 	add	r4,r4,r17
  80eb98:	2008927a 	slli	r4,r4,9
  80eb9c:	6022d5fa 	srli	r17,r12,23
  80eba0:	1806d5fa 	srli	r3,r3,23
  80eba4:	4252b03a 	or	r9,r8,r9
  80eba8:	600a927a 	slli	r5,r12,9
  80ebac:	4810c03a 	cmpne	r8,r9,zero
  80ebb0:	2462b03a 	or	r17,r4,r17
  80ebb4:	40c6b03a 	or	r3,r8,r3
  80ebb8:	8900402c 	andhi	r4,r17,256
  80ebbc:	1950b03a 	or	r8,r3,r5
  80ebc0:	20000726 	beq	r4,zero,80ebe0 <__muldf3+0x4dc>
  80ebc4:	4006d07a 	srli	r3,r8,1
  80ebc8:	880497fa 	slli	r2,r17,31
  80ebcc:	4200004c 	andi	r8,r8,1
  80ebd0:	8822d07a 	srli	r17,r17,1
  80ebd4:	1a10b03a 	or	r8,r3,r8
  80ebd8:	1210b03a 	or	r8,r2,r8
  80ebdc:	5805883a 	mov	r2,r11
  80ebe0:	1140ffc4 	addi	r5,r2,1023
  80ebe4:	0140440e 	bge	zero,r5,80ecf8 <__muldf3+0x5f4>
  80ebe8:	40c001cc 	andi	r3,r8,7
  80ebec:	18000726 	beq	r3,zero,80ec0c <__muldf3+0x508>
  80ebf0:	40c003cc 	andi	r3,r8,15
  80ebf4:	01000104 	movi	r4,4
  80ebf8:	19000426 	beq	r3,r4,80ec0c <__muldf3+0x508>
  80ebfc:	4107883a 	add	r3,r8,r4
  80ec00:	1a11803a 	cmpltu	r8,r3,r8
  80ec04:	8a23883a 	add	r17,r17,r8
  80ec08:	1811883a 	mov	r8,r3
  80ec0c:	88c0402c 	andhi	r3,r17,256
  80ec10:	18000426 	beq	r3,zero,80ec24 <__muldf3+0x520>
  80ec14:	11410004 	addi	r5,r2,1024
  80ec18:	00bfc034 	movhi	r2,65280
  80ec1c:	10bfffc4 	addi	r2,r2,-1
  80ec20:	88a2703a 	and	r17,r17,r2
  80ec24:	0081ff84 	movi	r2,2046
  80ec28:	117f6416 	blt	r2,r5,80e9bc <__alt_mem_onchip_mem+0xff78e9bc>
  80ec2c:	8828977a 	slli	r20,r17,29
  80ec30:	4010d0fa 	srli	r8,r8,3
  80ec34:	8822927a 	slli	r17,r17,9
  80ec38:	2881ffcc 	andi	r2,r5,2047
  80ec3c:	a228b03a 	or	r20,r20,r8
  80ec40:	880ad33a 	srli	r5,r17,12
  80ec44:	b02b883a 	mov	r21,r22
  80ec48:	003f0d06 	br	80e880 <__alt_mem_onchip_mem+0xff78e880>
  80ec4c:	8080022c 	andhi	r2,r16,8
  80ec50:	10000926 	beq	r2,zero,80ec78 <__muldf3+0x574>
  80ec54:	8880022c 	andhi	r2,r17,8
  80ec58:	1000071e 	bne	r2,zero,80ec78 <__muldf3+0x574>
  80ec5c:	00800434 	movhi	r2,16
  80ec60:	89400234 	orhi	r5,r17,8
  80ec64:	10bfffc4 	addi	r2,r2,-1
  80ec68:	b82b883a 	mov	r21,r23
  80ec6c:	288a703a 	and	r5,r5,r2
  80ec70:	4029883a 	mov	r20,r8
  80ec74:	003f6806 	br	80ea18 <__alt_mem_onchip_mem+0xff78ea18>
  80ec78:	00800434 	movhi	r2,16
  80ec7c:	81400234 	orhi	r5,r16,8
  80ec80:	10bfffc4 	addi	r2,r2,-1
  80ec84:	288a703a 	and	r5,r5,r2
  80ec88:	003f6306 	br	80ea18 <__alt_mem_onchip_mem+0xff78ea18>
  80ec8c:	147ff604 	addi	r17,r2,-40
  80ec90:	3462983a 	sll	r17,r6,r17
  80ec94:	0011883a 	mov	r8,zero
  80ec98:	003f4406 	br	80e9ac <__alt_mem_onchip_mem+0xff78e9ac>
  80ec9c:	3009883a 	mov	r4,r6
  80eca0:	d9800215 	stw	r6,8(sp)
  80eca4:	da400115 	stw	r9,4(sp)
  80eca8:	da800015 	stw	r10,0(sp)
  80ecac:	080f91c0 	call	80f91c <__clzsi2>
  80ecb0:	10800804 	addi	r2,r2,32
  80ecb4:	da800017 	ldw	r10,0(sp)
  80ecb8:	da400117 	ldw	r9,4(sp)
  80ecbc:	d9800217 	ldw	r6,8(sp)
  80ecc0:	003f3006 	br	80e984 <__alt_mem_onchip_mem+0xff78e984>
  80ecc4:	143ff604 	addi	r16,r2,-40
  80ecc8:	9c20983a 	sll	r16,r19,r16
  80eccc:	0029883a 	mov	r20,zero
  80ecd0:	003f1606 	br	80e92c <__alt_mem_onchip_mem+0xff78e92c>
  80ecd4:	d9800215 	stw	r6,8(sp)
  80ecd8:	d9c00015 	stw	r7,0(sp)
  80ecdc:	da400115 	stw	r9,4(sp)
  80ece0:	080f91c0 	call	80f91c <__clzsi2>
  80ece4:	10800804 	addi	r2,r2,32
  80ece8:	da400117 	ldw	r9,4(sp)
  80ecec:	d9c00017 	ldw	r7,0(sp)
  80ecf0:	d9800217 	ldw	r6,8(sp)
  80ecf4:	003f0306 	br	80e904 <__alt_mem_onchip_mem+0xff78e904>
  80ecf8:	00c00044 	movi	r3,1
  80ecfc:	1947c83a 	sub	r3,r3,r5
  80ed00:	00800e04 	movi	r2,56
  80ed04:	10feda16 	blt	r2,r3,80e870 <__alt_mem_onchip_mem+0xff78e870>
  80ed08:	008007c4 	movi	r2,31
  80ed0c:	10c01b16 	blt	r2,r3,80ed7c <__muldf3+0x678>
  80ed10:	00800804 	movi	r2,32
  80ed14:	10c5c83a 	sub	r2,r2,r3
  80ed18:	888a983a 	sll	r5,r17,r2
  80ed1c:	40c8d83a 	srl	r4,r8,r3
  80ed20:	4084983a 	sll	r2,r8,r2
  80ed24:	88e2d83a 	srl	r17,r17,r3
  80ed28:	2906b03a 	or	r3,r5,r4
  80ed2c:	1004c03a 	cmpne	r2,r2,zero
  80ed30:	1886b03a 	or	r3,r3,r2
  80ed34:	188001cc 	andi	r2,r3,7
  80ed38:	10000726 	beq	r2,zero,80ed58 <__muldf3+0x654>
  80ed3c:	188003cc 	andi	r2,r3,15
  80ed40:	01000104 	movi	r4,4
  80ed44:	11000426 	beq	r2,r4,80ed58 <__muldf3+0x654>
  80ed48:	1805883a 	mov	r2,r3
  80ed4c:	10c00104 	addi	r3,r2,4
  80ed50:	1885803a 	cmpltu	r2,r3,r2
  80ed54:	88a3883a 	add	r17,r17,r2
  80ed58:	8880202c 	andhi	r2,r17,128
  80ed5c:	10001c26 	beq	r2,zero,80edd0 <__muldf3+0x6cc>
  80ed60:	b02b883a 	mov	r21,r22
  80ed64:	00800044 	movi	r2,1
  80ed68:	000b883a 	mov	r5,zero
  80ed6c:	0029883a 	mov	r20,zero
  80ed70:	003ec306 	br	80e880 <__alt_mem_onchip_mem+0xff78e880>
  80ed74:	5805883a 	mov	r2,r11
  80ed78:	003f9906 	br	80ebe0 <__alt_mem_onchip_mem+0xff78ebe0>
  80ed7c:	00bff844 	movi	r2,-31
  80ed80:	1145c83a 	sub	r2,r2,r5
  80ed84:	8888d83a 	srl	r4,r17,r2
  80ed88:	00800804 	movi	r2,32
  80ed8c:	18801a26 	beq	r3,r2,80edf8 <__muldf3+0x6f4>
  80ed90:	00801004 	movi	r2,64
  80ed94:	10c5c83a 	sub	r2,r2,r3
  80ed98:	8884983a 	sll	r2,r17,r2
  80ed9c:	1204b03a 	or	r2,r2,r8
  80eda0:	1004c03a 	cmpne	r2,r2,zero
  80eda4:	2084b03a 	or	r2,r4,r2
  80eda8:	144001cc 	andi	r17,r2,7
  80edac:	88000d1e 	bne	r17,zero,80ede4 <__muldf3+0x6e0>
  80edb0:	000b883a 	mov	r5,zero
  80edb4:	1028d0fa 	srli	r20,r2,3
  80edb8:	b02b883a 	mov	r21,r22
  80edbc:	0005883a 	mov	r2,zero
  80edc0:	a468b03a 	or	r20,r20,r17
  80edc4:	003eae06 	br	80e880 <__alt_mem_onchip_mem+0xff78e880>
  80edc8:	1007883a 	mov	r3,r2
  80edcc:	0023883a 	mov	r17,zero
  80edd0:	880a927a 	slli	r5,r17,9
  80edd4:	1805883a 	mov	r2,r3
  80edd8:	8822977a 	slli	r17,r17,29
  80eddc:	280ad33a 	srli	r5,r5,12
  80ede0:	003ff406 	br	80edb4 <__alt_mem_onchip_mem+0xff78edb4>
  80ede4:	10c003cc 	andi	r3,r2,15
  80ede8:	01000104 	movi	r4,4
  80edec:	193ff626 	beq	r3,r4,80edc8 <__alt_mem_onchip_mem+0xff78edc8>
  80edf0:	0023883a 	mov	r17,zero
  80edf4:	003fd506 	br	80ed4c <__alt_mem_onchip_mem+0xff78ed4c>
  80edf8:	0005883a 	mov	r2,zero
  80edfc:	003fe706 	br	80ed9c <__alt_mem_onchip_mem+0xff78ed9c>
  80ee00:	00800434 	movhi	r2,16
  80ee04:	89400234 	orhi	r5,r17,8
  80ee08:	10bfffc4 	addi	r2,r2,-1
  80ee0c:	b02b883a 	mov	r21,r22
  80ee10:	288a703a 	and	r5,r5,r2
  80ee14:	4029883a 	mov	r20,r8
  80ee18:	003eff06 	br	80ea18 <__alt_mem_onchip_mem+0xff78ea18>

0080ee1c <__subdf3>:
  80ee1c:	02000434 	movhi	r8,16
  80ee20:	423fffc4 	addi	r8,r8,-1
  80ee24:	defffb04 	addi	sp,sp,-20
  80ee28:	2a14703a 	and	r10,r5,r8
  80ee2c:	3812d53a 	srli	r9,r7,20
  80ee30:	3a10703a 	and	r8,r7,r8
  80ee34:	2006d77a 	srli	r3,r4,29
  80ee38:	3004d77a 	srli	r2,r6,29
  80ee3c:	dc000015 	stw	r16,0(sp)
  80ee40:	501490fa 	slli	r10,r10,3
  80ee44:	2820d53a 	srli	r16,r5,20
  80ee48:	401090fa 	slli	r8,r8,3
  80ee4c:	dc800215 	stw	r18,8(sp)
  80ee50:	dc400115 	stw	r17,4(sp)
  80ee54:	dfc00415 	stw	ra,16(sp)
  80ee58:	202290fa 	slli	r17,r4,3
  80ee5c:	dcc00315 	stw	r19,12(sp)
  80ee60:	4a41ffcc 	andi	r9,r9,2047
  80ee64:	0101ffc4 	movi	r4,2047
  80ee68:	2824d7fa 	srli	r18,r5,31
  80ee6c:	8401ffcc 	andi	r16,r16,2047
  80ee70:	50c6b03a 	or	r3,r10,r3
  80ee74:	380ed7fa 	srli	r7,r7,31
  80ee78:	408ab03a 	or	r5,r8,r2
  80ee7c:	300c90fa 	slli	r6,r6,3
  80ee80:	49009626 	beq	r9,r4,80f0dc <__subdf3+0x2c0>
  80ee84:	39c0005c 	xori	r7,r7,1
  80ee88:	8245c83a 	sub	r2,r16,r9
  80ee8c:	3c807426 	beq	r7,r18,80f060 <__subdf3+0x244>
  80ee90:	0080af0e 	bge	zero,r2,80f150 <__subdf3+0x334>
  80ee94:	48002a1e 	bne	r9,zero,80ef40 <__subdf3+0x124>
  80ee98:	2988b03a 	or	r4,r5,r6
  80ee9c:	20009a1e 	bne	r4,zero,80f108 <__subdf3+0x2ec>
  80eea0:	888001cc 	andi	r2,r17,7
  80eea4:	10000726 	beq	r2,zero,80eec4 <__subdf3+0xa8>
  80eea8:	888003cc 	andi	r2,r17,15
  80eeac:	01000104 	movi	r4,4
  80eeb0:	11000426 	beq	r2,r4,80eec4 <__subdf3+0xa8>
  80eeb4:	890b883a 	add	r5,r17,r4
  80eeb8:	2c63803a 	cmpltu	r17,r5,r17
  80eebc:	1c47883a 	add	r3,r3,r17
  80eec0:	2823883a 	mov	r17,r5
  80eec4:	1880202c 	andhi	r2,r3,128
  80eec8:	10005926 	beq	r2,zero,80f030 <__subdf3+0x214>
  80eecc:	84000044 	addi	r16,r16,1
  80eed0:	0081ffc4 	movi	r2,2047
  80eed4:	8080be26 	beq	r16,r2,80f1d0 <__subdf3+0x3b4>
  80eed8:	017fe034 	movhi	r5,65408
  80eedc:	297fffc4 	addi	r5,r5,-1
  80eee0:	1946703a 	and	r3,r3,r5
  80eee4:	1804977a 	slli	r2,r3,29
  80eee8:	1806927a 	slli	r3,r3,9
  80eeec:	8822d0fa 	srli	r17,r17,3
  80eef0:	8401ffcc 	andi	r16,r16,2047
  80eef4:	180ad33a 	srli	r5,r3,12
  80eef8:	9100004c 	andi	r4,r18,1
  80eefc:	1444b03a 	or	r2,r2,r17
  80ef00:	80c1ffcc 	andi	r3,r16,2047
  80ef04:	1820953a 	slli	r16,r3,20
  80ef08:	20c03fcc 	andi	r3,r4,255
  80ef0c:	180897fa 	slli	r4,r3,31
  80ef10:	00c00434 	movhi	r3,16
  80ef14:	18ffffc4 	addi	r3,r3,-1
  80ef18:	28c6703a 	and	r3,r5,r3
  80ef1c:	1c06b03a 	or	r3,r3,r16
  80ef20:	1906b03a 	or	r3,r3,r4
  80ef24:	dfc00417 	ldw	ra,16(sp)
  80ef28:	dcc00317 	ldw	r19,12(sp)
  80ef2c:	dc800217 	ldw	r18,8(sp)
  80ef30:	dc400117 	ldw	r17,4(sp)
  80ef34:	dc000017 	ldw	r16,0(sp)
  80ef38:	dec00504 	addi	sp,sp,20
  80ef3c:	f800283a 	ret
  80ef40:	0101ffc4 	movi	r4,2047
  80ef44:	813fd626 	beq	r16,r4,80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80ef48:	29402034 	orhi	r5,r5,128
  80ef4c:	01000e04 	movi	r4,56
  80ef50:	2080a316 	blt	r4,r2,80f1e0 <__subdf3+0x3c4>
  80ef54:	010007c4 	movi	r4,31
  80ef58:	2080c616 	blt	r4,r2,80f274 <__subdf3+0x458>
  80ef5c:	01000804 	movi	r4,32
  80ef60:	2089c83a 	sub	r4,r4,r2
  80ef64:	2910983a 	sll	r8,r5,r4
  80ef68:	308ed83a 	srl	r7,r6,r2
  80ef6c:	3108983a 	sll	r4,r6,r4
  80ef70:	2884d83a 	srl	r2,r5,r2
  80ef74:	41ccb03a 	or	r6,r8,r7
  80ef78:	2008c03a 	cmpne	r4,r4,zero
  80ef7c:	310cb03a 	or	r6,r6,r4
  80ef80:	898dc83a 	sub	r6,r17,r6
  80ef84:	89a3803a 	cmpltu	r17,r17,r6
  80ef88:	1887c83a 	sub	r3,r3,r2
  80ef8c:	1c47c83a 	sub	r3,r3,r17
  80ef90:	3023883a 	mov	r17,r6
  80ef94:	1880202c 	andhi	r2,r3,128
  80ef98:	10002326 	beq	r2,zero,80f028 <__subdf3+0x20c>
  80ef9c:	04c02034 	movhi	r19,128
  80efa0:	9cffffc4 	addi	r19,r19,-1
  80efa4:	1ce6703a 	and	r19,r3,r19
  80efa8:	98007a26 	beq	r19,zero,80f194 <__subdf3+0x378>
  80efac:	9809883a 	mov	r4,r19
  80efb0:	080f91c0 	call	80f91c <__clzsi2>
  80efb4:	113ffe04 	addi	r4,r2,-8
  80efb8:	00c007c4 	movi	r3,31
  80efbc:	19007b16 	blt	r3,r4,80f1ac <__subdf3+0x390>
  80efc0:	00800804 	movi	r2,32
  80efc4:	1105c83a 	sub	r2,r2,r4
  80efc8:	8884d83a 	srl	r2,r17,r2
  80efcc:	9906983a 	sll	r3,r19,r4
  80efd0:	8922983a 	sll	r17,r17,r4
  80efd4:	10c4b03a 	or	r2,r2,r3
  80efd8:	24007816 	blt	r4,r16,80f1bc <__subdf3+0x3a0>
  80efdc:	2421c83a 	sub	r16,r4,r16
  80efe0:	80c00044 	addi	r3,r16,1
  80efe4:	010007c4 	movi	r4,31
  80efe8:	20c09516 	blt	r4,r3,80f240 <__subdf3+0x424>
  80efec:	01400804 	movi	r5,32
  80eff0:	28cbc83a 	sub	r5,r5,r3
  80eff4:	88c8d83a 	srl	r4,r17,r3
  80eff8:	8962983a 	sll	r17,r17,r5
  80effc:	114a983a 	sll	r5,r2,r5
  80f000:	10c6d83a 	srl	r3,r2,r3
  80f004:	8804c03a 	cmpne	r2,r17,zero
  80f008:	290ab03a 	or	r5,r5,r4
  80f00c:	28a2b03a 	or	r17,r5,r2
  80f010:	0021883a 	mov	r16,zero
  80f014:	003fa206 	br	80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80f018:	2090b03a 	or	r8,r4,r2
  80f01c:	40018e26 	beq	r8,zero,80f658 <__subdf3+0x83c>
  80f020:	1007883a 	mov	r3,r2
  80f024:	2023883a 	mov	r17,r4
  80f028:	888001cc 	andi	r2,r17,7
  80f02c:	103f9e1e 	bne	r2,zero,80eea8 <__alt_mem_onchip_mem+0xff78eea8>
  80f030:	1804977a 	slli	r2,r3,29
  80f034:	8822d0fa 	srli	r17,r17,3
  80f038:	1810d0fa 	srli	r8,r3,3
  80f03c:	9100004c 	andi	r4,r18,1
  80f040:	1444b03a 	or	r2,r2,r17
  80f044:	00c1ffc4 	movi	r3,2047
  80f048:	80c02826 	beq	r16,r3,80f0ec <__subdf3+0x2d0>
  80f04c:	01400434 	movhi	r5,16
  80f050:	297fffc4 	addi	r5,r5,-1
  80f054:	80e0703a 	and	r16,r16,r3
  80f058:	414a703a 	and	r5,r8,r5
  80f05c:	003fa806 	br	80ef00 <__alt_mem_onchip_mem+0xff78ef00>
  80f060:	0080630e 	bge	zero,r2,80f1f0 <__subdf3+0x3d4>
  80f064:	48003026 	beq	r9,zero,80f128 <__subdf3+0x30c>
  80f068:	0101ffc4 	movi	r4,2047
  80f06c:	813f8c26 	beq	r16,r4,80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80f070:	29402034 	orhi	r5,r5,128
  80f074:	01000e04 	movi	r4,56
  80f078:	2080a90e 	bge	r4,r2,80f320 <__subdf3+0x504>
  80f07c:	298cb03a 	or	r6,r5,r6
  80f080:	3012c03a 	cmpne	r9,r6,zero
  80f084:	0005883a 	mov	r2,zero
  80f088:	4c53883a 	add	r9,r9,r17
  80f08c:	4c63803a 	cmpltu	r17,r9,r17
  80f090:	10c7883a 	add	r3,r2,r3
  80f094:	88c7883a 	add	r3,r17,r3
  80f098:	4823883a 	mov	r17,r9
  80f09c:	1880202c 	andhi	r2,r3,128
  80f0a0:	1000d026 	beq	r2,zero,80f3e4 <__subdf3+0x5c8>
  80f0a4:	84000044 	addi	r16,r16,1
  80f0a8:	0081ffc4 	movi	r2,2047
  80f0ac:	8080fe26 	beq	r16,r2,80f4a8 <__subdf3+0x68c>
  80f0b0:	00bfe034 	movhi	r2,65408
  80f0b4:	10bfffc4 	addi	r2,r2,-1
  80f0b8:	1886703a 	and	r3,r3,r2
  80f0bc:	880ad07a 	srli	r5,r17,1
  80f0c0:	180497fa 	slli	r2,r3,31
  80f0c4:	8900004c 	andi	r4,r17,1
  80f0c8:	2922b03a 	or	r17,r5,r4
  80f0cc:	1806d07a 	srli	r3,r3,1
  80f0d0:	1462b03a 	or	r17,r2,r17
  80f0d4:	3825883a 	mov	r18,r7
  80f0d8:	003f7106 	br	80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80f0dc:	2984b03a 	or	r2,r5,r6
  80f0e0:	103f6826 	beq	r2,zero,80ee84 <__alt_mem_onchip_mem+0xff78ee84>
  80f0e4:	39c03fcc 	andi	r7,r7,255
  80f0e8:	003f6706 	br	80ee88 <__alt_mem_onchip_mem+0xff78ee88>
  80f0ec:	4086b03a 	or	r3,r8,r2
  80f0f0:	18015226 	beq	r3,zero,80f63c <__subdf3+0x820>
  80f0f4:	00c00434 	movhi	r3,16
  80f0f8:	41400234 	orhi	r5,r8,8
  80f0fc:	18ffffc4 	addi	r3,r3,-1
  80f100:	28ca703a 	and	r5,r5,r3
  80f104:	003f7e06 	br	80ef00 <__alt_mem_onchip_mem+0xff78ef00>
  80f108:	10bfffc4 	addi	r2,r2,-1
  80f10c:	1000491e 	bne	r2,zero,80f234 <__subdf3+0x418>
  80f110:	898fc83a 	sub	r7,r17,r6
  80f114:	89e3803a 	cmpltu	r17,r17,r7
  80f118:	1947c83a 	sub	r3,r3,r5
  80f11c:	1c47c83a 	sub	r3,r3,r17
  80f120:	3823883a 	mov	r17,r7
  80f124:	003f9b06 	br	80ef94 <__alt_mem_onchip_mem+0xff78ef94>
  80f128:	2988b03a 	or	r4,r5,r6
  80f12c:	203f5c26 	beq	r4,zero,80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80f130:	10bfffc4 	addi	r2,r2,-1
  80f134:	1000931e 	bne	r2,zero,80f384 <__subdf3+0x568>
  80f138:	898d883a 	add	r6,r17,r6
  80f13c:	3463803a 	cmpltu	r17,r6,r17
  80f140:	1947883a 	add	r3,r3,r5
  80f144:	88c7883a 	add	r3,r17,r3
  80f148:	3023883a 	mov	r17,r6
  80f14c:	003fd306 	br	80f09c <__alt_mem_onchip_mem+0xff78f09c>
  80f150:	1000541e 	bne	r2,zero,80f2a4 <__subdf3+0x488>
  80f154:	80800044 	addi	r2,r16,1
  80f158:	1081ffcc 	andi	r2,r2,2047
  80f15c:	01000044 	movi	r4,1
  80f160:	2080a20e 	bge	r4,r2,80f3ec <__subdf3+0x5d0>
  80f164:	8989c83a 	sub	r4,r17,r6
  80f168:	8905803a 	cmpltu	r2,r17,r4
  80f16c:	1967c83a 	sub	r19,r3,r5
  80f170:	98a7c83a 	sub	r19,r19,r2
  80f174:	9880202c 	andhi	r2,r19,128
  80f178:	10006326 	beq	r2,zero,80f308 <__subdf3+0x4ec>
  80f17c:	3463c83a 	sub	r17,r6,r17
  80f180:	28c7c83a 	sub	r3,r5,r3
  80f184:	344d803a 	cmpltu	r6,r6,r17
  80f188:	19a7c83a 	sub	r19,r3,r6
  80f18c:	3825883a 	mov	r18,r7
  80f190:	983f861e 	bne	r19,zero,80efac <__alt_mem_onchip_mem+0xff78efac>
  80f194:	8809883a 	mov	r4,r17
  80f198:	080f91c0 	call	80f91c <__clzsi2>
  80f19c:	10800804 	addi	r2,r2,32
  80f1a0:	113ffe04 	addi	r4,r2,-8
  80f1a4:	00c007c4 	movi	r3,31
  80f1a8:	193f850e 	bge	r3,r4,80efc0 <__alt_mem_onchip_mem+0xff78efc0>
  80f1ac:	10bff604 	addi	r2,r2,-40
  80f1b0:	8884983a 	sll	r2,r17,r2
  80f1b4:	0023883a 	mov	r17,zero
  80f1b8:	243f880e 	bge	r4,r16,80efdc <__alt_mem_onchip_mem+0xff78efdc>
  80f1bc:	00ffe034 	movhi	r3,65408
  80f1c0:	18ffffc4 	addi	r3,r3,-1
  80f1c4:	8121c83a 	sub	r16,r16,r4
  80f1c8:	10c6703a 	and	r3,r2,r3
  80f1cc:	003f3406 	br	80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80f1d0:	9100004c 	andi	r4,r18,1
  80f1d4:	000b883a 	mov	r5,zero
  80f1d8:	0005883a 	mov	r2,zero
  80f1dc:	003f4806 	br	80ef00 <__alt_mem_onchip_mem+0xff78ef00>
  80f1e0:	298cb03a 	or	r6,r5,r6
  80f1e4:	300cc03a 	cmpne	r6,r6,zero
  80f1e8:	0005883a 	mov	r2,zero
  80f1ec:	003f6406 	br	80ef80 <__alt_mem_onchip_mem+0xff78ef80>
  80f1f0:	10009a1e 	bne	r2,zero,80f45c <__subdf3+0x640>
  80f1f4:	82400044 	addi	r9,r16,1
  80f1f8:	4881ffcc 	andi	r2,r9,2047
  80f1fc:	02800044 	movi	r10,1
  80f200:	5080670e 	bge	r10,r2,80f3a0 <__subdf3+0x584>
  80f204:	0081ffc4 	movi	r2,2047
  80f208:	4880af26 	beq	r9,r2,80f4c8 <__subdf3+0x6ac>
  80f20c:	898d883a 	add	r6,r17,r6
  80f210:	1945883a 	add	r2,r3,r5
  80f214:	3447803a 	cmpltu	r3,r6,r17
  80f218:	1887883a 	add	r3,r3,r2
  80f21c:	182297fa 	slli	r17,r3,31
  80f220:	300cd07a 	srli	r6,r6,1
  80f224:	1806d07a 	srli	r3,r3,1
  80f228:	4821883a 	mov	r16,r9
  80f22c:	89a2b03a 	or	r17,r17,r6
  80f230:	003f1b06 	br	80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80f234:	0101ffc4 	movi	r4,2047
  80f238:	813f441e 	bne	r16,r4,80ef4c <__alt_mem_onchip_mem+0xff78ef4c>
  80f23c:	003f1806 	br	80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80f240:	843ff844 	addi	r16,r16,-31
  80f244:	01400804 	movi	r5,32
  80f248:	1408d83a 	srl	r4,r2,r16
  80f24c:	19405026 	beq	r3,r5,80f390 <__subdf3+0x574>
  80f250:	01401004 	movi	r5,64
  80f254:	28c7c83a 	sub	r3,r5,r3
  80f258:	10c4983a 	sll	r2,r2,r3
  80f25c:	88a2b03a 	or	r17,r17,r2
  80f260:	8822c03a 	cmpne	r17,r17,zero
  80f264:	2462b03a 	or	r17,r4,r17
  80f268:	0007883a 	mov	r3,zero
  80f26c:	0021883a 	mov	r16,zero
  80f270:	003f6d06 	br	80f028 <__alt_mem_onchip_mem+0xff78f028>
  80f274:	11fff804 	addi	r7,r2,-32
  80f278:	01000804 	movi	r4,32
  80f27c:	29ced83a 	srl	r7,r5,r7
  80f280:	11004526 	beq	r2,r4,80f398 <__subdf3+0x57c>
  80f284:	01001004 	movi	r4,64
  80f288:	2089c83a 	sub	r4,r4,r2
  80f28c:	2904983a 	sll	r2,r5,r4
  80f290:	118cb03a 	or	r6,r2,r6
  80f294:	300cc03a 	cmpne	r6,r6,zero
  80f298:	398cb03a 	or	r6,r7,r6
  80f29c:	0005883a 	mov	r2,zero
  80f2a0:	003f3706 	br	80ef80 <__alt_mem_onchip_mem+0xff78ef80>
  80f2a4:	80002a26 	beq	r16,zero,80f350 <__subdf3+0x534>
  80f2a8:	0101ffc4 	movi	r4,2047
  80f2ac:	49006626 	beq	r9,r4,80f448 <__subdf3+0x62c>
  80f2b0:	0085c83a 	sub	r2,zero,r2
  80f2b4:	18c02034 	orhi	r3,r3,128
  80f2b8:	01000e04 	movi	r4,56
  80f2bc:	20807e16 	blt	r4,r2,80f4b8 <__subdf3+0x69c>
  80f2c0:	010007c4 	movi	r4,31
  80f2c4:	2080e716 	blt	r4,r2,80f664 <__subdf3+0x848>
  80f2c8:	01000804 	movi	r4,32
  80f2cc:	2089c83a 	sub	r4,r4,r2
  80f2d0:	1914983a 	sll	r10,r3,r4
  80f2d4:	8890d83a 	srl	r8,r17,r2
  80f2d8:	8908983a 	sll	r4,r17,r4
  80f2dc:	1884d83a 	srl	r2,r3,r2
  80f2e0:	5222b03a 	or	r17,r10,r8
  80f2e4:	2006c03a 	cmpne	r3,r4,zero
  80f2e8:	88e2b03a 	or	r17,r17,r3
  80f2ec:	3463c83a 	sub	r17,r6,r17
  80f2f0:	2885c83a 	sub	r2,r5,r2
  80f2f4:	344d803a 	cmpltu	r6,r6,r17
  80f2f8:	1187c83a 	sub	r3,r2,r6
  80f2fc:	4821883a 	mov	r16,r9
  80f300:	3825883a 	mov	r18,r7
  80f304:	003f2306 	br	80ef94 <__alt_mem_onchip_mem+0xff78ef94>
  80f308:	24d0b03a 	or	r8,r4,r19
  80f30c:	40001b1e 	bne	r8,zero,80f37c <__subdf3+0x560>
  80f310:	0005883a 	mov	r2,zero
  80f314:	0009883a 	mov	r4,zero
  80f318:	0021883a 	mov	r16,zero
  80f31c:	003f4906 	br	80f044 <__alt_mem_onchip_mem+0xff78f044>
  80f320:	010007c4 	movi	r4,31
  80f324:	20803a16 	blt	r4,r2,80f410 <__subdf3+0x5f4>
  80f328:	01000804 	movi	r4,32
  80f32c:	2089c83a 	sub	r4,r4,r2
  80f330:	2912983a 	sll	r9,r5,r4
  80f334:	3090d83a 	srl	r8,r6,r2
  80f338:	3108983a 	sll	r4,r6,r4
  80f33c:	2884d83a 	srl	r2,r5,r2
  80f340:	4a12b03a 	or	r9,r9,r8
  80f344:	2008c03a 	cmpne	r4,r4,zero
  80f348:	4912b03a 	or	r9,r9,r4
  80f34c:	003f4e06 	br	80f088 <__alt_mem_onchip_mem+0xff78f088>
  80f350:	1c48b03a 	or	r4,r3,r17
  80f354:	20003c26 	beq	r4,zero,80f448 <__subdf3+0x62c>
  80f358:	0084303a 	nor	r2,zero,r2
  80f35c:	1000381e 	bne	r2,zero,80f440 <__subdf3+0x624>
  80f360:	3463c83a 	sub	r17,r6,r17
  80f364:	28c5c83a 	sub	r2,r5,r3
  80f368:	344d803a 	cmpltu	r6,r6,r17
  80f36c:	1187c83a 	sub	r3,r2,r6
  80f370:	4821883a 	mov	r16,r9
  80f374:	3825883a 	mov	r18,r7
  80f378:	003f0606 	br	80ef94 <__alt_mem_onchip_mem+0xff78ef94>
  80f37c:	2023883a 	mov	r17,r4
  80f380:	003f0906 	br	80efa8 <__alt_mem_onchip_mem+0xff78efa8>
  80f384:	0101ffc4 	movi	r4,2047
  80f388:	813f3a1e 	bne	r16,r4,80f074 <__alt_mem_onchip_mem+0xff78f074>
  80f38c:	003ec406 	br	80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80f390:	0005883a 	mov	r2,zero
  80f394:	003fb106 	br	80f25c <__alt_mem_onchip_mem+0xff78f25c>
  80f398:	0005883a 	mov	r2,zero
  80f39c:	003fbc06 	br	80f290 <__alt_mem_onchip_mem+0xff78f290>
  80f3a0:	1c44b03a 	or	r2,r3,r17
  80f3a4:	80008e1e 	bne	r16,zero,80f5e0 <__subdf3+0x7c4>
  80f3a8:	1000c826 	beq	r2,zero,80f6cc <__subdf3+0x8b0>
  80f3ac:	2984b03a 	or	r2,r5,r6
  80f3b0:	103ebb26 	beq	r2,zero,80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80f3b4:	8989883a 	add	r4,r17,r6
  80f3b8:	1945883a 	add	r2,r3,r5
  80f3bc:	2447803a 	cmpltu	r3,r4,r17
  80f3c0:	1887883a 	add	r3,r3,r2
  80f3c4:	1880202c 	andhi	r2,r3,128
  80f3c8:	2023883a 	mov	r17,r4
  80f3cc:	103f1626 	beq	r2,zero,80f028 <__alt_mem_onchip_mem+0xff78f028>
  80f3d0:	00bfe034 	movhi	r2,65408
  80f3d4:	10bfffc4 	addi	r2,r2,-1
  80f3d8:	5021883a 	mov	r16,r10
  80f3dc:	1886703a 	and	r3,r3,r2
  80f3e0:	003eaf06 	br	80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80f3e4:	3825883a 	mov	r18,r7
  80f3e8:	003f0f06 	br	80f028 <__alt_mem_onchip_mem+0xff78f028>
  80f3ec:	1c44b03a 	or	r2,r3,r17
  80f3f0:	8000251e 	bne	r16,zero,80f488 <__subdf3+0x66c>
  80f3f4:	1000661e 	bne	r2,zero,80f590 <__subdf3+0x774>
  80f3f8:	2990b03a 	or	r8,r5,r6
  80f3fc:	40009626 	beq	r8,zero,80f658 <__subdf3+0x83c>
  80f400:	2807883a 	mov	r3,r5
  80f404:	3023883a 	mov	r17,r6
  80f408:	3825883a 	mov	r18,r7
  80f40c:	003ea406 	br	80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80f410:	127ff804 	addi	r9,r2,-32
  80f414:	01000804 	movi	r4,32
  80f418:	2a52d83a 	srl	r9,r5,r9
  80f41c:	11008c26 	beq	r2,r4,80f650 <__subdf3+0x834>
  80f420:	01001004 	movi	r4,64
  80f424:	2085c83a 	sub	r2,r4,r2
  80f428:	2884983a 	sll	r2,r5,r2
  80f42c:	118cb03a 	or	r6,r2,r6
  80f430:	300cc03a 	cmpne	r6,r6,zero
  80f434:	4992b03a 	or	r9,r9,r6
  80f438:	0005883a 	mov	r2,zero
  80f43c:	003f1206 	br	80f088 <__alt_mem_onchip_mem+0xff78f088>
  80f440:	0101ffc4 	movi	r4,2047
  80f444:	493f9c1e 	bne	r9,r4,80f2b8 <__alt_mem_onchip_mem+0xff78f2b8>
  80f448:	2807883a 	mov	r3,r5
  80f44c:	3023883a 	mov	r17,r6
  80f450:	4821883a 	mov	r16,r9
  80f454:	3825883a 	mov	r18,r7
  80f458:	003e9106 	br	80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80f45c:	80001f1e 	bne	r16,zero,80f4dc <__subdf3+0x6c0>
  80f460:	1c48b03a 	or	r4,r3,r17
  80f464:	20005a26 	beq	r4,zero,80f5d0 <__subdf3+0x7b4>
  80f468:	0084303a 	nor	r2,zero,r2
  80f46c:	1000561e 	bne	r2,zero,80f5c8 <__subdf3+0x7ac>
  80f470:	89a3883a 	add	r17,r17,r6
  80f474:	1945883a 	add	r2,r3,r5
  80f478:	898d803a 	cmpltu	r6,r17,r6
  80f47c:	3087883a 	add	r3,r6,r2
  80f480:	4821883a 	mov	r16,r9
  80f484:	003f0506 	br	80f09c <__alt_mem_onchip_mem+0xff78f09c>
  80f488:	10002b1e 	bne	r2,zero,80f538 <__subdf3+0x71c>
  80f48c:	2984b03a 	or	r2,r5,r6
  80f490:	10008026 	beq	r2,zero,80f694 <__subdf3+0x878>
  80f494:	2807883a 	mov	r3,r5
  80f498:	3023883a 	mov	r17,r6
  80f49c:	3825883a 	mov	r18,r7
  80f4a0:	0401ffc4 	movi	r16,2047
  80f4a4:	003e7e06 	br	80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80f4a8:	3809883a 	mov	r4,r7
  80f4ac:	0011883a 	mov	r8,zero
  80f4b0:	0005883a 	mov	r2,zero
  80f4b4:	003ee306 	br	80f044 <__alt_mem_onchip_mem+0xff78f044>
  80f4b8:	1c62b03a 	or	r17,r3,r17
  80f4bc:	8822c03a 	cmpne	r17,r17,zero
  80f4c0:	0005883a 	mov	r2,zero
  80f4c4:	003f8906 	br	80f2ec <__alt_mem_onchip_mem+0xff78f2ec>
  80f4c8:	3809883a 	mov	r4,r7
  80f4cc:	4821883a 	mov	r16,r9
  80f4d0:	0011883a 	mov	r8,zero
  80f4d4:	0005883a 	mov	r2,zero
  80f4d8:	003eda06 	br	80f044 <__alt_mem_onchip_mem+0xff78f044>
  80f4dc:	0101ffc4 	movi	r4,2047
  80f4e0:	49003b26 	beq	r9,r4,80f5d0 <__subdf3+0x7b4>
  80f4e4:	0085c83a 	sub	r2,zero,r2
  80f4e8:	18c02034 	orhi	r3,r3,128
  80f4ec:	01000e04 	movi	r4,56
  80f4f0:	20806e16 	blt	r4,r2,80f6ac <__subdf3+0x890>
  80f4f4:	010007c4 	movi	r4,31
  80f4f8:	20807716 	blt	r4,r2,80f6d8 <__subdf3+0x8bc>
  80f4fc:	01000804 	movi	r4,32
  80f500:	2089c83a 	sub	r4,r4,r2
  80f504:	1914983a 	sll	r10,r3,r4
  80f508:	8890d83a 	srl	r8,r17,r2
  80f50c:	8908983a 	sll	r4,r17,r4
  80f510:	1884d83a 	srl	r2,r3,r2
  80f514:	5222b03a 	or	r17,r10,r8
  80f518:	2006c03a 	cmpne	r3,r4,zero
  80f51c:	88e2b03a 	or	r17,r17,r3
  80f520:	89a3883a 	add	r17,r17,r6
  80f524:	1145883a 	add	r2,r2,r5
  80f528:	898d803a 	cmpltu	r6,r17,r6
  80f52c:	3087883a 	add	r3,r6,r2
  80f530:	4821883a 	mov	r16,r9
  80f534:	003ed906 	br	80f09c <__alt_mem_onchip_mem+0xff78f09c>
  80f538:	2984b03a 	or	r2,r5,r6
  80f53c:	10004226 	beq	r2,zero,80f648 <__subdf3+0x82c>
  80f540:	1808d0fa 	srli	r4,r3,3
  80f544:	8822d0fa 	srli	r17,r17,3
  80f548:	1806977a 	slli	r3,r3,29
  80f54c:	2080022c 	andhi	r2,r4,8
  80f550:	1c62b03a 	or	r17,r3,r17
  80f554:	10000826 	beq	r2,zero,80f578 <__subdf3+0x75c>
  80f558:	2812d0fa 	srli	r9,r5,3
  80f55c:	4880022c 	andhi	r2,r9,8
  80f560:	1000051e 	bne	r2,zero,80f578 <__subdf3+0x75c>
  80f564:	300cd0fa 	srli	r6,r6,3
  80f568:	2804977a 	slli	r2,r5,29
  80f56c:	4809883a 	mov	r4,r9
  80f570:	3825883a 	mov	r18,r7
  80f574:	11a2b03a 	or	r17,r2,r6
  80f578:	8806d77a 	srli	r3,r17,29
  80f57c:	200890fa 	slli	r4,r4,3
  80f580:	882290fa 	slli	r17,r17,3
  80f584:	0401ffc4 	movi	r16,2047
  80f588:	1906b03a 	or	r3,r3,r4
  80f58c:	003e4406 	br	80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80f590:	2984b03a 	or	r2,r5,r6
  80f594:	103e4226 	beq	r2,zero,80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80f598:	8989c83a 	sub	r4,r17,r6
  80f59c:	8911803a 	cmpltu	r8,r17,r4
  80f5a0:	1945c83a 	sub	r2,r3,r5
  80f5a4:	1205c83a 	sub	r2,r2,r8
  80f5a8:	1200202c 	andhi	r8,r2,128
  80f5ac:	403e9a26 	beq	r8,zero,80f018 <__alt_mem_onchip_mem+0xff78f018>
  80f5b0:	3463c83a 	sub	r17,r6,r17
  80f5b4:	28c5c83a 	sub	r2,r5,r3
  80f5b8:	344d803a 	cmpltu	r6,r6,r17
  80f5bc:	1187c83a 	sub	r3,r2,r6
  80f5c0:	3825883a 	mov	r18,r7
  80f5c4:	003e3606 	br	80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80f5c8:	0101ffc4 	movi	r4,2047
  80f5cc:	493fc71e 	bne	r9,r4,80f4ec <__alt_mem_onchip_mem+0xff78f4ec>
  80f5d0:	2807883a 	mov	r3,r5
  80f5d4:	3023883a 	mov	r17,r6
  80f5d8:	4821883a 	mov	r16,r9
  80f5dc:	003e3006 	br	80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80f5e0:	10003626 	beq	r2,zero,80f6bc <__subdf3+0x8a0>
  80f5e4:	2984b03a 	or	r2,r5,r6
  80f5e8:	10001726 	beq	r2,zero,80f648 <__subdf3+0x82c>
  80f5ec:	1808d0fa 	srli	r4,r3,3
  80f5f0:	8822d0fa 	srli	r17,r17,3
  80f5f4:	1806977a 	slli	r3,r3,29
  80f5f8:	2080022c 	andhi	r2,r4,8
  80f5fc:	1c62b03a 	or	r17,r3,r17
  80f600:	10000726 	beq	r2,zero,80f620 <__subdf3+0x804>
  80f604:	2812d0fa 	srli	r9,r5,3
  80f608:	4880022c 	andhi	r2,r9,8
  80f60c:	1000041e 	bne	r2,zero,80f620 <__subdf3+0x804>
  80f610:	300cd0fa 	srli	r6,r6,3
  80f614:	2804977a 	slli	r2,r5,29
  80f618:	4809883a 	mov	r4,r9
  80f61c:	11a2b03a 	or	r17,r2,r6
  80f620:	8806d77a 	srli	r3,r17,29
  80f624:	200890fa 	slli	r4,r4,3
  80f628:	882290fa 	slli	r17,r17,3
  80f62c:	3825883a 	mov	r18,r7
  80f630:	1906b03a 	or	r3,r3,r4
  80f634:	0401ffc4 	movi	r16,2047
  80f638:	003e1906 	br	80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80f63c:	000b883a 	mov	r5,zero
  80f640:	0005883a 	mov	r2,zero
  80f644:	003e2e06 	br	80ef00 <__alt_mem_onchip_mem+0xff78ef00>
  80f648:	0401ffc4 	movi	r16,2047
  80f64c:	003e1406 	br	80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80f650:	0005883a 	mov	r2,zero
  80f654:	003f7506 	br	80f42c <__alt_mem_onchip_mem+0xff78f42c>
  80f658:	0005883a 	mov	r2,zero
  80f65c:	0009883a 	mov	r4,zero
  80f660:	003e7806 	br	80f044 <__alt_mem_onchip_mem+0xff78f044>
  80f664:	123ff804 	addi	r8,r2,-32
  80f668:	01000804 	movi	r4,32
  80f66c:	1a10d83a 	srl	r8,r3,r8
  80f670:	11002526 	beq	r2,r4,80f708 <__subdf3+0x8ec>
  80f674:	01001004 	movi	r4,64
  80f678:	2085c83a 	sub	r2,r4,r2
  80f67c:	1884983a 	sll	r2,r3,r2
  80f680:	1444b03a 	or	r2,r2,r17
  80f684:	1004c03a 	cmpne	r2,r2,zero
  80f688:	40a2b03a 	or	r17,r8,r2
  80f68c:	0005883a 	mov	r2,zero
  80f690:	003f1606 	br	80f2ec <__alt_mem_onchip_mem+0xff78f2ec>
  80f694:	02000434 	movhi	r8,16
  80f698:	0009883a 	mov	r4,zero
  80f69c:	423fffc4 	addi	r8,r8,-1
  80f6a0:	00bfffc4 	movi	r2,-1
  80f6a4:	0401ffc4 	movi	r16,2047
  80f6a8:	003e6606 	br	80f044 <__alt_mem_onchip_mem+0xff78f044>
  80f6ac:	1c62b03a 	or	r17,r3,r17
  80f6b0:	8822c03a 	cmpne	r17,r17,zero
  80f6b4:	0005883a 	mov	r2,zero
  80f6b8:	003f9906 	br	80f520 <__alt_mem_onchip_mem+0xff78f520>
  80f6bc:	2807883a 	mov	r3,r5
  80f6c0:	3023883a 	mov	r17,r6
  80f6c4:	0401ffc4 	movi	r16,2047
  80f6c8:	003df506 	br	80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80f6cc:	2807883a 	mov	r3,r5
  80f6d0:	3023883a 	mov	r17,r6
  80f6d4:	003df206 	br	80eea0 <__alt_mem_onchip_mem+0xff78eea0>
  80f6d8:	123ff804 	addi	r8,r2,-32
  80f6dc:	01000804 	movi	r4,32
  80f6e0:	1a10d83a 	srl	r8,r3,r8
  80f6e4:	11000a26 	beq	r2,r4,80f710 <__subdf3+0x8f4>
  80f6e8:	01001004 	movi	r4,64
  80f6ec:	2085c83a 	sub	r2,r4,r2
  80f6f0:	1884983a 	sll	r2,r3,r2
  80f6f4:	1444b03a 	or	r2,r2,r17
  80f6f8:	1004c03a 	cmpne	r2,r2,zero
  80f6fc:	40a2b03a 	or	r17,r8,r2
  80f700:	0005883a 	mov	r2,zero
  80f704:	003f8606 	br	80f520 <__alt_mem_onchip_mem+0xff78f520>
  80f708:	0005883a 	mov	r2,zero
  80f70c:	003fdc06 	br	80f680 <__alt_mem_onchip_mem+0xff78f680>
  80f710:	0005883a 	mov	r2,zero
  80f714:	003ff706 	br	80f6f4 <__alt_mem_onchip_mem+0xff78f6f4>

0080f718 <__fixdfsi>:
  80f718:	280cd53a 	srli	r6,r5,20
  80f71c:	00c00434 	movhi	r3,16
  80f720:	18ffffc4 	addi	r3,r3,-1
  80f724:	3181ffcc 	andi	r6,r6,2047
  80f728:	01c0ff84 	movi	r7,1022
  80f72c:	28c6703a 	and	r3,r5,r3
  80f730:	280ad7fa 	srli	r5,r5,31
  80f734:	3980120e 	bge	r7,r6,80f780 <__fixdfsi+0x68>
  80f738:	00810744 	movi	r2,1053
  80f73c:	11800c16 	blt	r2,r6,80f770 <__fixdfsi+0x58>
  80f740:	00810cc4 	movi	r2,1075
  80f744:	1185c83a 	sub	r2,r2,r6
  80f748:	01c007c4 	movi	r7,31
  80f74c:	18c00434 	orhi	r3,r3,16
  80f750:	38800d16 	blt	r7,r2,80f788 <__fixdfsi+0x70>
  80f754:	31befb44 	addi	r6,r6,-1043
  80f758:	2084d83a 	srl	r2,r4,r2
  80f75c:	1986983a 	sll	r3,r3,r6
  80f760:	1884b03a 	or	r2,r3,r2
  80f764:	28000726 	beq	r5,zero,80f784 <__fixdfsi+0x6c>
  80f768:	0085c83a 	sub	r2,zero,r2
  80f76c:	f800283a 	ret
  80f770:	00a00034 	movhi	r2,32768
  80f774:	10bfffc4 	addi	r2,r2,-1
  80f778:	2885883a 	add	r2,r5,r2
  80f77c:	f800283a 	ret
  80f780:	0005883a 	mov	r2,zero
  80f784:	f800283a 	ret
  80f788:	008104c4 	movi	r2,1043
  80f78c:	1185c83a 	sub	r2,r2,r6
  80f790:	1884d83a 	srl	r2,r3,r2
  80f794:	003ff306 	br	80f764 <__alt_mem_onchip_mem+0xff78f764>

0080f798 <__floatsidf>:
  80f798:	defffd04 	addi	sp,sp,-12
  80f79c:	dfc00215 	stw	ra,8(sp)
  80f7a0:	dc400115 	stw	r17,4(sp)
  80f7a4:	dc000015 	stw	r16,0(sp)
  80f7a8:	20002b26 	beq	r4,zero,80f858 <__floatsidf+0xc0>
  80f7ac:	2023883a 	mov	r17,r4
  80f7b0:	2020d7fa 	srli	r16,r4,31
  80f7b4:	20002d16 	blt	r4,zero,80f86c <__floatsidf+0xd4>
  80f7b8:	8809883a 	mov	r4,r17
  80f7bc:	080f91c0 	call	80f91c <__clzsi2>
  80f7c0:	01410784 	movi	r5,1054
  80f7c4:	288bc83a 	sub	r5,r5,r2
  80f7c8:	01010cc4 	movi	r4,1075
  80f7cc:	2149c83a 	sub	r4,r4,r5
  80f7d0:	00c007c4 	movi	r3,31
  80f7d4:	1900160e 	bge	r3,r4,80f830 <__floatsidf+0x98>
  80f7d8:	00c104c4 	movi	r3,1043
  80f7dc:	1947c83a 	sub	r3,r3,r5
  80f7e0:	88c6983a 	sll	r3,r17,r3
  80f7e4:	00800434 	movhi	r2,16
  80f7e8:	10bfffc4 	addi	r2,r2,-1
  80f7ec:	1886703a 	and	r3,r3,r2
  80f7f0:	2941ffcc 	andi	r5,r5,2047
  80f7f4:	800d883a 	mov	r6,r16
  80f7f8:	0005883a 	mov	r2,zero
  80f7fc:	280a953a 	slli	r5,r5,20
  80f800:	31803fcc 	andi	r6,r6,255
  80f804:	01000434 	movhi	r4,16
  80f808:	300c97fa 	slli	r6,r6,31
  80f80c:	213fffc4 	addi	r4,r4,-1
  80f810:	1906703a 	and	r3,r3,r4
  80f814:	1946b03a 	or	r3,r3,r5
  80f818:	1986b03a 	or	r3,r3,r6
  80f81c:	dfc00217 	ldw	ra,8(sp)
  80f820:	dc400117 	ldw	r17,4(sp)
  80f824:	dc000017 	ldw	r16,0(sp)
  80f828:	dec00304 	addi	sp,sp,12
  80f82c:	f800283a 	ret
  80f830:	00c002c4 	movi	r3,11
  80f834:	1887c83a 	sub	r3,r3,r2
  80f838:	88c6d83a 	srl	r3,r17,r3
  80f83c:	8904983a 	sll	r2,r17,r4
  80f840:	01000434 	movhi	r4,16
  80f844:	213fffc4 	addi	r4,r4,-1
  80f848:	2941ffcc 	andi	r5,r5,2047
  80f84c:	1906703a 	and	r3,r3,r4
  80f850:	800d883a 	mov	r6,r16
  80f854:	003fe906 	br	80f7fc <__alt_mem_onchip_mem+0xff78f7fc>
  80f858:	000d883a 	mov	r6,zero
  80f85c:	000b883a 	mov	r5,zero
  80f860:	0007883a 	mov	r3,zero
  80f864:	0005883a 	mov	r2,zero
  80f868:	003fe406 	br	80f7fc <__alt_mem_onchip_mem+0xff78f7fc>
  80f86c:	0123c83a 	sub	r17,zero,r4
  80f870:	003fd106 	br	80f7b8 <__alt_mem_onchip_mem+0xff78f7b8>

0080f874 <__floatunsidf>:
  80f874:	defffe04 	addi	sp,sp,-8
  80f878:	dc000015 	stw	r16,0(sp)
  80f87c:	dfc00115 	stw	ra,4(sp)
  80f880:	2021883a 	mov	r16,r4
  80f884:	20002226 	beq	r4,zero,80f910 <__floatunsidf+0x9c>
  80f888:	080f91c0 	call	80f91c <__clzsi2>
  80f88c:	01010784 	movi	r4,1054
  80f890:	2089c83a 	sub	r4,r4,r2
  80f894:	01810cc4 	movi	r6,1075
  80f898:	310dc83a 	sub	r6,r6,r4
  80f89c:	00c007c4 	movi	r3,31
  80f8a0:	1980120e 	bge	r3,r6,80f8ec <__floatunsidf+0x78>
  80f8a4:	00c104c4 	movi	r3,1043
  80f8a8:	1907c83a 	sub	r3,r3,r4
  80f8ac:	80ca983a 	sll	r5,r16,r3
  80f8b0:	00800434 	movhi	r2,16
  80f8b4:	10bfffc4 	addi	r2,r2,-1
  80f8b8:	2101ffcc 	andi	r4,r4,2047
  80f8bc:	0021883a 	mov	r16,zero
  80f8c0:	288a703a 	and	r5,r5,r2
  80f8c4:	2008953a 	slli	r4,r4,20
  80f8c8:	00c00434 	movhi	r3,16
  80f8cc:	18ffffc4 	addi	r3,r3,-1
  80f8d0:	28c6703a 	and	r3,r5,r3
  80f8d4:	8005883a 	mov	r2,r16
  80f8d8:	1906b03a 	or	r3,r3,r4
  80f8dc:	dfc00117 	ldw	ra,4(sp)
  80f8e0:	dc000017 	ldw	r16,0(sp)
  80f8e4:	dec00204 	addi	sp,sp,8
  80f8e8:	f800283a 	ret
  80f8ec:	00c002c4 	movi	r3,11
  80f8f0:	188bc83a 	sub	r5,r3,r2
  80f8f4:	814ad83a 	srl	r5,r16,r5
  80f8f8:	00c00434 	movhi	r3,16
  80f8fc:	18ffffc4 	addi	r3,r3,-1
  80f900:	81a0983a 	sll	r16,r16,r6
  80f904:	2101ffcc 	andi	r4,r4,2047
  80f908:	28ca703a 	and	r5,r5,r3
  80f90c:	003fed06 	br	80f8c4 <__alt_mem_onchip_mem+0xff78f8c4>
  80f910:	0009883a 	mov	r4,zero
  80f914:	000b883a 	mov	r5,zero
  80f918:	003fea06 	br	80f8c4 <__alt_mem_onchip_mem+0xff78f8c4>

0080f91c <__clzsi2>:
  80f91c:	00bfffd4 	movui	r2,65535
  80f920:	11000536 	bltu	r2,r4,80f938 <__clzsi2+0x1c>
  80f924:	00803fc4 	movi	r2,255
  80f928:	11000f36 	bltu	r2,r4,80f968 <__clzsi2+0x4c>
  80f92c:	00800804 	movi	r2,32
  80f930:	0007883a 	mov	r3,zero
  80f934:	00000506 	br	80f94c <__clzsi2+0x30>
  80f938:	00804034 	movhi	r2,256
  80f93c:	10bfffc4 	addi	r2,r2,-1
  80f940:	11000c2e 	bgeu	r2,r4,80f974 <__clzsi2+0x58>
  80f944:	00800204 	movi	r2,8
  80f948:	00c00604 	movi	r3,24
  80f94c:	20c8d83a 	srl	r4,r4,r3
  80f950:	00c02074 	movhi	r3,129
  80f954:	18d07304 	addi	r3,r3,16844
  80f958:	1909883a 	add	r4,r3,r4
  80f95c:	20c00003 	ldbu	r3,0(r4)
  80f960:	10c5c83a 	sub	r2,r2,r3
  80f964:	f800283a 	ret
  80f968:	00800604 	movi	r2,24
  80f96c:	00c00204 	movi	r3,8
  80f970:	003ff606 	br	80f94c <__alt_mem_onchip_mem+0xff78f94c>
  80f974:	00800404 	movi	r2,16
  80f978:	1007883a 	mov	r3,r2
  80f97c:	003ff306 	br	80f94c <__alt_mem_onchip_mem+0xff78f94c>

0080f980 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80f980:	defff504 	addi	sp,sp,-44
  80f984:	df000a15 	stw	fp,40(sp)
  80f988:	df000a04 	addi	fp,sp,40
  80f98c:	e13ffc15 	stw	r4,-16(fp)
  80f990:	e17ffd15 	stw	r5,-12(fp)
  80f994:	e1bffe15 	stw	r6,-8(fp)
  80f998:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80f99c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80f9a0:	d0a77617 	ldw	r2,-25128(gp)
  
  if (alt_ticks_per_second ())
  80f9a4:	10003c26 	beq	r2,zero,80fa98 <alt_alarm_start+0x118>
  {
    if (alarm)
  80f9a8:	e0bffc17 	ldw	r2,-16(fp)
  80f9ac:	10003826 	beq	r2,zero,80fa90 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80f9b0:	e0bffc17 	ldw	r2,-16(fp)
  80f9b4:	e0fffe17 	ldw	r3,-8(fp)
  80f9b8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80f9bc:	e0bffc17 	ldw	r2,-16(fp)
  80f9c0:	e0ffff17 	ldw	r3,-4(fp)
  80f9c4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f9c8:	0005303a 	rdctl	r2,status
  80f9cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f9d0:	e0fff917 	ldw	r3,-28(fp)
  80f9d4:	00bfff84 	movi	r2,-2
  80f9d8:	1884703a 	and	r2,r3,r2
  80f9dc:	1001703a 	wrctl	status,r2
  
  return context;
  80f9e0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80f9e4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80f9e8:	d0a77717 	ldw	r2,-25124(gp)
      
      current_nticks = alt_nticks();
  80f9ec:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80f9f0:	e0fffd17 	ldw	r3,-12(fp)
  80f9f4:	e0bff617 	ldw	r2,-40(fp)
  80f9f8:	1885883a 	add	r2,r3,r2
  80f9fc:	10c00044 	addi	r3,r2,1
  80fa00:	e0bffc17 	ldw	r2,-16(fp)
  80fa04:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80fa08:	e0bffc17 	ldw	r2,-16(fp)
  80fa0c:	10c00217 	ldw	r3,8(r2)
  80fa10:	e0bff617 	ldw	r2,-40(fp)
  80fa14:	1880042e 	bgeu	r3,r2,80fa28 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80fa18:	e0bffc17 	ldw	r2,-16(fp)
  80fa1c:	00c00044 	movi	r3,1
  80fa20:	10c00405 	stb	r3,16(r2)
  80fa24:	00000206 	br	80fa30 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80fa28:	e0bffc17 	ldw	r2,-16(fp)
  80fa2c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80fa30:	e0bffc17 	ldw	r2,-16(fp)
  80fa34:	d0e01804 	addi	r3,gp,-32672
  80fa38:	e0fffa15 	stw	r3,-24(fp)
  80fa3c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80fa40:	e0bffb17 	ldw	r2,-20(fp)
  80fa44:	e0fffa17 	ldw	r3,-24(fp)
  80fa48:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80fa4c:	e0bffa17 	ldw	r2,-24(fp)
  80fa50:	10c00017 	ldw	r3,0(r2)
  80fa54:	e0bffb17 	ldw	r2,-20(fp)
  80fa58:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80fa5c:	e0bffa17 	ldw	r2,-24(fp)
  80fa60:	10800017 	ldw	r2,0(r2)
  80fa64:	e0fffb17 	ldw	r3,-20(fp)
  80fa68:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80fa6c:	e0bffa17 	ldw	r2,-24(fp)
  80fa70:	e0fffb17 	ldw	r3,-20(fp)
  80fa74:	10c00015 	stw	r3,0(r2)
  80fa78:	e0bff817 	ldw	r2,-32(fp)
  80fa7c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fa80:	e0bff717 	ldw	r2,-36(fp)
  80fa84:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80fa88:	0005883a 	mov	r2,zero
  80fa8c:	00000306 	br	80fa9c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80fa90:	00bffa84 	movi	r2,-22
  80fa94:	00000106 	br	80fa9c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80fa98:	00bfde84 	movi	r2,-134
  }
}
  80fa9c:	e037883a 	mov	sp,fp
  80faa0:	df000017 	ldw	fp,0(sp)
  80faa4:	dec00104 	addi	sp,sp,4
  80faa8:	f800283a 	ret

0080faac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80faac:	defffe04 	addi	sp,sp,-8
  80fab0:	dfc00115 	stw	ra,4(sp)
  80fab4:	df000015 	stw	fp,0(sp)
  80fab8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fabc:	d0a01517 	ldw	r2,-32684(gp)
  80fac0:	10000326 	beq	r2,zero,80fad0 <alt_get_errno+0x24>
  80fac4:	d0a01517 	ldw	r2,-32684(gp)
  80fac8:	103ee83a 	callr	r2
  80facc:	00000106 	br	80fad4 <alt_get_errno+0x28>
  80fad0:	d0a76b04 	addi	r2,gp,-25172
}
  80fad4:	e037883a 	mov	sp,fp
  80fad8:	dfc00117 	ldw	ra,4(sp)
  80fadc:	df000017 	ldw	fp,0(sp)
  80fae0:	dec00204 	addi	sp,sp,8
  80fae4:	f800283a 	ret

0080fae8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80fae8:	defffb04 	addi	sp,sp,-20
  80faec:	dfc00415 	stw	ra,16(sp)
  80faf0:	df000315 	stw	fp,12(sp)
  80faf4:	df000304 	addi	fp,sp,12
  80faf8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80fafc:	e0bfff17 	ldw	r2,-4(fp)
  80fb00:	10000616 	blt	r2,zero,80fb1c <close+0x34>
  80fb04:	e0bfff17 	ldw	r2,-4(fp)
  80fb08:	10c00324 	muli	r3,r2,12
  80fb0c:	00802074 	movhi	r2,129
  80fb10:	1092f704 	addi	r2,r2,19420
  80fb14:	1885883a 	add	r2,r3,r2
  80fb18:	00000106 	br	80fb20 <close+0x38>
  80fb1c:	0005883a 	mov	r2,zero
  80fb20:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80fb24:	e0bffd17 	ldw	r2,-12(fp)
  80fb28:	10001926 	beq	r2,zero,80fb90 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80fb2c:	e0bffd17 	ldw	r2,-12(fp)
  80fb30:	10800017 	ldw	r2,0(r2)
  80fb34:	10800417 	ldw	r2,16(r2)
  80fb38:	10000626 	beq	r2,zero,80fb54 <close+0x6c>
  80fb3c:	e0bffd17 	ldw	r2,-12(fp)
  80fb40:	10800017 	ldw	r2,0(r2)
  80fb44:	10800417 	ldw	r2,16(r2)
  80fb48:	e13ffd17 	ldw	r4,-12(fp)
  80fb4c:	103ee83a 	callr	r2
  80fb50:	00000106 	br	80fb58 <close+0x70>
  80fb54:	0005883a 	mov	r2,zero
  80fb58:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80fb5c:	e13fff17 	ldw	r4,-4(fp)
  80fb60:	081057c0 	call	81057c <alt_release_fd>
    if (rval < 0)
  80fb64:	e0bffe17 	ldw	r2,-8(fp)
  80fb68:	1000070e 	bge	r2,zero,80fb88 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80fb6c:	080faac0 	call	80faac <alt_get_errno>
  80fb70:	1007883a 	mov	r3,r2
  80fb74:	e0bffe17 	ldw	r2,-8(fp)
  80fb78:	0085c83a 	sub	r2,zero,r2
  80fb7c:	18800015 	stw	r2,0(r3)
      return -1;
  80fb80:	00bfffc4 	movi	r2,-1
  80fb84:	00000706 	br	80fba4 <close+0xbc>
    }
    return 0;
  80fb88:	0005883a 	mov	r2,zero
  80fb8c:	00000506 	br	80fba4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80fb90:	080faac0 	call	80faac <alt_get_errno>
  80fb94:	1007883a 	mov	r3,r2
  80fb98:	00801444 	movi	r2,81
  80fb9c:	18800015 	stw	r2,0(r3)
    return -1;
  80fba0:	00bfffc4 	movi	r2,-1
  }
}
  80fba4:	e037883a 	mov	sp,fp
  80fba8:	dfc00117 	ldw	ra,4(sp)
  80fbac:	df000017 	ldw	fp,0(sp)
  80fbb0:	dec00204 	addi	sp,sp,8
  80fbb4:	f800283a 	ret

0080fbb8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80fbb8:	defffc04 	addi	sp,sp,-16
  80fbbc:	df000315 	stw	fp,12(sp)
  80fbc0:	df000304 	addi	fp,sp,12
  80fbc4:	e13ffd15 	stw	r4,-12(fp)
  80fbc8:	e17ffe15 	stw	r5,-8(fp)
  80fbcc:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80fbd0:	e0bfff17 	ldw	r2,-4(fp)
}
  80fbd4:	e037883a 	mov	sp,fp
  80fbd8:	df000017 	ldw	fp,0(sp)
  80fbdc:	dec00104 	addi	sp,sp,4
  80fbe0:	f800283a 	ret

0080fbe4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fbe4:	defffe04 	addi	sp,sp,-8
  80fbe8:	dfc00115 	stw	ra,4(sp)
  80fbec:	df000015 	stw	fp,0(sp)
  80fbf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fbf4:	d0a01517 	ldw	r2,-32684(gp)
  80fbf8:	10000326 	beq	r2,zero,80fc08 <alt_get_errno+0x24>
  80fbfc:	d0a01517 	ldw	r2,-32684(gp)
  80fc00:	103ee83a 	callr	r2
  80fc04:	00000106 	br	80fc0c <alt_get_errno+0x28>
  80fc08:	d0a76b04 	addi	r2,gp,-25172
}
  80fc0c:	e037883a 	mov	sp,fp
  80fc10:	dfc00117 	ldw	ra,4(sp)
  80fc14:	df000017 	ldw	fp,0(sp)
  80fc18:	dec00204 	addi	sp,sp,8
  80fc1c:	f800283a 	ret

0080fc20 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80fc20:	defffb04 	addi	sp,sp,-20
  80fc24:	dfc00415 	stw	ra,16(sp)
  80fc28:	df000315 	stw	fp,12(sp)
  80fc2c:	df000304 	addi	fp,sp,12
  80fc30:	e13ffe15 	stw	r4,-8(fp)
  80fc34:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fc38:	e0bffe17 	ldw	r2,-8(fp)
  80fc3c:	10000616 	blt	r2,zero,80fc58 <fstat+0x38>
  80fc40:	e0bffe17 	ldw	r2,-8(fp)
  80fc44:	10c00324 	muli	r3,r2,12
  80fc48:	00802074 	movhi	r2,129
  80fc4c:	1092f704 	addi	r2,r2,19420
  80fc50:	1885883a 	add	r2,r3,r2
  80fc54:	00000106 	br	80fc5c <fstat+0x3c>
  80fc58:	0005883a 	mov	r2,zero
  80fc5c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80fc60:	e0bffd17 	ldw	r2,-12(fp)
  80fc64:	10001026 	beq	r2,zero,80fca8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80fc68:	e0bffd17 	ldw	r2,-12(fp)
  80fc6c:	10800017 	ldw	r2,0(r2)
  80fc70:	10800817 	ldw	r2,32(r2)
  80fc74:	10000726 	beq	r2,zero,80fc94 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80fc78:	e0bffd17 	ldw	r2,-12(fp)
  80fc7c:	10800017 	ldw	r2,0(r2)
  80fc80:	10800817 	ldw	r2,32(r2)
  80fc84:	e17fff17 	ldw	r5,-4(fp)
  80fc88:	e13ffd17 	ldw	r4,-12(fp)
  80fc8c:	103ee83a 	callr	r2
  80fc90:	00000a06 	br	80fcbc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80fc94:	e0bfff17 	ldw	r2,-4(fp)
  80fc98:	00c80004 	movi	r3,8192
  80fc9c:	10c00115 	stw	r3,4(r2)
      return 0;
  80fca0:	0005883a 	mov	r2,zero
  80fca4:	00000506 	br	80fcbc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80fca8:	080fbe40 	call	80fbe4 <alt_get_errno>
  80fcac:	1007883a 	mov	r3,r2
  80fcb0:	00801444 	movi	r2,81
  80fcb4:	18800015 	stw	r2,0(r3)
    return -1;
  80fcb8:	00bfffc4 	movi	r2,-1
  }
}
  80fcbc:	e037883a 	mov	sp,fp
  80fcc0:	dfc00117 	ldw	ra,4(sp)
  80fcc4:	df000017 	ldw	fp,0(sp)
  80fcc8:	dec00204 	addi	sp,sp,8
  80fccc:	f800283a 	ret

0080fcd0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80fcd0:	defff004 	addi	sp,sp,-64
  80fcd4:	df000f15 	stw	fp,60(sp)
  80fcd8:	df000f04 	addi	fp,sp,60
  80fcdc:	e13ffd15 	stw	r4,-12(fp)
  80fce0:	e17ffe15 	stw	r5,-8(fp)
  80fce4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  80fce8:	00bffa84 	movi	r2,-22
  80fcec:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80fcf0:	e0bffd17 	ldw	r2,-12(fp)
  80fcf4:	10800828 	cmpgeui	r2,r2,32
  80fcf8:	1000501e 	bne	r2,zero,80fe3c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fcfc:	0005303a 	rdctl	r2,status
  80fd00:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fd04:	e0fff617 	ldw	r3,-40(fp)
  80fd08:	00bfff84 	movi	r2,-2
  80fd0c:	1884703a 	and	r2,r3,r2
  80fd10:	1001703a 	wrctl	status,r2
  
  return context;
  80fd14:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80fd18:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  80fd1c:	00802074 	movhi	r2,129
  80fd20:	109f8a04 	addi	r2,r2,32296
  80fd24:	e0fffd17 	ldw	r3,-12(fp)
  80fd28:	180690fa 	slli	r3,r3,3
  80fd2c:	10c5883a 	add	r2,r2,r3
  80fd30:	e0ffff17 	ldw	r3,-4(fp)
  80fd34:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  80fd38:	00802074 	movhi	r2,129
  80fd3c:	109f8a04 	addi	r2,r2,32296
  80fd40:	e0fffd17 	ldw	r3,-12(fp)
  80fd44:	180690fa 	slli	r3,r3,3
  80fd48:	10c5883a 	add	r2,r2,r3
  80fd4c:	10800104 	addi	r2,r2,4
  80fd50:	e0fffe17 	ldw	r3,-8(fp)
  80fd54:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80fd58:	e0bfff17 	ldw	r2,-4(fp)
  80fd5c:	10001926 	beq	r2,zero,80fdc4 <alt_irq_register+0xf4>
  80fd60:	e0bffd17 	ldw	r2,-12(fp)
  80fd64:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fd68:	0005303a 	rdctl	r2,status
  80fd6c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fd70:	e0fff717 	ldw	r3,-36(fp)
  80fd74:	00bfff84 	movi	r2,-2
  80fd78:	1884703a 	and	r2,r3,r2
  80fd7c:	1001703a 	wrctl	status,r2
  
  return context;
  80fd80:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80fd84:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80fd88:	00c00044 	movi	r3,1
  80fd8c:	e0bff217 	ldw	r2,-56(fp)
  80fd90:	1884983a 	sll	r2,r3,r2
  80fd94:	1007883a 	mov	r3,r2
  80fd98:	d0a77217 	ldw	r2,-25144(gp)
  80fd9c:	1884b03a 	or	r2,r3,r2
  80fda0:	d0a77215 	stw	r2,-25144(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80fda4:	d0a77217 	ldw	r2,-25144(gp)
  80fda8:	100170fa 	wrctl	ienable,r2
  80fdac:	e0bff817 	ldw	r2,-32(fp)
  80fdb0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fdb4:	e0bff917 	ldw	r2,-28(fp)
  80fdb8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80fdbc:	0005883a 	mov	r2,zero
  80fdc0:	00001906 	br	80fe28 <alt_irq_register+0x158>
  80fdc4:	e0bffd17 	ldw	r2,-12(fp)
  80fdc8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fdcc:	0005303a 	rdctl	r2,status
  80fdd0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fdd4:	e0fffa17 	ldw	r3,-24(fp)
  80fdd8:	00bfff84 	movi	r2,-2
  80fddc:	1884703a 	and	r2,r3,r2
  80fde0:	1001703a 	wrctl	status,r2
  
  return context;
  80fde4:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80fde8:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  80fdec:	00c00044 	movi	r3,1
  80fdf0:	e0bff417 	ldw	r2,-48(fp)
  80fdf4:	1884983a 	sll	r2,r3,r2
  80fdf8:	0084303a 	nor	r2,zero,r2
  80fdfc:	1007883a 	mov	r3,r2
  80fe00:	d0a77217 	ldw	r2,-25144(gp)
  80fe04:	1884703a 	and	r2,r3,r2
  80fe08:	d0a77215 	stw	r2,-25144(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80fe0c:	d0a77217 	ldw	r2,-25144(gp)
  80fe10:	100170fa 	wrctl	ienable,r2
  80fe14:	e0bffb17 	ldw	r2,-20(fp)
  80fe18:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fe1c:	e0bffc17 	ldw	r2,-16(fp)
  80fe20:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80fe24:	0005883a 	mov	r2,zero
  80fe28:	e0bff115 	stw	r2,-60(fp)
  80fe2c:	e0bff317 	ldw	r2,-52(fp)
  80fe30:	e0bff515 	stw	r2,-44(fp)
  80fe34:	e0bff517 	ldw	r2,-44(fp)
  80fe38:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80fe3c:	e0bff117 	ldw	r2,-60(fp)
}
  80fe40:	e037883a 	mov	sp,fp
  80fe44:	df000017 	ldw	fp,0(sp)
  80fe48:	dec00104 	addi	sp,sp,4
  80fe4c:	f800283a 	ret

0080fe50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fe50:	defffe04 	addi	sp,sp,-8
  80fe54:	dfc00115 	stw	ra,4(sp)
  80fe58:	df000015 	stw	fp,0(sp)
  80fe5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fe60:	d0a01517 	ldw	r2,-32684(gp)
  80fe64:	10000326 	beq	r2,zero,80fe74 <alt_get_errno+0x24>
  80fe68:	d0a01517 	ldw	r2,-32684(gp)
  80fe6c:	103ee83a 	callr	r2
  80fe70:	00000106 	br	80fe78 <alt_get_errno+0x28>
  80fe74:	d0a76b04 	addi	r2,gp,-25172
}
  80fe78:	e037883a 	mov	sp,fp
  80fe7c:	dfc00117 	ldw	ra,4(sp)
  80fe80:	df000017 	ldw	fp,0(sp)
  80fe84:	dec00204 	addi	sp,sp,8
  80fe88:	f800283a 	ret

0080fe8c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80fe8c:	deffed04 	addi	sp,sp,-76
  80fe90:	dfc01215 	stw	ra,72(sp)
  80fe94:	df001115 	stw	fp,68(sp)
  80fe98:	df001104 	addi	fp,sp,68
  80fe9c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fea0:	e0bfff17 	ldw	r2,-4(fp)
  80fea4:	10000616 	blt	r2,zero,80fec0 <isatty+0x34>
  80fea8:	e0bfff17 	ldw	r2,-4(fp)
  80feac:	10c00324 	muli	r3,r2,12
  80feb0:	00802074 	movhi	r2,129
  80feb4:	1092f704 	addi	r2,r2,19420
  80feb8:	1885883a 	add	r2,r3,r2
  80febc:	00000106 	br	80fec4 <isatty+0x38>
  80fec0:	0005883a 	mov	r2,zero
  80fec4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80fec8:	e0bfef17 	ldw	r2,-68(fp)
  80fecc:	10000e26 	beq	r2,zero,80ff08 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80fed0:	e0bfef17 	ldw	r2,-68(fp)
  80fed4:	10800017 	ldw	r2,0(r2)
  80fed8:	10800817 	ldw	r2,32(r2)
  80fedc:	1000021e 	bne	r2,zero,80fee8 <isatty+0x5c>
    {
      return 1;
  80fee0:	00800044 	movi	r2,1
  80fee4:	00000d06 	br	80ff1c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80fee8:	e0bff004 	addi	r2,fp,-64
  80feec:	100b883a 	mov	r5,r2
  80fef0:	e13fff17 	ldw	r4,-4(fp)
  80fef4:	080fc200 	call	80fc20 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80fef8:	e0bff117 	ldw	r2,-60(fp)
  80fefc:	10880020 	cmpeqi	r2,r2,8192
  80ff00:	10803fcc 	andi	r2,r2,255
  80ff04:	00000506 	br	80ff1c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ff08:	080fe500 	call	80fe50 <alt_get_errno>
  80ff0c:	1007883a 	mov	r3,r2
  80ff10:	00801444 	movi	r2,81
  80ff14:	18800015 	stw	r2,0(r3)
    return 0;
  80ff18:	0005883a 	mov	r2,zero
  }
}
  80ff1c:	e037883a 	mov	sp,fp
  80ff20:	dfc00117 	ldw	ra,4(sp)
  80ff24:	df000017 	ldw	fp,0(sp)
  80ff28:	dec00204 	addi	sp,sp,8
  80ff2c:	f800283a 	ret

0080ff30 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80ff30:	defffc04 	addi	sp,sp,-16
  80ff34:	df000315 	stw	fp,12(sp)
  80ff38:	df000304 	addi	fp,sp,12
  80ff3c:	e13ffd15 	stw	r4,-12(fp)
  80ff40:	e17ffe15 	stw	r5,-8(fp)
  80ff44:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80ff48:	e0fffe17 	ldw	r3,-8(fp)
  80ff4c:	e0bffd17 	ldw	r2,-12(fp)
  80ff50:	18800c26 	beq	r3,r2,80ff84 <alt_load_section+0x54>
  {
    while( to != end )
  80ff54:	00000806 	br	80ff78 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80ff58:	e0bffe17 	ldw	r2,-8(fp)
  80ff5c:	10c00104 	addi	r3,r2,4
  80ff60:	e0fffe15 	stw	r3,-8(fp)
  80ff64:	e0fffd17 	ldw	r3,-12(fp)
  80ff68:	19000104 	addi	r4,r3,4
  80ff6c:	e13ffd15 	stw	r4,-12(fp)
  80ff70:	18c00017 	ldw	r3,0(r3)
  80ff74:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80ff78:	e0fffe17 	ldw	r3,-8(fp)
  80ff7c:	e0bfff17 	ldw	r2,-4(fp)
  80ff80:	18bff51e 	bne	r3,r2,80ff58 <__alt_mem_onchip_mem+0xff78ff58>
    {
      *to++ = *from++;
    }
  }
}
  80ff84:	0001883a 	nop
  80ff88:	e037883a 	mov	sp,fp
  80ff8c:	df000017 	ldw	fp,0(sp)
  80ff90:	dec00104 	addi	sp,sp,4
  80ff94:	f800283a 	ret

0080ff98 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80ff98:	defffe04 	addi	sp,sp,-8
  80ff9c:	dfc00115 	stw	ra,4(sp)
  80ffa0:	df000015 	stw	fp,0(sp)
  80ffa4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80ffa8:	01802074 	movhi	r6,129
  80ffac:	31980304 	addi	r6,r6,24588
  80ffb0:	01402074 	movhi	r5,129
  80ffb4:	2950c404 	addi	r5,r5,17168
  80ffb8:	01002074 	movhi	r4,129
  80ffbc:	21180304 	addi	r4,r4,24588
  80ffc0:	080ff300 	call	80ff30 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80ffc4:	01802034 	movhi	r6,128
  80ffc8:	31809104 	addi	r6,r6,580
  80ffcc:	01402034 	movhi	r5,128
  80ffd0:	29400804 	addi	r5,r5,32
  80ffd4:	01002034 	movhi	r4,128
  80ffd8:	21000804 	addi	r4,r4,32
  80ffdc:	080ff300 	call	80ff30 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80ffe0:	01802074 	movhi	r6,129
  80ffe4:	3190c404 	addi	r6,r6,17168
  80ffe8:	01402074 	movhi	r5,129
  80ffec:	294f0904 	addi	r5,r5,15396
  80fff0:	01002074 	movhi	r4,129
  80fff4:	210f0904 	addi	r4,r4,15396
  80fff8:	080ff300 	call	80ff30 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80fffc:	0812d800 	call	812d80 <alt_dcache_flush_all>
  alt_icache_flush_all();
  810000:	08131a40 	call	8131a4 <alt_icache_flush_all>
}
  810004:	0001883a 	nop
  810008:	e037883a 	mov	sp,fp
  81000c:	dfc00117 	ldw	ra,4(sp)
  810010:	df000017 	ldw	fp,0(sp)
  810014:	dec00204 	addi	sp,sp,8
  810018:	f800283a 	ret

0081001c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81001c:	defffe04 	addi	sp,sp,-8
  810020:	dfc00115 	stw	ra,4(sp)
  810024:	df000015 	stw	fp,0(sp)
  810028:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81002c:	d0a01517 	ldw	r2,-32684(gp)
  810030:	10000326 	beq	r2,zero,810040 <alt_get_errno+0x24>
  810034:	d0a01517 	ldw	r2,-32684(gp)
  810038:	103ee83a 	callr	r2
  81003c:	00000106 	br	810044 <alt_get_errno+0x28>
  810040:	d0a76b04 	addi	r2,gp,-25172
}
  810044:	e037883a 	mov	sp,fp
  810048:	dfc00117 	ldw	ra,4(sp)
  81004c:	df000017 	ldw	fp,0(sp)
  810050:	dec00204 	addi	sp,sp,8
  810054:	f800283a 	ret

00810058 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  810058:	defff904 	addi	sp,sp,-28
  81005c:	dfc00615 	stw	ra,24(sp)
  810060:	df000515 	stw	fp,20(sp)
  810064:	df000504 	addi	fp,sp,20
  810068:	e13ffd15 	stw	r4,-12(fp)
  81006c:	e17ffe15 	stw	r5,-8(fp)
  810070:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  810074:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810078:	e0bffd17 	ldw	r2,-12(fp)
  81007c:	10000616 	blt	r2,zero,810098 <lseek+0x40>
  810080:	e0bffd17 	ldw	r2,-12(fp)
  810084:	10c00324 	muli	r3,r2,12
  810088:	00802074 	movhi	r2,129
  81008c:	1092f704 	addi	r2,r2,19420
  810090:	1885883a 	add	r2,r3,r2
  810094:	00000106 	br	81009c <lseek+0x44>
  810098:	0005883a 	mov	r2,zero
  81009c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  8100a0:	e0bffc17 	ldw	r2,-16(fp)
  8100a4:	10001026 	beq	r2,zero,8100e8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  8100a8:	e0bffc17 	ldw	r2,-16(fp)
  8100ac:	10800017 	ldw	r2,0(r2)
  8100b0:	10800717 	ldw	r2,28(r2)
  8100b4:	10000926 	beq	r2,zero,8100dc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8100b8:	e0bffc17 	ldw	r2,-16(fp)
  8100bc:	10800017 	ldw	r2,0(r2)
  8100c0:	10800717 	ldw	r2,28(r2)
  8100c4:	e1bfff17 	ldw	r6,-4(fp)
  8100c8:	e17ffe17 	ldw	r5,-8(fp)
  8100cc:	e13ffc17 	ldw	r4,-16(fp)
  8100d0:	103ee83a 	callr	r2
  8100d4:	e0bffb15 	stw	r2,-20(fp)
  8100d8:	00000506 	br	8100f0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  8100dc:	00bfde84 	movi	r2,-134
  8100e0:	e0bffb15 	stw	r2,-20(fp)
  8100e4:	00000206 	br	8100f0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  8100e8:	00bfebc4 	movi	r2,-81
  8100ec:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  8100f0:	e0bffb17 	ldw	r2,-20(fp)
  8100f4:	1000070e 	bge	r2,zero,810114 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  8100f8:	081001c0 	call	81001c <alt_get_errno>
  8100fc:	1007883a 	mov	r3,r2
  810100:	e0bffb17 	ldw	r2,-20(fp)
  810104:	0085c83a 	sub	r2,zero,r2
  810108:	18800015 	stw	r2,0(r3)
    rc = -1;
  81010c:	00bfffc4 	movi	r2,-1
  810110:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  810114:	e0bffb17 	ldw	r2,-20(fp)
}
  810118:	e037883a 	mov	sp,fp
  81011c:	dfc00117 	ldw	ra,4(sp)
  810120:	df000017 	ldw	fp,0(sp)
  810124:	dec00204 	addi	sp,sp,8
  810128:	f800283a 	ret

0081012c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  81012c:	defffd04 	addi	sp,sp,-12
  810130:	dfc00215 	stw	ra,8(sp)
  810134:	df000115 	stw	fp,4(sp)
  810138:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  81013c:	0009883a 	mov	r4,zero
  810140:	081099c0 	call	81099c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  810144:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  810148:	08109d40 	call	8109d4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  81014c:	01802074 	movhi	r6,129
  810150:	3190b604 	addi	r6,r6,17112
  810154:	01402074 	movhi	r5,129
  810158:	2950b604 	addi	r5,r5,17112
  81015c:	01002074 	movhi	r4,129
  810160:	2110b604 	addi	r4,r4,17112
  810164:	081353c0 	call	81353c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  810168:	0812ea80 	call	812ea8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  81016c:	01002074 	movhi	r4,129
  810170:	210bc204 	addi	r4,r4,12040
  810174:	08138900 	call	813890 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  810178:	d0a77317 	ldw	r2,-25140(gp)
  81017c:	d0e77417 	ldw	r3,-25136(gp)
  810180:	d1277517 	ldw	r4,-25132(gp)
  810184:	200d883a 	mov	r6,r4
  810188:	180b883a 	mov	r5,r3
  81018c:	1009883a 	mov	r4,r2
  810190:	0801dd00 	call	801dd0 <main>
  810194:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  810198:	01000044 	movi	r4,1
  81019c:	080fae80 	call	80fae8 <close>
  exit (result);
  8101a0:	e13fff17 	ldw	r4,-4(fp)
  8101a4:	08138a40 	call	8138a4 <exit>

008101a8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  8101a8:	defffe04 	addi	sp,sp,-8
  8101ac:	df000115 	stw	fp,4(sp)
  8101b0:	df000104 	addi	fp,sp,4
  8101b4:	e13fff15 	stw	r4,-4(fp)
}
  8101b8:	0001883a 	nop
  8101bc:	e037883a 	mov	sp,fp
  8101c0:	df000017 	ldw	fp,0(sp)
  8101c4:	dec00104 	addi	sp,sp,4
  8101c8:	f800283a 	ret

008101cc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8101cc:	defffe04 	addi	sp,sp,-8
  8101d0:	df000115 	stw	fp,4(sp)
  8101d4:	df000104 	addi	fp,sp,4
  8101d8:	e13fff15 	stw	r4,-4(fp)
}
  8101dc:	0001883a 	nop
  8101e0:	e037883a 	mov	sp,fp
  8101e4:	df000017 	ldw	fp,0(sp)
  8101e8:	dec00104 	addi	sp,sp,4
  8101ec:	f800283a 	ret

008101f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8101f0:	defffe04 	addi	sp,sp,-8
  8101f4:	dfc00115 	stw	ra,4(sp)
  8101f8:	df000015 	stw	fp,0(sp)
  8101fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810200:	d0a01517 	ldw	r2,-32684(gp)
  810204:	10000326 	beq	r2,zero,810214 <alt_get_errno+0x24>
  810208:	d0a01517 	ldw	r2,-32684(gp)
  81020c:	103ee83a 	callr	r2
  810210:	00000106 	br	810218 <alt_get_errno+0x28>
  810214:	d0a76b04 	addi	r2,gp,-25172
}
  810218:	e037883a 	mov	sp,fp
  81021c:	dfc00117 	ldw	ra,4(sp)
  810220:	df000017 	ldw	fp,0(sp)
  810224:	dec00204 	addi	sp,sp,8
  810228:	f800283a 	ret

0081022c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  81022c:	defffd04 	addi	sp,sp,-12
  810230:	df000215 	stw	fp,8(sp)
  810234:	df000204 	addi	fp,sp,8
  810238:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  81023c:	e0bfff17 	ldw	r2,-4(fp)
  810240:	10800217 	ldw	r2,8(r2)
  810244:	10d00034 	orhi	r3,r2,16384
  810248:	e0bfff17 	ldw	r2,-4(fp)
  81024c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810250:	e03ffe15 	stw	zero,-8(fp)
  810254:	00001d06 	br	8102cc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  810258:	00802074 	movhi	r2,129
  81025c:	1092f704 	addi	r2,r2,19420
  810260:	e0fffe17 	ldw	r3,-8(fp)
  810264:	18c00324 	muli	r3,r3,12
  810268:	10c5883a 	add	r2,r2,r3
  81026c:	10c00017 	ldw	r3,0(r2)
  810270:	e0bfff17 	ldw	r2,-4(fp)
  810274:	10800017 	ldw	r2,0(r2)
  810278:	1880111e 	bne	r3,r2,8102c0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  81027c:	00802074 	movhi	r2,129
  810280:	1092f704 	addi	r2,r2,19420
  810284:	e0fffe17 	ldw	r3,-8(fp)
  810288:	18c00324 	muli	r3,r3,12
  81028c:	10c5883a 	add	r2,r2,r3
  810290:	10800204 	addi	r2,r2,8
  810294:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  810298:	1000090e 	bge	r2,zero,8102c0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  81029c:	e0bffe17 	ldw	r2,-8(fp)
  8102a0:	10c00324 	muli	r3,r2,12
  8102a4:	00802074 	movhi	r2,129
  8102a8:	1092f704 	addi	r2,r2,19420
  8102ac:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8102b0:	e0bfff17 	ldw	r2,-4(fp)
  8102b4:	18800226 	beq	r3,r2,8102c0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8102b8:	00bffcc4 	movi	r2,-13
  8102bc:	00000806 	br	8102e0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8102c0:	e0bffe17 	ldw	r2,-8(fp)
  8102c4:	10800044 	addi	r2,r2,1
  8102c8:	e0bffe15 	stw	r2,-8(fp)
  8102cc:	d0a01417 	ldw	r2,-32688(gp)
  8102d0:	1007883a 	mov	r3,r2
  8102d4:	e0bffe17 	ldw	r2,-8(fp)
  8102d8:	18bfdf2e 	bgeu	r3,r2,810258 <__alt_mem_onchip_mem+0xff790258>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8102dc:	0005883a 	mov	r2,zero
}
  8102e0:	e037883a 	mov	sp,fp
  8102e4:	df000017 	ldw	fp,0(sp)
  8102e8:	dec00104 	addi	sp,sp,4
  8102ec:	f800283a 	ret

008102f0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8102f0:	defff604 	addi	sp,sp,-40
  8102f4:	dfc00915 	stw	ra,36(sp)
  8102f8:	df000815 	stw	fp,32(sp)
  8102fc:	df000804 	addi	fp,sp,32
  810300:	e13ffd15 	stw	r4,-12(fp)
  810304:	e17ffe15 	stw	r5,-8(fp)
  810308:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81030c:	00bfffc4 	movi	r2,-1
  810310:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  810314:	00bffb44 	movi	r2,-19
  810318:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  81031c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  810320:	d1601204 	addi	r5,gp,-32696
  810324:	e13ffd17 	ldw	r4,-12(fp)
  810328:	0812f680 	call	812f68 <alt_find_dev>
  81032c:	e0bff815 	stw	r2,-32(fp)
  810330:	e0bff817 	ldw	r2,-32(fp)
  810334:	1000051e 	bne	r2,zero,81034c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  810338:	e13ffd17 	ldw	r4,-12(fp)
  81033c:	0812ff80 	call	812ff8 <alt_find_file>
  810340:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  810344:	00800044 	movi	r2,1
  810348:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  81034c:	e0bff817 	ldw	r2,-32(fp)
  810350:	10002926 	beq	r2,zero,8103f8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  810354:	e13ff817 	ldw	r4,-32(fp)
  810358:	08131000 	call	813100 <alt_get_fd>
  81035c:	e0bff915 	stw	r2,-28(fp)
  810360:	e0bff917 	ldw	r2,-28(fp)
  810364:	1000030e 	bge	r2,zero,810374 <open+0x84>
    {
      status = index;
  810368:	e0bff917 	ldw	r2,-28(fp)
  81036c:	e0bffa15 	stw	r2,-24(fp)
  810370:	00002306 	br	810400 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  810374:	e0bff917 	ldw	r2,-28(fp)
  810378:	10c00324 	muli	r3,r2,12
  81037c:	00802074 	movhi	r2,129
  810380:	1092f704 	addi	r2,r2,19420
  810384:	1885883a 	add	r2,r3,r2
  810388:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  81038c:	e0fffe17 	ldw	r3,-8(fp)
  810390:	00900034 	movhi	r2,16384
  810394:	10bfffc4 	addi	r2,r2,-1
  810398:	1886703a 	and	r3,r3,r2
  81039c:	e0bffc17 	ldw	r2,-16(fp)
  8103a0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8103a4:	e0bffb17 	ldw	r2,-20(fp)
  8103a8:	1000051e 	bne	r2,zero,8103c0 <open+0xd0>
  8103ac:	e13ffc17 	ldw	r4,-16(fp)
  8103b0:	081022c0 	call	81022c <alt_file_locked>
  8103b4:	e0bffa15 	stw	r2,-24(fp)
  8103b8:	e0bffa17 	ldw	r2,-24(fp)
  8103bc:	10001016 	blt	r2,zero,810400 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8103c0:	e0bff817 	ldw	r2,-32(fp)
  8103c4:	10800317 	ldw	r2,12(r2)
  8103c8:	10000826 	beq	r2,zero,8103ec <open+0xfc>
  8103cc:	e0bff817 	ldw	r2,-32(fp)
  8103d0:	10800317 	ldw	r2,12(r2)
  8103d4:	e1ffff17 	ldw	r7,-4(fp)
  8103d8:	e1bffe17 	ldw	r6,-8(fp)
  8103dc:	e17ffd17 	ldw	r5,-12(fp)
  8103e0:	e13ffc17 	ldw	r4,-16(fp)
  8103e4:	103ee83a 	callr	r2
  8103e8:	00000106 	br	8103f0 <open+0x100>
  8103ec:	0005883a 	mov	r2,zero
  8103f0:	e0bffa15 	stw	r2,-24(fp)
  8103f4:	00000206 	br	810400 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8103f8:	00bffb44 	movi	r2,-19
  8103fc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  810400:	e0bffa17 	ldw	r2,-24(fp)
  810404:	1000090e 	bge	r2,zero,81042c <open+0x13c>
  {
    alt_release_fd (index);  
  810408:	e13ff917 	ldw	r4,-28(fp)
  81040c:	081057c0 	call	81057c <alt_release_fd>
    ALT_ERRNO = -status;
  810410:	08101f00 	call	8101f0 <alt_get_errno>
  810414:	1007883a 	mov	r3,r2
  810418:	e0bffa17 	ldw	r2,-24(fp)
  81041c:	0085c83a 	sub	r2,zero,r2
  810420:	18800015 	stw	r2,0(r3)
    return -1;
  810424:	00bfffc4 	movi	r2,-1
  810428:	00000106 	br	810430 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  81042c:	e0bff917 	ldw	r2,-28(fp)
}
  810430:	e037883a 	mov	sp,fp
  810434:	dfc00117 	ldw	ra,4(sp)
  810438:	df000017 	ldw	fp,0(sp)
  81043c:	dec00204 	addi	sp,sp,8
  810440:	f800283a 	ret

00810444 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810444:	defffe04 	addi	sp,sp,-8
  810448:	dfc00115 	stw	ra,4(sp)
  81044c:	df000015 	stw	fp,0(sp)
  810450:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810454:	d0a01517 	ldw	r2,-32684(gp)
  810458:	10000326 	beq	r2,zero,810468 <alt_get_errno+0x24>
  81045c:	d0a01517 	ldw	r2,-32684(gp)
  810460:	103ee83a 	callr	r2
  810464:	00000106 	br	81046c <alt_get_errno+0x28>
  810468:	d0a76b04 	addi	r2,gp,-25172
}
  81046c:	e037883a 	mov	sp,fp
  810470:	dfc00117 	ldw	ra,4(sp)
  810474:	df000017 	ldw	fp,0(sp)
  810478:	dec00204 	addi	sp,sp,8
  81047c:	f800283a 	ret

00810480 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  810480:	defff904 	addi	sp,sp,-28
  810484:	dfc00615 	stw	ra,24(sp)
  810488:	df000515 	stw	fp,20(sp)
  81048c:	df000504 	addi	fp,sp,20
  810490:	e13ffd15 	stw	r4,-12(fp)
  810494:	e17ffe15 	stw	r5,-8(fp)
  810498:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81049c:	e0bffd17 	ldw	r2,-12(fp)
  8104a0:	10000616 	blt	r2,zero,8104bc <read+0x3c>
  8104a4:	e0bffd17 	ldw	r2,-12(fp)
  8104a8:	10c00324 	muli	r3,r2,12
  8104ac:	00802074 	movhi	r2,129
  8104b0:	1092f704 	addi	r2,r2,19420
  8104b4:	1885883a 	add	r2,r3,r2
  8104b8:	00000106 	br	8104c0 <read+0x40>
  8104bc:	0005883a 	mov	r2,zero
  8104c0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8104c4:	e0bffb17 	ldw	r2,-20(fp)
  8104c8:	10002226 	beq	r2,zero,810554 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8104cc:	e0bffb17 	ldw	r2,-20(fp)
  8104d0:	10800217 	ldw	r2,8(r2)
  8104d4:	108000cc 	andi	r2,r2,3
  8104d8:	10800060 	cmpeqi	r2,r2,1
  8104dc:	1000181e 	bne	r2,zero,810540 <read+0xc0>
        (fd->dev->read))
  8104e0:	e0bffb17 	ldw	r2,-20(fp)
  8104e4:	10800017 	ldw	r2,0(r2)
  8104e8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8104ec:	10001426 	beq	r2,zero,810540 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  8104f0:	e0bffb17 	ldw	r2,-20(fp)
  8104f4:	10800017 	ldw	r2,0(r2)
  8104f8:	10800517 	ldw	r2,20(r2)
  8104fc:	e0ffff17 	ldw	r3,-4(fp)
  810500:	180d883a 	mov	r6,r3
  810504:	e17ffe17 	ldw	r5,-8(fp)
  810508:	e13ffb17 	ldw	r4,-20(fp)
  81050c:	103ee83a 	callr	r2
  810510:	e0bffc15 	stw	r2,-16(fp)
  810514:	e0bffc17 	ldw	r2,-16(fp)
  810518:	1000070e 	bge	r2,zero,810538 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  81051c:	08104440 	call	810444 <alt_get_errno>
  810520:	1007883a 	mov	r3,r2
  810524:	e0bffc17 	ldw	r2,-16(fp)
  810528:	0085c83a 	sub	r2,zero,r2
  81052c:	18800015 	stw	r2,0(r3)
          return -1;
  810530:	00bfffc4 	movi	r2,-1
  810534:	00000c06 	br	810568 <read+0xe8>
        }
        return rval;
  810538:	e0bffc17 	ldw	r2,-16(fp)
  81053c:	00000a06 	br	810568 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  810540:	08104440 	call	810444 <alt_get_errno>
  810544:	1007883a 	mov	r3,r2
  810548:	00800344 	movi	r2,13
  81054c:	18800015 	stw	r2,0(r3)
  810550:	00000406 	br	810564 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  810554:	08104440 	call	810444 <alt_get_errno>
  810558:	1007883a 	mov	r3,r2
  81055c:	00801444 	movi	r2,81
  810560:	18800015 	stw	r2,0(r3)
  }
  return -1;
  810564:	00bfffc4 	movi	r2,-1
}
  810568:	e037883a 	mov	sp,fp
  81056c:	dfc00117 	ldw	ra,4(sp)
  810570:	df000017 	ldw	fp,0(sp)
  810574:	dec00204 	addi	sp,sp,8
  810578:	f800283a 	ret

0081057c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  81057c:	defffe04 	addi	sp,sp,-8
  810580:	df000115 	stw	fp,4(sp)
  810584:	df000104 	addi	fp,sp,4
  810588:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  81058c:	e0bfff17 	ldw	r2,-4(fp)
  810590:	108000d0 	cmplti	r2,r2,3
  810594:	10000d1e 	bne	r2,zero,8105cc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  810598:	00802074 	movhi	r2,129
  81059c:	1092f704 	addi	r2,r2,19420
  8105a0:	e0ffff17 	ldw	r3,-4(fp)
  8105a4:	18c00324 	muli	r3,r3,12
  8105a8:	10c5883a 	add	r2,r2,r3
  8105ac:	10800204 	addi	r2,r2,8
  8105b0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8105b4:	00802074 	movhi	r2,129
  8105b8:	1092f704 	addi	r2,r2,19420
  8105bc:	e0ffff17 	ldw	r3,-4(fp)
  8105c0:	18c00324 	muli	r3,r3,12
  8105c4:	10c5883a 	add	r2,r2,r3
  8105c8:	10000015 	stw	zero,0(r2)
  }
}
  8105cc:	0001883a 	nop
  8105d0:	e037883a 	mov	sp,fp
  8105d4:	df000017 	ldw	fp,0(sp)
  8105d8:	dec00104 	addi	sp,sp,4
  8105dc:	f800283a 	ret

008105e0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  8105e0:	defff904 	addi	sp,sp,-28
  8105e4:	df000615 	stw	fp,24(sp)
  8105e8:	df000604 	addi	fp,sp,24
  8105ec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8105f0:	0005303a 	rdctl	r2,status
  8105f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8105f8:	e0fffe17 	ldw	r3,-8(fp)
  8105fc:	00bfff84 	movi	r2,-2
  810600:	1884703a 	and	r2,r3,r2
  810604:	1001703a 	wrctl	status,r2
  
  return context;
  810608:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  81060c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  810610:	d0a01717 	ldw	r2,-32676(gp)
  810614:	10c000c4 	addi	r3,r2,3
  810618:	00bfff04 	movi	r2,-4
  81061c:	1884703a 	and	r2,r3,r2
  810620:	d0a01715 	stw	r2,-32676(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  810624:	d0e01717 	ldw	r3,-32676(gp)
  810628:	e0bfff17 	ldw	r2,-4(fp)
  81062c:	1887883a 	add	r3,r3,r2
  810630:	00804034 	movhi	r2,256
  810634:	10800004 	addi	r2,r2,0
  810638:	10c0062e 	bgeu	r2,r3,810654 <sbrk+0x74>
  81063c:	e0bffb17 	ldw	r2,-20(fp)
  810640:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810644:	e0bffa17 	ldw	r2,-24(fp)
  810648:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  81064c:	00bfffc4 	movi	r2,-1
  810650:	00000b06 	br	810680 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  810654:	d0a01717 	ldw	r2,-32676(gp)
  810658:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  81065c:	d0e01717 	ldw	r3,-32676(gp)
  810660:	e0bfff17 	ldw	r2,-4(fp)
  810664:	1885883a 	add	r2,r3,r2
  810668:	d0a01715 	stw	r2,-32676(gp)
  81066c:	e0bffb17 	ldw	r2,-20(fp)
  810670:	e0bffc15 	stw	r2,-16(fp)
  810674:	e0bffc17 	ldw	r2,-16(fp)
  810678:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  81067c:	e0bffd17 	ldw	r2,-12(fp)
} 
  810680:	e037883a 	mov	sp,fp
  810684:	df000017 	ldw	fp,0(sp)
  810688:	dec00104 	addi	sp,sp,4
  81068c:	f800283a 	ret

00810690 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  810690:	defffa04 	addi	sp,sp,-24
  810694:	df000515 	stw	fp,20(sp)
  810698:	df000504 	addi	fp,sp,20
  81069c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8106a0:	0005303a 	rdctl	r2,status
  8106a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8106a8:	e0fffc17 	ldw	r3,-16(fp)
  8106ac:	00bfff84 	movi	r2,-2
  8106b0:	1884703a 	and	r2,r3,r2
  8106b4:	1001703a 	wrctl	status,r2
  
  return context;
  8106b8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8106bc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  8106c0:	e0bfff17 	ldw	r2,-4(fp)
  8106c4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8106c8:	e0bffd17 	ldw	r2,-12(fp)
  8106cc:	10800017 	ldw	r2,0(r2)
  8106d0:	e0fffd17 	ldw	r3,-12(fp)
  8106d4:	18c00117 	ldw	r3,4(r3)
  8106d8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  8106dc:	e0bffd17 	ldw	r2,-12(fp)
  8106e0:	10800117 	ldw	r2,4(r2)
  8106e4:	e0fffd17 	ldw	r3,-12(fp)
  8106e8:	18c00017 	ldw	r3,0(r3)
  8106ec:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8106f0:	e0bffd17 	ldw	r2,-12(fp)
  8106f4:	e0fffd17 	ldw	r3,-12(fp)
  8106f8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  8106fc:	e0bffd17 	ldw	r2,-12(fp)
  810700:	e0fffd17 	ldw	r3,-12(fp)
  810704:	10c00015 	stw	r3,0(r2)
  810708:	e0bffb17 	ldw	r2,-20(fp)
  81070c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810710:	e0bffe17 	ldw	r2,-8(fp)
  810714:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  810718:	0001883a 	nop
  81071c:	e037883a 	mov	sp,fp
  810720:	df000017 	ldw	fp,0(sp)
  810724:	dec00104 	addi	sp,sp,4
  810728:	f800283a 	ret

0081072c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  81072c:	defffb04 	addi	sp,sp,-20
  810730:	dfc00415 	stw	ra,16(sp)
  810734:	df000315 	stw	fp,12(sp)
  810738:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  81073c:	d0a01817 	ldw	r2,-32672(gp)
  810740:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  810744:	d0a77717 	ldw	r2,-25124(gp)
  810748:	10800044 	addi	r2,r2,1
  81074c:	d0a77715 	stw	r2,-25124(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  810750:	00002e06 	br	81080c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  810754:	e0bffd17 	ldw	r2,-12(fp)
  810758:	10800017 	ldw	r2,0(r2)
  81075c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  810760:	e0bffd17 	ldw	r2,-12(fp)
  810764:	10800403 	ldbu	r2,16(r2)
  810768:	10803fcc 	andi	r2,r2,255
  81076c:	10000426 	beq	r2,zero,810780 <alt_tick+0x54>
  810770:	d0a77717 	ldw	r2,-25124(gp)
  810774:	1000021e 	bne	r2,zero,810780 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  810778:	e0bffd17 	ldw	r2,-12(fp)
  81077c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  810780:	e0bffd17 	ldw	r2,-12(fp)
  810784:	10800217 	ldw	r2,8(r2)
  810788:	d0e77717 	ldw	r3,-25124(gp)
  81078c:	18801d36 	bltu	r3,r2,810804 <alt_tick+0xd8>
  810790:	e0bffd17 	ldw	r2,-12(fp)
  810794:	10800403 	ldbu	r2,16(r2)
  810798:	10803fcc 	andi	r2,r2,255
  81079c:	1000191e 	bne	r2,zero,810804 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  8107a0:	e0bffd17 	ldw	r2,-12(fp)
  8107a4:	10800317 	ldw	r2,12(r2)
  8107a8:	e0fffd17 	ldw	r3,-12(fp)
  8107ac:	18c00517 	ldw	r3,20(r3)
  8107b0:	1809883a 	mov	r4,r3
  8107b4:	103ee83a 	callr	r2
  8107b8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8107bc:	e0bfff17 	ldw	r2,-4(fp)
  8107c0:	1000031e 	bne	r2,zero,8107d0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  8107c4:	e13ffd17 	ldw	r4,-12(fp)
  8107c8:	08106900 	call	810690 <alt_alarm_stop>
  8107cc:	00000d06 	br	810804 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  8107d0:	e0bffd17 	ldw	r2,-12(fp)
  8107d4:	10c00217 	ldw	r3,8(r2)
  8107d8:	e0bfff17 	ldw	r2,-4(fp)
  8107dc:	1887883a 	add	r3,r3,r2
  8107e0:	e0bffd17 	ldw	r2,-12(fp)
  8107e4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8107e8:	e0bffd17 	ldw	r2,-12(fp)
  8107ec:	10c00217 	ldw	r3,8(r2)
  8107f0:	d0a77717 	ldw	r2,-25124(gp)
  8107f4:	1880032e 	bgeu	r3,r2,810804 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  8107f8:	e0bffd17 	ldw	r2,-12(fp)
  8107fc:	00c00044 	movi	r3,1
  810800:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  810804:	e0bffe17 	ldw	r2,-8(fp)
  810808:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81080c:	e0fffd17 	ldw	r3,-12(fp)
  810810:	d0a01804 	addi	r2,gp,-32672
  810814:	18bfcf1e 	bne	r3,r2,810754 <__alt_mem_onchip_mem+0xff790754>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  810818:	0001883a 	nop
}
  81081c:	0001883a 	nop
  810820:	e037883a 	mov	sp,fp
  810824:	dfc00117 	ldw	ra,4(sp)
  810828:	df000017 	ldw	fp,0(sp)
  81082c:	dec00204 	addi	sp,sp,8
  810830:	f800283a 	ret

00810834 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810834:	defffe04 	addi	sp,sp,-8
  810838:	dfc00115 	stw	ra,4(sp)
  81083c:	df000015 	stw	fp,0(sp)
  810840:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810844:	d0a01517 	ldw	r2,-32684(gp)
  810848:	10000326 	beq	r2,zero,810858 <alt_get_errno+0x24>
  81084c:	d0a01517 	ldw	r2,-32684(gp)
  810850:	103ee83a 	callr	r2
  810854:	00000106 	br	81085c <alt_get_errno+0x28>
  810858:	d0a76b04 	addi	r2,gp,-25172
}
  81085c:	e037883a 	mov	sp,fp
  810860:	dfc00117 	ldw	ra,4(sp)
  810864:	df000017 	ldw	fp,0(sp)
  810868:	dec00204 	addi	sp,sp,8
  81086c:	f800283a 	ret

00810870 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  810870:	defff904 	addi	sp,sp,-28
  810874:	dfc00615 	stw	ra,24(sp)
  810878:	df000515 	stw	fp,20(sp)
  81087c:	df000504 	addi	fp,sp,20
  810880:	e13ffd15 	stw	r4,-12(fp)
  810884:	e17ffe15 	stw	r5,-8(fp)
  810888:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81088c:	e0bffd17 	ldw	r2,-12(fp)
  810890:	10000616 	blt	r2,zero,8108ac <write+0x3c>
  810894:	e0bffd17 	ldw	r2,-12(fp)
  810898:	10c00324 	muli	r3,r2,12
  81089c:	00802074 	movhi	r2,129
  8108a0:	1092f704 	addi	r2,r2,19420
  8108a4:	1885883a 	add	r2,r3,r2
  8108a8:	00000106 	br	8108b0 <write+0x40>
  8108ac:	0005883a 	mov	r2,zero
  8108b0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8108b4:	e0bffb17 	ldw	r2,-20(fp)
  8108b8:	10002126 	beq	r2,zero,810940 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  8108bc:	e0bffb17 	ldw	r2,-20(fp)
  8108c0:	10800217 	ldw	r2,8(r2)
  8108c4:	108000cc 	andi	r2,r2,3
  8108c8:	10001826 	beq	r2,zero,81092c <write+0xbc>
  8108cc:	e0bffb17 	ldw	r2,-20(fp)
  8108d0:	10800017 	ldw	r2,0(r2)
  8108d4:	10800617 	ldw	r2,24(r2)
  8108d8:	10001426 	beq	r2,zero,81092c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8108dc:	e0bffb17 	ldw	r2,-20(fp)
  8108e0:	10800017 	ldw	r2,0(r2)
  8108e4:	10800617 	ldw	r2,24(r2)
  8108e8:	e0ffff17 	ldw	r3,-4(fp)
  8108ec:	180d883a 	mov	r6,r3
  8108f0:	e17ffe17 	ldw	r5,-8(fp)
  8108f4:	e13ffb17 	ldw	r4,-20(fp)
  8108f8:	103ee83a 	callr	r2
  8108fc:	e0bffc15 	stw	r2,-16(fp)
  810900:	e0bffc17 	ldw	r2,-16(fp)
  810904:	1000070e 	bge	r2,zero,810924 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  810908:	08108340 	call	810834 <alt_get_errno>
  81090c:	1007883a 	mov	r3,r2
  810910:	e0bffc17 	ldw	r2,-16(fp)
  810914:	0085c83a 	sub	r2,zero,r2
  810918:	18800015 	stw	r2,0(r3)
        return -1;
  81091c:	00bfffc4 	movi	r2,-1
  810920:	00000c06 	br	810954 <write+0xe4>
      }
      return rval;
  810924:	e0bffc17 	ldw	r2,-16(fp)
  810928:	00000a06 	br	810954 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  81092c:	08108340 	call	810834 <alt_get_errno>
  810930:	1007883a 	mov	r3,r2
  810934:	00800344 	movi	r2,13
  810938:	18800015 	stw	r2,0(r3)
  81093c:	00000406 	br	810950 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  810940:	08108340 	call	810834 <alt_get_errno>
  810944:	1007883a 	mov	r3,r2
  810948:	00801444 	movi	r2,81
  81094c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  810950:	00bfffc4 	movi	r2,-1
}
  810954:	e037883a 	mov	sp,fp
  810958:	dfc00117 	ldw	ra,4(sp)
  81095c:	df000017 	ldw	fp,0(sp)
  810960:	dec00204 	addi	sp,sp,8
  810964:	f800283a 	ret

00810968 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  810968:	defffd04 	addi	sp,sp,-12
  81096c:	dfc00215 	stw	ra,8(sp)
  810970:	df000115 	stw	fp,4(sp)
  810974:	df000104 	addi	fp,sp,4
  810978:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  81097c:	d1601204 	addi	r5,gp,-32696
  810980:	e13fff17 	ldw	r4,-4(fp)
  810984:	0812e040 	call	812e04 <alt_dev_llist_insert>
}
  810988:	e037883a 	mov	sp,fp
  81098c:	dfc00117 	ldw	ra,4(sp)
  810990:	df000017 	ldw	fp,0(sp)
  810994:	dec00204 	addi	sp,sp,8
  810998:	f800283a 	ret

0081099c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  81099c:	defffd04 	addi	sp,sp,-12
  8109a0:	dfc00215 	stw	ra,8(sp)
  8109a4:	df000115 	stw	fp,4(sp)
  8109a8:	df000104 	addi	fp,sp,4
  8109ac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  8109b0:	08135e80 	call	8135e8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8109b4:	00800044 	movi	r2,1
  8109b8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8109bc:	0001883a 	nop
  8109c0:	e037883a 	mov	sp,fp
  8109c4:	dfc00117 	ldw	ra,4(sp)
  8109c8:	df000017 	ldw	fp,0(sp)
  8109cc:	dec00204 	addi	sp,sp,8
  8109d0:	f800283a 	ret

008109d4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8109d4:	defffe04 	addi	sp,sp,-8
  8109d8:	dfc00115 	stw	ra,4(sp)
  8109dc:	df000015 	stw	fp,0(sp)
  8109e0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
  8109e4:	01c0fa04 	movi	r7,1000
  8109e8:	01800084 	movi	r6,2
  8109ec:	000b883a 	mov	r5,zero
  8109f0:	01004434 	movhi	r4,272
  8109f4:	21040804 	addi	r4,r4,4128
  8109f8:	081242c0 	call	81242c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  8109fc:	01800044 	movi	r6,1
  810a00:	000b883a 	mov	r5,zero
  810a04:	01002074 	movhi	r4,129
  810a08:	21136104 	addi	r4,r4,19844
  810a0c:	0810bd40 	call	810bd4 <altera_avalon_jtag_uart_init>
  810a10:	01002074 	movhi	r4,129
  810a14:	21135704 	addi	r4,r4,19804
  810a18:	08109680 	call	810968 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  810a1c:	01002074 	movhi	r4,129
  810a20:	21177904 	addi	r4,r4,24036
  810a24:	08122200 	call	812220 <altera_avalon_lcd_16207_init>
  810a28:	01002074 	movhi	r4,129
  810a2c:	21176f04 	addi	r4,r4,23996
  810a30:	08109680 	call	810968 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( CPU_SYSID, cpu_sysid);
  810a34:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  810a38:	000d883a 	mov	r6,zero
  810a3c:	000b883a 	mov	r5,zero
  810a40:	01002074 	movhi	r4,129
  810a44:	2117c104 	addi	r4,r4,24324
  810a48:	08125b80 	call	8125b8 <altera_avalon_uart_init>
  810a4c:	01002074 	movhi	r4,129
  810a50:	2117b704 	addi	r4,r4,24284
  810a54:	08109680 	call	810968 <alt_dev_reg>
}
  810a58:	0001883a 	nop
  810a5c:	e037883a 	mov	sp,fp
  810a60:	dfc00117 	ldw	ra,4(sp)
  810a64:	df000017 	ldw	fp,0(sp)
  810a68:	dec00204 	addi	sp,sp,8
  810a6c:	f800283a 	ret

00810a70 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  810a70:	defffa04 	addi	sp,sp,-24
  810a74:	dfc00515 	stw	ra,20(sp)
  810a78:	df000415 	stw	fp,16(sp)
  810a7c:	df000404 	addi	fp,sp,16
  810a80:	e13ffd15 	stw	r4,-12(fp)
  810a84:	e17ffe15 	stw	r5,-8(fp)
  810a88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810a8c:	e0bffd17 	ldw	r2,-12(fp)
  810a90:	10800017 	ldw	r2,0(r2)
  810a94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  810a98:	e0bffc17 	ldw	r2,-16(fp)
  810a9c:	10c00a04 	addi	r3,r2,40
  810aa0:	e0bffd17 	ldw	r2,-12(fp)
  810aa4:	10800217 	ldw	r2,8(r2)
  810aa8:	100f883a 	mov	r7,r2
  810aac:	e1bfff17 	ldw	r6,-4(fp)
  810ab0:	e17ffe17 	ldw	r5,-8(fp)
  810ab4:	1809883a 	mov	r4,r3
  810ab8:	08110980 	call	811098 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  810abc:	e037883a 	mov	sp,fp
  810ac0:	dfc00117 	ldw	ra,4(sp)
  810ac4:	df000017 	ldw	fp,0(sp)
  810ac8:	dec00204 	addi	sp,sp,8
  810acc:	f800283a 	ret

00810ad0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  810ad0:	defffa04 	addi	sp,sp,-24
  810ad4:	dfc00515 	stw	ra,20(sp)
  810ad8:	df000415 	stw	fp,16(sp)
  810adc:	df000404 	addi	fp,sp,16
  810ae0:	e13ffd15 	stw	r4,-12(fp)
  810ae4:	e17ffe15 	stw	r5,-8(fp)
  810ae8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810aec:	e0bffd17 	ldw	r2,-12(fp)
  810af0:	10800017 	ldw	r2,0(r2)
  810af4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  810af8:	e0bffc17 	ldw	r2,-16(fp)
  810afc:	10c00a04 	addi	r3,r2,40
  810b00:	e0bffd17 	ldw	r2,-12(fp)
  810b04:	10800217 	ldw	r2,8(r2)
  810b08:	100f883a 	mov	r7,r2
  810b0c:	e1bfff17 	ldw	r6,-4(fp)
  810b10:	e17ffe17 	ldw	r5,-8(fp)
  810b14:	1809883a 	mov	r4,r3
  810b18:	08112b40 	call	8112b4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  810b1c:	e037883a 	mov	sp,fp
  810b20:	dfc00117 	ldw	ra,4(sp)
  810b24:	df000017 	ldw	fp,0(sp)
  810b28:	dec00204 	addi	sp,sp,8
  810b2c:	f800283a 	ret

00810b30 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  810b30:	defffc04 	addi	sp,sp,-16
  810b34:	dfc00315 	stw	ra,12(sp)
  810b38:	df000215 	stw	fp,8(sp)
  810b3c:	df000204 	addi	fp,sp,8
  810b40:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810b44:	e0bfff17 	ldw	r2,-4(fp)
  810b48:	10800017 	ldw	r2,0(r2)
  810b4c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  810b50:	e0bffe17 	ldw	r2,-8(fp)
  810b54:	10c00a04 	addi	r3,r2,40
  810b58:	e0bfff17 	ldw	r2,-4(fp)
  810b5c:	10800217 	ldw	r2,8(r2)
  810b60:	100b883a 	mov	r5,r2
  810b64:	1809883a 	mov	r4,r3
  810b68:	0810f400 	call	810f40 <altera_avalon_jtag_uart_close>
}
  810b6c:	e037883a 	mov	sp,fp
  810b70:	dfc00117 	ldw	ra,4(sp)
  810b74:	df000017 	ldw	fp,0(sp)
  810b78:	dec00204 	addi	sp,sp,8
  810b7c:	f800283a 	ret

00810b80 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  810b80:	defffa04 	addi	sp,sp,-24
  810b84:	dfc00515 	stw	ra,20(sp)
  810b88:	df000415 	stw	fp,16(sp)
  810b8c:	df000404 	addi	fp,sp,16
  810b90:	e13ffd15 	stw	r4,-12(fp)
  810b94:	e17ffe15 	stw	r5,-8(fp)
  810b98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  810b9c:	e0bffd17 	ldw	r2,-12(fp)
  810ba0:	10800017 	ldw	r2,0(r2)
  810ba4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  810ba8:	e0bffc17 	ldw	r2,-16(fp)
  810bac:	10800a04 	addi	r2,r2,40
  810bb0:	e1bfff17 	ldw	r6,-4(fp)
  810bb4:	e17ffe17 	ldw	r5,-8(fp)
  810bb8:	1009883a 	mov	r4,r2
  810bbc:	0810fa80 	call	810fa8 <altera_avalon_jtag_uart_ioctl>
}
  810bc0:	e037883a 	mov	sp,fp
  810bc4:	dfc00117 	ldw	ra,4(sp)
  810bc8:	df000017 	ldw	fp,0(sp)
  810bcc:	dec00204 	addi	sp,sp,8
  810bd0:	f800283a 	ret

00810bd4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  810bd4:	defffa04 	addi	sp,sp,-24
  810bd8:	dfc00515 	stw	ra,20(sp)
  810bdc:	df000415 	stw	fp,16(sp)
  810be0:	df000404 	addi	fp,sp,16
  810be4:	e13ffd15 	stw	r4,-12(fp)
  810be8:	e17ffe15 	stw	r5,-8(fp)
  810bec:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810bf0:	e0bffd17 	ldw	r2,-12(fp)
  810bf4:	00c00044 	movi	r3,1
  810bf8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  810bfc:	e0bffd17 	ldw	r2,-12(fp)
  810c00:	10800017 	ldw	r2,0(r2)
  810c04:	10800104 	addi	r2,r2,4
  810c08:	1007883a 	mov	r3,r2
  810c0c:	e0bffd17 	ldw	r2,-12(fp)
  810c10:	10800817 	ldw	r2,32(r2)
  810c14:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  810c18:	e0bffe17 	ldw	r2,-8(fp)
  810c1c:	e0ffff17 	ldw	r3,-4(fp)
  810c20:	d8000015 	stw	zero,0(sp)
  810c24:	e1fffd17 	ldw	r7,-12(fp)
  810c28:	01802074 	movhi	r6,129
  810c2c:	31832504 	addi	r6,r6,3220
  810c30:	180b883a 	mov	r5,r3
  810c34:	1009883a 	mov	r4,r2
  810c38:	08131d80 	call	8131d8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  810c3c:	e0bffd17 	ldw	r2,-12(fp)
  810c40:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  810c44:	e0bffd17 	ldw	r2,-12(fp)
  810c48:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  810c4c:	d0e77617 	ldw	r3,-25128(gp)
  810c50:	e1fffd17 	ldw	r7,-12(fp)
  810c54:	01802074 	movhi	r6,129
  810c58:	3183a804 	addi	r6,r6,3744
  810c5c:	180b883a 	mov	r5,r3
  810c60:	1009883a 	mov	r4,r2
  810c64:	080f9800 	call	80f980 <alt_alarm_start>
  810c68:	1000040e 	bge	r2,zero,810c7c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  810c6c:	e0fffd17 	ldw	r3,-12(fp)
  810c70:	00a00034 	movhi	r2,32768
  810c74:	10bfffc4 	addi	r2,r2,-1
  810c78:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  810c7c:	0001883a 	nop
  810c80:	e037883a 	mov	sp,fp
  810c84:	dfc00117 	ldw	ra,4(sp)
  810c88:	df000017 	ldw	fp,0(sp)
  810c8c:	dec00204 	addi	sp,sp,8
  810c90:	f800283a 	ret

00810c94 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  810c94:	defff804 	addi	sp,sp,-32
  810c98:	df000715 	stw	fp,28(sp)
  810c9c:	df000704 	addi	fp,sp,28
  810ca0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  810ca4:	e0bfff17 	ldw	r2,-4(fp)
  810ca8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  810cac:	e0bffb17 	ldw	r2,-20(fp)
  810cb0:	10800017 	ldw	r2,0(r2)
  810cb4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810cb8:	e0bffc17 	ldw	r2,-16(fp)
  810cbc:	10800104 	addi	r2,r2,4
  810cc0:	10800037 	ldwio	r2,0(r2)
  810cc4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  810cc8:	e0bffd17 	ldw	r2,-12(fp)
  810ccc:	1080c00c 	andi	r2,r2,768
  810cd0:	10006d26 	beq	r2,zero,810e88 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  810cd4:	e0bffd17 	ldw	r2,-12(fp)
  810cd8:	1080400c 	andi	r2,r2,256
  810cdc:	10003526 	beq	r2,zero,810db4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  810ce0:	00800074 	movhi	r2,1
  810ce4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810ce8:	e0bffb17 	ldw	r2,-20(fp)
  810cec:	10800a17 	ldw	r2,40(r2)
  810cf0:	10800044 	addi	r2,r2,1
  810cf4:	1081ffcc 	andi	r2,r2,2047
  810cf8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  810cfc:	e0bffb17 	ldw	r2,-20(fp)
  810d00:	10c00b17 	ldw	r3,44(r2)
  810d04:	e0bffe17 	ldw	r2,-8(fp)
  810d08:	18801526 	beq	r3,r2,810d60 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  810d0c:	e0bffc17 	ldw	r2,-16(fp)
  810d10:	10800037 	ldwio	r2,0(r2)
  810d14:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  810d18:	e0bff917 	ldw	r2,-28(fp)
  810d1c:	10a0000c 	andi	r2,r2,32768
  810d20:	10001126 	beq	r2,zero,810d68 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  810d24:	e0bffb17 	ldw	r2,-20(fp)
  810d28:	10800a17 	ldw	r2,40(r2)
  810d2c:	e0fff917 	ldw	r3,-28(fp)
  810d30:	1809883a 	mov	r4,r3
  810d34:	e0fffb17 	ldw	r3,-20(fp)
  810d38:	1885883a 	add	r2,r3,r2
  810d3c:	10800e04 	addi	r2,r2,56
  810d40:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810d44:	e0bffb17 	ldw	r2,-20(fp)
  810d48:	10800a17 	ldw	r2,40(r2)
  810d4c:	10800044 	addi	r2,r2,1
  810d50:	10c1ffcc 	andi	r3,r2,2047
  810d54:	e0bffb17 	ldw	r2,-20(fp)
  810d58:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  810d5c:	003fe206 	br	810ce8 <__alt_mem_onchip_mem+0xff790ce8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  810d60:	0001883a 	nop
  810d64:	00000106 	br	810d6c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  810d68:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  810d6c:	e0bff917 	ldw	r2,-28(fp)
  810d70:	10bfffec 	andhi	r2,r2,65535
  810d74:	10000f26 	beq	r2,zero,810db4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810d78:	e0bffb17 	ldw	r2,-20(fp)
  810d7c:	10c00817 	ldw	r3,32(r2)
  810d80:	00bfff84 	movi	r2,-2
  810d84:	1886703a 	and	r3,r3,r2
  810d88:	e0bffb17 	ldw	r2,-20(fp)
  810d8c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  810d90:	e0bffc17 	ldw	r2,-16(fp)
  810d94:	10800104 	addi	r2,r2,4
  810d98:	1007883a 	mov	r3,r2
  810d9c:	e0bffb17 	ldw	r2,-20(fp)
  810da0:	10800817 	ldw	r2,32(r2)
  810da4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810da8:	e0bffc17 	ldw	r2,-16(fp)
  810dac:	10800104 	addi	r2,r2,4
  810db0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  810db4:	e0bffd17 	ldw	r2,-12(fp)
  810db8:	1080800c 	andi	r2,r2,512
  810dbc:	103fbe26 	beq	r2,zero,810cb8 <__alt_mem_onchip_mem+0xff790cb8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  810dc0:	e0bffd17 	ldw	r2,-12(fp)
  810dc4:	1004d43a 	srli	r2,r2,16
  810dc8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  810dcc:	00001406 	br	810e20 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  810dd0:	e0bffc17 	ldw	r2,-16(fp)
  810dd4:	e0fffb17 	ldw	r3,-20(fp)
  810dd8:	18c00d17 	ldw	r3,52(r3)
  810ddc:	e13ffb17 	ldw	r4,-20(fp)
  810de0:	20c7883a 	add	r3,r4,r3
  810de4:	18c20e04 	addi	r3,r3,2104
  810de8:	18c00003 	ldbu	r3,0(r3)
  810dec:	18c03fcc 	andi	r3,r3,255
  810df0:	18c0201c 	xori	r3,r3,128
  810df4:	18ffe004 	addi	r3,r3,-128
  810df8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810dfc:	e0bffb17 	ldw	r2,-20(fp)
  810e00:	10800d17 	ldw	r2,52(r2)
  810e04:	10800044 	addi	r2,r2,1
  810e08:	10c1ffcc 	andi	r3,r2,2047
  810e0c:	e0bffb17 	ldw	r2,-20(fp)
  810e10:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  810e14:	e0bffa17 	ldw	r2,-24(fp)
  810e18:	10bfffc4 	addi	r2,r2,-1
  810e1c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  810e20:	e0bffa17 	ldw	r2,-24(fp)
  810e24:	10000526 	beq	r2,zero,810e3c <altera_avalon_jtag_uart_irq+0x1a8>
  810e28:	e0bffb17 	ldw	r2,-20(fp)
  810e2c:	10c00d17 	ldw	r3,52(r2)
  810e30:	e0bffb17 	ldw	r2,-20(fp)
  810e34:	10800c17 	ldw	r2,48(r2)
  810e38:	18bfe51e 	bne	r3,r2,810dd0 <__alt_mem_onchip_mem+0xff790dd0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  810e3c:	e0bffa17 	ldw	r2,-24(fp)
  810e40:	103f9d26 	beq	r2,zero,810cb8 <__alt_mem_onchip_mem+0xff790cb8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  810e44:	e0bffb17 	ldw	r2,-20(fp)
  810e48:	10c00817 	ldw	r3,32(r2)
  810e4c:	00bfff44 	movi	r2,-3
  810e50:	1886703a 	and	r3,r3,r2
  810e54:	e0bffb17 	ldw	r2,-20(fp)
  810e58:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810e5c:	e0bffb17 	ldw	r2,-20(fp)
  810e60:	10800017 	ldw	r2,0(r2)
  810e64:	10800104 	addi	r2,r2,4
  810e68:	1007883a 	mov	r3,r2
  810e6c:	e0bffb17 	ldw	r2,-20(fp)
  810e70:	10800817 	ldw	r2,32(r2)
  810e74:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810e78:	e0bffc17 	ldw	r2,-16(fp)
  810e7c:	10800104 	addi	r2,r2,4
  810e80:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  810e84:	003f8c06 	br	810cb8 <__alt_mem_onchip_mem+0xff790cb8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  810e88:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  810e8c:	0001883a 	nop
  810e90:	e037883a 	mov	sp,fp
  810e94:	df000017 	ldw	fp,0(sp)
  810e98:	dec00104 	addi	sp,sp,4
  810e9c:	f800283a 	ret

00810ea0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  810ea0:	defff804 	addi	sp,sp,-32
  810ea4:	df000715 	stw	fp,28(sp)
  810ea8:	df000704 	addi	fp,sp,28
  810eac:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  810eb0:	e0bffb17 	ldw	r2,-20(fp)
  810eb4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  810eb8:	e0bff917 	ldw	r2,-28(fp)
  810ebc:	10800017 	ldw	r2,0(r2)
  810ec0:	10800104 	addi	r2,r2,4
  810ec4:	10800037 	ldwio	r2,0(r2)
  810ec8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  810ecc:	e0bffa17 	ldw	r2,-24(fp)
  810ed0:	1081000c 	andi	r2,r2,1024
  810ed4:	10000b26 	beq	r2,zero,810f04 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  810ed8:	e0bff917 	ldw	r2,-28(fp)
  810edc:	10800017 	ldw	r2,0(r2)
  810ee0:	10800104 	addi	r2,r2,4
  810ee4:	1007883a 	mov	r3,r2
  810ee8:	e0bff917 	ldw	r2,-28(fp)
  810eec:	10800817 	ldw	r2,32(r2)
  810ef0:	10810014 	ori	r2,r2,1024
  810ef4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  810ef8:	e0bff917 	ldw	r2,-28(fp)
  810efc:	10000915 	stw	zero,36(r2)
  810f00:	00000a06 	br	810f2c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  810f04:	e0bff917 	ldw	r2,-28(fp)
  810f08:	10c00917 	ldw	r3,36(r2)
  810f0c:	00a00034 	movhi	r2,32768
  810f10:	10bfff04 	addi	r2,r2,-4
  810f14:	10c00536 	bltu	r2,r3,810f2c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  810f18:	e0bff917 	ldw	r2,-28(fp)
  810f1c:	10800917 	ldw	r2,36(r2)
  810f20:	10c00044 	addi	r3,r2,1
  810f24:	e0bff917 	ldw	r2,-28(fp)
  810f28:	10c00915 	stw	r3,36(r2)
  810f2c:	d0a77617 	ldw	r2,-25128(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  810f30:	e037883a 	mov	sp,fp
  810f34:	df000017 	ldw	fp,0(sp)
  810f38:	dec00104 	addi	sp,sp,4
  810f3c:	f800283a 	ret

00810f40 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  810f40:	defffd04 	addi	sp,sp,-12
  810f44:	df000215 	stw	fp,8(sp)
  810f48:	df000204 	addi	fp,sp,8
  810f4c:	e13ffe15 	stw	r4,-8(fp)
  810f50:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  810f54:	00000506 	br	810f6c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  810f58:	e0bfff17 	ldw	r2,-4(fp)
  810f5c:	1090000c 	andi	r2,r2,16384
  810f60:	10000226 	beq	r2,zero,810f6c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  810f64:	00bffd44 	movi	r2,-11
  810f68:	00000b06 	br	810f98 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  810f6c:	e0bffe17 	ldw	r2,-8(fp)
  810f70:	10c00d17 	ldw	r3,52(r2)
  810f74:	e0bffe17 	ldw	r2,-8(fp)
  810f78:	10800c17 	ldw	r2,48(r2)
  810f7c:	18800526 	beq	r3,r2,810f94 <altera_avalon_jtag_uart_close+0x54>
  810f80:	e0bffe17 	ldw	r2,-8(fp)
  810f84:	10c00917 	ldw	r3,36(r2)
  810f88:	e0bffe17 	ldw	r2,-8(fp)
  810f8c:	10800117 	ldw	r2,4(r2)
  810f90:	18bff136 	bltu	r3,r2,810f58 <__alt_mem_onchip_mem+0xff790f58>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  810f94:	0005883a 	mov	r2,zero
}
  810f98:	e037883a 	mov	sp,fp
  810f9c:	df000017 	ldw	fp,0(sp)
  810fa0:	dec00104 	addi	sp,sp,4
  810fa4:	f800283a 	ret

00810fa8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  810fa8:	defffa04 	addi	sp,sp,-24
  810fac:	df000515 	stw	fp,20(sp)
  810fb0:	df000504 	addi	fp,sp,20
  810fb4:	e13ffd15 	stw	r4,-12(fp)
  810fb8:	e17ffe15 	stw	r5,-8(fp)
  810fbc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  810fc0:	00bff9c4 	movi	r2,-25
  810fc4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  810fc8:	e0bffe17 	ldw	r2,-8(fp)
  810fcc:	10da8060 	cmpeqi	r3,r2,27137
  810fd0:	1800031e 	bne	r3,zero,810fe0 <altera_avalon_jtag_uart_ioctl+0x38>
  810fd4:	109a80a0 	cmpeqi	r2,r2,27138
  810fd8:	1000181e 	bne	r2,zero,81103c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  810fdc:	00002906 	br	811084 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  810fe0:	e0bffd17 	ldw	r2,-12(fp)
  810fe4:	10c00117 	ldw	r3,4(r2)
  810fe8:	00a00034 	movhi	r2,32768
  810fec:	10bfffc4 	addi	r2,r2,-1
  810ff0:	18802126 	beq	r3,r2,811078 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  810ff4:	e0bfff17 	ldw	r2,-4(fp)
  810ff8:	10800017 	ldw	r2,0(r2)
  810ffc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  811000:	e0bffc17 	ldw	r2,-16(fp)
  811004:	10800090 	cmplti	r2,r2,2
  811008:	1000061e 	bne	r2,zero,811024 <altera_avalon_jtag_uart_ioctl+0x7c>
  81100c:	e0fffc17 	ldw	r3,-16(fp)
  811010:	00a00034 	movhi	r2,32768
  811014:	10bfffc4 	addi	r2,r2,-1
  811018:	18800226 	beq	r3,r2,811024 <altera_avalon_jtag_uart_ioctl+0x7c>
  81101c:	e0bffc17 	ldw	r2,-16(fp)
  811020:	00000206 	br	81102c <altera_avalon_jtag_uart_ioctl+0x84>
  811024:	00a00034 	movhi	r2,32768
  811028:	10bfff84 	addi	r2,r2,-2
  81102c:	e0fffd17 	ldw	r3,-12(fp)
  811030:	18800115 	stw	r2,4(r3)
      rc = 0;
  811034:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  811038:	00000f06 	br	811078 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  81103c:	e0bffd17 	ldw	r2,-12(fp)
  811040:	10c00117 	ldw	r3,4(r2)
  811044:	00a00034 	movhi	r2,32768
  811048:	10bfffc4 	addi	r2,r2,-1
  81104c:	18800c26 	beq	r3,r2,811080 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  811050:	e0bffd17 	ldw	r2,-12(fp)
  811054:	10c00917 	ldw	r3,36(r2)
  811058:	e0bffd17 	ldw	r2,-12(fp)
  81105c:	10800117 	ldw	r2,4(r2)
  811060:	1885803a 	cmpltu	r2,r3,r2
  811064:	10c03fcc 	andi	r3,r2,255
  811068:	e0bfff17 	ldw	r2,-4(fp)
  81106c:	10c00015 	stw	r3,0(r2)
      rc = 0;
  811070:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  811074:	00000206 	br	811080 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  811078:	0001883a 	nop
  81107c:	00000106 	br	811084 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  811080:	0001883a 	nop

  default:
    break;
  }

  return rc;
  811084:	e0bffb17 	ldw	r2,-20(fp)
}
  811088:	e037883a 	mov	sp,fp
  81108c:	df000017 	ldw	fp,0(sp)
  811090:	dec00104 	addi	sp,sp,4
  811094:	f800283a 	ret

00811098 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  811098:	defff304 	addi	sp,sp,-52
  81109c:	dfc00c15 	stw	ra,48(sp)
  8110a0:	df000b15 	stw	fp,44(sp)
  8110a4:	df000b04 	addi	fp,sp,44
  8110a8:	e13ffc15 	stw	r4,-16(fp)
  8110ac:	e17ffd15 	stw	r5,-12(fp)
  8110b0:	e1bffe15 	stw	r6,-8(fp)
  8110b4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  8110b8:	e0bffd17 	ldw	r2,-12(fp)
  8110bc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8110c0:	00004706 	br	8111e0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8110c4:	e0bffc17 	ldw	r2,-16(fp)
  8110c8:	10800a17 	ldw	r2,40(r2)
  8110cc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  8110d0:	e0bffc17 	ldw	r2,-16(fp)
  8110d4:	10800b17 	ldw	r2,44(r2)
  8110d8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  8110dc:	e0fff717 	ldw	r3,-36(fp)
  8110e0:	e0bff817 	ldw	r2,-32(fp)
  8110e4:	18800536 	bltu	r3,r2,8110fc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  8110e8:	e0fff717 	ldw	r3,-36(fp)
  8110ec:	e0bff817 	ldw	r2,-32(fp)
  8110f0:	1885c83a 	sub	r2,r3,r2
  8110f4:	e0bff615 	stw	r2,-40(fp)
  8110f8:	00000406 	br	81110c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8110fc:	00c20004 	movi	r3,2048
  811100:	e0bff817 	ldw	r2,-32(fp)
  811104:	1885c83a 	sub	r2,r3,r2
  811108:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  81110c:	e0bff617 	ldw	r2,-40(fp)
  811110:	10001e26 	beq	r2,zero,81118c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  811114:	e0fffe17 	ldw	r3,-8(fp)
  811118:	e0bff617 	ldw	r2,-40(fp)
  81111c:	1880022e 	bgeu	r3,r2,811128 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  811120:	e0bffe17 	ldw	r2,-8(fp)
  811124:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  811128:	e0bffc17 	ldw	r2,-16(fp)
  81112c:	10c00e04 	addi	r3,r2,56
  811130:	e0bff817 	ldw	r2,-32(fp)
  811134:	1885883a 	add	r2,r3,r2
  811138:	e1bff617 	ldw	r6,-40(fp)
  81113c:	100b883a 	mov	r5,r2
  811140:	e13ff517 	ldw	r4,-44(fp)
  811144:	0808f440 	call	808f44 <memcpy>
      ptr   += n;
  811148:	e0fff517 	ldw	r3,-44(fp)
  81114c:	e0bff617 	ldw	r2,-40(fp)
  811150:	1885883a 	add	r2,r3,r2
  811154:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  811158:	e0fffe17 	ldw	r3,-8(fp)
  81115c:	e0bff617 	ldw	r2,-40(fp)
  811160:	1885c83a 	sub	r2,r3,r2
  811164:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811168:	e0fff817 	ldw	r3,-32(fp)
  81116c:	e0bff617 	ldw	r2,-40(fp)
  811170:	1885883a 	add	r2,r3,r2
  811174:	10c1ffcc 	andi	r3,r2,2047
  811178:	e0bffc17 	ldw	r2,-16(fp)
  81117c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  811180:	e0bffe17 	ldw	r2,-8(fp)
  811184:	00bfcf16 	blt	zero,r2,8110c4 <__alt_mem_onchip_mem+0xff7910c4>
  811188:	00000106 	br	811190 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  81118c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  811190:	e0fff517 	ldw	r3,-44(fp)
  811194:	e0bffd17 	ldw	r2,-12(fp)
  811198:	1880141e 	bne	r3,r2,8111ec <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  81119c:	e0bfff17 	ldw	r2,-4(fp)
  8111a0:	1090000c 	andi	r2,r2,16384
  8111a4:	1000131e 	bne	r2,zero,8111f4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8111a8:	0001883a 	nop
  8111ac:	e0bffc17 	ldw	r2,-16(fp)
  8111b0:	10c00a17 	ldw	r3,40(r2)
  8111b4:	e0bff717 	ldw	r2,-36(fp)
  8111b8:	1880051e 	bne	r3,r2,8111d0 <altera_avalon_jtag_uart_read+0x138>
  8111bc:	e0bffc17 	ldw	r2,-16(fp)
  8111c0:	10c00917 	ldw	r3,36(r2)
  8111c4:	e0bffc17 	ldw	r2,-16(fp)
  8111c8:	10800117 	ldw	r2,4(r2)
  8111cc:	18bff736 	bltu	r3,r2,8111ac <__alt_mem_onchip_mem+0xff7911ac>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8111d0:	e0bffc17 	ldw	r2,-16(fp)
  8111d4:	10c00a17 	ldw	r3,40(r2)
  8111d8:	e0bff717 	ldw	r2,-36(fp)
  8111dc:	18800726 	beq	r3,r2,8111fc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8111e0:	e0bffe17 	ldw	r2,-8(fp)
  8111e4:	00bfb716 	blt	zero,r2,8110c4 <__alt_mem_onchip_mem+0xff7910c4>
  8111e8:	00000506 	br	811200 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  8111ec:	0001883a 	nop
  8111f0:	00000306 	br	811200 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  8111f4:	0001883a 	nop
  8111f8:	00000106 	br	811200 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  8111fc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  811200:	e0fff517 	ldw	r3,-44(fp)
  811204:	e0bffd17 	ldw	r2,-12(fp)
  811208:	18801826 	beq	r3,r2,81126c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81120c:	0005303a 	rdctl	r2,status
  811210:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811214:	e0fffb17 	ldw	r3,-20(fp)
  811218:	00bfff84 	movi	r2,-2
  81121c:	1884703a 	and	r2,r3,r2
  811220:	1001703a 	wrctl	status,r2
  
  return context;
  811224:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  811228:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81122c:	e0bffc17 	ldw	r2,-16(fp)
  811230:	10800817 	ldw	r2,32(r2)
  811234:	10c00054 	ori	r3,r2,1
  811238:	e0bffc17 	ldw	r2,-16(fp)
  81123c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811240:	e0bffc17 	ldw	r2,-16(fp)
  811244:	10800017 	ldw	r2,0(r2)
  811248:	10800104 	addi	r2,r2,4
  81124c:	1007883a 	mov	r3,r2
  811250:	e0bffc17 	ldw	r2,-16(fp)
  811254:	10800817 	ldw	r2,32(r2)
  811258:	18800035 	stwio	r2,0(r3)
  81125c:	e0bffa17 	ldw	r2,-24(fp)
  811260:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811264:	e0bff917 	ldw	r2,-28(fp)
  811268:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  81126c:	e0fff517 	ldw	r3,-44(fp)
  811270:	e0bffd17 	ldw	r2,-12(fp)
  811274:	18800426 	beq	r3,r2,811288 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  811278:	e0fff517 	ldw	r3,-44(fp)
  81127c:	e0bffd17 	ldw	r2,-12(fp)
  811280:	1885c83a 	sub	r2,r3,r2
  811284:	00000606 	br	8112a0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  811288:	e0bfff17 	ldw	r2,-4(fp)
  81128c:	1090000c 	andi	r2,r2,16384
  811290:	10000226 	beq	r2,zero,81129c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  811294:	00bffd44 	movi	r2,-11
  811298:	00000106 	br	8112a0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  81129c:	00bffec4 	movi	r2,-5
}
  8112a0:	e037883a 	mov	sp,fp
  8112a4:	dfc00117 	ldw	ra,4(sp)
  8112a8:	df000017 	ldw	fp,0(sp)
  8112ac:	dec00204 	addi	sp,sp,8
  8112b0:	f800283a 	ret

008112b4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8112b4:	defff304 	addi	sp,sp,-52
  8112b8:	dfc00c15 	stw	ra,48(sp)
  8112bc:	df000b15 	stw	fp,44(sp)
  8112c0:	df000b04 	addi	fp,sp,44
  8112c4:	e13ffc15 	stw	r4,-16(fp)
  8112c8:	e17ffd15 	stw	r5,-12(fp)
  8112cc:	e1bffe15 	stw	r6,-8(fp)
  8112d0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  8112d4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  8112d8:	e0bffd17 	ldw	r2,-12(fp)
  8112dc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8112e0:	00003706 	br	8113c0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  8112e4:	e0bffc17 	ldw	r2,-16(fp)
  8112e8:	10800c17 	ldw	r2,48(r2)
  8112ec:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  8112f0:	e0bffc17 	ldw	r2,-16(fp)
  8112f4:	10800d17 	ldw	r2,52(r2)
  8112f8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  8112fc:	e0fff917 	ldw	r3,-28(fp)
  811300:	e0bff517 	ldw	r2,-44(fp)
  811304:	1880062e 	bgeu	r3,r2,811320 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  811308:	e0fff517 	ldw	r3,-44(fp)
  81130c:	e0bff917 	ldw	r2,-28(fp)
  811310:	1885c83a 	sub	r2,r3,r2
  811314:	10bfffc4 	addi	r2,r2,-1
  811318:	e0bff615 	stw	r2,-40(fp)
  81131c:	00000b06 	br	81134c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  811320:	e0bff517 	ldw	r2,-44(fp)
  811324:	10000526 	beq	r2,zero,81133c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  811328:	00c20004 	movi	r3,2048
  81132c:	e0bff917 	ldw	r2,-28(fp)
  811330:	1885c83a 	sub	r2,r3,r2
  811334:	e0bff615 	stw	r2,-40(fp)
  811338:	00000406 	br	81134c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  81133c:	00c1ffc4 	movi	r3,2047
  811340:	e0bff917 	ldw	r2,-28(fp)
  811344:	1885c83a 	sub	r2,r3,r2
  811348:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  81134c:	e0bff617 	ldw	r2,-40(fp)
  811350:	10001e26 	beq	r2,zero,8113cc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  811354:	e0fffe17 	ldw	r3,-8(fp)
  811358:	e0bff617 	ldw	r2,-40(fp)
  81135c:	1880022e 	bgeu	r3,r2,811368 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  811360:	e0bffe17 	ldw	r2,-8(fp)
  811364:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  811368:	e0bffc17 	ldw	r2,-16(fp)
  81136c:	10c20e04 	addi	r3,r2,2104
  811370:	e0bff917 	ldw	r2,-28(fp)
  811374:	1885883a 	add	r2,r3,r2
  811378:	e1bff617 	ldw	r6,-40(fp)
  81137c:	e17ffd17 	ldw	r5,-12(fp)
  811380:	1009883a 	mov	r4,r2
  811384:	0808f440 	call	808f44 <memcpy>
      ptr   += n;
  811388:	e0fffd17 	ldw	r3,-12(fp)
  81138c:	e0bff617 	ldw	r2,-40(fp)
  811390:	1885883a 	add	r2,r3,r2
  811394:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  811398:	e0fffe17 	ldw	r3,-8(fp)
  81139c:	e0bff617 	ldw	r2,-40(fp)
  8113a0:	1885c83a 	sub	r2,r3,r2
  8113a4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8113a8:	e0fff917 	ldw	r3,-28(fp)
  8113ac:	e0bff617 	ldw	r2,-40(fp)
  8113b0:	1885883a 	add	r2,r3,r2
  8113b4:	10c1ffcc 	andi	r3,r2,2047
  8113b8:	e0bffc17 	ldw	r2,-16(fp)
  8113bc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8113c0:	e0bffe17 	ldw	r2,-8(fp)
  8113c4:	00bfc716 	blt	zero,r2,8112e4 <__alt_mem_onchip_mem+0xff7912e4>
  8113c8:	00000106 	br	8113d0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  8113cc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8113d0:	0005303a 	rdctl	r2,status
  8113d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8113d8:	e0fffb17 	ldw	r3,-20(fp)
  8113dc:	00bfff84 	movi	r2,-2
  8113e0:	1884703a 	and	r2,r3,r2
  8113e4:	1001703a 	wrctl	status,r2
  
  return context;
  8113e8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8113ec:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8113f0:	e0bffc17 	ldw	r2,-16(fp)
  8113f4:	10800817 	ldw	r2,32(r2)
  8113f8:	10c00094 	ori	r3,r2,2
  8113fc:	e0bffc17 	ldw	r2,-16(fp)
  811400:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811404:	e0bffc17 	ldw	r2,-16(fp)
  811408:	10800017 	ldw	r2,0(r2)
  81140c:	10800104 	addi	r2,r2,4
  811410:	1007883a 	mov	r3,r2
  811414:	e0bffc17 	ldw	r2,-16(fp)
  811418:	10800817 	ldw	r2,32(r2)
  81141c:	18800035 	stwio	r2,0(r3)
  811420:	e0bffa17 	ldw	r2,-24(fp)
  811424:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811428:	e0bff817 	ldw	r2,-32(fp)
  81142c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  811430:	e0bffe17 	ldw	r2,-8(fp)
  811434:	0080100e 	bge	zero,r2,811478 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  811438:	e0bfff17 	ldw	r2,-4(fp)
  81143c:	1090000c 	andi	r2,r2,16384
  811440:	1000101e 	bne	r2,zero,811484 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  811444:	0001883a 	nop
  811448:	e0bffc17 	ldw	r2,-16(fp)
  81144c:	10c00d17 	ldw	r3,52(r2)
  811450:	e0bff517 	ldw	r2,-44(fp)
  811454:	1880051e 	bne	r3,r2,81146c <altera_avalon_jtag_uart_write+0x1b8>
  811458:	e0bffc17 	ldw	r2,-16(fp)
  81145c:	10c00917 	ldw	r3,36(r2)
  811460:	e0bffc17 	ldw	r2,-16(fp)
  811464:	10800117 	ldw	r2,4(r2)
  811468:	18bff736 	bltu	r3,r2,811448 <__alt_mem_onchip_mem+0xff791448>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  81146c:	e0bffc17 	ldw	r2,-16(fp)
  811470:	10800917 	ldw	r2,36(r2)
  811474:	1000051e 	bne	r2,zero,81148c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  811478:	e0bffe17 	ldw	r2,-8(fp)
  81147c:	00bfd016 	blt	zero,r2,8113c0 <__alt_mem_onchip_mem+0xff7913c0>
  811480:	00000306 	br	811490 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  811484:	0001883a 	nop
  811488:	00000106 	br	811490 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  81148c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  811490:	e0fffd17 	ldw	r3,-12(fp)
  811494:	e0bff717 	ldw	r2,-36(fp)
  811498:	18800426 	beq	r3,r2,8114ac <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  81149c:	e0fffd17 	ldw	r3,-12(fp)
  8114a0:	e0bff717 	ldw	r2,-36(fp)
  8114a4:	1885c83a 	sub	r2,r3,r2
  8114a8:	00000606 	br	8114c4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  8114ac:	e0bfff17 	ldw	r2,-4(fp)
  8114b0:	1090000c 	andi	r2,r2,16384
  8114b4:	10000226 	beq	r2,zero,8114c0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  8114b8:	00bffd44 	movi	r2,-11
  8114bc:	00000106 	br	8114c4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  8114c0:	00bffec4 	movi	r2,-5
}
  8114c4:	e037883a 	mov	sp,fp
  8114c8:	dfc00117 	ldw	ra,4(sp)
  8114cc:	df000017 	ldw	fp,0(sp)
  8114d0:	dec00204 	addi	sp,sp,8
  8114d4:	f800283a 	ret

008114d8 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  8114d8:	defffa04 	addi	sp,sp,-24
  8114dc:	dfc00515 	stw	ra,20(sp)
  8114e0:	df000415 	stw	fp,16(sp)
  8114e4:	df000404 	addi	fp,sp,16
  8114e8:	e13ffe15 	stw	r4,-8(fp)
  8114ec:	2805883a 	mov	r2,r5
  8114f0:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8114f4:	e0bffe17 	ldw	r2,-8(fp)
  8114f8:	10800017 	ldw	r2,0(r2)
  8114fc:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  811500:	008003f4 	movhi	r2,15
  811504:	10909004 	addi	r2,r2,16960
  811508:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  81150c:	e0bffe17 	ldw	r2,-8(fp)
  811510:	10800803 	ldbu	r2,32(r2)
  811514:	10803fcc 	andi	r2,r2,255
  811518:	1080201c 	xori	r2,r2,128
  81151c:	10bfe004 	addi	r2,r2,-128
  811520:	1000151e 	bne	r2,zero,811578 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  811524:	00000906 	br	81154c <lcd_write_command+0x74>
    if (--i == 0)
  811528:	e0bffc17 	ldw	r2,-16(fp)
  81152c:	10bfffc4 	addi	r2,r2,-1
  811530:	e0bffc15 	stw	r2,-16(fp)
  811534:	e0bffc17 	ldw	r2,-16(fp)
  811538:	1000041e 	bne	r2,zero,81154c <lcd_write_command+0x74>
    {
      sp->broken = 1;
  81153c:	e0bffe17 	ldw	r2,-8(fp)
  811540:	00c00044 	movi	r3,1
  811544:	10c00805 	stb	r3,32(r2)
      return;
  811548:	00000c06 	br	81157c <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81154c:	e0bffd17 	ldw	r2,-12(fp)
  811550:	10800104 	addi	r2,r2,4
  811554:	10800037 	ldwio	r2,0(r2)
  811558:	1080200c 	andi	r2,r2,128
  81155c:	103ff21e 	bne	r2,zero,811528 <__alt_mem_onchip_mem+0xff791528>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  811560:	01001904 	movi	r4,100
  811564:	08135b80 	call	8135b8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  811568:	e0bffd17 	ldw	r2,-12(fp)
  81156c:	e0ffff03 	ldbu	r3,-4(fp)
  811570:	10c00035 	stwio	r3,0(r2)
  811574:	00000106 	br	81157c <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  811578:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  81157c:	e037883a 	mov	sp,fp
  811580:	dfc00117 	ldw	ra,4(sp)
  811584:	df000017 	ldw	fp,0(sp)
  811588:	dec00204 	addi	sp,sp,8
  81158c:	f800283a 	ret

00811590 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  811590:	defffa04 	addi	sp,sp,-24
  811594:	dfc00515 	stw	ra,20(sp)
  811598:	df000415 	stw	fp,16(sp)
  81159c:	df000404 	addi	fp,sp,16
  8115a0:	e13ffe15 	stw	r4,-8(fp)
  8115a4:	2805883a 	mov	r2,r5
  8115a8:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8115ac:	e0bffe17 	ldw	r2,-8(fp)
  8115b0:	10800017 	ldw	r2,0(r2)
  8115b4:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8115b8:	008003f4 	movhi	r2,15
  8115bc:	10909004 	addi	r2,r2,16960
  8115c0:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8115c4:	e0bffe17 	ldw	r2,-8(fp)
  8115c8:	10800803 	ldbu	r2,32(r2)
  8115cc:	10803fcc 	andi	r2,r2,255
  8115d0:	1080201c 	xori	r2,r2,128
  8115d4:	10bfe004 	addi	r2,r2,-128
  8115d8:	10001d1e 	bne	r2,zero,811650 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8115dc:	00000906 	br	811604 <lcd_write_data+0x74>
    if (--i == 0)
  8115e0:	e0bffc17 	ldw	r2,-16(fp)
  8115e4:	10bfffc4 	addi	r2,r2,-1
  8115e8:	e0bffc15 	stw	r2,-16(fp)
  8115ec:	e0bffc17 	ldw	r2,-16(fp)
  8115f0:	1000041e 	bne	r2,zero,811604 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  8115f4:	e0bffe17 	ldw	r2,-8(fp)
  8115f8:	00c00044 	movi	r3,1
  8115fc:	10c00805 	stb	r3,32(r2)
      return;
  811600:	00001406 	br	811654 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  811604:	e0bffd17 	ldw	r2,-12(fp)
  811608:	10800104 	addi	r2,r2,4
  81160c:	10800037 	ldwio	r2,0(r2)
  811610:	1080200c 	andi	r2,r2,128
  811614:	103ff21e 	bne	r2,zero,8115e0 <__alt_mem_onchip_mem+0xff7915e0>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  811618:	01001904 	movi	r4,100
  81161c:	08135b80 	call	8135b8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  811620:	e0bffd17 	ldw	r2,-12(fp)
  811624:	10800204 	addi	r2,r2,8
  811628:	1007883a 	mov	r3,r2
  81162c:	e0bfff03 	ldbu	r2,-4(fp)
  811630:	18800035 	stwio	r2,0(r3)

  sp->address++;
  811634:	e0bffe17 	ldw	r2,-8(fp)
  811638:	108008c3 	ldbu	r2,35(r2)
  81163c:	10800044 	addi	r2,r2,1
  811640:	1007883a 	mov	r3,r2
  811644:	e0bffe17 	ldw	r2,-8(fp)
  811648:	10c008c5 	stb	r3,35(r2)
  81164c:	00000106 	br	811654 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  811650:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  811654:	e037883a 	mov	sp,fp
  811658:	dfc00117 	ldw	ra,4(sp)
  81165c:	df000017 	ldw	fp,0(sp)
  811660:	dec00204 	addi	sp,sp,8
  811664:	f800283a 	ret

00811668 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  811668:	defffc04 	addi	sp,sp,-16
  81166c:	dfc00315 	stw	ra,12(sp)
  811670:	df000215 	stw	fp,8(sp)
  811674:	df000204 	addi	fp,sp,8
  811678:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  81167c:	01400044 	movi	r5,1
  811680:	e13fff17 	ldw	r4,-4(fp)
  811684:	08114d80 	call	8114d8 <lcd_write_command>

  sp->x = 0;
  811688:	e0bfff17 	ldw	r2,-4(fp)
  81168c:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  811690:	e0bfff17 	ldw	r2,-4(fp)
  811694:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  811698:	e0bfff17 	ldw	r2,-4(fp)
  81169c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8116a0:	e03ffe15 	stw	zero,-8(fp)
  8116a4:	00001b06 	br	811714 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  8116a8:	e0bffe17 	ldw	r2,-8(fp)
  8116ac:	108018e4 	muli	r2,r2,99
  8116b0:	10801004 	addi	r2,r2,64
  8116b4:	e0ffff17 	ldw	r3,-4(fp)
  8116b8:	1885883a 	add	r2,r3,r2
  8116bc:	01801444 	movi	r6,81
  8116c0:	01400804 	movi	r5,32
  8116c4:	1009883a 	mov	r4,r2
  8116c8:	08037900 	call	803790 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  8116cc:	e0bffe17 	ldw	r2,-8(fp)
  8116d0:	108018e4 	muli	r2,r2,99
  8116d4:	10800c04 	addi	r2,r2,48
  8116d8:	e0ffff17 	ldw	r3,-4(fp)
  8116dc:	1885883a 	add	r2,r3,r2
  8116e0:	01800404 	movi	r6,16
  8116e4:	01400804 	movi	r5,32
  8116e8:	1009883a 	mov	r4,r2
  8116ec:	08037900 	call	803790 <memset>
    sp->line[y].width = 0;
  8116f0:	e0ffff17 	ldw	r3,-4(fp)
  8116f4:	e0bffe17 	ldw	r2,-8(fp)
  8116f8:	108018e4 	muli	r2,r2,99
  8116fc:	1885883a 	add	r2,r3,r2
  811700:	10802444 	addi	r2,r2,145
  811704:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811708:	e0bffe17 	ldw	r2,-8(fp)
  81170c:	10800044 	addi	r2,r2,1
  811710:	e0bffe15 	stw	r2,-8(fp)
  811714:	e0bffe17 	ldw	r2,-8(fp)
  811718:	10800090 	cmplti	r2,r2,2
  81171c:	103fe21e 	bne	r2,zero,8116a8 <__alt_mem_onchip_mem+0xff7916a8>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  811720:	0001883a 	nop
  811724:	e037883a 	mov	sp,fp
  811728:	dfc00117 	ldw	ra,4(sp)
  81172c:	df000017 	ldw	fp,0(sp)
  811730:	dec00204 	addi	sp,sp,8
  811734:	f800283a 	ret

00811738 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  811738:	defff704 	addi	sp,sp,-36
  81173c:	dfc00815 	stw	ra,32(sp)
  811740:	df000715 	stw	fp,28(sp)
  811744:	df000704 	addi	fp,sp,28
  811748:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  81174c:	e0bfff17 	ldw	r2,-4(fp)
  811750:	10800943 	ldbu	r2,37(r2)
  811754:	10803fcc 	andi	r2,r2,255
  811758:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81175c:	e03ff915 	stw	zero,-28(fp)
  811760:	00006706 	br	811900 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  811764:	e0ffff17 	ldw	r3,-4(fp)
  811768:	e0bff917 	ldw	r2,-28(fp)
  81176c:	108018e4 	muli	r2,r2,99
  811770:	1885883a 	add	r2,r3,r2
  811774:	10802444 	addi	r2,r2,145
  811778:	10800003 	ldbu	r2,0(r2)
  81177c:	10803fcc 	andi	r2,r2,255
  811780:	1080201c 	xori	r2,r2,128
  811784:	10bfe004 	addi	r2,r2,-128
  811788:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  81178c:	e0ffff17 	ldw	r3,-4(fp)
  811790:	e0bff917 	ldw	r2,-28(fp)
  811794:	108018e4 	muli	r2,r2,99
  811798:	1885883a 	add	r2,r3,r2
  81179c:	10802484 	addi	r2,r2,146
  8117a0:	10800003 	ldbu	r2,0(r2)
  8117a4:	10c03fcc 	andi	r3,r2,255
  8117a8:	e0bffc17 	ldw	r2,-16(fp)
  8117ac:	1885383a 	mul	r2,r3,r2
  8117b0:	1005d23a 	srai	r2,r2,8
  8117b4:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  8117b8:	e0fffb17 	ldw	r3,-20(fp)
  8117bc:	e0bffd17 	ldw	r2,-12(fp)
  8117c0:	18800116 	blt	r3,r2,8117c8 <lcd_repaint_screen+0x90>
      offset = 0;
  8117c4:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8117c8:	e03ffa15 	stw	zero,-24(fp)
  8117cc:	00004606 	br	8118e8 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  8117d0:	e0fffa17 	ldw	r3,-24(fp)
  8117d4:	e0bffb17 	ldw	r2,-20(fp)
  8117d8:	1885883a 	add	r2,r3,r2
  8117dc:	e17ffd17 	ldw	r5,-12(fp)
  8117e0:	1009883a 	mov	r4,r2
  8117e4:	080d1e80 	call	80d1e8 <__modsi3>
  8117e8:	1009883a 	mov	r4,r2
  8117ec:	e0ffff17 	ldw	r3,-4(fp)
  8117f0:	e0bff917 	ldw	r2,-28(fp)
  8117f4:	108018e4 	muli	r2,r2,99
  8117f8:	1885883a 	add	r2,r3,r2
  8117fc:	1105883a 	add	r2,r2,r4
  811800:	10801004 	addi	r2,r2,64
  811804:	10800003 	ldbu	r2,0(r2)
  811808:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  81180c:	e0ffff17 	ldw	r3,-4(fp)
  811810:	e0bff917 	ldw	r2,-28(fp)
  811814:	108018e4 	muli	r2,r2,99
  811818:	1887883a 	add	r3,r3,r2
  81181c:	e0bffa17 	ldw	r2,-24(fp)
  811820:	1885883a 	add	r2,r3,r2
  811824:	10800c04 	addi	r2,r2,48
  811828:	10800003 	ldbu	r2,0(r2)
  81182c:	10c03fcc 	andi	r3,r2,255
  811830:	18c0201c 	xori	r3,r3,128
  811834:	18ffe004 	addi	r3,r3,-128
  811838:	e0bffe07 	ldb	r2,-8(fp)
  81183c:	18802726 	beq	r3,r2,8118dc <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  811840:	e0fff917 	ldw	r3,-28(fp)
  811844:	d0a01a04 	addi	r2,gp,-32664
  811848:	1885883a 	add	r2,r3,r2
  81184c:	10800003 	ldbu	r2,0(r2)
  811850:	1007883a 	mov	r3,r2
  811854:	e0bffa17 	ldw	r2,-24(fp)
  811858:	1885883a 	add	r2,r3,r2
  81185c:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  811860:	e0fffe43 	ldbu	r3,-7(fp)
  811864:	e0bfff17 	ldw	r2,-4(fp)
  811868:	108008c3 	ldbu	r2,35(r2)
  81186c:	10803fcc 	andi	r2,r2,255
  811870:	1080201c 	xori	r2,r2,128
  811874:	10bfe004 	addi	r2,r2,-128
  811878:	18800a26 	beq	r3,r2,8118a4 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  81187c:	e0fffe43 	ldbu	r3,-7(fp)
  811880:	00bfe004 	movi	r2,-128
  811884:	1884b03a 	or	r2,r3,r2
  811888:	10803fcc 	andi	r2,r2,255
  81188c:	100b883a 	mov	r5,r2
  811890:	e13fff17 	ldw	r4,-4(fp)
  811894:	08114d80 	call	8114d8 <lcd_write_command>
          sp->address = address;
  811898:	e0fffe43 	ldbu	r3,-7(fp)
  81189c:	e0bfff17 	ldw	r2,-4(fp)
  8118a0:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  8118a4:	e0bffe03 	ldbu	r2,-8(fp)
  8118a8:	10803fcc 	andi	r2,r2,255
  8118ac:	100b883a 	mov	r5,r2
  8118b0:	e13fff17 	ldw	r4,-4(fp)
  8118b4:	08115900 	call	811590 <lcd_write_data>
        sp->line[y].visible[x] = c;
  8118b8:	e0ffff17 	ldw	r3,-4(fp)
  8118bc:	e0bff917 	ldw	r2,-28(fp)
  8118c0:	108018e4 	muli	r2,r2,99
  8118c4:	1887883a 	add	r3,r3,r2
  8118c8:	e0bffa17 	ldw	r2,-24(fp)
  8118cc:	1885883a 	add	r2,r3,r2
  8118d0:	10800c04 	addi	r2,r2,48
  8118d4:	e0fffe03 	ldbu	r3,-8(fp)
  8118d8:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8118dc:	e0bffa17 	ldw	r2,-24(fp)
  8118e0:	10800044 	addi	r2,r2,1
  8118e4:	e0bffa15 	stw	r2,-24(fp)
  8118e8:	e0bffa17 	ldw	r2,-24(fp)
  8118ec:	10800410 	cmplti	r2,r2,16
  8118f0:	103fb71e 	bne	r2,zero,8117d0 <__alt_mem_onchip_mem+0xff7917d0>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8118f4:	e0bff917 	ldw	r2,-28(fp)
  8118f8:	10800044 	addi	r2,r2,1
  8118fc:	e0bff915 	stw	r2,-28(fp)
  811900:	e0bff917 	ldw	r2,-28(fp)
  811904:	10800090 	cmplti	r2,r2,2
  811908:	103f961e 	bne	r2,zero,811764 <__alt_mem_onchip_mem+0xff791764>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  81190c:	0001883a 	nop
  811910:	e037883a 	mov	sp,fp
  811914:	dfc00117 	ldw	ra,4(sp)
  811918:	df000017 	ldw	fp,0(sp)
  81191c:	dec00204 	addi	sp,sp,8
  811920:	f800283a 	ret

00811924 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  811924:	defffc04 	addi	sp,sp,-16
  811928:	dfc00315 	stw	ra,12(sp)
  81192c:	df000215 	stw	fp,8(sp)
  811930:	df000204 	addi	fp,sp,8
  811934:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811938:	e03ffe15 	stw	zero,-8(fp)
  81193c:	00001d06 	br	8119b4 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  811940:	e0bffe17 	ldw	r2,-8(fp)
  811944:	00800f16 	blt	zero,r2,811984 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  811948:	e0bffe17 	ldw	r2,-8(fp)
  81194c:	108018e4 	muli	r2,r2,99
  811950:	10801004 	addi	r2,r2,64
  811954:	e0ffff17 	ldw	r3,-4(fp)
  811958:	1889883a 	add	r4,r3,r2
  81195c:	e0bffe17 	ldw	r2,-8(fp)
  811960:	10800044 	addi	r2,r2,1
  811964:	108018e4 	muli	r2,r2,99
  811968:	10801004 	addi	r2,r2,64
  81196c:	e0ffff17 	ldw	r3,-4(fp)
  811970:	1885883a 	add	r2,r3,r2
  811974:	01801404 	movi	r6,80
  811978:	100b883a 	mov	r5,r2
  81197c:	0808f440 	call	808f44 <memcpy>
  811980:	00000906 	br	8119a8 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  811984:	e0bffe17 	ldw	r2,-8(fp)
  811988:	108018e4 	muli	r2,r2,99
  81198c:	10801004 	addi	r2,r2,64
  811990:	e0ffff17 	ldw	r3,-4(fp)
  811994:	1885883a 	add	r2,r3,r2
  811998:	01801404 	movi	r6,80
  81199c:	01400804 	movi	r5,32
  8119a0:	1009883a 	mov	r4,r2
  8119a4:	08037900 	call	803790 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8119a8:	e0bffe17 	ldw	r2,-8(fp)
  8119ac:	10800044 	addi	r2,r2,1
  8119b0:	e0bffe15 	stw	r2,-8(fp)
  8119b4:	e0bffe17 	ldw	r2,-8(fp)
  8119b8:	10800090 	cmplti	r2,r2,2
  8119bc:	103fe01e 	bne	r2,zero,811940 <__alt_mem_onchip_mem+0xff791940>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  8119c0:	e0bfff17 	ldw	r2,-4(fp)
  8119c4:	10800883 	ldbu	r2,34(r2)
  8119c8:	10bfffc4 	addi	r2,r2,-1
  8119cc:	1007883a 	mov	r3,r2
  8119d0:	e0bfff17 	ldw	r2,-4(fp)
  8119d4:	10c00885 	stb	r3,34(r2)
}
  8119d8:	0001883a 	nop
  8119dc:	e037883a 	mov	sp,fp
  8119e0:	dfc00117 	ldw	ra,4(sp)
  8119e4:	df000017 	ldw	fp,0(sp)
  8119e8:	dec00204 	addi	sp,sp,8
  8119ec:	f800283a 	ret

008119f0 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  8119f0:	defff904 	addi	sp,sp,-28
  8119f4:	dfc00615 	stw	ra,24(sp)
  8119f8:	df000515 	stw	fp,20(sp)
  8119fc:	df000504 	addi	fp,sp,20
  811a00:	e13ffe15 	stw	r4,-8(fp)
  811a04:	2805883a 	mov	r2,r5
  811a08:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  811a0c:	e03ffb15 	stw	zero,-20(fp)
  811a10:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  811a14:	e0bffe17 	ldw	r2,-8(fp)
  811a18:	10800a03 	ldbu	r2,40(r2)
  811a1c:	10803fcc 	andi	r2,r2,255
  811a20:	1080201c 	xori	r2,r2,128
  811a24:	10bfe004 	addi	r2,r2,-128
  811a28:	108016d8 	cmpnei	r2,r2,91
  811a2c:	1000411e 	bne	r2,zero,811b34 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  811a30:	e0bffe17 	ldw	r2,-8(fp)
  811a34:	10800a04 	addi	r2,r2,40
  811a38:	10800044 	addi	r2,r2,1
  811a3c:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  811a40:	00000c06 	br	811a74 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  811a44:	e0bffb17 	ldw	r2,-20(fp)
  811a48:	10c002a4 	muli	r3,r2,10
  811a4c:	e0bffd17 	ldw	r2,-12(fp)
  811a50:	11000044 	addi	r4,r2,1
  811a54:	e13ffd15 	stw	r4,-12(fp)
  811a58:	10800003 	ldbu	r2,0(r2)
  811a5c:	10803fcc 	andi	r2,r2,255
  811a60:	1080201c 	xori	r2,r2,128
  811a64:	10bfe004 	addi	r2,r2,-128
  811a68:	10bff404 	addi	r2,r2,-48
  811a6c:	1885883a 	add	r2,r3,r2
  811a70:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  811a74:	d0e00d17 	ldw	r3,-32716(gp)
  811a78:	e0bffd17 	ldw	r2,-12(fp)
  811a7c:	10800003 	ldbu	r2,0(r2)
  811a80:	10803fcc 	andi	r2,r2,255
  811a84:	1080201c 	xori	r2,r2,128
  811a88:	10bfe004 	addi	r2,r2,-128
  811a8c:	10800044 	addi	r2,r2,1
  811a90:	1885883a 	add	r2,r3,r2
  811a94:	10800003 	ldbu	r2,0(r2)
  811a98:	10803fcc 	andi	r2,r2,255
  811a9c:	1080010c 	andi	r2,r2,4
  811aa0:	103fe81e 	bne	r2,zero,811a44 <__alt_mem_onchip_mem+0xff791a44>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  811aa4:	e0bffd17 	ldw	r2,-12(fp)
  811aa8:	10800003 	ldbu	r2,0(r2)
  811aac:	10803fcc 	andi	r2,r2,255
  811ab0:	1080201c 	xori	r2,r2,128
  811ab4:	10bfe004 	addi	r2,r2,-128
  811ab8:	10800ed8 	cmpnei	r2,r2,59
  811abc:	10001f1e 	bne	r2,zero,811b3c <lcd_handle_escape+0x14c>
    {
      ptr++;
  811ac0:	e0bffd17 	ldw	r2,-12(fp)
  811ac4:	10800044 	addi	r2,r2,1
  811ac8:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  811acc:	00000c06 	br	811b00 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  811ad0:	e0bffc17 	ldw	r2,-16(fp)
  811ad4:	10c002a4 	muli	r3,r2,10
  811ad8:	e0bffd17 	ldw	r2,-12(fp)
  811adc:	11000044 	addi	r4,r2,1
  811ae0:	e13ffd15 	stw	r4,-12(fp)
  811ae4:	10800003 	ldbu	r2,0(r2)
  811ae8:	10803fcc 	andi	r2,r2,255
  811aec:	1080201c 	xori	r2,r2,128
  811af0:	10bfe004 	addi	r2,r2,-128
  811af4:	10bff404 	addi	r2,r2,-48
  811af8:	1885883a 	add	r2,r3,r2
  811afc:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  811b00:	d0e00d17 	ldw	r3,-32716(gp)
  811b04:	e0bffd17 	ldw	r2,-12(fp)
  811b08:	10800003 	ldbu	r2,0(r2)
  811b0c:	10803fcc 	andi	r2,r2,255
  811b10:	1080201c 	xori	r2,r2,128
  811b14:	10bfe004 	addi	r2,r2,-128
  811b18:	10800044 	addi	r2,r2,1
  811b1c:	1885883a 	add	r2,r3,r2
  811b20:	10800003 	ldbu	r2,0(r2)
  811b24:	10803fcc 	andi	r2,r2,255
  811b28:	1080010c 	andi	r2,r2,4
  811b2c:	103fe81e 	bne	r2,zero,811ad0 <__alt_mem_onchip_mem+0xff791ad0>
  811b30:	00000206 	br	811b3c <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  811b34:	00bfffc4 	movi	r2,-1
  811b38:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  811b3c:	e0bfff07 	ldb	r2,-4(fp)
  811b40:	10c012a0 	cmpeqi	r3,r2,74
  811b44:	1800291e 	bne	r3,zero,811bec <lcd_handle_escape+0x1fc>
  811b48:	10c012c8 	cmpgei	r3,r2,75
  811b4c:	1800031e 	bne	r3,zero,811b5c <lcd_handle_escape+0x16c>
  811b50:	10801220 	cmpeqi	r2,r2,72
  811b54:	1000061e 	bne	r2,zero,811b70 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  811b58:	00004a06 	br	811c84 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  811b5c:	10c012e0 	cmpeqi	r3,r2,75
  811b60:	1800281e 	bne	r3,zero,811c04 <lcd_handle_escape+0x214>
  811b64:	108019a0 	cmpeqi	r2,r2,102
  811b68:	1000011e 	bne	r2,zero,811b70 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  811b6c:	00004506 	br	811c84 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  811b70:	e0bffc17 	ldw	r2,-16(fp)
  811b74:	0080050e 	bge	zero,r2,811b8c <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  811b78:	e0bffc17 	ldw	r2,-16(fp)
  811b7c:	10bfffc4 	addi	r2,r2,-1
  811b80:	1007883a 	mov	r3,r2
  811b84:	e0bffe17 	ldw	r2,-8(fp)
  811b88:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  811b8c:	e0bffb17 	ldw	r2,-20(fp)
  811b90:	0080370e 	bge	zero,r2,811c70 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  811b94:	e0bffb17 	ldw	r2,-20(fp)
  811b98:	10bfffc4 	addi	r2,r2,-1
  811b9c:	1007883a 	mov	r3,r2
  811ba0:	e0bffe17 	ldw	r2,-8(fp)
  811ba4:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  811ba8:	e0bffe17 	ldw	r2,-8(fp)
  811bac:	10800883 	ldbu	r2,34(r2)
  811bb0:	10803fcc 	andi	r2,r2,255
  811bb4:	10800170 	cmpltui	r2,r2,5
  811bb8:	1000061e 	bne	r2,zero,811bd4 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  811bbc:	e0bffe17 	ldw	r2,-8(fp)
  811bc0:	00c00104 	movi	r3,4
  811bc4:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  811bc8:	00000206 	br	811bd4 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  811bcc:	e13ffe17 	ldw	r4,-8(fp)
  811bd0:	08119240 	call	811924 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  811bd4:	e0bffe17 	ldw	r2,-8(fp)
  811bd8:	10800883 	ldbu	r2,34(r2)
  811bdc:	10803fcc 	andi	r2,r2,255
  811be0:	108000e8 	cmpgeui	r2,r2,3
  811be4:	103ff91e 	bne	r2,zero,811bcc <__alt_mem_onchip_mem+0xff791bcc>
        lcd_scroll_up(sp);
    }
    break;
  811be8:	00002106 	br	811c70 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  811bec:	e0bffb17 	ldw	r2,-20(fp)
  811bf0:	10800098 	cmpnei	r2,r2,2
  811bf4:	1000201e 	bne	r2,zero,811c78 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  811bf8:	e13ffe17 	ldw	r4,-8(fp)
  811bfc:	08116680 	call	811668 <lcd_clear_screen>
    break;
  811c00:	00001d06 	br	811c78 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  811c04:	e0bffb17 	ldw	r2,-20(fp)
  811c08:	00801d16 	blt	zero,r2,811c80 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  811c0c:	e0bffe17 	ldw	r2,-8(fp)
  811c10:	10800843 	ldbu	r2,33(r2)
  811c14:	10803fcc 	andi	r2,r2,255
  811c18:	10801428 	cmpgeui	r2,r2,80
  811c1c:	1000181e 	bne	r2,zero,811c80 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  811c20:	e0bffe17 	ldw	r2,-8(fp)
  811c24:	10800883 	ldbu	r2,34(r2)
  811c28:	10803fcc 	andi	r2,r2,255
  811c2c:	108018e4 	muli	r2,r2,99
  811c30:	10801004 	addi	r2,r2,64
  811c34:	e0fffe17 	ldw	r3,-8(fp)
  811c38:	1887883a 	add	r3,r3,r2
  811c3c:	e0bffe17 	ldw	r2,-8(fp)
  811c40:	10800843 	ldbu	r2,33(r2)
  811c44:	10803fcc 	andi	r2,r2,255
  811c48:	1889883a 	add	r4,r3,r2
  811c4c:	e0bffe17 	ldw	r2,-8(fp)
  811c50:	10800843 	ldbu	r2,33(r2)
  811c54:	10803fcc 	andi	r2,r2,255
  811c58:	00c01404 	movi	r3,80
  811c5c:	1885c83a 	sub	r2,r3,r2
  811c60:	100d883a 	mov	r6,r2
  811c64:	01400804 	movi	r5,32
  811c68:	08037900 	call	803790 <memset>
    }
    break;
  811c6c:	00000406 	br	811c80 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  811c70:	0001883a 	nop
  811c74:	00000306 	br	811c84 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  811c78:	0001883a 	nop
  811c7c:	00000106 	br	811c84 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  811c80:	0001883a 	nop
  }
}
  811c84:	0001883a 	nop
  811c88:	e037883a 	mov	sp,fp
  811c8c:	dfc00117 	ldw	ra,4(sp)
  811c90:	df000017 	ldw	fp,0(sp)
  811c94:	dec00204 	addi	sp,sp,8
  811c98:	f800283a 	ret

00811c9c <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  811c9c:	defff304 	addi	sp,sp,-52
  811ca0:	dfc00c15 	stw	ra,48(sp)
  811ca4:	df000b15 	stw	fp,44(sp)
  811ca8:	df000b04 	addi	fp,sp,44
  811cac:	e13ffc15 	stw	r4,-16(fp)
  811cb0:	e17ffd15 	stw	r5,-12(fp)
  811cb4:	e1bffe15 	stw	r6,-8(fp)
  811cb8:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  811cbc:	e0bffe17 	ldw	r2,-8(fp)
  811cc0:	e0fffd17 	ldw	r3,-12(fp)
  811cc4:	1885883a 	add	r2,r3,r2
  811cc8:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  811ccc:	e0bffc17 	ldw	r2,-16(fp)
  811cd0:	00c00044 	movi	r3,1
  811cd4:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  811cd8:	00009906 	br	811f40 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  811cdc:	e0bffd17 	ldw	r2,-12(fp)
  811ce0:	10800003 	ldbu	r2,0(r2)
  811ce4:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  811ce8:	e0bffc17 	ldw	r2,-16(fp)
  811cec:	10800903 	ldbu	r2,36(r2)
  811cf0:	10803fcc 	andi	r2,r2,255
  811cf4:	1080201c 	xori	r2,r2,128
  811cf8:	10bfe004 	addi	r2,r2,-128
  811cfc:	10003716 	blt	r2,zero,811ddc <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  811d00:	e0bffc17 	ldw	r2,-16(fp)
  811d04:	10800903 	ldbu	r2,36(r2)
  811d08:	10803fcc 	andi	r2,r2,255
  811d0c:	1080201c 	xori	r2,r2,128
  811d10:	10bfe004 	addi	r2,r2,-128
  811d14:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  811d18:	e0bffa17 	ldw	r2,-24(fp)
  811d1c:	1000031e 	bne	r2,zero,811d2c <altera_avalon_lcd_16207_write+0x90>
  811d20:	e0bff907 	ldb	r2,-28(fp)
  811d24:	108016d8 	cmpnei	r2,r2,91
  811d28:	10000d1e 	bne	r2,zero,811d60 <altera_avalon_lcd_16207_write+0xc4>
  811d2c:	e0bffa17 	ldw	r2,-24(fp)
  811d30:	10001826 	beq	r2,zero,811d94 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  811d34:	d0e00d17 	ldw	r3,-32716(gp)
  811d38:	e0bff907 	ldb	r2,-28(fp)
  811d3c:	10800044 	addi	r2,r2,1
  811d40:	1885883a 	add	r2,r3,r2
  811d44:	10800003 	ldbu	r2,0(r2)
  811d48:	10803fcc 	andi	r2,r2,255
  811d4c:	1080010c 	andi	r2,r2,4
  811d50:	1000101e 	bne	r2,zero,811d94 <altera_avalon_lcd_16207_write+0xf8>
  811d54:	e0bff907 	ldb	r2,-28(fp)
  811d58:	10800ee0 	cmpeqi	r2,r2,59
  811d5c:	10000d1e 	bne	r2,zero,811d94 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  811d60:	e0fffc17 	ldw	r3,-16(fp)
  811d64:	e0bffa17 	ldw	r2,-24(fp)
  811d68:	1885883a 	add	r2,r3,r2
  811d6c:	10800a04 	addi	r2,r2,40
  811d70:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  811d74:	e0bff907 	ldb	r2,-28(fp)
  811d78:	100b883a 	mov	r5,r2
  811d7c:	e13ffc17 	ldw	r4,-16(fp)
  811d80:	08119f00 	call	8119f0 <lcd_handle_escape>

        sp->esccount = -1;
  811d84:	e0bffc17 	ldw	r2,-16(fp)
  811d88:	00ffffc4 	movi	r3,-1
  811d8c:	10c00905 	stb	r3,36(r2)
  811d90:	00006806 	br	811f34 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  811d94:	e0bffc17 	ldw	r2,-16(fp)
  811d98:	10800903 	ldbu	r2,36(r2)
  811d9c:	10803fcc 	andi	r2,r2,255
  811da0:	108001e8 	cmpgeui	r2,r2,7
  811da4:	1000631e 	bne	r2,zero,811f34 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  811da8:	e0fffc17 	ldw	r3,-16(fp)
  811dac:	e0bffa17 	ldw	r2,-24(fp)
  811db0:	1885883a 	add	r2,r3,r2
  811db4:	10800a04 	addi	r2,r2,40
  811db8:	e0fff903 	ldbu	r3,-28(fp)
  811dbc:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  811dc0:	e0bffc17 	ldw	r2,-16(fp)
  811dc4:	10800903 	ldbu	r2,36(r2)
  811dc8:	10800044 	addi	r2,r2,1
  811dcc:	1007883a 	mov	r3,r2
  811dd0:	e0bffc17 	ldw	r2,-16(fp)
  811dd4:	10c00905 	stb	r3,36(r2)
  811dd8:	00005606 	br	811f34 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  811ddc:	e0bff907 	ldb	r2,-28(fp)
  811de0:	108006d8 	cmpnei	r2,r2,27
  811de4:	1000031e 	bne	r2,zero,811df4 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  811de8:	e0bffc17 	ldw	r2,-16(fp)
  811dec:	10000905 	stb	zero,36(r2)
  811df0:	00005006 	br	811f34 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  811df4:	e0bff907 	ldb	r2,-28(fp)
  811df8:	10800358 	cmpnei	r2,r2,13
  811dfc:	1000031e 	bne	r2,zero,811e0c <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  811e00:	e0bffc17 	ldw	r2,-16(fp)
  811e04:	10000845 	stb	zero,33(r2)
  811e08:	00004a06 	br	811f34 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  811e0c:	e0bff907 	ldb	r2,-28(fp)
  811e10:	10800298 	cmpnei	r2,r2,10
  811e14:	1000101e 	bne	r2,zero,811e58 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  811e18:	e0bffc17 	ldw	r2,-16(fp)
  811e1c:	10000845 	stb	zero,33(r2)
      sp->y++;
  811e20:	e0bffc17 	ldw	r2,-16(fp)
  811e24:	10800883 	ldbu	r2,34(r2)
  811e28:	10800044 	addi	r2,r2,1
  811e2c:	1007883a 	mov	r3,r2
  811e30:	e0bffc17 	ldw	r2,-16(fp)
  811e34:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  811e38:	e0bffc17 	ldw	r2,-16(fp)
  811e3c:	10800883 	ldbu	r2,34(r2)
  811e40:	10803fcc 	andi	r2,r2,255
  811e44:	108000f0 	cmpltui	r2,r2,3
  811e48:	10003a1e 	bne	r2,zero,811f34 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  811e4c:	e13ffc17 	ldw	r4,-16(fp)
  811e50:	08119240 	call	811924 <lcd_scroll_up>
  811e54:	00003706 	br	811f34 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  811e58:	e0bff907 	ldb	r2,-28(fp)
  811e5c:	10800218 	cmpnei	r2,r2,8
  811e60:	10000b1e 	bne	r2,zero,811e90 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  811e64:	e0bffc17 	ldw	r2,-16(fp)
  811e68:	10800843 	ldbu	r2,33(r2)
  811e6c:	10803fcc 	andi	r2,r2,255
  811e70:	10003026 	beq	r2,zero,811f34 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  811e74:	e0bffc17 	ldw	r2,-16(fp)
  811e78:	10800843 	ldbu	r2,33(r2)
  811e7c:	10bfffc4 	addi	r2,r2,-1
  811e80:	1007883a 	mov	r3,r2
  811e84:	e0bffc17 	ldw	r2,-16(fp)
  811e88:	10c00845 	stb	r3,33(r2)
  811e8c:	00002906 	br	811f34 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  811e90:	d0e00d17 	ldw	r3,-32716(gp)
  811e94:	e0bff907 	ldb	r2,-28(fp)
  811e98:	10800044 	addi	r2,r2,1
  811e9c:	1885883a 	add	r2,r3,r2
  811ea0:	10800003 	ldbu	r2,0(r2)
  811ea4:	10803fcc 	andi	r2,r2,255
  811ea8:	1080201c 	xori	r2,r2,128
  811eac:	10bfe004 	addi	r2,r2,-128
  811eb0:	108025cc 	andi	r2,r2,151
  811eb4:	10001f26 	beq	r2,zero,811f34 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  811eb8:	e0bffc17 	ldw	r2,-16(fp)
  811ebc:	10800883 	ldbu	r2,34(r2)
  811ec0:	10803fcc 	andi	r2,r2,255
  811ec4:	108000b0 	cmpltui	r2,r2,2
  811ec8:	1000021e 	bne	r2,zero,811ed4 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  811ecc:	e13ffc17 	ldw	r4,-16(fp)
  811ed0:	08119240 	call	811924 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  811ed4:	e0bffc17 	ldw	r2,-16(fp)
  811ed8:	10800843 	ldbu	r2,33(r2)
  811edc:	10803fcc 	andi	r2,r2,255
  811ee0:	10801428 	cmpgeui	r2,r2,80
  811ee4:	10000d1e 	bne	r2,zero,811f1c <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  811ee8:	e0bffc17 	ldw	r2,-16(fp)
  811eec:	10800883 	ldbu	r2,34(r2)
  811ef0:	10c03fcc 	andi	r3,r2,255
  811ef4:	e0bffc17 	ldw	r2,-16(fp)
  811ef8:	10800843 	ldbu	r2,33(r2)
  811efc:	10803fcc 	andi	r2,r2,255
  811f00:	e13ffc17 	ldw	r4,-16(fp)
  811f04:	18c018e4 	muli	r3,r3,99
  811f08:	20c7883a 	add	r3,r4,r3
  811f0c:	1885883a 	add	r2,r3,r2
  811f10:	10801004 	addi	r2,r2,64
  811f14:	e0fff903 	ldbu	r3,-28(fp)
  811f18:	10c00005 	stb	r3,0(r2)

      sp->x++;
  811f1c:	e0bffc17 	ldw	r2,-16(fp)
  811f20:	10800843 	ldbu	r2,33(r2)
  811f24:	10800044 	addi	r2,r2,1
  811f28:	1007883a 	mov	r3,r2
  811f2c:	e0bffc17 	ldw	r2,-16(fp)
  811f30:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  811f34:	e0bffd17 	ldw	r2,-12(fp)
  811f38:	10800044 	addi	r2,r2,1
  811f3c:	e0bffd15 	stw	r2,-12(fp)
  811f40:	e0fffd17 	ldw	r3,-12(fp)
  811f44:	e0bff817 	ldw	r2,-32(fp)
  811f48:	18bf6436 	bltu	r3,r2,811cdc <__alt_mem_onchip_mem+0xff791cdc>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  811f4c:	00800404 	movi	r2,16
  811f50:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811f54:	e03ff515 	stw	zero,-44(fp)
  811f58:	00003706 	br	812038 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  811f5c:	00801404 	movi	r2,80
  811f60:	e0bff715 	stw	r2,-36(fp)
  811f64:	00001106 	br	811fac <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  811f68:	e0bff717 	ldw	r2,-36(fp)
  811f6c:	10bfffc4 	addi	r2,r2,-1
  811f70:	e13ffc17 	ldw	r4,-16(fp)
  811f74:	e0fff517 	ldw	r3,-44(fp)
  811f78:	18c018e4 	muli	r3,r3,99
  811f7c:	20c7883a 	add	r3,r4,r3
  811f80:	1885883a 	add	r2,r3,r2
  811f84:	10801004 	addi	r2,r2,64
  811f88:	10800003 	ldbu	r2,0(r2)
  811f8c:	10803fcc 	andi	r2,r2,255
  811f90:	1080201c 	xori	r2,r2,128
  811f94:	10bfe004 	addi	r2,r2,-128
  811f98:	10800820 	cmpeqi	r2,r2,32
  811f9c:	10000626 	beq	r2,zero,811fb8 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  811fa0:	e0bff717 	ldw	r2,-36(fp)
  811fa4:	10bfffc4 	addi	r2,r2,-1
  811fa8:	e0bff715 	stw	r2,-36(fp)
  811fac:	e0bff717 	ldw	r2,-36(fp)
  811fb0:	00bfed16 	blt	zero,r2,811f68 <__alt_mem_onchip_mem+0xff791f68>
  811fb4:	00000106 	br	811fbc <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  811fb8:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  811fbc:	e0bff717 	ldw	r2,-36(fp)
  811fc0:	10800448 	cmpgei	r2,r2,17
  811fc4:	1000031e 	bne	r2,zero,811fd4 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  811fc8:	00800404 	movi	r2,16
  811fcc:	e0bff715 	stw	r2,-36(fp)
  811fd0:	00000306 	br	811fe0 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  811fd4:	e0bff717 	ldw	r2,-36(fp)
  811fd8:	10800044 	addi	r2,r2,1
  811fdc:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  811fe0:	e0bff717 	ldw	r2,-36(fp)
  811fe4:	1009883a 	mov	r4,r2
  811fe8:	e0fffc17 	ldw	r3,-16(fp)
  811fec:	e0bff517 	ldw	r2,-44(fp)
  811ff0:	108018e4 	muli	r2,r2,99
  811ff4:	1885883a 	add	r2,r3,r2
  811ff8:	10802444 	addi	r2,r2,145
  811ffc:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  812000:	e0fff617 	ldw	r3,-40(fp)
  812004:	e0bff717 	ldw	r2,-36(fp)
  812008:	1880020e 	bge	r3,r2,812014 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  81200c:	e0bff717 	ldw	r2,-36(fp)
  812010:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  812014:	e0fffc17 	ldw	r3,-16(fp)
  812018:	e0bff517 	ldw	r2,-44(fp)
  81201c:	108018e4 	muli	r2,r2,99
  812020:	1885883a 	add	r2,r3,r2
  812024:	10802484 	addi	r2,r2,146
  812028:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81202c:	e0bff517 	ldw	r2,-44(fp)
  812030:	10800044 	addi	r2,r2,1
  812034:	e0bff515 	stw	r2,-44(fp)
  812038:	e0bff517 	ldw	r2,-44(fp)
  81203c:	10800090 	cmplti	r2,r2,2
  812040:	103fc61e 	bne	r2,zero,811f5c <__alt_mem_onchip_mem+0xff791f5c>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  812044:	e0bff617 	ldw	r2,-40(fp)
  812048:	10800448 	cmpgei	r2,r2,17
  81204c:	1000031e 	bne	r2,zero,81205c <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  812050:	e0bffc17 	ldw	r2,-16(fp)
  812054:	10000985 	stb	zero,38(r2)
  812058:	00002e06 	br	812114 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  81205c:	e0bff617 	ldw	r2,-40(fp)
  812060:	1085883a 	add	r2,r2,r2
  812064:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  812068:	e0bff617 	ldw	r2,-40(fp)
  81206c:	1007883a 	mov	r3,r2
  812070:	e0bffc17 	ldw	r2,-16(fp)
  812074:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812078:	e03ff515 	stw	zero,-44(fp)
  81207c:	00002206 	br	812108 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  812080:	e0fffc17 	ldw	r3,-16(fp)
  812084:	e0bff517 	ldw	r2,-44(fp)
  812088:	108018e4 	muli	r2,r2,99
  81208c:	1885883a 	add	r2,r3,r2
  812090:	10802444 	addi	r2,r2,145
  812094:	10800003 	ldbu	r2,0(r2)
  812098:	10803fcc 	andi	r2,r2,255
  81209c:	1080201c 	xori	r2,r2,128
  8120a0:	10bfe004 	addi	r2,r2,-128
  8120a4:	10800450 	cmplti	r2,r2,17
  8120a8:	1000141e 	bne	r2,zero,8120fc <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  8120ac:	e0fffc17 	ldw	r3,-16(fp)
  8120b0:	e0bff517 	ldw	r2,-44(fp)
  8120b4:	108018e4 	muli	r2,r2,99
  8120b8:	1885883a 	add	r2,r3,r2
  8120bc:	10802444 	addi	r2,r2,145
  8120c0:	10800003 	ldbu	r2,0(r2)
  8120c4:	10803fcc 	andi	r2,r2,255
  8120c8:	1080201c 	xori	r2,r2,128
  8120cc:	10bfe004 	addi	r2,r2,-128
  8120d0:	1004923a 	slli	r2,r2,8
  8120d4:	e17ff617 	ldw	r5,-40(fp)
  8120d8:	1009883a 	mov	r4,r2
  8120dc:	080d1640 	call	80d164 <__divsi3>
  8120e0:	1009883a 	mov	r4,r2
  8120e4:	e0fffc17 	ldw	r3,-16(fp)
  8120e8:	e0bff517 	ldw	r2,-44(fp)
  8120ec:	108018e4 	muli	r2,r2,99
  8120f0:	1885883a 	add	r2,r3,r2
  8120f4:	10802484 	addi	r2,r2,146
  8120f8:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8120fc:	e0bff517 	ldw	r2,-44(fp)
  812100:	10800044 	addi	r2,r2,1
  812104:	e0bff515 	stw	r2,-44(fp)
  812108:	e0bff517 	ldw	r2,-44(fp)
  81210c:	10800090 	cmplti	r2,r2,2
  812110:	103fdb1e 	bne	r2,zero,812080 <__alt_mem_onchip_mem+0xff792080>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  812114:	e0bffc17 	ldw	r2,-16(fp)
  812118:	10800943 	ldbu	r2,37(r2)
  81211c:	10803fcc 	andi	r2,r2,255
  812120:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  812124:	e13ffc17 	ldw	r4,-16(fp)
  812128:	08117380 	call	811738 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  81212c:	e0bffc17 	ldw	r2,-16(fp)
  812130:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  812134:	e0bffc17 	ldw	r2,-16(fp)
  812138:	10800943 	ldbu	r2,37(r2)
  81213c:	10c03fcc 	andi	r3,r2,255
  812140:	e0bffb17 	ldw	r2,-20(fp)
  812144:	18800426 	beq	r3,r2,812158 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  812148:	e0bffc17 	ldw	r2,-16(fp)
  81214c:	00c00044 	movi	r3,1
  812150:	10c009c5 	stb	r3,39(r2)
  }
  812154:	003fef06 	br	812114 <__alt_mem_onchip_mem+0xff792114>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  812158:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  81215c:	e0bffe17 	ldw	r2,-8(fp)
}
  812160:	e037883a 	mov	sp,fp
  812164:	dfc00117 	ldw	ra,4(sp)
  812168:	df000017 	ldw	fp,0(sp)
  81216c:	dec00204 	addi	sp,sp,8
  812170:	f800283a 	ret

00812174 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  812174:	defffc04 	addi	sp,sp,-16
  812178:	dfc00315 	stw	ra,12(sp)
  81217c:	df000215 	stw	fp,8(sp)
  812180:	df000204 	addi	fp,sp,8
  812184:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  812188:	e0bfff17 	ldw	r2,-4(fp)
  81218c:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  812190:	e0bffe17 	ldw	r2,-8(fp)
  812194:	10800943 	ldbu	r2,37(r2)
  812198:	10803fcc 	andi	r2,r2,255
  81219c:	10c00044 	addi	r3,r2,1
  8121a0:	e0bffe17 	ldw	r2,-8(fp)
  8121a4:	10800983 	ldbu	r2,38(r2)
  8121a8:	10803fcc 	andi	r2,r2,255
  8121ac:	18800316 	blt	r3,r2,8121bc <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  8121b0:	e0bffe17 	ldw	r2,-8(fp)
  8121b4:	10000945 	stb	zero,37(r2)
  8121b8:	00000606 	br	8121d4 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  8121bc:	e0bffe17 	ldw	r2,-8(fp)
  8121c0:	10800943 	ldbu	r2,37(r2)
  8121c4:	10800044 	addi	r2,r2,1
  8121c8:	1007883a 	mov	r3,r2
  8121cc:	e0bffe17 	ldw	r2,-8(fp)
  8121d0:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  8121d4:	e0bffe17 	ldw	r2,-8(fp)
  8121d8:	10800983 	ldbu	r2,38(r2)
  8121dc:	10803fcc 	andi	r2,r2,255
  8121e0:	10000826 	beq	r2,zero,812204 <alt_lcd_16207_timeout+0x90>
  8121e4:	e0bffe17 	ldw	r2,-8(fp)
  8121e8:	108009c3 	ldbu	r2,39(r2)
  8121ec:	10803fcc 	andi	r2,r2,255
  8121f0:	1080201c 	xori	r2,r2,128
  8121f4:	10bfe004 	addi	r2,r2,-128
  8121f8:	1000021e 	bne	r2,zero,812204 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  8121fc:	e13ffe17 	ldw	r4,-8(fp)
  812200:	08117380 	call	811738 <lcd_repaint_screen>

  return sp->period;
  812204:	e0bffe17 	ldw	r2,-8(fp)
  812208:	10800717 	ldw	r2,28(r2)
}
  81220c:	e037883a 	mov	sp,fp
  812210:	dfc00117 	ldw	ra,4(sp)
  812214:	df000017 	ldw	fp,0(sp)
  812218:	dec00204 	addi	sp,sp,8
  81221c:	f800283a 	ret

00812220 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  812220:	defffc04 	addi	sp,sp,-16
  812224:	dfc00315 	stw	ra,12(sp)
  812228:	df000215 	stw	fp,8(sp)
  81222c:	df000204 	addi	fp,sp,8
  812230:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  812234:	e0bfff17 	ldw	r2,-4(fp)
  812238:	10800017 	ldw	r2,0(r2)
  81223c:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  812240:	e0bfff17 	ldw	r2,-4(fp)
  812244:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  812248:	010ea604 	movi	r4,15000
  81224c:	08135b80 	call	8135b8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  812250:	e0bffe17 	ldw	r2,-8(fp)
  812254:	00c00c04 	movi	r3,48
  812258:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  81225c:	01040104 	movi	r4,4100
  812260:	08135b80 	call	8135b8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  812264:	e0bffe17 	ldw	r2,-8(fp)
  812268:	00c00c04 	movi	r3,48
  81226c:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  812270:	0100fa04 	movi	r4,1000
  812274:	08135b80 	call	8135b8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  812278:	e0bffe17 	ldw	r2,-8(fp)
  81227c:	00c00c04 	movi	r3,48
  812280:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  812284:	01400e04 	movi	r5,56
  812288:	e13fff17 	ldw	r4,-4(fp)
  81228c:	08114d80 	call	8114d8 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  812290:	01400204 	movi	r5,8
  812294:	e13fff17 	ldw	r4,-4(fp)
  812298:	08114d80 	call	8114d8 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  81229c:	e13fff17 	ldw	r4,-4(fp)
  8122a0:	08116680 	call	811668 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  8122a4:	01400184 	movi	r5,6
  8122a8:	e13fff17 	ldw	r4,-4(fp)
  8122ac:	08114d80 	call	8114d8 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  8122b0:	01400304 	movi	r5,12
  8122b4:	e13fff17 	ldw	r4,-4(fp)
  8122b8:	08114d80 	call	8114d8 <lcd_write_command>

  sp->esccount = -1;
  8122bc:	e0bfff17 	ldw	r2,-4(fp)
  8122c0:	00ffffc4 	movi	r3,-1
  8122c4:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  8122c8:	e0bfff17 	ldw	r2,-4(fp)
  8122cc:	10800a04 	addi	r2,r2,40
  8122d0:	01800204 	movi	r6,8
  8122d4:	000b883a 	mov	r5,zero
  8122d8:	1009883a 	mov	r4,r2
  8122dc:	08037900 	call	803790 <memset>

  sp->scrollpos = 0;
  8122e0:	e0bfff17 	ldw	r2,-4(fp)
  8122e4:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  8122e8:	e0bfff17 	ldw	r2,-4(fp)
  8122ec:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  8122f0:	e0bfff17 	ldw	r2,-4(fp)
  8122f4:	100009c5 	stb	zero,39(r2)
  8122f8:	d0a77617 	ldw	r2,-25128(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  8122fc:	01400284 	movi	r5,10
  812300:	1009883a 	mov	r4,r2
  812304:	080d25c0 	call	80d25c <__udivsi3>
  812308:	1007883a 	mov	r3,r2
  81230c:	e0bfff17 	ldw	r2,-4(fp)
  812310:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  812314:	e0bfff17 	ldw	r2,-4(fp)
  812318:	10c00104 	addi	r3,r2,4
  81231c:	e0bfff17 	ldw	r2,-4(fp)
  812320:	10800717 	ldw	r2,28(r2)
  812324:	e1ffff17 	ldw	r7,-4(fp)
  812328:	01802074 	movhi	r6,129
  81232c:	31885d04 	addi	r6,r6,8564
  812330:	100b883a 	mov	r5,r2
  812334:	1809883a 	mov	r4,r3
  812338:	080f9800 	call	80f980 <alt_alarm_start>
}
  81233c:	0001883a 	nop
  812340:	e037883a 	mov	sp,fp
  812344:	dfc00117 	ldw	ra,4(sp)
  812348:	df000017 	ldw	fp,0(sp)
  81234c:	dec00204 	addi	sp,sp,8
  812350:	f800283a 	ret

00812354 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  812354:	defffa04 	addi	sp,sp,-24
  812358:	dfc00515 	stw	ra,20(sp)
  81235c:	df000415 	stw	fp,16(sp)
  812360:	df000404 	addi	fp,sp,16
  812364:	e13ffd15 	stw	r4,-12(fp)
  812368:	e17ffe15 	stw	r5,-8(fp)
  81236c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  812370:	e0bffd17 	ldw	r2,-12(fp)
  812374:	10800017 	ldw	r2,0(r2)
  812378:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  81237c:	e0bffc17 	ldw	r2,-16(fp)
  812380:	10c00a04 	addi	r3,r2,40
  812384:	e0bffd17 	ldw	r2,-12(fp)
  812388:	10800217 	ldw	r2,8(r2)
  81238c:	100f883a 	mov	r7,r2
  812390:	e1bfff17 	ldw	r6,-4(fp)
  812394:	e17ffe17 	ldw	r5,-8(fp)
  812398:	1809883a 	mov	r4,r3
  81239c:	0811c9c0 	call	811c9c <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  8123a0:	e037883a 	mov	sp,fp
  8123a4:	dfc00117 	ldw	ra,4(sp)
  8123a8:	df000017 	ldw	fp,0(sp)
  8123ac:	dec00204 	addi	sp,sp,8
  8123b0:	f800283a 	ret

008123b4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8123b4:	defffa04 	addi	sp,sp,-24
  8123b8:	dfc00515 	stw	ra,20(sp)
  8123bc:	df000415 	stw	fp,16(sp)
  8123c0:	df000404 	addi	fp,sp,16
  8123c4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8123c8:	0007883a 	mov	r3,zero
  8123cc:	e0bfff17 	ldw	r2,-4(fp)
  8123d0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8123d4:	e0bfff17 	ldw	r2,-4(fp)
  8123d8:	10800104 	addi	r2,r2,4
  8123dc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8123e0:	0005303a 	rdctl	r2,status
  8123e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8123e8:	e0fffd17 	ldw	r3,-12(fp)
  8123ec:	00bfff84 	movi	r2,-2
  8123f0:	1884703a 	and	r2,r3,r2
  8123f4:	1001703a 	wrctl	status,r2
  
  return context;
  8123f8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8123fc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  812400:	081072c0 	call	81072c <alt_tick>
  812404:	e0bffc17 	ldw	r2,-16(fp)
  812408:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81240c:	e0bffe17 	ldw	r2,-8(fp)
  812410:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  812414:	0001883a 	nop
  812418:	e037883a 	mov	sp,fp
  81241c:	dfc00117 	ldw	ra,4(sp)
  812420:	df000017 	ldw	fp,0(sp)
  812424:	dec00204 	addi	sp,sp,8
  812428:	f800283a 	ret

0081242c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  81242c:	defff804 	addi	sp,sp,-32
  812430:	dfc00715 	stw	ra,28(sp)
  812434:	df000615 	stw	fp,24(sp)
  812438:	df000604 	addi	fp,sp,24
  81243c:	e13ffc15 	stw	r4,-16(fp)
  812440:	e17ffd15 	stw	r5,-12(fp)
  812444:	e1bffe15 	stw	r6,-8(fp)
  812448:	e1ffff15 	stw	r7,-4(fp)
  81244c:	e0bfff17 	ldw	r2,-4(fp)
  812450:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  812454:	d0a77617 	ldw	r2,-25128(gp)
  812458:	1000021e 	bne	r2,zero,812464 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  81245c:	e0bffb17 	ldw	r2,-20(fp)
  812460:	d0a77615 	stw	r2,-25128(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  812464:	e0bffc17 	ldw	r2,-16(fp)
  812468:	10800104 	addi	r2,r2,4
  81246c:	00c001c4 	movi	r3,7
  812470:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  812474:	d8000015 	stw	zero,0(sp)
  812478:	e1fffc17 	ldw	r7,-16(fp)
  81247c:	01802074 	movhi	r6,129
  812480:	3188ed04 	addi	r6,r6,9140
  812484:	e17ffe17 	ldw	r5,-8(fp)
  812488:	e13ffd17 	ldw	r4,-12(fp)
  81248c:	08131d80 	call	8131d8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  812490:	0001883a 	nop
  812494:	e037883a 	mov	sp,fp
  812498:	dfc00117 	ldw	ra,4(sp)
  81249c:	df000017 	ldw	fp,0(sp)
  8124a0:	dec00204 	addi	sp,sp,8
  8124a4:	f800283a 	ret

008124a8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8124a8:	defffa04 	addi	sp,sp,-24
  8124ac:	dfc00515 	stw	ra,20(sp)
  8124b0:	df000415 	stw	fp,16(sp)
  8124b4:	df000404 	addi	fp,sp,16
  8124b8:	e13ffd15 	stw	r4,-12(fp)
  8124bc:	e17ffe15 	stw	r5,-8(fp)
  8124c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8124c4:	e0bffd17 	ldw	r2,-12(fp)
  8124c8:	10800017 	ldw	r2,0(r2)
  8124cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  8124d0:	e0bffc17 	ldw	r2,-16(fp)
  8124d4:	10c00a04 	addi	r3,r2,40
  8124d8:	e0bffd17 	ldw	r2,-12(fp)
  8124dc:	10800217 	ldw	r2,8(r2)
  8124e0:	100f883a 	mov	r7,r2
  8124e4:	e1bfff17 	ldw	r6,-4(fp)
  8124e8:	e17ffe17 	ldw	r5,-8(fp)
  8124ec:	1809883a 	mov	r4,r3
  8124f0:	08129bc0 	call	8129bc <altera_avalon_uart_read>
      fd->fd_flags);
}
  8124f4:	e037883a 	mov	sp,fp
  8124f8:	dfc00117 	ldw	ra,4(sp)
  8124fc:	df000017 	ldw	fp,0(sp)
  812500:	dec00204 	addi	sp,sp,8
  812504:	f800283a 	ret

00812508 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  812508:	defffa04 	addi	sp,sp,-24
  81250c:	dfc00515 	stw	ra,20(sp)
  812510:	df000415 	stw	fp,16(sp)
  812514:	df000404 	addi	fp,sp,16
  812518:	e13ffd15 	stw	r4,-12(fp)
  81251c:	e17ffe15 	stw	r5,-8(fp)
  812520:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  812524:	e0bffd17 	ldw	r2,-12(fp)
  812528:	10800017 	ldw	r2,0(r2)
  81252c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  812530:	e0bffc17 	ldw	r2,-16(fp)
  812534:	10c00a04 	addi	r3,r2,40
  812538:	e0bffd17 	ldw	r2,-12(fp)
  81253c:	10800217 	ldw	r2,8(r2)
  812540:	100f883a 	mov	r7,r2
  812544:	e1bfff17 	ldw	r6,-4(fp)
  812548:	e17ffe17 	ldw	r5,-8(fp)
  81254c:	1809883a 	mov	r4,r3
  812550:	0812bd40 	call	812bd4 <altera_avalon_uart_write>
      fd->fd_flags);
}
  812554:	e037883a 	mov	sp,fp
  812558:	dfc00117 	ldw	ra,4(sp)
  81255c:	df000017 	ldw	fp,0(sp)
  812560:	dec00204 	addi	sp,sp,8
  812564:	f800283a 	ret

00812568 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  812568:	defffc04 	addi	sp,sp,-16
  81256c:	dfc00315 	stw	ra,12(sp)
  812570:	df000215 	stw	fp,8(sp)
  812574:	df000204 	addi	fp,sp,8
  812578:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  81257c:	e0bfff17 	ldw	r2,-4(fp)
  812580:	10800017 	ldw	r2,0(r2)
  812584:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  812588:	e0bffe17 	ldw	r2,-8(fp)
  81258c:	10c00a04 	addi	r3,r2,40
  812590:	e0bfff17 	ldw	r2,-4(fp)
  812594:	10800217 	ldw	r2,8(r2)
  812598:	100b883a 	mov	r5,r2
  81259c:	1809883a 	mov	r4,r3
  8125a0:	081292c0 	call	81292c <altera_avalon_uart_close>
}
  8125a4:	e037883a 	mov	sp,fp
  8125a8:	dfc00117 	ldw	ra,4(sp)
  8125ac:	df000017 	ldw	fp,0(sp)
  8125b0:	dec00204 	addi	sp,sp,8
  8125b4:	f800283a 	ret

008125b8 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  8125b8:	defff804 	addi	sp,sp,-32
  8125bc:	dfc00715 	stw	ra,28(sp)
  8125c0:	df000615 	stw	fp,24(sp)
  8125c4:	df000604 	addi	fp,sp,24
  8125c8:	e13ffd15 	stw	r4,-12(fp)
  8125cc:	e17ffe15 	stw	r5,-8(fp)
  8125d0:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  8125d4:	e0bffd17 	ldw	r2,-12(fp)
  8125d8:	10800017 	ldw	r2,0(r2)
  8125dc:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  8125e0:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8125e4:	1000041e 	bne	r2,zero,8125f8 <altera_avalon_uart_init+0x40>
  8125e8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8125ec:	1000021e 	bne	r2,zero,8125f8 <altera_avalon_uart_init+0x40>
  8125f0:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8125f4:	10000226 	beq	r2,zero,812600 <altera_avalon_uart_init+0x48>
  8125f8:	00800044 	movi	r2,1
  8125fc:	00000106 	br	812604 <altera_avalon_uart_init+0x4c>
  812600:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  812604:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  812608:	e0bffc17 	ldw	r2,-16(fp)
  81260c:	10000f1e 	bne	r2,zero,81264c <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  812610:	e0bffd17 	ldw	r2,-12(fp)
  812614:	00c32004 	movi	r3,3200
  812618:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  81261c:	e0bffb17 	ldw	r2,-20(fp)
  812620:	10800304 	addi	r2,r2,12
  812624:	e0fffd17 	ldw	r3,-12(fp)
  812628:	18c00117 	ldw	r3,4(r3)
  81262c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  812630:	d8000015 	stw	zero,0(sp)
  812634:	e1fffd17 	ldw	r7,-12(fp)
  812638:	01802074 	movhi	r6,129
  81263c:	31899904 	addi	r6,r6,9828
  812640:	e17fff17 	ldw	r5,-4(fp)
  812644:	e13ffe17 	ldw	r4,-8(fp)
  812648:	08131d80 	call	8131d8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  81264c:	0001883a 	nop
  812650:	e037883a 	mov	sp,fp
  812654:	dfc00117 	ldw	ra,4(sp)
  812658:	df000017 	ldw	fp,0(sp)
  81265c:	dec00204 	addi	sp,sp,8
  812660:	f800283a 	ret

00812664 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  812664:	defffa04 	addi	sp,sp,-24
  812668:	dfc00515 	stw	ra,20(sp)
  81266c:	df000415 	stw	fp,16(sp)
  812670:	df000404 	addi	fp,sp,16
  812674:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  812678:	e0bfff17 	ldw	r2,-4(fp)
  81267c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  812680:	e0bffc17 	ldw	r2,-16(fp)
  812684:	10800017 	ldw	r2,0(r2)
  812688:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  81268c:	e0bffd17 	ldw	r2,-12(fp)
  812690:	10800204 	addi	r2,r2,8
  812694:	10800037 	ldwio	r2,0(r2)
  812698:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  81269c:	e0bffd17 	ldw	r2,-12(fp)
  8126a0:	10800204 	addi	r2,r2,8
  8126a4:	0007883a 	mov	r3,zero
  8126a8:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  8126ac:	e0bffd17 	ldw	r2,-12(fp)
  8126b0:	10800204 	addi	r2,r2,8
  8126b4:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  8126b8:	e0bffe17 	ldw	r2,-8(fp)
  8126bc:	1080200c 	andi	r2,r2,128
  8126c0:	10000326 	beq	r2,zero,8126d0 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  8126c4:	e17ffe17 	ldw	r5,-8(fp)
  8126c8:	e13ffc17 	ldw	r4,-16(fp)
  8126cc:	08127000 	call	812700 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  8126d0:	e0bffe17 	ldw	r2,-8(fp)
  8126d4:	1081100c 	andi	r2,r2,1088
  8126d8:	10000326 	beq	r2,zero,8126e8 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  8126dc:	e17ffe17 	ldw	r5,-8(fp)
  8126e0:	e13ffc17 	ldw	r4,-16(fp)
  8126e4:	08127e40 	call	8127e4 <altera_avalon_uart_txirq>
  }
  

}
  8126e8:	0001883a 	nop
  8126ec:	e037883a 	mov	sp,fp
  8126f0:	dfc00117 	ldw	ra,4(sp)
  8126f4:	df000017 	ldw	fp,0(sp)
  8126f8:	dec00204 	addi	sp,sp,8
  8126fc:	f800283a 	ret

00812700 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  812700:	defffc04 	addi	sp,sp,-16
  812704:	df000315 	stw	fp,12(sp)
  812708:	df000304 	addi	fp,sp,12
  81270c:	e13ffe15 	stw	r4,-8(fp)
  812710:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  812714:	e0bfff17 	ldw	r2,-4(fp)
  812718:	108000cc 	andi	r2,r2,3
  81271c:	10002c1e 	bne	r2,zero,8127d0 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  812720:	e0bffe17 	ldw	r2,-8(fp)
  812724:	10800317 	ldw	r2,12(r2)
  812728:	e0bffe17 	ldw	r2,-8(fp)
  81272c:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  812730:	e0bffe17 	ldw	r2,-8(fp)
  812734:	10800317 	ldw	r2,12(r2)
  812738:	10800044 	addi	r2,r2,1
  81273c:	10800fcc 	andi	r2,r2,63
  812740:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  812744:	e0bffe17 	ldw	r2,-8(fp)
  812748:	10800317 	ldw	r2,12(r2)
  81274c:	e0fffe17 	ldw	r3,-8(fp)
  812750:	18c00017 	ldw	r3,0(r3)
  812754:	18c00037 	ldwio	r3,0(r3)
  812758:	1809883a 	mov	r4,r3
  81275c:	e0fffe17 	ldw	r3,-8(fp)
  812760:	1885883a 	add	r2,r3,r2
  812764:	10800704 	addi	r2,r2,28
  812768:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  81276c:	e0bffe17 	ldw	r2,-8(fp)
  812770:	e0fffd17 	ldw	r3,-12(fp)
  812774:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  812778:	e0bffe17 	ldw	r2,-8(fp)
  81277c:	10800317 	ldw	r2,12(r2)
  812780:	10800044 	addi	r2,r2,1
  812784:	10800fcc 	andi	r2,r2,63
  812788:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  81278c:	e0bffe17 	ldw	r2,-8(fp)
  812790:	10c00217 	ldw	r3,8(r2)
  812794:	e0bffd17 	ldw	r2,-12(fp)
  812798:	18800e1e 	bne	r3,r2,8127d4 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  81279c:	e0bffe17 	ldw	r2,-8(fp)
  8127a0:	10c00117 	ldw	r3,4(r2)
  8127a4:	00bfdfc4 	movi	r2,-129
  8127a8:	1886703a 	and	r3,r3,r2
  8127ac:	e0bffe17 	ldw	r2,-8(fp)
  8127b0:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  8127b4:	e0bffe17 	ldw	r2,-8(fp)
  8127b8:	10800017 	ldw	r2,0(r2)
  8127bc:	10800304 	addi	r2,r2,12
  8127c0:	e0fffe17 	ldw	r3,-8(fp)
  8127c4:	18c00117 	ldw	r3,4(r3)
  8127c8:	10c00035 	stwio	r3,0(r2)
  8127cc:	00000106 	br	8127d4 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  8127d0:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  8127d4:	e037883a 	mov	sp,fp
  8127d8:	df000017 	ldw	fp,0(sp)
  8127dc:	dec00104 	addi	sp,sp,4
  8127e0:	f800283a 	ret

008127e4 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8127e4:	defffb04 	addi	sp,sp,-20
  8127e8:	df000415 	stw	fp,16(sp)
  8127ec:	df000404 	addi	fp,sp,16
  8127f0:	e13ffc15 	stw	r4,-16(fp)
  8127f4:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  8127f8:	e0bffc17 	ldw	r2,-16(fp)
  8127fc:	10c00417 	ldw	r3,16(r2)
  812800:	e0bffc17 	ldw	r2,-16(fp)
  812804:	10800517 	ldw	r2,20(r2)
  812808:	18803226 	beq	r3,r2,8128d4 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  81280c:	e0bffc17 	ldw	r2,-16(fp)
  812810:	10800617 	ldw	r2,24(r2)
  812814:	1080008c 	andi	r2,r2,2
  812818:	10000326 	beq	r2,zero,812828 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  81281c:	e0bffd17 	ldw	r2,-12(fp)
  812820:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  812824:	10001d26 	beq	r2,zero,81289c <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  812828:	e0bffc17 	ldw	r2,-16(fp)
  81282c:	10800417 	ldw	r2,16(r2)
  812830:	e0bffc17 	ldw	r2,-16(fp)
  812834:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  812838:	e0bffc17 	ldw	r2,-16(fp)
  81283c:	10800017 	ldw	r2,0(r2)
  812840:	10800104 	addi	r2,r2,4
  812844:	e0fffc17 	ldw	r3,-16(fp)
  812848:	18c00417 	ldw	r3,16(r3)
  81284c:	e13ffc17 	ldw	r4,-16(fp)
  812850:	20c7883a 	add	r3,r4,r3
  812854:	18c01704 	addi	r3,r3,92
  812858:	18c00003 	ldbu	r3,0(r3)
  81285c:	18c03fcc 	andi	r3,r3,255
  812860:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  812864:	e0bffc17 	ldw	r2,-16(fp)
  812868:	10800417 	ldw	r2,16(r2)
  81286c:	10800044 	addi	r2,r2,1
  812870:	e0fffc17 	ldw	r3,-16(fp)
  812874:	18800415 	stw	r2,16(r3)
  812878:	10c00fcc 	andi	r3,r2,63
  81287c:	e0bffc17 	ldw	r2,-16(fp)
  812880:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  812884:	e0bffc17 	ldw	r2,-16(fp)
  812888:	10800117 	ldw	r2,4(r2)
  81288c:	10c01014 	ori	r3,r2,64
  812890:	e0bffc17 	ldw	r2,-16(fp)
  812894:	10c00115 	stw	r3,4(r2)
  812898:	00000e06 	br	8128d4 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  81289c:	e0bffc17 	ldw	r2,-16(fp)
  8128a0:	10800017 	ldw	r2,0(r2)
  8128a4:	10800204 	addi	r2,r2,8
  8128a8:	10800037 	ldwio	r2,0(r2)
  8128ac:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8128b0:	e0bffd17 	ldw	r2,-12(fp)
  8128b4:	1082000c 	andi	r2,r2,2048
  8128b8:	1000061e 	bne	r2,zero,8128d4 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8128bc:	e0bffc17 	ldw	r2,-16(fp)
  8128c0:	10c00117 	ldw	r3,4(r2)
  8128c4:	00bfefc4 	movi	r2,-65
  8128c8:	1886703a 	and	r3,r3,r2
  8128cc:	e0bffc17 	ldw	r2,-16(fp)
  8128d0:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  8128d4:	e0bffc17 	ldw	r2,-16(fp)
  8128d8:	10c00417 	ldw	r3,16(r2)
  8128dc:	e0bffc17 	ldw	r2,-16(fp)
  8128e0:	10800517 	ldw	r2,20(r2)
  8128e4:	1880061e 	bne	r3,r2,812900 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8128e8:	e0bffc17 	ldw	r2,-16(fp)
  8128ec:	10c00117 	ldw	r3,4(r2)
  8128f0:	00beefc4 	movi	r2,-1089
  8128f4:	1886703a 	and	r3,r3,r2
  8128f8:	e0bffc17 	ldw	r2,-16(fp)
  8128fc:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812900:	e0bffc17 	ldw	r2,-16(fp)
  812904:	10800017 	ldw	r2,0(r2)
  812908:	10800304 	addi	r2,r2,12
  81290c:	e0fffc17 	ldw	r3,-16(fp)
  812910:	18c00117 	ldw	r3,4(r3)
  812914:	10c00035 	stwio	r3,0(r2)
}
  812918:	0001883a 	nop
  81291c:	e037883a 	mov	sp,fp
  812920:	df000017 	ldw	fp,0(sp)
  812924:	dec00104 	addi	sp,sp,4
  812928:	f800283a 	ret

0081292c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  81292c:	defffd04 	addi	sp,sp,-12
  812930:	df000215 	stw	fp,8(sp)
  812934:	df000204 	addi	fp,sp,8
  812938:	e13ffe15 	stw	r4,-8(fp)
  81293c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  812940:	00000506 	br	812958 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  812944:	e0bfff17 	ldw	r2,-4(fp)
  812948:	1090000c 	andi	r2,r2,16384
  81294c:	10000226 	beq	r2,zero,812958 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  812950:	00bffd44 	movi	r2,-11
  812954:	00000606 	br	812970 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  812958:	e0bffe17 	ldw	r2,-8(fp)
  81295c:	10c00417 	ldw	r3,16(r2)
  812960:	e0bffe17 	ldw	r2,-8(fp)
  812964:	10800517 	ldw	r2,20(r2)
  812968:	18bff61e 	bne	r3,r2,812944 <__alt_mem_onchip_mem+0xff792944>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  81296c:	0005883a 	mov	r2,zero
}
  812970:	e037883a 	mov	sp,fp
  812974:	df000017 	ldw	fp,0(sp)
  812978:	dec00104 	addi	sp,sp,4
  81297c:	f800283a 	ret

00812980 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812980:	defffe04 	addi	sp,sp,-8
  812984:	dfc00115 	stw	ra,4(sp)
  812988:	df000015 	stw	fp,0(sp)
  81298c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812990:	d0a01517 	ldw	r2,-32684(gp)
  812994:	10000326 	beq	r2,zero,8129a4 <alt_get_errno+0x24>
  812998:	d0a01517 	ldw	r2,-32684(gp)
  81299c:	103ee83a 	callr	r2
  8129a0:	00000106 	br	8129a8 <alt_get_errno+0x28>
  8129a4:	d0a76b04 	addi	r2,gp,-25172
}
  8129a8:	e037883a 	mov	sp,fp
  8129ac:	dfc00117 	ldw	ra,4(sp)
  8129b0:	df000017 	ldw	fp,0(sp)
  8129b4:	dec00204 	addi	sp,sp,8
  8129b8:	f800283a 	ret

008129bc <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  8129bc:	defff204 	addi	sp,sp,-56
  8129c0:	dfc00d15 	stw	ra,52(sp)
  8129c4:	df000c15 	stw	fp,48(sp)
  8129c8:	df000c04 	addi	fp,sp,48
  8129cc:	e13ffc15 	stw	r4,-16(fp)
  8129d0:	e17ffd15 	stw	r5,-12(fp)
  8129d4:	e1bffe15 	stw	r6,-8(fp)
  8129d8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  8129dc:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  8129e0:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  8129e4:	e0bfff17 	ldw	r2,-4(fp)
  8129e8:	1090000c 	andi	r2,r2,16384
  8129ec:	1005003a 	cmpeq	r2,r2,zero
  8129f0:	10803fcc 	andi	r2,r2,255
  8129f4:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8129f8:	00001306 	br	812a48 <altera_avalon_uart_read+0x8c>
    {
      count++;
  8129fc:	e0bff517 	ldw	r2,-44(fp)
  812a00:	10800044 	addi	r2,r2,1
  812a04:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  812a08:	e0bffd17 	ldw	r2,-12(fp)
  812a0c:	10c00044 	addi	r3,r2,1
  812a10:	e0fffd15 	stw	r3,-12(fp)
  812a14:	e0fffc17 	ldw	r3,-16(fp)
  812a18:	18c00217 	ldw	r3,8(r3)
  812a1c:	e13ffc17 	ldw	r4,-16(fp)
  812a20:	20c7883a 	add	r3,r4,r3
  812a24:	18c00704 	addi	r3,r3,28
  812a28:	18c00003 	ldbu	r3,0(r3)
  812a2c:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  812a30:	e0bffc17 	ldw	r2,-16(fp)
  812a34:	10800217 	ldw	r2,8(r2)
  812a38:	10800044 	addi	r2,r2,1
  812a3c:	10c00fcc 	andi	r3,r2,63
  812a40:	e0bffc17 	ldw	r2,-16(fp)
  812a44:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  812a48:	e0fff517 	ldw	r3,-44(fp)
  812a4c:	e0bffe17 	ldw	r2,-8(fp)
  812a50:	1880050e 	bge	r3,r2,812a68 <altera_avalon_uart_read+0xac>
  812a54:	e0bffc17 	ldw	r2,-16(fp)
  812a58:	10c00217 	ldw	r3,8(r2)
  812a5c:	e0bffc17 	ldw	r2,-16(fp)
  812a60:	10800317 	ldw	r2,12(r2)
  812a64:	18bfe51e 	bne	r3,r2,8129fc <__alt_mem_onchip_mem+0xff7929fc>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  812a68:	e0bff517 	ldw	r2,-44(fp)
  812a6c:	1000251e 	bne	r2,zero,812b04 <altera_avalon_uart_read+0x148>
  812a70:	e0bffc17 	ldw	r2,-16(fp)
  812a74:	10c00217 	ldw	r3,8(r2)
  812a78:	e0bffc17 	ldw	r2,-16(fp)
  812a7c:	10800317 	ldw	r2,12(r2)
  812a80:	1880201e 	bne	r3,r2,812b04 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  812a84:	e0bff617 	ldw	r2,-40(fp)
  812a88:	1000071e 	bne	r2,zero,812aa8 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  812a8c:	08129800 	call	812980 <alt_get_errno>
  812a90:	1007883a 	mov	r3,r2
  812a94:	008002c4 	movi	r2,11
  812a98:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  812a9c:	00800044 	movi	r2,1
  812aa0:	e0bff405 	stb	r2,-48(fp)
        break;
  812aa4:	00001b06 	br	812b14 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812aa8:	0005303a 	rdctl	r2,status
  812aac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812ab0:	e0fff917 	ldw	r3,-28(fp)
  812ab4:	00bfff84 	movi	r2,-2
  812ab8:	1884703a 	and	r2,r3,r2
  812abc:	1001703a 	wrctl	status,r2
  
  return context;
  812ac0:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  812ac4:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  812ac8:	e0bffc17 	ldw	r2,-16(fp)
  812acc:	10800117 	ldw	r2,4(r2)
  812ad0:	10c02014 	ori	r3,r2,128
  812ad4:	e0bffc17 	ldw	r2,-16(fp)
  812ad8:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812adc:	e0bffc17 	ldw	r2,-16(fp)
  812ae0:	10800017 	ldw	r2,0(r2)
  812ae4:	10800304 	addi	r2,r2,12
  812ae8:	e0fffc17 	ldw	r3,-16(fp)
  812aec:	18c00117 	ldw	r3,4(r3)
  812af0:	10c00035 	stwio	r3,0(r2)
  812af4:	e0bff817 	ldw	r2,-32(fp)
  812af8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812afc:	e0bffa17 	ldw	r2,-24(fp)
  812b00:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  812b04:	e0bff517 	ldw	r2,-44(fp)
  812b08:	1000021e 	bne	r2,zero,812b14 <altera_avalon_uart_read+0x158>
  812b0c:	e0bffe17 	ldw	r2,-8(fp)
  812b10:	103fcd1e 	bne	r2,zero,812a48 <__alt_mem_onchip_mem+0xff792a48>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812b14:	0005303a 	rdctl	r2,status
  812b18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812b1c:	e0fffb17 	ldw	r3,-20(fp)
  812b20:	00bfff84 	movi	r2,-2
  812b24:	1884703a 	and	r2,r3,r2
  812b28:	1001703a 	wrctl	status,r2
  
  return context;
  812b2c:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  812b30:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  812b34:	e0bffc17 	ldw	r2,-16(fp)
  812b38:	10800117 	ldw	r2,4(r2)
  812b3c:	10c02014 	ori	r3,r2,128
  812b40:	e0bffc17 	ldw	r2,-16(fp)
  812b44:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812b48:	e0bffc17 	ldw	r2,-16(fp)
  812b4c:	10800017 	ldw	r2,0(r2)
  812b50:	10800304 	addi	r2,r2,12
  812b54:	e0fffc17 	ldw	r3,-16(fp)
  812b58:	18c00117 	ldw	r3,4(r3)
  812b5c:	10c00035 	stwio	r3,0(r2)
  812b60:	e0bff817 	ldw	r2,-32(fp)
  812b64:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812b68:	e0bff717 	ldw	r2,-36(fp)
  812b6c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  812b70:	e0bff403 	ldbu	r2,-48(fp)
  812b74:	10000226 	beq	r2,zero,812b80 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  812b78:	00bffd44 	movi	r2,-11
  812b7c:	00000106 	br	812b84 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  812b80:	e0bff517 	ldw	r2,-44(fp)
  }
}
  812b84:	e037883a 	mov	sp,fp
  812b88:	dfc00117 	ldw	ra,4(sp)
  812b8c:	df000017 	ldw	fp,0(sp)
  812b90:	dec00204 	addi	sp,sp,8
  812b94:	f800283a 	ret

00812b98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812b98:	defffe04 	addi	sp,sp,-8
  812b9c:	dfc00115 	stw	ra,4(sp)
  812ba0:	df000015 	stw	fp,0(sp)
  812ba4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812ba8:	d0a01517 	ldw	r2,-32684(gp)
  812bac:	10000326 	beq	r2,zero,812bbc <alt_get_errno+0x24>
  812bb0:	d0a01517 	ldw	r2,-32684(gp)
  812bb4:	103ee83a 	callr	r2
  812bb8:	00000106 	br	812bc0 <alt_get_errno+0x28>
  812bbc:	d0a76b04 	addi	r2,gp,-25172
}
  812bc0:	e037883a 	mov	sp,fp
  812bc4:	dfc00117 	ldw	ra,4(sp)
  812bc8:	df000017 	ldw	fp,0(sp)
  812bcc:	dec00204 	addi	sp,sp,8
  812bd0:	f800283a 	ret

00812bd4 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  812bd4:	defff204 	addi	sp,sp,-56
  812bd8:	dfc00d15 	stw	ra,52(sp)
  812bdc:	df000c15 	stw	fp,48(sp)
  812be0:	df000c04 	addi	fp,sp,48
  812be4:	e13ffc15 	stw	r4,-16(fp)
  812be8:	e17ffd15 	stw	r5,-12(fp)
  812bec:	e1bffe15 	stw	r6,-8(fp)
  812bf0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  812bf4:	e0bffe17 	ldw	r2,-8(fp)
  812bf8:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  812bfc:	e0bfff17 	ldw	r2,-4(fp)
  812c00:	1090000c 	andi	r2,r2,16384
  812c04:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  812c08:	00003c06 	br	812cfc <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  812c0c:	e0bffc17 	ldw	r2,-16(fp)
  812c10:	10800517 	ldw	r2,20(r2)
  812c14:	10800044 	addi	r2,r2,1
  812c18:	10800fcc 	andi	r2,r2,63
  812c1c:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  812c20:	e0bffc17 	ldw	r2,-16(fp)
  812c24:	10c00417 	ldw	r3,16(r2)
  812c28:	e0bff717 	ldw	r2,-36(fp)
  812c2c:	1880221e 	bne	r3,r2,812cb8 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  812c30:	e0bff517 	ldw	r2,-44(fp)
  812c34:	10000526 	beq	r2,zero,812c4c <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  812c38:	0812b980 	call	812b98 <alt_get_errno>
  812c3c:	1007883a 	mov	r3,r2
  812c40:	008002c4 	movi	r2,11
  812c44:	18800015 	stw	r2,0(r3)
        break;
  812c48:	00002e06 	br	812d04 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812c4c:	0005303a 	rdctl	r2,status
  812c50:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812c54:	e0fff917 	ldw	r3,-28(fp)
  812c58:	00bfff84 	movi	r2,-2
  812c5c:	1884703a 	and	r2,r3,r2
  812c60:	1001703a 	wrctl	status,r2
  
  return context;
  812c64:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  812c68:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  812c6c:	e0bffc17 	ldw	r2,-16(fp)
  812c70:	10800117 	ldw	r2,4(r2)
  812c74:	10c11014 	ori	r3,r2,1088
  812c78:	e0bffc17 	ldw	r2,-16(fp)
  812c7c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812c80:	e0bffc17 	ldw	r2,-16(fp)
  812c84:	10800017 	ldw	r2,0(r2)
  812c88:	10800304 	addi	r2,r2,12
  812c8c:	e0fffc17 	ldw	r3,-16(fp)
  812c90:	18c00117 	ldw	r3,4(r3)
  812c94:	10c00035 	stwio	r3,0(r2)
  812c98:	e0bff817 	ldw	r2,-32(fp)
  812c9c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812ca0:	e0bff617 	ldw	r2,-40(fp)
  812ca4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  812ca8:	e0bffc17 	ldw	r2,-16(fp)
  812cac:	10c00417 	ldw	r3,16(r2)
  812cb0:	e0bff717 	ldw	r2,-36(fp)
  812cb4:	18bffc26 	beq	r3,r2,812ca8 <__alt_mem_onchip_mem+0xff792ca8>
      }
    }

    count--;
  812cb8:	e0bff417 	ldw	r2,-48(fp)
  812cbc:	10bfffc4 	addi	r2,r2,-1
  812cc0:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  812cc4:	e0bffc17 	ldw	r2,-16(fp)
  812cc8:	10c00517 	ldw	r3,20(r2)
  812ccc:	e0bffd17 	ldw	r2,-12(fp)
  812cd0:	11000044 	addi	r4,r2,1
  812cd4:	e13ffd15 	stw	r4,-12(fp)
  812cd8:	10800003 	ldbu	r2,0(r2)
  812cdc:	1009883a 	mov	r4,r2
  812ce0:	e0bffc17 	ldw	r2,-16(fp)
  812ce4:	10c5883a 	add	r2,r2,r3
  812ce8:	10801704 	addi	r2,r2,92
  812cec:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  812cf0:	e0bffc17 	ldw	r2,-16(fp)
  812cf4:	e0fff717 	ldw	r3,-36(fp)
  812cf8:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  812cfc:	e0bff417 	ldw	r2,-48(fp)
  812d00:	103fc21e 	bne	r2,zero,812c0c <__alt_mem_onchip_mem+0xff792c0c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812d04:	0005303a 	rdctl	r2,status
  812d08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812d0c:	e0fffb17 	ldw	r3,-20(fp)
  812d10:	00bfff84 	movi	r2,-2
  812d14:	1884703a 	and	r2,r3,r2
  812d18:	1001703a 	wrctl	status,r2
  
  return context;
  812d1c:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  812d20:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  812d24:	e0bffc17 	ldw	r2,-16(fp)
  812d28:	10800117 	ldw	r2,4(r2)
  812d2c:	10c11014 	ori	r3,r2,1088
  812d30:	e0bffc17 	ldw	r2,-16(fp)
  812d34:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812d38:	e0bffc17 	ldw	r2,-16(fp)
  812d3c:	10800017 	ldw	r2,0(r2)
  812d40:	10800304 	addi	r2,r2,12
  812d44:	e0fffc17 	ldw	r3,-16(fp)
  812d48:	18c00117 	ldw	r3,4(r3)
  812d4c:	10c00035 	stwio	r3,0(r2)
  812d50:	e0bff817 	ldw	r2,-32(fp)
  812d54:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812d58:	e0bffa17 	ldw	r2,-24(fp)
  812d5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  812d60:	e0fffe17 	ldw	r3,-8(fp)
  812d64:	e0bff417 	ldw	r2,-48(fp)
  812d68:	1885c83a 	sub	r2,r3,r2
}
  812d6c:	e037883a 	mov	sp,fp
  812d70:	dfc00117 	ldw	ra,4(sp)
  812d74:	df000017 	ldw	fp,0(sp)
  812d78:	dec00204 	addi	sp,sp,8
  812d7c:	f800283a 	ret

00812d80 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  812d80:	defffe04 	addi	sp,sp,-8
  812d84:	df000115 	stw	fp,4(sp)
  812d88:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  812d8c:	e03fff15 	stw	zero,-4(fp)
  812d90:	00000506 	br	812da8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  812d94:	e0bfff17 	ldw	r2,-4(fp)
  812d98:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  812d9c:	e0bfff17 	ldw	r2,-4(fp)
  812da0:	10800804 	addi	r2,r2,32
  812da4:	e0bfff15 	stw	r2,-4(fp)
  812da8:	e0bfff17 	ldw	r2,-4(fp)
  812dac:	10820030 	cmpltui	r2,r2,2048
  812db0:	103ff81e 	bne	r2,zero,812d94 <__alt_mem_onchip_mem+0xff792d94>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  812db4:	0001883a 	nop
  812db8:	e037883a 	mov	sp,fp
  812dbc:	df000017 	ldw	fp,0(sp)
  812dc0:	dec00104 	addi	sp,sp,4
  812dc4:	f800283a 	ret

00812dc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812dc8:	defffe04 	addi	sp,sp,-8
  812dcc:	dfc00115 	stw	ra,4(sp)
  812dd0:	df000015 	stw	fp,0(sp)
  812dd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812dd8:	d0a01517 	ldw	r2,-32684(gp)
  812ddc:	10000326 	beq	r2,zero,812dec <alt_get_errno+0x24>
  812de0:	d0a01517 	ldw	r2,-32684(gp)
  812de4:	103ee83a 	callr	r2
  812de8:	00000106 	br	812df0 <alt_get_errno+0x28>
  812dec:	d0a76b04 	addi	r2,gp,-25172
}
  812df0:	e037883a 	mov	sp,fp
  812df4:	dfc00117 	ldw	ra,4(sp)
  812df8:	df000017 	ldw	fp,0(sp)
  812dfc:	dec00204 	addi	sp,sp,8
  812e00:	f800283a 	ret

00812e04 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  812e04:	defffa04 	addi	sp,sp,-24
  812e08:	dfc00515 	stw	ra,20(sp)
  812e0c:	df000415 	stw	fp,16(sp)
  812e10:	df000404 	addi	fp,sp,16
  812e14:	e13ffe15 	stw	r4,-8(fp)
  812e18:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  812e1c:	e0bffe17 	ldw	r2,-8(fp)
  812e20:	10000326 	beq	r2,zero,812e30 <alt_dev_llist_insert+0x2c>
  812e24:	e0bffe17 	ldw	r2,-8(fp)
  812e28:	10800217 	ldw	r2,8(r2)
  812e2c:	1000061e 	bne	r2,zero,812e48 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  812e30:	0812dc80 	call	812dc8 <alt_get_errno>
  812e34:	1007883a 	mov	r3,r2
  812e38:	00800584 	movi	r2,22
  812e3c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  812e40:	00bffa84 	movi	r2,-22
  812e44:	00001306 	br	812e94 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  812e48:	e0bffe17 	ldw	r2,-8(fp)
  812e4c:	e0ffff17 	ldw	r3,-4(fp)
  812e50:	e0fffc15 	stw	r3,-16(fp)
  812e54:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  812e58:	e0bffd17 	ldw	r2,-12(fp)
  812e5c:	e0fffc17 	ldw	r3,-16(fp)
  812e60:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  812e64:	e0bffc17 	ldw	r2,-16(fp)
  812e68:	10c00017 	ldw	r3,0(r2)
  812e6c:	e0bffd17 	ldw	r2,-12(fp)
  812e70:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  812e74:	e0bffc17 	ldw	r2,-16(fp)
  812e78:	10800017 	ldw	r2,0(r2)
  812e7c:	e0fffd17 	ldw	r3,-12(fp)
  812e80:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  812e84:	e0bffc17 	ldw	r2,-16(fp)
  812e88:	e0fffd17 	ldw	r3,-12(fp)
  812e8c:	10c00015 	stw	r3,0(r2)

  return 0;  
  812e90:	0005883a 	mov	r2,zero
}
  812e94:	e037883a 	mov	sp,fp
  812e98:	dfc00117 	ldw	ra,4(sp)
  812e9c:	df000017 	ldw	fp,0(sp)
  812ea0:	dec00204 	addi	sp,sp,8
  812ea4:	f800283a 	ret

00812ea8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  812ea8:	defffd04 	addi	sp,sp,-12
  812eac:	dfc00215 	stw	ra,8(sp)
  812eb0:	df000115 	stw	fp,4(sp)
  812eb4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812eb8:	00802074 	movhi	r2,129
  812ebc:	108f0804 	addi	r2,r2,15392
  812ec0:	e0bfff15 	stw	r2,-4(fp)
  812ec4:	00000606 	br	812ee0 <_do_ctors+0x38>
        (*ctor) (); 
  812ec8:	e0bfff17 	ldw	r2,-4(fp)
  812ecc:	10800017 	ldw	r2,0(r2)
  812ed0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812ed4:	e0bfff17 	ldw	r2,-4(fp)
  812ed8:	10bfff04 	addi	r2,r2,-4
  812edc:	e0bfff15 	stw	r2,-4(fp)
  812ee0:	e0ffff17 	ldw	r3,-4(fp)
  812ee4:	00802074 	movhi	r2,129
  812ee8:	108f0904 	addi	r2,r2,15396
  812eec:	18bff62e 	bgeu	r3,r2,812ec8 <__alt_mem_onchip_mem+0xff792ec8>
        (*ctor) (); 
}
  812ef0:	0001883a 	nop
  812ef4:	e037883a 	mov	sp,fp
  812ef8:	dfc00117 	ldw	ra,4(sp)
  812efc:	df000017 	ldw	fp,0(sp)
  812f00:	dec00204 	addi	sp,sp,8
  812f04:	f800283a 	ret

00812f08 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  812f08:	defffd04 	addi	sp,sp,-12
  812f0c:	dfc00215 	stw	ra,8(sp)
  812f10:	df000115 	stw	fp,4(sp)
  812f14:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  812f18:	00802074 	movhi	r2,129
  812f1c:	108f0804 	addi	r2,r2,15392
  812f20:	e0bfff15 	stw	r2,-4(fp)
  812f24:	00000606 	br	812f40 <_do_dtors+0x38>
        (*dtor) (); 
  812f28:	e0bfff17 	ldw	r2,-4(fp)
  812f2c:	10800017 	ldw	r2,0(r2)
  812f30:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  812f34:	e0bfff17 	ldw	r2,-4(fp)
  812f38:	10bfff04 	addi	r2,r2,-4
  812f3c:	e0bfff15 	stw	r2,-4(fp)
  812f40:	e0ffff17 	ldw	r3,-4(fp)
  812f44:	00802074 	movhi	r2,129
  812f48:	108f0904 	addi	r2,r2,15396
  812f4c:	18bff62e 	bgeu	r3,r2,812f28 <__alt_mem_onchip_mem+0xff792f28>
        (*dtor) (); 
}
  812f50:	0001883a 	nop
  812f54:	e037883a 	mov	sp,fp
  812f58:	dfc00117 	ldw	ra,4(sp)
  812f5c:	df000017 	ldw	fp,0(sp)
  812f60:	dec00204 	addi	sp,sp,8
  812f64:	f800283a 	ret

00812f68 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  812f68:	defffa04 	addi	sp,sp,-24
  812f6c:	dfc00515 	stw	ra,20(sp)
  812f70:	df000415 	stw	fp,16(sp)
  812f74:	df000404 	addi	fp,sp,16
  812f78:	e13ffe15 	stw	r4,-8(fp)
  812f7c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  812f80:	e0bfff17 	ldw	r2,-4(fp)
  812f84:	10800017 	ldw	r2,0(r2)
  812f88:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  812f8c:	e13ffe17 	ldw	r4,-8(fp)
  812f90:	0803e800 	call	803e80 <strlen>
  812f94:	10800044 	addi	r2,r2,1
  812f98:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812f9c:	00000d06 	br	812fd4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  812fa0:	e0bffc17 	ldw	r2,-16(fp)
  812fa4:	10800217 	ldw	r2,8(r2)
  812fa8:	e0fffd17 	ldw	r3,-12(fp)
  812fac:	180d883a 	mov	r6,r3
  812fb0:	e17ffe17 	ldw	r5,-8(fp)
  812fb4:	1009883a 	mov	r4,r2
  812fb8:	08138dc0 	call	8138dc <memcmp>
  812fbc:	1000021e 	bne	r2,zero,812fc8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  812fc0:	e0bffc17 	ldw	r2,-16(fp)
  812fc4:	00000706 	br	812fe4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  812fc8:	e0bffc17 	ldw	r2,-16(fp)
  812fcc:	10800017 	ldw	r2,0(r2)
  812fd0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812fd4:	e0fffc17 	ldw	r3,-16(fp)
  812fd8:	e0bfff17 	ldw	r2,-4(fp)
  812fdc:	18bff01e 	bne	r3,r2,812fa0 <__alt_mem_onchip_mem+0xff792fa0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  812fe0:	0005883a 	mov	r2,zero
}
  812fe4:	e037883a 	mov	sp,fp
  812fe8:	dfc00117 	ldw	ra,4(sp)
  812fec:	df000017 	ldw	fp,0(sp)
  812ff0:	dec00204 	addi	sp,sp,8
  812ff4:	f800283a 	ret

00812ff8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  812ff8:	defffb04 	addi	sp,sp,-20
  812ffc:	dfc00415 	stw	ra,16(sp)
  813000:	df000315 	stw	fp,12(sp)
  813004:	df000304 	addi	fp,sp,12
  813008:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81300c:	d0a01017 	ldw	r2,-32704(gp)
  813010:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813014:	00003106 	br	8130dc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  813018:	e0bffd17 	ldw	r2,-12(fp)
  81301c:	10800217 	ldw	r2,8(r2)
  813020:	1009883a 	mov	r4,r2
  813024:	0803e800 	call	803e80 <strlen>
  813028:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  81302c:	e0bffd17 	ldw	r2,-12(fp)
  813030:	10c00217 	ldw	r3,8(r2)
  813034:	e0bffe17 	ldw	r2,-8(fp)
  813038:	10bfffc4 	addi	r2,r2,-1
  81303c:	1885883a 	add	r2,r3,r2
  813040:	10800003 	ldbu	r2,0(r2)
  813044:	10803fcc 	andi	r2,r2,255
  813048:	1080201c 	xori	r2,r2,128
  81304c:	10bfe004 	addi	r2,r2,-128
  813050:	10800bd8 	cmpnei	r2,r2,47
  813054:	1000031e 	bne	r2,zero,813064 <alt_find_file+0x6c>
    {
      len -= 1;
  813058:	e0bffe17 	ldw	r2,-8(fp)
  81305c:	10bfffc4 	addi	r2,r2,-1
  813060:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813064:	e0bffe17 	ldw	r2,-8(fp)
  813068:	e0ffff17 	ldw	r3,-4(fp)
  81306c:	1885883a 	add	r2,r3,r2
  813070:	10800003 	ldbu	r2,0(r2)
  813074:	10803fcc 	andi	r2,r2,255
  813078:	1080201c 	xori	r2,r2,128
  81307c:	10bfe004 	addi	r2,r2,-128
  813080:	10800be0 	cmpeqi	r2,r2,47
  813084:	1000081e 	bne	r2,zero,8130a8 <alt_find_file+0xb0>
  813088:	e0bffe17 	ldw	r2,-8(fp)
  81308c:	e0ffff17 	ldw	r3,-4(fp)
  813090:	1885883a 	add	r2,r3,r2
  813094:	10800003 	ldbu	r2,0(r2)
  813098:	10803fcc 	andi	r2,r2,255
  81309c:	1080201c 	xori	r2,r2,128
  8130a0:	10bfe004 	addi	r2,r2,-128
  8130a4:	10000a1e 	bne	r2,zero,8130d0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  8130a8:	e0bffd17 	ldw	r2,-12(fp)
  8130ac:	10800217 	ldw	r2,8(r2)
  8130b0:	e0fffe17 	ldw	r3,-8(fp)
  8130b4:	180d883a 	mov	r6,r3
  8130b8:	e17fff17 	ldw	r5,-4(fp)
  8130bc:	1009883a 	mov	r4,r2
  8130c0:	08138dc0 	call	8138dc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8130c4:	1000021e 	bne	r2,zero,8130d0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8130c8:	e0bffd17 	ldw	r2,-12(fp)
  8130cc:	00000706 	br	8130ec <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  8130d0:	e0bffd17 	ldw	r2,-12(fp)
  8130d4:	10800017 	ldw	r2,0(r2)
  8130d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8130dc:	e0fffd17 	ldw	r3,-12(fp)
  8130e0:	d0a01004 	addi	r2,gp,-32704
  8130e4:	18bfcc1e 	bne	r3,r2,813018 <__alt_mem_onchip_mem+0xff793018>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8130e8:	0005883a 	mov	r2,zero
}
  8130ec:	e037883a 	mov	sp,fp
  8130f0:	dfc00117 	ldw	ra,4(sp)
  8130f4:	df000017 	ldw	fp,0(sp)
  8130f8:	dec00204 	addi	sp,sp,8
  8130fc:	f800283a 	ret

00813100 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  813100:	defffc04 	addi	sp,sp,-16
  813104:	df000315 	stw	fp,12(sp)
  813108:	df000304 	addi	fp,sp,12
  81310c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  813110:	00bffa04 	movi	r2,-24
  813114:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813118:	e03ffd15 	stw	zero,-12(fp)
  81311c:	00001906 	br	813184 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  813120:	00802074 	movhi	r2,129
  813124:	1092f704 	addi	r2,r2,19420
  813128:	e0fffd17 	ldw	r3,-12(fp)
  81312c:	18c00324 	muli	r3,r3,12
  813130:	10c5883a 	add	r2,r2,r3
  813134:	10800017 	ldw	r2,0(r2)
  813138:	10000f1e 	bne	r2,zero,813178 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  81313c:	00802074 	movhi	r2,129
  813140:	1092f704 	addi	r2,r2,19420
  813144:	e0fffd17 	ldw	r3,-12(fp)
  813148:	18c00324 	muli	r3,r3,12
  81314c:	10c5883a 	add	r2,r2,r3
  813150:	e0ffff17 	ldw	r3,-4(fp)
  813154:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  813158:	d0e01417 	ldw	r3,-32688(gp)
  81315c:	e0bffd17 	ldw	r2,-12(fp)
  813160:	1880020e 	bge	r3,r2,81316c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  813164:	e0bffd17 	ldw	r2,-12(fp)
  813168:	d0a01415 	stw	r2,-32688(gp)
      }
      rc = i;
  81316c:	e0bffd17 	ldw	r2,-12(fp)
  813170:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  813174:	00000606 	br	813190 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813178:	e0bffd17 	ldw	r2,-12(fp)
  81317c:	10800044 	addi	r2,r2,1
  813180:	e0bffd15 	stw	r2,-12(fp)
  813184:	e0bffd17 	ldw	r2,-12(fp)
  813188:	10800810 	cmplti	r2,r2,32
  81318c:	103fe41e 	bne	r2,zero,813120 <__alt_mem_onchip_mem+0xff793120>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  813190:	e0bffe17 	ldw	r2,-8(fp)
}
  813194:	e037883a 	mov	sp,fp
  813198:	df000017 	ldw	fp,0(sp)
  81319c:	dec00104 	addi	sp,sp,4
  8131a0:	f800283a 	ret

008131a4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8131a4:	defffe04 	addi	sp,sp,-8
  8131a8:	dfc00115 	stw	ra,4(sp)
  8131ac:	df000015 	stw	fp,0(sp)
  8131b0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8131b4:	01440004 	movi	r5,4096
  8131b8:	0009883a 	mov	r4,zero
  8131bc:	08137640 	call	813764 <alt_icache_flush>
#endif
}
  8131c0:	0001883a 	nop
  8131c4:	e037883a 	mov	sp,fp
  8131c8:	dfc00117 	ldw	ra,4(sp)
  8131cc:	df000017 	ldw	fp,0(sp)
  8131d0:	dec00204 	addi	sp,sp,8
  8131d4:	f800283a 	ret

008131d8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8131d8:	defff904 	addi	sp,sp,-28
  8131dc:	dfc00615 	stw	ra,24(sp)
  8131e0:	df000515 	stw	fp,20(sp)
  8131e4:	df000504 	addi	fp,sp,20
  8131e8:	e13ffc15 	stw	r4,-16(fp)
  8131ec:	e17ffd15 	stw	r5,-12(fp)
  8131f0:	e1bffe15 	stw	r6,-8(fp)
  8131f4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  8131f8:	e0800217 	ldw	r2,8(fp)
  8131fc:	d8800015 	stw	r2,0(sp)
  813200:	e1ffff17 	ldw	r7,-4(fp)
  813204:	e1bffe17 	ldw	r6,-8(fp)
  813208:	e17ffd17 	ldw	r5,-12(fp)
  81320c:	e13ffc17 	ldw	r4,-16(fp)
  813210:	08133880 	call	813388 <alt_iic_isr_register>
}  
  813214:	e037883a 	mov	sp,fp
  813218:	dfc00117 	ldw	ra,4(sp)
  81321c:	df000017 	ldw	fp,0(sp)
  813220:	dec00204 	addi	sp,sp,8
  813224:	f800283a 	ret

00813228 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  813228:	defff904 	addi	sp,sp,-28
  81322c:	df000615 	stw	fp,24(sp)
  813230:	df000604 	addi	fp,sp,24
  813234:	e13ffe15 	stw	r4,-8(fp)
  813238:	e17fff15 	stw	r5,-4(fp)
  81323c:	e0bfff17 	ldw	r2,-4(fp)
  813240:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813244:	0005303a 	rdctl	r2,status
  813248:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81324c:	e0fffb17 	ldw	r3,-20(fp)
  813250:	00bfff84 	movi	r2,-2
  813254:	1884703a 	and	r2,r3,r2
  813258:	1001703a 	wrctl	status,r2
  
  return context;
  81325c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  813260:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  813264:	00c00044 	movi	r3,1
  813268:	e0bffa17 	ldw	r2,-24(fp)
  81326c:	1884983a 	sll	r2,r3,r2
  813270:	1007883a 	mov	r3,r2
  813274:	d0a77217 	ldw	r2,-25144(gp)
  813278:	1884b03a 	or	r2,r3,r2
  81327c:	d0a77215 	stw	r2,-25144(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  813280:	d0a77217 	ldw	r2,-25144(gp)
  813284:	100170fa 	wrctl	ienable,r2
  813288:	e0bffc17 	ldw	r2,-16(fp)
  81328c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813290:	e0bffd17 	ldw	r2,-12(fp)
  813294:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  813298:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  81329c:	0001883a 	nop
}
  8132a0:	e037883a 	mov	sp,fp
  8132a4:	df000017 	ldw	fp,0(sp)
  8132a8:	dec00104 	addi	sp,sp,4
  8132ac:	f800283a 	ret

008132b0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  8132b0:	defff904 	addi	sp,sp,-28
  8132b4:	df000615 	stw	fp,24(sp)
  8132b8:	df000604 	addi	fp,sp,24
  8132bc:	e13ffe15 	stw	r4,-8(fp)
  8132c0:	e17fff15 	stw	r5,-4(fp)
  8132c4:	e0bfff17 	ldw	r2,-4(fp)
  8132c8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8132cc:	0005303a 	rdctl	r2,status
  8132d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8132d4:	e0fffb17 	ldw	r3,-20(fp)
  8132d8:	00bfff84 	movi	r2,-2
  8132dc:	1884703a 	and	r2,r3,r2
  8132e0:	1001703a 	wrctl	status,r2
  
  return context;
  8132e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8132e8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  8132ec:	00c00044 	movi	r3,1
  8132f0:	e0bffa17 	ldw	r2,-24(fp)
  8132f4:	1884983a 	sll	r2,r3,r2
  8132f8:	0084303a 	nor	r2,zero,r2
  8132fc:	1007883a 	mov	r3,r2
  813300:	d0a77217 	ldw	r2,-25144(gp)
  813304:	1884703a 	and	r2,r3,r2
  813308:	d0a77215 	stw	r2,-25144(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81330c:	d0a77217 	ldw	r2,-25144(gp)
  813310:	100170fa 	wrctl	ienable,r2
  813314:	e0bffc17 	ldw	r2,-16(fp)
  813318:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81331c:	e0bffd17 	ldw	r2,-12(fp)
  813320:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  813324:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  813328:	0001883a 	nop
}
  81332c:	e037883a 	mov	sp,fp
  813330:	df000017 	ldw	fp,0(sp)
  813334:	dec00104 	addi	sp,sp,4
  813338:	f800283a 	ret

0081333c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  81333c:	defffc04 	addi	sp,sp,-16
  813340:	df000315 	stw	fp,12(sp)
  813344:	df000304 	addi	fp,sp,12
  813348:	e13ffe15 	stw	r4,-8(fp)
  81334c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  813350:	000530fa 	rdctl	r2,ienable
  813354:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  813358:	00c00044 	movi	r3,1
  81335c:	e0bfff17 	ldw	r2,-4(fp)
  813360:	1884983a 	sll	r2,r3,r2
  813364:	1007883a 	mov	r3,r2
  813368:	e0bffd17 	ldw	r2,-12(fp)
  81336c:	1884703a 	and	r2,r3,r2
  813370:	1004c03a 	cmpne	r2,r2,zero
  813374:	10803fcc 	andi	r2,r2,255
}
  813378:	e037883a 	mov	sp,fp
  81337c:	df000017 	ldw	fp,0(sp)
  813380:	dec00104 	addi	sp,sp,4
  813384:	f800283a 	ret

00813388 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  813388:	defff504 	addi	sp,sp,-44
  81338c:	dfc00a15 	stw	ra,40(sp)
  813390:	df000915 	stw	fp,36(sp)
  813394:	df000904 	addi	fp,sp,36
  813398:	e13ffc15 	stw	r4,-16(fp)
  81339c:	e17ffd15 	stw	r5,-12(fp)
  8133a0:	e1bffe15 	stw	r6,-8(fp)
  8133a4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  8133a8:	00bffa84 	movi	r2,-22
  8133ac:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  8133b0:	e0bffd17 	ldw	r2,-12(fp)
  8133b4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8133b8:	e0bff817 	ldw	r2,-32(fp)
  8133bc:	10800808 	cmpgei	r2,r2,32
  8133c0:	1000271e 	bne	r2,zero,813460 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8133c4:	0005303a 	rdctl	r2,status
  8133c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8133cc:	e0fffb17 	ldw	r3,-20(fp)
  8133d0:	00bfff84 	movi	r2,-2
  8133d4:	1884703a 	and	r2,r3,r2
  8133d8:	1001703a 	wrctl	status,r2
  
  return context;
  8133dc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  8133e0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  8133e4:	00802074 	movhi	r2,129
  8133e8:	109f8a04 	addi	r2,r2,32296
  8133ec:	e0fff817 	ldw	r3,-32(fp)
  8133f0:	180690fa 	slli	r3,r3,3
  8133f4:	10c5883a 	add	r2,r2,r3
  8133f8:	e0fffe17 	ldw	r3,-8(fp)
  8133fc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  813400:	00802074 	movhi	r2,129
  813404:	109f8a04 	addi	r2,r2,32296
  813408:	e0fff817 	ldw	r3,-32(fp)
  81340c:	180690fa 	slli	r3,r3,3
  813410:	10c5883a 	add	r2,r2,r3
  813414:	10800104 	addi	r2,r2,4
  813418:	e0ffff17 	ldw	r3,-4(fp)
  81341c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  813420:	e0bffe17 	ldw	r2,-8(fp)
  813424:	10000526 	beq	r2,zero,81343c <alt_iic_isr_register+0xb4>
  813428:	e0bff817 	ldw	r2,-32(fp)
  81342c:	100b883a 	mov	r5,r2
  813430:	e13ffc17 	ldw	r4,-16(fp)
  813434:	08132280 	call	813228 <alt_ic_irq_enable>
  813438:	00000406 	br	81344c <alt_iic_isr_register+0xc4>
  81343c:	e0bff817 	ldw	r2,-32(fp)
  813440:	100b883a 	mov	r5,r2
  813444:	e13ffc17 	ldw	r4,-16(fp)
  813448:	08132b00 	call	8132b0 <alt_ic_irq_disable>
  81344c:	e0bff715 	stw	r2,-36(fp)
  813450:	e0bffa17 	ldw	r2,-24(fp)
  813454:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813458:	e0bff917 	ldw	r2,-28(fp)
  81345c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  813460:	e0bff717 	ldw	r2,-36(fp)
}
  813464:	e037883a 	mov	sp,fp
  813468:	dfc00117 	ldw	ra,4(sp)
  81346c:	df000017 	ldw	fp,0(sp)
  813470:	dec00204 	addi	sp,sp,8
  813474:	f800283a 	ret

00813478 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  813478:	defff904 	addi	sp,sp,-28
  81347c:	dfc00615 	stw	ra,24(sp)
  813480:	df000515 	stw	fp,20(sp)
  813484:	df000504 	addi	fp,sp,20
  813488:	e13ffc15 	stw	r4,-16(fp)
  81348c:	e17ffd15 	stw	r5,-12(fp)
  813490:	e1bffe15 	stw	r6,-8(fp)
  813494:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  813498:	e1bfff17 	ldw	r6,-4(fp)
  81349c:	e17ffe17 	ldw	r5,-8(fp)
  8134a0:	e13ffd17 	ldw	r4,-12(fp)
  8134a4:	08102f00 	call	8102f0 <open>
  8134a8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  8134ac:	e0bffb17 	ldw	r2,-20(fp)
  8134b0:	10001c16 	blt	r2,zero,813524 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  8134b4:	00802074 	movhi	r2,129
  8134b8:	1092f704 	addi	r2,r2,19420
  8134bc:	e0fffb17 	ldw	r3,-20(fp)
  8134c0:	18c00324 	muli	r3,r3,12
  8134c4:	10c5883a 	add	r2,r2,r3
  8134c8:	10c00017 	ldw	r3,0(r2)
  8134cc:	e0bffc17 	ldw	r2,-16(fp)
  8134d0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  8134d4:	00802074 	movhi	r2,129
  8134d8:	1092f704 	addi	r2,r2,19420
  8134dc:	e0fffb17 	ldw	r3,-20(fp)
  8134e0:	18c00324 	muli	r3,r3,12
  8134e4:	10c5883a 	add	r2,r2,r3
  8134e8:	10800104 	addi	r2,r2,4
  8134ec:	10c00017 	ldw	r3,0(r2)
  8134f0:	e0bffc17 	ldw	r2,-16(fp)
  8134f4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8134f8:	00802074 	movhi	r2,129
  8134fc:	1092f704 	addi	r2,r2,19420
  813500:	e0fffb17 	ldw	r3,-20(fp)
  813504:	18c00324 	muli	r3,r3,12
  813508:	10c5883a 	add	r2,r2,r3
  81350c:	10800204 	addi	r2,r2,8
  813510:	10c00017 	ldw	r3,0(r2)
  813514:	e0bffc17 	ldw	r2,-16(fp)
  813518:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81351c:	e13ffb17 	ldw	r4,-20(fp)
  813520:	081057c0 	call	81057c <alt_release_fd>
  }
} 
  813524:	0001883a 	nop
  813528:	e037883a 	mov	sp,fp
  81352c:	dfc00117 	ldw	ra,4(sp)
  813530:	df000017 	ldw	fp,0(sp)
  813534:	dec00204 	addi	sp,sp,8
  813538:	f800283a 	ret

0081353c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81353c:	defffb04 	addi	sp,sp,-20
  813540:	dfc00415 	stw	ra,16(sp)
  813544:	df000315 	stw	fp,12(sp)
  813548:	df000304 	addi	fp,sp,12
  81354c:	e13ffd15 	stw	r4,-12(fp)
  813550:	e17ffe15 	stw	r5,-8(fp)
  813554:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  813558:	01c07fc4 	movi	r7,511
  81355c:	01800044 	movi	r6,1
  813560:	e17ffd17 	ldw	r5,-12(fp)
  813564:	01002074 	movhi	r4,129
  813568:	2112fa04 	addi	r4,r4,19432
  81356c:	08134780 	call	813478 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  813570:	01c07fc4 	movi	r7,511
  813574:	000d883a 	mov	r6,zero
  813578:	e17ffe17 	ldw	r5,-8(fp)
  81357c:	01002074 	movhi	r4,129
  813580:	2112f704 	addi	r4,r4,19420
  813584:	08134780 	call	813478 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  813588:	01c07fc4 	movi	r7,511
  81358c:	01800044 	movi	r6,1
  813590:	e17fff17 	ldw	r5,-4(fp)
  813594:	01002074 	movhi	r4,129
  813598:	2112fd04 	addi	r4,r4,19444
  81359c:	08134780 	call	813478 <alt_open_fd>
}  
  8135a0:	0001883a 	nop
  8135a4:	e037883a 	mov	sp,fp
  8135a8:	dfc00117 	ldw	ra,4(sp)
  8135ac:	df000017 	ldw	fp,0(sp)
  8135b0:	dec00204 	addi	sp,sp,8
  8135b4:	f800283a 	ret

008135b8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  8135b8:	defffd04 	addi	sp,sp,-12
  8135bc:	dfc00215 	stw	ra,8(sp)
  8135c0:	df000115 	stw	fp,4(sp)
  8135c4:	df000104 	addi	fp,sp,4
  8135c8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  8135cc:	e13fff17 	ldw	r4,-4(fp)
  8135d0:	081360c0 	call	81360c <alt_busy_sleep>
}
  8135d4:	e037883a 	mov	sp,fp
  8135d8:	dfc00117 	ldw	ra,4(sp)
  8135dc:	df000017 	ldw	fp,0(sp)
  8135e0:	dec00204 	addi	sp,sp,8
  8135e4:	f800283a 	ret

008135e8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  8135e8:	deffff04 	addi	sp,sp,-4
  8135ec:	df000015 	stw	fp,0(sp)
  8135f0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8135f4:	000170fa 	wrctl	ienable,zero
}
  8135f8:	0001883a 	nop
  8135fc:	e037883a 	mov	sp,fp
  813600:	df000017 	ldw	fp,0(sp)
  813604:	dec00104 	addi	sp,sp,4
  813608:	f800283a 	ret

0081360c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  81360c:	defffa04 	addi	sp,sp,-24
  813610:	dfc00515 	stw	ra,20(sp)
  813614:	df000415 	stw	fp,16(sp)
  813618:	df000404 	addi	fp,sp,16
  81361c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  813620:	008000c4 	movi	r2,3
  813624:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  813628:	e0fffd17 	ldw	r3,-12(fp)
  81362c:	008003f4 	movhi	r2,15
  813630:	10909004 	addi	r2,r2,16960
  813634:	1885383a 	mul	r2,r3,r2
  813638:	100b883a 	mov	r5,r2
  81363c:	0100bef4 	movhi	r4,763
  813640:	213c2004 	addi	r4,r4,-3968
  813644:	080d25c0 	call	80d25c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  813648:	100b883a 	mov	r5,r2
  81364c:	01200034 	movhi	r4,32768
  813650:	213fffc4 	addi	r4,r4,-1
  813654:	080d25c0 	call	80d25c <__udivsi3>
  813658:	100b883a 	mov	r5,r2
  81365c:	e13fff17 	ldw	r4,-4(fp)
  813660:	080d25c0 	call	80d25c <__udivsi3>
  813664:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  813668:	e0bffe17 	ldw	r2,-8(fp)
  81366c:	10002a26 	beq	r2,zero,813718 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  813670:	e03ffc15 	stw	zero,-16(fp)
  813674:	00001706 	br	8136d4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  813678:	00a00034 	movhi	r2,32768
  81367c:	10bfffc4 	addi	r2,r2,-1
  813680:	10bfffc4 	addi	r2,r2,-1
  813684:	103ffe1e 	bne	r2,zero,813680 <__alt_mem_onchip_mem+0xff793680>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  813688:	e0fffd17 	ldw	r3,-12(fp)
  81368c:	008003f4 	movhi	r2,15
  813690:	10909004 	addi	r2,r2,16960
  813694:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  813698:	100b883a 	mov	r5,r2
  81369c:	0100bef4 	movhi	r4,763
  8136a0:	213c2004 	addi	r4,r4,-3968
  8136a4:	080d25c0 	call	80d25c <__udivsi3>
  8136a8:	100b883a 	mov	r5,r2
  8136ac:	01200034 	movhi	r4,32768
  8136b0:	213fffc4 	addi	r4,r4,-1
  8136b4:	080d25c0 	call	80d25c <__udivsi3>
  8136b8:	1007883a 	mov	r3,r2
  8136bc:	e0bfff17 	ldw	r2,-4(fp)
  8136c0:	10c5c83a 	sub	r2,r2,r3
  8136c4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  8136c8:	e0bffc17 	ldw	r2,-16(fp)
  8136cc:	10800044 	addi	r2,r2,1
  8136d0:	e0bffc15 	stw	r2,-16(fp)
  8136d4:	e0fffc17 	ldw	r3,-16(fp)
  8136d8:	e0bffe17 	ldw	r2,-8(fp)
  8136dc:	18bfe616 	blt	r3,r2,813678 <__alt_mem_onchip_mem+0xff793678>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8136e0:	e0fffd17 	ldw	r3,-12(fp)
  8136e4:	008003f4 	movhi	r2,15
  8136e8:	10909004 	addi	r2,r2,16960
  8136ec:	1885383a 	mul	r2,r3,r2
  8136f0:	100b883a 	mov	r5,r2
  8136f4:	0100bef4 	movhi	r4,763
  8136f8:	213c2004 	addi	r4,r4,-3968
  8136fc:	080d25c0 	call	80d25c <__udivsi3>
  813700:	1007883a 	mov	r3,r2
  813704:	e0bfff17 	ldw	r2,-4(fp)
  813708:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81370c:	10bfffc4 	addi	r2,r2,-1
  813710:	103ffe1e 	bne	r2,zero,81370c <__alt_mem_onchip_mem+0xff79370c>
  813714:	00000d06 	br	81374c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  813718:	e0fffd17 	ldw	r3,-12(fp)
  81371c:	008003f4 	movhi	r2,15
  813720:	10909004 	addi	r2,r2,16960
  813724:	1885383a 	mul	r2,r3,r2
  813728:	100b883a 	mov	r5,r2
  81372c:	0100bef4 	movhi	r4,763
  813730:	213c2004 	addi	r4,r4,-3968
  813734:	080d25c0 	call	80d25c <__udivsi3>
  813738:	1007883a 	mov	r3,r2
  81373c:	e0bfff17 	ldw	r2,-4(fp)
  813740:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  813744:	10bfffc4 	addi	r2,r2,-1
  813748:	00bffe16 	blt	zero,r2,813744 <__alt_mem_onchip_mem+0xff793744>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  81374c:	0005883a 	mov	r2,zero
}
  813750:	e037883a 	mov	sp,fp
  813754:	dfc00117 	ldw	ra,4(sp)
  813758:	df000017 	ldw	fp,0(sp)
  81375c:	dec00204 	addi	sp,sp,8
  813760:	f800283a 	ret

00813764 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  813764:	defffb04 	addi	sp,sp,-20
  813768:	df000415 	stw	fp,16(sp)
  81376c:	df000404 	addi	fp,sp,16
  813770:	e13ffe15 	stw	r4,-8(fp)
  813774:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  813778:	e0bfff17 	ldw	r2,-4(fp)
  81377c:	10840070 	cmpltui	r2,r2,4097
  813780:	1000021e 	bne	r2,zero,81378c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  813784:	00840004 	movi	r2,4096
  813788:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  81378c:	e0fffe17 	ldw	r3,-8(fp)
  813790:	e0bfff17 	ldw	r2,-4(fp)
  813794:	1885883a 	add	r2,r3,r2
  813798:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81379c:	e0bffe17 	ldw	r2,-8(fp)
  8137a0:	e0bffc15 	stw	r2,-16(fp)
  8137a4:	00000506 	br	8137bc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8137a8:	e0bffc17 	ldw	r2,-16(fp)
  8137ac:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8137b0:	e0bffc17 	ldw	r2,-16(fp)
  8137b4:	10800804 	addi	r2,r2,32
  8137b8:	e0bffc15 	stw	r2,-16(fp)
  8137bc:	e0fffc17 	ldw	r3,-16(fp)
  8137c0:	e0bffd17 	ldw	r2,-12(fp)
  8137c4:	18bff836 	bltu	r3,r2,8137a8 <__alt_mem_onchip_mem+0xff7937a8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8137c8:	e0bffe17 	ldw	r2,-8(fp)
  8137cc:	108007cc 	andi	r2,r2,31
  8137d0:	10000226 	beq	r2,zero,8137dc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8137d4:	e0bffc17 	ldw	r2,-16(fp)
  8137d8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8137dc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8137e0:	0001883a 	nop
  8137e4:	e037883a 	mov	sp,fp
  8137e8:	df000017 	ldw	fp,0(sp)
  8137ec:	dec00104 	addi	sp,sp,4
  8137f0:	f800283a 	ret

008137f4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  8137f4:	defffe04 	addi	sp,sp,-8
  8137f8:	df000115 	stw	fp,4(sp)
  8137fc:	df000104 	addi	fp,sp,4
  813800:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  813804:	e0bfff17 	ldw	r2,-4(fp)
  813808:	10bffe84 	addi	r2,r2,-6
  81380c:	10c00428 	cmpgeui	r3,r2,16
  813810:	18001a1e 	bne	r3,zero,81387c <alt_exception_cause_generated_bad_addr+0x88>
  813814:	100690ba 	slli	r3,r2,2
  813818:	00802074 	movhi	r2,129
  81381c:	108e0b04 	addi	r2,r2,14380
  813820:	1885883a 	add	r2,r3,r2
  813824:	10800017 	ldw	r2,0(r2)
  813828:	1000683a 	jmp	r2
  81382c:	0081386c 	andhi	r2,zero,1249
  813830:	0081386c 	andhi	r2,zero,1249
  813834:	0081387c 	xorhi	r2,zero,1249
  813838:	0081387c 	xorhi	r2,zero,1249
  81383c:	0081387c 	xorhi	r2,zero,1249
  813840:	0081386c 	andhi	r2,zero,1249
  813844:	00813874 	movhi	r2,1249
  813848:	0081387c 	xorhi	r2,zero,1249
  81384c:	0081386c 	andhi	r2,zero,1249
  813850:	0081386c 	andhi	r2,zero,1249
  813854:	0081387c 	xorhi	r2,zero,1249
  813858:	0081386c 	andhi	r2,zero,1249
  81385c:	00813874 	movhi	r2,1249
  813860:	0081387c 	xorhi	r2,zero,1249
  813864:	0081387c 	xorhi	r2,zero,1249
  813868:	0081386c 	andhi	r2,zero,1249
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  81386c:	00800044 	movi	r2,1
  813870:	00000306 	br	813880 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  813874:	0005883a 	mov	r2,zero
  813878:	00000106 	br	813880 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  81387c:	0005883a 	mov	r2,zero
  }
}
  813880:	e037883a 	mov	sp,fp
  813884:	df000017 	ldw	fp,0(sp)
  813888:	dec00104 	addi	sp,sp,4
  81388c:	f800283a 	ret

00813890 <atexit>:
  813890:	200b883a 	mov	r5,r4
  813894:	000f883a 	mov	r7,zero
  813898:	000d883a 	mov	r6,zero
  81389c:	0009883a 	mov	r4,zero
  8138a0:	08139581 	jmpi	813958 <__register_exitproc>

008138a4 <exit>:
  8138a4:	defffe04 	addi	sp,sp,-8
  8138a8:	000b883a 	mov	r5,zero
  8138ac:	dc000015 	stw	r16,0(sp)
  8138b0:	dfc00115 	stw	ra,4(sp)
  8138b4:	2021883a 	mov	r16,r4
  8138b8:	0813a700 	call	813a70 <__call_exitprocs>
  8138bc:	00802074 	movhi	r2,129
  8138c0:	1097f104 	addi	r2,r2,24516
  8138c4:	11000017 	ldw	r4,0(r2)
  8138c8:	20800f17 	ldw	r2,60(r4)
  8138cc:	10000126 	beq	r2,zero,8138d4 <exit+0x30>
  8138d0:	103ee83a 	callr	r2
  8138d4:	8009883a 	mov	r4,r16
  8138d8:	0813bf00 	call	813bf0 <_exit>

008138dc <memcmp>:
  8138dc:	01c000c4 	movi	r7,3
  8138e0:	3980192e 	bgeu	r7,r6,813948 <memcmp+0x6c>
  8138e4:	2144b03a 	or	r2,r4,r5
  8138e8:	11c4703a 	and	r2,r2,r7
  8138ec:	10000f26 	beq	r2,zero,81392c <memcmp+0x50>
  8138f0:	20800003 	ldbu	r2,0(r4)
  8138f4:	28c00003 	ldbu	r3,0(r5)
  8138f8:	10c0151e 	bne	r2,r3,813950 <memcmp+0x74>
  8138fc:	31bfff84 	addi	r6,r6,-2
  813900:	01ffffc4 	movi	r7,-1
  813904:	00000406 	br	813918 <memcmp+0x3c>
  813908:	20800003 	ldbu	r2,0(r4)
  81390c:	28c00003 	ldbu	r3,0(r5)
  813910:	31bfffc4 	addi	r6,r6,-1
  813914:	10c00e1e 	bne	r2,r3,813950 <memcmp+0x74>
  813918:	21000044 	addi	r4,r4,1
  81391c:	29400044 	addi	r5,r5,1
  813920:	31fff91e 	bne	r6,r7,813908 <__alt_mem_onchip_mem+0xff793908>
  813924:	0005883a 	mov	r2,zero
  813928:	f800283a 	ret
  81392c:	20c00017 	ldw	r3,0(r4)
  813930:	28800017 	ldw	r2,0(r5)
  813934:	18bfee1e 	bne	r3,r2,8138f0 <__alt_mem_onchip_mem+0xff7938f0>
  813938:	31bfff04 	addi	r6,r6,-4
  81393c:	21000104 	addi	r4,r4,4
  813940:	29400104 	addi	r5,r5,4
  813944:	39bff936 	bltu	r7,r6,81392c <__alt_mem_onchip_mem+0xff79392c>
  813948:	303fe91e 	bne	r6,zero,8138f0 <__alt_mem_onchip_mem+0xff7938f0>
  81394c:	003ff506 	br	813924 <__alt_mem_onchip_mem+0xff793924>
  813950:	10c5c83a 	sub	r2,r2,r3
  813954:	f800283a 	ret

00813958 <__register_exitproc>:
  813958:	defffa04 	addi	sp,sp,-24
  81395c:	dc000315 	stw	r16,12(sp)
  813960:	04002074 	movhi	r16,129
  813964:	8417f104 	addi	r16,r16,24516
  813968:	80c00017 	ldw	r3,0(r16)
  81396c:	dc400415 	stw	r17,16(sp)
  813970:	dfc00515 	stw	ra,20(sp)
  813974:	18805217 	ldw	r2,328(r3)
  813978:	2023883a 	mov	r17,r4
  81397c:	10003726 	beq	r2,zero,813a5c <__register_exitproc+0x104>
  813980:	10c00117 	ldw	r3,4(r2)
  813984:	010007c4 	movi	r4,31
  813988:	20c00e16 	blt	r4,r3,8139c4 <__register_exitproc+0x6c>
  81398c:	1a000044 	addi	r8,r3,1
  813990:	8800221e 	bne	r17,zero,813a1c <__register_exitproc+0xc4>
  813994:	18c00084 	addi	r3,r3,2
  813998:	18c7883a 	add	r3,r3,r3
  81399c:	18c7883a 	add	r3,r3,r3
  8139a0:	12000115 	stw	r8,4(r2)
  8139a4:	10c7883a 	add	r3,r2,r3
  8139a8:	19400015 	stw	r5,0(r3)
  8139ac:	0005883a 	mov	r2,zero
  8139b0:	dfc00517 	ldw	ra,20(sp)
  8139b4:	dc400417 	ldw	r17,16(sp)
  8139b8:	dc000317 	ldw	r16,12(sp)
  8139bc:	dec00604 	addi	sp,sp,24
  8139c0:	f800283a 	ret
  8139c4:	00802034 	movhi	r2,128
  8139c8:	108bd704 	addi	r2,r2,12124
  8139cc:	10002626 	beq	r2,zero,813a68 <__register_exitproc+0x110>
  8139d0:	01006404 	movi	r4,400
  8139d4:	d9400015 	stw	r5,0(sp)
  8139d8:	d9800115 	stw	r6,4(sp)
  8139dc:	d9c00215 	stw	r7,8(sp)
  8139e0:	0802f5c0 	call	802f5c <malloc>
  8139e4:	d9400017 	ldw	r5,0(sp)
  8139e8:	d9800117 	ldw	r6,4(sp)
  8139ec:	d9c00217 	ldw	r7,8(sp)
  8139f0:	10001d26 	beq	r2,zero,813a68 <__register_exitproc+0x110>
  8139f4:	81000017 	ldw	r4,0(r16)
  8139f8:	10000115 	stw	zero,4(r2)
  8139fc:	02000044 	movi	r8,1
  813a00:	22405217 	ldw	r9,328(r4)
  813a04:	0007883a 	mov	r3,zero
  813a08:	12400015 	stw	r9,0(r2)
  813a0c:	20805215 	stw	r2,328(r4)
  813a10:	10006215 	stw	zero,392(r2)
  813a14:	10006315 	stw	zero,396(r2)
  813a18:	883fde26 	beq	r17,zero,813994 <__alt_mem_onchip_mem+0xff793994>
  813a1c:	18c9883a 	add	r4,r3,r3
  813a20:	2109883a 	add	r4,r4,r4
  813a24:	1109883a 	add	r4,r2,r4
  813a28:	21802215 	stw	r6,136(r4)
  813a2c:	01800044 	movi	r6,1
  813a30:	12406217 	ldw	r9,392(r2)
  813a34:	30cc983a 	sll	r6,r6,r3
  813a38:	4992b03a 	or	r9,r9,r6
  813a3c:	12406215 	stw	r9,392(r2)
  813a40:	21c04215 	stw	r7,264(r4)
  813a44:	01000084 	movi	r4,2
  813a48:	893fd21e 	bne	r17,r4,813994 <__alt_mem_onchip_mem+0xff793994>
  813a4c:	11006317 	ldw	r4,396(r2)
  813a50:	218cb03a 	or	r6,r4,r6
  813a54:	11806315 	stw	r6,396(r2)
  813a58:	003fce06 	br	813994 <__alt_mem_onchip_mem+0xff793994>
  813a5c:	18805304 	addi	r2,r3,332
  813a60:	18805215 	stw	r2,328(r3)
  813a64:	003fc606 	br	813980 <__alt_mem_onchip_mem+0xff793980>
  813a68:	00bfffc4 	movi	r2,-1
  813a6c:	003fd006 	br	8139b0 <__alt_mem_onchip_mem+0xff7939b0>

00813a70 <__call_exitprocs>:
  813a70:	defff504 	addi	sp,sp,-44
  813a74:	df000915 	stw	fp,36(sp)
  813a78:	dd400615 	stw	r21,24(sp)
  813a7c:	dc800315 	stw	r18,12(sp)
  813a80:	dfc00a15 	stw	ra,40(sp)
  813a84:	ddc00815 	stw	r23,32(sp)
  813a88:	dd800715 	stw	r22,28(sp)
  813a8c:	dd000515 	stw	r20,20(sp)
  813a90:	dcc00415 	stw	r19,16(sp)
  813a94:	dc400215 	stw	r17,8(sp)
  813a98:	dc000115 	stw	r16,4(sp)
  813a9c:	d9000015 	stw	r4,0(sp)
  813aa0:	2839883a 	mov	fp,r5
  813aa4:	04800044 	movi	r18,1
  813aa8:	057fffc4 	movi	r21,-1
  813aac:	00802074 	movhi	r2,129
  813ab0:	1097f104 	addi	r2,r2,24516
  813ab4:	12000017 	ldw	r8,0(r2)
  813ab8:	45005217 	ldw	r20,328(r8)
  813abc:	44c05204 	addi	r19,r8,328
  813ac0:	a0001c26 	beq	r20,zero,813b34 <__call_exitprocs+0xc4>
  813ac4:	a0800117 	ldw	r2,4(r20)
  813ac8:	15ffffc4 	addi	r23,r2,-1
  813acc:	b8000d16 	blt	r23,zero,813b04 <__call_exitprocs+0x94>
  813ad0:	14000044 	addi	r16,r2,1
  813ad4:	8421883a 	add	r16,r16,r16
  813ad8:	8421883a 	add	r16,r16,r16
  813adc:	84402004 	addi	r17,r16,128
  813ae0:	a463883a 	add	r17,r20,r17
  813ae4:	a421883a 	add	r16,r20,r16
  813ae8:	e0001e26 	beq	fp,zero,813b64 <__call_exitprocs+0xf4>
  813aec:	80804017 	ldw	r2,256(r16)
  813af0:	e0801c26 	beq	fp,r2,813b64 <__call_exitprocs+0xf4>
  813af4:	bdffffc4 	addi	r23,r23,-1
  813af8:	843fff04 	addi	r16,r16,-4
  813afc:	8c7fff04 	addi	r17,r17,-4
  813b00:	bd7ff91e 	bne	r23,r21,813ae8 <__alt_mem_onchip_mem+0xff793ae8>
  813b04:	00802034 	movhi	r2,128
  813b08:	108bdc04 	addi	r2,r2,12144
  813b0c:	10000926 	beq	r2,zero,813b34 <__call_exitprocs+0xc4>
  813b10:	a0800117 	ldw	r2,4(r20)
  813b14:	1000301e 	bne	r2,zero,813bd8 <__call_exitprocs+0x168>
  813b18:	a0800017 	ldw	r2,0(r20)
  813b1c:	10003226 	beq	r2,zero,813be8 <__call_exitprocs+0x178>
  813b20:	a009883a 	mov	r4,r20
  813b24:	98800015 	stw	r2,0(r19)
  813b28:	0802f700 	call	802f70 <free>
  813b2c:	9d000017 	ldw	r20,0(r19)
  813b30:	a03fe41e 	bne	r20,zero,813ac4 <__alt_mem_onchip_mem+0xff793ac4>
  813b34:	dfc00a17 	ldw	ra,40(sp)
  813b38:	df000917 	ldw	fp,36(sp)
  813b3c:	ddc00817 	ldw	r23,32(sp)
  813b40:	dd800717 	ldw	r22,28(sp)
  813b44:	dd400617 	ldw	r21,24(sp)
  813b48:	dd000517 	ldw	r20,20(sp)
  813b4c:	dcc00417 	ldw	r19,16(sp)
  813b50:	dc800317 	ldw	r18,12(sp)
  813b54:	dc400217 	ldw	r17,8(sp)
  813b58:	dc000117 	ldw	r16,4(sp)
  813b5c:	dec00b04 	addi	sp,sp,44
  813b60:	f800283a 	ret
  813b64:	a0800117 	ldw	r2,4(r20)
  813b68:	80c00017 	ldw	r3,0(r16)
  813b6c:	10bfffc4 	addi	r2,r2,-1
  813b70:	15c01426 	beq	r2,r23,813bc4 <__call_exitprocs+0x154>
  813b74:	80000015 	stw	zero,0(r16)
  813b78:	183fde26 	beq	r3,zero,813af4 <__alt_mem_onchip_mem+0xff793af4>
  813b7c:	95c8983a 	sll	r4,r18,r23
  813b80:	a0806217 	ldw	r2,392(r20)
  813b84:	a5800117 	ldw	r22,4(r20)
  813b88:	2084703a 	and	r2,r4,r2
  813b8c:	10000b26 	beq	r2,zero,813bbc <__call_exitprocs+0x14c>
  813b90:	a0806317 	ldw	r2,396(r20)
  813b94:	2088703a 	and	r4,r4,r2
  813b98:	20000c1e 	bne	r4,zero,813bcc <__call_exitprocs+0x15c>
  813b9c:	89400017 	ldw	r5,0(r17)
  813ba0:	d9000017 	ldw	r4,0(sp)
  813ba4:	183ee83a 	callr	r3
  813ba8:	a0800117 	ldw	r2,4(r20)
  813bac:	15bfbf1e 	bne	r2,r22,813aac <__alt_mem_onchip_mem+0xff793aac>
  813bb0:	98800017 	ldw	r2,0(r19)
  813bb4:	153fcf26 	beq	r2,r20,813af4 <__alt_mem_onchip_mem+0xff793af4>
  813bb8:	003fbc06 	br	813aac <__alt_mem_onchip_mem+0xff793aac>
  813bbc:	183ee83a 	callr	r3
  813bc0:	003ff906 	br	813ba8 <__alt_mem_onchip_mem+0xff793ba8>
  813bc4:	a5c00115 	stw	r23,4(r20)
  813bc8:	003feb06 	br	813b78 <__alt_mem_onchip_mem+0xff793b78>
  813bcc:	89000017 	ldw	r4,0(r17)
  813bd0:	183ee83a 	callr	r3
  813bd4:	003ff406 	br	813ba8 <__alt_mem_onchip_mem+0xff793ba8>
  813bd8:	a0800017 	ldw	r2,0(r20)
  813bdc:	a027883a 	mov	r19,r20
  813be0:	1029883a 	mov	r20,r2
  813be4:	003fb606 	br	813ac0 <__alt_mem_onchip_mem+0xff793ac0>
  813be8:	0005883a 	mov	r2,zero
  813bec:	003ffb06 	br	813bdc <__alt_mem_onchip_mem+0xff793bdc>

00813bf0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  813bf0:	defffd04 	addi	sp,sp,-12
  813bf4:	df000215 	stw	fp,8(sp)
  813bf8:	df000204 	addi	fp,sp,8
  813bfc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  813c00:	0001883a 	nop
  813c04:	e0bfff17 	ldw	r2,-4(fp)
  813c08:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  813c0c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  813c10:	10000226 	beq	r2,zero,813c1c <_exit+0x2c>
    ALT_SIM_FAIL();
  813c14:	002af070 	cmpltui	zero,zero,43969
  813c18:	00000106 	br	813c20 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  813c1c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  813c20:	003fff06 	br	813c20 <__alt_mem_onchip_mem+0xff793c20>
