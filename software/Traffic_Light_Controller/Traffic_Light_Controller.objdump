
Traffic_Light_Controller.elf:     file format elf32-littlenios2
Traffic_Light_Controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001390c memsz 0x0001390c flags r-x
    LOAD off    0x0001492c vaddr 0x0081392c paddr 0x00815624 align 2**12
         filesz 0x00001cf8 memsz 0x00001cf8 flags rw-
    LOAD off    0x0001731c vaddr 0x0081731c paddr 0x0081731c align 2**12
         filesz 0x00000000 memsz 0x00000210 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012fc0  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000728  00813204  00813204  00014204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cf8  0081392c  00815624  0001492c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000210  0081731c  0081731c  0001731c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0081752c  0081752c  00016624  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01080000  01080000  00016624  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00016624  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001258  00000000  00000000  00016648  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002f7bf  00000000  00000000  000178a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000bf1b  00000000  00000000  0004705f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e68d  00000000  00000000  00052f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002ad4  00000000  00000000  00061608  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000458e  00000000  00000000  000640dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00019174  00000000  00000000  0006866a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000817e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b00  00000000  00000000  00081840  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000871c9  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000871cc  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000871cf  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000871d0  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000871d1  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000871d5  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000871d9  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000871dd  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000871e6  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000871ef  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  000871f8  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000059  00000000  00000000  00087204  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006b318  00000000  00000000  0008725d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00813204 l    d  .rodata	00000000 .rodata
0081392c l    d  .rwdata	00000000 .rwdata
0081731c l    d  .bss	00000000 .bss
0081752c l    d  .sdram	00000000 .sdram
01080000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Traffic_Light_Controller_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 findfp.c
00801758 l     F .text	00000008 __fp_unlock
0080176c l     F .text	0000019c __sinit.part.1
00801908 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0081392c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 refill.c
008031c0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
008133e6 l     O .rodata	00000010 zeroes.4404
00805aec l     F .text	000000bc __sbprintf
008133f6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
00813507 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00805f08 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00814178 l     O .rwdata	00000020 lc_ctype_charset
00814158 l     O .rwdata	00000020 lc_message_charset
00814198 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
008136a4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080a198 l     F .text	000000fc __sprint_r.part.0
008137d8 l     O .rodata	00000010 blanks.4348
008137c8 l     O .rodata	00000010 zeroes.4349
0080b724 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080f08c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080f198 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080f1c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080f430 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080f510 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080f5fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0080f7d0 l     F .text	0000003c alt_get_errno
0080f80c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0080fa24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00815614 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080fe14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080ff48 l     F .text	00000034 alt_dev_reg
00814378 l     O .rwdata	00001060 jtag_uart
008153d8 l     O .rwdata	00000120 lcd
008154f8 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00810274 l     F .text	0000020c altera_avalon_jtag_uart_irq
00810480 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00815620 l     O .rwdata	00000004 colstart
00810ab8 l     F .text	000000b8 lcd_write_command
00810b70 l     F .text	000000d8 lcd_write_data
00810c48 l     F .text	000000d0 lcd_clear_screen
00810d18 l     F .text	000001ec lcd_repaint_screen
00810f04 l     F .text	000000cc lcd_scroll_up
00810fd0 l     F .text	000002ac lcd_handle_escape
00811754 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00811994 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00811c44 l     F .text	0000009c altera_avalon_uart_irq
00811ce0 l     F .text	000000e4 altera_avalon_uart_rxirq
00811dc4 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00811f60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00812178 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
008123a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00812a58 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00817384 g     O .bss	00000004 alt_instruction_exception_handler
008031a8 g     F .text	00000018 putchar
00809874 g     F .text	00000074 _mprec_log10
008008b8 g     F .text	00000080 lcd_set_mode
00809960 g     F .text	0000008c __any_on
008084d8 g     F .text	00000054 _isatty_r
008136b0 g     O .rodata	00000028 __mprec_tinytens
0080f70c g     F .text	0000007c alt_main
00817340 g     O .bss	00000004 vehicle_cross
0081742c g     O .bss	00000100 alt_irq
00808608 g     F .text	00000060 _lseek_r
008155cc g     O .rwdata	00000004 t3
00815624 g       *ABS*	00000000 __flash_rwdata_start
00807b3c g     F .text	000000ac __sflags
0080da8c g     F .text	00000088 .hidden __eqdf2
0081733c g     O .bss	00000004 pedEW
0081752c g       *ABS*	00000000 __alt_heap_start
0080367c g     F .text	00000008 strtok_r
00802ffc g     F .text	0000003c printf
0080baac g     F .text	0000009c _wcrtomb_r
00803564 g     F .text	0000005c __sseek
00801aa8 g     F .text	00000010 __sinit
00805ba8 g     F .text	00000140 __swbuf_r
0081732c g     O .bss	00000004 previous_state1
00817348 g     O .bss	00000004 lcd
0080852c g     F .text	0000007c _setlocale_r
00801910 g     F .text	00000068 __sfmoreglue
0080f7ac g     F .text	00000024 __malloc_unlock
00808894 g     F .text	0000015c memmove
00801a90 g     F .text	00000018 _cleanup
008089f0 g     F .text	000000a8 _Balloc
008035e0 g     F .text	0000009c __strtok_r
0080db14 g     F .text	000000dc .hidden __gtdf2
00812bc8 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
008155d4 g     O .rwdata	00000004 t5
00802170 g     F .text	0000005c _fstat_r
00817350 g     O .bss	00000004 errno
00803424 g     F .text	00000014 __srget
008155c0 g     O .rwdata	00000004 mode_display
008034e0 g     F .text	00000008 __seofread
00817374 g     O .bss	00000004 alt_argv
0081d5bc g       *ABS*	00000000 _gp
00812b98 g     F .text	00000030 usleep
008141f8 g     O .rwdata	00000180 alt_fd_list
008031a0 g     F .text	00000008 _putchar_r
00812548 g     F .text	00000090 alt_find_dev
0080874c g     F .text	00000148 memcpy
00800628 g     F .text	0000004c camera_timer_isr
008003d4 g     F .text	00000254 pedestrian_tlc_timer_isr
00801760 g     F .text	0000000c _cleanup_r
0080ed78 g     F .text	000000dc .hidden __floatsidf
00812b1c g     F .text	0000007c alt_io_redirect
0080dbf0 g     F .text	000000f4 .hidden __ltdf2
00817338 g     O .bss	00000004 pedNS
00813204 g       *ABS*	00000000 __DTOR_END__
00800674 g     F .text	00000030 vehicle_timer_isr
00812dd4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00809fb0 g     F .text	00000074 __fpclassifyd
008097d0 g     F .text	000000a4 __ratio
0080b708 g     F .text	0000001c __vfiprintf_internal
00800b24 g     F .text	00000284 pedestrian_tlc
00810678 g     F .text	0000021c altera_avalon_jtag_uart_read
00802610 g     F .text	00000014 malloc
00802fcc g     F .text	00000030 _printf_r
0080c83c g     F .text	00000064 .hidden __udivsi3
0080f46c g     F .text	000000a4 isatty
00813700 g     O .rodata	000000c8 __mprec_tens
008085a8 g     F .text	0000000c __locale_charset
00812d44 g     F .text	00000090 alt_icache_flush
0081735c g     O .bss	00000004 __malloc_top_pad
008155f0 g     O .rwdata	00000004 __mb_cur_max
008085d8 g     F .text	0000000c _localeconv_r
00808dfc g     F .text	0000003c __i2b
0080801c g     F .text	000004bc __sfvwrite_r
008155bc g     O .rwdata	00000004 current_mode
00803438 g     F .text	00000054 _sbrk_r
00800da8 g     F .text	0000063c configurable_tlc
008099ec g     F .text	00000060 _read_r
00815608 g     O .rwdata	00000004 alt_max_fd
00807790 g     F .text	000000f0 _fclose_r
008155c8 g     O .rwdata	00000004 t2
00807b0c g     F .text	00000030 fflush
00817358 g     O .bss	00000004 __malloc_max_sbrked_mem
0080f2b0 g     F .text	00000180 alt_irq_register
00801660 g     F .text	00000070 _fgetc_r
0080c8f8 g     F .text	000008ac .hidden __adddf3
00809578 g     F .text	0000010c __b2d
0080c20c g     F .text	00000538 .hidden __umoddi3
0080f638 g     F .text	000000d4 lseek
008155dc g     O .rwdata	00000004 _global_impure_ptr
00809a4c g     F .text	00000564 _realloc_r
0081752c g       *ABS*	00000000 __bss_end
00812968 g     F .text	000000f0 alt_iic_isr_register
0080fd0c g     F .text	00000108 alt_tick
0080bc94 g     F .text	00000578 .hidden __udivdi3
0080ba08 g     F .text	00000024 _fputwc_r
008136d8 g     O .rodata	00000028 __mprec_bigtens
00808be0 g     F .text	00000104 __s2b
0080ee54 g     F .text	000000a8 .hidden __floatunsidf
008092b8 g     F .text	00000060 __mcmp
00811b98 g     F .text	000000ac altera_avalon_uart_init
00801ac8 g     F .text	00000018 __fp_lock_all
0081291c g     F .text	0000004c alt_ic_irq_enabled
0080fc70 g     F .text	0000009c alt_alarm_stop
008038bc g     F .text	0000001c strtol
0081736c g     O .bss	00000004 alt_irq_active
00801d10 g     F .text	00000444 _fseeko_r
01080000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
008141d0 g     O .rwdata	00000028 alt_dev_null
008173b0 g     O .bss	00000018 timer_simple
00812360 g     F .text	00000048 alt_dcache_flush_all
00808ce4 g     F .text	00000068 __hi0bits
0080ecf8 g     F .text	00000080 .hidden __fixdfsi
008155d0 g     O .rwdata	00000004 t4
00815624 g       *ABS*	00000000 __ram_rwdata_end
00815600 g     O .rwdata	00000008 alt_dev_list
00801c50 g     F .text	00000044 _fputc_r
0080fe50 g     F .text	000000f8 write
00803038 g     F .text	000000a0 _putc_r
0081392c g       *ABS*	00000000 __ram_rodata_end
0080f200 g     F .text	000000b0 fstat
00801c2c g     F .text	00000024 fprintf
0080dbf0 g     F .text	000000f4 .hidden __ledf2
00809030 g     F .text	00000140 __pow5mult
0080a2ac g     F .text	0000145c ___vfiprintf_internal_r
00817368 g     O .bss	00000004 __nlocale_changed
0080c8a0 g     F .text	00000058 .hidden __umodsi3
0081752c g       *ABS*	00000000 end
0081127c g     F .text	000004d8 altera_avalon_lcd_16207_write
00802154 g     F .text	0000001c fseeko
008121b4 g     F .text	000001ac altera_avalon_uart_write
00801cf4 g     F .text	0000001c fseek
008101b4 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00813204 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00811a0c g     F .text	0000007c alt_avalon_timer_sc_init
00811ae8 g     F .text	00000060 altera_avalon_uart_write_fd
0080eefc g     F .text	00000064 .hidden __clzsi2
00811b48 g     F .text	00000050 altera_avalon_uart_close_fd
00810894 g     F .text	00000224 altera_avalon_jtag_uart_write
00801ab8 g     F .text	00000004 __sfp_lock_acquire
00808668 g     F .text	000000e4 memchr
008038d8 g     F .text	000021f8 ___vfprintf_internal_r
00807d0c g     F .text	00000310 _free_r
008085b4 g     F .text	00000010 __locale_mb_cur_max
00813050 g     F .text	00000180 __call_exitprocs
008033b0 g     F .text	00000074 __srget_r
00817364 g     O .bss	00000004 __mlocale_changed
008155e4 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
0081737c g     O .bss	00000004 _alt_tick_rate
00809170 g     F .text	00000148 __lshift
00817380 g     O .bss	00000004 _alt_nticks
0080fa60 g     F .text	000000fc read
0080ffb4 g     F .text	0000009c alt_sys_init
00802f6c g     F .text	00000060 _open_r
00812f38 g     F .text	00000118 __register_exitproc
00808e38 g     F .text	000001f8 __multiply
00810520 g     F .text	00000068 altera_avalon_jtag_uart_close
008173c8 g     O .bss	00000018 timer_vehicle
0081392c g       *ABS*	00000000 __ram_rwdata_start
00813204 g       *ABS*	00000000 __ram_rodata_start
00817388 g     O .bss	00000028 __malloc_current_mallinfo
00809684 g     F .text	0000014c __d2b
00817330 g     O .bss	00000004 current_state2
00817320 g     O .bss	00000004 camera_timer_has_started
00810050 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
008126e0 g     F .text	000000a4 alt_get_fd
00812bec g     F .text	00000158 alt_busy_sleep
00805eb4 g     F .text	00000054 _close_r
008035c8 g     F .text	00000018 strtok
00812ebc g     F .text	0000007c memcmp
00810110 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0081752c g       *ABS*	00000000 __alt_stack_base
00810160 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00802354 g     F .text	000000cc _fwrite_r
00805d60 g     F .text	00000154 __swsetup_r
0080d1a4 g     F .text	000008e8 .hidden __divdf3
00801978 g     F .text	00000118 __sfp
008098e8 g     F .text	00000078 __copybits
00813d50 g     O .rwdata	00000408 __malloc_av_
00801ac4 g     F .text	00000004 __sinit_lock_release
0080dce4 g     F .text	00000718 .hidden __muldf3
0080348c g     F .text	00000054 __sread
008125d8 g     F .text	00000108 alt_find_file
008123e4 g     F .text	000000a4 alt_dev_llist_insert
0080f788 g     F .text	00000024 __malloc_lock
00801c04 g     F .text	00000028 _fprintf_r
0080fbc0 g     F .text	000000b0 sbrk
00807ab0 g     F .text	0000005c _fflush_r
0080b7e0 g     F .text	000000c4 _calloc_r
008155c4 g     O .rwdata	00000004 t1
00801bec g     F .text	00000018 fopen
0081731c g       *ABS*	00000000 __bss_start
00802e44 g     F .text	00000128 memset
008013e4 g     F .text	0000027c main
00817378 g     O .bss	00000004 alt_envp
00817354 g     O .bss	00000004 __malloc_max_total_mem
008100b0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00805ce8 g     F .text	00000018 __swbuf
00811800 g     F .text	00000134 altera_avalon_lcd_16207_init
008035c0 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00807880 g     F .text	00000014 fclose
00803684 g     F .text	00000238 _strtol_r
00806108 g     F .text	00001688 _dtoa_r
00802638 g     F .text	0000080c _malloc_r
0081731c g     O .bss	00000004 timer_has_started
0080bc08 g     F .text	00000030 __ascii_wctomb
0081560c g     O .rwdata	00000004 alt_errno
008021cc g     F .text	000000c4 _fwalk
008030d8 g     F .text	000000c8 putc
0080c744 g     F .text	00000084 .hidden __divsi3
00807be8 g     F .text	00000124 _malloc_trim_r
00813204 g       *ABS*	00000000 __CTOR_END__
0080a024 g     F .text	000000dc strcmp
00813204 g       *ABS*	00000000 __flash_rodata_start
00813204 g       *ABS*	00000000 __DTOR_LIST__
00817344 g     O .bss	00000004 count
00817324 g     O .bss	00000004 mode_request
0080da8c g     F .text	00000088 .hidden __nedf2
0080ff7c g     F .text	00000038 alt_irq_init
0080fb5c g     F .text	00000064 alt_release_fd
008016d0 g     F .text	00000088 fgetc
008137e8 g     O .rodata	00000100 .hidden __clz_tab
00817360 g     O .bss	00000004 _PathLocale
00812e70 g     F .text	00000014 atexit
00805d00 g     F .text	00000060 _write_r
008085e4 g     F .text	00000018 setlocale
008155e0 g     O .rwdata	00000004 _impure_ptr
00817370 g     O .bss	00000004 alt_argc
00807894 g     F .text	0000021c __sflush_r
008124e8 g     F .text	00000060 _do_dtors
008085d0 g     F .text	00000008 __locale_cjk_lang
00801cf0 g     F .text	00000004 _fseek_r
008031dc g     F .text	000001d4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00809514 g     F .text	00000064 __ulp
00801ae0 g     F .text	00000018 __fp_unlock_all
00811934 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00801c94 g     F .text	0000005c fputc
008155f8 g     O .rwdata	00000008 alt_fs_list
00800290 g     F .text	000000b4 reset_volatiles
00800020 g       *ABS*	00000000 __ram_exceptions_start
008085fc g     F .text	0000000c localeconv
008155d8 g     O .rwdata	00000004 t6
008127b8 g     F .text	00000050 alt_ic_isr_register
00802420 g     F .text	00000034 fwrite
00815624 g       *ABS*	00000000 _edata
00811a88 g     F .text	00000060 altera_avalon_uart_read_fd
008006a4 g     F .text	00000214 button_interrupt
0081752c g       *ABS*	00000000 _end
008173e0 g     O .bss	00000018 timer_camera
00800344 g     F .text	00000090 simple_tlc_timer_isr
0080b8a4 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
00810588 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00812890 g     F .text	0000008c alt_ic_irq_disable
008034e8 g     F .text	0000007c __swrite
008155e8 g     O .rwdata	00000004 __malloc_trim_threshold
008085c4 g     F .text	0000000c __locale_msgcharset
00812e84 g     F .text	00000038 exit
00802290 g     F .text	000000c4 _fwalk_reent
00809318 g     F .text	000001fc __mdiff
00800938 g     F .text	000001ec simple_tlc
0080c7c8 g     F .text	00000074 .hidden __modsi3
008155ec g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0081734c g     O .bss	00000004 uart
00801abc g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00813406 g     O .rodata	00000101 _ctype_
00811f0c g     F .text	00000054 altera_avalon_uart_close
00801af8 g     F .text	000000f4 _fopen_r
008131d0 g     F .text	00000034 _exit
0080ef60 g     F .text	0000012c alt_alarm_start
00802454 g     F .text	000001bc __smakebuf_r
008173f8 g     O .bss	00000032 config_values
0080a100 g     F .text	00000098 strlen
0080f8d0 g     F .text	00000154 open
0080db14 g     F .text	000000dc .hidden __gedf2
00817328 g     O .bss	00000004 current_state1
008155f4 g     O .rwdata	00000004 __wctomb
0080a294 g     F .text	00000018 __sprint_r
00812784 g     F .text	00000034 alt_icache_flush_all
00815610 g     O .rwdata	00000004 alt_priority_mask
00812808 g     F .text	00000088 alt_ic_irq_enable
00805ad0 g     F .text	0000001c __vfprintf_internal
00811f9c g     F .text	000001dc altera_avalon_uart_read
0080bc38 g     F .text	0000005c _wctomb_r
00817334 g     O .bss	00000004 previous_state2
0080e3fc g     F .text	000008fc .hidden __subdf3
00808d4c g     F .text	000000b0 __lo0bits
00815618 g     O .rwdata	00000008 alt_alarm_list
00812488 g     F .text	00000060 _do_ctors
0080bb48 g     F .text	000000c0 wcrtomb
0080f0c8 g     F .text	000000d0 close
0080f578 g     F .text	00000084 alt_load
0080ba2c g     F .text	00000080 fputwc
00802624 g     F .text	00000014 free
00801ac0 g     F .text	00000004 __sinit_lock_acquire
00808ac0 g     F .text	00000120 __multadd
00808a98 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff780004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	109d0b04 	addi	r2,r2,29740
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	109d0b04 	addi	r2,r2,29740
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff78012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff780120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a77217 	ldw	r2,-25144(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a77217 	ldw	r2,-25144(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff780248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6b56f14 	ori	gp,gp,54716
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	109cc714 	ori	r2,r2,29468

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18dd4b14 	ori	r3,r3,29996

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff780278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080f5780 	call	80f578 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080f70c0 	call	80f70c <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff78028c>

00800290 <reset_volatiles>:
volatile unsigned int t4 = rrrr;
volatile unsigned int t5 = grrg;
volatile unsigned int t6 = yrry;

//helper function to reset volatile variables and stop all timers on mode change
void reset_volatiles(){
  800290:	defffe04 	addi	sp,sp,-8
  800294:	dfc00115 	stw	ra,4(sp)
  800298:	df000015 	stw	fp,0(sp)
  80029c:	d839883a 	mov	fp,sp
	current_state1 = 0;
  8002a0:	d0275b15 	stw	zero,-25236(gp)
	current_state2 = 0;
  8002a4:	d0275d15 	stw	zero,-25228(gp)
	previous_state1 = 0;
  8002a8:	d0275c15 	stw	zero,-25232(gp)
	previous_state2 = 0;
  8002ac:	d0275e15 	stw	zero,-25224(gp)
	pedNS = 0;
  8002b0:	d0275f15 	stw	zero,-25220(gp)
	pedEW = 0;
  8002b4:	d0276015 	stw	zero,-25216(gp)
	vehicle_cross = 0;
  8002b8:	d0276115 	stw	zero,-25212(gp)
	count = 0;
  8002bc:	d0276215 	stw	zero,-25208(gp)
	t1 = rrrr;
  8002c0:	00807d04 	movi	r2,500
  8002c4:	d0a00215 	stw	r2,-32760(gp)
	t2 = grrg;
  8002c8:	0085dc04 	movi	r2,6000
  8002cc:	d0a00315 	stw	r2,-32756(gp)
	t3 = yrry;
  8002d0:	0081f404 	movi	r2,2000
  8002d4:	d0a00415 	stw	r2,-32752(gp)
	t4 = rrrr;
  8002d8:	00807d04 	movi	r2,500
  8002dc:	d0a00515 	stw	r2,-32748(gp)
	t5 = grrg;
  8002e0:	0085dc04 	movi	r2,6000
  8002e4:	d0a00615 	stw	r2,-32744(gp)
	t6 = yrry;
  8002e8:	0081f404 	movi	r2,2000
  8002ec:	d0a00715 	stw	r2,-32740(gp)
	//stop timer alarms to avoid incorrect timing when changing modes
	alt_alarm_stop(&timer_vehicle);
  8002f0:	01002074 	movhi	r4,129
  8002f4:	211cf204 	addi	r4,r4,29640
  8002f8:	080fc700 	call	80fc70 <alt_alarm_stop>
	if (timer_has_started){
  8002fc:	d0a75817 	ldw	r2,-25248(gp)
  800300:	10000426 	beq	r2,zero,800314 <reset_volatiles+0x84>
		alt_alarm_stop(&timer_simple);
  800304:	01002074 	movhi	r4,129
  800308:	211cec04 	addi	r4,r4,29616
  80030c:	080fc700 	call	80fc70 <alt_alarm_stop>
		timer_has_started = 0;
  800310:	d0275815 	stw	zero,-25248(gp)
	}
	if (camera_timer_has_started){
  800314:	d0a75917 	ldw	r2,-25244(gp)
  800318:	10000426 	beq	r2,zero,80032c <reset_volatiles+0x9c>
		alt_alarm_stop(&timer_camera);
  80031c:	01002074 	movhi	r4,129
  800320:	211cf804 	addi	r4,r4,29664
  800324:	080fc700 	call	80fc70 <alt_alarm_stop>
		camera_timer_has_started = 0;
  800328:	d0275915 	stw	zero,-25244(gp)
	}
}
  80032c:	0001883a 	nop
  800330:	e037883a 	mov	sp,fp
  800334:	dfc00117 	ldw	ra,4(sp)
  800338:	df000017 	ldw	fp,0(sp)
  80033c:	dec00204 	addi	sp,sp,8
  800340:	f800283a 	ret

00800344 <simple_tlc_timer_isr>:

//timer interrupt service routine for mode 1 states
alt_u32 simple_tlc_timer_isr(void* context){
  800344:	defffd04 	addi	sp,sp,-12
  800348:	dfc00215 	stw	ra,8(sp)
  80034c:	df000115 	stw	fp,4(sp)
  800350:	df000104 	addi	fp,sp,4
  800354:	e13fff15 	stw	r4,-4(fp)
	//if there is a pending mode request and we are in a safe state, do not run any output logic and kill the timer
	if (mode_request != current_mode){
  800358:	d0e75a17 	ldw	r3,-25240(gp)
  80035c:	d0a00017 	ldw	r2,-32768(gp)
  800360:	18800726 	beq	r3,r2,800380 <simple_tlc_timer_isr+0x3c>
		if ((current_state1 == rr1_1) || (current_state1 == rr2_1))
  800364:	d0a75b17 	ldw	r2,-25236(gp)
  800368:	10000326 	beq	r2,zero,800378 <simple_tlc_timer_isr+0x34>
  80036c:	d0a75b17 	ldw	r2,-25236(gp)
  800370:	108000d8 	cmpnei	r2,r2,3
  800374:	1000021e 	bne	r2,zero,800380 <simple_tlc_timer_isr+0x3c>
			return 0;
  800378:	0005883a 	mov	r2,zero
  80037c:	00001006 	br	8003c0 <simple_tlc_timer_isr+0x7c>
	}

	previous_state1 = current_state1; //save previous state for output transition logic
  800380:	d0a75b17 	ldw	r2,-25236(gp)
  800384:	d0a75c15 	stw	r2,-25232(gp)
	current_state1++; //move to the next state
  800388:	d0a75b17 	ldw	r2,-25236(gp)
  80038c:	10800044 	addi	r2,r2,1
  800390:	d0a75b15 	stw	r2,-25236(gp)
	if (current_state1 == buffer_1) //if at final state, loop back to initial state using a buffer state
  800394:	d0a75b17 	ldw	r2,-25236(gp)
  800398:	10800198 	cmpnei	r2,r2,6
  80039c:	1000011e 	bne	r2,zero,8003a4 <simple_tlc_timer_isr+0x60>
		current_state1 = rr1_1;
  8003a0:	d0275b15 	stw	zero,-25236(gp)
	printf("Current State: Simple State %d\r\n", current_state1);
  8003a4:	d0a75b17 	ldw	r2,-25236(gp)
  8003a8:	100b883a 	mov	r5,r2
  8003ac:	01002074 	movhi	r4,129
  8003b0:	210c8104 	addi	r4,r4,12804
  8003b4:	0802ffc0 	call	802ffc <printf>
	timer_has_started = 0; //reset timer_has_started flag
  8003b8:	d0275815 	stw	zero,-25248(gp)
	return 0;
  8003bc:	0005883a 	mov	r2,zero
}
  8003c0:	e037883a 	mov	sp,fp
  8003c4:	dfc00117 	ldw	ra,4(sp)
  8003c8:	df000017 	ldw	fp,0(sp)
  8003cc:	dec00204 	addi	sp,sp,8
  8003d0:	f800283a 	ret

008003d4 <pedestrian_tlc_timer_isr>:

//timer interrupt service routine for mode 2 states
alt_u32 pedestrian_tlc_timer_isr(void* context){
  8003d4:	defffd04 	addi	sp,sp,-12
  8003d8:	dfc00215 	stw	ra,8(sp)
  8003dc:	df000115 	stw	fp,4(sp)
  8003e0:	df000104 	addi	fp,sp,4
  8003e4:	e13fff15 	stw	r4,-4(fp)
	//if there is a pending mode request and we are in a safe state, do not run any output logic and kill the timer
	if (mode_request != current_mode){
  8003e8:	d0e75a17 	ldw	r3,-25240(gp)
  8003ec:	d0a00017 	ldw	r2,-32768(gp)
  8003f0:	18800a26 	beq	r3,r2,80041c <pedestrian_tlc_timer_isr+0x48>
		if ((current_state2 == rr1_2) | (current_state2 == rr2_2))
  8003f4:	d0a75d17 	ldw	r2,-25228(gp)
  8003f8:	1005003a 	cmpeq	r2,r2,zero
  8003fc:	1007883a 	mov	r3,r2
  800400:	d0a75d17 	ldw	r2,-25228(gp)
  800404:	10800120 	cmpeqi	r2,r2,4
  800408:	1884b03a 	or	r2,r3,r2
  80040c:	10803fcc 	andi	r2,r2,255
  800410:	10000226 	beq	r2,zero,80041c <pedestrian_tlc_timer_isr+0x48>
			return 0;
  800414:	0005883a 	mov	r2,zero
  800418:	00007e06 	br	800614 <pedestrian_tlc_timer_isr+0x240>
	}

	previous_state2 = current_state2; //save previous state for output transition logic
  80041c:	d0a75d17 	ldw	r2,-25228(gp)
  800420:	d0a75e15 	stw	r2,-25224(gp)
	if ((pedEW) && (pedNS)){
  800424:	d0a76017 	ldw	r2,-25216(gp)
  800428:	10002026 	beq	r2,zero,8004ac <pedestrian_tlc_timer_isr+0xd8>
  80042c:	d0a75f17 	ldw	r2,-25220(gp)
  800430:	10001e26 	beq	r2,zero,8004ac <pedestrian_tlc_timer_isr+0xd8>
		//handle pedestrians at either of the RED-RED states because
		if ((current_state2 == rr1_2) | (current_state2 == rr2_2))
  800434:	d0a75d17 	ldw	r2,-25228(gp)
  800438:	1005003a 	cmpeq	r2,r2,zero
  80043c:	1007883a 	mov	r3,r2
  800440:	d0a75d17 	ldw	r2,-25228(gp)
  800444:	10800120 	cmpeqi	r2,r2,4
  800448:	1884b03a 	or	r2,r3,r2
  80044c:	10803fcc 	andi	r2,r2,255
  800450:	10000426 	beq	r2,zero,800464 <pedestrian_tlc_timer_isr+0x90>
			current_state2 += 2;
  800454:	d0a75d17 	ldw	r2,-25228(gp)
  800458:	10800084 	addi	r2,r2,2
  80045c:	d0a75d15 	stw	r2,-25228(gp)
	}

	previous_state2 = current_state2; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state2 == rr1_2) | (current_state2 == rr2_2))
  800460:	00005806 	br	8005c4 <pedestrian_tlc_timer_isr+0x1f0>
			current_state2 += 2;
		//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
		else if (current_state2 == gr_2)
  800464:	d0a75d17 	ldw	r2,-25228(gp)
  800468:	10800058 	cmpnei	r2,r2,1
  80046c:	1000041e 	bne	r2,zero,800480 <pedestrian_tlc_timer_isr+0xac>
			current_state2 += 2;
  800470:	d0a75d17 	ldw	r2,-25228(gp)
  800474:	10800084 	addi	r2,r2,2
  800478:	d0a75d15 	stw	r2,-25228(gp)
	}

	previous_state2 = current_state2; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state2 == rr1_2) | (current_state2 == rr2_2))
  80047c:	00005106 	br	8005c4 <pedestrian_tlc_timer_isr+0x1f0>
			current_state2 += 2;
		//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
		else if (current_state2 == gr_2)
			current_state2 += 2;
		//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
		else if (current_state2 == rg_2)
  800480:	d0a75d17 	ldw	r2,-25228(gp)
  800484:	10800158 	cmpnei	r2,r2,5
  800488:	1000041e 	bne	r2,zero,80049c <pedestrian_tlc_timer_isr+0xc8>
			current_state2 += 2;
  80048c:	d0a75d17 	ldw	r2,-25228(gp)
  800490:	10800084 	addi	r2,r2,2
  800494:	d0a75d15 	stw	r2,-25228(gp)
	}

	previous_state2 = current_state2; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state2 == rr1_2) | (current_state2 == rr2_2))
  800498:	00004a06 	br	8005c4 <pedestrian_tlc_timer_isr+0x1f0>
			current_state2 += 2;
		//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
		else if (current_state2 == rg_2)
			current_state2 += 2;
		else
			current_state2++;
  80049c:	d0a75d17 	ldw	r2,-25228(gp)
  8004a0:	10800044 	addi	r2,r2,1
  8004a4:	d0a75d15 	stw	r2,-25228(gp)
	}

	previous_state2 = current_state2; //save previous state for output transition logic
	if ((pedEW) && (pedNS)){
		//handle pedestrians at either of the RED-RED states because
		if ((current_state2 == rr1_2) | (current_state2 == rr2_2))
  8004a8:	00004606 	br	8005c4 <pedestrian_tlc_timer_isr+0x1f0>
		else if (current_state2 == rg_2)
			current_state2 += 2;
		else
			current_state2++;
	}
	else if (pedNS){
  8004ac:	d0a75f17 	ldw	r2,-25220(gp)
  8004b0:	10001826 	beq	r2,zero,800514 <pedestrian_tlc_timer_isr+0x140>
		//we are at state RED-RED (1), handle NS pedestrians
		if (current_state2 == rr1_2)
  8004b4:	d0a75d17 	ldw	r2,-25228(gp)
  8004b8:	1000041e 	bne	r2,zero,8004cc <pedestrian_tlc_timer_isr+0xf8>
			current_state2 += 2;
  8004bc:	d0a75d17 	ldw	r2,-25228(gp)
  8004c0:	10800084 	addi	r2,r2,2
  8004c4:	d0a75d15 	stw	r2,-25228(gp)
  8004c8:	00003e06 	br	8005c4 <pedestrian_tlc_timer_isr+0x1f0>
		//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
		else if (current_state2 == gr_2)
  8004cc:	d0a75d17 	ldw	r2,-25228(gp)
  8004d0:	10800058 	cmpnei	r2,r2,1
  8004d4:	1000041e 	bne	r2,zero,8004e8 <pedestrian_tlc_timer_isr+0x114>
			current_state2 += 2;
  8004d8:	d0a75d17 	ldw	r2,-25228(gp)
  8004dc:	10800084 	addi	r2,r2,2
  8004e0:	d0a75d15 	stw	r2,-25228(gp)
  8004e4:	00003706 	br	8005c4 <pedestrian_tlc_timer_isr+0x1f0>
		//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
		else if (current_state2 == rg_2)
  8004e8:	d0a75d17 	ldw	r2,-25228(gp)
  8004ec:	10800158 	cmpnei	r2,r2,5
  8004f0:	1000041e 	bne	r2,zero,800504 <pedestrian_tlc_timer_isr+0x130>
			current_state2 += 2;
  8004f4:	d0a75d17 	ldw	r2,-25228(gp)
  8004f8:	10800084 	addi	r2,r2,2
  8004fc:	d0a75d15 	stw	r2,-25228(gp)
  800500:	00003006 	br	8005c4 <pedestrian_tlc_timer_isr+0x1f0>
		else
			current_state2++;
  800504:	d0a75d17 	ldw	r2,-25228(gp)
  800508:	10800044 	addi	r2,r2,1
  80050c:	d0a75d15 	stw	r2,-25228(gp)
  800510:	00002c06 	br	8005c4 <pedestrian_tlc_timer_isr+0x1f0>
	}
	else if (pedEW){
  800514:	d0a76017 	ldw	r2,-25216(gp)
  800518:	10001926 	beq	r2,zero,800580 <pedestrian_tlc_timer_isr+0x1ac>
		//we are at state RED-RED (2), handle EW pedestrians
		if (current_state2 == rr2_2)
  80051c:	d0a75d17 	ldw	r2,-25228(gp)
  800520:	10800118 	cmpnei	r2,r2,4
  800524:	1000041e 	bne	r2,zero,800538 <pedestrian_tlc_timer_isr+0x164>
			current_state2 += 2;
  800528:	d0a75d17 	ldw	r2,-25228(gp)
  80052c:	10800084 	addi	r2,r2,2
  800530:	d0a75d15 	stw	r2,-25228(gp)
  800534:	00002306 	br	8005c4 <pedestrian_tlc_timer_isr+0x1f0>
		//we are at state RED-GREEN, too late to handle EW pedestrians so skip past PED state
		else if (current_state2 == rg_2)
  800538:	d0a75d17 	ldw	r2,-25228(gp)
  80053c:	10800158 	cmpnei	r2,r2,5
  800540:	1000041e 	bne	r2,zero,800554 <pedestrian_tlc_timer_isr+0x180>
			current_state2 += 2;
  800544:	d0a75d17 	ldw	r2,-25228(gp)
  800548:	10800084 	addi	r2,r2,2
  80054c:	d0a75d15 	stw	r2,-25228(gp)
  800550:	00001c06 	br	8005c4 <pedestrian_tlc_timer_isr+0x1f0>
		//we are at state GREEN-RED, cannot handle EW pedestrians here so skip past PED state
		else if (current_state2 == gr_2)
  800554:	d0a75d17 	ldw	r2,-25228(gp)
  800558:	10800058 	cmpnei	r2,r2,1
  80055c:	1000041e 	bne	r2,zero,800570 <pedestrian_tlc_timer_isr+0x19c>
			current_state2 += 2;
  800560:	d0a75d17 	ldw	r2,-25228(gp)
  800564:	10800084 	addi	r2,r2,2
  800568:	d0a75d15 	stw	r2,-25228(gp)
  80056c:	00001506 	br	8005c4 <pedestrian_tlc_timer_isr+0x1f0>
		else
			current_state2++;
  800570:	d0a75d17 	ldw	r2,-25228(gp)
  800574:	10800044 	addi	r2,r2,1
  800578:	d0a75d15 	stw	r2,-25228(gp)
  80057c:	00001106 	br	8005c4 <pedestrian_tlc_timer_isr+0x1f0>
	}
	//if no PED interrupt flags, skip past PED states from GREEN-RED and RED-GREEN
	else if (current_state2 == gr_2)
  800580:	d0a75d17 	ldw	r2,-25228(gp)
  800584:	10800058 	cmpnei	r2,r2,1
  800588:	1000041e 	bne	r2,zero,80059c <pedestrian_tlc_timer_isr+0x1c8>
		current_state2 += 2;
  80058c:	d0a75d17 	ldw	r2,-25228(gp)
  800590:	10800084 	addi	r2,r2,2
  800594:	d0a75d15 	stw	r2,-25228(gp)
  800598:	00000a06 	br	8005c4 <pedestrian_tlc_timer_isr+0x1f0>
	else if (current_state2 == rg_2)
  80059c:	d0a75d17 	ldw	r2,-25228(gp)
  8005a0:	10800158 	cmpnei	r2,r2,5
  8005a4:	1000041e 	bne	r2,zero,8005b8 <pedestrian_tlc_timer_isr+0x1e4>
		current_state2 += 2;
  8005a8:	d0a75d17 	ldw	r2,-25228(gp)
  8005ac:	10800084 	addi	r2,r2,2
  8005b0:	d0a75d15 	stw	r2,-25228(gp)
  8005b4:	00000306 	br	8005c4 <pedestrian_tlc_timer_isr+0x1f0>
	else
		current_state2++; //move to the next state if no special condition has been met
  8005b8:	d0a75d17 	ldw	r2,-25228(gp)
  8005bc:	10800044 	addi	r2,r2,1
  8005c0:	d0a75d15 	stw	r2,-25228(gp)

	//reset the NS/EW pedestrian button interrupt flag when we have changed state (NS/EWHandled = 1)
	if (previous_state2 == grp1_2)
  8005c4:	d0a75e17 	ldw	r2,-25224(gp)
  8005c8:	10800098 	cmpnei	r2,r2,2
  8005cc:	1000021e 	bne	r2,zero,8005d8 <pedestrian_tlc_timer_isr+0x204>
		pedNS = 0;
  8005d0:	d0275f15 	stw	zero,-25220(gp)
  8005d4:	00000406 	br	8005e8 <pedestrian_tlc_timer_isr+0x214>
	else if (previous_state2 == rgp2_2)
  8005d8:	d0a75e17 	ldw	r2,-25224(gp)
  8005dc:	10800198 	cmpnei	r2,r2,6
  8005e0:	1000011e 	bne	r2,zero,8005e8 <pedestrian_tlc_timer_isr+0x214>
		pedEW = 0;
  8005e4:	d0276015 	stw	zero,-25216(gp)

	if (current_state2 == buffer_2) //if at final state, loop back to initial state using buffer state
  8005e8:	d0a75d17 	ldw	r2,-25228(gp)
  8005ec:	10800218 	cmpnei	r2,r2,8
  8005f0:	1000011e 	bne	r2,zero,8005f8 <pedestrian_tlc_timer_isr+0x224>
		current_state2 = rr1_2;
  8005f4:	d0275d15 	stw	zero,-25228(gp)
	//print for debug
	printf("Current State: Complex State %d\r\n", current_state2);
  8005f8:	d0a75d17 	ldw	r2,-25228(gp)
  8005fc:	100b883a 	mov	r5,r2
  800600:	01002074 	movhi	r4,129
  800604:	210c8a04 	addi	r4,r4,12840
  800608:	0802ffc0 	call	802ffc <printf>

	timer_has_started = 0; //reset timer_has_started flag
  80060c:	d0275815 	stw	zero,-25248(gp)
	return 0;
  800610:	0005883a 	mov	r2,zero
}
  800614:	e037883a 	mov	sp,fp
  800618:	dfc00117 	ldw	ra,4(sp)
  80061c:	df000017 	ldw	fp,0(sp)
  800620:	dec00204 	addi	sp,sp,8
  800624:	f800283a 	ret

00800628 <camera_timer_isr>:

//interrupt service routine for the camera timer, takes a snapshot
alt_u32 camera_timer_isr(void* context){
  800628:	defffd04 	addi	sp,sp,-12
  80062c:	dfc00215 	stw	ra,8(sp)
  800630:	df000115 	stw	fp,4(sp)
  800634:	df000104 	addi	fp,sp,4
  800638:	e13fff15 	stw	r4,-4(fp)
	fprintf(uart,"Snapshot taken\r\n");
  80063c:	d0a76417 	ldw	r2,-25200(gp)
  800640:	100f883a 	mov	r7,r2
  800644:	01800404 	movi	r6,16
  800648:	01400044 	movi	r5,1
  80064c:	01002074 	movhi	r4,129
  800650:	210c9304 	addi	r4,r4,12876
  800654:	08024200 	call	802420 <fwrite>
	camera_timer_has_started = 0;
  800658:	d0275915 	stw	zero,-25244(gp)
	return 0;
  80065c:	0005883a 	mov	r2,zero
}
  800660:	e037883a 	mov	sp,fp
  800664:	dfc00117 	ldw	ra,4(sp)
  800668:	df000017 	ldw	fp,0(sp)
  80066c:	dec00204 	addi	sp,sp,8
  800670:	f800283a 	ret

00800674 <vehicle_timer_isr>:

//timer for the vehicle being in the intersection
alt_u32 vehicle_timer_isr(void* context){
  800674:	defffe04 	addi	sp,sp,-8
  800678:	df000115 	stw	fp,4(sp)
  80067c:	df000104 	addi	fp,sp,4
  800680:	e13fff15 	stw	r4,-4(fp)
	//increment timer every millisecond, and restart it every millisecond
	count++;
  800684:	d0a76217 	ldw	r2,-25208(gp)
  800688:	10800044 	addi	r2,r2,1
  80068c:	d0a76215 	stw	r2,-25208(gp)
	return 1;
  800690:	00800044 	movi	r2,1
}
  800694:	e037883a 	mov	sp,fp
  800698:	df000017 	ldw	fp,0(sp)
  80069c:	dec00104 	addi	sp,sp,4
  8006a0:	f800283a 	ret

008006a4 <button_interrupt>:

//button interrupt function for pedestrian buttons and vehicle entering the intersection
void button_interrupt(void* context, alt_u32 id) {
  8006a4:	defff904 	addi	sp,sp,-28
  8006a8:	dfc00615 	stw	ra,24(sp)
  8006ac:	df000515 	stw	fp,20(sp)
  8006b0:	df000504 	addi	fp,sp,20
  8006b4:	e13ffe15 	stw	r4,-8(fp)
  8006b8:	e17fff15 	stw	r5,-4(fp)
	//read edge capture register and button value
	unsigned int edgeCapture = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
  8006bc:	00804434 	movhi	r2,272
  8006c0:	10842b04 	addi	r2,r2,4268
  8006c4:	10800037 	ldwio	r2,0(r2)
  8006c8:	e0bffb15 	stw	r2,-20(fp)
	unsigned int uiButtonsValue = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
  8006cc:	00804434 	movhi	r2,272
  8006d0:	10842804 	addi	r2,r2,4256
  8006d4:	10800037 	ldwio	r2,0(r2)
  8006d8:	e0bffc15 	stw	r2,-16(fp)
	void* timerContext = 0;
  8006dc:	e03ffd15 	stw	zero,-12(fp)

	//sets the pedestrian crossing flags in mode 2,3 and 4
	if ((!(uiButtonsValue & 1<<0)) && !((current_mode == 1) || (current_mode == 0)))
  8006e0:	e0bffc17 	ldw	r2,-16(fp)
  8006e4:	1080004c 	andi	r2,r2,1
  8006e8:	1000071e 	bne	r2,zero,800708 <button_interrupt+0x64>
  8006ec:	d0a00017 	ldw	r2,-32768(gp)
  8006f0:	10800060 	cmpeqi	r2,r2,1
  8006f4:	1000041e 	bne	r2,zero,800708 <button_interrupt+0x64>
  8006f8:	d0a00017 	ldw	r2,-32768(gp)
  8006fc:	10000226 	beq	r2,zero,800708 <button_interrupt+0x64>
		pedNS = 1;
  800700:	00800044 	movi	r2,1
  800704:	d0a75f15 	stw	r2,-25220(gp)
	if ((!(uiButtonsValue & 1<<1)) && !((current_mode == 1) || (current_mode == 0)))
  800708:	e0bffc17 	ldw	r2,-16(fp)
  80070c:	1080008c 	andi	r2,r2,2
  800710:	1000071e 	bne	r2,zero,800730 <button_interrupt+0x8c>
  800714:	d0a00017 	ldw	r2,-32768(gp)
  800718:	10800060 	cmpeqi	r2,r2,1
  80071c:	1000041e 	bne	r2,zero,800730 <button_interrupt+0x8c>
  800720:	d0a00017 	ldw	r2,-32768(gp)
  800724:	10000226 	beq	r2,zero,800730 <button_interrupt+0x8c>
		pedEW = 1;
  800728:	00800044 	movi	r2,1
  80072c:	d0a76015 	stw	r2,-25216(gp)

	//vehicle crossing interrupt
	if (current_mode == 4){
  800730:	d0a00017 	ldw	r2,-32768(gp)
  800734:	10800118 	cmpnei	r2,r2,4
  800738:	1000551e 	bne	r2,zero,800890 <button_interrupt+0x1ec>
		if ((edgeCapture & 1<<2)) {
  80073c:	e0bffb17 	ldw	r2,-20(fp)
  800740:	1080010c 	andi	r2,r2,4
  800744:	10005226 	beq	r2,zero,800890 <button_interrupt+0x1ec>
			++vehicle_cross;
  800748:	d0a76117 	ldw	r2,-25212(gp)
  80074c:	10800044 	addi	r2,r2,1
  800750:	d0a76115 	stw	r2,-25212(gp)
			//check for odd button press (vehicle entering)
			if (vehicle_cross % 2){
  800754:	d0a76117 	ldw	r2,-25212(gp)
  800758:	1080004c 	andi	r2,r2,1
  80075c:	10003426 	beq	r2,zero,800830 <button_interrupt+0x18c>
				alt_alarm_start(&timer_vehicle,1,vehicle_timer_isr,timerContext);
  800760:	e1fffd17 	ldw	r7,-12(fp)
  800764:	01802034 	movhi	r6,128
  800768:	31819d04 	addi	r6,r6,1652
  80076c:	01400044 	movi	r5,1
  800770:	01002074 	movhi	r4,129
  800774:	211cf204 	addi	r4,r4,29640
  800778:	080ef600 	call	80ef60 <alt_alarm_start>
				if ((current_state2 == yr_2) || (current_state2 == ry_2)){
  80077c:	d0a75d17 	ldw	r2,-25228(gp)
  800780:	108000e0 	cmpeqi	r2,r2,3
  800784:	1000031e 	bne	r2,zero,800794 <button_interrupt+0xf0>
  800788:	d0a75d17 	ldw	r2,-25228(gp)
  80078c:	108001d8 	cmpnei	r2,r2,7
  800790:	1000131e 	bne	r2,zero,8007e0 <button_interrupt+0x13c>
					//prevent crashes by checking if timer has already started
					if (!camera_timer_has_started){
  800794:	d0a75917 	ldw	r2,-25244(gp)
  800798:	10003d1e 	bne	r2,zero,800890 <button_interrupt+0x1ec>
						fprintf(uart,"Camera activated\r\n");
  80079c:	d0a76417 	ldw	r2,-25200(gp)
  8007a0:	100f883a 	mov	r7,r2
  8007a4:	01800484 	movi	r6,18
  8007a8:	01400044 	movi	r5,1
  8007ac:	01002074 	movhi	r4,129
  8007b0:	210c9804 	addi	r4,r4,12896
  8007b4:	08024200 	call	802420 <fwrite>
						camera_timer_has_started = 1;
  8007b8:	00800044 	movi	r2,1
  8007bc:	d0a75915 	stw	r2,-25244(gp)
						alt_alarm_start(&timer_camera,camera_timeout,camera_timer_isr,timerContext);
  8007c0:	e1fffd17 	ldw	r7,-12(fp)
  8007c4:	01802034 	movhi	r6,128
  8007c8:	31818a04 	addi	r6,r6,1576
  8007cc:	0141f404 	movi	r5,2000
  8007d0:	01002074 	movhi	r4,129
  8007d4:	211cf804 	addi	r4,r4,29664
  8007d8:	080ef600 	call	80ef60 <alt_alarm_start>
			//check for odd button press (vehicle entering)
			if (vehicle_cross % 2){
				alt_alarm_start(&timer_vehicle,1,vehicle_timer_isr,timerContext);
				if ((current_state2 == yr_2) || (current_state2 == ry_2)){
					//prevent crashes by checking if timer has already started
					if (!camera_timer_has_started){
  8007dc:	00002c06 	br	800890 <button_interrupt+0x1ec>
						fprintf(uart,"Camera activated\r\n");
						camera_timer_has_started = 1;
						alt_alarm_start(&timer_camera,camera_timeout,camera_timer_isr,timerContext);
					}
				}
				else if ((current_state2 == rr1_2) || (current_state2 == rr2_2)){
  8007e0:	d0a75d17 	ldw	r2,-25228(gp)
  8007e4:	10000326 	beq	r2,zero,8007f4 <button_interrupt+0x150>
  8007e8:	d0a75d17 	ldw	r2,-25228(gp)
  8007ec:	10800118 	cmpnei	r2,r2,4
  8007f0:	1000271e 	bne	r2,zero,800890 <button_interrupt+0x1ec>
					fprintf(uart,"Camera activated\r\n");
  8007f4:	d0a76417 	ldw	r2,-25200(gp)
  8007f8:	100f883a 	mov	r7,r2
  8007fc:	01800484 	movi	r6,18
  800800:	01400044 	movi	r5,1
  800804:	01002074 	movhi	r4,129
  800808:	210c9804 	addi	r4,r4,12896
  80080c:	08024200 	call	802420 <fwrite>
					fprintf(uart,"Snapshot taken\r\n");
  800810:	d0a76417 	ldw	r2,-25200(gp)
  800814:	100f883a 	mov	r7,r2
  800818:	01800404 	movi	r6,16
  80081c:	01400044 	movi	r5,1
  800820:	01002074 	movhi	r4,129
  800824:	210c9304 	addi	r4,r4,12876
  800828:	08024200 	call	802420 <fwrite>
  80082c:	00001806 	br	800890 <button_interrupt+0x1ec>
				}
			}
			//check for even button press (vehicle leaving)
			else{
				//stop alarms since vehicle has left before 2s are up
				if (camera_timer_has_started){
  800830:	d0a75917 	ldw	r2,-25244(gp)
  800834:	10000426 	beq	r2,zero,800848 <button_interrupt+0x1a4>
					alt_alarm_stop(&timer_camera);
  800838:	01002074 	movhi	r4,129
  80083c:	211cf804 	addi	r4,r4,29664
  800840:	080fc700 	call	80fc70 <alt_alarm_stop>
					camera_timer_has_started = 0;
  800844:	d0275915 	stw	zero,-25244(gp)
				}
				alt_alarm_stop(&timer_vehicle);
  800848:	01002074 	movhi	r4,129
  80084c:	211cf204 	addi	r4,r4,29640
  800850:	080fc700 	call	80fc70 <alt_alarm_stop>
				fprintf(uart,"Vehicle left\r\n");
  800854:	d0a76417 	ldw	r2,-25200(gp)
  800858:	100f883a 	mov	r7,r2
  80085c:	01800384 	movi	r6,14
  800860:	01400044 	movi	r5,1
  800864:	01002074 	movhi	r4,129
  800868:	210c9d04 	addi	r4,r4,12916
  80086c:	08024200 	call	802420 <fwrite>
				fprintf(uart,"Vehicle was in the intersection for %d ms.\r\n",count);
  800870:	d0a76417 	ldw	r2,-25200(gp)
  800874:	d0e76217 	ldw	r3,-25208(gp)
  800878:	180d883a 	mov	r6,r3
  80087c:	01402074 	movhi	r5,129
  800880:	294ca104 	addi	r5,r5,12932
  800884:	1009883a 	mov	r4,r2
  800888:	0801c2c0 	call	801c2c <fprintf>
				count = 0;
  80088c:	d0276215 	stw	zero,-25208(gp)
			}
		}
	}
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
  800890:	0007883a 	mov	r3,zero
  800894:	00804434 	movhi	r2,272
  800898:	10842b04 	addi	r2,r2,4268
  80089c:	10c00035 	stwio	r3,0(r2)
}
  8008a0:	0001883a 	nop
  8008a4:	e037883a 	mov	sp,fp
  8008a8:	dfc00117 	ldw	ra,4(sp)
  8008ac:	df000017 	ldw	fp,0(sp)
  8008b0:	dec00204 	addi	sp,sp,8
  8008b4:	f800283a 	ret

008008b8 <lcd_set_mode>:

//LCD writing function, pass in the current mode
int lcd_set_mode(int mode){
  8008b8:	defffd04 	addi	sp,sp,-12
  8008bc:	dfc00215 	stw	ra,8(sp)
  8008c0:	df000115 	stw	fp,4(sp)
  8008c4:	df000104 	addi	fp,sp,4
  8008c8:	e13fff15 	stw	r4,-4(fp)
	if (mode != mode_display) {
  8008cc:	d0a00117 	ldw	r2,-32764(gp)
  8008d0:	e0ffff17 	ldw	r3,-4(fp)
  8008d4:	18801226 	beq	r3,r2,800920 <lcd_set_mode+0x68>
		if(lcd != NULL){
  8008d8:	d0a76317 	ldw	r2,-25204(gp)
  8008dc:	10001026 	beq	r2,zero,800920 <lcd_set_mode+0x68>
			#define ESC 27
			#define CLEAR_LCD_STRING "[2J"
			fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  8008e0:	d0a76317 	ldw	r2,-25204(gp)
  8008e4:	01c02074 	movhi	r7,129
  8008e8:	39ccad04 	addi	r7,r7,12980
  8008ec:	018006c4 	movi	r6,27
  8008f0:	01402074 	movhi	r5,129
  8008f4:	294cae04 	addi	r5,r5,12984
  8008f8:	1009883a 	mov	r4,r2
  8008fc:	0801c2c0 	call	801c2c <fprintf>
			fprintf(lcd, "CURRENT MODE: %d\n", mode);
  800900:	d0a76317 	ldw	r2,-25204(gp)
  800904:	e1bfff17 	ldw	r6,-4(fp)
  800908:	01402074 	movhi	r5,129
  80090c:	294cb004 	addi	r5,r5,12992
  800910:	1009883a 	mov	r4,r2
  800914:	0801c2c0 	call	801c2c <fprintf>
			mode_display = mode; //set mode display state to prevent LCD flickering
  800918:	e0bfff17 	ldw	r2,-4(fp)
  80091c:	d0a00115 	stw	r2,-32764(gp)
		}
	}
	return 0;
  800920:	0005883a 	mov	r2,zero
}
  800924:	e037883a 	mov	sp,fp
  800928:	dfc00117 	ldw	ra,4(sp)
  80092c:	df000017 	ldw	fp,0(sp)
  800930:	dec00204 	addi	sp,sp,8
  800934:	f800283a 	ret

00800938 <simple_tlc>:

// Mode 1
// Simple controller with automatic lights
int simple_tlc(){
  800938:	defffd04 	addi	sp,sp,-12
  80093c:	dfc00215 	stw	ra,8(sp)
  800940:	df000115 	stw	fp,4(sp)
  800944:	df000104 	addi	fp,sp,4
	void* timerContext = 0;
  800948:	e03fff15 	stw	zero,-4(fp)
	//check for all possible states, starting timer on current state and setting outputs
	if (current_state1 == rr1_1){
  80094c:	d0a75b17 	ldw	r2,-25236(gp)
  800950:	1000101e 	bne	r2,zero,800994 <simple_tlc+0x5c>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100100); //turn RED-RED on
  800954:	00c00904 	movi	r3,36
  800958:	00804434 	movhi	r2,272
  80095c:	10841c04 	addi	r2,r2,4208
  800960:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800964:	d0a75817 	ldw	r2,-25248(gp)
  800968:	1000681e 	bne	r2,zero,800b0c <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, rrrr, simple_tlc_timer_isr, timerContext);
  80096c:	e1ffff17 	ldw	r7,-4(fp)
  800970:	01802034 	movhi	r6,128
  800974:	3180d104 	addi	r6,r6,836
  800978:	01407d04 	movi	r5,500
  80097c:	01002074 	movhi	r4,129
  800980:	211cec04 	addi	r4,r4,29616
  800984:	080ef600 	call	80ef60 <alt_alarm_start>
			timer_has_started = 1;
  800988:	00800044 	movi	r2,1
  80098c:	d0a75815 	stw	r2,-25248(gp)
  800990:	00005e06 	br	800b0c <simple_tlc+0x1d4>
		}
	}
	else if (current_state1 == gr_1){
  800994:	d0a75b17 	ldw	r2,-25236(gp)
  800998:	10800058 	cmpnei	r2,r2,1
  80099c:	1000101e 	bne	r2,zero,8009e0 <simple_tlc+0xa8>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100001); //turn GREEN-RED on
  8009a0:	00c00844 	movi	r3,33
  8009a4:	00804434 	movhi	r2,272
  8009a8:	10841c04 	addi	r2,r2,4208
  8009ac:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  8009b0:	d0a75817 	ldw	r2,-25248(gp)
  8009b4:	1000551e 	bne	r2,zero,800b0c <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, grrg, simple_tlc_timer_isr, timerContext);
  8009b8:	e1ffff17 	ldw	r7,-4(fp)
  8009bc:	01802034 	movhi	r6,128
  8009c0:	3180d104 	addi	r6,r6,836
  8009c4:	0145dc04 	movi	r5,6000
  8009c8:	01002074 	movhi	r4,129
  8009cc:	211cec04 	addi	r4,r4,29616
  8009d0:	080ef600 	call	80ef60 <alt_alarm_start>
			timer_has_started = 1;
  8009d4:	00800044 	movi	r2,1
  8009d8:	d0a75815 	stw	r2,-25248(gp)
  8009dc:	00004b06 	br	800b0c <simple_tlc+0x1d4>
		}
	}
	else if (current_state1 == yr_1){
  8009e0:	d0a75b17 	ldw	r2,-25236(gp)
  8009e4:	10800098 	cmpnei	r2,r2,2
  8009e8:	1000101e 	bne	r2,zero,800a2c <simple_tlc+0xf4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100010); //turn YELLOW-RED on
  8009ec:	00c00884 	movi	r3,34
  8009f0:	00804434 	movhi	r2,272
  8009f4:	10841c04 	addi	r2,r2,4208
  8009f8:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  8009fc:	d0a75817 	ldw	r2,-25248(gp)
  800a00:	1000421e 	bne	r2,zero,800b0c <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, yrry, simple_tlc_timer_isr, timerContext);
  800a04:	e1ffff17 	ldw	r7,-4(fp)
  800a08:	01802034 	movhi	r6,128
  800a0c:	3180d104 	addi	r6,r6,836
  800a10:	0141f404 	movi	r5,2000
  800a14:	01002074 	movhi	r4,129
  800a18:	211cec04 	addi	r4,r4,29616
  800a1c:	080ef600 	call	80ef60 <alt_alarm_start>
			timer_has_started = 1;
  800a20:	00800044 	movi	r2,1
  800a24:	d0a75815 	stw	r2,-25248(gp)
  800a28:	00003806 	br	800b0c <simple_tlc+0x1d4>
		}
	}
	else if (current_state1 == rr2_1){
  800a2c:	d0a75b17 	ldw	r2,-25236(gp)
  800a30:	108000d8 	cmpnei	r2,r2,3
  800a34:	1000101e 	bne	r2,zero,800a78 <simple_tlc+0x140>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100100); //turn RED-RED on
  800a38:	00c00904 	movi	r3,36
  800a3c:	00804434 	movhi	r2,272
  800a40:	10841c04 	addi	r2,r2,4208
  800a44:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800a48:	d0a75817 	ldw	r2,-25248(gp)
  800a4c:	10002f1e 	bne	r2,zero,800b0c <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, rrrr, simple_tlc_timer_isr, timerContext);
  800a50:	e1ffff17 	ldw	r7,-4(fp)
  800a54:	01802034 	movhi	r6,128
  800a58:	3180d104 	addi	r6,r6,836
  800a5c:	01407d04 	movi	r5,500
  800a60:	01002074 	movhi	r4,129
  800a64:	211cec04 	addi	r4,r4,29616
  800a68:	080ef600 	call	80ef60 <alt_alarm_start>
			timer_has_started = 1;
  800a6c:	00800044 	movi	r2,1
  800a70:	d0a75815 	stw	r2,-25248(gp)
  800a74:	00002506 	br	800b0c <simple_tlc+0x1d4>
		}
	}
	else if (current_state1 == rg_1){
  800a78:	d0a75b17 	ldw	r2,-25236(gp)
  800a7c:	10800118 	cmpnei	r2,r2,4
  800a80:	1000101e 	bne	r2,zero,800ac4 <simple_tlc+0x18c>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b001100); //turn RED-GREEN on
  800a84:	00c00304 	movi	r3,12
  800a88:	00804434 	movhi	r2,272
  800a8c:	10841c04 	addi	r2,r2,4208
  800a90:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800a94:	d0a75817 	ldw	r2,-25248(gp)
  800a98:	10001c1e 	bne	r2,zero,800b0c <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, grrg, simple_tlc_timer_isr, timerContext);
  800a9c:	e1ffff17 	ldw	r7,-4(fp)
  800aa0:	01802034 	movhi	r6,128
  800aa4:	3180d104 	addi	r6,r6,836
  800aa8:	0145dc04 	movi	r5,6000
  800aac:	01002074 	movhi	r4,129
  800ab0:	211cec04 	addi	r4,r4,29616
  800ab4:	080ef600 	call	80ef60 <alt_alarm_start>
			timer_has_started = 1;
  800ab8:	00800044 	movi	r2,1
  800abc:	d0a75815 	stw	r2,-25248(gp)
  800ac0:	00001206 	br	800b0c <simple_tlc+0x1d4>
		}
	}
	else if (current_state1 == ry_1){
  800ac4:	d0a75b17 	ldw	r2,-25236(gp)
  800ac8:	10800158 	cmpnei	r2,r2,5
  800acc:	10000f1e 	bne	r2,zero,800b0c <simple_tlc+0x1d4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b010100); //turn RED-YELLOW on
  800ad0:	00c00504 	movi	r3,20
  800ad4:	00804434 	movhi	r2,272
  800ad8:	10841c04 	addi	r2,r2,4208
  800adc:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800ae0:	d0a75817 	ldw	r2,-25248(gp)
  800ae4:	1000091e 	bne	r2,zero,800b0c <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, yrry, simple_tlc_timer_isr, timerContext);
  800ae8:	e1ffff17 	ldw	r7,-4(fp)
  800aec:	01802034 	movhi	r6,128
  800af0:	3180d104 	addi	r6,r6,836
  800af4:	0141f404 	movi	r5,2000
  800af8:	01002074 	movhi	r4,129
  800afc:	211cec04 	addi	r4,r4,29616
  800b00:	080ef600 	call	80ef60 <alt_alarm_start>
			timer_has_started = 1;
  800b04:	00800044 	movi	r2,1
  800b08:	d0a75815 	stw	r2,-25248(gp)
		}
	}
	return 0;
  800b0c:	0005883a 	mov	r2,zero
}
  800b10:	e037883a 	mov	sp,fp
  800b14:	dfc00117 	ldw	ra,4(sp)
  800b18:	df000017 	ldw	fp,0(sp)
  800b1c:	dec00204 	addi	sp,sp,8
  800b20:	f800283a 	ret

00800b24 <pedestrian_tlc>:

// Mode 2
// Allows pedestrian crossing button inputs
int pedestrian_tlc() {
  800b24:	defffd04 	addi	sp,sp,-12
  800b28:	dfc00215 	stw	ra,8(sp)
  800b2c:	df000115 	stw	fp,4(sp)
  800b30:	df000104 	addi	fp,sp,4
	void* timerContext = 0;
  800b34:	e03fff15 	stw	zero,-4(fp)
	//check for all possible states, starting timer on current state and setting outputs
	if (current_state2 == rr1_2){
  800b38:	d0a75d17 	ldw	r2,-25228(gp)
  800b3c:	1000101e 	bne	r2,zero,800b80 <pedestrian_tlc+0x5c>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
  800b40:	00c00904 	movi	r3,36
  800b44:	00804434 	movhi	r2,272
  800b48:	10841c04 	addi	r2,r2,4208
  800b4c:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800b50:	d0a75817 	ldw	r2,-25248(gp)
  800b54:	10008e1e 	bne	r2,zero,800d90 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, rrrr, pedestrian_tlc_timer_isr, timerContext);
  800b58:	e1ffff17 	ldw	r7,-4(fp)
  800b5c:	01802034 	movhi	r6,128
  800b60:	3180f504 	addi	r6,r6,980
  800b64:	01407d04 	movi	r5,500
  800b68:	01002074 	movhi	r4,129
  800b6c:	211cec04 	addi	r4,r4,29616
  800b70:	080ef600 	call	80ef60 <alt_alarm_start>
			timer_has_started = 1;
  800b74:	00800044 	movi	r2,1
  800b78:	d0a75815 	stw	r2,-25248(gp)
  800b7c:	00008406 	br	800d90 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == gr_2){
  800b80:	d0a75d17 	ldw	r2,-25228(gp)
  800b84:	10800058 	cmpnei	r2,r2,1
  800b88:	1000101e 	bne	r2,zero,800bcc <pedestrian_tlc+0xa8>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100001); //turn GREEN-RED on
  800b8c:	00c00844 	movi	r3,33
  800b90:	00804434 	movhi	r2,272
  800b94:	10841c04 	addi	r2,r2,4208
  800b98:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800b9c:	d0a75817 	ldw	r2,-25248(gp)
  800ba0:	10007b1e 	bne	r2,zero,800d90 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, grrg, pedestrian_tlc_timer_isr, timerContext);
  800ba4:	e1ffff17 	ldw	r7,-4(fp)
  800ba8:	01802034 	movhi	r6,128
  800bac:	3180f504 	addi	r6,r6,980
  800bb0:	0145dc04 	movi	r5,6000
  800bb4:	01002074 	movhi	r4,129
  800bb8:	211cec04 	addi	r4,r4,29616
  800bbc:	080ef600 	call	80ef60 <alt_alarm_start>
			timer_has_started = 1;
  800bc0:	00800044 	movi	r2,1
  800bc4:	d0a75815 	stw	r2,-25248(gp)
  800bc8:	00007106 	br	800d90 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == grp1_2){
  800bcc:	d0a75d17 	ldw	r2,-25228(gp)
  800bd0:	10800098 	cmpnei	r2,r2,2
  800bd4:	1000101e 	bne	r2,zero,800c18 <pedestrian_tlc+0xf4>
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b01100001); //turn GREEN-RED and PEDNS on
  800bd8:	00c01844 	movi	r3,97
  800bdc:	00804434 	movhi	r2,272
  800be0:	10841c04 	addi	r2,r2,4208
  800be4:	10c00035 	stwio	r3,0(r2)
			if (!(timer_has_started)){
  800be8:	d0a75817 	ldw	r2,-25248(gp)
  800bec:	1000681e 	bne	r2,zero,800d90 <pedestrian_tlc+0x26c>
				alt_alarm_start(&timer_simple, grrg, pedestrian_tlc_timer_isr, timerContext);
  800bf0:	e1ffff17 	ldw	r7,-4(fp)
  800bf4:	01802034 	movhi	r6,128
  800bf8:	3180f504 	addi	r6,r6,980
  800bfc:	0145dc04 	movi	r5,6000
  800c00:	01002074 	movhi	r4,129
  800c04:	211cec04 	addi	r4,r4,29616
  800c08:	080ef600 	call	80ef60 <alt_alarm_start>
				timer_has_started = 1;
  800c0c:	00800044 	movi	r2,1
  800c10:	d0a75815 	stw	r2,-25248(gp)
  800c14:	00005e06 	br	800d90 <pedestrian_tlc+0x26c>
			}
	}
	else if (current_state2 == yr_2){
  800c18:	d0a75d17 	ldw	r2,-25228(gp)
  800c1c:	108000d8 	cmpnei	r2,r2,3
  800c20:	1000101e 	bne	r2,zero,800c64 <pedestrian_tlc+0x140>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100010); //turn YELLOW-RED on
  800c24:	00c00884 	movi	r3,34
  800c28:	00804434 	movhi	r2,272
  800c2c:	10841c04 	addi	r2,r2,4208
  800c30:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800c34:	d0a75817 	ldw	r2,-25248(gp)
  800c38:	1000551e 	bne	r2,zero,800d90 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, yrry, pedestrian_tlc_timer_isr, timerContext);
  800c3c:	e1ffff17 	ldw	r7,-4(fp)
  800c40:	01802034 	movhi	r6,128
  800c44:	3180f504 	addi	r6,r6,980
  800c48:	0141f404 	movi	r5,2000
  800c4c:	01002074 	movhi	r4,129
  800c50:	211cec04 	addi	r4,r4,29616
  800c54:	080ef600 	call	80ef60 <alt_alarm_start>
			timer_has_started = 1;
  800c58:	00800044 	movi	r2,1
  800c5c:	d0a75815 	stw	r2,-25248(gp)
  800c60:	00004b06 	br	800d90 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == rr2_2){
  800c64:	d0a75d17 	ldw	r2,-25228(gp)
  800c68:	10800118 	cmpnei	r2,r2,4
  800c6c:	1000101e 	bne	r2,zero,800cb0 <pedestrian_tlc+0x18c>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
  800c70:	00c00904 	movi	r3,36
  800c74:	00804434 	movhi	r2,272
  800c78:	10841c04 	addi	r2,r2,4208
  800c7c:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800c80:	d0a75817 	ldw	r2,-25248(gp)
  800c84:	1000421e 	bne	r2,zero,800d90 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, rrrr, pedestrian_tlc_timer_isr, timerContext);
  800c88:	e1ffff17 	ldw	r7,-4(fp)
  800c8c:	01802034 	movhi	r6,128
  800c90:	3180f504 	addi	r6,r6,980
  800c94:	01407d04 	movi	r5,500
  800c98:	01002074 	movhi	r4,129
  800c9c:	211cec04 	addi	r4,r4,29616
  800ca0:	080ef600 	call	80ef60 <alt_alarm_start>
			timer_has_started = 1;
  800ca4:	00800044 	movi	r2,1
  800ca8:	d0a75815 	stw	r2,-25248(gp)
  800cac:	00003806 	br	800d90 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == rg_2){
  800cb0:	d0a75d17 	ldw	r2,-25228(gp)
  800cb4:	10800158 	cmpnei	r2,r2,5
  800cb8:	1000101e 	bne	r2,zero,800cfc <pedestrian_tlc+0x1d8>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00001100); //turn RED-GREEN on
  800cbc:	00c00304 	movi	r3,12
  800cc0:	00804434 	movhi	r2,272
  800cc4:	10841c04 	addi	r2,r2,4208
  800cc8:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800ccc:	d0a75817 	ldw	r2,-25248(gp)
  800cd0:	10002f1e 	bne	r2,zero,800d90 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, grrg, pedestrian_tlc_timer_isr, timerContext);
  800cd4:	e1ffff17 	ldw	r7,-4(fp)
  800cd8:	01802034 	movhi	r6,128
  800cdc:	3180f504 	addi	r6,r6,980
  800ce0:	0145dc04 	movi	r5,6000
  800ce4:	01002074 	movhi	r4,129
  800ce8:	211cec04 	addi	r4,r4,29616
  800cec:	080ef600 	call	80ef60 <alt_alarm_start>
			timer_has_started = 1;
  800cf0:	00800044 	movi	r2,1
  800cf4:	d0a75815 	stw	r2,-25248(gp)
  800cf8:	00002506 	br	800d90 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == rgp2_2){
  800cfc:	d0a75d17 	ldw	r2,-25228(gp)
  800d00:	10800198 	cmpnei	r2,r2,6
  800d04:	1000101e 	bne	r2,zero,800d48 <pedestrian_tlc+0x224>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b10001100); //turn RED-GREEN and PEDEW on
  800d08:	00c02304 	movi	r3,140
  800d0c:	00804434 	movhi	r2,272
  800d10:	10841c04 	addi	r2,r2,4208
  800d14:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800d18:	d0a75817 	ldw	r2,-25248(gp)
  800d1c:	10001c1e 	bne	r2,zero,800d90 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, grrg, pedestrian_tlc_timer_isr, timerContext);
  800d20:	e1ffff17 	ldw	r7,-4(fp)
  800d24:	01802034 	movhi	r6,128
  800d28:	3180f504 	addi	r6,r6,980
  800d2c:	0145dc04 	movi	r5,6000
  800d30:	01002074 	movhi	r4,129
  800d34:	211cec04 	addi	r4,r4,29616
  800d38:	080ef600 	call	80ef60 <alt_alarm_start>
			timer_has_started = 1;
  800d3c:	00800044 	movi	r2,1
  800d40:	d0a75815 	stw	r2,-25248(gp)
  800d44:	00001206 	br	800d90 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == ry_2){
  800d48:	d0a75d17 	ldw	r2,-25228(gp)
  800d4c:	108001d8 	cmpnei	r2,r2,7
  800d50:	10000f1e 	bne	r2,zero,800d90 <pedestrian_tlc+0x26c>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00010100); //turn RED-YELLOW on
  800d54:	00c00504 	movi	r3,20
  800d58:	00804434 	movhi	r2,272
  800d5c:	10841c04 	addi	r2,r2,4208
  800d60:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800d64:	d0a75817 	ldw	r2,-25248(gp)
  800d68:	1000091e 	bne	r2,zero,800d90 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, yrry, pedestrian_tlc_timer_isr, timerContext);
  800d6c:	e1ffff17 	ldw	r7,-4(fp)
  800d70:	01802034 	movhi	r6,128
  800d74:	3180f504 	addi	r6,r6,980
  800d78:	0141f404 	movi	r5,2000
  800d7c:	01002074 	movhi	r4,129
  800d80:	211cec04 	addi	r4,r4,29616
  800d84:	080ef600 	call	80ef60 <alt_alarm_start>
			timer_has_started = 1;
  800d88:	00800044 	movi	r2,1
  800d8c:	d0a75815 	stw	r2,-25248(gp)
		}
	}
	return 0;
  800d90:	0005883a 	mov	r2,zero
}
  800d94:	e037883a 	mov	sp,fp
  800d98:	dfc00117 	ldw	ra,4(sp)
  800d9c:	df000017 	ldw	fp,0(sp)
  800da0:	dec00204 	addi	sp,sp,8
  800da4:	f800283a 	ret

00800da8 <configurable_tlc>:

// Mode 3/4
// Allows the timer to be changed via UART
int configurable_tlc(){
  800da8:	deffe904 	addi	sp,sp,-92
  800dac:	dfc01615 	stw	ra,88(sp)
  800db0:	df001515 	stw	fp,84(sp)
  800db4:	dc001415 	stw	r16,80(sp)
  800db8:	df001504 	addi	fp,sp,84
	void* timerContext = 0;
  800dbc:	e03ff115 	stw	zero,-60(fp)
	unsigned int switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  800dc0:	00804434 	movhi	r2,272
  800dc4:	10842404 	addi	r2,r2,4240
  800dc8:	10800037 	ldwio	r2,0(r2)
  800dcc:	e0bff215 	stw	r2,-56(fp)
	const char comma[2] = ",";
  800dd0:	00800b04 	movi	r2,44
  800dd4:	e0bff40d 	sth	r2,-48(fp)
	//check for all possible states, starting timer on current state and setting outputs
	if (current_state2 == rr1_2){
  800dd8:	d0a75d17 	ldw	r2,-25228(gp)
  800ddc:	1000ef1e 	bne	r2,zero,80119c <configurable_tlc+0x3f4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
  800de0:	00c00904 	movi	r3,36
  800de4:	00804434 	movhi	r2,272
  800de8:	10841c04 	addi	r2,r2,4208
  800dec:	10c00035 	stwio	r3,0(r2)
		//check switch value to see if there are new timer values
		switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  800df0:	00804434 	movhi	r2,272
  800df4:	10842404 	addi	r2,r2,4240
  800df8:	10800037 	ldwio	r2,0(r2)
  800dfc:	e0bff215 	stw	r2,-56(fp)

		if (switch_value & (1<<17)){
  800e00:	e0bff217 	ldw	r2,-56(fp)
  800e04:	108000ac 	andhi	r2,r2,2
  800e08:	1000d726 	beq	r2,zero,801168 <configurable_tlc+0x3c0>
			fprintf(uart,"Configuration mode, disable switch 17 then input new timeout values:\r\n");
  800e0c:	d0a76417 	ldw	r2,-25200(gp)
  800e10:	100f883a 	mov	r7,r2
  800e14:	01801184 	movi	r6,70
  800e18:	01400044 	movi	r5,1
  800e1c:	01002074 	movhi	r4,129
  800e20:	210cb504 	addi	r4,r4,13012
  800e24:	08024200 	call	802420 <fwrite>
			//if switch 17 indicates configuration mode, block until complete valid string is received
			unsigned int strcomplete = 0;
  800e28:	e03feb15 	stw	zero,-84(fp)
			unsigned int i = 0; //index for string retrieved from UART
  800e2c:	e03fec15 	stw	zero,-80(fp)
			char **splitstrings; //pointer to array of c-strings
			int numbers[10]; //array to store timeout values received from UART

			//allocate enough memory for array of c-strings
			splitstrings = (char**)malloc(10);
  800e30:	01000284 	movi	r4,10
  800e34:	08026100 	call	802610 <malloc>
  800e38:	e0bff315 	stw	r2,-52(fp)
			//allocate enough memory for each c-string in array
			for (int j = 0; j < sizeof(splitstrings); ++j) {
  800e3c:	e03fed15 	stw	zero,-76(fp)
  800e40:	00000c06 	br	800e74 <configurable_tlc+0xcc>
				splitstrings[j] = (char*)malloc(10);
  800e44:	e0bfed17 	ldw	r2,-76(fp)
  800e48:	1085883a 	add	r2,r2,r2
  800e4c:	1085883a 	add	r2,r2,r2
  800e50:	1007883a 	mov	r3,r2
  800e54:	e0bff317 	ldw	r2,-52(fp)
  800e58:	10e1883a 	add	r16,r2,r3
  800e5c:	01000284 	movi	r4,10
  800e60:	08026100 	call	802610 <malloc>
  800e64:	80800015 	stw	r2,0(r16)
			int numbers[10]; //array to store timeout values received from UART

			//allocate enough memory for array of c-strings
			splitstrings = (char**)malloc(10);
			//allocate enough memory for each c-string in array
			for (int j = 0; j < sizeof(splitstrings); ++j) {
  800e68:	e0bfed17 	ldw	r2,-76(fp)
  800e6c:	10800044 	addi	r2,r2,1
  800e70:	e0bfed15 	stw	r2,-76(fp)
  800e74:	e0bfed17 	ldw	r2,-76(fp)
  800e78:	10800130 	cmpltui	r2,r2,4
  800e7c:	103ff11e 	bne	r2,zero,800e44 <__alt_mem_onchip_mem+0xff780e44>
				splitstrings[j] = (char*)malloc(10);
			}
			//block code and get input from UART stream
			while (strcomplete == 0){
  800e80:	0000ab06 	br	801130 <configurable_tlc+0x388>
				config_values[i] = fgetc(uart);
  800e84:	d0a76417 	ldw	r2,-25200(gp)
  800e88:	1009883a 	mov	r4,r2
  800e8c:	08016d00 	call	8016d0 <fgetc>
  800e90:	1009883a 	mov	r4,r2
  800e94:	00802074 	movhi	r2,129
  800e98:	109cfe04 	addi	r2,r2,29688
  800e9c:	e0ffec17 	ldw	r3,-80(fp)
  800ea0:	10c5883a 	add	r2,r2,r3
  800ea4:	11000005 	stb	r4,0(r2)
				//echo back to both UART and console
				printf("%c",config_values[i]);
  800ea8:	00802074 	movhi	r2,129
  800eac:	109cfe04 	addi	r2,r2,29688
  800eb0:	e0ffec17 	ldw	r3,-80(fp)
  800eb4:	10c5883a 	add	r2,r2,r3
  800eb8:	10800003 	ldbu	r2,0(r2)
  800ebc:	10803fcc 	andi	r2,r2,255
  800ec0:	1080201c 	xori	r2,r2,128
  800ec4:	10bfe004 	addi	r2,r2,-128
  800ec8:	1009883a 	mov	r4,r2
  800ecc:	08031a80 	call	8031a8 <putchar>
				fprintf(uart,"%c",config_values[i]);
  800ed0:	d1276417 	ldw	r4,-25200(gp)
  800ed4:	00802074 	movhi	r2,129
  800ed8:	109cfe04 	addi	r2,r2,29688
  800edc:	e0ffec17 	ldw	r3,-80(fp)
  800ee0:	10c5883a 	add	r2,r2,r3
  800ee4:	10800003 	ldbu	r2,0(r2)
  800ee8:	10803fcc 	andi	r2,r2,255
  800eec:	1080201c 	xori	r2,r2,128
  800ef0:	10bfe004 	addi	r2,r2,-128
  800ef4:	200b883a 	mov	r5,r4
  800ef8:	1009883a 	mov	r4,r2
  800efc:	0801c940 	call	801c94 <fputc>
				++i;
  800f00:	e0bfec17 	ldw	r2,-80(fp)
  800f04:	10800044 	addi	r2,r2,1
  800f08:	e0bfec15 	stw	r2,-80(fp)
				if (config_values[i-1] == '\n'){
  800f0c:	e0bfec17 	ldw	r2,-80(fp)
  800f10:	10ffffc4 	addi	r3,r2,-1
  800f14:	00802074 	movhi	r2,129
  800f18:	109cfe04 	addi	r2,r2,29688
  800f1c:	10c5883a 	add	r2,r2,r3
  800f20:	10800003 	ldbu	r2,0(r2)
  800f24:	10803fcc 	andi	r2,r2,255
  800f28:	1080201c 	xori	r2,r2,128
  800f2c:	10bfe004 	addi	r2,r2,-128
  800f30:	10800298 	cmpnei	r2,r2,10
  800f34:	10007e1e 	bne	r2,zero,801130 <configurable_tlc+0x388>

					//add NULL to end of string to indicate end of string
					config_values[i] = '\0';
  800f38:	00802074 	movhi	r2,129
  800f3c:	109cfe04 	addi	r2,r2,29688
  800f40:	e0ffec17 	ldw	r3,-80(fp)
  800f44:	10c5883a 	add	r2,r2,r3
  800f48:	10000005 	stb	zero,0(r2)
					//move iterator to position 0 (effectively flushing the buffer)
					i = 0;
  800f4c:	e03fec15 	stw	zero,-80(fp)
					unsigned int k = 1; //iterator for array of c-strings
  800f50:	00800044 	movi	r2,1
  800f54:	e0bfee15 	stw	r2,-72(fp)

					//use strtok to split the UART string into separate strings from between the commas
					splitstrings[0] = strtok(config_values,comma);
  800f58:	e0bff404 	addi	r2,fp,-48
  800f5c:	100b883a 	mov	r5,r2
  800f60:	01002074 	movhi	r4,129
  800f64:	211cfe04 	addi	r4,r4,29688
  800f68:	08035c80 	call	8035c8 <strtok>
  800f6c:	1007883a 	mov	r3,r2
  800f70:	e0bff317 	ldw	r2,-52(fp)
  800f74:	10c00015 	stw	r3,0(r2)
					while (splitstrings[k-1] != NULL) {
  800f78:	00000e06 	br	800fb4 <configurable_tlc+0x20c>
							splitstrings[k] = strtok(NULL, comma);
  800f7c:	e0bfee17 	ldw	r2,-72(fp)
  800f80:	1085883a 	add	r2,r2,r2
  800f84:	1085883a 	add	r2,r2,r2
  800f88:	1007883a 	mov	r3,r2
  800f8c:	e0bff317 	ldw	r2,-52(fp)
  800f90:	10e1883a 	add	r16,r2,r3
  800f94:	e0bff404 	addi	r2,fp,-48
  800f98:	100b883a 	mov	r5,r2
  800f9c:	0009883a 	mov	r4,zero
  800fa0:	08035c80 	call	8035c8 <strtok>
  800fa4:	80800015 	stw	r2,0(r16)
							++k;
  800fa8:	e0bfee17 	ldw	r2,-72(fp)
  800fac:	10800044 	addi	r2,r2,1
  800fb0:	e0bfee15 	stw	r2,-72(fp)
					i = 0;
					unsigned int k = 1; //iterator for array of c-strings

					//use strtok to split the UART string into separate strings from between the commas
					splitstrings[0] = strtok(config_values,comma);
					while (splitstrings[k-1] != NULL) {
  800fb4:	e0ffee17 	ldw	r3,-72(fp)
  800fb8:	00900034 	movhi	r2,16384
  800fbc:	10bfffc4 	addi	r2,r2,-1
  800fc0:	1885883a 	add	r2,r3,r2
  800fc4:	1085883a 	add	r2,r2,r2
  800fc8:	1085883a 	add	r2,r2,r2
  800fcc:	1007883a 	mov	r3,r2
  800fd0:	e0bff317 	ldw	r2,-52(fp)
  800fd4:	10c5883a 	add	r2,r2,r3
  800fd8:	10800017 	ldw	r2,0(r2)
  800fdc:	103fe71e 	bne	r2,zero,800f7c <__alt_mem_onchip_mem+0xff780f7c>
							splitstrings[k] = strtok(NULL, comma);
							++k;
					}

					k = 0; //reset iterator for array of c-strings
  800fe0:	e03fee15 	stw	zero,-72(fp)
					//do base-10 conversion of split strings to integers using strtol
					//this returns 0 for an invalid integer, so we are assuming a 0ms timeout is invalid
					while (splitstrings[k] != NULL){
  800fe4:	00001606 	br	801040 <configurable_tlc+0x298>
						numbers[k] = strtol(splitstrings[k],NULL,10);
  800fe8:	e0bfee17 	ldw	r2,-72(fp)
  800fec:	1085883a 	add	r2,r2,r2
  800ff0:	1085883a 	add	r2,r2,r2
  800ff4:	1007883a 	mov	r3,r2
  800ff8:	e0bff317 	ldw	r2,-52(fp)
  800ffc:	10c5883a 	add	r2,r2,r3
  801000:	10800017 	ldw	r2,0(r2)
  801004:	01800284 	movi	r6,10
  801008:	000b883a 	mov	r5,zero
  80100c:	1009883a 	mov	r4,r2
  801010:	08038bc0 	call	8038bc <strtol>
  801014:	1007883a 	mov	r3,r2
  801018:	e0bfee17 	ldw	r2,-72(fp)
  80101c:	1085883a 	add	r2,r2,r2
  801020:	1085883a 	add	r2,r2,r2
  801024:	e13feb04 	addi	r4,fp,-84
  801028:	2085883a 	add	r2,r4,r2
  80102c:	10800a04 	addi	r2,r2,40
  801030:	10c00015 	stw	r3,0(r2)
						++k;
  801034:	e0bfee17 	ldw	r2,-72(fp)
  801038:	10800044 	addi	r2,r2,1
  80103c:	e0bfee15 	stw	r2,-72(fp)
					}

					k = 0; //reset iterator for array of c-strings
					//do base-10 conversion of split strings to integers using strtol
					//this returns 0 for an invalid integer, so we are assuming a 0ms timeout is invalid
					while (splitstrings[k] != NULL){
  801040:	e0bfee17 	ldw	r2,-72(fp)
  801044:	1085883a 	add	r2,r2,r2
  801048:	1085883a 	add	r2,r2,r2
  80104c:	1007883a 	mov	r3,r2
  801050:	e0bff317 	ldw	r2,-52(fp)
  801054:	10c5883a 	add	r2,r2,r3
  801058:	10800017 	ldw	r2,0(r2)
  80105c:	103fe21e 	bne	r2,zero,800fe8 <__alt_mem_onchip_mem+0xff780fe8>
						numbers[k] = strtol(splitstrings[k],NULL,10);
						++k;
					}
					//check if we have 6 valid in-range numbers
					if (k == 6){
  801060:	e0bfee17 	ldw	r2,-72(fp)
  801064:	10800198 	cmpnei	r2,r2,6
  801068:	10002a1e 	bne	r2,zero,801114 <configurable_tlc+0x36c>
						unsigned int notinrange = 0;
  80106c:	e03fef15 	stw	zero,-68(fp)
						for (int j = 0; j < 6; ++j){
  801070:	e03ff015 	stw	zero,-64(fp)
  801074:	00001706 	br	8010d4 <configurable_tlc+0x32c>
							if ((numbers[j] <= 0) || (numbers[j] > 9999)){
  801078:	e0bff017 	ldw	r2,-64(fp)
  80107c:	1085883a 	add	r2,r2,r2
  801080:	1085883a 	add	r2,r2,r2
  801084:	e0ffeb04 	addi	r3,fp,-84
  801088:	1885883a 	add	r2,r3,r2
  80108c:	10800a04 	addi	r2,r2,40
  801090:	10800017 	ldw	r2,0(r2)
  801094:	0080090e 	bge	zero,r2,8010bc <configurable_tlc+0x314>
  801098:	e0bff017 	ldw	r2,-64(fp)
  80109c:	1085883a 	add	r2,r2,r2
  8010a0:	1085883a 	add	r2,r2,r2
  8010a4:	e13feb04 	addi	r4,fp,-84
  8010a8:	2085883a 	add	r2,r4,r2
  8010ac:	10800a04 	addi	r2,r2,40
  8010b0:	10800017 	ldw	r2,0(r2)
  8010b4:	1089c410 	cmplti	r2,r2,10000
  8010b8:	1000031e 	bne	r2,zero,8010c8 <configurable_tlc+0x320>
								notinrange = 1;
  8010bc:	00800044 	movi	r2,1
  8010c0:	e0bfef15 	stw	r2,-68(fp)
								break;
  8010c4:	00000606 	br	8010e0 <configurable_tlc+0x338>
						++k;
					}
					//check if we have 6 valid in-range numbers
					if (k == 6){
						unsigned int notinrange = 0;
						for (int j = 0; j < 6; ++j){
  8010c8:	e0bff017 	ldw	r2,-64(fp)
  8010cc:	10800044 	addi	r2,r2,1
  8010d0:	e0bff015 	stw	r2,-64(fp)
  8010d4:	e0bff017 	ldw	r2,-64(fp)
  8010d8:	10800190 	cmplti	r2,r2,6
  8010dc:	103fe61e 	bne	r2,zero,801078 <__alt_mem_onchip_mem+0xff781078>
							if ((numbers[j] <= 0) || (numbers[j] > 9999)){
								notinrange = 1;
								break;
							}
						}
						if (!(notinrange)){
  8010e0:	e0bfef17 	ldw	r2,-68(fp)
  8010e4:	1000031e 	bne	r2,zero,8010f4 <configurable_tlc+0x34c>
							strcomplete = 1;
  8010e8:	00800044 	movi	r2,1
  8010ec:	e0bfeb15 	stw	r2,-84(fp)
  8010f0:	00000f06 	br	801130 <configurable_tlc+0x388>
						}
						else{
							fprintf(uart,"Invalid input, please re-enter numbers:\r\n");
  8010f4:	d0a76417 	ldw	r2,-25200(gp)
  8010f8:	100f883a 	mov	r7,r2
  8010fc:	01800a44 	movi	r6,41
  801100:	01400044 	movi	r5,1
  801104:	01002074 	movhi	r4,129
  801108:	210cc704 	addi	r4,r4,13084
  80110c:	08024200 	call	802420 <fwrite>
  801110:	00000706 	br	801130 <configurable_tlc+0x388>
						}
					}
					else{
						fprintf(uart,"Not enough numbers input, please re-enter numbers:\r\n");
  801114:	d0a76417 	ldw	r2,-25200(gp)
  801118:	100f883a 	mov	r7,r2
  80111c:	01800d04 	movi	r6,52
  801120:	01400044 	movi	r5,1
  801124:	01002074 	movhi	r4,129
  801128:	210cd204 	addi	r4,r4,13128
  80112c:	08024200 	call	802420 <fwrite>
			//allocate enough memory for each c-string in array
			for (int j = 0; j < sizeof(splitstrings); ++j) {
				splitstrings[j] = (char*)malloc(10);
			}
			//block code and get input from UART stream
			while (strcomplete == 0){
  801130:	e0bfeb17 	ldw	r2,-84(fp)
  801134:	103f5326 	beq	r2,zero,800e84 <__alt_mem_onchip_mem+0xff780e84>
						fprintf(uart,"Not enough numbers input, please re-enter numbers:\r\n");
					}
				}
			}
			//since numbers have been discovered to be valid, assign them to the timer controlling variables
			t1 = numbers[0];
  801138:	e0bff517 	ldw	r2,-44(fp)
  80113c:	d0a00215 	stw	r2,-32760(gp)
			t2 = numbers[1];
  801140:	e0bff617 	ldw	r2,-40(fp)
  801144:	d0a00315 	stw	r2,-32756(gp)
			t3 = numbers[2];
  801148:	e0bff717 	ldw	r2,-36(fp)
  80114c:	d0a00415 	stw	r2,-32752(gp)
			t4 = numbers[3];
  801150:	e0bff817 	ldw	r2,-32(fp)
  801154:	d0a00515 	stw	r2,-32748(gp)
			t5 = numbers[4];
  801158:	e0bff917 	ldw	r2,-28(fp)
  80115c:	d0a00615 	stw	r2,-32744(gp)
			t6 = numbers[5];
  801160:	e0bffa17 	ldw	r2,-24(fp)
  801164:	d0a00715 	stw	r2,-32740(gp)
		}
		if (!(timer_has_started)){
  801168:	d0a75817 	ldw	r2,-25248(gp)
  80116c:	1000961e 	bne	r2,zero,8013c8 <configurable_tlc+0x620>
			alt_alarm_start(&timer_simple, t1, pedestrian_tlc_timer_isr, timerContext);
  801170:	d0a00217 	ldw	r2,-32760(gp)
  801174:	e1fff117 	ldw	r7,-60(fp)
  801178:	01802034 	movhi	r6,128
  80117c:	3180f504 	addi	r6,r6,980
  801180:	100b883a 	mov	r5,r2
  801184:	01002074 	movhi	r4,129
  801188:	211cec04 	addi	r4,r4,29616
  80118c:	080ef600 	call	80ef60 <alt_alarm_start>
			timer_has_started = 1;
  801190:	00800044 	movi	r2,1
  801194:	d0a75815 	stw	r2,-25248(gp)
  801198:	00008b06 	br	8013c8 <configurable_tlc+0x620>
		}
	}
	else if (current_state2 == gr_2){
  80119c:	d0a75d17 	ldw	r2,-25228(gp)
  8011a0:	10800058 	cmpnei	r2,r2,1
  8011a4:	1000111e 	bne	r2,zero,8011ec <configurable_tlc+0x444>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100001); //turn GREEN-RED on
  8011a8:	00c00844 	movi	r3,33
  8011ac:	00804434 	movhi	r2,272
  8011b0:	10841c04 	addi	r2,r2,4208
  8011b4:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  8011b8:	d0a75817 	ldw	r2,-25248(gp)
  8011bc:	1000821e 	bne	r2,zero,8013c8 <configurable_tlc+0x620>
			alt_alarm_start(&timer_simple, t2, pedestrian_tlc_timer_isr, timerContext);
  8011c0:	d0a00317 	ldw	r2,-32756(gp)
  8011c4:	e1fff117 	ldw	r7,-60(fp)
  8011c8:	01802034 	movhi	r6,128
  8011cc:	3180f504 	addi	r6,r6,980
  8011d0:	100b883a 	mov	r5,r2
  8011d4:	01002074 	movhi	r4,129
  8011d8:	211cec04 	addi	r4,r4,29616
  8011dc:	080ef600 	call	80ef60 <alt_alarm_start>
			timer_has_started = 1;
  8011e0:	00800044 	movi	r2,1
  8011e4:	d0a75815 	stw	r2,-25248(gp)
  8011e8:	00007706 	br	8013c8 <configurable_tlc+0x620>
		}
	}
	else if (current_state2 == grp1_2){
  8011ec:	d0a75d17 	ldw	r2,-25228(gp)
  8011f0:	10800098 	cmpnei	r2,r2,2
  8011f4:	1000111e 	bne	r2,zero,80123c <configurable_tlc+0x494>
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b01100001); //turn GREEN-RED and PEDNS on
  8011f8:	00c01844 	movi	r3,97
  8011fc:	00804434 	movhi	r2,272
  801200:	10841c04 	addi	r2,r2,4208
  801204:	10c00035 	stwio	r3,0(r2)
			if (!(timer_has_started)){
  801208:	d0a75817 	ldw	r2,-25248(gp)
  80120c:	10006e1e 	bne	r2,zero,8013c8 <configurable_tlc+0x620>
				alt_alarm_start(&timer_simple, t2, pedestrian_tlc_timer_isr, timerContext);
  801210:	d0a00317 	ldw	r2,-32756(gp)
  801214:	e1fff117 	ldw	r7,-60(fp)
  801218:	01802034 	movhi	r6,128
  80121c:	3180f504 	addi	r6,r6,980
  801220:	100b883a 	mov	r5,r2
  801224:	01002074 	movhi	r4,129
  801228:	211cec04 	addi	r4,r4,29616
  80122c:	080ef600 	call	80ef60 <alt_alarm_start>
				timer_has_started = 1;
  801230:	00800044 	movi	r2,1
  801234:	d0a75815 	stw	r2,-25248(gp)
  801238:	00006306 	br	8013c8 <configurable_tlc+0x620>
			}
	}
	else if (current_state2 == yr_2){
  80123c:	d0a75d17 	ldw	r2,-25228(gp)
  801240:	108000d8 	cmpnei	r2,r2,3
  801244:	1000111e 	bne	r2,zero,80128c <configurable_tlc+0x4e4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100010); //turn YELLOW-RED on
  801248:	00c00884 	movi	r3,34
  80124c:	00804434 	movhi	r2,272
  801250:	10841c04 	addi	r2,r2,4208
  801254:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801258:	d0a75817 	ldw	r2,-25248(gp)
  80125c:	10005a1e 	bne	r2,zero,8013c8 <configurable_tlc+0x620>
			alt_alarm_start(&timer_simple, t3, pedestrian_tlc_timer_isr, timerContext);
  801260:	d0a00417 	ldw	r2,-32752(gp)
  801264:	e1fff117 	ldw	r7,-60(fp)
  801268:	01802034 	movhi	r6,128
  80126c:	3180f504 	addi	r6,r6,980
  801270:	100b883a 	mov	r5,r2
  801274:	01002074 	movhi	r4,129
  801278:	211cec04 	addi	r4,r4,29616
  80127c:	080ef600 	call	80ef60 <alt_alarm_start>
			timer_has_started = 1;
  801280:	00800044 	movi	r2,1
  801284:	d0a75815 	stw	r2,-25248(gp)
  801288:	00004f06 	br	8013c8 <configurable_tlc+0x620>
		}
	}
	else if (current_state2 == rr2_2){
  80128c:	d0a75d17 	ldw	r2,-25228(gp)
  801290:	10800118 	cmpnei	r2,r2,4
  801294:	1000111e 	bne	r2,zero,8012dc <configurable_tlc+0x534>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
  801298:	00c00904 	movi	r3,36
  80129c:	00804434 	movhi	r2,272
  8012a0:	10841c04 	addi	r2,r2,4208
  8012a4:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  8012a8:	d0a75817 	ldw	r2,-25248(gp)
  8012ac:	1000461e 	bne	r2,zero,8013c8 <configurable_tlc+0x620>
			alt_alarm_start(&timer_simple, t4, pedestrian_tlc_timer_isr, timerContext);
  8012b0:	d0a00517 	ldw	r2,-32748(gp)
  8012b4:	e1fff117 	ldw	r7,-60(fp)
  8012b8:	01802034 	movhi	r6,128
  8012bc:	3180f504 	addi	r6,r6,980
  8012c0:	100b883a 	mov	r5,r2
  8012c4:	01002074 	movhi	r4,129
  8012c8:	211cec04 	addi	r4,r4,29616
  8012cc:	080ef600 	call	80ef60 <alt_alarm_start>
			timer_has_started = 1;
  8012d0:	00800044 	movi	r2,1
  8012d4:	d0a75815 	stw	r2,-25248(gp)
  8012d8:	00003b06 	br	8013c8 <configurable_tlc+0x620>
		}
	}
	else if (current_state2 == rg_2){
  8012dc:	d0a75d17 	ldw	r2,-25228(gp)
  8012e0:	10800158 	cmpnei	r2,r2,5
  8012e4:	1000111e 	bne	r2,zero,80132c <configurable_tlc+0x584>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00001100); //turn RED-GREEN on
  8012e8:	00c00304 	movi	r3,12
  8012ec:	00804434 	movhi	r2,272
  8012f0:	10841c04 	addi	r2,r2,4208
  8012f4:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  8012f8:	d0a75817 	ldw	r2,-25248(gp)
  8012fc:	1000321e 	bne	r2,zero,8013c8 <configurable_tlc+0x620>
			alt_alarm_start(&timer_simple, t5, pedestrian_tlc_timer_isr, timerContext);
  801300:	d0a00617 	ldw	r2,-32744(gp)
  801304:	e1fff117 	ldw	r7,-60(fp)
  801308:	01802034 	movhi	r6,128
  80130c:	3180f504 	addi	r6,r6,980
  801310:	100b883a 	mov	r5,r2
  801314:	01002074 	movhi	r4,129
  801318:	211cec04 	addi	r4,r4,29616
  80131c:	080ef600 	call	80ef60 <alt_alarm_start>
			timer_has_started = 1;
  801320:	00800044 	movi	r2,1
  801324:	d0a75815 	stw	r2,-25248(gp)
  801328:	00002706 	br	8013c8 <configurable_tlc+0x620>
		}
	}
	else if (current_state2 == rgp2_2){
  80132c:	d0a75d17 	ldw	r2,-25228(gp)
  801330:	10800198 	cmpnei	r2,r2,6
  801334:	1000111e 	bne	r2,zero,80137c <configurable_tlc+0x5d4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b10001100); //turn RED-GREEN and PEDEW on
  801338:	00c02304 	movi	r3,140
  80133c:	00804434 	movhi	r2,272
  801340:	10841c04 	addi	r2,r2,4208
  801344:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801348:	d0a75817 	ldw	r2,-25248(gp)
  80134c:	10001e1e 	bne	r2,zero,8013c8 <configurable_tlc+0x620>
			alt_alarm_start(&timer_simple, t5, pedestrian_tlc_timer_isr, timerContext);
  801350:	d0a00617 	ldw	r2,-32744(gp)
  801354:	e1fff117 	ldw	r7,-60(fp)
  801358:	01802034 	movhi	r6,128
  80135c:	3180f504 	addi	r6,r6,980
  801360:	100b883a 	mov	r5,r2
  801364:	01002074 	movhi	r4,129
  801368:	211cec04 	addi	r4,r4,29616
  80136c:	080ef600 	call	80ef60 <alt_alarm_start>
			timer_has_started = 1;
  801370:	00800044 	movi	r2,1
  801374:	d0a75815 	stw	r2,-25248(gp)
  801378:	00001306 	br	8013c8 <configurable_tlc+0x620>
		}
	}
	else if (current_state2 == ry_2){
  80137c:	d0a75d17 	ldw	r2,-25228(gp)
  801380:	108001d8 	cmpnei	r2,r2,7
  801384:	1000101e 	bne	r2,zero,8013c8 <configurable_tlc+0x620>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00010100); //turn RED-YELLOW on
  801388:	00c00504 	movi	r3,20
  80138c:	00804434 	movhi	r2,272
  801390:	10841c04 	addi	r2,r2,4208
  801394:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  801398:	d0a75817 	ldw	r2,-25248(gp)
  80139c:	10000a1e 	bne	r2,zero,8013c8 <configurable_tlc+0x620>
			alt_alarm_start(&timer_simple, t6, pedestrian_tlc_timer_isr, timerContext);
  8013a0:	d0a00717 	ldw	r2,-32740(gp)
  8013a4:	e1fff117 	ldw	r7,-60(fp)
  8013a8:	01802034 	movhi	r6,128
  8013ac:	3180f504 	addi	r6,r6,980
  8013b0:	100b883a 	mov	r5,r2
  8013b4:	01002074 	movhi	r4,129
  8013b8:	211cec04 	addi	r4,r4,29616
  8013bc:	080ef600 	call	80ef60 <alt_alarm_start>
			timer_has_started = 1;
  8013c0:	00800044 	movi	r2,1
  8013c4:	d0a75815 	stw	r2,-25248(gp)
		}
	}
	return 0;
  8013c8:	0005883a 	mov	r2,zero
}
  8013cc:	e6ffff04 	addi	sp,fp,-4
  8013d0:	dfc00217 	ldw	ra,8(sp)
  8013d4:	df000117 	ldw	fp,4(sp)
  8013d8:	dc000017 	ldw	r16,0(sp)
  8013dc:	dec00304 	addi	sp,sp,12
  8013e0:	f800283a 	ret

008013e4 <main>:

//main function
int main() {
  8013e4:	defffc04 	addi	sp,sp,-16
  8013e8:	dfc00315 	stw	ra,12(sp)
  8013ec:	df000215 	stw	fp,8(sp)
  8013f0:	df000204 	addi	fp,sp,8
	unsigned int switch_value = 0;
  8013f4:	e03ffe15 	stw	zero,-8(fp)
	void* context = 0;
  8013f8:	e03fff15 	stw	zero,-4(fp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
  8013fc:	0007883a 	mov	r3,zero
  801400:	00804434 	movhi	r2,272
  801404:	10842b04 	addi	r2,r2,4268
  801408:	10c00035 	stwio	r3,0(r2)
	//enable interrupts for all buttons
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0x7);
  80140c:	00c001c4 	movi	r3,7
  801410:	00804434 	movhi	r2,272
  801414:	10842a04 	addi	r2,r2,4264
  801418:	10c00035 	stwio	r3,0(r2)
	//register the button interrupt ISR
	alt_irq_register(BUTTONS_IRQ, context, button_interrupt);
  80141c:	01802034 	movhi	r6,128
  801420:	3181a904 	addi	r6,r6,1700
  801424:	e17fff17 	ldw	r5,-4(fp)
  801428:	01000104 	movi	r4,4
  80142c:	080f2b00 	call	80f2b0 <alt_irq_register>
	//turn on the LCD and UART
	lcd = fopen(LCD_NAME, "w");
  801430:	01402074 	movhi	r5,129
  801434:	294ce004 	addi	r5,r5,13184
  801438:	01002074 	movhi	r4,129
  80143c:	210ce104 	addi	r4,r4,13188
  801440:	0801bec0 	call	801bec <fopen>
  801444:	d0a76315 	stw	r2,-25204(gp)
	uart = fopen(UART_NAME, "r+"); //Open the UART file for both reading and writing (for mode 3 and 4)
  801448:	01402074 	movhi	r5,129
  80144c:	294ce404 	addi	r5,r5,13200
  801450:	01002074 	movhi	r4,129
  801454:	210ce504 	addi	r4,r4,13204
  801458:	0801bec0 	call	801bec <fopen>
  80145c:	d0a76415 	stw	r2,-25200(gp)

	while(1) {
		//read switch value and bitmask to check specific switches (descending priority)
		switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  801460:	00804434 	movhi	r2,272
  801464:	10842404 	addi	r2,r2,4240
  801468:	10800037 	ldwio	r2,0(r2)
  80146c:	e0bffe15 	stw	r2,-8(fp)
		//set mode request depending on switch configuration
		//priority encoded (descending order, i.e. mode 4 is highest and mode 1 is lowest)
		if ((1<<3 & switch_value))
  801470:	e0bffe17 	ldw	r2,-8(fp)
  801474:	1080020c 	andi	r2,r2,8
  801478:	10000326 	beq	r2,zero,801488 <main+0xa4>
			mode_request = 4;
  80147c:	00800104 	movi	r2,4
  801480:	d0a75a15 	stw	r2,-25240(gp)
  801484:	00001306 	br	8014d4 <main+0xf0>
		else if ((1<<2 & switch_value))
  801488:	e0bffe17 	ldw	r2,-8(fp)
  80148c:	1080010c 	andi	r2,r2,4
  801490:	10000326 	beq	r2,zero,8014a0 <main+0xbc>
			mode_request = 3;
  801494:	008000c4 	movi	r2,3
  801498:	d0a75a15 	stw	r2,-25240(gp)
  80149c:	00000d06 	br	8014d4 <main+0xf0>
		else if ((1<<1 & switch_value))
  8014a0:	e0bffe17 	ldw	r2,-8(fp)
  8014a4:	1080008c 	andi	r2,r2,2
  8014a8:	10000326 	beq	r2,zero,8014b8 <main+0xd4>
			mode_request = 2;
  8014ac:	00800084 	movi	r2,2
  8014b0:	d0a75a15 	stw	r2,-25240(gp)
  8014b4:	00000706 	br	8014d4 <main+0xf0>
		else if ((1<<0 & switch_value))
  8014b8:	e0bffe17 	ldw	r2,-8(fp)
  8014bc:	1080004c 	andi	r2,r2,1
  8014c0:	10000326 	beq	r2,zero,8014d0 <main+0xec>
			mode_request = 1;
  8014c4:	00800044 	movi	r2,1
  8014c8:	d0a75a15 	stw	r2,-25240(gp)
  8014cc:	00000106 	br	8014d4 <main+0xf0>
		else
			mode_request = 0;
  8014d0:	d0275a15 	stw	zero,-25240(gp)

		//if there is a new mode request:
		//check if we are at a safe state (corresponding to the mode we are in)
		//if safe, then change mode (and make sure to reset all states and interrupt flags)
		if (current_mode != mode_request) {
  8014d4:	d0e00017 	ldw	r3,-32768(gp)
  8014d8:	d0a75a17 	ldw	r2,-25240(gp)
  8014dc:	18803c26 	beq	r3,r2,8015d0 <main+0x1ec>
			switch(current_mode){
  8014e0:	d0a00017 	ldw	r2,-32768(gp)
  8014e4:	10c000a0 	cmpeqi	r3,r2,2
  8014e8:	1800131e 	bne	r3,zero,801538 <main+0x154>
  8014ec:	10c000c8 	cmpgei	r3,r2,3
  8014f0:	1800031e 	bne	r3,zero,801500 <main+0x11c>
  8014f4:	10800060 	cmpeqi	r2,r2,1
  8014f8:	1000061e 	bne	r2,zero,801514 <main+0x130>
  8014fc:	00002906 	br	8015a4 <main+0x1c0>
  801500:	10c000e0 	cmpeqi	r3,r2,3
  801504:	1800151e 	bne	r3,zero,80155c <main+0x178>
  801508:	10800120 	cmpeqi	r2,r2,4
  80150c:	10001c1e 	bne	r2,zero,801580 <main+0x19c>
  801510:	00002406 	br	8015a4 <main+0x1c0>
			case 1:
				if ((current_state1 == rr1_1) || (current_state1 == rr2_1)){
  801514:	d0a75b17 	ldw	r2,-25236(gp)
  801518:	10000326 	beq	r2,zero,801528 <main+0x144>
  80151c:	d0a75b17 	ldw	r2,-25236(gp)
  801520:	108000d8 	cmpnei	r2,r2,3
  801524:	1000231e 	bne	r2,zero,8015b4 <main+0x1d0>
					current_mode = mode_request;
  801528:	d0a75a17 	ldw	r2,-25240(gp)
  80152c:	d0a00015 	stw	r2,-32768(gp)
					reset_volatiles();
  801530:	08002900 	call	800290 <reset_volatiles>
				}
				break;
  801534:	00001f06 	br	8015b4 <main+0x1d0>
			case 2:
				if ((current_state2 == rr1_2) || (current_state2 == rr2_2)){
  801538:	d0a75d17 	ldw	r2,-25228(gp)
  80153c:	10000326 	beq	r2,zero,80154c <main+0x168>
  801540:	d0a75d17 	ldw	r2,-25228(gp)
  801544:	10800118 	cmpnei	r2,r2,4
  801548:	10001c1e 	bne	r2,zero,8015bc <main+0x1d8>
					current_mode = mode_request;
  80154c:	d0a75a17 	ldw	r2,-25240(gp)
  801550:	d0a00015 	stw	r2,-32768(gp)
					reset_volatiles();
  801554:	08002900 	call	800290 <reset_volatiles>
				}
				break;
  801558:	00001806 	br	8015bc <main+0x1d8>
			case 3:
				if ((current_state2 == rr1_2) || (current_state2 == rr2_2)){
  80155c:	d0a75d17 	ldw	r2,-25228(gp)
  801560:	10000326 	beq	r2,zero,801570 <main+0x18c>
  801564:	d0a75d17 	ldw	r2,-25228(gp)
  801568:	10800118 	cmpnei	r2,r2,4
  80156c:	1000151e 	bne	r2,zero,8015c4 <main+0x1e0>
					current_mode = mode_request;
  801570:	d0a75a17 	ldw	r2,-25240(gp)
  801574:	d0a00015 	stw	r2,-32768(gp)
					reset_volatiles();
  801578:	08002900 	call	800290 <reset_volatiles>
				}
				break;
  80157c:	00001106 	br	8015c4 <main+0x1e0>
			case 4:
				if ((current_state2 == rr1_2) || (current_state2 == rr2_2)){
  801580:	d0a75d17 	ldw	r2,-25228(gp)
  801584:	10000326 	beq	r2,zero,801594 <main+0x1b0>
  801588:	d0a75d17 	ldw	r2,-25228(gp)
  80158c:	10800118 	cmpnei	r2,r2,4
  801590:	10000e1e 	bne	r2,zero,8015cc <main+0x1e8>
					current_mode = mode_request;
  801594:	d0a75a17 	ldw	r2,-25240(gp)
  801598:	d0a00015 	stw	r2,-32768(gp)
					reset_volatiles();
  80159c:	08002900 	call	800290 <reset_volatiles>
				}
				break;
  8015a0:	00000a06 	br	8015cc <main+0x1e8>
			default: //starting state/debug mode
				current_mode = mode_request;
  8015a4:	d0a75a17 	ldw	r2,-25240(gp)
  8015a8:	d0a00015 	stw	r2,-32768(gp)
				reset_volatiles();
  8015ac:	08002900 	call	800290 <reset_volatiles>
  8015b0:	00000706 	br	8015d0 <main+0x1ec>
			case 1:
				if ((current_state1 == rr1_1) || (current_state1 == rr2_1)){
					current_mode = mode_request;
					reset_volatiles();
				}
				break;
  8015b4:	0001883a 	nop
  8015b8:	00000506 	br	8015d0 <main+0x1ec>
			case 2:
				if ((current_state2 == rr1_2) || (current_state2 == rr2_2)){
					current_mode = mode_request;
					reset_volatiles();
				}
				break;
  8015bc:	0001883a 	nop
  8015c0:	00000306 	br	8015d0 <main+0x1ec>
			case 3:
				if ((current_state2 == rr1_2) || (current_state2 == rr2_2)){
					current_mode = mode_request;
					reset_volatiles();
				}
				break;
  8015c4:	0001883a 	nop
  8015c8:	00000106 	br	8015d0 <main+0x1ec>
			case 4:
				if ((current_state2 == rr1_2) || (current_state2 == rr2_2)){
					current_mode = mode_request;
					reset_volatiles();
				}
				break;
  8015cc:	0001883a 	nop
				reset_volatiles();
			}
		}

		//call the process function corresponding to the current mode and output to LCD
		switch(current_mode){
  8015d0:	d0a00017 	ldw	r2,-32768(gp)
  8015d4:	10c000a0 	cmpeqi	r3,r2,2
  8015d8:	18000e1e 	bne	r3,zero,801614 <main+0x230>
  8015dc:	10c000c8 	cmpgei	r3,r2,3
  8015e0:	1800031e 	bne	r3,zero,8015f0 <main+0x20c>
  8015e4:	10800060 	cmpeqi	r2,r2,1
  8015e8:	1000061e 	bne	r2,zero,801604 <main+0x220>
  8015ec:	00001506 	br	801644 <main+0x260>
  8015f0:	10c000e0 	cmpeqi	r3,r2,3
  8015f4:	18000b1e 	bne	r3,zero,801624 <main+0x240>
  8015f8:	10800120 	cmpeqi	r2,r2,4
  8015fc:	10000d1e 	bne	r2,zero,801634 <main+0x250>
  801600:	00001006 	br	801644 <main+0x260>
		case 1:
			simple_tlc();
  801604:	08009380 	call	800938 <simple_tlc>
			lcd_set_mode(1);
  801608:	01000044 	movi	r4,1
  80160c:	08008b80 	call	8008b8 <lcd_set_mode>
			break;
  801610:	00001206 	br	80165c <main+0x278>
		case 2:
			pedestrian_tlc();
  801614:	0800b240 	call	800b24 <pedestrian_tlc>
			lcd_set_mode(2);
  801618:	01000084 	movi	r4,2
  80161c:	08008b80 	call	8008b8 <lcd_set_mode>
			break;
  801620:	00000e06 	br	80165c <main+0x278>
		case 3:
			configurable_tlc();
  801624:	0800da80 	call	800da8 <configurable_tlc>
			lcd_set_mode(3);
  801628:	010000c4 	movi	r4,3
  80162c:	08008b80 	call	8008b8 <lcd_set_mode>
			break;
  801630:	00000a06 	br	80165c <main+0x278>
		case 4:
			//is identical to mode 3 so just call mode 3 function
			configurable_tlc();
  801634:	0800da80 	call	800da8 <configurable_tlc>
			lcd_set_mode(4);
  801638:	01000104 	movi	r4,4
  80163c:	08008b80 	call	8008b8 <lcd_set_mode>
			break;
  801640:	00000606 	br	80165c <main+0x278>
		default:
			//debug/starting state (mode 0)
			lcd_set_mode(0);
  801644:	0009883a 	mov	r4,zero
  801648:	08008b80 	call	8008b8 <lcd_set_mode>
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b111111); //all LEDs on
  80164c:	00c00fc4 	movi	r3,63
  801650:	00804434 	movhi	r2,272
  801654:	10841c04 	addi	r2,r2,4208
  801658:	10c00035 	stwio	r3,0(r2)
		}
	}
  80165c:	003f8006 	br	801460 <__alt_mem_onchip_mem+0xff781460>

00801660 <_fgetc_r>:
  801660:	defffd04 	addi	sp,sp,-12
  801664:	dc000115 	stw	r16,4(sp)
  801668:	dfc00215 	stw	ra,8(sp)
  80166c:	2021883a 	mov	r16,r4
  801670:	20000226 	beq	r4,zero,80167c <_fgetc_r+0x1c>
  801674:	20800e17 	ldw	r2,56(r4)
  801678:	10000c26 	beq	r2,zero,8016ac <_fgetc_r+0x4c>
  80167c:	28800117 	ldw	r2,4(r5)
  801680:	10bfffc4 	addi	r2,r2,-1
  801684:	28800115 	stw	r2,4(r5)
  801688:	10000c16 	blt	r2,zero,8016bc <_fgetc_r+0x5c>
  80168c:	28800017 	ldw	r2,0(r5)
  801690:	10c00044 	addi	r3,r2,1
  801694:	28c00015 	stw	r3,0(r5)
  801698:	10800003 	ldbu	r2,0(r2)
  80169c:	dfc00217 	ldw	ra,8(sp)
  8016a0:	dc000117 	ldw	r16,4(sp)
  8016a4:	dec00304 	addi	sp,sp,12
  8016a8:	f800283a 	ret
  8016ac:	d9400015 	stw	r5,0(sp)
  8016b0:	0801aa80 	call	801aa8 <__sinit>
  8016b4:	d9400017 	ldw	r5,0(sp)
  8016b8:	003ff006 	br	80167c <__alt_mem_onchip_mem+0xff78167c>
  8016bc:	8009883a 	mov	r4,r16
  8016c0:	dfc00217 	ldw	ra,8(sp)
  8016c4:	dc000117 	ldw	r16,4(sp)
  8016c8:	dec00304 	addi	sp,sp,12
  8016cc:	08033b01 	jmpi	8033b0 <__srget_r>

008016d0 <fgetc>:
  8016d0:	00802074 	movhi	r2,129
  8016d4:	defffd04 	addi	sp,sp,-12
  8016d8:	10957804 	addi	r2,r2,21984
  8016dc:	dc400115 	stw	r17,4(sp)
  8016e0:	14400017 	ldw	r17,0(r2)
  8016e4:	dc000015 	stw	r16,0(sp)
  8016e8:	dfc00215 	stw	ra,8(sp)
  8016ec:	2021883a 	mov	r16,r4
  8016f0:	88000226 	beq	r17,zero,8016fc <fgetc+0x2c>
  8016f4:	88800e17 	ldw	r2,56(r17)
  8016f8:	10000d26 	beq	r2,zero,801730 <fgetc+0x60>
  8016fc:	80800117 	ldw	r2,4(r16)
  801700:	10bfffc4 	addi	r2,r2,-1
  801704:	80800115 	stw	r2,4(r16)
  801708:	10000c16 	blt	r2,zero,80173c <fgetc+0x6c>
  80170c:	80800017 	ldw	r2,0(r16)
  801710:	10c00044 	addi	r3,r2,1
  801714:	80c00015 	stw	r3,0(r16)
  801718:	10800003 	ldbu	r2,0(r2)
  80171c:	dfc00217 	ldw	ra,8(sp)
  801720:	dc400117 	ldw	r17,4(sp)
  801724:	dc000017 	ldw	r16,0(sp)
  801728:	dec00304 	addi	sp,sp,12
  80172c:	f800283a 	ret
  801730:	8809883a 	mov	r4,r17
  801734:	0801aa80 	call	801aa8 <__sinit>
  801738:	003ff006 	br	8016fc <__alt_mem_onchip_mem+0xff7816fc>
  80173c:	800b883a 	mov	r5,r16
  801740:	8809883a 	mov	r4,r17
  801744:	dfc00217 	ldw	ra,8(sp)
  801748:	dc400117 	ldw	r17,4(sp)
  80174c:	dc000017 	ldw	r16,0(sp)
  801750:	dec00304 	addi	sp,sp,12
  801754:	08033b01 	jmpi	8033b0 <__srget_r>

00801758 <__fp_unlock>:
  801758:	0005883a 	mov	r2,zero
  80175c:	f800283a 	ret

00801760 <_cleanup_r>:
  801760:	01402034 	movhi	r5,128
  801764:	295de404 	addi	r5,r5,30608
  801768:	08022901 	jmpi	802290 <_fwalk_reent>

0080176c <__sinit.part.1>:
  80176c:	defff704 	addi	sp,sp,-36
  801770:	00c02034 	movhi	r3,128
  801774:	dfc00815 	stw	ra,32(sp)
  801778:	ddc00715 	stw	r23,28(sp)
  80177c:	dd800615 	stw	r22,24(sp)
  801780:	dd400515 	stw	r21,20(sp)
  801784:	dd000415 	stw	r20,16(sp)
  801788:	dcc00315 	stw	r19,12(sp)
  80178c:	dc800215 	stw	r18,8(sp)
  801790:	dc400115 	stw	r17,4(sp)
  801794:	dc000015 	stw	r16,0(sp)
  801798:	18c5d804 	addi	r3,r3,5984
  80179c:	24000117 	ldw	r16,4(r4)
  8017a0:	20c00f15 	stw	r3,60(r4)
  8017a4:	2080bb04 	addi	r2,r4,748
  8017a8:	00c000c4 	movi	r3,3
  8017ac:	20c0b915 	stw	r3,740(r4)
  8017b0:	2080ba15 	stw	r2,744(r4)
  8017b4:	2000b815 	stw	zero,736(r4)
  8017b8:	05c00204 	movi	r23,8
  8017bc:	00800104 	movi	r2,4
  8017c0:	2025883a 	mov	r18,r4
  8017c4:	b80d883a 	mov	r6,r23
  8017c8:	81001704 	addi	r4,r16,92
  8017cc:	000b883a 	mov	r5,zero
  8017d0:	80000015 	stw	zero,0(r16)
  8017d4:	80000115 	stw	zero,4(r16)
  8017d8:	80000215 	stw	zero,8(r16)
  8017dc:	8080030d 	sth	r2,12(r16)
  8017e0:	80001915 	stw	zero,100(r16)
  8017e4:	8000038d 	sth	zero,14(r16)
  8017e8:	80000415 	stw	zero,16(r16)
  8017ec:	80000515 	stw	zero,20(r16)
  8017f0:	80000615 	stw	zero,24(r16)
  8017f4:	0802e440 	call	802e44 <memset>
  8017f8:	05802034 	movhi	r22,128
  8017fc:	94400217 	ldw	r17,8(r18)
  801800:	05402034 	movhi	r21,128
  801804:	05002034 	movhi	r20,128
  801808:	04c02034 	movhi	r19,128
  80180c:	b58d2304 	addi	r22,r22,13452
  801810:	ad4d3a04 	addi	r21,r21,13544
  801814:	a50d5904 	addi	r20,r20,13668
  801818:	9ccd7004 	addi	r19,r19,13760
  80181c:	85800815 	stw	r22,32(r16)
  801820:	85400915 	stw	r21,36(r16)
  801824:	85000a15 	stw	r20,40(r16)
  801828:	84c00b15 	stw	r19,44(r16)
  80182c:	84000715 	stw	r16,28(r16)
  801830:	00800284 	movi	r2,10
  801834:	8880030d 	sth	r2,12(r17)
  801838:	00800044 	movi	r2,1
  80183c:	b80d883a 	mov	r6,r23
  801840:	89001704 	addi	r4,r17,92
  801844:	000b883a 	mov	r5,zero
  801848:	88000015 	stw	zero,0(r17)
  80184c:	88000115 	stw	zero,4(r17)
  801850:	88000215 	stw	zero,8(r17)
  801854:	88001915 	stw	zero,100(r17)
  801858:	8880038d 	sth	r2,14(r17)
  80185c:	88000415 	stw	zero,16(r17)
  801860:	88000515 	stw	zero,20(r17)
  801864:	88000615 	stw	zero,24(r17)
  801868:	0802e440 	call	802e44 <memset>
  80186c:	94000317 	ldw	r16,12(r18)
  801870:	00800484 	movi	r2,18
  801874:	8c400715 	stw	r17,28(r17)
  801878:	8d800815 	stw	r22,32(r17)
  80187c:	8d400915 	stw	r21,36(r17)
  801880:	8d000a15 	stw	r20,40(r17)
  801884:	8cc00b15 	stw	r19,44(r17)
  801888:	8080030d 	sth	r2,12(r16)
  80188c:	00800084 	movi	r2,2
  801890:	80000015 	stw	zero,0(r16)
  801894:	80000115 	stw	zero,4(r16)
  801898:	80000215 	stw	zero,8(r16)
  80189c:	80001915 	stw	zero,100(r16)
  8018a0:	8080038d 	sth	r2,14(r16)
  8018a4:	80000415 	stw	zero,16(r16)
  8018a8:	80000515 	stw	zero,20(r16)
  8018ac:	80000615 	stw	zero,24(r16)
  8018b0:	b80d883a 	mov	r6,r23
  8018b4:	000b883a 	mov	r5,zero
  8018b8:	81001704 	addi	r4,r16,92
  8018bc:	0802e440 	call	802e44 <memset>
  8018c0:	00800044 	movi	r2,1
  8018c4:	84000715 	stw	r16,28(r16)
  8018c8:	85800815 	stw	r22,32(r16)
  8018cc:	85400915 	stw	r21,36(r16)
  8018d0:	85000a15 	stw	r20,40(r16)
  8018d4:	84c00b15 	stw	r19,44(r16)
  8018d8:	90800e15 	stw	r2,56(r18)
  8018dc:	dfc00817 	ldw	ra,32(sp)
  8018e0:	ddc00717 	ldw	r23,28(sp)
  8018e4:	dd800617 	ldw	r22,24(sp)
  8018e8:	dd400517 	ldw	r21,20(sp)
  8018ec:	dd000417 	ldw	r20,16(sp)
  8018f0:	dcc00317 	ldw	r19,12(sp)
  8018f4:	dc800217 	ldw	r18,8(sp)
  8018f8:	dc400117 	ldw	r17,4(sp)
  8018fc:	dc000017 	ldw	r16,0(sp)
  801900:	dec00904 	addi	sp,sp,36
  801904:	f800283a 	ret

00801908 <__fp_lock>:
  801908:	0005883a 	mov	r2,zero
  80190c:	f800283a 	ret

00801910 <__sfmoreglue>:
  801910:	defffc04 	addi	sp,sp,-16
  801914:	dc400115 	stw	r17,4(sp)
  801918:	2c7fffc4 	addi	r17,r5,-1
  80191c:	8c401a24 	muli	r17,r17,104
  801920:	dc800215 	stw	r18,8(sp)
  801924:	2825883a 	mov	r18,r5
  801928:	89401d04 	addi	r5,r17,116
  80192c:	dc000015 	stw	r16,0(sp)
  801930:	dfc00315 	stw	ra,12(sp)
  801934:	08026380 	call	802638 <_malloc_r>
  801938:	1021883a 	mov	r16,r2
  80193c:	10000726 	beq	r2,zero,80195c <__sfmoreglue+0x4c>
  801940:	11000304 	addi	r4,r2,12
  801944:	10000015 	stw	zero,0(r2)
  801948:	14800115 	stw	r18,4(r2)
  80194c:	11000215 	stw	r4,8(r2)
  801950:	89801a04 	addi	r6,r17,104
  801954:	000b883a 	mov	r5,zero
  801958:	0802e440 	call	802e44 <memset>
  80195c:	8005883a 	mov	r2,r16
  801960:	dfc00317 	ldw	ra,12(sp)
  801964:	dc800217 	ldw	r18,8(sp)
  801968:	dc400117 	ldw	r17,4(sp)
  80196c:	dc000017 	ldw	r16,0(sp)
  801970:	dec00404 	addi	sp,sp,16
  801974:	f800283a 	ret

00801978 <__sfp>:
  801978:	defffb04 	addi	sp,sp,-20
  80197c:	dc000015 	stw	r16,0(sp)
  801980:	04002074 	movhi	r16,129
  801984:	84157704 	addi	r16,r16,21980
  801988:	dcc00315 	stw	r19,12(sp)
  80198c:	2027883a 	mov	r19,r4
  801990:	81000017 	ldw	r4,0(r16)
  801994:	dfc00415 	stw	ra,16(sp)
  801998:	dc800215 	stw	r18,8(sp)
  80199c:	20800e17 	ldw	r2,56(r4)
  8019a0:	dc400115 	stw	r17,4(sp)
  8019a4:	1000021e 	bne	r2,zero,8019b0 <__sfp+0x38>
  8019a8:	080176c0 	call	80176c <__sinit.part.1>
  8019ac:	81000017 	ldw	r4,0(r16)
  8019b0:	2480b804 	addi	r18,r4,736
  8019b4:	047fffc4 	movi	r17,-1
  8019b8:	91000117 	ldw	r4,4(r18)
  8019bc:	94000217 	ldw	r16,8(r18)
  8019c0:	213fffc4 	addi	r4,r4,-1
  8019c4:	20000a16 	blt	r4,zero,8019f0 <__sfp+0x78>
  8019c8:	8080030f 	ldh	r2,12(r16)
  8019cc:	10000c26 	beq	r2,zero,801a00 <__sfp+0x88>
  8019d0:	80c01d04 	addi	r3,r16,116
  8019d4:	00000206 	br	8019e0 <__sfp+0x68>
  8019d8:	18bfe60f 	ldh	r2,-104(r3)
  8019dc:	10000826 	beq	r2,zero,801a00 <__sfp+0x88>
  8019e0:	213fffc4 	addi	r4,r4,-1
  8019e4:	1c3ffd04 	addi	r16,r3,-12
  8019e8:	18c01a04 	addi	r3,r3,104
  8019ec:	247ffa1e 	bne	r4,r17,8019d8 <__alt_mem_onchip_mem+0xff7819d8>
  8019f0:	90800017 	ldw	r2,0(r18)
  8019f4:	10001d26 	beq	r2,zero,801a6c <__sfp+0xf4>
  8019f8:	1025883a 	mov	r18,r2
  8019fc:	003fee06 	br	8019b8 <__alt_mem_onchip_mem+0xff7819b8>
  801a00:	00bfffc4 	movi	r2,-1
  801a04:	8080038d 	sth	r2,14(r16)
  801a08:	00800044 	movi	r2,1
  801a0c:	8080030d 	sth	r2,12(r16)
  801a10:	80001915 	stw	zero,100(r16)
  801a14:	80000015 	stw	zero,0(r16)
  801a18:	80000215 	stw	zero,8(r16)
  801a1c:	80000115 	stw	zero,4(r16)
  801a20:	80000415 	stw	zero,16(r16)
  801a24:	80000515 	stw	zero,20(r16)
  801a28:	80000615 	stw	zero,24(r16)
  801a2c:	01800204 	movi	r6,8
  801a30:	000b883a 	mov	r5,zero
  801a34:	81001704 	addi	r4,r16,92
  801a38:	0802e440 	call	802e44 <memset>
  801a3c:	8005883a 	mov	r2,r16
  801a40:	80000c15 	stw	zero,48(r16)
  801a44:	80000d15 	stw	zero,52(r16)
  801a48:	80001115 	stw	zero,68(r16)
  801a4c:	80001215 	stw	zero,72(r16)
  801a50:	dfc00417 	ldw	ra,16(sp)
  801a54:	dcc00317 	ldw	r19,12(sp)
  801a58:	dc800217 	ldw	r18,8(sp)
  801a5c:	dc400117 	ldw	r17,4(sp)
  801a60:	dc000017 	ldw	r16,0(sp)
  801a64:	dec00504 	addi	sp,sp,20
  801a68:	f800283a 	ret
  801a6c:	01400104 	movi	r5,4
  801a70:	9809883a 	mov	r4,r19
  801a74:	08019100 	call	801910 <__sfmoreglue>
  801a78:	90800015 	stw	r2,0(r18)
  801a7c:	103fde1e 	bne	r2,zero,8019f8 <__alt_mem_onchip_mem+0xff7819f8>
  801a80:	00800304 	movi	r2,12
  801a84:	98800015 	stw	r2,0(r19)
  801a88:	0005883a 	mov	r2,zero
  801a8c:	003ff006 	br	801a50 <__alt_mem_onchip_mem+0xff781a50>

00801a90 <_cleanup>:
  801a90:	00802074 	movhi	r2,129
  801a94:	10957704 	addi	r2,r2,21980
  801a98:	11000017 	ldw	r4,0(r2)
  801a9c:	01402034 	movhi	r5,128
  801aa0:	295de404 	addi	r5,r5,30608
  801aa4:	08022901 	jmpi	802290 <_fwalk_reent>

00801aa8 <__sinit>:
  801aa8:	20800e17 	ldw	r2,56(r4)
  801aac:	10000126 	beq	r2,zero,801ab4 <__sinit+0xc>
  801ab0:	f800283a 	ret
  801ab4:	080176c1 	jmpi	80176c <__sinit.part.1>

00801ab8 <__sfp_lock_acquire>:
  801ab8:	f800283a 	ret

00801abc <__sfp_lock_release>:
  801abc:	f800283a 	ret

00801ac0 <__sinit_lock_acquire>:
  801ac0:	f800283a 	ret

00801ac4 <__sinit_lock_release>:
  801ac4:	f800283a 	ret

00801ac8 <__fp_lock_all>:
  801ac8:	00802074 	movhi	r2,129
  801acc:	10957804 	addi	r2,r2,21984
  801ad0:	11000017 	ldw	r4,0(r2)
  801ad4:	01402034 	movhi	r5,128
  801ad8:	29464204 	addi	r5,r5,6408
  801adc:	08021cc1 	jmpi	8021cc <_fwalk>

00801ae0 <__fp_unlock_all>:
  801ae0:	00802074 	movhi	r2,129
  801ae4:	10957804 	addi	r2,r2,21984
  801ae8:	11000017 	ldw	r4,0(r2)
  801aec:	01402034 	movhi	r5,128
  801af0:	2945d604 	addi	r5,r5,5976
  801af4:	08021cc1 	jmpi	8021cc <_fwalk>

00801af8 <_fopen_r>:
  801af8:	defffa04 	addi	sp,sp,-24
  801afc:	3005883a 	mov	r2,r6
  801b00:	dcc00415 	stw	r19,16(sp)
  801b04:	d80d883a 	mov	r6,sp
  801b08:	2827883a 	mov	r19,r5
  801b0c:	100b883a 	mov	r5,r2
  801b10:	dc800315 	stw	r18,12(sp)
  801b14:	dfc00515 	stw	ra,20(sp)
  801b18:	dc400215 	stw	r17,8(sp)
  801b1c:	dc000115 	stw	r16,4(sp)
  801b20:	2025883a 	mov	r18,r4
  801b24:	0807b3c0 	call	807b3c <__sflags>
  801b28:	10002726 	beq	r2,zero,801bc8 <_fopen_r+0xd0>
  801b2c:	9009883a 	mov	r4,r18
  801b30:	1023883a 	mov	r17,r2
  801b34:	08019780 	call	801978 <__sfp>
  801b38:	1021883a 	mov	r16,r2
  801b3c:	10002226 	beq	r2,zero,801bc8 <_fopen_r+0xd0>
  801b40:	d9800017 	ldw	r6,0(sp)
  801b44:	01c06d84 	movi	r7,438
  801b48:	980b883a 	mov	r5,r19
  801b4c:	9009883a 	mov	r4,r18
  801b50:	0802f6c0 	call	802f6c <_open_r>
  801b54:	10001916 	blt	r2,zero,801bbc <_fopen_r+0xc4>
  801b58:	8080038d 	sth	r2,14(r16)
  801b5c:	00802034 	movhi	r2,128
  801b60:	108d2304 	addi	r2,r2,13452
  801b64:	80800815 	stw	r2,32(r16)
  801b68:	00802034 	movhi	r2,128
  801b6c:	108d3a04 	addi	r2,r2,13544
  801b70:	80800915 	stw	r2,36(r16)
  801b74:	00802034 	movhi	r2,128
  801b78:	108d5904 	addi	r2,r2,13668
  801b7c:	80800a15 	stw	r2,40(r16)
  801b80:	00802034 	movhi	r2,128
  801b84:	108d7004 	addi	r2,r2,13760
  801b88:	8440030d 	sth	r17,12(r16)
  801b8c:	84000715 	stw	r16,28(r16)
  801b90:	80800b15 	stw	r2,44(r16)
  801b94:	8c40400c 	andi	r17,r17,256
  801b98:	88000d1e 	bne	r17,zero,801bd0 <_fopen_r+0xd8>
  801b9c:	8005883a 	mov	r2,r16
  801ba0:	dfc00517 	ldw	ra,20(sp)
  801ba4:	dcc00417 	ldw	r19,16(sp)
  801ba8:	dc800317 	ldw	r18,12(sp)
  801bac:	dc400217 	ldw	r17,8(sp)
  801bb0:	dc000117 	ldw	r16,4(sp)
  801bb4:	dec00604 	addi	sp,sp,24
  801bb8:	f800283a 	ret
  801bbc:	0801ab80 	call	801ab8 <__sfp_lock_acquire>
  801bc0:	8000030d 	sth	zero,12(r16)
  801bc4:	0801abc0 	call	801abc <__sfp_lock_release>
  801bc8:	0005883a 	mov	r2,zero
  801bcc:	003ff406 	br	801ba0 <__alt_mem_onchip_mem+0xff781ba0>
  801bd0:	01c00084 	movi	r7,2
  801bd4:	000d883a 	mov	r6,zero
  801bd8:	800b883a 	mov	r5,r16
  801bdc:	9009883a 	mov	r4,r18
  801be0:	0801cf00 	call	801cf0 <_fseek_r>
  801be4:	8005883a 	mov	r2,r16
  801be8:	003fed06 	br	801ba0 <__alt_mem_onchip_mem+0xff781ba0>

00801bec <fopen>:
  801bec:	00802074 	movhi	r2,129
  801bf0:	10957804 	addi	r2,r2,21984
  801bf4:	280d883a 	mov	r6,r5
  801bf8:	200b883a 	mov	r5,r4
  801bfc:	11000017 	ldw	r4,0(r2)
  801c00:	0801af81 	jmpi	801af8 <_fopen_r>

00801c04 <_fprintf_r>:
  801c04:	defffe04 	addi	sp,sp,-8
  801c08:	2809883a 	mov	r4,r5
  801c0c:	300b883a 	mov	r5,r6
  801c10:	dfc00015 	stw	ra,0(sp)
  801c14:	d9c00115 	stw	r7,4(sp)
  801c18:	d9800104 	addi	r6,sp,4
  801c1c:	0805ad00 	call	805ad0 <__vfprintf_internal>
  801c20:	dfc00017 	ldw	ra,0(sp)
  801c24:	dec00204 	addi	sp,sp,8
  801c28:	f800283a 	ret

00801c2c <fprintf>:
  801c2c:	defffd04 	addi	sp,sp,-12
  801c30:	dfc00015 	stw	ra,0(sp)
  801c34:	d9800115 	stw	r6,4(sp)
  801c38:	d9c00215 	stw	r7,8(sp)
  801c3c:	d9800104 	addi	r6,sp,4
  801c40:	0805ad00 	call	805ad0 <__vfprintf_internal>
  801c44:	dfc00017 	ldw	ra,0(sp)
  801c48:	dec00304 	addi	sp,sp,12
  801c4c:	f800283a 	ret

00801c50 <_fputc_r>:
  801c50:	defffc04 	addi	sp,sp,-16
  801c54:	dc000215 	stw	r16,8(sp)
  801c58:	dfc00315 	stw	ra,12(sp)
  801c5c:	2021883a 	mov	r16,r4
  801c60:	20000726 	beq	r4,zero,801c80 <_fputc_r+0x30>
  801c64:	20800e17 	ldw	r2,56(r4)
  801c68:	1000051e 	bne	r2,zero,801c80 <_fputc_r+0x30>
  801c6c:	d9400015 	stw	r5,0(sp)
  801c70:	d9800115 	stw	r6,4(sp)
  801c74:	0801aa80 	call	801aa8 <__sinit>
  801c78:	d9800117 	ldw	r6,4(sp)
  801c7c:	d9400017 	ldw	r5,0(sp)
  801c80:	8009883a 	mov	r4,r16
  801c84:	dfc00317 	ldw	ra,12(sp)
  801c88:	dc000217 	ldw	r16,8(sp)
  801c8c:	dec00404 	addi	sp,sp,16
  801c90:	08030381 	jmpi	803038 <_putc_r>

00801c94 <fputc>:
  801c94:	00802074 	movhi	r2,129
  801c98:	defffc04 	addi	sp,sp,-16
  801c9c:	10957804 	addi	r2,r2,21984
  801ca0:	dc000115 	stw	r16,4(sp)
  801ca4:	14000017 	ldw	r16,0(r2)
  801ca8:	dc400215 	stw	r17,8(sp)
  801cac:	dfc00315 	stw	ra,12(sp)
  801cb0:	2023883a 	mov	r17,r4
  801cb4:	80000626 	beq	r16,zero,801cd0 <fputc+0x3c>
  801cb8:	80800e17 	ldw	r2,56(r16)
  801cbc:	1000041e 	bne	r2,zero,801cd0 <fputc+0x3c>
  801cc0:	8009883a 	mov	r4,r16
  801cc4:	d9400015 	stw	r5,0(sp)
  801cc8:	0801aa80 	call	801aa8 <__sinit>
  801ccc:	d9400017 	ldw	r5,0(sp)
  801cd0:	280d883a 	mov	r6,r5
  801cd4:	8009883a 	mov	r4,r16
  801cd8:	880b883a 	mov	r5,r17
  801cdc:	dfc00317 	ldw	ra,12(sp)
  801ce0:	dc400217 	ldw	r17,8(sp)
  801ce4:	dc000117 	ldw	r16,4(sp)
  801ce8:	dec00404 	addi	sp,sp,16
  801cec:	08030381 	jmpi	803038 <_putc_r>

00801cf0 <_fseek_r>:
  801cf0:	0801d101 	jmpi	801d10 <_fseeko_r>

00801cf4 <fseek>:
  801cf4:	00802074 	movhi	r2,129
  801cf8:	10957804 	addi	r2,r2,21984
  801cfc:	300f883a 	mov	r7,r6
  801d00:	280d883a 	mov	r6,r5
  801d04:	200b883a 	mov	r5,r4
  801d08:	11000017 	ldw	r4,0(r2)
  801d0c:	0801d101 	jmpi	801d10 <_fseeko_r>

00801d10 <_fseeko_r>:
  801d10:	deffe804 	addi	sp,sp,-96
  801d14:	dd401415 	stw	r21,80(sp)
  801d18:	dc801115 	stw	r18,68(sp)
  801d1c:	dc401015 	stw	r17,64(sp)
  801d20:	dc000f15 	stw	r16,60(sp)
  801d24:	dfc01715 	stw	ra,92(sp)
  801d28:	ddc01615 	stw	r23,88(sp)
  801d2c:	dd801515 	stw	r22,84(sp)
  801d30:	dd001315 	stw	r20,76(sp)
  801d34:	dcc01215 	stw	r19,72(sp)
  801d38:	2023883a 	mov	r17,r4
  801d3c:	2821883a 	mov	r16,r5
  801d40:	302b883a 	mov	r21,r6
  801d44:	3825883a 	mov	r18,r7
  801d48:	20000226 	beq	r4,zero,801d54 <_fseeko_r+0x44>
  801d4c:	20800e17 	ldw	r2,56(r4)
  801d50:	10005a26 	beq	r2,zero,801ebc <_fseeko_r+0x1ac>
  801d54:	8080030b 	ldhu	r2,12(r16)
  801d58:	00c04204 	movi	r3,264
  801d5c:	1080420c 	andi	r2,r2,264
  801d60:	10c05b26 	beq	r2,r3,801ed0 <_fseeko_r+0x1c0>
  801d64:	85000a17 	ldw	r20,40(r16)
  801d68:	a000f626 	beq	r20,zero,802144 <_fseeko_r+0x434>
  801d6c:	00800044 	movi	r2,1
  801d70:	90803e26 	beq	r18,r2,801e6c <_fseeko_r+0x15c>
  801d74:	00800084 	movi	r2,2
  801d78:	90801026 	beq	r18,r2,801dbc <_fseeko_r+0xac>
  801d7c:	90000f26 	beq	r18,zero,801dbc <_fseeko_r+0xac>
  801d80:	00800584 	movi	r2,22
  801d84:	88800015 	stw	r2,0(r17)
  801d88:	04ffffc4 	movi	r19,-1
  801d8c:	9805883a 	mov	r2,r19
  801d90:	dfc01717 	ldw	ra,92(sp)
  801d94:	ddc01617 	ldw	r23,88(sp)
  801d98:	dd801517 	ldw	r22,84(sp)
  801d9c:	dd401417 	ldw	r21,80(sp)
  801da0:	dd001317 	ldw	r20,76(sp)
  801da4:	dcc01217 	ldw	r19,72(sp)
  801da8:	dc801117 	ldw	r18,68(sp)
  801dac:	dc401017 	ldw	r17,64(sp)
  801db0:	dc000f17 	ldw	r16,60(sp)
  801db4:	dec01804 	addi	sp,sp,96
  801db8:	f800283a 	ret
  801dbc:	80800417 	ldw	r2,16(r16)
  801dc0:	002f883a 	mov	r23,zero
  801dc4:	0027883a 	mov	r19,zero
  801dc8:	1000cb26 	beq	r2,zero,8020f8 <_fseeko_r+0x3e8>
  801dcc:	8080030b 	ldhu	r2,12(r16)
  801dd0:	10c2068c 	andi	r3,r2,2074
  801dd4:	1800071e 	bne	r3,zero,801df4 <_fseeko_r+0xe4>
  801dd8:	10c1000c 	andi	r3,r2,1024
  801ddc:	1800451e 	bne	r3,zero,801ef4 <_fseeko_r+0x1e4>
  801de0:	00c02034 	movhi	r3,128
  801de4:	18cd5904 	addi	r3,r3,13668
  801de8:	a0c0b726 	beq	r20,r3,8020c8 <_fseeko_r+0x3b8>
  801dec:	10820014 	ori	r2,r2,2048
  801df0:	8080030d 	sth	r2,12(r16)
  801df4:	800b883a 	mov	r5,r16
  801df8:	8809883a 	mov	r4,r17
  801dfc:	0807ab00 	call	807ab0 <_fflush_r>
  801e00:	1027883a 	mov	r19,r2
  801e04:	103fe01e 	bne	r2,zero,801d88 <__alt_mem_onchip_mem+0xff781d88>
  801e08:	81400717 	ldw	r5,28(r16)
  801e0c:	900f883a 	mov	r7,r18
  801e10:	a80d883a 	mov	r6,r21
  801e14:	8809883a 	mov	r4,r17
  801e18:	a03ee83a 	callr	r20
  801e1c:	00ffffc4 	movi	r3,-1
  801e20:	10ffd926 	beq	r2,r3,801d88 <__alt_mem_onchip_mem+0xff781d88>
  801e24:	81400c17 	ldw	r5,48(r16)
  801e28:	28000526 	beq	r5,zero,801e40 <_fseeko_r+0x130>
  801e2c:	80801004 	addi	r2,r16,64
  801e30:	28800226 	beq	r5,r2,801e3c <_fseeko_r+0x12c>
  801e34:	8809883a 	mov	r4,r17
  801e38:	0807d0c0 	call	807d0c <_free_r>
  801e3c:	80000c15 	stw	zero,48(r16)
  801e40:	8080030b 	ldhu	r2,12(r16)
  801e44:	80c00417 	ldw	r3,16(r16)
  801e48:	80000115 	stw	zero,4(r16)
  801e4c:	10bdf7cc 	andi	r2,r2,63455
  801e50:	80c00015 	stw	r3,0(r16)
  801e54:	8080030d 	sth	r2,12(r16)
  801e58:	01800204 	movi	r6,8
  801e5c:	000b883a 	mov	r5,zero
  801e60:	81001704 	addi	r4,r16,92
  801e64:	0802e440 	call	802e44 <memset>
  801e68:	003fc806 	br	801d8c <__alt_mem_onchip_mem+0xff781d8c>
  801e6c:	800b883a 	mov	r5,r16
  801e70:	8809883a 	mov	r4,r17
  801e74:	0807ab00 	call	807ab0 <_fflush_r>
  801e78:	8080030b 	ldhu	r2,12(r16)
  801e7c:	10c4000c 	andi	r3,r2,4096
  801e80:	18008726 	beq	r3,zero,8020a0 <_fseeko_r+0x390>
  801e84:	84c01417 	ldw	r19,80(r16)
  801e88:	10c0010c 	andi	r3,r2,4
  801e8c:	1800431e 	bne	r3,zero,801f9c <_fseeko_r+0x28c>
  801e90:	1080020c 	andi	r2,r2,8
  801e94:	10008026 	beq	r2,zero,802098 <_fseeko_r+0x388>
  801e98:	80c00017 	ldw	r3,0(r16)
  801e9c:	80800417 	ldw	r2,16(r16)
  801ea0:	18000226 	beq	r3,zero,801eac <_fseeko_r+0x19c>
  801ea4:	1887c83a 	sub	r3,r3,r2
  801ea8:	98e7883a 	add	r19,r19,r3
  801eac:	aceb883a 	add	r21,r21,r19
  801eb0:	05c00044 	movi	r23,1
  801eb4:	0025883a 	mov	r18,zero
  801eb8:	003fc306 	br	801dc8 <__alt_mem_onchip_mem+0xff781dc8>
  801ebc:	0801aa80 	call	801aa8 <__sinit>
  801ec0:	8080030b 	ldhu	r2,12(r16)
  801ec4:	00c04204 	movi	r3,264
  801ec8:	1080420c 	andi	r2,r2,264
  801ecc:	10ffa51e 	bne	r2,r3,801d64 <__alt_mem_onchip_mem+0xff781d64>
  801ed0:	800b883a 	mov	r5,r16
  801ed4:	8809883a 	mov	r4,r17
  801ed8:	0807ab00 	call	807ab0 <_fflush_r>
  801edc:	003fa106 	br	801d64 <__alt_mem_onchip_mem+0xff781d64>
  801ee0:	8080030b 	ldhu	r2,12(r16)
  801ee4:	00c10004 	movi	r3,1024
  801ee8:	80c01315 	stw	r3,76(r16)
  801eec:	10c4b03a 	or	r2,r2,r3
  801ef0:	8080030d 	sth	r2,12(r16)
  801ef4:	9000311e 	bne	r18,zero,801fbc <_fseeko_r+0x2ac>
  801ef8:	a82d883a 	mov	r22,r21
  801efc:	b800371e 	bne	r23,zero,801fdc <_fseeko_r+0x2cc>
  801f00:	8080030b 	ldhu	r2,12(r16)
  801f04:	1084000c 	andi	r2,r2,4096
  801f08:	10007f26 	beq	r2,zero,802108 <_fseeko_r+0x3f8>
  801f0c:	80801417 	ldw	r2,80(r16)
  801f10:	81800117 	ldw	r6,4(r16)
  801f14:	81400c17 	ldw	r5,48(r16)
  801f18:	11a7c83a 	sub	r19,r2,r6
  801f1c:	28008226 	beq	r5,zero,802128 <_fseeko_r+0x418>
  801f20:	81c00f17 	ldw	r7,60(r16)
  801f24:	99e7c83a 	sub	r19,r19,r7
  801f28:	81000e17 	ldw	r4,56(r16)
  801f2c:	80800417 	ldw	r2,16(r16)
  801f30:	99a7883a 	add	r19,r19,r6
  801f34:	2087c83a 	sub	r3,r4,r2
  801f38:	98e7c83a 	sub	r19,r19,r3
  801f3c:	38c7883a 	add	r3,r7,r3
  801f40:	b4c02b16 	blt	r22,r19,801ff0 <_fseeko_r+0x2e0>
  801f44:	98c9883a 	add	r4,r19,r3
  801f48:	b100292e 	bgeu	r22,r4,801ff0 <_fseeko_r+0x2e0>
  801f4c:	b4e7c83a 	sub	r19,r22,r19
  801f50:	14c5883a 	add	r2,r2,r19
  801f54:	1ce7c83a 	sub	r19,r3,r19
  801f58:	80800015 	stw	r2,0(r16)
  801f5c:	84c00115 	stw	r19,4(r16)
  801f60:	28000526 	beq	r5,zero,801f78 <_fseeko_r+0x268>
  801f64:	80801004 	addi	r2,r16,64
  801f68:	28800226 	beq	r5,r2,801f74 <_fseeko_r+0x264>
  801f6c:	8809883a 	mov	r4,r17
  801f70:	0807d0c0 	call	807d0c <_free_r>
  801f74:	80000c15 	stw	zero,48(r16)
  801f78:	8080030b 	ldhu	r2,12(r16)
  801f7c:	01800204 	movi	r6,8
  801f80:	000b883a 	mov	r5,zero
  801f84:	10bff7cc 	andi	r2,r2,65503
  801f88:	8080030d 	sth	r2,12(r16)
  801f8c:	81001704 	addi	r4,r16,92
  801f90:	0802e440 	call	802e44 <memset>
  801f94:	0027883a 	mov	r19,zero
  801f98:	003f7c06 	br	801d8c <__alt_mem_onchip_mem+0xff781d8c>
  801f9c:	80c00117 	ldw	r3,4(r16)
  801fa0:	80800c17 	ldw	r2,48(r16)
  801fa4:	98e7c83a 	sub	r19,r19,r3
  801fa8:	10003b26 	beq	r2,zero,802098 <_fseeko_r+0x388>
  801fac:	80c00f17 	ldw	r3,60(r16)
  801fb0:	80800417 	ldw	r2,16(r16)
  801fb4:	98e7c83a 	sub	r19,r19,r3
  801fb8:	003fbc06 	br	801eac <__alt_mem_onchip_mem+0xff781eac>
  801fbc:	8140038f 	ldh	r5,14(r16)
  801fc0:	d80d883a 	mov	r6,sp
  801fc4:	8809883a 	mov	r4,r17
  801fc8:	08021700 	call	802170 <_fstat_r>
  801fcc:	103f891e 	bne	r2,zero,801df4 <__alt_mem_onchip_mem+0xff781df4>
  801fd0:	dd800417 	ldw	r22,16(sp)
  801fd4:	adad883a 	add	r22,r21,r22
  801fd8:	b83fc926 	beq	r23,zero,801f00 <__alt_mem_onchip_mem+0xff781f00>
  801fdc:	81400c17 	ldw	r5,48(r16)
  801fe0:	81800117 	ldw	r6,4(r16)
  801fe4:	28005026 	beq	r5,zero,802128 <_fseeko_r+0x418>
  801fe8:	81c00f17 	ldw	r7,60(r16)
  801fec:	003fce06 	br	801f28 <__alt_mem_onchip_mem+0xff781f28>
  801ff0:	84c01317 	ldw	r19,76(r16)
  801ff4:	81400717 	ldw	r5,28(r16)
  801ff8:	000f883a 	mov	r7,zero
  801ffc:	04e7c83a 	sub	r19,zero,r19
  802000:	9da6703a 	and	r19,r19,r22
  802004:	980d883a 	mov	r6,r19
  802008:	8809883a 	mov	r4,r17
  80200c:	a03ee83a 	callr	r20
  802010:	00ffffc4 	movi	r3,-1
  802014:	10ff7726 	beq	r2,r3,801df4 <__alt_mem_onchip_mem+0xff781df4>
  802018:	80800417 	ldw	r2,16(r16)
  80201c:	81400c17 	ldw	r5,48(r16)
  802020:	80000115 	stw	zero,4(r16)
  802024:	80800015 	stw	r2,0(r16)
  802028:	28000526 	beq	r5,zero,802040 <_fseeko_r+0x330>
  80202c:	80801004 	addi	r2,r16,64
  802030:	28800226 	beq	r5,r2,80203c <_fseeko_r+0x32c>
  802034:	8809883a 	mov	r4,r17
  802038:	0807d0c0 	call	807d0c <_free_r>
  80203c:	80000c15 	stw	zero,48(r16)
  802040:	8080030b 	ldhu	r2,12(r16)
  802044:	b4e7c83a 	sub	r19,r22,r19
  802048:	10bff7cc 	andi	r2,r2,65503
  80204c:	8080030d 	sth	r2,12(r16)
  802050:	98000b26 	beq	r19,zero,802080 <_fseeko_r+0x370>
  802054:	800b883a 	mov	r5,r16
  802058:	8809883a 	mov	r4,r17
  80205c:	08031dc0 	call	8031dc <__srefill_r>
  802060:	103f641e 	bne	r2,zero,801df4 <__alt_mem_onchip_mem+0xff781df4>
  802064:	80800117 	ldw	r2,4(r16)
  802068:	14ff6236 	bltu	r2,r19,801df4 <__alt_mem_onchip_mem+0xff781df4>
  80206c:	80c00017 	ldw	r3,0(r16)
  802070:	14c5c83a 	sub	r2,r2,r19
  802074:	80800115 	stw	r2,4(r16)
  802078:	1ce7883a 	add	r19,r3,r19
  80207c:	84c00015 	stw	r19,0(r16)
  802080:	01800204 	movi	r6,8
  802084:	000b883a 	mov	r5,zero
  802088:	81001704 	addi	r4,r16,92
  80208c:	0802e440 	call	802e44 <memset>
  802090:	0027883a 	mov	r19,zero
  802094:	003f3d06 	br	801d8c <__alt_mem_onchip_mem+0xff781d8c>
  802098:	80800417 	ldw	r2,16(r16)
  80209c:	003f8306 	br	801eac <__alt_mem_onchip_mem+0xff781eac>
  8020a0:	81400717 	ldw	r5,28(r16)
  8020a4:	900f883a 	mov	r7,r18
  8020a8:	000d883a 	mov	r6,zero
  8020ac:	8809883a 	mov	r4,r17
  8020b0:	a03ee83a 	callr	r20
  8020b4:	1027883a 	mov	r19,r2
  8020b8:	00bfffc4 	movi	r2,-1
  8020bc:	98bf3226 	beq	r19,r2,801d88 <__alt_mem_onchip_mem+0xff781d88>
  8020c0:	8080030b 	ldhu	r2,12(r16)
  8020c4:	003f7006 	br	801e88 <__alt_mem_onchip_mem+0xff781e88>
  8020c8:	8140038f 	ldh	r5,14(r16)
  8020cc:	283f4716 	blt	r5,zero,801dec <__alt_mem_onchip_mem+0xff781dec>
  8020d0:	d80d883a 	mov	r6,sp
  8020d4:	8809883a 	mov	r4,r17
  8020d8:	08021700 	call	802170 <_fstat_r>
  8020dc:	1000041e 	bne	r2,zero,8020f0 <_fseeko_r+0x3e0>
  8020e0:	d8800117 	ldw	r2,4(sp)
  8020e4:	00e00014 	movui	r3,32768
  8020e8:	10bc000c 	andi	r2,r2,61440
  8020ec:	10ff7c26 	beq	r2,r3,801ee0 <__alt_mem_onchip_mem+0xff781ee0>
  8020f0:	8080030b 	ldhu	r2,12(r16)
  8020f4:	003f3d06 	br	801dec <__alt_mem_onchip_mem+0xff781dec>
  8020f8:	800b883a 	mov	r5,r16
  8020fc:	8809883a 	mov	r4,r17
  802100:	08024540 	call	802454 <__smakebuf_r>
  802104:	003f3106 	br	801dcc <__alt_mem_onchip_mem+0xff781dcc>
  802108:	81400717 	ldw	r5,28(r16)
  80210c:	01c00044 	movi	r7,1
  802110:	000d883a 	mov	r6,zero
  802114:	8809883a 	mov	r4,r17
  802118:	a03ee83a 	callr	r20
  80211c:	00ffffc4 	movi	r3,-1
  802120:	10ff7b1e 	bne	r2,r3,801f10 <__alt_mem_onchip_mem+0xff781f10>
  802124:	003f3306 	br	801df4 <__alt_mem_onchip_mem+0xff781df4>
  802128:	80c00017 	ldw	r3,0(r16)
  80212c:	80800417 	ldw	r2,16(r16)
  802130:	000b883a 	mov	r5,zero
  802134:	1887c83a 	sub	r3,r3,r2
  802138:	98e7c83a 	sub	r19,r19,r3
  80213c:	30c7883a 	add	r3,r6,r3
  802140:	003f7f06 	br	801f40 <__alt_mem_onchip_mem+0xff781f40>
  802144:	00800744 	movi	r2,29
  802148:	88800015 	stw	r2,0(r17)
  80214c:	04ffffc4 	movi	r19,-1
  802150:	003f0e06 	br	801d8c <__alt_mem_onchip_mem+0xff781d8c>

00802154 <fseeko>:
  802154:	00802074 	movhi	r2,129
  802158:	10957804 	addi	r2,r2,21984
  80215c:	300f883a 	mov	r7,r6
  802160:	280d883a 	mov	r6,r5
  802164:	200b883a 	mov	r5,r4
  802168:	11000017 	ldw	r4,0(r2)
  80216c:	0801d101 	jmpi	801d10 <_fseeko_r>

00802170 <_fstat_r>:
  802170:	defffd04 	addi	sp,sp,-12
  802174:	2805883a 	mov	r2,r5
  802178:	dc000015 	stw	r16,0(sp)
  80217c:	04002074 	movhi	r16,129
  802180:	dc400115 	stw	r17,4(sp)
  802184:	841cd404 	addi	r16,r16,29520
  802188:	2023883a 	mov	r17,r4
  80218c:	300b883a 	mov	r5,r6
  802190:	1009883a 	mov	r4,r2
  802194:	dfc00215 	stw	ra,8(sp)
  802198:	80000015 	stw	zero,0(r16)
  80219c:	080f2000 	call	80f200 <fstat>
  8021a0:	00ffffc4 	movi	r3,-1
  8021a4:	10c00526 	beq	r2,r3,8021bc <_fstat_r+0x4c>
  8021a8:	dfc00217 	ldw	ra,8(sp)
  8021ac:	dc400117 	ldw	r17,4(sp)
  8021b0:	dc000017 	ldw	r16,0(sp)
  8021b4:	dec00304 	addi	sp,sp,12
  8021b8:	f800283a 	ret
  8021bc:	80c00017 	ldw	r3,0(r16)
  8021c0:	183ff926 	beq	r3,zero,8021a8 <__alt_mem_onchip_mem+0xff7821a8>
  8021c4:	88c00015 	stw	r3,0(r17)
  8021c8:	003ff706 	br	8021a8 <__alt_mem_onchip_mem+0xff7821a8>

008021cc <_fwalk>:
  8021cc:	defff704 	addi	sp,sp,-36
  8021d0:	dd000415 	stw	r20,16(sp)
  8021d4:	dfc00815 	stw	ra,32(sp)
  8021d8:	ddc00715 	stw	r23,28(sp)
  8021dc:	dd800615 	stw	r22,24(sp)
  8021e0:	dd400515 	stw	r21,20(sp)
  8021e4:	dcc00315 	stw	r19,12(sp)
  8021e8:	dc800215 	stw	r18,8(sp)
  8021ec:	dc400115 	stw	r17,4(sp)
  8021f0:	dc000015 	stw	r16,0(sp)
  8021f4:	2500b804 	addi	r20,r4,736
  8021f8:	a0002326 	beq	r20,zero,802288 <_fwalk+0xbc>
  8021fc:	282b883a 	mov	r21,r5
  802200:	002f883a 	mov	r23,zero
  802204:	05800044 	movi	r22,1
  802208:	04ffffc4 	movi	r19,-1
  80220c:	a4400117 	ldw	r17,4(r20)
  802210:	a4800217 	ldw	r18,8(r20)
  802214:	8c7fffc4 	addi	r17,r17,-1
  802218:	88000d16 	blt	r17,zero,802250 <_fwalk+0x84>
  80221c:	94000304 	addi	r16,r18,12
  802220:	94800384 	addi	r18,r18,14
  802224:	8080000b 	ldhu	r2,0(r16)
  802228:	8c7fffc4 	addi	r17,r17,-1
  80222c:	813ffd04 	addi	r4,r16,-12
  802230:	b080042e 	bgeu	r22,r2,802244 <_fwalk+0x78>
  802234:	9080000f 	ldh	r2,0(r18)
  802238:	14c00226 	beq	r2,r19,802244 <_fwalk+0x78>
  80223c:	a83ee83a 	callr	r21
  802240:	b8aeb03a 	or	r23,r23,r2
  802244:	84001a04 	addi	r16,r16,104
  802248:	94801a04 	addi	r18,r18,104
  80224c:	8cfff51e 	bne	r17,r19,802224 <__alt_mem_onchip_mem+0xff782224>
  802250:	a5000017 	ldw	r20,0(r20)
  802254:	a03fed1e 	bne	r20,zero,80220c <__alt_mem_onchip_mem+0xff78220c>
  802258:	b805883a 	mov	r2,r23
  80225c:	dfc00817 	ldw	ra,32(sp)
  802260:	ddc00717 	ldw	r23,28(sp)
  802264:	dd800617 	ldw	r22,24(sp)
  802268:	dd400517 	ldw	r21,20(sp)
  80226c:	dd000417 	ldw	r20,16(sp)
  802270:	dcc00317 	ldw	r19,12(sp)
  802274:	dc800217 	ldw	r18,8(sp)
  802278:	dc400117 	ldw	r17,4(sp)
  80227c:	dc000017 	ldw	r16,0(sp)
  802280:	dec00904 	addi	sp,sp,36
  802284:	f800283a 	ret
  802288:	002f883a 	mov	r23,zero
  80228c:	003ff206 	br	802258 <__alt_mem_onchip_mem+0xff782258>

00802290 <_fwalk_reent>:
  802290:	defff704 	addi	sp,sp,-36
  802294:	dd000415 	stw	r20,16(sp)
  802298:	dfc00815 	stw	ra,32(sp)
  80229c:	ddc00715 	stw	r23,28(sp)
  8022a0:	dd800615 	stw	r22,24(sp)
  8022a4:	dd400515 	stw	r21,20(sp)
  8022a8:	dcc00315 	stw	r19,12(sp)
  8022ac:	dc800215 	stw	r18,8(sp)
  8022b0:	dc400115 	stw	r17,4(sp)
  8022b4:	dc000015 	stw	r16,0(sp)
  8022b8:	2500b804 	addi	r20,r4,736
  8022bc:	a0002326 	beq	r20,zero,80234c <_fwalk_reent+0xbc>
  8022c0:	282b883a 	mov	r21,r5
  8022c4:	2027883a 	mov	r19,r4
  8022c8:	002f883a 	mov	r23,zero
  8022cc:	05800044 	movi	r22,1
  8022d0:	04bfffc4 	movi	r18,-1
  8022d4:	a4400117 	ldw	r17,4(r20)
  8022d8:	a4000217 	ldw	r16,8(r20)
  8022dc:	8c7fffc4 	addi	r17,r17,-1
  8022e0:	88000c16 	blt	r17,zero,802314 <_fwalk_reent+0x84>
  8022e4:	84000304 	addi	r16,r16,12
  8022e8:	8080000b 	ldhu	r2,0(r16)
  8022ec:	8c7fffc4 	addi	r17,r17,-1
  8022f0:	817ffd04 	addi	r5,r16,-12
  8022f4:	b080052e 	bgeu	r22,r2,80230c <_fwalk_reent+0x7c>
  8022f8:	8080008f 	ldh	r2,2(r16)
  8022fc:	9809883a 	mov	r4,r19
  802300:	14800226 	beq	r2,r18,80230c <_fwalk_reent+0x7c>
  802304:	a83ee83a 	callr	r21
  802308:	b8aeb03a 	or	r23,r23,r2
  80230c:	84001a04 	addi	r16,r16,104
  802310:	8cbff51e 	bne	r17,r18,8022e8 <__alt_mem_onchip_mem+0xff7822e8>
  802314:	a5000017 	ldw	r20,0(r20)
  802318:	a03fee1e 	bne	r20,zero,8022d4 <__alt_mem_onchip_mem+0xff7822d4>
  80231c:	b805883a 	mov	r2,r23
  802320:	dfc00817 	ldw	ra,32(sp)
  802324:	ddc00717 	ldw	r23,28(sp)
  802328:	dd800617 	ldw	r22,24(sp)
  80232c:	dd400517 	ldw	r21,20(sp)
  802330:	dd000417 	ldw	r20,16(sp)
  802334:	dcc00317 	ldw	r19,12(sp)
  802338:	dc800217 	ldw	r18,8(sp)
  80233c:	dc400117 	ldw	r17,4(sp)
  802340:	dc000017 	ldw	r16,0(sp)
  802344:	dec00904 	addi	sp,sp,36
  802348:	f800283a 	ret
  80234c:	002f883a 	mov	r23,zero
  802350:	003ff206 	br	80231c <__alt_mem_onchip_mem+0xff78231c>

00802354 <_fwrite_r>:
  802354:	defff504 	addi	sp,sp,-44
  802358:	dc800815 	stw	r18,32(sp)
  80235c:	39a5383a 	mul	r18,r7,r6
  802360:	d8800304 	addi	r2,sp,12
  802364:	d8800015 	stw	r2,0(sp)
  802368:	00800044 	movi	r2,1
  80236c:	dcc00915 	stw	r19,36(sp)
  802370:	dc400715 	stw	r17,28(sp)
  802374:	dc000615 	stw	r16,24(sp)
  802378:	d9400315 	stw	r5,12(sp)
  80237c:	dfc00a15 	stw	ra,40(sp)
  802380:	dc800415 	stw	r18,16(sp)
  802384:	dc800215 	stw	r18,8(sp)
  802388:	d8800115 	stw	r2,4(sp)
  80238c:	3027883a 	mov	r19,r6
  802390:	3821883a 	mov	r16,r7
  802394:	2023883a 	mov	r17,r4
  802398:	d9400b17 	ldw	r5,44(sp)
  80239c:	20000226 	beq	r4,zero,8023a8 <_fwrite_r+0x54>
  8023a0:	20800e17 	ldw	r2,56(r4)
  8023a4:	10001a26 	beq	r2,zero,802410 <_fwrite_r+0xbc>
  8023a8:	2880030b 	ldhu	r2,12(r5)
  8023ac:	10c8000c 	andi	r3,r2,8192
  8023b0:	1800061e 	bne	r3,zero,8023cc <_fwrite_r+0x78>
  8023b4:	29001917 	ldw	r4,100(r5)
  8023b8:	00f7ffc4 	movi	r3,-8193
  8023bc:	10880014 	ori	r2,r2,8192
  8023c0:	20c6703a 	and	r3,r4,r3
  8023c4:	2880030d 	sth	r2,12(r5)
  8023c8:	28c01915 	stw	r3,100(r5)
  8023cc:	d80d883a 	mov	r6,sp
  8023d0:	8809883a 	mov	r4,r17
  8023d4:	080801c0 	call	80801c <__sfvwrite_r>
  8023d8:	10000b26 	beq	r2,zero,802408 <_fwrite_r+0xb4>
  8023dc:	d9000217 	ldw	r4,8(sp)
  8023e0:	980b883a 	mov	r5,r19
  8023e4:	9109c83a 	sub	r4,r18,r4
  8023e8:	080c83c0 	call	80c83c <__udivsi3>
  8023ec:	dfc00a17 	ldw	ra,40(sp)
  8023f0:	dcc00917 	ldw	r19,36(sp)
  8023f4:	dc800817 	ldw	r18,32(sp)
  8023f8:	dc400717 	ldw	r17,28(sp)
  8023fc:	dc000617 	ldw	r16,24(sp)
  802400:	dec00b04 	addi	sp,sp,44
  802404:	f800283a 	ret
  802408:	8005883a 	mov	r2,r16
  80240c:	003ff706 	br	8023ec <__alt_mem_onchip_mem+0xff7823ec>
  802410:	d9400515 	stw	r5,20(sp)
  802414:	0801aa80 	call	801aa8 <__sinit>
  802418:	d9400517 	ldw	r5,20(sp)
  80241c:	003fe206 	br	8023a8 <__alt_mem_onchip_mem+0xff7823a8>

00802420 <fwrite>:
  802420:	defffe04 	addi	sp,sp,-8
  802424:	00802074 	movhi	r2,129
  802428:	d9c00015 	stw	r7,0(sp)
  80242c:	10957804 	addi	r2,r2,21984
  802430:	300f883a 	mov	r7,r6
  802434:	280d883a 	mov	r6,r5
  802438:	200b883a 	mov	r5,r4
  80243c:	11000017 	ldw	r4,0(r2)
  802440:	dfc00115 	stw	ra,4(sp)
  802444:	08023540 	call	802354 <_fwrite_r>
  802448:	dfc00117 	ldw	ra,4(sp)
  80244c:	dec00204 	addi	sp,sp,8
  802450:	f800283a 	ret

00802454 <__smakebuf_r>:
  802454:	2880030b 	ldhu	r2,12(r5)
  802458:	10c0008c 	andi	r3,r2,2
  80245c:	1800411e 	bne	r3,zero,802564 <__smakebuf_r+0x110>
  802460:	deffec04 	addi	sp,sp,-80
  802464:	dc000f15 	stw	r16,60(sp)
  802468:	2821883a 	mov	r16,r5
  80246c:	2940038f 	ldh	r5,14(r5)
  802470:	dc401015 	stw	r17,64(sp)
  802474:	dfc01315 	stw	ra,76(sp)
  802478:	dcc01215 	stw	r19,72(sp)
  80247c:	dc801115 	stw	r18,68(sp)
  802480:	2023883a 	mov	r17,r4
  802484:	28001c16 	blt	r5,zero,8024f8 <__smakebuf_r+0xa4>
  802488:	d80d883a 	mov	r6,sp
  80248c:	08021700 	call	802170 <_fstat_r>
  802490:	10001816 	blt	r2,zero,8024f4 <__smakebuf_r+0xa0>
  802494:	d8800117 	ldw	r2,4(sp)
  802498:	00e00014 	movui	r3,32768
  80249c:	10bc000c 	andi	r2,r2,61440
  8024a0:	14c80020 	cmpeqi	r19,r2,8192
  8024a4:	10c03726 	beq	r2,r3,802584 <__smakebuf_r+0x130>
  8024a8:	80c0030b 	ldhu	r3,12(r16)
  8024ac:	18c20014 	ori	r3,r3,2048
  8024b0:	80c0030d 	sth	r3,12(r16)
  8024b4:	00c80004 	movi	r3,8192
  8024b8:	10c0521e 	bne	r2,r3,802604 <__smakebuf_r+0x1b0>
  8024bc:	8140038f 	ldh	r5,14(r16)
  8024c0:	8809883a 	mov	r4,r17
  8024c4:	08084d80 	call	8084d8 <_isatty_r>
  8024c8:	10004c26 	beq	r2,zero,8025fc <__smakebuf_r+0x1a8>
  8024cc:	8080030b 	ldhu	r2,12(r16)
  8024d0:	80c010c4 	addi	r3,r16,67
  8024d4:	80c00015 	stw	r3,0(r16)
  8024d8:	10800054 	ori	r2,r2,1
  8024dc:	8080030d 	sth	r2,12(r16)
  8024e0:	00800044 	movi	r2,1
  8024e4:	80c00415 	stw	r3,16(r16)
  8024e8:	80800515 	stw	r2,20(r16)
  8024ec:	04810004 	movi	r18,1024
  8024f0:	00000706 	br	802510 <__smakebuf_r+0xbc>
  8024f4:	8080030b 	ldhu	r2,12(r16)
  8024f8:	10c0200c 	andi	r3,r2,128
  8024fc:	18001f1e 	bne	r3,zero,80257c <__smakebuf_r+0x128>
  802500:	04810004 	movi	r18,1024
  802504:	10820014 	ori	r2,r2,2048
  802508:	8080030d 	sth	r2,12(r16)
  80250c:	0027883a 	mov	r19,zero
  802510:	900b883a 	mov	r5,r18
  802514:	8809883a 	mov	r4,r17
  802518:	08026380 	call	802638 <_malloc_r>
  80251c:	10002c26 	beq	r2,zero,8025d0 <__smakebuf_r+0x17c>
  802520:	80c0030b 	ldhu	r3,12(r16)
  802524:	01002034 	movhi	r4,128
  802528:	2105d804 	addi	r4,r4,5984
  80252c:	89000f15 	stw	r4,60(r17)
  802530:	18c02014 	ori	r3,r3,128
  802534:	80c0030d 	sth	r3,12(r16)
  802538:	80800015 	stw	r2,0(r16)
  80253c:	80800415 	stw	r2,16(r16)
  802540:	84800515 	stw	r18,20(r16)
  802544:	98001a1e 	bne	r19,zero,8025b0 <__smakebuf_r+0x15c>
  802548:	dfc01317 	ldw	ra,76(sp)
  80254c:	dcc01217 	ldw	r19,72(sp)
  802550:	dc801117 	ldw	r18,68(sp)
  802554:	dc401017 	ldw	r17,64(sp)
  802558:	dc000f17 	ldw	r16,60(sp)
  80255c:	dec01404 	addi	sp,sp,80
  802560:	f800283a 	ret
  802564:	288010c4 	addi	r2,r5,67
  802568:	28800015 	stw	r2,0(r5)
  80256c:	28800415 	stw	r2,16(r5)
  802570:	00800044 	movi	r2,1
  802574:	28800515 	stw	r2,20(r5)
  802578:	f800283a 	ret
  80257c:	04801004 	movi	r18,64
  802580:	003fe006 	br	802504 <__alt_mem_onchip_mem+0xff782504>
  802584:	81000a17 	ldw	r4,40(r16)
  802588:	00c02034 	movhi	r3,128
  80258c:	18cd5904 	addi	r3,r3,13668
  802590:	20ffc51e 	bne	r4,r3,8024a8 <__alt_mem_onchip_mem+0xff7824a8>
  802594:	8080030b 	ldhu	r2,12(r16)
  802598:	04810004 	movi	r18,1024
  80259c:	84801315 	stw	r18,76(r16)
  8025a0:	1484b03a 	or	r2,r2,r18
  8025a4:	8080030d 	sth	r2,12(r16)
  8025a8:	0027883a 	mov	r19,zero
  8025ac:	003fd806 	br	802510 <__alt_mem_onchip_mem+0xff782510>
  8025b0:	8140038f 	ldh	r5,14(r16)
  8025b4:	8809883a 	mov	r4,r17
  8025b8:	08084d80 	call	8084d8 <_isatty_r>
  8025bc:	103fe226 	beq	r2,zero,802548 <__alt_mem_onchip_mem+0xff782548>
  8025c0:	8080030b 	ldhu	r2,12(r16)
  8025c4:	10800054 	ori	r2,r2,1
  8025c8:	8080030d 	sth	r2,12(r16)
  8025cc:	003fde06 	br	802548 <__alt_mem_onchip_mem+0xff782548>
  8025d0:	8080030b 	ldhu	r2,12(r16)
  8025d4:	10c0800c 	andi	r3,r2,512
  8025d8:	183fdb1e 	bne	r3,zero,802548 <__alt_mem_onchip_mem+0xff782548>
  8025dc:	10800094 	ori	r2,r2,2
  8025e0:	80c010c4 	addi	r3,r16,67
  8025e4:	8080030d 	sth	r2,12(r16)
  8025e8:	00800044 	movi	r2,1
  8025ec:	80c00015 	stw	r3,0(r16)
  8025f0:	80c00415 	stw	r3,16(r16)
  8025f4:	80800515 	stw	r2,20(r16)
  8025f8:	003fd306 	br	802548 <__alt_mem_onchip_mem+0xff782548>
  8025fc:	04810004 	movi	r18,1024
  802600:	003fc306 	br	802510 <__alt_mem_onchip_mem+0xff782510>
  802604:	0027883a 	mov	r19,zero
  802608:	04810004 	movi	r18,1024
  80260c:	003fc006 	br	802510 <__alt_mem_onchip_mem+0xff782510>

00802610 <malloc>:
  802610:	00802074 	movhi	r2,129
  802614:	10957804 	addi	r2,r2,21984
  802618:	200b883a 	mov	r5,r4
  80261c:	11000017 	ldw	r4,0(r2)
  802620:	08026381 	jmpi	802638 <_malloc_r>

00802624 <free>:
  802624:	00802074 	movhi	r2,129
  802628:	10957804 	addi	r2,r2,21984
  80262c:	200b883a 	mov	r5,r4
  802630:	11000017 	ldw	r4,0(r2)
  802634:	0807d0c1 	jmpi	807d0c <_free_r>

00802638 <_malloc_r>:
  802638:	defff504 	addi	sp,sp,-44
  80263c:	dc800315 	stw	r18,12(sp)
  802640:	dfc00a15 	stw	ra,40(sp)
  802644:	df000915 	stw	fp,36(sp)
  802648:	ddc00815 	stw	r23,32(sp)
  80264c:	dd800715 	stw	r22,28(sp)
  802650:	dd400615 	stw	r21,24(sp)
  802654:	dd000515 	stw	r20,20(sp)
  802658:	dcc00415 	stw	r19,16(sp)
  80265c:	dc400215 	stw	r17,8(sp)
  802660:	dc000115 	stw	r16,4(sp)
  802664:	288002c4 	addi	r2,r5,11
  802668:	00c00584 	movi	r3,22
  80266c:	2025883a 	mov	r18,r4
  802670:	18807f2e 	bgeu	r3,r2,802870 <_malloc_r+0x238>
  802674:	047ffe04 	movi	r17,-8
  802678:	1462703a 	and	r17,r2,r17
  80267c:	8800a316 	blt	r17,zero,80290c <_malloc_r+0x2d4>
  802680:	8940a236 	bltu	r17,r5,80290c <_malloc_r+0x2d4>
  802684:	080f7880 	call	80f788 <__malloc_lock>
  802688:	00807dc4 	movi	r2,503
  80268c:	1441e92e 	bgeu	r2,r17,802e34 <_malloc_r+0x7fc>
  802690:	8804d27a 	srli	r2,r17,9
  802694:	1000a126 	beq	r2,zero,80291c <_malloc_r+0x2e4>
  802698:	00c00104 	movi	r3,4
  80269c:	18811e36 	bltu	r3,r2,802b18 <_malloc_r+0x4e0>
  8026a0:	8804d1ba 	srli	r2,r17,6
  8026a4:	12000e44 	addi	r8,r2,57
  8026a8:	11c00e04 	addi	r7,r2,56
  8026ac:	4209883a 	add	r4,r8,r8
  8026b0:	04c02074 	movhi	r19,129
  8026b4:	2109883a 	add	r4,r4,r4
  8026b8:	9ccf5404 	addi	r19,r19,15696
  8026bc:	2109883a 	add	r4,r4,r4
  8026c0:	9909883a 	add	r4,r19,r4
  8026c4:	24000117 	ldw	r16,4(r4)
  8026c8:	213ffe04 	addi	r4,r4,-8
  8026cc:	24009726 	beq	r4,r16,80292c <_malloc_r+0x2f4>
  8026d0:	80800117 	ldw	r2,4(r16)
  8026d4:	01bfff04 	movi	r6,-4
  8026d8:	014003c4 	movi	r5,15
  8026dc:	1184703a 	and	r2,r2,r6
  8026e0:	1447c83a 	sub	r3,r2,r17
  8026e4:	28c00716 	blt	r5,r3,802704 <_malloc_r+0xcc>
  8026e8:	1800920e 	bge	r3,zero,802934 <_malloc_r+0x2fc>
  8026ec:	84000317 	ldw	r16,12(r16)
  8026f0:	24008e26 	beq	r4,r16,80292c <_malloc_r+0x2f4>
  8026f4:	80800117 	ldw	r2,4(r16)
  8026f8:	1184703a 	and	r2,r2,r6
  8026fc:	1447c83a 	sub	r3,r2,r17
  802700:	28fff90e 	bge	r5,r3,8026e8 <__alt_mem_onchip_mem+0xff7826e8>
  802704:	3809883a 	mov	r4,r7
  802708:	01802074 	movhi	r6,129
  80270c:	9c000417 	ldw	r16,16(r19)
  802710:	318f5404 	addi	r6,r6,15696
  802714:	32000204 	addi	r8,r6,8
  802718:	82013426 	beq	r16,r8,802bec <_malloc_r+0x5b4>
  80271c:	80c00117 	ldw	r3,4(r16)
  802720:	00bfff04 	movi	r2,-4
  802724:	188e703a 	and	r7,r3,r2
  802728:	3c45c83a 	sub	r2,r7,r17
  80272c:	00c003c4 	movi	r3,15
  802730:	18811f16 	blt	r3,r2,802bb0 <_malloc_r+0x578>
  802734:	32000515 	stw	r8,20(r6)
  802738:	32000415 	stw	r8,16(r6)
  80273c:	10007f0e 	bge	r2,zero,80293c <_malloc_r+0x304>
  802740:	00807fc4 	movi	r2,511
  802744:	11c0fd36 	bltu	r2,r7,802b3c <_malloc_r+0x504>
  802748:	3806d0fa 	srli	r3,r7,3
  80274c:	01c00044 	movi	r7,1
  802750:	30800117 	ldw	r2,4(r6)
  802754:	19400044 	addi	r5,r3,1
  802758:	294b883a 	add	r5,r5,r5
  80275c:	1807d0ba 	srai	r3,r3,2
  802760:	294b883a 	add	r5,r5,r5
  802764:	294b883a 	add	r5,r5,r5
  802768:	298b883a 	add	r5,r5,r6
  80276c:	38c6983a 	sll	r3,r7,r3
  802770:	29c00017 	ldw	r7,0(r5)
  802774:	2a7ffe04 	addi	r9,r5,-8
  802778:	1886b03a 	or	r3,r3,r2
  80277c:	82400315 	stw	r9,12(r16)
  802780:	81c00215 	stw	r7,8(r16)
  802784:	30c00115 	stw	r3,4(r6)
  802788:	2c000015 	stw	r16,0(r5)
  80278c:	3c000315 	stw	r16,12(r7)
  802790:	2005d0ba 	srai	r2,r4,2
  802794:	01400044 	movi	r5,1
  802798:	288a983a 	sll	r5,r5,r2
  80279c:	19406f36 	bltu	r3,r5,80295c <_malloc_r+0x324>
  8027a0:	28c4703a 	and	r2,r5,r3
  8027a4:	10000a1e 	bne	r2,zero,8027d0 <_malloc_r+0x198>
  8027a8:	00bfff04 	movi	r2,-4
  8027ac:	294b883a 	add	r5,r5,r5
  8027b0:	2088703a 	and	r4,r4,r2
  8027b4:	28c4703a 	and	r2,r5,r3
  8027b8:	21000104 	addi	r4,r4,4
  8027bc:	1000041e 	bne	r2,zero,8027d0 <_malloc_r+0x198>
  8027c0:	294b883a 	add	r5,r5,r5
  8027c4:	28c4703a 	and	r2,r5,r3
  8027c8:	21000104 	addi	r4,r4,4
  8027cc:	103ffc26 	beq	r2,zero,8027c0 <__alt_mem_onchip_mem+0xff7827c0>
  8027d0:	02bfff04 	movi	r10,-4
  8027d4:	024003c4 	movi	r9,15
  8027d8:	21800044 	addi	r6,r4,1
  8027dc:	318d883a 	add	r6,r6,r6
  8027e0:	318d883a 	add	r6,r6,r6
  8027e4:	318d883a 	add	r6,r6,r6
  8027e8:	998d883a 	add	r6,r19,r6
  8027ec:	333ffe04 	addi	r12,r6,-8
  8027f0:	2017883a 	mov	r11,r4
  8027f4:	31800104 	addi	r6,r6,4
  8027f8:	34000017 	ldw	r16,0(r6)
  8027fc:	31fffd04 	addi	r7,r6,-12
  802800:	81c0041e 	bne	r16,r7,802814 <_malloc_r+0x1dc>
  802804:	0000fb06 	br	802bf4 <_malloc_r+0x5bc>
  802808:	1801030e 	bge	r3,zero,802c18 <_malloc_r+0x5e0>
  80280c:	84000317 	ldw	r16,12(r16)
  802810:	81c0f826 	beq	r16,r7,802bf4 <_malloc_r+0x5bc>
  802814:	80800117 	ldw	r2,4(r16)
  802818:	1284703a 	and	r2,r2,r10
  80281c:	1447c83a 	sub	r3,r2,r17
  802820:	48fff90e 	bge	r9,r3,802808 <__alt_mem_onchip_mem+0xff782808>
  802824:	80800317 	ldw	r2,12(r16)
  802828:	81000217 	ldw	r4,8(r16)
  80282c:	89400054 	ori	r5,r17,1
  802830:	81400115 	stw	r5,4(r16)
  802834:	20800315 	stw	r2,12(r4)
  802838:	11000215 	stw	r4,8(r2)
  80283c:	8463883a 	add	r17,r16,r17
  802840:	9c400515 	stw	r17,20(r19)
  802844:	9c400415 	stw	r17,16(r19)
  802848:	18800054 	ori	r2,r3,1
  80284c:	88800115 	stw	r2,4(r17)
  802850:	8a000315 	stw	r8,12(r17)
  802854:	8a000215 	stw	r8,8(r17)
  802858:	88e3883a 	add	r17,r17,r3
  80285c:	88c00015 	stw	r3,0(r17)
  802860:	9009883a 	mov	r4,r18
  802864:	080f7ac0 	call	80f7ac <__malloc_unlock>
  802868:	80800204 	addi	r2,r16,8
  80286c:	00001b06 	br	8028dc <_malloc_r+0x2a4>
  802870:	04400404 	movi	r17,16
  802874:	89402536 	bltu	r17,r5,80290c <_malloc_r+0x2d4>
  802878:	080f7880 	call	80f788 <__malloc_lock>
  80287c:	00800184 	movi	r2,6
  802880:	01000084 	movi	r4,2
  802884:	04c02074 	movhi	r19,129
  802888:	1085883a 	add	r2,r2,r2
  80288c:	9ccf5404 	addi	r19,r19,15696
  802890:	1085883a 	add	r2,r2,r2
  802894:	9885883a 	add	r2,r19,r2
  802898:	14000117 	ldw	r16,4(r2)
  80289c:	10fffe04 	addi	r3,r2,-8
  8028a0:	80c0d926 	beq	r16,r3,802c08 <_malloc_r+0x5d0>
  8028a4:	80c00117 	ldw	r3,4(r16)
  8028a8:	81000317 	ldw	r4,12(r16)
  8028ac:	00bfff04 	movi	r2,-4
  8028b0:	1884703a 	and	r2,r3,r2
  8028b4:	81400217 	ldw	r5,8(r16)
  8028b8:	8085883a 	add	r2,r16,r2
  8028bc:	10c00117 	ldw	r3,4(r2)
  8028c0:	29000315 	stw	r4,12(r5)
  8028c4:	21400215 	stw	r5,8(r4)
  8028c8:	18c00054 	ori	r3,r3,1
  8028cc:	10c00115 	stw	r3,4(r2)
  8028d0:	9009883a 	mov	r4,r18
  8028d4:	080f7ac0 	call	80f7ac <__malloc_unlock>
  8028d8:	80800204 	addi	r2,r16,8
  8028dc:	dfc00a17 	ldw	ra,40(sp)
  8028e0:	df000917 	ldw	fp,36(sp)
  8028e4:	ddc00817 	ldw	r23,32(sp)
  8028e8:	dd800717 	ldw	r22,28(sp)
  8028ec:	dd400617 	ldw	r21,24(sp)
  8028f0:	dd000517 	ldw	r20,20(sp)
  8028f4:	dcc00417 	ldw	r19,16(sp)
  8028f8:	dc800317 	ldw	r18,12(sp)
  8028fc:	dc400217 	ldw	r17,8(sp)
  802900:	dc000117 	ldw	r16,4(sp)
  802904:	dec00b04 	addi	sp,sp,44
  802908:	f800283a 	ret
  80290c:	00800304 	movi	r2,12
  802910:	90800015 	stw	r2,0(r18)
  802914:	0005883a 	mov	r2,zero
  802918:	003ff006 	br	8028dc <__alt_mem_onchip_mem+0xff7828dc>
  80291c:	01002004 	movi	r4,128
  802920:	02001004 	movi	r8,64
  802924:	01c00fc4 	movi	r7,63
  802928:	003f6106 	br	8026b0 <__alt_mem_onchip_mem+0xff7826b0>
  80292c:	4009883a 	mov	r4,r8
  802930:	003f7506 	br	802708 <__alt_mem_onchip_mem+0xff782708>
  802934:	81000317 	ldw	r4,12(r16)
  802938:	003fde06 	br	8028b4 <__alt_mem_onchip_mem+0xff7828b4>
  80293c:	81c5883a 	add	r2,r16,r7
  802940:	11400117 	ldw	r5,4(r2)
  802944:	9009883a 	mov	r4,r18
  802948:	29400054 	ori	r5,r5,1
  80294c:	11400115 	stw	r5,4(r2)
  802950:	080f7ac0 	call	80f7ac <__malloc_unlock>
  802954:	80800204 	addi	r2,r16,8
  802958:	003fe006 	br	8028dc <__alt_mem_onchip_mem+0xff7828dc>
  80295c:	9c000217 	ldw	r16,8(r19)
  802960:	00bfff04 	movi	r2,-4
  802964:	85800117 	ldw	r22,4(r16)
  802968:	b0ac703a 	and	r22,r22,r2
  80296c:	b4400336 	bltu	r22,r17,80297c <_malloc_r+0x344>
  802970:	b445c83a 	sub	r2,r22,r17
  802974:	00c003c4 	movi	r3,15
  802978:	18805d16 	blt	r3,r2,802af0 <_malloc_r+0x4b8>
  80297c:	05c02074 	movhi	r23,129
  802980:	00802074 	movhi	r2,129
  802984:	109cd704 	addi	r2,r2,29532
  802988:	bdd57904 	addi	r23,r23,21988
  80298c:	15400017 	ldw	r21,0(r2)
  802990:	b8c00017 	ldw	r3,0(r23)
  802994:	00bfffc4 	movi	r2,-1
  802998:	858d883a 	add	r6,r16,r22
  80299c:	8d6b883a 	add	r21,r17,r21
  8029a0:	1880ea26 	beq	r3,r2,802d4c <_malloc_r+0x714>
  8029a4:	ad4403c4 	addi	r21,r21,4111
  8029a8:	00bc0004 	movi	r2,-4096
  8029ac:	a8aa703a 	and	r21,r21,r2
  8029b0:	a80b883a 	mov	r5,r21
  8029b4:	9009883a 	mov	r4,r18
  8029b8:	d9800015 	stw	r6,0(sp)
  8029bc:	08034380 	call	803438 <_sbrk_r>
  8029c0:	1029883a 	mov	r20,r2
  8029c4:	00bfffc4 	movi	r2,-1
  8029c8:	d9800017 	ldw	r6,0(sp)
  8029cc:	a080e826 	beq	r20,r2,802d70 <_malloc_r+0x738>
  8029d0:	a180a636 	bltu	r20,r6,802c6c <_malloc_r+0x634>
  8029d4:	07002074 	movhi	fp,129
  8029d8:	e71ce204 	addi	fp,fp,29576
  8029dc:	e0800017 	ldw	r2,0(fp)
  8029e0:	a887883a 	add	r3,r21,r2
  8029e4:	e0c00015 	stw	r3,0(fp)
  8029e8:	3500e626 	beq	r6,r20,802d84 <_malloc_r+0x74c>
  8029ec:	b9000017 	ldw	r4,0(r23)
  8029f0:	00bfffc4 	movi	r2,-1
  8029f4:	2080ee26 	beq	r4,r2,802db0 <_malloc_r+0x778>
  8029f8:	a185c83a 	sub	r2,r20,r6
  8029fc:	10c5883a 	add	r2,r2,r3
  802a00:	e0800015 	stw	r2,0(fp)
  802a04:	a0c001cc 	andi	r3,r20,7
  802a08:	1800bc26 	beq	r3,zero,802cfc <_malloc_r+0x6c4>
  802a0c:	a0e9c83a 	sub	r20,r20,r3
  802a10:	00840204 	movi	r2,4104
  802a14:	a5000204 	addi	r20,r20,8
  802a18:	10c7c83a 	sub	r3,r2,r3
  802a1c:	a545883a 	add	r2,r20,r21
  802a20:	1083ffcc 	andi	r2,r2,4095
  802a24:	18abc83a 	sub	r21,r3,r2
  802a28:	a80b883a 	mov	r5,r21
  802a2c:	9009883a 	mov	r4,r18
  802a30:	08034380 	call	803438 <_sbrk_r>
  802a34:	00ffffc4 	movi	r3,-1
  802a38:	10c0e126 	beq	r2,r3,802dc0 <_malloc_r+0x788>
  802a3c:	1505c83a 	sub	r2,r2,r20
  802a40:	1545883a 	add	r2,r2,r21
  802a44:	10800054 	ori	r2,r2,1
  802a48:	e0c00017 	ldw	r3,0(fp)
  802a4c:	9d000215 	stw	r20,8(r19)
  802a50:	a0800115 	stw	r2,4(r20)
  802a54:	a8c7883a 	add	r3,r21,r3
  802a58:	e0c00015 	stw	r3,0(fp)
  802a5c:	84c00e26 	beq	r16,r19,802a98 <_malloc_r+0x460>
  802a60:	018003c4 	movi	r6,15
  802a64:	3580a72e 	bgeu	r6,r22,802d04 <_malloc_r+0x6cc>
  802a68:	81400117 	ldw	r5,4(r16)
  802a6c:	013ffe04 	movi	r4,-8
  802a70:	b0bffd04 	addi	r2,r22,-12
  802a74:	1104703a 	and	r2,r2,r4
  802a78:	2900004c 	andi	r4,r5,1
  802a7c:	2088b03a 	or	r4,r4,r2
  802a80:	81000115 	stw	r4,4(r16)
  802a84:	01400144 	movi	r5,5
  802a88:	8089883a 	add	r4,r16,r2
  802a8c:	21400115 	stw	r5,4(r4)
  802a90:	21400215 	stw	r5,8(r4)
  802a94:	3080cd36 	bltu	r6,r2,802dcc <_malloc_r+0x794>
  802a98:	00802074 	movhi	r2,129
  802a9c:	109cd604 	addi	r2,r2,29528
  802aa0:	11000017 	ldw	r4,0(r2)
  802aa4:	20c0012e 	bgeu	r4,r3,802aac <_malloc_r+0x474>
  802aa8:	10c00015 	stw	r3,0(r2)
  802aac:	00802074 	movhi	r2,129
  802ab0:	109cd504 	addi	r2,r2,29524
  802ab4:	11000017 	ldw	r4,0(r2)
  802ab8:	9c000217 	ldw	r16,8(r19)
  802abc:	20c0012e 	bgeu	r4,r3,802ac4 <_malloc_r+0x48c>
  802ac0:	10c00015 	stw	r3,0(r2)
  802ac4:	80c00117 	ldw	r3,4(r16)
  802ac8:	00bfff04 	movi	r2,-4
  802acc:	1886703a 	and	r3,r3,r2
  802ad0:	1c45c83a 	sub	r2,r3,r17
  802ad4:	1c400236 	bltu	r3,r17,802ae0 <_malloc_r+0x4a8>
  802ad8:	00c003c4 	movi	r3,15
  802adc:	18800416 	blt	r3,r2,802af0 <_malloc_r+0x4b8>
  802ae0:	9009883a 	mov	r4,r18
  802ae4:	080f7ac0 	call	80f7ac <__malloc_unlock>
  802ae8:	0005883a 	mov	r2,zero
  802aec:	003f7b06 	br	8028dc <__alt_mem_onchip_mem+0xff7828dc>
  802af0:	88c00054 	ori	r3,r17,1
  802af4:	80c00115 	stw	r3,4(r16)
  802af8:	8463883a 	add	r17,r16,r17
  802afc:	10800054 	ori	r2,r2,1
  802b00:	9c400215 	stw	r17,8(r19)
  802b04:	88800115 	stw	r2,4(r17)
  802b08:	9009883a 	mov	r4,r18
  802b0c:	080f7ac0 	call	80f7ac <__malloc_unlock>
  802b10:	80800204 	addi	r2,r16,8
  802b14:	003f7106 	br	8028dc <__alt_mem_onchip_mem+0xff7828dc>
  802b18:	00c00504 	movi	r3,20
  802b1c:	18804a2e 	bgeu	r3,r2,802c48 <_malloc_r+0x610>
  802b20:	00c01504 	movi	r3,84
  802b24:	18806e36 	bltu	r3,r2,802ce0 <_malloc_r+0x6a8>
  802b28:	8804d33a 	srli	r2,r17,12
  802b2c:	12001bc4 	addi	r8,r2,111
  802b30:	11c01b84 	addi	r7,r2,110
  802b34:	4209883a 	add	r4,r8,r8
  802b38:	003edd06 	br	8026b0 <__alt_mem_onchip_mem+0xff7826b0>
  802b3c:	3804d27a 	srli	r2,r7,9
  802b40:	00c00104 	movi	r3,4
  802b44:	1880442e 	bgeu	r3,r2,802c58 <_malloc_r+0x620>
  802b48:	00c00504 	movi	r3,20
  802b4c:	18808136 	bltu	r3,r2,802d54 <_malloc_r+0x71c>
  802b50:	11401704 	addi	r5,r2,92
  802b54:	10c016c4 	addi	r3,r2,91
  802b58:	294b883a 	add	r5,r5,r5
  802b5c:	294b883a 	add	r5,r5,r5
  802b60:	294b883a 	add	r5,r5,r5
  802b64:	994b883a 	add	r5,r19,r5
  802b68:	28800017 	ldw	r2,0(r5)
  802b6c:	01802074 	movhi	r6,129
  802b70:	297ffe04 	addi	r5,r5,-8
  802b74:	318f5404 	addi	r6,r6,15696
  802b78:	28806526 	beq	r5,r2,802d10 <_malloc_r+0x6d8>
  802b7c:	01bfff04 	movi	r6,-4
  802b80:	10c00117 	ldw	r3,4(r2)
  802b84:	1986703a 	and	r3,r3,r6
  802b88:	38c0022e 	bgeu	r7,r3,802b94 <_malloc_r+0x55c>
  802b8c:	10800217 	ldw	r2,8(r2)
  802b90:	28bffb1e 	bne	r5,r2,802b80 <__alt_mem_onchip_mem+0xff782b80>
  802b94:	11400317 	ldw	r5,12(r2)
  802b98:	98c00117 	ldw	r3,4(r19)
  802b9c:	81400315 	stw	r5,12(r16)
  802ba0:	80800215 	stw	r2,8(r16)
  802ba4:	2c000215 	stw	r16,8(r5)
  802ba8:	14000315 	stw	r16,12(r2)
  802bac:	003ef806 	br	802790 <__alt_mem_onchip_mem+0xff782790>
  802bb0:	88c00054 	ori	r3,r17,1
  802bb4:	80c00115 	stw	r3,4(r16)
  802bb8:	8463883a 	add	r17,r16,r17
  802bbc:	34400515 	stw	r17,20(r6)
  802bc0:	34400415 	stw	r17,16(r6)
  802bc4:	10c00054 	ori	r3,r2,1
  802bc8:	8a000315 	stw	r8,12(r17)
  802bcc:	8a000215 	stw	r8,8(r17)
  802bd0:	88c00115 	stw	r3,4(r17)
  802bd4:	88a3883a 	add	r17,r17,r2
  802bd8:	88800015 	stw	r2,0(r17)
  802bdc:	9009883a 	mov	r4,r18
  802be0:	080f7ac0 	call	80f7ac <__malloc_unlock>
  802be4:	80800204 	addi	r2,r16,8
  802be8:	003f3c06 	br	8028dc <__alt_mem_onchip_mem+0xff7828dc>
  802bec:	30c00117 	ldw	r3,4(r6)
  802bf0:	003ee706 	br	802790 <__alt_mem_onchip_mem+0xff782790>
  802bf4:	5ac00044 	addi	r11,r11,1
  802bf8:	588000cc 	andi	r2,r11,3
  802bfc:	31800204 	addi	r6,r6,8
  802c00:	103efd1e 	bne	r2,zero,8027f8 <__alt_mem_onchip_mem+0xff7827f8>
  802c04:	00002406 	br	802c98 <_malloc_r+0x660>
  802c08:	14000317 	ldw	r16,12(r2)
  802c0c:	143f251e 	bne	r2,r16,8028a4 <__alt_mem_onchip_mem+0xff7828a4>
  802c10:	21000084 	addi	r4,r4,2
  802c14:	003ebc06 	br	802708 <__alt_mem_onchip_mem+0xff782708>
  802c18:	8085883a 	add	r2,r16,r2
  802c1c:	10c00117 	ldw	r3,4(r2)
  802c20:	81000317 	ldw	r4,12(r16)
  802c24:	81400217 	ldw	r5,8(r16)
  802c28:	18c00054 	ori	r3,r3,1
  802c2c:	10c00115 	stw	r3,4(r2)
  802c30:	29000315 	stw	r4,12(r5)
  802c34:	21400215 	stw	r5,8(r4)
  802c38:	9009883a 	mov	r4,r18
  802c3c:	080f7ac0 	call	80f7ac <__malloc_unlock>
  802c40:	80800204 	addi	r2,r16,8
  802c44:	003f2506 	br	8028dc <__alt_mem_onchip_mem+0xff7828dc>
  802c48:	12001704 	addi	r8,r2,92
  802c4c:	11c016c4 	addi	r7,r2,91
  802c50:	4209883a 	add	r4,r8,r8
  802c54:	003e9606 	br	8026b0 <__alt_mem_onchip_mem+0xff7826b0>
  802c58:	3804d1ba 	srli	r2,r7,6
  802c5c:	11400e44 	addi	r5,r2,57
  802c60:	10c00e04 	addi	r3,r2,56
  802c64:	294b883a 	add	r5,r5,r5
  802c68:	003fbc06 	br	802b5c <__alt_mem_onchip_mem+0xff782b5c>
  802c6c:	84ff5926 	beq	r16,r19,8029d4 <__alt_mem_onchip_mem+0xff7829d4>
  802c70:	00802074 	movhi	r2,129
  802c74:	108f5404 	addi	r2,r2,15696
  802c78:	14000217 	ldw	r16,8(r2)
  802c7c:	00bfff04 	movi	r2,-4
  802c80:	80c00117 	ldw	r3,4(r16)
  802c84:	1886703a 	and	r3,r3,r2
  802c88:	003f9106 	br	802ad0 <__alt_mem_onchip_mem+0xff782ad0>
  802c8c:	60800217 	ldw	r2,8(r12)
  802c90:	213fffc4 	addi	r4,r4,-1
  802c94:	1300651e 	bne	r2,r12,802e2c <_malloc_r+0x7f4>
  802c98:	208000cc 	andi	r2,r4,3
  802c9c:	633ffe04 	addi	r12,r12,-8
  802ca0:	103ffa1e 	bne	r2,zero,802c8c <__alt_mem_onchip_mem+0xff782c8c>
  802ca4:	98800117 	ldw	r2,4(r19)
  802ca8:	0146303a 	nor	r3,zero,r5
  802cac:	1884703a 	and	r2,r3,r2
  802cb0:	98800115 	stw	r2,4(r19)
  802cb4:	294b883a 	add	r5,r5,r5
  802cb8:	117f2836 	bltu	r2,r5,80295c <__alt_mem_onchip_mem+0xff78295c>
  802cbc:	283f2726 	beq	r5,zero,80295c <__alt_mem_onchip_mem+0xff78295c>
  802cc0:	2886703a 	and	r3,r5,r2
  802cc4:	5809883a 	mov	r4,r11
  802cc8:	183ec31e 	bne	r3,zero,8027d8 <__alt_mem_onchip_mem+0xff7827d8>
  802ccc:	294b883a 	add	r5,r5,r5
  802cd0:	2886703a 	and	r3,r5,r2
  802cd4:	21000104 	addi	r4,r4,4
  802cd8:	183ffc26 	beq	r3,zero,802ccc <__alt_mem_onchip_mem+0xff782ccc>
  802cdc:	003ebe06 	br	8027d8 <__alt_mem_onchip_mem+0xff7827d8>
  802ce0:	00c05504 	movi	r3,340
  802ce4:	18801236 	bltu	r3,r2,802d30 <_malloc_r+0x6f8>
  802ce8:	8804d3fa 	srli	r2,r17,15
  802cec:	12001e04 	addi	r8,r2,120
  802cf0:	11c01dc4 	addi	r7,r2,119
  802cf4:	4209883a 	add	r4,r8,r8
  802cf8:	003e6d06 	br	8026b0 <__alt_mem_onchip_mem+0xff7826b0>
  802cfc:	00c40004 	movi	r3,4096
  802d00:	003f4606 	br	802a1c <__alt_mem_onchip_mem+0xff782a1c>
  802d04:	00800044 	movi	r2,1
  802d08:	a0800115 	stw	r2,4(r20)
  802d0c:	003f7406 	br	802ae0 <__alt_mem_onchip_mem+0xff782ae0>
  802d10:	1805d0ba 	srai	r2,r3,2
  802d14:	01c00044 	movi	r7,1
  802d18:	30c00117 	ldw	r3,4(r6)
  802d1c:	388e983a 	sll	r7,r7,r2
  802d20:	2805883a 	mov	r2,r5
  802d24:	38c6b03a 	or	r3,r7,r3
  802d28:	30c00115 	stw	r3,4(r6)
  802d2c:	003f9b06 	br	802b9c <__alt_mem_onchip_mem+0xff782b9c>
  802d30:	00c15504 	movi	r3,1364
  802d34:	18801a36 	bltu	r3,r2,802da0 <_malloc_r+0x768>
  802d38:	8804d4ba 	srli	r2,r17,18
  802d3c:	12001f44 	addi	r8,r2,125
  802d40:	11c01f04 	addi	r7,r2,124
  802d44:	4209883a 	add	r4,r8,r8
  802d48:	003e5906 	br	8026b0 <__alt_mem_onchip_mem+0xff7826b0>
  802d4c:	ad400404 	addi	r21,r21,16
  802d50:	003f1706 	br	8029b0 <__alt_mem_onchip_mem+0xff7829b0>
  802d54:	00c01504 	movi	r3,84
  802d58:	18802336 	bltu	r3,r2,802de8 <_malloc_r+0x7b0>
  802d5c:	3804d33a 	srli	r2,r7,12
  802d60:	11401bc4 	addi	r5,r2,111
  802d64:	10c01b84 	addi	r3,r2,110
  802d68:	294b883a 	add	r5,r5,r5
  802d6c:	003f7b06 	br	802b5c <__alt_mem_onchip_mem+0xff782b5c>
  802d70:	9c000217 	ldw	r16,8(r19)
  802d74:	00bfff04 	movi	r2,-4
  802d78:	80c00117 	ldw	r3,4(r16)
  802d7c:	1886703a 	and	r3,r3,r2
  802d80:	003f5306 	br	802ad0 <__alt_mem_onchip_mem+0xff782ad0>
  802d84:	3083ffcc 	andi	r2,r6,4095
  802d88:	103f181e 	bne	r2,zero,8029ec <__alt_mem_onchip_mem+0xff7829ec>
  802d8c:	99000217 	ldw	r4,8(r19)
  802d90:	b545883a 	add	r2,r22,r21
  802d94:	10800054 	ori	r2,r2,1
  802d98:	20800115 	stw	r2,4(r4)
  802d9c:	003f3e06 	br	802a98 <__alt_mem_onchip_mem+0xff782a98>
  802da0:	01003f84 	movi	r4,254
  802da4:	02001fc4 	movi	r8,127
  802da8:	01c01f84 	movi	r7,126
  802dac:	003e4006 	br	8026b0 <__alt_mem_onchip_mem+0xff7826b0>
  802db0:	00802074 	movhi	r2,129
  802db4:	10957904 	addi	r2,r2,21988
  802db8:	15000015 	stw	r20,0(r2)
  802dbc:	003f1106 	br	802a04 <__alt_mem_onchip_mem+0xff782a04>
  802dc0:	00800044 	movi	r2,1
  802dc4:	002b883a 	mov	r21,zero
  802dc8:	003f1f06 	br	802a48 <__alt_mem_onchip_mem+0xff782a48>
  802dcc:	81400204 	addi	r5,r16,8
  802dd0:	9009883a 	mov	r4,r18
  802dd4:	0807d0c0 	call	807d0c <_free_r>
  802dd8:	00802074 	movhi	r2,129
  802ddc:	109ce204 	addi	r2,r2,29576
  802de0:	10c00017 	ldw	r3,0(r2)
  802de4:	003f2c06 	br	802a98 <__alt_mem_onchip_mem+0xff782a98>
  802de8:	00c05504 	movi	r3,340
  802dec:	18800536 	bltu	r3,r2,802e04 <_malloc_r+0x7cc>
  802df0:	3804d3fa 	srli	r2,r7,15
  802df4:	11401e04 	addi	r5,r2,120
  802df8:	10c01dc4 	addi	r3,r2,119
  802dfc:	294b883a 	add	r5,r5,r5
  802e00:	003f5606 	br	802b5c <__alt_mem_onchip_mem+0xff782b5c>
  802e04:	00c15504 	movi	r3,1364
  802e08:	18800536 	bltu	r3,r2,802e20 <_malloc_r+0x7e8>
  802e0c:	3804d4ba 	srli	r2,r7,18
  802e10:	11401f44 	addi	r5,r2,125
  802e14:	10c01f04 	addi	r3,r2,124
  802e18:	294b883a 	add	r5,r5,r5
  802e1c:	003f4f06 	br	802b5c <__alt_mem_onchip_mem+0xff782b5c>
  802e20:	01403f84 	movi	r5,254
  802e24:	00c01f84 	movi	r3,126
  802e28:	003f4c06 	br	802b5c <__alt_mem_onchip_mem+0xff782b5c>
  802e2c:	98800117 	ldw	r2,4(r19)
  802e30:	003fa006 	br	802cb4 <__alt_mem_onchip_mem+0xff782cb4>
  802e34:	8808d0fa 	srli	r4,r17,3
  802e38:	20800044 	addi	r2,r4,1
  802e3c:	1085883a 	add	r2,r2,r2
  802e40:	003e9006 	br	802884 <__alt_mem_onchip_mem+0xff782884>

00802e44 <memset>:
  802e44:	20c000cc 	andi	r3,r4,3
  802e48:	2005883a 	mov	r2,r4
  802e4c:	18004426 	beq	r3,zero,802f60 <memset+0x11c>
  802e50:	31ffffc4 	addi	r7,r6,-1
  802e54:	30004026 	beq	r6,zero,802f58 <memset+0x114>
  802e58:	2813883a 	mov	r9,r5
  802e5c:	200d883a 	mov	r6,r4
  802e60:	2007883a 	mov	r3,r4
  802e64:	00000406 	br	802e78 <memset+0x34>
  802e68:	3a3fffc4 	addi	r8,r7,-1
  802e6c:	31800044 	addi	r6,r6,1
  802e70:	38003926 	beq	r7,zero,802f58 <memset+0x114>
  802e74:	400f883a 	mov	r7,r8
  802e78:	18c00044 	addi	r3,r3,1
  802e7c:	32400005 	stb	r9,0(r6)
  802e80:	1a0000cc 	andi	r8,r3,3
  802e84:	403ff81e 	bne	r8,zero,802e68 <__alt_mem_onchip_mem+0xff782e68>
  802e88:	010000c4 	movi	r4,3
  802e8c:	21c02d2e 	bgeu	r4,r7,802f44 <memset+0x100>
  802e90:	29003fcc 	andi	r4,r5,255
  802e94:	200c923a 	slli	r6,r4,8
  802e98:	3108b03a 	or	r4,r6,r4
  802e9c:	200c943a 	slli	r6,r4,16
  802ea0:	218cb03a 	or	r6,r4,r6
  802ea4:	010003c4 	movi	r4,15
  802ea8:	21c0182e 	bgeu	r4,r7,802f0c <memset+0xc8>
  802eac:	3b3ffc04 	addi	r12,r7,-16
  802eb0:	6018d13a 	srli	r12,r12,4
  802eb4:	1a000104 	addi	r8,r3,4
  802eb8:	1ac00204 	addi	r11,r3,8
  802ebc:	6008913a 	slli	r4,r12,4
  802ec0:	1a800304 	addi	r10,r3,12
  802ec4:	1813883a 	mov	r9,r3
  802ec8:	21000504 	addi	r4,r4,20
  802ecc:	1909883a 	add	r4,r3,r4
  802ed0:	49800015 	stw	r6,0(r9)
  802ed4:	41800015 	stw	r6,0(r8)
  802ed8:	59800015 	stw	r6,0(r11)
  802edc:	51800015 	stw	r6,0(r10)
  802ee0:	42000404 	addi	r8,r8,16
  802ee4:	4a400404 	addi	r9,r9,16
  802ee8:	5ac00404 	addi	r11,r11,16
  802eec:	52800404 	addi	r10,r10,16
  802ef0:	413ff71e 	bne	r8,r4,802ed0 <__alt_mem_onchip_mem+0xff782ed0>
  802ef4:	63000044 	addi	r12,r12,1
  802ef8:	6018913a 	slli	r12,r12,4
  802efc:	39c003cc 	andi	r7,r7,15
  802f00:	010000c4 	movi	r4,3
  802f04:	1b07883a 	add	r3,r3,r12
  802f08:	21c00e2e 	bgeu	r4,r7,802f44 <memset+0x100>
  802f0c:	1813883a 	mov	r9,r3
  802f10:	3811883a 	mov	r8,r7
  802f14:	010000c4 	movi	r4,3
  802f18:	49800015 	stw	r6,0(r9)
  802f1c:	423fff04 	addi	r8,r8,-4
  802f20:	4a400104 	addi	r9,r9,4
  802f24:	223ffc36 	bltu	r4,r8,802f18 <__alt_mem_onchip_mem+0xff782f18>
  802f28:	393fff04 	addi	r4,r7,-4
  802f2c:	2008d0ba 	srli	r4,r4,2
  802f30:	39c000cc 	andi	r7,r7,3
  802f34:	21000044 	addi	r4,r4,1
  802f38:	2109883a 	add	r4,r4,r4
  802f3c:	2109883a 	add	r4,r4,r4
  802f40:	1907883a 	add	r3,r3,r4
  802f44:	38000526 	beq	r7,zero,802f5c <memset+0x118>
  802f48:	19cf883a 	add	r7,r3,r7
  802f4c:	19400005 	stb	r5,0(r3)
  802f50:	18c00044 	addi	r3,r3,1
  802f54:	38fffd1e 	bne	r7,r3,802f4c <__alt_mem_onchip_mem+0xff782f4c>
  802f58:	f800283a 	ret
  802f5c:	f800283a 	ret
  802f60:	2007883a 	mov	r3,r4
  802f64:	300f883a 	mov	r7,r6
  802f68:	003fc706 	br	802e88 <__alt_mem_onchip_mem+0xff782e88>

00802f6c <_open_r>:
  802f6c:	defffd04 	addi	sp,sp,-12
  802f70:	2805883a 	mov	r2,r5
  802f74:	dc000015 	stw	r16,0(sp)
  802f78:	04002074 	movhi	r16,129
  802f7c:	dc400115 	stw	r17,4(sp)
  802f80:	300b883a 	mov	r5,r6
  802f84:	841cd404 	addi	r16,r16,29520
  802f88:	2023883a 	mov	r17,r4
  802f8c:	380d883a 	mov	r6,r7
  802f90:	1009883a 	mov	r4,r2
  802f94:	dfc00215 	stw	ra,8(sp)
  802f98:	80000015 	stw	zero,0(r16)
  802f9c:	080f8d00 	call	80f8d0 <open>
  802fa0:	00ffffc4 	movi	r3,-1
  802fa4:	10c00526 	beq	r2,r3,802fbc <_open_r+0x50>
  802fa8:	dfc00217 	ldw	ra,8(sp)
  802fac:	dc400117 	ldw	r17,4(sp)
  802fb0:	dc000017 	ldw	r16,0(sp)
  802fb4:	dec00304 	addi	sp,sp,12
  802fb8:	f800283a 	ret
  802fbc:	80c00017 	ldw	r3,0(r16)
  802fc0:	183ff926 	beq	r3,zero,802fa8 <__alt_mem_onchip_mem+0xff782fa8>
  802fc4:	88c00015 	stw	r3,0(r17)
  802fc8:	003ff706 	br	802fa8 <__alt_mem_onchip_mem+0xff782fa8>

00802fcc <_printf_r>:
  802fcc:	defffd04 	addi	sp,sp,-12
  802fd0:	2805883a 	mov	r2,r5
  802fd4:	dfc00015 	stw	ra,0(sp)
  802fd8:	d9800115 	stw	r6,4(sp)
  802fdc:	d9c00215 	stw	r7,8(sp)
  802fe0:	21400217 	ldw	r5,8(r4)
  802fe4:	d9c00104 	addi	r7,sp,4
  802fe8:	100d883a 	mov	r6,r2
  802fec:	08038d80 	call	8038d8 <___vfprintf_internal_r>
  802ff0:	dfc00017 	ldw	ra,0(sp)
  802ff4:	dec00304 	addi	sp,sp,12
  802ff8:	f800283a 	ret

00802ffc <printf>:
  802ffc:	defffc04 	addi	sp,sp,-16
  803000:	dfc00015 	stw	ra,0(sp)
  803004:	d9400115 	stw	r5,4(sp)
  803008:	d9800215 	stw	r6,8(sp)
  80300c:	d9c00315 	stw	r7,12(sp)
  803010:	00802074 	movhi	r2,129
  803014:	10957804 	addi	r2,r2,21984
  803018:	10800017 	ldw	r2,0(r2)
  80301c:	200b883a 	mov	r5,r4
  803020:	d9800104 	addi	r6,sp,4
  803024:	11000217 	ldw	r4,8(r2)
  803028:	0805ad00 	call	805ad0 <__vfprintf_internal>
  80302c:	dfc00017 	ldw	ra,0(sp)
  803030:	dec00404 	addi	sp,sp,16
  803034:	f800283a 	ret

00803038 <_putc_r>:
  803038:	defffc04 	addi	sp,sp,-16
  80303c:	dc000215 	stw	r16,8(sp)
  803040:	dfc00315 	stw	ra,12(sp)
  803044:	2021883a 	mov	r16,r4
  803048:	20000226 	beq	r4,zero,803054 <_putc_r+0x1c>
  80304c:	20800e17 	ldw	r2,56(r4)
  803050:	10001b26 	beq	r2,zero,8030c0 <_putc_r+0x88>
  803054:	30800217 	ldw	r2,8(r6)
  803058:	10bfffc4 	addi	r2,r2,-1
  80305c:	30800215 	stw	r2,8(r6)
  803060:	10000a16 	blt	r2,zero,80308c <_putc_r+0x54>
  803064:	30800017 	ldw	r2,0(r6)
  803068:	11400005 	stb	r5,0(r2)
  80306c:	30800017 	ldw	r2,0(r6)
  803070:	10c00044 	addi	r3,r2,1
  803074:	30c00015 	stw	r3,0(r6)
  803078:	10800003 	ldbu	r2,0(r2)
  80307c:	dfc00317 	ldw	ra,12(sp)
  803080:	dc000217 	ldw	r16,8(sp)
  803084:	dec00404 	addi	sp,sp,16
  803088:	f800283a 	ret
  80308c:	30c00617 	ldw	r3,24(r6)
  803090:	10c00616 	blt	r2,r3,8030ac <_putc_r+0x74>
  803094:	30800017 	ldw	r2,0(r6)
  803098:	00c00284 	movi	r3,10
  80309c:	11400005 	stb	r5,0(r2)
  8030a0:	30800017 	ldw	r2,0(r6)
  8030a4:	11400003 	ldbu	r5,0(r2)
  8030a8:	28fff11e 	bne	r5,r3,803070 <__alt_mem_onchip_mem+0xff783070>
  8030ac:	8009883a 	mov	r4,r16
  8030b0:	dfc00317 	ldw	ra,12(sp)
  8030b4:	dc000217 	ldw	r16,8(sp)
  8030b8:	dec00404 	addi	sp,sp,16
  8030bc:	0805ba81 	jmpi	805ba8 <__swbuf_r>
  8030c0:	d9400015 	stw	r5,0(sp)
  8030c4:	d9800115 	stw	r6,4(sp)
  8030c8:	0801aa80 	call	801aa8 <__sinit>
  8030cc:	d9800117 	ldw	r6,4(sp)
  8030d0:	d9400017 	ldw	r5,0(sp)
  8030d4:	003fdf06 	br	803054 <__alt_mem_onchip_mem+0xff783054>

008030d8 <putc>:
  8030d8:	00802074 	movhi	r2,129
  8030dc:	defffc04 	addi	sp,sp,-16
  8030e0:	10957804 	addi	r2,r2,21984
  8030e4:	dc000115 	stw	r16,4(sp)
  8030e8:	14000017 	ldw	r16,0(r2)
  8030ec:	dc400215 	stw	r17,8(sp)
  8030f0:	dfc00315 	stw	ra,12(sp)
  8030f4:	2023883a 	mov	r17,r4
  8030f8:	80000226 	beq	r16,zero,803104 <putc+0x2c>
  8030fc:	80800e17 	ldw	r2,56(r16)
  803100:	10001a26 	beq	r2,zero,80316c <putc+0x94>
  803104:	28800217 	ldw	r2,8(r5)
  803108:	10bfffc4 	addi	r2,r2,-1
  80310c:	28800215 	stw	r2,8(r5)
  803110:	10000b16 	blt	r2,zero,803140 <putc+0x68>
  803114:	28800017 	ldw	r2,0(r5)
  803118:	14400005 	stb	r17,0(r2)
  80311c:	28800017 	ldw	r2,0(r5)
  803120:	10c00044 	addi	r3,r2,1
  803124:	28c00015 	stw	r3,0(r5)
  803128:	10800003 	ldbu	r2,0(r2)
  80312c:	dfc00317 	ldw	ra,12(sp)
  803130:	dc400217 	ldw	r17,8(sp)
  803134:	dc000117 	ldw	r16,4(sp)
  803138:	dec00404 	addi	sp,sp,16
  80313c:	f800283a 	ret
  803140:	28c00617 	ldw	r3,24(r5)
  803144:	10c00e16 	blt	r2,r3,803180 <putc+0xa8>
  803148:	28800017 	ldw	r2,0(r5)
  80314c:	01000284 	movi	r4,10
  803150:	14400005 	stb	r17,0(r2)
  803154:	28800017 	ldw	r2,0(r5)
  803158:	10c00003 	ldbu	r3,0(r2)
  80315c:	193ff01e 	bne	r3,r4,803120 <__alt_mem_onchip_mem+0xff783120>
  803160:	280d883a 	mov	r6,r5
  803164:	180b883a 	mov	r5,r3
  803168:	00000706 	br	803188 <putc+0xb0>
  80316c:	8009883a 	mov	r4,r16
  803170:	d9400015 	stw	r5,0(sp)
  803174:	0801aa80 	call	801aa8 <__sinit>
  803178:	d9400017 	ldw	r5,0(sp)
  80317c:	003fe106 	br	803104 <__alt_mem_onchip_mem+0xff783104>
  803180:	280d883a 	mov	r6,r5
  803184:	880b883a 	mov	r5,r17
  803188:	8009883a 	mov	r4,r16
  80318c:	dfc00317 	ldw	ra,12(sp)
  803190:	dc400217 	ldw	r17,8(sp)
  803194:	dc000117 	ldw	r16,4(sp)
  803198:	dec00404 	addi	sp,sp,16
  80319c:	0805ba81 	jmpi	805ba8 <__swbuf_r>

008031a0 <_putchar_r>:
  8031a0:	21800217 	ldw	r6,8(r4)
  8031a4:	08030381 	jmpi	803038 <_putc_r>

008031a8 <putchar>:
  8031a8:	00802074 	movhi	r2,129
  8031ac:	10957804 	addi	r2,r2,21984
  8031b0:	200b883a 	mov	r5,r4
  8031b4:	11000017 	ldw	r4,0(r2)
  8031b8:	21800217 	ldw	r6,8(r4)
  8031bc:	08030381 	jmpi	803038 <_putc_r>

008031c0 <lflush>:
  8031c0:	2080030b 	ldhu	r2,12(r4)
  8031c4:	00c00244 	movi	r3,9
  8031c8:	1080024c 	andi	r2,r2,9
  8031cc:	10c00226 	beq	r2,r3,8031d8 <lflush+0x18>
  8031d0:	0005883a 	mov	r2,zero
  8031d4:	f800283a 	ret
  8031d8:	0807b0c1 	jmpi	807b0c <fflush>

008031dc <__srefill_r>:
  8031dc:	defffc04 	addi	sp,sp,-16
  8031e0:	dc400115 	stw	r17,4(sp)
  8031e4:	dc000015 	stw	r16,0(sp)
  8031e8:	dfc00315 	stw	ra,12(sp)
  8031ec:	dc800215 	stw	r18,8(sp)
  8031f0:	2023883a 	mov	r17,r4
  8031f4:	2821883a 	mov	r16,r5
  8031f8:	20000226 	beq	r4,zero,803204 <__srefill_r+0x28>
  8031fc:	20800e17 	ldw	r2,56(r4)
  803200:	10003c26 	beq	r2,zero,8032f4 <__srefill_r+0x118>
  803204:	80c0030b 	ldhu	r3,12(r16)
  803208:	1908000c 	andi	r4,r3,8192
  80320c:	1805883a 	mov	r2,r3
  803210:	2000071e 	bne	r4,zero,803230 <__srefill_r+0x54>
  803214:	81001917 	ldw	r4,100(r16)
  803218:	18880014 	ori	r2,r3,8192
  80321c:	00f7ffc4 	movi	r3,-8193
  803220:	20c8703a 	and	r4,r4,r3
  803224:	8080030d 	sth	r2,12(r16)
  803228:	1007883a 	mov	r3,r2
  80322c:	81001915 	stw	r4,100(r16)
  803230:	80000115 	stw	zero,4(r16)
  803234:	1100080c 	andi	r4,r2,32
  803238:	2000571e 	bne	r4,zero,803398 <__srefill_r+0x1bc>
  80323c:	1100010c 	andi	r4,r2,4
  803240:	20001f26 	beq	r4,zero,8032c0 <__srefill_r+0xe4>
  803244:	81400c17 	ldw	r5,48(r16)
  803248:	28000826 	beq	r5,zero,80326c <__srefill_r+0x90>
  80324c:	80801004 	addi	r2,r16,64
  803250:	28800226 	beq	r5,r2,80325c <__srefill_r+0x80>
  803254:	8809883a 	mov	r4,r17
  803258:	0807d0c0 	call	807d0c <_free_r>
  80325c:	80800f17 	ldw	r2,60(r16)
  803260:	80000c15 	stw	zero,48(r16)
  803264:	80800115 	stw	r2,4(r16)
  803268:	1000391e 	bne	r2,zero,803350 <__srefill_r+0x174>
  80326c:	80800417 	ldw	r2,16(r16)
  803270:	10004b26 	beq	r2,zero,8033a0 <__srefill_r+0x1c4>
  803274:	8480030b 	ldhu	r18,12(r16)
  803278:	908000cc 	andi	r2,r18,3
  80327c:	10001f1e 	bne	r2,zero,8032fc <__srefill_r+0x120>
  803280:	81800417 	ldw	r6,16(r16)
  803284:	80800817 	ldw	r2,32(r16)
  803288:	81c00517 	ldw	r7,20(r16)
  80328c:	81400717 	ldw	r5,28(r16)
  803290:	81800015 	stw	r6,0(r16)
  803294:	8809883a 	mov	r4,r17
  803298:	103ee83a 	callr	r2
  80329c:	80800115 	stw	r2,4(r16)
  8032a0:	00800e0e 	bge	zero,r2,8032dc <__srefill_r+0x100>
  8032a4:	0005883a 	mov	r2,zero
  8032a8:	dfc00317 	ldw	ra,12(sp)
  8032ac:	dc800217 	ldw	r18,8(sp)
  8032b0:	dc400117 	ldw	r17,4(sp)
  8032b4:	dc000017 	ldw	r16,0(sp)
  8032b8:	dec00404 	addi	sp,sp,16
  8032bc:	f800283a 	ret
  8032c0:	1100040c 	andi	r4,r2,16
  8032c4:	20003026 	beq	r4,zero,803388 <__srefill_r+0x1ac>
  8032c8:	1080020c 	andi	r2,r2,8
  8032cc:	1000241e 	bne	r2,zero,803360 <__srefill_r+0x184>
  8032d0:	18c00114 	ori	r3,r3,4
  8032d4:	80c0030d 	sth	r3,12(r16)
  8032d8:	003fe406 	br	80326c <__alt_mem_onchip_mem+0xff78326c>
  8032dc:	80c0030b 	ldhu	r3,12(r16)
  8032e0:	1000161e 	bne	r2,zero,80333c <__srefill_r+0x160>
  8032e4:	18c00814 	ori	r3,r3,32
  8032e8:	00bfffc4 	movi	r2,-1
  8032ec:	80c0030d 	sth	r3,12(r16)
  8032f0:	003fed06 	br	8032a8 <__alt_mem_onchip_mem+0xff7832a8>
  8032f4:	0801aa80 	call	801aa8 <__sinit>
  8032f8:	003fc206 	br	803204 <__alt_mem_onchip_mem+0xff783204>
  8032fc:	00802074 	movhi	r2,129
  803300:	10957704 	addi	r2,r2,21980
  803304:	11000017 	ldw	r4,0(r2)
  803308:	01402034 	movhi	r5,128
  80330c:	00800044 	movi	r2,1
  803310:	294c7004 	addi	r5,r5,12736
  803314:	8080030d 	sth	r2,12(r16)
  803318:	08021cc0 	call	8021cc <_fwalk>
  80331c:	00800244 	movi	r2,9
  803320:	8480030d 	sth	r18,12(r16)
  803324:	9480024c 	andi	r18,r18,9
  803328:	90bfd51e 	bne	r18,r2,803280 <__alt_mem_onchip_mem+0xff783280>
  80332c:	800b883a 	mov	r5,r16
  803330:	8809883a 	mov	r4,r17
  803334:	08078940 	call	807894 <__sflush_r>
  803338:	003fd106 	br	803280 <__alt_mem_onchip_mem+0xff783280>
  80333c:	18c01014 	ori	r3,r3,64
  803340:	80000115 	stw	zero,4(r16)
  803344:	00bfffc4 	movi	r2,-1
  803348:	80c0030d 	sth	r3,12(r16)
  80334c:	003fd606 	br	8032a8 <__alt_mem_onchip_mem+0xff7832a8>
  803350:	80c00e17 	ldw	r3,56(r16)
  803354:	0005883a 	mov	r2,zero
  803358:	80c00015 	stw	r3,0(r16)
  80335c:	003fd206 	br	8032a8 <__alt_mem_onchip_mem+0xff7832a8>
  803360:	800b883a 	mov	r5,r16
  803364:	8809883a 	mov	r4,r17
  803368:	0807ab00 	call	807ab0 <_fflush_r>
  80336c:	10000a1e 	bne	r2,zero,803398 <__srefill_r+0x1bc>
  803370:	8080030b 	ldhu	r2,12(r16)
  803374:	00fffdc4 	movi	r3,-9
  803378:	80000215 	stw	zero,8(r16)
  80337c:	1886703a 	and	r3,r3,r2
  803380:	80000615 	stw	zero,24(r16)
  803384:	003fd206 	br	8032d0 <__alt_mem_onchip_mem+0xff7832d0>
  803388:	00800244 	movi	r2,9
  80338c:	88800015 	stw	r2,0(r17)
  803390:	18c01014 	ori	r3,r3,64
  803394:	80c0030d 	sth	r3,12(r16)
  803398:	00bfffc4 	movi	r2,-1
  80339c:	003fc206 	br	8032a8 <__alt_mem_onchip_mem+0xff7832a8>
  8033a0:	800b883a 	mov	r5,r16
  8033a4:	8809883a 	mov	r4,r17
  8033a8:	08024540 	call	802454 <__smakebuf_r>
  8033ac:	003fb106 	br	803274 <__alt_mem_onchip_mem+0xff783274>

008033b0 <__srget_r>:
  8033b0:	defffd04 	addi	sp,sp,-12
  8033b4:	dc400115 	stw	r17,4(sp)
  8033b8:	dc000015 	stw	r16,0(sp)
  8033bc:	dfc00215 	stw	ra,8(sp)
  8033c0:	2023883a 	mov	r17,r4
  8033c4:	2821883a 	mov	r16,r5
  8033c8:	20000226 	beq	r4,zero,8033d4 <__srget_r+0x24>
  8033cc:	20800e17 	ldw	r2,56(r4)
  8033d0:	10001026 	beq	r2,zero,803414 <__srget_r+0x64>
  8033d4:	800b883a 	mov	r5,r16
  8033d8:	8809883a 	mov	r4,r17
  8033dc:	08031dc0 	call	8031dc <__srefill_r>
  8033e0:	10000e1e 	bne	r2,zero,80341c <__srget_r+0x6c>
  8033e4:	80c00017 	ldw	r3,0(r16)
  8033e8:	80800117 	ldw	r2,4(r16)
  8033ec:	19000044 	addi	r4,r3,1
  8033f0:	10bfffc4 	addi	r2,r2,-1
  8033f4:	80800115 	stw	r2,4(r16)
  8033f8:	81000015 	stw	r4,0(r16)
  8033fc:	18800003 	ldbu	r2,0(r3)
  803400:	dfc00217 	ldw	ra,8(sp)
  803404:	dc400117 	ldw	r17,4(sp)
  803408:	dc000017 	ldw	r16,0(sp)
  80340c:	dec00304 	addi	sp,sp,12
  803410:	f800283a 	ret
  803414:	0801aa80 	call	801aa8 <__sinit>
  803418:	003fee06 	br	8033d4 <__alt_mem_onchip_mem+0xff7833d4>
  80341c:	00bfffc4 	movi	r2,-1
  803420:	003ff706 	br	803400 <__alt_mem_onchip_mem+0xff783400>

00803424 <__srget>:
  803424:	00802074 	movhi	r2,129
  803428:	10957804 	addi	r2,r2,21984
  80342c:	200b883a 	mov	r5,r4
  803430:	11000017 	ldw	r4,0(r2)
  803434:	08033b01 	jmpi	8033b0 <__srget_r>

00803438 <_sbrk_r>:
  803438:	defffd04 	addi	sp,sp,-12
  80343c:	dc000015 	stw	r16,0(sp)
  803440:	04002074 	movhi	r16,129
  803444:	dc400115 	stw	r17,4(sp)
  803448:	841cd404 	addi	r16,r16,29520
  80344c:	2023883a 	mov	r17,r4
  803450:	2809883a 	mov	r4,r5
  803454:	dfc00215 	stw	ra,8(sp)
  803458:	80000015 	stw	zero,0(r16)
  80345c:	080fbc00 	call	80fbc0 <sbrk>
  803460:	00ffffc4 	movi	r3,-1
  803464:	10c00526 	beq	r2,r3,80347c <_sbrk_r+0x44>
  803468:	dfc00217 	ldw	ra,8(sp)
  80346c:	dc400117 	ldw	r17,4(sp)
  803470:	dc000017 	ldw	r16,0(sp)
  803474:	dec00304 	addi	sp,sp,12
  803478:	f800283a 	ret
  80347c:	80c00017 	ldw	r3,0(r16)
  803480:	183ff926 	beq	r3,zero,803468 <__alt_mem_onchip_mem+0xff783468>
  803484:	88c00015 	stw	r3,0(r17)
  803488:	003ff706 	br	803468 <__alt_mem_onchip_mem+0xff783468>

0080348c <__sread>:
  80348c:	defffe04 	addi	sp,sp,-8
  803490:	dc000015 	stw	r16,0(sp)
  803494:	2821883a 	mov	r16,r5
  803498:	2940038f 	ldh	r5,14(r5)
  80349c:	dfc00115 	stw	ra,4(sp)
  8034a0:	08099ec0 	call	8099ec <_read_r>
  8034a4:	10000716 	blt	r2,zero,8034c4 <__sread+0x38>
  8034a8:	80c01417 	ldw	r3,80(r16)
  8034ac:	1887883a 	add	r3,r3,r2
  8034b0:	80c01415 	stw	r3,80(r16)
  8034b4:	dfc00117 	ldw	ra,4(sp)
  8034b8:	dc000017 	ldw	r16,0(sp)
  8034bc:	dec00204 	addi	sp,sp,8
  8034c0:	f800283a 	ret
  8034c4:	80c0030b 	ldhu	r3,12(r16)
  8034c8:	18fbffcc 	andi	r3,r3,61439
  8034cc:	80c0030d 	sth	r3,12(r16)
  8034d0:	dfc00117 	ldw	ra,4(sp)
  8034d4:	dc000017 	ldw	r16,0(sp)
  8034d8:	dec00204 	addi	sp,sp,8
  8034dc:	f800283a 	ret

008034e0 <__seofread>:
  8034e0:	0005883a 	mov	r2,zero
  8034e4:	f800283a 	ret

008034e8 <__swrite>:
  8034e8:	2880030b 	ldhu	r2,12(r5)
  8034ec:	defffb04 	addi	sp,sp,-20
  8034f0:	dcc00315 	stw	r19,12(sp)
  8034f4:	dc800215 	stw	r18,8(sp)
  8034f8:	dc400115 	stw	r17,4(sp)
  8034fc:	dc000015 	stw	r16,0(sp)
  803500:	dfc00415 	stw	ra,16(sp)
  803504:	10c0400c 	andi	r3,r2,256
  803508:	2821883a 	mov	r16,r5
  80350c:	2023883a 	mov	r17,r4
  803510:	3025883a 	mov	r18,r6
  803514:	3827883a 	mov	r19,r7
  803518:	18000526 	beq	r3,zero,803530 <__swrite+0x48>
  80351c:	2940038f 	ldh	r5,14(r5)
  803520:	01c00084 	movi	r7,2
  803524:	000d883a 	mov	r6,zero
  803528:	08086080 	call	808608 <_lseek_r>
  80352c:	8080030b 	ldhu	r2,12(r16)
  803530:	8140038f 	ldh	r5,14(r16)
  803534:	10bbffcc 	andi	r2,r2,61439
  803538:	980f883a 	mov	r7,r19
  80353c:	900d883a 	mov	r6,r18
  803540:	8809883a 	mov	r4,r17
  803544:	8080030d 	sth	r2,12(r16)
  803548:	dfc00417 	ldw	ra,16(sp)
  80354c:	dcc00317 	ldw	r19,12(sp)
  803550:	dc800217 	ldw	r18,8(sp)
  803554:	dc400117 	ldw	r17,4(sp)
  803558:	dc000017 	ldw	r16,0(sp)
  80355c:	dec00504 	addi	sp,sp,20
  803560:	0805d001 	jmpi	805d00 <_write_r>

00803564 <__sseek>:
  803564:	defffe04 	addi	sp,sp,-8
  803568:	dc000015 	stw	r16,0(sp)
  80356c:	2821883a 	mov	r16,r5
  803570:	2940038f 	ldh	r5,14(r5)
  803574:	dfc00115 	stw	ra,4(sp)
  803578:	08086080 	call	808608 <_lseek_r>
  80357c:	00ffffc4 	movi	r3,-1
  803580:	10c00826 	beq	r2,r3,8035a4 <__sseek+0x40>
  803584:	80c0030b 	ldhu	r3,12(r16)
  803588:	80801415 	stw	r2,80(r16)
  80358c:	18c40014 	ori	r3,r3,4096
  803590:	80c0030d 	sth	r3,12(r16)
  803594:	dfc00117 	ldw	ra,4(sp)
  803598:	dc000017 	ldw	r16,0(sp)
  80359c:	dec00204 	addi	sp,sp,8
  8035a0:	f800283a 	ret
  8035a4:	80c0030b 	ldhu	r3,12(r16)
  8035a8:	18fbffcc 	andi	r3,r3,61439
  8035ac:	80c0030d 	sth	r3,12(r16)
  8035b0:	dfc00117 	ldw	ra,4(sp)
  8035b4:	dc000017 	ldw	r16,0(sp)
  8035b8:	dec00204 	addi	sp,sp,8
  8035bc:	f800283a 	ret

008035c0 <__sclose>:
  8035c0:	2940038f 	ldh	r5,14(r5)
  8035c4:	0805eb41 	jmpi	805eb4 <_close_r>

008035c8 <strtok>:
  8035c8:	00802074 	movhi	r2,129
  8035cc:	10957804 	addi	r2,r2,21984
  8035d0:	11800017 	ldw	r6,0(r2)
  8035d4:	01c00044 	movi	r7,1
  8035d8:	31801704 	addi	r6,r6,92
  8035dc:	08035e01 	jmpi	8035e0 <__strtok_r>

008035e0 <__strtok_r>:
  8035e0:	20001f26 	beq	r4,zero,803660 <__strtok_r+0x80>
  8035e4:	2005883a 	mov	r2,r4
  8035e8:	22400007 	ldb	r9,0(r4)
  8035ec:	2807883a 	mov	r3,r5
  8035f0:	21000044 	addi	r4,r4,1
  8035f4:	00000106 	br	8035fc <__strtok_r+0x1c>
  8035f8:	4a001226 	beq	r9,r8,803644 <__strtok_r+0x64>
  8035fc:	1a000007 	ldb	r8,0(r3)
  803600:	18c00044 	addi	r3,r3,1
  803604:	403ffc1e 	bne	r8,zero,8035f8 <__alt_mem_onchip_mem+0xff7835f8>
  803608:	48001926 	beq	r9,zero,803670 <__strtok_r+0x90>
  80360c:	22000007 	ldb	r8,0(r4)
  803610:	2013883a 	mov	r9,r4
  803614:	21000044 	addi	r4,r4,1
  803618:	2015883a 	mov	r10,r4
  80361c:	2807883a 	mov	r3,r5
  803620:	00000106 	br	803628 <__strtok_r+0x48>
  803624:	383ff926 	beq	r7,zero,80360c <__alt_mem_onchip_mem+0xff78360c>
  803628:	19c00007 	ldb	r7,0(r3)
  80362c:	18c00044 	addi	r3,r3,1
  803630:	41fffc1e 	bne	r8,r7,803624 <__alt_mem_onchip_mem+0xff783624>
  803634:	40000726 	beq	r8,zero,803654 <__strtok_r+0x74>
  803638:	48000005 	stb	zero,0(r9)
  80363c:	32800015 	stw	r10,0(r6)
  803640:	f800283a 	ret
  803644:	383fe71e 	bne	r7,zero,8035e4 <__alt_mem_onchip_mem+0xff7835e4>
  803648:	31000015 	stw	r4,0(r6)
  80364c:	10000005 	stb	zero,0(r2)
  803650:	f800283a 	ret
  803654:	0015883a 	mov	r10,zero
  803658:	32800015 	stw	r10,0(r6)
  80365c:	f800283a 	ret
  803660:	31000017 	ldw	r4,0(r6)
  803664:	203fdf1e 	bne	r4,zero,8035e4 <__alt_mem_onchip_mem+0xff7835e4>
  803668:	0005883a 	mov	r2,zero
  80366c:	f800283a 	ret
  803670:	30000015 	stw	zero,0(r6)
  803674:	0005883a 	mov	r2,zero
  803678:	f800283a 	ret

0080367c <strtok_r>:
  80367c:	01c00044 	movi	r7,1
  803680:	08035e01 	jmpi	8035e0 <__strtok_r>

00803684 <_strtol_r>:
  803684:	00802074 	movhi	r2,129
  803688:	defff404 	addi	sp,sp,-48
  80368c:	10957b04 	addi	r2,r2,21996
  803690:	dd400715 	stw	r21,28(sp)
  803694:	15400017 	ldw	r21,0(r2)
  803698:	dd800815 	stw	r22,32(sp)
  80369c:	dd000615 	stw	r20,24(sp)
  8036a0:	dcc00515 	stw	r19,20(sp)
  8036a4:	d9000015 	stw	r4,0(sp)
  8036a8:	dfc00b15 	stw	ra,44(sp)
  8036ac:	df000a15 	stw	fp,40(sp)
  8036b0:	ddc00915 	stw	r23,36(sp)
  8036b4:	dc800415 	stw	r18,16(sp)
  8036b8:	dc400315 	stw	r17,12(sp)
  8036bc:	dc000215 	stw	r16,8(sp)
  8036c0:	2829883a 	mov	r20,r5
  8036c4:	3027883a 	mov	r19,r6
  8036c8:	382d883a 	mov	r22,r7
  8036cc:	2809883a 	mov	r4,r5
  8036d0:	24000003 	ldbu	r16,0(r4)
  8036d4:	24400044 	addi	r17,r4,1
  8036d8:	2007883a 	mov	r3,r4
  8036dc:	ac05883a 	add	r2,r21,r16
  8036e0:	10800043 	ldbu	r2,1(r2)
  8036e4:	8809883a 	mov	r4,r17
  8036e8:	1080020c 	andi	r2,r2,8
  8036ec:	103ff81e 	bne	r2,zero,8036d0 <__alt_mem_onchip_mem+0xff7836d0>
  8036f0:	00800b44 	movi	r2,45
  8036f4:	80805826 	beq	r16,r2,803858 <_strtol_r+0x1d4>
  8036f8:	00800ac4 	movi	r2,43
  8036fc:	80805a26 	beq	r16,r2,803868 <_strtol_r+0x1e4>
  803700:	0039883a 	mov	fp,zero
  803704:	b0004426 	beq	r22,zero,803818 <_strtol_r+0x194>
  803708:	00800404 	movi	r2,16
  80370c:	b0806026 	beq	r22,r2,803890 <_strtol_r+0x20c>
  803710:	b02f883a 	mov	r23,r22
  803714:	00a00034 	movhi	r2,32768
  803718:	e025003a 	cmpeq	r18,fp,zero
  80371c:	14a5c83a 	sub	r18,r2,r18
  803720:	b80b883a 	mov	r5,r23
  803724:	9009883a 	mov	r4,r18
  803728:	080c8a00 	call	80c8a0 <__umodsi3>
  80372c:	b80b883a 	mov	r5,r23
  803730:	9009883a 	mov	r4,r18
  803734:	d8800115 	stw	r2,4(sp)
  803738:	080c83c0 	call	80c83c <__udivsi3>
  80373c:	ac07883a 	add	r3,r21,r16
  803740:	18c00043 	ldbu	r3,1(r3)
  803744:	880b883a 	mov	r5,r17
  803748:	000d883a 	mov	r6,zero
  80374c:	1a00010c 	andi	r8,r3,4
  803750:	0009883a 	mov	r4,zero
  803754:	02800044 	movi	r10,1
  803758:	027fffc4 	movi	r9,-1
  80375c:	d9c00117 	ldw	r7,4(sp)
  803760:	40000e26 	beq	r8,zero,80379c <_strtol_r+0x118>
  803764:	843ff404 	addi	r16,r16,-48
  803768:	8580120e 	bge	r16,r22,8037b4 <_strtol_r+0x130>
  80376c:	32400526 	beq	r6,r9,803784 <_strtol_r+0x100>
  803770:	11002536 	bltu	r2,r4,803808 <_strtol_r+0x184>
  803774:	20802326 	beq	r4,r2,803804 <_strtol_r+0x180>
  803778:	25c9383a 	mul	r4,r4,r23
  80377c:	01800044 	movi	r6,1
  803780:	8109883a 	add	r4,r16,r4
  803784:	2c000003 	ldbu	r16,0(r5)
  803788:	29400044 	addi	r5,r5,1
  80378c:	ac07883a 	add	r3,r21,r16
  803790:	18c00043 	ldbu	r3,1(r3)
  803794:	1a00010c 	andi	r8,r3,4
  803798:	403ff21e 	bne	r8,zero,803764 <__alt_mem_onchip_mem+0xff783764>
  80379c:	18c000cc 	andi	r3,r3,3
  8037a0:	18000426 	beq	r3,zero,8037b4 <_strtol_r+0x130>
  8037a4:	1a801a26 	beq	r3,r10,803810 <_strtol_r+0x18c>
  8037a8:	00c015c4 	movi	r3,87
  8037ac:	80e1c83a 	sub	r16,r16,r3
  8037b0:	85bfee16 	blt	r16,r22,80376c <__alt_mem_onchip_mem+0xff78376c>
  8037b4:	00bfffc4 	movi	r2,-1
  8037b8:	30801e26 	beq	r6,r2,803834 <_strtol_r+0x1b0>
  8037bc:	e0001b1e 	bne	fp,zero,80382c <_strtol_r+0x1a8>
  8037c0:	2005883a 	mov	r2,r4
  8037c4:	98000326 	beq	r19,zero,8037d4 <_strtol_r+0x150>
  8037c8:	3000211e 	bne	r6,zero,803850 <_strtol_r+0x1cc>
  8037cc:	a00b883a 	mov	r5,r20
  8037d0:	99400015 	stw	r5,0(r19)
  8037d4:	dfc00b17 	ldw	ra,44(sp)
  8037d8:	df000a17 	ldw	fp,40(sp)
  8037dc:	ddc00917 	ldw	r23,36(sp)
  8037e0:	dd800817 	ldw	r22,32(sp)
  8037e4:	dd400717 	ldw	r21,28(sp)
  8037e8:	dd000617 	ldw	r20,24(sp)
  8037ec:	dcc00517 	ldw	r19,20(sp)
  8037f0:	dc800417 	ldw	r18,16(sp)
  8037f4:	dc400317 	ldw	r17,12(sp)
  8037f8:	dc000217 	ldw	r16,8(sp)
  8037fc:	dec00c04 	addi	sp,sp,48
  803800:	f800283a 	ret
  803804:	3c3fdc0e 	bge	r7,r16,803778 <__alt_mem_onchip_mem+0xff783778>
  803808:	01bfffc4 	movi	r6,-1
  80380c:	003fdd06 	br	803784 <__alt_mem_onchip_mem+0xff783784>
  803810:	00c00dc4 	movi	r3,55
  803814:	003fe506 	br	8037ac <__alt_mem_onchip_mem+0xff7837ac>
  803818:	00800c04 	movi	r2,48
  80381c:	80801626 	beq	r16,r2,803878 <_strtol_r+0x1f4>
  803820:	05800284 	movi	r22,10
  803824:	b02f883a 	mov	r23,r22
  803828:	003fba06 	br	803714 <__alt_mem_onchip_mem+0xff783714>
  80382c:	0109c83a 	sub	r4,zero,r4
  803830:	003fe306 	br	8037c0 <__alt_mem_onchip_mem+0xff7837c0>
  803834:	d9000017 	ldw	r4,0(sp)
  803838:	00c00884 	movi	r3,34
  80383c:	e005003a 	cmpeq	r2,fp,zero
  803840:	20c00015 	stw	r3,0(r4)
  803844:	00e00034 	movhi	r3,32768
  803848:	1885c83a 	sub	r2,r3,r2
  80384c:	983fe126 	beq	r19,zero,8037d4 <__alt_mem_onchip_mem+0xff7837d4>
  803850:	297fffc4 	addi	r5,r5,-1
  803854:	003fde06 	br	8037d0 <__alt_mem_onchip_mem+0xff7837d0>
  803858:	1c400084 	addi	r17,r3,2
  80385c:	1c000043 	ldbu	r16,1(r3)
  803860:	07000044 	movi	fp,1
  803864:	003fa706 	br	803704 <__alt_mem_onchip_mem+0xff783704>
  803868:	1c400084 	addi	r17,r3,2
  80386c:	1c000043 	ldbu	r16,1(r3)
  803870:	0039883a 	mov	fp,zero
  803874:	003fa306 	br	803704 <__alt_mem_onchip_mem+0xff783704>
  803878:	88800003 	ldbu	r2,0(r17)
  80387c:	00c01604 	movi	r3,88
  803880:	108037cc 	andi	r2,r2,223
  803884:	10c00826 	beq	r2,r3,8038a8 <_strtol_r+0x224>
  803888:	05800204 	movi	r22,8
  80388c:	003fa006 	br	803710 <__alt_mem_onchip_mem+0xff783710>
  803890:	00800c04 	movi	r2,48
  803894:	80bf9e1e 	bne	r16,r2,803710 <__alt_mem_onchip_mem+0xff783710>
  803898:	88800003 	ldbu	r2,0(r17)
  80389c:	00c01604 	movi	r3,88
  8038a0:	108037cc 	andi	r2,r2,223
  8038a4:	10ff9a1e 	bne	r2,r3,803710 <__alt_mem_onchip_mem+0xff783710>
  8038a8:	05c00404 	movi	r23,16
  8038ac:	8c000043 	ldbu	r16,1(r17)
  8038b0:	b82d883a 	mov	r22,r23
  8038b4:	8c400084 	addi	r17,r17,2
  8038b8:	003f9606 	br	803714 <__alt_mem_onchip_mem+0xff783714>

008038bc <strtol>:
  8038bc:	00802074 	movhi	r2,129
  8038c0:	10957804 	addi	r2,r2,21984
  8038c4:	300f883a 	mov	r7,r6
  8038c8:	280d883a 	mov	r6,r5
  8038cc:	200b883a 	mov	r5,r4
  8038d0:	11000017 	ldw	r4,0(r2)
  8038d4:	08036841 	jmpi	803684 <_strtol_r>

008038d8 <___vfprintf_internal_r>:
  8038d8:	deffb804 	addi	sp,sp,-288
  8038dc:	dfc04715 	stw	ra,284(sp)
  8038e0:	ddc04515 	stw	r23,276(sp)
  8038e4:	dd404315 	stw	r21,268(sp)
  8038e8:	d9002c15 	stw	r4,176(sp)
  8038ec:	282f883a 	mov	r23,r5
  8038f0:	302b883a 	mov	r21,r6
  8038f4:	d9c02d15 	stw	r7,180(sp)
  8038f8:	df004615 	stw	fp,280(sp)
  8038fc:	dd804415 	stw	r22,272(sp)
  803900:	dd004215 	stw	r20,264(sp)
  803904:	dcc04115 	stw	r19,260(sp)
  803908:	dc804015 	stw	r18,256(sp)
  80390c:	dc403f15 	stw	r17,252(sp)
  803910:	dc003e15 	stw	r16,248(sp)
  803914:	08085d80 	call	8085d8 <_localeconv_r>
  803918:	10800017 	ldw	r2,0(r2)
  80391c:	1009883a 	mov	r4,r2
  803920:	d8803415 	stw	r2,208(sp)
  803924:	080a1000 	call	80a100 <strlen>
  803928:	d8803715 	stw	r2,220(sp)
  80392c:	d8802c17 	ldw	r2,176(sp)
  803930:	10000226 	beq	r2,zero,80393c <___vfprintf_internal_r+0x64>
  803934:	10800e17 	ldw	r2,56(r2)
  803938:	1000f926 	beq	r2,zero,803d20 <___vfprintf_internal_r+0x448>
  80393c:	b880030b 	ldhu	r2,12(r23)
  803940:	10c8000c 	andi	r3,r2,8192
  803944:	1800061e 	bne	r3,zero,803960 <___vfprintf_internal_r+0x88>
  803948:	b9001917 	ldw	r4,100(r23)
  80394c:	00f7ffc4 	movi	r3,-8193
  803950:	10880014 	ori	r2,r2,8192
  803954:	20c6703a 	and	r3,r4,r3
  803958:	b880030d 	sth	r2,12(r23)
  80395c:	b8c01915 	stw	r3,100(r23)
  803960:	10c0020c 	andi	r3,r2,8
  803964:	1800c126 	beq	r3,zero,803c6c <___vfprintf_internal_r+0x394>
  803968:	b8c00417 	ldw	r3,16(r23)
  80396c:	1800bf26 	beq	r3,zero,803c6c <___vfprintf_internal_r+0x394>
  803970:	1080068c 	andi	r2,r2,26
  803974:	00c00284 	movi	r3,10
  803978:	10c0c426 	beq	r2,r3,803c8c <___vfprintf_internal_r+0x3b4>
  80397c:	d8c00404 	addi	r3,sp,16
  803980:	05002074 	movhi	r20,129
  803984:	d9001e04 	addi	r4,sp,120
  803988:	a50cf984 	addi	r20,r20,13286
  80398c:	d8c01e15 	stw	r3,120(sp)
  803990:	d8002015 	stw	zero,128(sp)
  803994:	d8001f15 	stw	zero,124(sp)
  803998:	d8003315 	stw	zero,204(sp)
  80399c:	d8003615 	stw	zero,216(sp)
  8039a0:	d8003815 	stw	zero,224(sp)
  8039a4:	1811883a 	mov	r8,r3
  8039a8:	d8003915 	stw	zero,228(sp)
  8039ac:	d8003a15 	stw	zero,232(sp)
  8039b0:	d8002f15 	stw	zero,188(sp)
  8039b4:	d9002815 	stw	r4,160(sp)
  8039b8:	a8800007 	ldb	r2,0(r21)
  8039bc:	10027b26 	beq	r2,zero,8043ac <___vfprintf_internal_r+0xad4>
  8039c0:	00c00944 	movi	r3,37
  8039c4:	a821883a 	mov	r16,r21
  8039c8:	10c0021e 	bne	r2,r3,8039d4 <___vfprintf_internal_r+0xfc>
  8039cc:	00001406 	br	803a20 <___vfprintf_internal_r+0x148>
  8039d0:	10c00326 	beq	r2,r3,8039e0 <___vfprintf_internal_r+0x108>
  8039d4:	84000044 	addi	r16,r16,1
  8039d8:	80800007 	ldb	r2,0(r16)
  8039dc:	103ffc1e 	bne	r2,zero,8039d0 <__alt_mem_onchip_mem+0xff7839d0>
  8039e0:	8563c83a 	sub	r17,r16,r21
  8039e4:	88000e26 	beq	r17,zero,803a20 <___vfprintf_internal_r+0x148>
  8039e8:	d8c02017 	ldw	r3,128(sp)
  8039ec:	d8801f17 	ldw	r2,124(sp)
  8039f0:	45400015 	stw	r21,0(r8)
  8039f4:	1c47883a 	add	r3,r3,r17
  8039f8:	10800044 	addi	r2,r2,1
  8039fc:	d8c02015 	stw	r3,128(sp)
  803a00:	44400115 	stw	r17,4(r8)
  803a04:	d8801f15 	stw	r2,124(sp)
  803a08:	00c001c4 	movi	r3,7
  803a0c:	1880a716 	blt	r3,r2,803cac <___vfprintf_internal_r+0x3d4>
  803a10:	42000204 	addi	r8,r8,8
  803a14:	d9402f17 	ldw	r5,188(sp)
  803a18:	2c4b883a 	add	r5,r5,r17
  803a1c:	d9402f15 	stw	r5,188(sp)
  803a20:	80800007 	ldb	r2,0(r16)
  803a24:	1000a826 	beq	r2,zero,803cc8 <___vfprintf_internal_r+0x3f0>
  803a28:	84400047 	ldb	r17,1(r16)
  803a2c:	00bfffc4 	movi	r2,-1
  803a30:	85400044 	addi	r21,r16,1
  803a34:	d8002785 	stb	zero,158(sp)
  803a38:	0007883a 	mov	r3,zero
  803a3c:	000f883a 	mov	r7,zero
  803a40:	d8802915 	stw	r2,164(sp)
  803a44:	d8003115 	stw	zero,196(sp)
  803a48:	0025883a 	mov	r18,zero
  803a4c:	01401604 	movi	r5,88
  803a50:	01800244 	movi	r6,9
  803a54:	02800a84 	movi	r10,42
  803a58:	02401b04 	movi	r9,108
  803a5c:	ad400044 	addi	r21,r21,1
  803a60:	88bff804 	addi	r2,r17,-32
  803a64:	28830436 	bltu	r5,r2,804678 <___vfprintf_internal_r+0xda0>
  803a68:	100490ba 	slli	r2,r2,2
  803a6c:	01002034 	movhi	r4,128
  803a70:	210ea004 	addi	r4,r4,14976
  803a74:	1105883a 	add	r2,r2,r4
  803a78:	10800017 	ldw	r2,0(r2)
  803a7c:	1000683a 	jmp	r2
  803a80:	00804598 	cmpnei	r2,zero,278
  803a84:	00804678 	rdprs	r2,zero,281
  803a88:	00804678 	rdprs	r2,zero,281
  803a8c:	008045b8 	rdprs	r2,zero,278
  803a90:	00804678 	rdprs	r2,zero,281
  803a94:	00804678 	rdprs	r2,zero,281
  803a98:	00804678 	rdprs	r2,zero,281
  803a9c:	00804678 	rdprs	r2,zero,281
  803aa0:	00804678 	rdprs	r2,zero,281
  803aa4:	00804678 	rdprs	r2,zero,281
  803aa8:	00803d2c 	andhi	r2,zero,244
  803aac:	008044d4 	movui	r2,275
  803ab0:	00804678 	rdprs	r2,zero,281
  803ab4:	00803bf4 	movhi	r2,239
  803ab8:	00803d54 	movui	r2,245
  803abc:	00804678 	rdprs	r2,zero,281
  803ac0:	00803d94 	movui	r2,246
  803ac4:	00803da0 	cmpeqi	r2,zero,246
  803ac8:	00803da0 	cmpeqi	r2,zero,246
  803acc:	00803da0 	cmpeqi	r2,zero,246
  803ad0:	00803da0 	cmpeqi	r2,zero,246
  803ad4:	00803da0 	cmpeqi	r2,zero,246
  803ad8:	00803da0 	cmpeqi	r2,zero,246
  803adc:	00803da0 	cmpeqi	r2,zero,246
  803ae0:	00803da0 	cmpeqi	r2,zero,246
  803ae4:	00803da0 	cmpeqi	r2,zero,246
  803ae8:	00804678 	rdprs	r2,zero,281
  803aec:	00804678 	rdprs	r2,zero,281
  803af0:	00804678 	rdprs	r2,zero,281
  803af4:	00804678 	rdprs	r2,zero,281
  803af8:	00804678 	rdprs	r2,zero,281
  803afc:	00804678 	rdprs	r2,zero,281
  803b00:	00804678 	rdprs	r2,zero,281
  803b04:	00804678 	rdprs	r2,zero,281
  803b08:	00804678 	rdprs	r2,zero,281
  803b0c:	00804678 	rdprs	r2,zero,281
  803b10:	00803dd4 	movui	r2,247
  803b14:	00803e90 	cmplti	r2,zero,250
  803b18:	00804678 	rdprs	r2,zero,281
  803b1c:	00803e90 	cmplti	r2,zero,250
  803b20:	00804678 	rdprs	r2,zero,281
  803b24:	00804678 	rdprs	r2,zero,281
  803b28:	00804678 	rdprs	r2,zero,281
  803b2c:	00804678 	rdprs	r2,zero,281
  803b30:	00803f30 	cmpltui	r2,zero,252
  803b34:	00804678 	rdprs	r2,zero,281
  803b38:	00804678 	rdprs	r2,zero,281
  803b3c:	00803f3c 	xorhi	r2,zero,252
  803b40:	00804678 	rdprs	r2,zero,281
  803b44:	00804678 	rdprs	r2,zero,281
  803b48:	00804678 	rdprs	r2,zero,281
  803b4c:	00804678 	rdprs	r2,zero,281
  803b50:	00804678 	rdprs	r2,zero,281
  803b54:	008043b4 	movhi	r2,270
  803b58:	00804678 	rdprs	r2,zero,281
  803b5c:	00804678 	rdprs	r2,zero,281
  803b60:	00804414 	movui	r2,272
  803b64:	00804678 	rdprs	r2,zero,281
  803b68:	00804678 	rdprs	r2,zero,281
  803b6c:	00804678 	rdprs	r2,zero,281
  803b70:	00804678 	rdprs	r2,zero,281
  803b74:	00804678 	rdprs	r2,zero,281
  803b78:	00804678 	rdprs	r2,zero,281
  803b7c:	00804678 	rdprs	r2,zero,281
  803b80:	00804678 	rdprs	r2,zero,281
  803b84:	00804678 	rdprs	r2,zero,281
  803b88:	00804678 	rdprs	r2,zero,281
  803b8c:	00804624 	muli	r2,zero,280
  803b90:	008045c4 	movi	r2,279
  803b94:	00803e90 	cmplti	r2,zero,250
  803b98:	00803e90 	cmplti	r2,zero,250
  803b9c:	00803e90 	cmplti	r2,zero,250
  803ba0:	008045d4 	movui	r2,279
  803ba4:	008045c4 	movi	r2,279
  803ba8:	00804678 	rdprs	r2,zero,281
  803bac:	00804678 	rdprs	r2,zero,281
  803bb0:	008045e0 	cmpeqi	r2,zero,279
  803bb4:	00804678 	rdprs	r2,zero,281
  803bb8:	008045f0 	cmpltui	r2,zero,279
  803bbc:	008044c4 	movi	r2,275
  803bc0:	00803c00 	call	803c0 <__reset-0x77fc40>
  803bc4:	008044e4 	muli	r2,zero,275
  803bc8:	00804678 	rdprs	r2,zero,281
  803bcc:	008044f0 	cmpltui	r2,zero,275
  803bd0:	00804678 	rdprs	r2,zero,281
  803bd4:	0080454c 	andi	r2,zero,277
  803bd8:	00804678 	rdprs	r2,zero,281
  803bdc:	00804678 	rdprs	r2,zero,281
  803be0:	0080455c 	xori	r2,zero,277
  803be4:	d9003117 	ldw	r4,196(sp)
  803be8:	d8802d15 	stw	r2,180(sp)
  803bec:	0109c83a 	sub	r4,zero,r4
  803bf0:	d9003115 	stw	r4,196(sp)
  803bf4:	94800114 	ori	r18,r18,4
  803bf8:	ac400007 	ldb	r17,0(r21)
  803bfc:	003f9706 	br	803a5c <__alt_mem_onchip_mem+0xff783a5c>
  803c00:	00800c04 	movi	r2,48
  803c04:	d9002d17 	ldw	r4,180(sp)
  803c08:	d9402917 	ldw	r5,164(sp)
  803c0c:	d8802705 	stb	r2,156(sp)
  803c10:	00801e04 	movi	r2,120
  803c14:	d8802745 	stb	r2,157(sp)
  803c18:	d8002785 	stb	zero,158(sp)
  803c1c:	20c00104 	addi	r3,r4,4
  803c20:	24c00017 	ldw	r19,0(r4)
  803c24:	002d883a 	mov	r22,zero
  803c28:	90800094 	ori	r2,r18,2
  803c2c:	28029a16 	blt	r5,zero,804698 <___vfprintf_internal_r+0xdc0>
  803c30:	00bfdfc4 	movi	r2,-129
  803c34:	90a4703a 	and	r18,r18,r2
  803c38:	d8c02d15 	stw	r3,180(sp)
  803c3c:	94800094 	ori	r18,r18,2
  803c40:	9802871e 	bne	r19,zero,804660 <___vfprintf_internal_r+0xd88>
  803c44:	00802074 	movhi	r2,129
  803c48:	108cf204 	addi	r2,r2,13256
  803c4c:	d8803915 	stw	r2,228(sp)
  803c50:	04401e04 	movi	r17,120
  803c54:	d8802917 	ldw	r2,164(sp)
  803c58:	0039883a 	mov	fp,zero
  803c5c:	1001e926 	beq	r2,zero,804404 <___vfprintf_internal_r+0xb2c>
  803c60:	0027883a 	mov	r19,zero
  803c64:	002d883a 	mov	r22,zero
  803c68:	00020506 	br	804480 <___vfprintf_internal_r+0xba8>
  803c6c:	d9002c17 	ldw	r4,176(sp)
  803c70:	b80b883a 	mov	r5,r23
  803c74:	0805d600 	call	805d60 <__swsetup_r>
  803c78:	1005ac1e 	bne	r2,zero,80532c <___vfprintf_internal_r+0x1a54>
  803c7c:	b880030b 	ldhu	r2,12(r23)
  803c80:	00c00284 	movi	r3,10
  803c84:	1080068c 	andi	r2,r2,26
  803c88:	10ff3c1e 	bne	r2,r3,80397c <__alt_mem_onchip_mem+0xff78397c>
  803c8c:	b880038f 	ldh	r2,14(r23)
  803c90:	103f3a16 	blt	r2,zero,80397c <__alt_mem_onchip_mem+0xff78397c>
  803c94:	d9c02d17 	ldw	r7,180(sp)
  803c98:	d9002c17 	ldw	r4,176(sp)
  803c9c:	a80d883a 	mov	r6,r21
  803ca0:	b80b883a 	mov	r5,r23
  803ca4:	0805aec0 	call	805aec <__sbprintf>
  803ca8:	00001106 	br	803cf0 <___vfprintf_internal_r+0x418>
  803cac:	d9002c17 	ldw	r4,176(sp)
  803cb0:	d9801e04 	addi	r6,sp,120
  803cb4:	b80b883a 	mov	r5,r23
  803cb8:	080a2940 	call	80a294 <__sprint_r>
  803cbc:	1000081e 	bne	r2,zero,803ce0 <___vfprintf_internal_r+0x408>
  803cc0:	da000404 	addi	r8,sp,16
  803cc4:	003f5306 	br	803a14 <__alt_mem_onchip_mem+0xff783a14>
  803cc8:	d8802017 	ldw	r2,128(sp)
  803ccc:	10000426 	beq	r2,zero,803ce0 <___vfprintf_internal_r+0x408>
  803cd0:	d9002c17 	ldw	r4,176(sp)
  803cd4:	d9801e04 	addi	r6,sp,120
  803cd8:	b80b883a 	mov	r5,r23
  803cdc:	080a2940 	call	80a294 <__sprint_r>
  803ce0:	b880030b 	ldhu	r2,12(r23)
  803ce4:	1080100c 	andi	r2,r2,64
  803ce8:	1005901e 	bne	r2,zero,80532c <___vfprintf_internal_r+0x1a54>
  803cec:	d8802f17 	ldw	r2,188(sp)
  803cf0:	dfc04717 	ldw	ra,284(sp)
  803cf4:	df004617 	ldw	fp,280(sp)
  803cf8:	ddc04517 	ldw	r23,276(sp)
  803cfc:	dd804417 	ldw	r22,272(sp)
  803d00:	dd404317 	ldw	r21,268(sp)
  803d04:	dd004217 	ldw	r20,264(sp)
  803d08:	dcc04117 	ldw	r19,260(sp)
  803d0c:	dc804017 	ldw	r18,256(sp)
  803d10:	dc403f17 	ldw	r17,252(sp)
  803d14:	dc003e17 	ldw	r16,248(sp)
  803d18:	dec04804 	addi	sp,sp,288
  803d1c:	f800283a 	ret
  803d20:	d9002c17 	ldw	r4,176(sp)
  803d24:	0801aa80 	call	801aa8 <__sinit>
  803d28:	003f0406 	br	80393c <__alt_mem_onchip_mem+0xff78393c>
  803d2c:	d8802d17 	ldw	r2,180(sp)
  803d30:	d9002d17 	ldw	r4,180(sp)
  803d34:	10800017 	ldw	r2,0(r2)
  803d38:	d8803115 	stw	r2,196(sp)
  803d3c:	20800104 	addi	r2,r4,4
  803d40:	d9003117 	ldw	r4,196(sp)
  803d44:	203fa716 	blt	r4,zero,803be4 <__alt_mem_onchip_mem+0xff783be4>
  803d48:	d8802d15 	stw	r2,180(sp)
  803d4c:	ac400007 	ldb	r17,0(r21)
  803d50:	003f4206 	br	803a5c <__alt_mem_onchip_mem+0xff783a5c>
  803d54:	ac400007 	ldb	r17,0(r21)
  803d58:	aac00044 	addi	r11,r21,1
  803d5c:	8a872826 	beq	r17,r10,805a00 <___vfprintf_internal_r+0x2128>
  803d60:	88bff404 	addi	r2,r17,-48
  803d64:	0009883a 	mov	r4,zero
  803d68:	30867d36 	bltu	r6,r2,805760 <___vfprintf_internal_r+0x1e88>
  803d6c:	5c400007 	ldb	r17,0(r11)
  803d70:	210002a4 	muli	r4,r4,10
  803d74:	5d400044 	addi	r21,r11,1
  803d78:	a817883a 	mov	r11,r21
  803d7c:	2089883a 	add	r4,r4,r2
  803d80:	88bff404 	addi	r2,r17,-48
  803d84:	30bff92e 	bgeu	r6,r2,803d6c <__alt_mem_onchip_mem+0xff783d6c>
  803d88:	2005c916 	blt	r4,zero,8054b0 <___vfprintf_internal_r+0x1bd8>
  803d8c:	d9002915 	stw	r4,164(sp)
  803d90:	003f3306 	br	803a60 <__alt_mem_onchip_mem+0xff783a60>
  803d94:	94802014 	ori	r18,r18,128
  803d98:	ac400007 	ldb	r17,0(r21)
  803d9c:	003f2f06 	br	803a5c <__alt_mem_onchip_mem+0xff783a5c>
  803da0:	a809883a 	mov	r4,r21
  803da4:	d8003115 	stw	zero,196(sp)
  803da8:	88bff404 	addi	r2,r17,-48
  803dac:	0017883a 	mov	r11,zero
  803db0:	24400007 	ldb	r17,0(r4)
  803db4:	5ac002a4 	muli	r11,r11,10
  803db8:	ad400044 	addi	r21,r21,1
  803dbc:	a809883a 	mov	r4,r21
  803dc0:	12d7883a 	add	r11,r2,r11
  803dc4:	88bff404 	addi	r2,r17,-48
  803dc8:	30bff92e 	bgeu	r6,r2,803db0 <__alt_mem_onchip_mem+0xff783db0>
  803dcc:	dac03115 	stw	r11,196(sp)
  803dd0:	003f2306 	br	803a60 <__alt_mem_onchip_mem+0xff783a60>
  803dd4:	18c03fcc 	andi	r3,r3,255
  803dd8:	18072b1e 	bne	r3,zero,805a88 <___vfprintf_internal_r+0x21b0>
  803ddc:	94800414 	ori	r18,r18,16
  803de0:	9080080c 	andi	r2,r18,32
  803de4:	10037b26 	beq	r2,zero,804bd4 <___vfprintf_internal_r+0x12fc>
  803de8:	d9402d17 	ldw	r5,180(sp)
  803dec:	28800117 	ldw	r2,4(r5)
  803df0:	2cc00017 	ldw	r19,0(r5)
  803df4:	29400204 	addi	r5,r5,8
  803df8:	d9402d15 	stw	r5,180(sp)
  803dfc:	102d883a 	mov	r22,r2
  803e00:	10044b16 	blt	r2,zero,804f30 <___vfprintf_internal_r+0x1658>
  803e04:	d9402917 	ldw	r5,164(sp)
  803e08:	df002783 	ldbu	fp,158(sp)
  803e0c:	2803bc16 	blt	r5,zero,804d00 <___vfprintf_internal_r+0x1428>
  803e10:	00ffdfc4 	movi	r3,-129
  803e14:	9d84b03a 	or	r2,r19,r22
  803e18:	90e4703a 	and	r18,r18,r3
  803e1c:	10017726 	beq	r2,zero,8043fc <___vfprintf_internal_r+0xb24>
  803e20:	b0038326 	beq	r22,zero,804c30 <___vfprintf_internal_r+0x1358>
  803e24:	dc402a15 	stw	r17,168(sp)
  803e28:	dc001e04 	addi	r16,sp,120
  803e2c:	b023883a 	mov	r17,r22
  803e30:	402d883a 	mov	r22,r8
  803e34:	9809883a 	mov	r4,r19
  803e38:	880b883a 	mov	r5,r17
  803e3c:	01800284 	movi	r6,10
  803e40:	000f883a 	mov	r7,zero
  803e44:	080c20c0 	call	80c20c <__umoddi3>
  803e48:	10800c04 	addi	r2,r2,48
  803e4c:	843fffc4 	addi	r16,r16,-1
  803e50:	9809883a 	mov	r4,r19
  803e54:	880b883a 	mov	r5,r17
  803e58:	80800005 	stb	r2,0(r16)
  803e5c:	01800284 	movi	r6,10
  803e60:	000f883a 	mov	r7,zero
  803e64:	080bc940 	call	80bc94 <__udivdi3>
  803e68:	1027883a 	mov	r19,r2
  803e6c:	10c4b03a 	or	r2,r2,r3
  803e70:	1823883a 	mov	r17,r3
  803e74:	103fef1e 	bne	r2,zero,803e34 <__alt_mem_onchip_mem+0xff783e34>
  803e78:	d8c02817 	ldw	r3,160(sp)
  803e7c:	dc402a17 	ldw	r17,168(sp)
  803e80:	b011883a 	mov	r8,r22
  803e84:	1c07c83a 	sub	r3,r3,r16
  803e88:	d8c02e15 	stw	r3,184(sp)
  803e8c:	00005906 	br	803ff4 <___vfprintf_internal_r+0x71c>
  803e90:	18c03fcc 	andi	r3,r3,255
  803e94:	1806fa1e 	bne	r3,zero,805a80 <___vfprintf_internal_r+0x21a8>
  803e98:	9080020c 	andi	r2,r18,8
  803e9c:	10048a26 	beq	r2,zero,8050c8 <___vfprintf_internal_r+0x17f0>
  803ea0:	d8c02d17 	ldw	r3,180(sp)
  803ea4:	d9002d17 	ldw	r4,180(sp)
  803ea8:	d9402d17 	ldw	r5,180(sp)
  803eac:	18c00017 	ldw	r3,0(r3)
  803eb0:	21000117 	ldw	r4,4(r4)
  803eb4:	29400204 	addi	r5,r5,8
  803eb8:	d8c03615 	stw	r3,216(sp)
  803ebc:	d9003815 	stw	r4,224(sp)
  803ec0:	d9402d15 	stw	r5,180(sp)
  803ec4:	d9003617 	ldw	r4,216(sp)
  803ec8:	d9403817 	ldw	r5,224(sp)
  803ecc:	da003d15 	stw	r8,244(sp)
  803ed0:	04000044 	movi	r16,1
  803ed4:	0809fb00 	call	809fb0 <__fpclassifyd>
  803ed8:	da003d17 	ldw	r8,244(sp)
  803edc:	14041f1e 	bne	r2,r16,804f5c <___vfprintf_internal_r+0x1684>
  803ee0:	d9003617 	ldw	r4,216(sp)
  803ee4:	d9403817 	ldw	r5,224(sp)
  803ee8:	000d883a 	mov	r6,zero
  803eec:	000f883a 	mov	r7,zero
  803ef0:	080dbf00 	call	80dbf0 <__ledf2>
  803ef4:	da003d17 	ldw	r8,244(sp)
  803ef8:	1005be16 	blt	r2,zero,8055f4 <___vfprintf_internal_r+0x1d1c>
  803efc:	df002783 	ldbu	fp,158(sp)
  803f00:	008011c4 	movi	r2,71
  803f04:	1445330e 	bge	r2,r17,8053d4 <___vfprintf_internal_r+0x1afc>
  803f08:	04002074 	movhi	r16,129
  803f0c:	840cea04 	addi	r16,r16,13224
  803f10:	00c000c4 	movi	r3,3
  803f14:	00bfdfc4 	movi	r2,-129
  803f18:	d8c02a15 	stw	r3,168(sp)
  803f1c:	90a4703a 	and	r18,r18,r2
  803f20:	d8c02e15 	stw	r3,184(sp)
  803f24:	d8002915 	stw	zero,164(sp)
  803f28:	d8003215 	stw	zero,200(sp)
  803f2c:	00003706 	br	80400c <___vfprintf_internal_r+0x734>
  803f30:	94800214 	ori	r18,r18,8
  803f34:	ac400007 	ldb	r17,0(r21)
  803f38:	003ec806 	br	803a5c <__alt_mem_onchip_mem+0xff783a5c>
  803f3c:	18c03fcc 	andi	r3,r3,255
  803f40:	1806db1e 	bne	r3,zero,805ab0 <___vfprintf_internal_r+0x21d8>
  803f44:	94800414 	ori	r18,r18,16
  803f48:	9080080c 	andi	r2,r18,32
  803f4c:	1002d826 	beq	r2,zero,804ab0 <___vfprintf_internal_r+0x11d8>
  803f50:	d9402d17 	ldw	r5,180(sp)
  803f54:	d8c02917 	ldw	r3,164(sp)
  803f58:	d8002785 	stb	zero,158(sp)
  803f5c:	28800204 	addi	r2,r5,8
  803f60:	2cc00017 	ldw	r19,0(r5)
  803f64:	2d800117 	ldw	r22,4(r5)
  803f68:	18048f16 	blt	r3,zero,8051a8 <___vfprintf_internal_r+0x18d0>
  803f6c:	013fdfc4 	movi	r4,-129
  803f70:	9d86b03a 	or	r3,r19,r22
  803f74:	d8802d15 	stw	r2,180(sp)
  803f78:	9124703a 	and	r18,r18,r4
  803f7c:	1802d91e 	bne	r3,zero,804ae4 <___vfprintf_internal_r+0x120c>
  803f80:	d8c02917 	ldw	r3,164(sp)
  803f84:	0039883a 	mov	fp,zero
  803f88:	1805c326 	beq	r3,zero,805698 <___vfprintf_internal_r+0x1dc0>
  803f8c:	0027883a 	mov	r19,zero
  803f90:	002d883a 	mov	r22,zero
  803f94:	dc001e04 	addi	r16,sp,120
  803f98:	9806d0fa 	srli	r3,r19,3
  803f9c:	b008977a 	slli	r4,r22,29
  803fa0:	b02cd0fa 	srli	r22,r22,3
  803fa4:	9cc001cc 	andi	r19,r19,7
  803fa8:	98800c04 	addi	r2,r19,48
  803fac:	843fffc4 	addi	r16,r16,-1
  803fb0:	20e6b03a 	or	r19,r4,r3
  803fb4:	80800005 	stb	r2,0(r16)
  803fb8:	9d86b03a 	or	r3,r19,r22
  803fbc:	183ff61e 	bne	r3,zero,803f98 <__alt_mem_onchip_mem+0xff783f98>
  803fc0:	90c0004c 	andi	r3,r18,1
  803fc4:	18013b26 	beq	r3,zero,8044b4 <___vfprintf_internal_r+0xbdc>
  803fc8:	10803fcc 	andi	r2,r2,255
  803fcc:	1080201c 	xori	r2,r2,128
  803fd0:	10bfe004 	addi	r2,r2,-128
  803fd4:	00c00c04 	movi	r3,48
  803fd8:	10c13626 	beq	r2,r3,8044b4 <___vfprintf_internal_r+0xbdc>
  803fdc:	80ffffc5 	stb	r3,-1(r16)
  803fe0:	d8c02817 	ldw	r3,160(sp)
  803fe4:	80bfffc4 	addi	r2,r16,-1
  803fe8:	1021883a 	mov	r16,r2
  803fec:	1887c83a 	sub	r3,r3,r2
  803ff0:	d8c02e15 	stw	r3,184(sp)
  803ff4:	d8802e17 	ldw	r2,184(sp)
  803ff8:	d9002917 	ldw	r4,164(sp)
  803ffc:	1100010e 	bge	r2,r4,804004 <___vfprintf_internal_r+0x72c>
  804000:	2005883a 	mov	r2,r4
  804004:	d8802a15 	stw	r2,168(sp)
  804008:	d8003215 	stw	zero,200(sp)
  80400c:	e7003fcc 	andi	fp,fp,255
  804010:	e700201c 	xori	fp,fp,128
  804014:	e73fe004 	addi	fp,fp,-128
  804018:	e0000326 	beq	fp,zero,804028 <___vfprintf_internal_r+0x750>
  80401c:	d8c02a17 	ldw	r3,168(sp)
  804020:	18c00044 	addi	r3,r3,1
  804024:	d8c02a15 	stw	r3,168(sp)
  804028:	90c0008c 	andi	r3,r18,2
  80402c:	d8c02b15 	stw	r3,172(sp)
  804030:	18000326 	beq	r3,zero,804040 <___vfprintf_internal_r+0x768>
  804034:	d8c02a17 	ldw	r3,168(sp)
  804038:	18c00084 	addi	r3,r3,2
  80403c:	d8c02a15 	stw	r3,168(sp)
  804040:	90c0210c 	andi	r3,r18,132
  804044:	d8c03015 	stw	r3,192(sp)
  804048:	1801a31e 	bne	r3,zero,8046d8 <___vfprintf_internal_r+0xe00>
  80404c:	d9003117 	ldw	r4,196(sp)
  804050:	d8c02a17 	ldw	r3,168(sp)
  804054:	20e7c83a 	sub	r19,r4,r3
  804058:	04c19f0e 	bge	zero,r19,8046d8 <___vfprintf_internal_r+0xe00>
  80405c:	02400404 	movi	r9,16
  804060:	d8c02017 	ldw	r3,128(sp)
  804064:	d8801f17 	ldw	r2,124(sp)
  804068:	4cc50d0e 	bge	r9,r19,8054a0 <___vfprintf_internal_r+0x1bc8>
  80406c:	01402074 	movhi	r5,129
  804070:	294cfd84 	addi	r5,r5,13302
  804074:	dc403b15 	stw	r17,236(sp)
  804078:	d9403515 	stw	r5,212(sp)
  80407c:	9823883a 	mov	r17,r19
  804080:	482d883a 	mov	r22,r9
  804084:	9027883a 	mov	r19,r18
  804088:	070001c4 	movi	fp,7
  80408c:	8025883a 	mov	r18,r16
  804090:	dc002c17 	ldw	r16,176(sp)
  804094:	00000306 	br	8040a4 <___vfprintf_internal_r+0x7cc>
  804098:	8c7ffc04 	addi	r17,r17,-16
  80409c:	42000204 	addi	r8,r8,8
  8040a0:	b440130e 	bge	r22,r17,8040f0 <___vfprintf_internal_r+0x818>
  8040a4:	01002074 	movhi	r4,129
  8040a8:	18c00404 	addi	r3,r3,16
  8040ac:	10800044 	addi	r2,r2,1
  8040b0:	210cfd84 	addi	r4,r4,13302
  8040b4:	41000015 	stw	r4,0(r8)
  8040b8:	45800115 	stw	r22,4(r8)
  8040bc:	d8c02015 	stw	r3,128(sp)
  8040c0:	d8801f15 	stw	r2,124(sp)
  8040c4:	e0bff40e 	bge	fp,r2,804098 <__alt_mem_onchip_mem+0xff784098>
  8040c8:	d9801e04 	addi	r6,sp,120
  8040cc:	b80b883a 	mov	r5,r23
  8040d0:	8009883a 	mov	r4,r16
  8040d4:	080a2940 	call	80a294 <__sprint_r>
  8040d8:	103f011e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  8040dc:	8c7ffc04 	addi	r17,r17,-16
  8040e0:	d8c02017 	ldw	r3,128(sp)
  8040e4:	d8801f17 	ldw	r2,124(sp)
  8040e8:	da000404 	addi	r8,sp,16
  8040ec:	b47fed16 	blt	r22,r17,8040a4 <__alt_mem_onchip_mem+0xff7840a4>
  8040f0:	9021883a 	mov	r16,r18
  8040f4:	9825883a 	mov	r18,r19
  8040f8:	8827883a 	mov	r19,r17
  8040fc:	dc403b17 	ldw	r17,236(sp)
  804100:	d9403517 	ldw	r5,212(sp)
  804104:	98c7883a 	add	r3,r19,r3
  804108:	10800044 	addi	r2,r2,1
  80410c:	41400015 	stw	r5,0(r8)
  804110:	44c00115 	stw	r19,4(r8)
  804114:	d8c02015 	stw	r3,128(sp)
  804118:	d8801f15 	stw	r2,124(sp)
  80411c:	010001c4 	movi	r4,7
  804120:	2082a316 	blt	r4,r2,804bb0 <___vfprintf_internal_r+0x12d8>
  804124:	df002787 	ldb	fp,158(sp)
  804128:	42000204 	addi	r8,r8,8
  80412c:	e0000c26 	beq	fp,zero,804160 <___vfprintf_internal_r+0x888>
  804130:	d8801f17 	ldw	r2,124(sp)
  804134:	d9002784 	addi	r4,sp,158
  804138:	18c00044 	addi	r3,r3,1
  80413c:	10800044 	addi	r2,r2,1
  804140:	41000015 	stw	r4,0(r8)
  804144:	01000044 	movi	r4,1
  804148:	41000115 	stw	r4,4(r8)
  80414c:	d8c02015 	stw	r3,128(sp)
  804150:	d8801f15 	stw	r2,124(sp)
  804154:	010001c4 	movi	r4,7
  804158:	20823c16 	blt	r4,r2,804a4c <___vfprintf_internal_r+0x1174>
  80415c:	42000204 	addi	r8,r8,8
  804160:	d8802b17 	ldw	r2,172(sp)
  804164:	10000c26 	beq	r2,zero,804198 <___vfprintf_internal_r+0x8c0>
  804168:	d8801f17 	ldw	r2,124(sp)
  80416c:	d9002704 	addi	r4,sp,156
  804170:	18c00084 	addi	r3,r3,2
  804174:	10800044 	addi	r2,r2,1
  804178:	41000015 	stw	r4,0(r8)
  80417c:	01000084 	movi	r4,2
  804180:	41000115 	stw	r4,4(r8)
  804184:	d8c02015 	stw	r3,128(sp)
  804188:	d8801f15 	stw	r2,124(sp)
  80418c:	010001c4 	movi	r4,7
  804190:	20823616 	blt	r4,r2,804a6c <___vfprintf_internal_r+0x1194>
  804194:	42000204 	addi	r8,r8,8
  804198:	d9003017 	ldw	r4,192(sp)
  80419c:	00802004 	movi	r2,128
  8041a0:	20819926 	beq	r4,r2,804808 <___vfprintf_internal_r+0xf30>
  8041a4:	d9402917 	ldw	r5,164(sp)
  8041a8:	d8802e17 	ldw	r2,184(sp)
  8041ac:	28adc83a 	sub	r22,r5,r2
  8041b0:	0580310e 	bge	zero,r22,804278 <___vfprintf_internal_r+0x9a0>
  8041b4:	07000404 	movi	fp,16
  8041b8:	d8801f17 	ldw	r2,124(sp)
  8041bc:	e584140e 	bge	fp,r22,805210 <___vfprintf_internal_r+0x1938>
  8041c0:	01402074 	movhi	r5,129
  8041c4:	294cf984 	addi	r5,r5,13286
  8041c8:	dc402915 	stw	r17,164(sp)
  8041cc:	d9402b15 	stw	r5,172(sp)
  8041d0:	b023883a 	mov	r17,r22
  8041d4:	04c001c4 	movi	r19,7
  8041d8:	a82d883a 	mov	r22,r21
  8041dc:	902b883a 	mov	r21,r18
  8041e0:	8025883a 	mov	r18,r16
  8041e4:	dc002c17 	ldw	r16,176(sp)
  8041e8:	00000306 	br	8041f8 <___vfprintf_internal_r+0x920>
  8041ec:	8c7ffc04 	addi	r17,r17,-16
  8041f0:	42000204 	addi	r8,r8,8
  8041f4:	e440110e 	bge	fp,r17,80423c <___vfprintf_internal_r+0x964>
  8041f8:	18c00404 	addi	r3,r3,16
  8041fc:	10800044 	addi	r2,r2,1
  804200:	45000015 	stw	r20,0(r8)
  804204:	47000115 	stw	fp,4(r8)
  804208:	d8c02015 	stw	r3,128(sp)
  80420c:	d8801f15 	stw	r2,124(sp)
  804210:	98bff60e 	bge	r19,r2,8041ec <__alt_mem_onchip_mem+0xff7841ec>
  804214:	d9801e04 	addi	r6,sp,120
  804218:	b80b883a 	mov	r5,r23
  80421c:	8009883a 	mov	r4,r16
  804220:	080a2940 	call	80a294 <__sprint_r>
  804224:	103eae1e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  804228:	8c7ffc04 	addi	r17,r17,-16
  80422c:	d8c02017 	ldw	r3,128(sp)
  804230:	d8801f17 	ldw	r2,124(sp)
  804234:	da000404 	addi	r8,sp,16
  804238:	e47fef16 	blt	fp,r17,8041f8 <__alt_mem_onchip_mem+0xff7841f8>
  80423c:	9021883a 	mov	r16,r18
  804240:	a825883a 	mov	r18,r21
  804244:	b02b883a 	mov	r21,r22
  804248:	882d883a 	mov	r22,r17
  80424c:	dc402917 	ldw	r17,164(sp)
  804250:	d9002b17 	ldw	r4,172(sp)
  804254:	1d87883a 	add	r3,r3,r22
  804258:	10800044 	addi	r2,r2,1
  80425c:	41000015 	stw	r4,0(r8)
  804260:	45800115 	stw	r22,4(r8)
  804264:	d8c02015 	stw	r3,128(sp)
  804268:	d8801f15 	stw	r2,124(sp)
  80426c:	010001c4 	movi	r4,7
  804270:	2081ee16 	blt	r4,r2,804a2c <___vfprintf_internal_r+0x1154>
  804274:	42000204 	addi	r8,r8,8
  804278:	9080400c 	andi	r2,r18,256
  80427c:	1001181e 	bne	r2,zero,8046e0 <___vfprintf_internal_r+0xe08>
  804280:	d9402e17 	ldw	r5,184(sp)
  804284:	d8801f17 	ldw	r2,124(sp)
  804288:	44000015 	stw	r16,0(r8)
  80428c:	1947883a 	add	r3,r3,r5
  804290:	10800044 	addi	r2,r2,1
  804294:	41400115 	stw	r5,4(r8)
  804298:	d8c02015 	stw	r3,128(sp)
  80429c:	d8801f15 	stw	r2,124(sp)
  8042a0:	010001c4 	movi	r4,7
  8042a4:	2081d316 	blt	r4,r2,8049f4 <___vfprintf_internal_r+0x111c>
  8042a8:	42000204 	addi	r8,r8,8
  8042ac:	9480010c 	andi	r18,r18,4
  8042b0:	90003226 	beq	r18,zero,80437c <___vfprintf_internal_r+0xaa4>
  8042b4:	d9403117 	ldw	r5,196(sp)
  8042b8:	d8802a17 	ldw	r2,168(sp)
  8042bc:	28a1c83a 	sub	r16,r5,r2
  8042c0:	04002e0e 	bge	zero,r16,80437c <___vfprintf_internal_r+0xaa4>
  8042c4:	04400404 	movi	r17,16
  8042c8:	d8801f17 	ldw	r2,124(sp)
  8042cc:	8c04a20e 	bge	r17,r16,805558 <___vfprintf_internal_r+0x1c80>
  8042d0:	01402074 	movhi	r5,129
  8042d4:	294cfd84 	addi	r5,r5,13302
  8042d8:	d9403515 	stw	r5,212(sp)
  8042dc:	048001c4 	movi	r18,7
  8042e0:	dcc02c17 	ldw	r19,176(sp)
  8042e4:	00000306 	br	8042f4 <___vfprintf_internal_r+0xa1c>
  8042e8:	843ffc04 	addi	r16,r16,-16
  8042ec:	42000204 	addi	r8,r8,8
  8042f0:	8c00130e 	bge	r17,r16,804340 <___vfprintf_internal_r+0xa68>
  8042f4:	01002074 	movhi	r4,129
  8042f8:	18c00404 	addi	r3,r3,16
  8042fc:	10800044 	addi	r2,r2,1
  804300:	210cfd84 	addi	r4,r4,13302
  804304:	41000015 	stw	r4,0(r8)
  804308:	44400115 	stw	r17,4(r8)
  80430c:	d8c02015 	stw	r3,128(sp)
  804310:	d8801f15 	stw	r2,124(sp)
  804314:	90bff40e 	bge	r18,r2,8042e8 <__alt_mem_onchip_mem+0xff7842e8>
  804318:	d9801e04 	addi	r6,sp,120
  80431c:	b80b883a 	mov	r5,r23
  804320:	9809883a 	mov	r4,r19
  804324:	080a2940 	call	80a294 <__sprint_r>
  804328:	103e6d1e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  80432c:	843ffc04 	addi	r16,r16,-16
  804330:	d8c02017 	ldw	r3,128(sp)
  804334:	d8801f17 	ldw	r2,124(sp)
  804338:	da000404 	addi	r8,sp,16
  80433c:	8c3fed16 	blt	r17,r16,8042f4 <__alt_mem_onchip_mem+0xff7842f4>
  804340:	d9403517 	ldw	r5,212(sp)
  804344:	1c07883a 	add	r3,r3,r16
  804348:	10800044 	addi	r2,r2,1
  80434c:	41400015 	stw	r5,0(r8)
  804350:	44000115 	stw	r16,4(r8)
  804354:	d8c02015 	stw	r3,128(sp)
  804358:	d8801f15 	stw	r2,124(sp)
  80435c:	010001c4 	movi	r4,7
  804360:	2080060e 	bge	r4,r2,80437c <___vfprintf_internal_r+0xaa4>
  804364:	d9002c17 	ldw	r4,176(sp)
  804368:	d9801e04 	addi	r6,sp,120
  80436c:	b80b883a 	mov	r5,r23
  804370:	080a2940 	call	80a294 <__sprint_r>
  804374:	103e5a1e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  804378:	d8c02017 	ldw	r3,128(sp)
  80437c:	d8803117 	ldw	r2,196(sp)
  804380:	d9002a17 	ldw	r4,168(sp)
  804384:	1100010e 	bge	r2,r4,80438c <___vfprintf_internal_r+0xab4>
  804388:	2005883a 	mov	r2,r4
  80438c:	d9402f17 	ldw	r5,188(sp)
  804390:	288b883a 	add	r5,r5,r2
  804394:	d9402f15 	stw	r5,188(sp)
  804398:	18019e1e 	bne	r3,zero,804a14 <___vfprintf_internal_r+0x113c>
  80439c:	a8800007 	ldb	r2,0(r21)
  8043a0:	d8001f15 	stw	zero,124(sp)
  8043a4:	da000404 	addi	r8,sp,16
  8043a8:	103d851e 	bne	r2,zero,8039c0 <__alt_mem_onchip_mem+0xff7839c0>
  8043ac:	a821883a 	mov	r16,r21
  8043b0:	003d9b06 	br	803a20 <__alt_mem_onchip_mem+0xff783a20>
  8043b4:	18c03fcc 	andi	r3,r3,255
  8043b8:	1805c11e 	bne	r3,zero,805ac0 <___vfprintf_internal_r+0x21e8>
  8043bc:	94800414 	ori	r18,r18,16
  8043c0:	9080080c 	andi	r2,r18,32
  8043c4:	10020c26 	beq	r2,zero,804bf8 <___vfprintf_internal_r+0x1320>
  8043c8:	d8802d17 	ldw	r2,180(sp)
  8043cc:	d9002917 	ldw	r4,164(sp)
  8043d0:	d8002785 	stb	zero,158(sp)
  8043d4:	10c00204 	addi	r3,r2,8
  8043d8:	14c00017 	ldw	r19,0(r2)
  8043dc:	15800117 	ldw	r22,4(r2)
  8043e0:	20040f16 	blt	r4,zero,805420 <___vfprintf_internal_r+0x1b48>
  8043e4:	013fdfc4 	movi	r4,-129
  8043e8:	9d84b03a 	or	r2,r19,r22
  8043ec:	d8c02d15 	stw	r3,180(sp)
  8043f0:	9124703a 	and	r18,r18,r4
  8043f4:	0039883a 	mov	fp,zero
  8043f8:	103e891e 	bne	r2,zero,803e20 <__alt_mem_onchip_mem+0xff783e20>
  8043fc:	d9002917 	ldw	r4,164(sp)
  804400:	2002c11e 	bne	r4,zero,804f08 <___vfprintf_internal_r+0x1630>
  804404:	d8002915 	stw	zero,164(sp)
  804408:	d8002e15 	stw	zero,184(sp)
  80440c:	dc001e04 	addi	r16,sp,120
  804410:	003ef806 	br	803ff4 <__alt_mem_onchip_mem+0xff783ff4>
  804414:	18c03fcc 	andi	r3,r3,255
  804418:	18059d1e 	bne	r3,zero,805a90 <___vfprintf_internal_r+0x21b8>
  80441c:	01402074 	movhi	r5,129
  804420:	294ced04 	addi	r5,r5,13236
  804424:	d9403915 	stw	r5,228(sp)
  804428:	9080080c 	andi	r2,r18,32
  80442c:	10005226 	beq	r2,zero,804578 <___vfprintf_internal_r+0xca0>
  804430:	d8802d17 	ldw	r2,180(sp)
  804434:	14c00017 	ldw	r19,0(r2)
  804438:	15800117 	ldw	r22,4(r2)
  80443c:	10800204 	addi	r2,r2,8
  804440:	d8802d15 	stw	r2,180(sp)
  804444:	9080004c 	andi	r2,r18,1
  804448:	10019026 	beq	r2,zero,804a8c <___vfprintf_internal_r+0x11b4>
  80444c:	9d84b03a 	or	r2,r19,r22
  804450:	10036926 	beq	r2,zero,8051f8 <___vfprintf_internal_r+0x1920>
  804454:	d8c02917 	ldw	r3,164(sp)
  804458:	00800c04 	movi	r2,48
  80445c:	d8802705 	stb	r2,156(sp)
  804460:	dc402745 	stb	r17,157(sp)
  804464:	d8002785 	stb	zero,158(sp)
  804468:	90800094 	ori	r2,r18,2
  80446c:	18045d16 	blt	r3,zero,8055e4 <___vfprintf_internal_r+0x1d0c>
  804470:	00bfdfc4 	movi	r2,-129
  804474:	90a4703a 	and	r18,r18,r2
  804478:	94800094 	ori	r18,r18,2
  80447c:	0039883a 	mov	fp,zero
  804480:	d9003917 	ldw	r4,228(sp)
  804484:	dc001e04 	addi	r16,sp,120
  804488:	988003cc 	andi	r2,r19,15
  80448c:	b006973a 	slli	r3,r22,28
  804490:	2085883a 	add	r2,r4,r2
  804494:	9826d13a 	srli	r19,r19,4
  804498:	10800003 	ldbu	r2,0(r2)
  80449c:	b02cd13a 	srli	r22,r22,4
  8044a0:	843fffc4 	addi	r16,r16,-1
  8044a4:	1ce6b03a 	or	r19,r3,r19
  8044a8:	80800005 	stb	r2,0(r16)
  8044ac:	9d84b03a 	or	r2,r19,r22
  8044b0:	103ff51e 	bne	r2,zero,804488 <__alt_mem_onchip_mem+0xff784488>
  8044b4:	d8c02817 	ldw	r3,160(sp)
  8044b8:	1c07c83a 	sub	r3,r3,r16
  8044bc:	d8c02e15 	stw	r3,184(sp)
  8044c0:	003ecc06 	br	803ff4 <__alt_mem_onchip_mem+0xff783ff4>
  8044c4:	18c03fcc 	andi	r3,r3,255
  8044c8:	183e9f26 	beq	r3,zero,803f48 <__alt_mem_onchip_mem+0xff783f48>
  8044cc:	d9c02785 	stb	r7,158(sp)
  8044d0:	003e9d06 	br	803f48 <__alt_mem_onchip_mem+0xff783f48>
  8044d4:	00c00044 	movi	r3,1
  8044d8:	01c00ac4 	movi	r7,43
  8044dc:	ac400007 	ldb	r17,0(r21)
  8044e0:	003d5e06 	br	803a5c <__alt_mem_onchip_mem+0xff783a5c>
  8044e4:	94800814 	ori	r18,r18,32
  8044e8:	ac400007 	ldb	r17,0(r21)
  8044ec:	003d5b06 	br	803a5c <__alt_mem_onchip_mem+0xff783a5c>
  8044f0:	d8c02d17 	ldw	r3,180(sp)
  8044f4:	d8002785 	stb	zero,158(sp)
  8044f8:	1c000017 	ldw	r16,0(r3)
  8044fc:	1cc00104 	addi	r19,r3,4
  804500:	80041926 	beq	r16,zero,805568 <___vfprintf_internal_r+0x1c90>
  804504:	d9002917 	ldw	r4,164(sp)
  804508:	2003d016 	blt	r4,zero,80544c <___vfprintf_internal_r+0x1b74>
  80450c:	200d883a 	mov	r6,r4
  804510:	000b883a 	mov	r5,zero
  804514:	8009883a 	mov	r4,r16
  804518:	da003d15 	stw	r8,244(sp)
  80451c:	08086680 	call	808668 <memchr>
  804520:	da003d17 	ldw	r8,244(sp)
  804524:	10045426 	beq	r2,zero,805678 <___vfprintf_internal_r+0x1da0>
  804528:	1405c83a 	sub	r2,r2,r16
  80452c:	d8802e15 	stw	r2,184(sp)
  804530:	1003cc16 	blt	r2,zero,805464 <___vfprintf_internal_r+0x1b8c>
  804534:	df002783 	ldbu	fp,158(sp)
  804538:	d8802a15 	stw	r2,168(sp)
  80453c:	dcc02d15 	stw	r19,180(sp)
  804540:	d8002915 	stw	zero,164(sp)
  804544:	d8003215 	stw	zero,200(sp)
  804548:	003eb006 	br	80400c <__alt_mem_onchip_mem+0xff78400c>
  80454c:	18c03fcc 	andi	r3,r3,255
  804550:	183f9b26 	beq	r3,zero,8043c0 <__alt_mem_onchip_mem+0xff7843c0>
  804554:	d9c02785 	stb	r7,158(sp)
  804558:	003f9906 	br	8043c0 <__alt_mem_onchip_mem+0xff7843c0>
  80455c:	18c03fcc 	andi	r3,r3,255
  804560:	1805551e 	bne	r3,zero,805ab8 <___vfprintf_internal_r+0x21e0>
  804564:	01402074 	movhi	r5,129
  804568:	294cf204 	addi	r5,r5,13256
  80456c:	d9403915 	stw	r5,228(sp)
  804570:	9080080c 	andi	r2,r18,32
  804574:	103fae1e 	bne	r2,zero,804430 <__alt_mem_onchip_mem+0xff784430>
  804578:	9080040c 	andi	r2,r18,16
  80457c:	1002de26 	beq	r2,zero,8050f8 <___vfprintf_internal_r+0x1820>
  804580:	d8c02d17 	ldw	r3,180(sp)
  804584:	002d883a 	mov	r22,zero
  804588:	1cc00017 	ldw	r19,0(r3)
  80458c:	18c00104 	addi	r3,r3,4
  804590:	d8c02d15 	stw	r3,180(sp)
  804594:	003fab06 	br	804444 <__alt_mem_onchip_mem+0xff784444>
  804598:	38803fcc 	andi	r2,r7,255
  80459c:	1080201c 	xori	r2,r2,128
  8045a0:	10bfe004 	addi	r2,r2,-128
  8045a4:	1002d21e 	bne	r2,zero,8050f0 <___vfprintf_internal_r+0x1818>
  8045a8:	00c00044 	movi	r3,1
  8045ac:	01c00804 	movi	r7,32
  8045b0:	ac400007 	ldb	r17,0(r21)
  8045b4:	003d2906 	br	803a5c <__alt_mem_onchip_mem+0xff783a5c>
  8045b8:	94800054 	ori	r18,r18,1
  8045bc:	ac400007 	ldb	r17,0(r21)
  8045c0:	003d2606 	br	803a5c <__alt_mem_onchip_mem+0xff783a5c>
  8045c4:	18c03fcc 	andi	r3,r3,255
  8045c8:	183e0526 	beq	r3,zero,803de0 <__alt_mem_onchip_mem+0xff783de0>
  8045cc:	d9c02785 	stb	r7,158(sp)
  8045d0:	003e0306 	br	803de0 <__alt_mem_onchip_mem+0xff783de0>
  8045d4:	94801014 	ori	r18,r18,64
  8045d8:	ac400007 	ldb	r17,0(r21)
  8045dc:	003d1f06 	br	803a5c <__alt_mem_onchip_mem+0xff783a5c>
  8045e0:	ac400007 	ldb	r17,0(r21)
  8045e4:	8a438726 	beq	r17,r9,805404 <___vfprintf_internal_r+0x1b2c>
  8045e8:	94800414 	ori	r18,r18,16
  8045ec:	003d1b06 	br	803a5c <__alt_mem_onchip_mem+0xff783a5c>
  8045f0:	18c03fcc 	andi	r3,r3,255
  8045f4:	1805341e 	bne	r3,zero,805ac8 <___vfprintf_internal_r+0x21f0>
  8045f8:	9080080c 	andi	r2,r18,32
  8045fc:	1002cd26 	beq	r2,zero,805134 <___vfprintf_internal_r+0x185c>
  804600:	d9402d17 	ldw	r5,180(sp)
  804604:	d9002f17 	ldw	r4,188(sp)
  804608:	28800017 	ldw	r2,0(r5)
  80460c:	2007d7fa 	srai	r3,r4,31
  804610:	29400104 	addi	r5,r5,4
  804614:	d9402d15 	stw	r5,180(sp)
  804618:	11000015 	stw	r4,0(r2)
  80461c:	10c00115 	stw	r3,4(r2)
  804620:	003ce506 	br	8039b8 <__alt_mem_onchip_mem+0xff7839b8>
  804624:	d8c02d17 	ldw	r3,180(sp)
  804628:	d9002d17 	ldw	r4,180(sp)
  80462c:	d8002785 	stb	zero,158(sp)
  804630:	18800017 	ldw	r2,0(r3)
  804634:	21000104 	addi	r4,r4,4
  804638:	00c00044 	movi	r3,1
  80463c:	d8c02a15 	stw	r3,168(sp)
  804640:	d8801405 	stb	r2,80(sp)
  804644:	d9002d15 	stw	r4,180(sp)
  804648:	d8c02e15 	stw	r3,184(sp)
  80464c:	d8002915 	stw	zero,164(sp)
  804650:	d8003215 	stw	zero,200(sp)
  804654:	dc001404 	addi	r16,sp,80
  804658:	0039883a 	mov	fp,zero
  80465c:	003e7206 	br	804028 <__alt_mem_onchip_mem+0xff784028>
  804660:	01002074 	movhi	r4,129
  804664:	210cf204 	addi	r4,r4,13256
  804668:	0039883a 	mov	fp,zero
  80466c:	d9003915 	stw	r4,228(sp)
  804670:	04401e04 	movi	r17,120
  804674:	003f8206 	br	804480 <__alt_mem_onchip_mem+0xff784480>
  804678:	18c03fcc 	andi	r3,r3,255
  80467c:	1805061e 	bne	r3,zero,805a98 <___vfprintf_internal_r+0x21c0>
  804680:	883d9126 	beq	r17,zero,803cc8 <__alt_mem_onchip_mem+0xff783cc8>
  804684:	00c00044 	movi	r3,1
  804688:	d8c02a15 	stw	r3,168(sp)
  80468c:	dc401405 	stb	r17,80(sp)
  804690:	d8002785 	stb	zero,158(sp)
  804694:	003fec06 	br	804648 <__alt_mem_onchip_mem+0xff784648>
  804698:	01402074 	movhi	r5,129
  80469c:	294cf204 	addi	r5,r5,13256
  8046a0:	d9403915 	stw	r5,228(sp)
  8046a4:	d8c02d15 	stw	r3,180(sp)
  8046a8:	1025883a 	mov	r18,r2
  8046ac:	04401e04 	movi	r17,120
  8046b0:	9d84b03a 	or	r2,r19,r22
  8046b4:	1000fc1e 	bne	r2,zero,804aa8 <___vfprintf_internal_r+0x11d0>
  8046b8:	0039883a 	mov	fp,zero
  8046bc:	00800084 	movi	r2,2
  8046c0:	10803fcc 	andi	r2,r2,255
  8046c4:	00c00044 	movi	r3,1
  8046c8:	10c20f26 	beq	r2,r3,804f08 <___vfprintf_internal_r+0x1630>
  8046cc:	00c00084 	movi	r3,2
  8046d0:	10fd6326 	beq	r2,r3,803c60 <__alt_mem_onchip_mem+0xff783c60>
  8046d4:	003e2d06 	br	803f8c <__alt_mem_onchip_mem+0xff783f8c>
  8046d8:	d8c02017 	ldw	r3,128(sp)
  8046dc:	003e9306 	br	80412c <__alt_mem_onchip_mem+0xff78412c>
  8046e0:	00801944 	movi	r2,101
  8046e4:	14407e0e 	bge	r2,r17,8048e0 <___vfprintf_internal_r+0x1008>
  8046e8:	d9003617 	ldw	r4,216(sp)
  8046ec:	d9403817 	ldw	r5,224(sp)
  8046f0:	000d883a 	mov	r6,zero
  8046f4:	000f883a 	mov	r7,zero
  8046f8:	d8c03c15 	stw	r3,240(sp)
  8046fc:	da003d15 	stw	r8,244(sp)
  804700:	080da8c0 	call	80da8c <__eqdf2>
  804704:	d8c03c17 	ldw	r3,240(sp)
  804708:	da003d17 	ldw	r8,244(sp)
  80470c:	1000f71e 	bne	r2,zero,804aec <___vfprintf_internal_r+0x1214>
  804710:	d8801f17 	ldw	r2,124(sp)
  804714:	01002074 	movhi	r4,129
  804718:	210cf904 	addi	r4,r4,13284
  80471c:	18c00044 	addi	r3,r3,1
  804720:	10800044 	addi	r2,r2,1
  804724:	41000015 	stw	r4,0(r8)
  804728:	01000044 	movi	r4,1
  80472c:	41000115 	stw	r4,4(r8)
  804730:	d8c02015 	stw	r3,128(sp)
  804734:	d8801f15 	stw	r2,124(sp)
  804738:	010001c4 	movi	r4,7
  80473c:	2082b816 	blt	r4,r2,805220 <___vfprintf_internal_r+0x1948>
  804740:	42000204 	addi	r8,r8,8
  804744:	d8802617 	ldw	r2,152(sp)
  804748:	d9403317 	ldw	r5,204(sp)
  80474c:	11400216 	blt	r2,r5,804758 <___vfprintf_internal_r+0xe80>
  804750:	9080004c 	andi	r2,r18,1
  804754:	103ed526 	beq	r2,zero,8042ac <__alt_mem_onchip_mem+0xff7842ac>
  804758:	d8803717 	ldw	r2,220(sp)
  80475c:	d9003417 	ldw	r4,208(sp)
  804760:	d9403717 	ldw	r5,220(sp)
  804764:	1887883a 	add	r3,r3,r2
  804768:	d8801f17 	ldw	r2,124(sp)
  80476c:	41000015 	stw	r4,0(r8)
  804770:	41400115 	stw	r5,4(r8)
  804774:	10800044 	addi	r2,r2,1
  804778:	d8c02015 	stw	r3,128(sp)
  80477c:	d8801f15 	stw	r2,124(sp)
  804780:	010001c4 	movi	r4,7
  804784:	20832916 	blt	r4,r2,80542c <___vfprintf_internal_r+0x1b54>
  804788:	42000204 	addi	r8,r8,8
  80478c:	d8803317 	ldw	r2,204(sp)
  804790:	143fffc4 	addi	r16,r2,-1
  804794:	043ec50e 	bge	zero,r16,8042ac <__alt_mem_onchip_mem+0xff7842ac>
  804798:	04400404 	movi	r17,16
  80479c:	d8801f17 	ldw	r2,124(sp)
  8047a0:	8c00880e 	bge	r17,r16,8049c4 <___vfprintf_internal_r+0x10ec>
  8047a4:	01402074 	movhi	r5,129
  8047a8:	294cf984 	addi	r5,r5,13286
  8047ac:	d9402b15 	stw	r5,172(sp)
  8047b0:	058001c4 	movi	r22,7
  8047b4:	dcc02c17 	ldw	r19,176(sp)
  8047b8:	00000306 	br	8047c8 <___vfprintf_internal_r+0xef0>
  8047bc:	42000204 	addi	r8,r8,8
  8047c0:	843ffc04 	addi	r16,r16,-16
  8047c4:	8c00820e 	bge	r17,r16,8049d0 <___vfprintf_internal_r+0x10f8>
  8047c8:	18c00404 	addi	r3,r3,16
  8047cc:	10800044 	addi	r2,r2,1
  8047d0:	45000015 	stw	r20,0(r8)
  8047d4:	44400115 	stw	r17,4(r8)
  8047d8:	d8c02015 	stw	r3,128(sp)
  8047dc:	d8801f15 	stw	r2,124(sp)
  8047e0:	b0bff60e 	bge	r22,r2,8047bc <__alt_mem_onchip_mem+0xff7847bc>
  8047e4:	d9801e04 	addi	r6,sp,120
  8047e8:	b80b883a 	mov	r5,r23
  8047ec:	9809883a 	mov	r4,r19
  8047f0:	080a2940 	call	80a294 <__sprint_r>
  8047f4:	103d3a1e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  8047f8:	d8c02017 	ldw	r3,128(sp)
  8047fc:	d8801f17 	ldw	r2,124(sp)
  804800:	da000404 	addi	r8,sp,16
  804804:	003fee06 	br	8047c0 <__alt_mem_onchip_mem+0xff7847c0>
  804808:	d9403117 	ldw	r5,196(sp)
  80480c:	d8802a17 	ldw	r2,168(sp)
  804810:	28adc83a 	sub	r22,r5,r2
  804814:	05be630e 	bge	zero,r22,8041a4 <__alt_mem_onchip_mem+0xff7841a4>
  804818:	07000404 	movi	fp,16
  80481c:	d8801f17 	ldw	r2,124(sp)
  804820:	e5838f0e 	bge	fp,r22,805660 <___vfprintf_internal_r+0x1d88>
  804824:	01402074 	movhi	r5,129
  804828:	294cf984 	addi	r5,r5,13286
  80482c:	dc403015 	stw	r17,192(sp)
  804830:	d9402b15 	stw	r5,172(sp)
  804834:	b023883a 	mov	r17,r22
  804838:	04c001c4 	movi	r19,7
  80483c:	a82d883a 	mov	r22,r21
  804840:	902b883a 	mov	r21,r18
  804844:	8025883a 	mov	r18,r16
  804848:	dc002c17 	ldw	r16,176(sp)
  80484c:	00000306 	br	80485c <___vfprintf_internal_r+0xf84>
  804850:	8c7ffc04 	addi	r17,r17,-16
  804854:	42000204 	addi	r8,r8,8
  804858:	e440110e 	bge	fp,r17,8048a0 <___vfprintf_internal_r+0xfc8>
  80485c:	18c00404 	addi	r3,r3,16
  804860:	10800044 	addi	r2,r2,1
  804864:	45000015 	stw	r20,0(r8)
  804868:	47000115 	stw	fp,4(r8)
  80486c:	d8c02015 	stw	r3,128(sp)
  804870:	d8801f15 	stw	r2,124(sp)
  804874:	98bff60e 	bge	r19,r2,804850 <__alt_mem_onchip_mem+0xff784850>
  804878:	d9801e04 	addi	r6,sp,120
  80487c:	b80b883a 	mov	r5,r23
  804880:	8009883a 	mov	r4,r16
  804884:	080a2940 	call	80a294 <__sprint_r>
  804888:	103d151e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  80488c:	8c7ffc04 	addi	r17,r17,-16
  804890:	d8c02017 	ldw	r3,128(sp)
  804894:	d8801f17 	ldw	r2,124(sp)
  804898:	da000404 	addi	r8,sp,16
  80489c:	e47fef16 	blt	fp,r17,80485c <__alt_mem_onchip_mem+0xff78485c>
  8048a0:	9021883a 	mov	r16,r18
  8048a4:	a825883a 	mov	r18,r21
  8048a8:	b02b883a 	mov	r21,r22
  8048ac:	882d883a 	mov	r22,r17
  8048b0:	dc403017 	ldw	r17,192(sp)
  8048b4:	d9002b17 	ldw	r4,172(sp)
  8048b8:	1d87883a 	add	r3,r3,r22
  8048bc:	10800044 	addi	r2,r2,1
  8048c0:	41000015 	stw	r4,0(r8)
  8048c4:	45800115 	stw	r22,4(r8)
  8048c8:	d8c02015 	stw	r3,128(sp)
  8048cc:	d8801f15 	stw	r2,124(sp)
  8048d0:	010001c4 	movi	r4,7
  8048d4:	20818e16 	blt	r4,r2,804f10 <___vfprintf_internal_r+0x1638>
  8048d8:	42000204 	addi	r8,r8,8
  8048dc:	003e3106 	br	8041a4 <__alt_mem_onchip_mem+0xff7841a4>
  8048e0:	d9403317 	ldw	r5,204(sp)
  8048e4:	00800044 	movi	r2,1
  8048e8:	18c00044 	addi	r3,r3,1
  8048ec:	1141530e 	bge	r2,r5,804e3c <___vfprintf_internal_r+0x1564>
  8048f0:	dc401f17 	ldw	r17,124(sp)
  8048f4:	00800044 	movi	r2,1
  8048f8:	40800115 	stw	r2,4(r8)
  8048fc:	8c400044 	addi	r17,r17,1
  804900:	44000015 	stw	r16,0(r8)
  804904:	d8c02015 	stw	r3,128(sp)
  804908:	dc401f15 	stw	r17,124(sp)
  80490c:	008001c4 	movi	r2,7
  804910:	14416b16 	blt	r2,r17,804ec0 <___vfprintf_internal_r+0x15e8>
  804914:	42000204 	addi	r8,r8,8
  804918:	d8803717 	ldw	r2,220(sp)
  80491c:	d9003417 	ldw	r4,208(sp)
  804920:	8c400044 	addi	r17,r17,1
  804924:	10c7883a 	add	r3,r2,r3
  804928:	40800115 	stw	r2,4(r8)
  80492c:	41000015 	stw	r4,0(r8)
  804930:	d8c02015 	stw	r3,128(sp)
  804934:	dc401f15 	stw	r17,124(sp)
  804938:	008001c4 	movi	r2,7
  80493c:	14416916 	blt	r2,r17,804ee4 <___vfprintf_internal_r+0x160c>
  804940:	45800204 	addi	r22,r8,8
  804944:	d9003617 	ldw	r4,216(sp)
  804948:	d9403817 	ldw	r5,224(sp)
  80494c:	000d883a 	mov	r6,zero
  804950:	000f883a 	mov	r7,zero
  804954:	d8c03c15 	stw	r3,240(sp)
  804958:	080da8c0 	call	80da8c <__eqdf2>
  80495c:	d8c03c17 	ldw	r3,240(sp)
  804960:	1000bc26 	beq	r2,zero,804c54 <___vfprintf_internal_r+0x137c>
  804964:	d9403317 	ldw	r5,204(sp)
  804968:	84000044 	addi	r16,r16,1
  80496c:	8c400044 	addi	r17,r17,1
  804970:	28bfffc4 	addi	r2,r5,-1
  804974:	1887883a 	add	r3,r3,r2
  804978:	b0800115 	stw	r2,4(r22)
  80497c:	b4000015 	stw	r16,0(r22)
  804980:	d8c02015 	stw	r3,128(sp)
  804984:	dc401f15 	stw	r17,124(sp)
  804988:	008001c4 	movi	r2,7
  80498c:	14414316 	blt	r2,r17,804e9c <___vfprintf_internal_r+0x15c4>
  804990:	b5800204 	addi	r22,r22,8
  804994:	d9003a17 	ldw	r4,232(sp)
  804998:	df0022c4 	addi	fp,sp,139
  80499c:	8c400044 	addi	r17,r17,1
  8049a0:	20c7883a 	add	r3,r4,r3
  8049a4:	b7000015 	stw	fp,0(r22)
  8049a8:	b1000115 	stw	r4,4(r22)
  8049ac:	d8c02015 	stw	r3,128(sp)
  8049b0:	dc401f15 	stw	r17,124(sp)
  8049b4:	008001c4 	movi	r2,7
  8049b8:	14400e16 	blt	r2,r17,8049f4 <___vfprintf_internal_r+0x111c>
  8049bc:	b2000204 	addi	r8,r22,8
  8049c0:	003e3a06 	br	8042ac <__alt_mem_onchip_mem+0xff7842ac>
  8049c4:	01002074 	movhi	r4,129
  8049c8:	210cf984 	addi	r4,r4,13286
  8049cc:	d9002b15 	stw	r4,172(sp)
  8049d0:	d9002b17 	ldw	r4,172(sp)
  8049d4:	1c07883a 	add	r3,r3,r16
  8049d8:	44000115 	stw	r16,4(r8)
  8049dc:	41000015 	stw	r4,0(r8)
  8049e0:	10800044 	addi	r2,r2,1
  8049e4:	d8c02015 	stw	r3,128(sp)
  8049e8:	d8801f15 	stw	r2,124(sp)
  8049ec:	010001c4 	movi	r4,7
  8049f0:	20be2d0e 	bge	r4,r2,8042a8 <__alt_mem_onchip_mem+0xff7842a8>
  8049f4:	d9002c17 	ldw	r4,176(sp)
  8049f8:	d9801e04 	addi	r6,sp,120
  8049fc:	b80b883a 	mov	r5,r23
  804a00:	080a2940 	call	80a294 <__sprint_r>
  804a04:	103cb61e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  804a08:	d8c02017 	ldw	r3,128(sp)
  804a0c:	da000404 	addi	r8,sp,16
  804a10:	003e2606 	br	8042ac <__alt_mem_onchip_mem+0xff7842ac>
  804a14:	d9002c17 	ldw	r4,176(sp)
  804a18:	d9801e04 	addi	r6,sp,120
  804a1c:	b80b883a 	mov	r5,r23
  804a20:	080a2940 	call	80a294 <__sprint_r>
  804a24:	103e5d26 	beq	r2,zero,80439c <__alt_mem_onchip_mem+0xff78439c>
  804a28:	003cad06 	br	803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  804a2c:	d9002c17 	ldw	r4,176(sp)
  804a30:	d9801e04 	addi	r6,sp,120
  804a34:	b80b883a 	mov	r5,r23
  804a38:	080a2940 	call	80a294 <__sprint_r>
  804a3c:	103ca81e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  804a40:	d8c02017 	ldw	r3,128(sp)
  804a44:	da000404 	addi	r8,sp,16
  804a48:	003e0b06 	br	804278 <__alt_mem_onchip_mem+0xff784278>
  804a4c:	d9002c17 	ldw	r4,176(sp)
  804a50:	d9801e04 	addi	r6,sp,120
  804a54:	b80b883a 	mov	r5,r23
  804a58:	080a2940 	call	80a294 <__sprint_r>
  804a5c:	103ca01e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  804a60:	d8c02017 	ldw	r3,128(sp)
  804a64:	da000404 	addi	r8,sp,16
  804a68:	003dbd06 	br	804160 <__alt_mem_onchip_mem+0xff784160>
  804a6c:	d9002c17 	ldw	r4,176(sp)
  804a70:	d9801e04 	addi	r6,sp,120
  804a74:	b80b883a 	mov	r5,r23
  804a78:	080a2940 	call	80a294 <__sprint_r>
  804a7c:	103c981e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  804a80:	d8c02017 	ldw	r3,128(sp)
  804a84:	da000404 	addi	r8,sp,16
  804a88:	003dc306 	br	804198 <__alt_mem_onchip_mem+0xff784198>
  804a8c:	d8802917 	ldw	r2,164(sp)
  804a90:	d8002785 	stb	zero,158(sp)
  804a94:	103f0616 	blt	r2,zero,8046b0 <__alt_mem_onchip_mem+0xff7846b0>
  804a98:	00ffdfc4 	movi	r3,-129
  804a9c:	9d84b03a 	or	r2,r19,r22
  804aa0:	90e4703a 	and	r18,r18,r3
  804aa4:	103c6b26 	beq	r2,zero,803c54 <__alt_mem_onchip_mem+0xff783c54>
  804aa8:	0039883a 	mov	fp,zero
  804aac:	003e7406 	br	804480 <__alt_mem_onchip_mem+0xff784480>
  804ab0:	9080040c 	andi	r2,r18,16
  804ab4:	1001b326 	beq	r2,zero,805184 <___vfprintf_internal_r+0x18ac>
  804ab8:	d9002d17 	ldw	r4,180(sp)
  804abc:	d9402917 	ldw	r5,164(sp)
  804ac0:	d8002785 	stb	zero,158(sp)
  804ac4:	20800104 	addi	r2,r4,4
  804ac8:	24c00017 	ldw	r19,0(r4)
  804acc:	002d883a 	mov	r22,zero
  804ad0:	2801b516 	blt	r5,zero,8051a8 <___vfprintf_internal_r+0x18d0>
  804ad4:	00ffdfc4 	movi	r3,-129
  804ad8:	d8802d15 	stw	r2,180(sp)
  804adc:	90e4703a 	and	r18,r18,r3
  804ae0:	983d2726 	beq	r19,zero,803f80 <__alt_mem_onchip_mem+0xff783f80>
  804ae4:	0039883a 	mov	fp,zero
  804ae8:	003d2a06 	br	803f94 <__alt_mem_onchip_mem+0xff783f94>
  804aec:	dc402617 	ldw	r17,152(sp)
  804af0:	0441d30e 	bge	zero,r17,805240 <___vfprintf_internal_r+0x1968>
  804af4:	dc403217 	ldw	r17,200(sp)
  804af8:	d8803317 	ldw	r2,204(sp)
  804afc:	1440010e 	bge	r2,r17,804b04 <___vfprintf_internal_r+0x122c>
  804b00:	1023883a 	mov	r17,r2
  804b04:	04400a0e 	bge	zero,r17,804b30 <___vfprintf_internal_r+0x1258>
  804b08:	d8801f17 	ldw	r2,124(sp)
  804b0c:	1c47883a 	add	r3,r3,r17
  804b10:	44000015 	stw	r16,0(r8)
  804b14:	10800044 	addi	r2,r2,1
  804b18:	44400115 	stw	r17,4(r8)
  804b1c:	d8c02015 	stw	r3,128(sp)
  804b20:	d8801f15 	stw	r2,124(sp)
  804b24:	010001c4 	movi	r4,7
  804b28:	20826516 	blt	r4,r2,8054c0 <___vfprintf_internal_r+0x1be8>
  804b2c:	42000204 	addi	r8,r8,8
  804b30:	88026116 	blt	r17,zero,8054b8 <___vfprintf_internal_r+0x1be0>
  804b34:	d9003217 	ldw	r4,200(sp)
  804b38:	2463c83a 	sub	r17,r4,r17
  804b3c:	04407b0e 	bge	zero,r17,804d2c <___vfprintf_internal_r+0x1454>
  804b40:	05800404 	movi	r22,16
  804b44:	d8801f17 	ldw	r2,124(sp)
  804b48:	b4419d0e 	bge	r22,r17,8051c0 <___vfprintf_internal_r+0x18e8>
  804b4c:	01002074 	movhi	r4,129
  804b50:	210cf984 	addi	r4,r4,13286
  804b54:	d9002b15 	stw	r4,172(sp)
  804b58:	070001c4 	movi	fp,7
  804b5c:	dcc02c17 	ldw	r19,176(sp)
  804b60:	00000306 	br	804b70 <___vfprintf_internal_r+0x1298>
  804b64:	42000204 	addi	r8,r8,8
  804b68:	8c7ffc04 	addi	r17,r17,-16
  804b6c:	b441970e 	bge	r22,r17,8051cc <___vfprintf_internal_r+0x18f4>
  804b70:	18c00404 	addi	r3,r3,16
  804b74:	10800044 	addi	r2,r2,1
  804b78:	45000015 	stw	r20,0(r8)
  804b7c:	45800115 	stw	r22,4(r8)
  804b80:	d8c02015 	stw	r3,128(sp)
  804b84:	d8801f15 	stw	r2,124(sp)
  804b88:	e0bff60e 	bge	fp,r2,804b64 <__alt_mem_onchip_mem+0xff784b64>
  804b8c:	d9801e04 	addi	r6,sp,120
  804b90:	b80b883a 	mov	r5,r23
  804b94:	9809883a 	mov	r4,r19
  804b98:	080a2940 	call	80a294 <__sprint_r>
  804b9c:	103c501e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  804ba0:	d8c02017 	ldw	r3,128(sp)
  804ba4:	d8801f17 	ldw	r2,124(sp)
  804ba8:	da000404 	addi	r8,sp,16
  804bac:	003fee06 	br	804b68 <__alt_mem_onchip_mem+0xff784b68>
  804bb0:	d9002c17 	ldw	r4,176(sp)
  804bb4:	d9801e04 	addi	r6,sp,120
  804bb8:	b80b883a 	mov	r5,r23
  804bbc:	080a2940 	call	80a294 <__sprint_r>
  804bc0:	103c471e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  804bc4:	d8c02017 	ldw	r3,128(sp)
  804bc8:	df002787 	ldb	fp,158(sp)
  804bcc:	da000404 	addi	r8,sp,16
  804bd0:	003d5606 	br	80412c <__alt_mem_onchip_mem+0xff78412c>
  804bd4:	9080040c 	andi	r2,r18,16
  804bd8:	10016126 	beq	r2,zero,805160 <___vfprintf_internal_r+0x1888>
  804bdc:	d8802d17 	ldw	r2,180(sp)
  804be0:	14c00017 	ldw	r19,0(r2)
  804be4:	10800104 	addi	r2,r2,4
  804be8:	d8802d15 	stw	r2,180(sp)
  804bec:	982dd7fa 	srai	r22,r19,31
  804bf0:	b005883a 	mov	r2,r22
  804bf4:	003c8206 	br	803e00 <__alt_mem_onchip_mem+0xff783e00>
  804bf8:	9080040c 	andi	r2,r18,16
  804bfc:	10003526 	beq	r2,zero,804cd4 <___vfprintf_internal_r+0x13fc>
  804c00:	d9402d17 	ldw	r5,180(sp)
  804c04:	d8c02917 	ldw	r3,164(sp)
  804c08:	d8002785 	stb	zero,158(sp)
  804c0c:	28800104 	addi	r2,r5,4
  804c10:	2cc00017 	ldw	r19,0(r5)
  804c14:	002d883a 	mov	r22,zero
  804c18:	18003716 	blt	r3,zero,804cf8 <___vfprintf_internal_r+0x1420>
  804c1c:	00ffdfc4 	movi	r3,-129
  804c20:	d8802d15 	stw	r2,180(sp)
  804c24:	90e4703a 	and	r18,r18,r3
  804c28:	0039883a 	mov	fp,zero
  804c2c:	983df326 	beq	r19,zero,8043fc <__alt_mem_onchip_mem+0xff7843fc>
  804c30:	00800244 	movi	r2,9
  804c34:	14fc7b36 	bltu	r2,r19,803e24 <__alt_mem_onchip_mem+0xff783e24>
  804c38:	d8c02817 	ldw	r3,160(sp)
  804c3c:	dc001dc4 	addi	r16,sp,119
  804c40:	9cc00c04 	addi	r19,r19,48
  804c44:	1c07c83a 	sub	r3,r3,r16
  804c48:	dcc01dc5 	stb	r19,119(sp)
  804c4c:	d8c02e15 	stw	r3,184(sp)
  804c50:	003ce806 	br	803ff4 <__alt_mem_onchip_mem+0xff783ff4>
  804c54:	d8803317 	ldw	r2,204(sp)
  804c58:	143fffc4 	addi	r16,r2,-1
  804c5c:	043f4d0e 	bge	zero,r16,804994 <__alt_mem_onchip_mem+0xff784994>
  804c60:	07000404 	movi	fp,16
  804c64:	e400810e 	bge	fp,r16,804e6c <___vfprintf_internal_r+0x1594>
  804c68:	01402074 	movhi	r5,129
  804c6c:	294cf984 	addi	r5,r5,13286
  804c70:	d9402b15 	stw	r5,172(sp)
  804c74:	01c001c4 	movi	r7,7
  804c78:	dcc02c17 	ldw	r19,176(sp)
  804c7c:	00000306 	br	804c8c <___vfprintf_internal_r+0x13b4>
  804c80:	b5800204 	addi	r22,r22,8
  804c84:	843ffc04 	addi	r16,r16,-16
  804c88:	e4007b0e 	bge	fp,r16,804e78 <___vfprintf_internal_r+0x15a0>
  804c8c:	18c00404 	addi	r3,r3,16
  804c90:	8c400044 	addi	r17,r17,1
  804c94:	b5000015 	stw	r20,0(r22)
  804c98:	b7000115 	stw	fp,4(r22)
  804c9c:	d8c02015 	stw	r3,128(sp)
  804ca0:	dc401f15 	stw	r17,124(sp)
  804ca4:	3c7ff60e 	bge	r7,r17,804c80 <__alt_mem_onchip_mem+0xff784c80>
  804ca8:	d9801e04 	addi	r6,sp,120
  804cac:	b80b883a 	mov	r5,r23
  804cb0:	9809883a 	mov	r4,r19
  804cb4:	d9c03c15 	stw	r7,240(sp)
  804cb8:	080a2940 	call	80a294 <__sprint_r>
  804cbc:	d9c03c17 	ldw	r7,240(sp)
  804cc0:	103c071e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  804cc4:	d8c02017 	ldw	r3,128(sp)
  804cc8:	dc401f17 	ldw	r17,124(sp)
  804ccc:	dd800404 	addi	r22,sp,16
  804cd0:	003fec06 	br	804c84 <__alt_mem_onchip_mem+0xff784c84>
  804cd4:	9080100c 	andi	r2,r18,64
  804cd8:	d8002785 	stb	zero,158(sp)
  804cdc:	10010e26 	beq	r2,zero,805118 <___vfprintf_internal_r+0x1840>
  804ce0:	d9002d17 	ldw	r4,180(sp)
  804ce4:	d9402917 	ldw	r5,164(sp)
  804ce8:	002d883a 	mov	r22,zero
  804cec:	20800104 	addi	r2,r4,4
  804cf0:	24c0000b 	ldhu	r19,0(r4)
  804cf4:	283fc90e 	bge	r5,zero,804c1c <__alt_mem_onchip_mem+0xff784c1c>
  804cf8:	d8802d15 	stw	r2,180(sp)
  804cfc:	0039883a 	mov	fp,zero
  804d00:	9d84b03a 	or	r2,r19,r22
  804d04:	103c461e 	bne	r2,zero,803e20 <__alt_mem_onchip_mem+0xff783e20>
  804d08:	00800044 	movi	r2,1
  804d0c:	003e6c06 	br	8046c0 <__alt_mem_onchip_mem+0xff7846c0>
  804d10:	d9002c17 	ldw	r4,176(sp)
  804d14:	d9801e04 	addi	r6,sp,120
  804d18:	b80b883a 	mov	r5,r23
  804d1c:	080a2940 	call	80a294 <__sprint_r>
  804d20:	103bef1e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  804d24:	d8c02017 	ldw	r3,128(sp)
  804d28:	da000404 	addi	r8,sp,16
  804d2c:	d9003217 	ldw	r4,200(sp)
  804d30:	d8802617 	ldw	r2,152(sp)
  804d34:	d9403317 	ldw	r5,204(sp)
  804d38:	8123883a 	add	r17,r16,r4
  804d3c:	11400216 	blt	r2,r5,804d48 <___vfprintf_internal_r+0x1470>
  804d40:	9100004c 	andi	r4,r18,1
  804d44:	20000d26 	beq	r4,zero,804d7c <___vfprintf_internal_r+0x14a4>
  804d48:	d9003717 	ldw	r4,220(sp)
  804d4c:	d9403417 	ldw	r5,208(sp)
  804d50:	1907883a 	add	r3,r3,r4
  804d54:	d9001f17 	ldw	r4,124(sp)
  804d58:	41400015 	stw	r5,0(r8)
  804d5c:	d9403717 	ldw	r5,220(sp)
  804d60:	21000044 	addi	r4,r4,1
  804d64:	d8c02015 	stw	r3,128(sp)
  804d68:	41400115 	stw	r5,4(r8)
  804d6c:	d9001f15 	stw	r4,124(sp)
  804d70:	014001c4 	movi	r5,7
  804d74:	2901e816 	blt	r5,r4,805518 <___vfprintf_internal_r+0x1c40>
  804d78:	42000204 	addi	r8,r8,8
  804d7c:	d9003317 	ldw	r4,204(sp)
  804d80:	8121883a 	add	r16,r16,r4
  804d84:	2085c83a 	sub	r2,r4,r2
  804d88:	8461c83a 	sub	r16,r16,r17
  804d8c:	1400010e 	bge	r2,r16,804d94 <___vfprintf_internal_r+0x14bc>
  804d90:	1021883a 	mov	r16,r2
  804d94:	04000a0e 	bge	zero,r16,804dc0 <___vfprintf_internal_r+0x14e8>
  804d98:	d9001f17 	ldw	r4,124(sp)
  804d9c:	1c07883a 	add	r3,r3,r16
  804da0:	44400015 	stw	r17,0(r8)
  804da4:	21000044 	addi	r4,r4,1
  804da8:	44000115 	stw	r16,4(r8)
  804dac:	d8c02015 	stw	r3,128(sp)
  804db0:	d9001f15 	stw	r4,124(sp)
  804db4:	014001c4 	movi	r5,7
  804db8:	2901fb16 	blt	r5,r4,8055a8 <___vfprintf_internal_r+0x1cd0>
  804dbc:	42000204 	addi	r8,r8,8
  804dc0:	8001f716 	blt	r16,zero,8055a0 <___vfprintf_internal_r+0x1cc8>
  804dc4:	1421c83a 	sub	r16,r2,r16
  804dc8:	043d380e 	bge	zero,r16,8042ac <__alt_mem_onchip_mem+0xff7842ac>
  804dcc:	04400404 	movi	r17,16
  804dd0:	d8801f17 	ldw	r2,124(sp)
  804dd4:	8c3efb0e 	bge	r17,r16,8049c4 <__alt_mem_onchip_mem+0xff7849c4>
  804dd8:	01402074 	movhi	r5,129
  804ddc:	294cf984 	addi	r5,r5,13286
  804de0:	d9402b15 	stw	r5,172(sp)
  804de4:	058001c4 	movi	r22,7
  804de8:	dcc02c17 	ldw	r19,176(sp)
  804dec:	00000306 	br	804dfc <___vfprintf_internal_r+0x1524>
  804df0:	42000204 	addi	r8,r8,8
  804df4:	843ffc04 	addi	r16,r16,-16
  804df8:	8c3ef50e 	bge	r17,r16,8049d0 <__alt_mem_onchip_mem+0xff7849d0>
  804dfc:	18c00404 	addi	r3,r3,16
  804e00:	10800044 	addi	r2,r2,1
  804e04:	45000015 	stw	r20,0(r8)
  804e08:	44400115 	stw	r17,4(r8)
  804e0c:	d8c02015 	stw	r3,128(sp)
  804e10:	d8801f15 	stw	r2,124(sp)
  804e14:	b0bff60e 	bge	r22,r2,804df0 <__alt_mem_onchip_mem+0xff784df0>
  804e18:	d9801e04 	addi	r6,sp,120
  804e1c:	b80b883a 	mov	r5,r23
  804e20:	9809883a 	mov	r4,r19
  804e24:	080a2940 	call	80a294 <__sprint_r>
  804e28:	103bad1e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  804e2c:	d8c02017 	ldw	r3,128(sp)
  804e30:	d8801f17 	ldw	r2,124(sp)
  804e34:	da000404 	addi	r8,sp,16
  804e38:	003fee06 	br	804df4 <__alt_mem_onchip_mem+0xff784df4>
  804e3c:	9088703a 	and	r4,r18,r2
  804e40:	203eab1e 	bne	r4,zero,8048f0 <__alt_mem_onchip_mem+0xff7848f0>
  804e44:	dc401f17 	ldw	r17,124(sp)
  804e48:	40800115 	stw	r2,4(r8)
  804e4c:	44000015 	stw	r16,0(r8)
  804e50:	8c400044 	addi	r17,r17,1
  804e54:	d8c02015 	stw	r3,128(sp)
  804e58:	dc401f15 	stw	r17,124(sp)
  804e5c:	008001c4 	movi	r2,7
  804e60:	14400e16 	blt	r2,r17,804e9c <___vfprintf_internal_r+0x15c4>
  804e64:	45800204 	addi	r22,r8,8
  804e68:	003eca06 	br	804994 <__alt_mem_onchip_mem+0xff784994>
  804e6c:	01002074 	movhi	r4,129
  804e70:	210cf984 	addi	r4,r4,13286
  804e74:	d9002b15 	stw	r4,172(sp)
  804e78:	d8802b17 	ldw	r2,172(sp)
  804e7c:	1c07883a 	add	r3,r3,r16
  804e80:	8c400044 	addi	r17,r17,1
  804e84:	b0800015 	stw	r2,0(r22)
  804e88:	b4000115 	stw	r16,4(r22)
  804e8c:	d8c02015 	stw	r3,128(sp)
  804e90:	dc401f15 	stw	r17,124(sp)
  804e94:	008001c4 	movi	r2,7
  804e98:	147ebd0e 	bge	r2,r17,804990 <__alt_mem_onchip_mem+0xff784990>
  804e9c:	d9002c17 	ldw	r4,176(sp)
  804ea0:	d9801e04 	addi	r6,sp,120
  804ea4:	b80b883a 	mov	r5,r23
  804ea8:	080a2940 	call	80a294 <__sprint_r>
  804eac:	103b8c1e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  804eb0:	d8c02017 	ldw	r3,128(sp)
  804eb4:	dc401f17 	ldw	r17,124(sp)
  804eb8:	dd800404 	addi	r22,sp,16
  804ebc:	003eb506 	br	804994 <__alt_mem_onchip_mem+0xff784994>
  804ec0:	d9002c17 	ldw	r4,176(sp)
  804ec4:	d9801e04 	addi	r6,sp,120
  804ec8:	b80b883a 	mov	r5,r23
  804ecc:	080a2940 	call	80a294 <__sprint_r>
  804ed0:	103b831e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  804ed4:	d8c02017 	ldw	r3,128(sp)
  804ed8:	dc401f17 	ldw	r17,124(sp)
  804edc:	da000404 	addi	r8,sp,16
  804ee0:	003e8d06 	br	804918 <__alt_mem_onchip_mem+0xff784918>
  804ee4:	d9002c17 	ldw	r4,176(sp)
  804ee8:	d9801e04 	addi	r6,sp,120
  804eec:	b80b883a 	mov	r5,r23
  804ef0:	080a2940 	call	80a294 <__sprint_r>
  804ef4:	103b7a1e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  804ef8:	d8c02017 	ldw	r3,128(sp)
  804efc:	dc401f17 	ldw	r17,124(sp)
  804f00:	dd800404 	addi	r22,sp,16
  804f04:	003e8f06 	br	804944 <__alt_mem_onchip_mem+0xff784944>
  804f08:	0027883a 	mov	r19,zero
  804f0c:	003f4a06 	br	804c38 <__alt_mem_onchip_mem+0xff784c38>
  804f10:	d9002c17 	ldw	r4,176(sp)
  804f14:	d9801e04 	addi	r6,sp,120
  804f18:	b80b883a 	mov	r5,r23
  804f1c:	080a2940 	call	80a294 <__sprint_r>
  804f20:	103b6f1e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  804f24:	d8c02017 	ldw	r3,128(sp)
  804f28:	da000404 	addi	r8,sp,16
  804f2c:	003c9d06 	br	8041a4 <__alt_mem_onchip_mem+0xff7841a4>
  804f30:	04e7c83a 	sub	r19,zero,r19
  804f34:	9804c03a 	cmpne	r2,r19,zero
  804f38:	05adc83a 	sub	r22,zero,r22
  804f3c:	b0adc83a 	sub	r22,r22,r2
  804f40:	d8802917 	ldw	r2,164(sp)
  804f44:	07000b44 	movi	fp,45
  804f48:	df002785 	stb	fp,158(sp)
  804f4c:	10017b16 	blt	r2,zero,80553c <___vfprintf_internal_r+0x1c64>
  804f50:	00bfdfc4 	movi	r2,-129
  804f54:	90a4703a 	and	r18,r18,r2
  804f58:	003bb106 	br	803e20 <__alt_mem_onchip_mem+0xff783e20>
  804f5c:	d9003617 	ldw	r4,216(sp)
  804f60:	d9403817 	ldw	r5,224(sp)
  804f64:	da003d15 	stw	r8,244(sp)
  804f68:	0809fb00 	call	809fb0 <__fpclassifyd>
  804f6c:	da003d17 	ldw	r8,244(sp)
  804f70:	1000f026 	beq	r2,zero,805334 <___vfprintf_internal_r+0x1a5c>
  804f74:	d9002917 	ldw	r4,164(sp)
  804f78:	05bff7c4 	movi	r22,-33
  804f7c:	00bfffc4 	movi	r2,-1
  804f80:	8dac703a 	and	r22,r17,r22
  804f84:	20820026 	beq	r4,r2,805788 <___vfprintf_internal_r+0x1eb0>
  804f88:	008011c4 	movi	r2,71
  804f8c:	b081f726 	beq	r22,r2,80576c <___vfprintf_internal_r+0x1e94>
  804f90:	d9003817 	ldw	r4,224(sp)
  804f94:	90c04014 	ori	r3,r18,256
  804f98:	d8c02b15 	stw	r3,172(sp)
  804f9c:	20021516 	blt	r4,zero,8057f4 <___vfprintf_internal_r+0x1f1c>
  804fa0:	dcc03817 	ldw	r19,224(sp)
  804fa4:	d8002a05 	stb	zero,168(sp)
  804fa8:	00801984 	movi	r2,102
  804fac:	8881f926 	beq	r17,r2,805794 <___vfprintf_internal_r+0x1ebc>
  804fb0:	00801184 	movi	r2,70
  804fb4:	88821c26 	beq	r17,r2,805828 <___vfprintf_internal_r+0x1f50>
  804fb8:	00801144 	movi	r2,69
  804fbc:	b081ef26 	beq	r22,r2,80577c <___vfprintf_internal_r+0x1ea4>
  804fc0:	d8c02917 	ldw	r3,164(sp)
  804fc4:	d8802104 	addi	r2,sp,132
  804fc8:	d8800315 	stw	r2,12(sp)
  804fcc:	d9403617 	ldw	r5,216(sp)
  804fd0:	d8802504 	addi	r2,sp,148
  804fd4:	d9002c17 	ldw	r4,176(sp)
  804fd8:	d8800215 	stw	r2,8(sp)
  804fdc:	d8802604 	addi	r2,sp,152
  804fe0:	d8c00015 	stw	r3,0(sp)
  804fe4:	d8800115 	stw	r2,4(sp)
  804fe8:	01c00084 	movi	r7,2
  804fec:	980d883a 	mov	r6,r19
  804ff0:	d8c03c15 	stw	r3,240(sp)
  804ff4:	da003d15 	stw	r8,244(sp)
  804ff8:	08061080 	call	806108 <_dtoa_r>
  804ffc:	1021883a 	mov	r16,r2
  805000:	008019c4 	movi	r2,103
  805004:	d8c03c17 	ldw	r3,240(sp)
  805008:	da003d17 	ldw	r8,244(sp)
  80500c:	88817126 	beq	r17,r2,8055d4 <___vfprintf_internal_r+0x1cfc>
  805010:	008011c4 	movi	r2,71
  805014:	88829226 	beq	r17,r2,805a60 <___vfprintf_internal_r+0x2188>
  805018:	80f9883a 	add	fp,r16,r3
  80501c:	d9003617 	ldw	r4,216(sp)
  805020:	000d883a 	mov	r6,zero
  805024:	000f883a 	mov	r7,zero
  805028:	980b883a 	mov	r5,r19
  80502c:	da003d15 	stw	r8,244(sp)
  805030:	080da8c0 	call	80da8c <__eqdf2>
  805034:	da003d17 	ldw	r8,244(sp)
  805038:	10018d26 	beq	r2,zero,805670 <___vfprintf_internal_r+0x1d98>
  80503c:	d8802117 	ldw	r2,132(sp)
  805040:	1700062e 	bgeu	r2,fp,80505c <___vfprintf_internal_r+0x1784>
  805044:	01000c04 	movi	r4,48
  805048:	10c00044 	addi	r3,r2,1
  80504c:	d8c02115 	stw	r3,132(sp)
  805050:	11000005 	stb	r4,0(r2)
  805054:	d8802117 	ldw	r2,132(sp)
  805058:	173ffb36 	bltu	r2,fp,805048 <__alt_mem_onchip_mem+0xff785048>
  80505c:	1405c83a 	sub	r2,r2,r16
  805060:	d8803315 	stw	r2,204(sp)
  805064:	008011c4 	movi	r2,71
  805068:	b0817626 	beq	r22,r2,805644 <___vfprintf_internal_r+0x1d6c>
  80506c:	00801944 	movi	r2,101
  805070:	1442810e 	bge	r2,r17,805a78 <___vfprintf_internal_r+0x21a0>
  805074:	d8c02617 	ldw	r3,152(sp)
  805078:	00801984 	movi	r2,102
  80507c:	d8c03215 	stw	r3,200(sp)
  805080:	8881fe26 	beq	r17,r2,80587c <___vfprintf_internal_r+0x1fa4>
  805084:	d8c03217 	ldw	r3,200(sp)
  805088:	d9003317 	ldw	r4,204(sp)
  80508c:	1901dd16 	blt	r3,r4,805804 <___vfprintf_internal_r+0x1f2c>
  805090:	9480004c 	andi	r18,r18,1
  805094:	90022b1e 	bne	r18,zero,805944 <___vfprintf_internal_r+0x206c>
  805098:	1805883a 	mov	r2,r3
  80509c:	18028016 	blt	r3,zero,805aa0 <___vfprintf_internal_r+0x21c8>
  8050a0:	d8c03217 	ldw	r3,200(sp)
  8050a4:	044019c4 	movi	r17,103
  8050a8:	d8c02e15 	stw	r3,184(sp)
  8050ac:	df002a07 	ldb	fp,168(sp)
  8050b0:	e001531e 	bne	fp,zero,805600 <___vfprintf_internal_r+0x1d28>
  8050b4:	df002783 	ldbu	fp,158(sp)
  8050b8:	d8802a15 	stw	r2,168(sp)
  8050bc:	dc802b17 	ldw	r18,172(sp)
  8050c0:	d8002915 	stw	zero,164(sp)
  8050c4:	003bd106 	br	80400c <__alt_mem_onchip_mem+0xff78400c>
  8050c8:	d8802d17 	ldw	r2,180(sp)
  8050cc:	d8c02d17 	ldw	r3,180(sp)
  8050d0:	d9002d17 	ldw	r4,180(sp)
  8050d4:	10800017 	ldw	r2,0(r2)
  8050d8:	18c00117 	ldw	r3,4(r3)
  8050dc:	21000204 	addi	r4,r4,8
  8050e0:	d8803615 	stw	r2,216(sp)
  8050e4:	d8c03815 	stw	r3,224(sp)
  8050e8:	d9002d15 	stw	r4,180(sp)
  8050ec:	003b7506 	br	803ec4 <__alt_mem_onchip_mem+0xff783ec4>
  8050f0:	ac400007 	ldb	r17,0(r21)
  8050f4:	003a5906 	br	803a5c <__alt_mem_onchip_mem+0xff783a5c>
  8050f8:	9080100c 	andi	r2,r18,64
  8050fc:	1000a826 	beq	r2,zero,8053a0 <___vfprintf_internal_r+0x1ac8>
  805100:	d9002d17 	ldw	r4,180(sp)
  805104:	002d883a 	mov	r22,zero
  805108:	24c0000b 	ldhu	r19,0(r4)
  80510c:	21000104 	addi	r4,r4,4
  805110:	d9002d15 	stw	r4,180(sp)
  805114:	003ccb06 	br	804444 <__alt_mem_onchip_mem+0xff784444>
  805118:	d8c02d17 	ldw	r3,180(sp)
  80511c:	d9002917 	ldw	r4,164(sp)
  805120:	002d883a 	mov	r22,zero
  805124:	18800104 	addi	r2,r3,4
  805128:	1cc00017 	ldw	r19,0(r3)
  80512c:	203ebb0e 	bge	r4,zero,804c1c <__alt_mem_onchip_mem+0xff784c1c>
  805130:	003ef106 	br	804cf8 <__alt_mem_onchip_mem+0xff784cf8>
  805134:	9080040c 	andi	r2,r18,16
  805138:	1000921e 	bne	r2,zero,805384 <___vfprintf_internal_r+0x1aac>
  80513c:	9480100c 	andi	r18,r18,64
  805140:	90013926 	beq	r18,zero,805628 <___vfprintf_internal_r+0x1d50>
  805144:	d9002d17 	ldw	r4,180(sp)
  805148:	d9402f17 	ldw	r5,188(sp)
  80514c:	20800017 	ldw	r2,0(r4)
  805150:	21000104 	addi	r4,r4,4
  805154:	d9002d15 	stw	r4,180(sp)
  805158:	1140000d 	sth	r5,0(r2)
  80515c:	003a1606 	br	8039b8 <__alt_mem_onchip_mem+0xff7839b8>
  805160:	9080100c 	andi	r2,r18,64
  805164:	10008026 	beq	r2,zero,805368 <___vfprintf_internal_r+0x1a90>
  805168:	d8c02d17 	ldw	r3,180(sp)
  80516c:	1cc0000f 	ldh	r19,0(r3)
  805170:	18c00104 	addi	r3,r3,4
  805174:	d8c02d15 	stw	r3,180(sp)
  805178:	982dd7fa 	srai	r22,r19,31
  80517c:	b005883a 	mov	r2,r22
  805180:	003b1f06 	br	803e00 <__alt_mem_onchip_mem+0xff783e00>
  805184:	9080100c 	andi	r2,r18,64
  805188:	d8002785 	stb	zero,158(sp)
  80518c:	10008a1e 	bne	r2,zero,8053b8 <___vfprintf_internal_r+0x1ae0>
  805190:	d9402d17 	ldw	r5,180(sp)
  805194:	d8c02917 	ldw	r3,164(sp)
  805198:	002d883a 	mov	r22,zero
  80519c:	28800104 	addi	r2,r5,4
  8051a0:	2cc00017 	ldw	r19,0(r5)
  8051a4:	183e4b0e 	bge	r3,zero,804ad4 <__alt_mem_onchip_mem+0xff784ad4>
  8051a8:	9d86b03a 	or	r3,r19,r22
  8051ac:	d8802d15 	stw	r2,180(sp)
  8051b0:	183e4c1e 	bne	r3,zero,804ae4 <__alt_mem_onchip_mem+0xff784ae4>
  8051b4:	0039883a 	mov	fp,zero
  8051b8:	0005883a 	mov	r2,zero
  8051bc:	003d4006 	br	8046c0 <__alt_mem_onchip_mem+0xff7846c0>
  8051c0:	01402074 	movhi	r5,129
  8051c4:	294cf984 	addi	r5,r5,13286
  8051c8:	d9402b15 	stw	r5,172(sp)
  8051cc:	d9402b17 	ldw	r5,172(sp)
  8051d0:	1c47883a 	add	r3,r3,r17
  8051d4:	10800044 	addi	r2,r2,1
  8051d8:	41400015 	stw	r5,0(r8)
  8051dc:	44400115 	stw	r17,4(r8)
  8051e0:	d8c02015 	stw	r3,128(sp)
  8051e4:	d8801f15 	stw	r2,124(sp)
  8051e8:	010001c4 	movi	r4,7
  8051ec:	20bec816 	blt	r4,r2,804d10 <__alt_mem_onchip_mem+0xff784d10>
  8051f0:	42000204 	addi	r8,r8,8
  8051f4:	003ecd06 	br	804d2c <__alt_mem_onchip_mem+0xff784d2c>
  8051f8:	d9002917 	ldw	r4,164(sp)
  8051fc:	d8002785 	stb	zero,158(sp)
  805200:	203d2d16 	blt	r4,zero,8046b8 <__alt_mem_onchip_mem+0xff7846b8>
  805204:	00bfdfc4 	movi	r2,-129
  805208:	90a4703a 	and	r18,r18,r2
  80520c:	003a9106 	br	803c54 <__alt_mem_onchip_mem+0xff783c54>
  805210:	01002074 	movhi	r4,129
  805214:	210cf984 	addi	r4,r4,13286
  805218:	d9002b15 	stw	r4,172(sp)
  80521c:	003c0c06 	br	804250 <__alt_mem_onchip_mem+0xff784250>
  805220:	d9002c17 	ldw	r4,176(sp)
  805224:	d9801e04 	addi	r6,sp,120
  805228:	b80b883a 	mov	r5,r23
  80522c:	080a2940 	call	80a294 <__sprint_r>
  805230:	103aab1e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  805234:	d8c02017 	ldw	r3,128(sp)
  805238:	da000404 	addi	r8,sp,16
  80523c:	003d4106 	br	804744 <__alt_mem_onchip_mem+0xff784744>
  805240:	d8801f17 	ldw	r2,124(sp)
  805244:	01402074 	movhi	r5,129
  805248:	01000044 	movi	r4,1
  80524c:	18c00044 	addi	r3,r3,1
  805250:	10800044 	addi	r2,r2,1
  805254:	294cf904 	addi	r5,r5,13284
  805258:	41000115 	stw	r4,4(r8)
  80525c:	41400015 	stw	r5,0(r8)
  805260:	d8c02015 	stw	r3,128(sp)
  805264:	d8801f15 	stw	r2,124(sp)
  805268:	010001c4 	movi	r4,7
  80526c:	20805c16 	blt	r4,r2,8053e0 <___vfprintf_internal_r+0x1b08>
  805270:	42000204 	addi	r8,r8,8
  805274:	8800041e 	bne	r17,zero,805288 <___vfprintf_internal_r+0x19b0>
  805278:	d8803317 	ldw	r2,204(sp)
  80527c:	1000021e 	bne	r2,zero,805288 <___vfprintf_internal_r+0x19b0>
  805280:	9080004c 	andi	r2,r18,1
  805284:	103c0926 	beq	r2,zero,8042ac <__alt_mem_onchip_mem+0xff7842ac>
  805288:	d9003717 	ldw	r4,220(sp)
  80528c:	d8801f17 	ldw	r2,124(sp)
  805290:	d9403417 	ldw	r5,208(sp)
  805294:	20c7883a 	add	r3,r4,r3
  805298:	10800044 	addi	r2,r2,1
  80529c:	41000115 	stw	r4,4(r8)
  8052a0:	41400015 	stw	r5,0(r8)
  8052a4:	d8c02015 	stw	r3,128(sp)
  8052a8:	d8801f15 	stw	r2,124(sp)
  8052ac:	010001c4 	movi	r4,7
  8052b0:	20812116 	blt	r4,r2,805738 <___vfprintf_internal_r+0x1e60>
  8052b4:	42000204 	addi	r8,r8,8
  8052b8:	0463c83a 	sub	r17,zero,r17
  8052bc:	0440730e 	bge	zero,r17,80548c <___vfprintf_internal_r+0x1bb4>
  8052c0:	05800404 	movi	r22,16
  8052c4:	b440860e 	bge	r22,r17,8054e0 <___vfprintf_internal_r+0x1c08>
  8052c8:	01402074 	movhi	r5,129
  8052cc:	294cf984 	addi	r5,r5,13286
  8052d0:	d9402b15 	stw	r5,172(sp)
  8052d4:	070001c4 	movi	fp,7
  8052d8:	dcc02c17 	ldw	r19,176(sp)
  8052dc:	00000306 	br	8052ec <___vfprintf_internal_r+0x1a14>
  8052e0:	42000204 	addi	r8,r8,8
  8052e4:	8c7ffc04 	addi	r17,r17,-16
  8052e8:	b440800e 	bge	r22,r17,8054ec <___vfprintf_internal_r+0x1c14>
  8052ec:	18c00404 	addi	r3,r3,16
  8052f0:	10800044 	addi	r2,r2,1
  8052f4:	45000015 	stw	r20,0(r8)
  8052f8:	45800115 	stw	r22,4(r8)
  8052fc:	d8c02015 	stw	r3,128(sp)
  805300:	d8801f15 	stw	r2,124(sp)
  805304:	e0bff60e 	bge	fp,r2,8052e0 <__alt_mem_onchip_mem+0xff7852e0>
  805308:	d9801e04 	addi	r6,sp,120
  80530c:	b80b883a 	mov	r5,r23
  805310:	9809883a 	mov	r4,r19
  805314:	080a2940 	call	80a294 <__sprint_r>
  805318:	103a711e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  80531c:	d8c02017 	ldw	r3,128(sp)
  805320:	d8801f17 	ldw	r2,124(sp)
  805324:	da000404 	addi	r8,sp,16
  805328:	003fee06 	br	8052e4 <__alt_mem_onchip_mem+0xff7852e4>
  80532c:	00bfffc4 	movi	r2,-1
  805330:	003a6f06 	br	803cf0 <__alt_mem_onchip_mem+0xff783cf0>
  805334:	008011c4 	movi	r2,71
  805338:	1440b816 	blt	r2,r17,80561c <___vfprintf_internal_r+0x1d44>
  80533c:	04002074 	movhi	r16,129
  805340:	840ceb04 	addi	r16,r16,13228
  805344:	00c000c4 	movi	r3,3
  805348:	00bfdfc4 	movi	r2,-129
  80534c:	d8c02a15 	stw	r3,168(sp)
  805350:	90a4703a 	and	r18,r18,r2
  805354:	df002783 	ldbu	fp,158(sp)
  805358:	d8c02e15 	stw	r3,184(sp)
  80535c:	d8002915 	stw	zero,164(sp)
  805360:	d8003215 	stw	zero,200(sp)
  805364:	003b2906 	br	80400c <__alt_mem_onchip_mem+0xff78400c>
  805368:	d9002d17 	ldw	r4,180(sp)
  80536c:	24c00017 	ldw	r19,0(r4)
  805370:	21000104 	addi	r4,r4,4
  805374:	d9002d15 	stw	r4,180(sp)
  805378:	982dd7fa 	srai	r22,r19,31
  80537c:	b005883a 	mov	r2,r22
  805380:	003a9f06 	br	803e00 <__alt_mem_onchip_mem+0xff783e00>
  805384:	d9402d17 	ldw	r5,180(sp)
  805388:	d8c02f17 	ldw	r3,188(sp)
  80538c:	28800017 	ldw	r2,0(r5)
  805390:	29400104 	addi	r5,r5,4
  805394:	d9402d15 	stw	r5,180(sp)
  805398:	10c00015 	stw	r3,0(r2)
  80539c:	00398606 	br	8039b8 <__alt_mem_onchip_mem+0xff7839b8>
  8053a0:	d9402d17 	ldw	r5,180(sp)
  8053a4:	002d883a 	mov	r22,zero
  8053a8:	2cc00017 	ldw	r19,0(r5)
  8053ac:	29400104 	addi	r5,r5,4
  8053b0:	d9402d15 	stw	r5,180(sp)
  8053b4:	003c2306 	br	804444 <__alt_mem_onchip_mem+0xff784444>
  8053b8:	d8c02d17 	ldw	r3,180(sp)
  8053bc:	d9002917 	ldw	r4,164(sp)
  8053c0:	002d883a 	mov	r22,zero
  8053c4:	18800104 	addi	r2,r3,4
  8053c8:	1cc0000b 	ldhu	r19,0(r3)
  8053cc:	203dc10e 	bge	r4,zero,804ad4 <__alt_mem_onchip_mem+0xff784ad4>
  8053d0:	003f7506 	br	8051a8 <__alt_mem_onchip_mem+0xff7851a8>
  8053d4:	04002074 	movhi	r16,129
  8053d8:	840ce904 	addi	r16,r16,13220
  8053dc:	003acc06 	br	803f10 <__alt_mem_onchip_mem+0xff783f10>
  8053e0:	d9002c17 	ldw	r4,176(sp)
  8053e4:	d9801e04 	addi	r6,sp,120
  8053e8:	b80b883a 	mov	r5,r23
  8053ec:	080a2940 	call	80a294 <__sprint_r>
  8053f0:	103a3b1e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  8053f4:	dc402617 	ldw	r17,152(sp)
  8053f8:	d8c02017 	ldw	r3,128(sp)
  8053fc:	da000404 	addi	r8,sp,16
  805400:	003f9c06 	br	805274 <__alt_mem_onchip_mem+0xff785274>
  805404:	ac400043 	ldbu	r17,1(r21)
  805408:	94800814 	ori	r18,r18,32
  80540c:	ad400044 	addi	r21,r21,1
  805410:	8c403fcc 	andi	r17,r17,255
  805414:	8c40201c 	xori	r17,r17,128
  805418:	8c7fe004 	addi	r17,r17,-128
  80541c:	00398f06 	br	803a5c <__alt_mem_onchip_mem+0xff783a5c>
  805420:	d8c02d15 	stw	r3,180(sp)
  805424:	0039883a 	mov	fp,zero
  805428:	003e3506 	br	804d00 <__alt_mem_onchip_mem+0xff784d00>
  80542c:	d9002c17 	ldw	r4,176(sp)
  805430:	d9801e04 	addi	r6,sp,120
  805434:	b80b883a 	mov	r5,r23
  805438:	080a2940 	call	80a294 <__sprint_r>
  80543c:	103a281e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  805440:	d8c02017 	ldw	r3,128(sp)
  805444:	da000404 	addi	r8,sp,16
  805448:	003cd006 	br	80478c <__alt_mem_onchip_mem+0xff78478c>
  80544c:	8009883a 	mov	r4,r16
  805450:	da003d15 	stw	r8,244(sp)
  805454:	080a1000 	call	80a100 <strlen>
  805458:	d8802e15 	stw	r2,184(sp)
  80545c:	da003d17 	ldw	r8,244(sp)
  805460:	103c340e 	bge	r2,zero,804534 <__alt_mem_onchip_mem+0xff784534>
  805464:	0005883a 	mov	r2,zero
  805468:	003c3206 	br	804534 <__alt_mem_onchip_mem+0xff784534>
  80546c:	d9002c17 	ldw	r4,176(sp)
  805470:	d9801e04 	addi	r6,sp,120
  805474:	b80b883a 	mov	r5,r23
  805478:	080a2940 	call	80a294 <__sprint_r>
  80547c:	103a181e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  805480:	d8c02017 	ldw	r3,128(sp)
  805484:	d8801f17 	ldw	r2,124(sp)
  805488:	da000404 	addi	r8,sp,16
  80548c:	d9403317 	ldw	r5,204(sp)
  805490:	10800044 	addi	r2,r2,1
  805494:	44000015 	stw	r16,0(r8)
  805498:	28c7883a 	add	r3,r5,r3
  80549c:	003b7d06 	br	804294 <__alt_mem_onchip_mem+0xff784294>
  8054a0:	01002074 	movhi	r4,129
  8054a4:	210cfd84 	addi	r4,r4,13302
  8054a8:	d9003515 	stw	r4,212(sp)
  8054ac:	003b1406 	br	804100 <__alt_mem_onchip_mem+0xff784100>
  8054b0:	013fffc4 	movi	r4,-1
  8054b4:	003a3506 	br	803d8c <__alt_mem_onchip_mem+0xff783d8c>
  8054b8:	0023883a 	mov	r17,zero
  8054bc:	003d9d06 	br	804b34 <__alt_mem_onchip_mem+0xff784b34>
  8054c0:	d9002c17 	ldw	r4,176(sp)
  8054c4:	d9801e04 	addi	r6,sp,120
  8054c8:	b80b883a 	mov	r5,r23
  8054cc:	080a2940 	call	80a294 <__sprint_r>
  8054d0:	103a031e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  8054d4:	d8c02017 	ldw	r3,128(sp)
  8054d8:	da000404 	addi	r8,sp,16
  8054dc:	003d9406 	br	804b30 <__alt_mem_onchip_mem+0xff784b30>
  8054e0:	01002074 	movhi	r4,129
  8054e4:	210cf984 	addi	r4,r4,13286
  8054e8:	d9002b15 	stw	r4,172(sp)
  8054ec:	d9002b17 	ldw	r4,172(sp)
  8054f0:	1c47883a 	add	r3,r3,r17
  8054f4:	10800044 	addi	r2,r2,1
  8054f8:	41000015 	stw	r4,0(r8)
  8054fc:	44400115 	stw	r17,4(r8)
  805500:	d8c02015 	stw	r3,128(sp)
  805504:	d8801f15 	stw	r2,124(sp)
  805508:	010001c4 	movi	r4,7
  80550c:	20bfd716 	blt	r4,r2,80546c <__alt_mem_onchip_mem+0xff78546c>
  805510:	42000204 	addi	r8,r8,8
  805514:	003fdd06 	br	80548c <__alt_mem_onchip_mem+0xff78548c>
  805518:	d9002c17 	ldw	r4,176(sp)
  80551c:	d9801e04 	addi	r6,sp,120
  805520:	b80b883a 	mov	r5,r23
  805524:	080a2940 	call	80a294 <__sprint_r>
  805528:	1039ed1e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  80552c:	d8802617 	ldw	r2,152(sp)
  805530:	d8c02017 	ldw	r3,128(sp)
  805534:	da000404 	addi	r8,sp,16
  805538:	003e1006 	br	804d7c <__alt_mem_onchip_mem+0xff784d7c>
  80553c:	00800044 	movi	r2,1
  805540:	10803fcc 	andi	r2,r2,255
  805544:	00c00044 	movi	r3,1
  805548:	10fa3526 	beq	r2,r3,803e20 <__alt_mem_onchip_mem+0xff783e20>
  80554c:	00c00084 	movi	r3,2
  805550:	10fbcb26 	beq	r2,r3,804480 <__alt_mem_onchip_mem+0xff784480>
  805554:	003a8f06 	br	803f94 <__alt_mem_onchip_mem+0xff783f94>
  805558:	01002074 	movhi	r4,129
  80555c:	210cfd84 	addi	r4,r4,13302
  805560:	d9003515 	stw	r4,212(sp)
  805564:	003b7606 	br	804340 <__alt_mem_onchip_mem+0xff784340>
  805568:	d8802917 	ldw	r2,164(sp)
  80556c:	00c00184 	movi	r3,6
  805570:	1880012e 	bgeu	r3,r2,805578 <___vfprintf_internal_r+0x1ca0>
  805574:	1805883a 	mov	r2,r3
  805578:	d8802e15 	stw	r2,184(sp)
  80557c:	1000ef16 	blt	r2,zero,80593c <___vfprintf_internal_r+0x2064>
  805580:	04002074 	movhi	r16,129
  805584:	d8802a15 	stw	r2,168(sp)
  805588:	dcc02d15 	stw	r19,180(sp)
  80558c:	d8002915 	stw	zero,164(sp)
  805590:	d8003215 	stw	zero,200(sp)
  805594:	840cf704 	addi	r16,r16,13276
  805598:	0039883a 	mov	fp,zero
  80559c:	003aa206 	br	804028 <__alt_mem_onchip_mem+0xff784028>
  8055a0:	0021883a 	mov	r16,zero
  8055a4:	003e0706 	br	804dc4 <__alt_mem_onchip_mem+0xff784dc4>
  8055a8:	d9002c17 	ldw	r4,176(sp)
  8055ac:	d9801e04 	addi	r6,sp,120
  8055b0:	b80b883a 	mov	r5,r23
  8055b4:	080a2940 	call	80a294 <__sprint_r>
  8055b8:	1039c91e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  8055bc:	d8802617 	ldw	r2,152(sp)
  8055c0:	d9403317 	ldw	r5,204(sp)
  8055c4:	d8c02017 	ldw	r3,128(sp)
  8055c8:	da000404 	addi	r8,sp,16
  8055cc:	2885c83a 	sub	r2,r5,r2
  8055d0:	003dfb06 	br	804dc0 <__alt_mem_onchip_mem+0xff784dc0>
  8055d4:	9080004c 	andi	r2,r18,1
  8055d8:	103e8f1e 	bne	r2,zero,805018 <__alt_mem_onchip_mem+0xff785018>
  8055dc:	d8802117 	ldw	r2,132(sp)
  8055e0:	003e9e06 	br	80505c <__alt_mem_onchip_mem+0xff78505c>
  8055e4:	1025883a 	mov	r18,r2
  8055e8:	0039883a 	mov	fp,zero
  8055ec:	00800084 	movi	r2,2
  8055f0:	003fd306 	br	805540 <__alt_mem_onchip_mem+0xff785540>
  8055f4:	07000b44 	movi	fp,45
  8055f8:	df002785 	stb	fp,158(sp)
  8055fc:	003a4006 	br	803f00 <__alt_mem_onchip_mem+0xff783f00>
  805600:	00c00b44 	movi	r3,45
  805604:	d8c02785 	stb	r3,158(sp)
  805608:	d8802a15 	stw	r2,168(sp)
  80560c:	dc802b17 	ldw	r18,172(sp)
  805610:	d8002915 	stw	zero,164(sp)
  805614:	07000b44 	movi	fp,45
  805618:	003a8006 	br	80401c <__alt_mem_onchip_mem+0xff78401c>
  80561c:	04002074 	movhi	r16,129
  805620:	840cec04 	addi	r16,r16,13232
  805624:	003f4706 	br	805344 <__alt_mem_onchip_mem+0xff785344>
  805628:	d8c02d17 	ldw	r3,180(sp)
  80562c:	d9002f17 	ldw	r4,188(sp)
  805630:	18800017 	ldw	r2,0(r3)
  805634:	18c00104 	addi	r3,r3,4
  805638:	d8c02d15 	stw	r3,180(sp)
  80563c:	11000015 	stw	r4,0(r2)
  805640:	0038dd06 	br	8039b8 <__alt_mem_onchip_mem+0xff7839b8>
  805644:	dd802617 	ldw	r22,152(sp)
  805648:	00bfff44 	movi	r2,-3
  80564c:	b0801c16 	blt	r22,r2,8056c0 <___vfprintf_internal_r+0x1de8>
  805650:	d9402917 	ldw	r5,164(sp)
  805654:	2d801a16 	blt	r5,r22,8056c0 <___vfprintf_internal_r+0x1de8>
  805658:	dd803215 	stw	r22,200(sp)
  80565c:	003e8906 	br	805084 <__alt_mem_onchip_mem+0xff785084>
  805660:	01002074 	movhi	r4,129
  805664:	210cf984 	addi	r4,r4,13286
  805668:	d9002b15 	stw	r4,172(sp)
  80566c:	003c9106 	br	8048b4 <__alt_mem_onchip_mem+0xff7848b4>
  805670:	e005883a 	mov	r2,fp
  805674:	003e7906 	br	80505c <__alt_mem_onchip_mem+0xff78505c>
  805678:	d9402917 	ldw	r5,164(sp)
  80567c:	df002783 	ldbu	fp,158(sp)
  805680:	dcc02d15 	stw	r19,180(sp)
  805684:	d9402a15 	stw	r5,168(sp)
  805688:	d9402e15 	stw	r5,184(sp)
  80568c:	d8002915 	stw	zero,164(sp)
  805690:	d8003215 	stw	zero,200(sp)
  805694:	003a5d06 	br	80400c <__alt_mem_onchip_mem+0xff78400c>
  805698:	9080004c 	andi	r2,r18,1
  80569c:	0039883a 	mov	fp,zero
  8056a0:	10000426 	beq	r2,zero,8056b4 <___vfprintf_internal_r+0x1ddc>
  8056a4:	00800c04 	movi	r2,48
  8056a8:	dc001dc4 	addi	r16,sp,119
  8056ac:	d8801dc5 	stb	r2,119(sp)
  8056b0:	003b8006 	br	8044b4 <__alt_mem_onchip_mem+0xff7844b4>
  8056b4:	d8002e15 	stw	zero,184(sp)
  8056b8:	dc001e04 	addi	r16,sp,120
  8056bc:	003a4d06 	br	803ff4 <__alt_mem_onchip_mem+0xff783ff4>
  8056c0:	8c7fff84 	addi	r17,r17,-2
  8056c4:	b5bfffc4 	addi	r22,r22,-1
  8056c8:	dd802615 	stw	r22,152(sp)
  8056cc:	dc4022c5 	stb	r17,139(sp)
  8056d0:	b000bf16 	blt	r22,zero,8059d0 <___vfprintf_internal_r+0x20f8>
  8056d4:	00800ac4 	movi	r2,43
  8056d8:	d8802305 	stb	r2,140(sp)
  8056dc:	00800244 	movi	r2,9
  8056e0:	15807016 	blt	r2,r22,8058a4 <___vfprintf_internal_r+0x1fcc>
  8056e4:	00800c04 	movi	r2,48
  8056e8:	b5800c04 	addi	r22,r22,48
  8056ec:	d8802345 	stb	r2,141(sp)
  8056f0:	dd802385 	stb	r22,142(sp)
  8056f4:	d88023c4 	addi	r2,sp,143
  8056f8:	df0022c4 	addi	fp,sp,139
  8056fc:	d8c03317 	ldw	r3,204(sp)
  805700:	1739c83a 	sub	fp,r2,fp
  805704:	d9003317 	ldw	r4,204(sp)
  805708:	e0c7883a 	add	r3,fp,r3
  80570c:	df003a15 	stw	fp,232(sp)
  805710:	d8c02e15 	stw	r3,184(sp)
  805714:	00800044 	movi	r2,1
  805718:	1100b30e 	bge	r2,r4,8059e8 <___vfprintf_internal_r+0x2110>
  80571c:	d8c02e17 	ldw	r3,184(sp)
  805720:	18c00044 	addi	r3,r3,1
  805724:	d8c02e15 	stw	r3,184(sp)
  805728:	1805883a 	mov	r2,r3
  80572c:	1800ac16 	blt	r3,zero,8059e0 <___vfprintf_internal_r+0x2108>
  805730:	d8003215 	stw	zero,200(sp)
  805734:	003e5d06 	br	8050ac <__alt_mem_onchip_mem+0xff7850ac>
  805738:	d9002c17 	ldw	r4,176(sp)
  80573c:	d9801e04 	addi	r6,sp,120
  805740:	b80b883a 	mov	r5,r23
  805744:	080a2940 	call	80a294 <__sprint_r>
  805748:	1039651e 	bne	r2,zero,803ce0 <__alt_mem_onchip_mem+0xff783ce0>
  80574c:	dc402617 	ldw	r17,152(sp)
  805750:	d8c02017 	ldw	r3,128(sp)
  805754:	d8801f17 	ldw	r2,124(sp)
  805758:	da000404 	addi	r8,sp,16
  80575c:	003ed606 	br	8052b8 <__alt_mem_onchip_mem+0xff7852b8>
  805760:	582b883a 	mov	r21,r11
  805764:	d8002915 	stw	zero,164(sp)
  805768:	0038bd06 	br	803a60 <__alt_mem_onchip_mem+0xff783a60>
  80576c:	d8802917 	ldw	r2,164(sp)
  805770:	103e071e 	bne	r2,zero,804f90 <__alt_mem_onchip_mem+0xff784f90>
  805774:	dc002915 	stw	r16,164(sp)
  805778:	003e0506 	br	804f90 <__alt_mem_onchip_mem+0xff784f90>
  80577c:	d9002917 	ldw	r4,164(sp)
  805780:	20c00044 	addi	r3,r4,1
  805784:	003e0f06 	br	804fc4 <__alt_mem_onchip_mem+0xff784fc4>
  805788:	01400184 	movi	r5,6
  80578c:	d9402915 	stw	r5,164(sp)
  805790:	003dff06 	br	804f90 <__alt_mem_onchip_mem+0xff784f90>
  805794:	d8802104 	addi	r2,sp,132
  805798:	d8800315 	stw	r2,12(sp)
  80579c:	d8802504 	addi	r2,sp,148
  8057a0:	d8800215 	stw	r2,8(sp)
  8057a4:	d8802604 	addi	r2,sp,152
  8057a8:	d8800115 	stw	r2,4(sp)
  8057ac:	d8802917 	ldw	r2,164(sp)
  8057b0:	d9403617 	ldw	r5,216(sp)
  8057b4:	d9002c17 	ldw	r4,176(sp)
  8057b8:	d8800015 	stw	r2,0(sp)
  8057bc:	01c000c4 	movi	r7,3
  8057c0:	980d883a 	mov	r6,r19
  8057c4:	da003d15 	stw	r8,244(sp)
  8057c8:	08061080 	call	806108 <_dtoa_r>
  8057cc:	d8c02917 	ldw	r3,164(sp)
  8057d0:	da003d17 	ldw	r8,244(sp)
  8057d4:	1021883a 	mov	r16,r2
  8057d8:	10f9883a 	add	fp,r2,r3
  8057dc:	81000007 	ldb	r4,0(r16)
  8057e0:	00800c04 	movi	r2,48
  8057e4:	20805e26 	beq	r4,r2,805960 <___vfprintf_internal_r+0x2088>
  8057e8:	d8c02617 	ldw	r3,152(sp)
  8057ec:	e0f9883a 	add	fp,fp,r3
  8057f0:	003e0a06 	br	80501c <__alt_mem_onchip_mem+0xff78501c>
  8057f4:	00c00b44 	movi	r3,45
  8057f8:	24e0003c 	xorhi	r19,r4,32768
  8057fc:	d8c02a05 	stb	r3,168(sp)
  805800:	003de906 	br	804fa8 <__alt_mem_onchip_mem+0xff784fa8>
  805804:	d8c03217 	ldw	r3,200(sp)
  805808:	00c07a0e 	bge	zero,r3,8059f4 <___vfprintf_internal_r+0x211c>
  80580c:	00800044 	movi	r2,1
  805810:	d9003317 	ldw	r4,204(sp)
  805814:	1105883a 	add	r2,r2,r4
  805818:	d8802e15 	stw	r2,184(sp)
  80581c:	10004e16 	blt	r2,zero,805958 <___vfprintf_internal_r+0x2080>
  805820:	044019c4 	movi	r17,103
  805824:	003e2106 	br	8050ac <__alt_mem_onchip_mem+0xff7850ac>
  805828:	d9002917 	ldw	r4,164(sp)
  80582c:	d8802104 	addi	r2,sp,132
  805830:	d8800315 	stw	r2,12(sp)
  805834:	d9000015 	stw	r4,0(sp)
  805838:	d8802504 	addi	r2,sp,148
  80583c:	d9403617 	ldw	r5,216(sp)
  805840:	d9002c17 	ldw	r4,176(sp)
  805844:	d8800215 	stw	r2,8(sp)
  805848:	d8802604 	addi	r2,sp,152
  80584c:	d8800115 	stw	r2,4(sp)
  805850:	01c000c4 	movi	r7,3
  805854:	980d883a 	mov	r6,r19
  805858:	da003d15 	stw	r8,244(sp)
  80585c:	08061080 	call	806108 <_dtoa_r>
  805860:	d8c02917 	ldw	r3,164(sp)
  805864:	da003d17 	ldw	r8,244(sp)
  805868:	1021883a 	mov	r16,r2
  80586c:	00801184 	movi	r2,70
  805870:	80f9883a 	add	fp,r16,r3
  805874:	88bfd926 	beq	r17,r2,8057dc <__alt_mem_onchip_mem+0xff7857dc>
  805878:	003de806 	br	80501c <__alt_mem_onchip_mem+0xff78501c>
  80587c:	d9002917 	ldw	r4,164(sp)
  805880:	00c04d0e 	bge	zero,r3,8059b8 <___vfprintf_internal_r+0x20e0>
  805884:	2000441e 	bne	r4,zero,805998 <___vfprintf_internal_r+0x20c0>
  805888:	9480004c 	andi	r18,r18,1
  80588c:	9000421e 	bne	r18,zero,805998 <___vfprintf_internal_r+0x20c0>
  805890:	1805883a 	mov	r2,r3
  805894:	18007016 	blt	r3,zero,805a58 <___vfprintf_internal_r+0x2180>
  805898:	d8c03217 	ldw	r3,200(sp)
  80589c:	d8c02e15 	stw	r3,184(sp)
  8058a0:	003e0206 	br	8050ac <__alt_mem_onchip_mem+0xff7850ac>
  8058a4:	df0022c4 	addi	fp,sp,139
  8058a8:	dc002915 	stw	r16,164(sp)
  8058ac:	4027883a 	mov	r19,r8
  8058b0:	e021883a 	mov	r16,fp
  8058b4:	b009883a 	mov	r4,r22
  8058b8:	01400284 	movi	r5,10
  8058bc:	080c7c80 	call	80c7c8 <__modsi3>
  8058c0:	10800c04 	addi	r2,r2,48
  8058c4:	843fffc4 	addi	r16,r16,-1
  8058c8:	b009883a 	mov	r4,r22
  8058cc:	01400284 	movi	r5,10
  8058d0:	80800005 	stb	r2,0(r16)
  8058d4:	080c7440 	call	80c744 <__divsi3>
  8058d8:	102d883a 	mov	r22,r2
  8058dc:	00800244 	movi	r2,9
  8058e0:	15bff416 	blt	r2,r22,8058b4 <__alt_mem_onchip_mem+0xff7858b4>
  8058e4:	9811883a 	mov	r8,r19
  8058e8:	b0800c04 	addi	r2,r22,48
  8058ec:	8027883a 	mov	r19,r16
  8058f0:	997fffc4 	addi	r5,r19,-1
  8058f4:	98bfffc5 	stb	r2,-1(r19)
  8058f8:	dc002917 	ldw	r16,164(sp)
  8058fc:	2f006a2e 	bgeu	r5,fp,805aa8 <___vfprintf_internal_r+0x21d0>
  805900:	d9c02384 	addi	r7,sp,142
  805904:	3ccfc83a 	sub	r7,r7,r19
  805908:	d9002344 	addi	r4,sp,141
  80590c:	e1cf883a 	add	r7,fp,r7
  805910:	00000106 	br	805918 <___vfprintf_internal_r+0x2040>
  805914:	28800003 	ldbu	r2,0(r5)
  805918:	20800005 	stb	r2,0(r4)
  80591c:	21000044 	addi	r4,r4,1
  805920:	29400044 	addi	r5,r5,1
  805924:	393ffb1e 	bne	r7,r4,805914 <__alt_mem_onchip_mem+0xff785914>
  805928:	d8802304 	addi	r2,sp,140
  80592c:	14c5c83a 	sub	r2,r2,r19
  805930:	d8c02344 	addi	r3,sp,141
  805934:	1885883a 	add	r2,r3,r2
  805938:	003f7006 	br	8056fc <__alt_mem_onchip_mem+0xff7856fc>
  80593c:	0005883a 	mov	r2,zero
  805940:	003f0f06 	br	805580 <__alt_mem_onchip_mem+0xff785580>
  805944:	d8c03217 	ldw	r3,200(sp)
  805948:	18c00044 	addi	r3,r3,1
  80594c:	d8c02e15 	stw	r3,184(sp)
  805950:	1805883a 	mov	r2,r3
  805954:	183fb20e 	bge	r3,zero,805820 <__alt_mem_onchip_mem+0xff785820>
  805958:	0005883a 	mov	r2,zero
  80595c:	003fb006 	br	805820 <__alt_mem_onchip_mem+0xff785820>
  805960:	d9003617 	ldw	r4,216(sp)
  805964:	000d883a 	mov	r6,zero
  805968:	000f883a 	mov	r7,zero
  80596c:	980b883a 	mov	r5,r19
  805970:	d8c03c15 	stw	r3,240(sp)
  805974:	da003d15 	stw	r8,244(sp)
  805978:	080da8c0 	call	80da8c <__eqdf2>
  80597c:	d8c03c17 	ldw	r3,240(sp)
  805980:	da003d17 	ldw	r8,244(sp)
  805984:	103f9826 	beq	r2,zero,8057e8 <__alt_mem_onchip_mem+0xff7857e8>
  805988:	00800044 	movi	r2,1
  80598c:	10c7c83a 	sub	r3,r2,r3
  805990:	d8c02615 	stw	r3,152(sp)
  805994:	003f9506 	br	8057ec <__alt_mem_onchip_mem+0xff7857ec>
  805998:	d9002917 	ldw	r4,164(sp)
  80599c:	d8c03217 	ldw	r3,200(sp)
  8059a0:	20800044 	addi	r2,r4,1
  8059a4:	1885883a 	add	r2,r3,r2
  8059a8:	d8802e15 	stw	r2,184(sp)
  8059ac:	103dbf0e 	bge	r2,zero,8050ac <__alt_mem_onchip_mem+0xff7850ac>
  8059b0:	0005883a 	mov	r2,zero
  8059b4:	003dbd06 	br	8050ac <__alt_mem_onchip_mem+0xff7850ac>
  8059b8:	2000211e 	bne	r4,zero,805a40 <___vfprintf_internal_r+0x2168>
  8059bc:	9480004c 	andi	r18,r18,1
  8059c0:	90001f1e 	bne	r18,zero,805a40 <___vfprintf_internal_r+0x2168>
  8059c4:	00800044 	movi	r2,1
  8059c8:	d8802e15 	stw	r2,184(sp)
  8059cc:	003db706 	br	8050ac <__alt_mem_onchip_mem+0xff7850ac>
  8059d0:	00800b44 	movi	r2,45
  8059d4:	05adc83a 	sub	r22,zero,r22
  8059d8:	d8802305 	stb	r2,140(sp)
  8059dc:	003f3f06 	br	8056dc <__alt_mem_onchip_mem+0xff7856dc>
  8059e0:	0005883a 	mov	r2,zero
  8059e4:	003f5206 	br	805730 <__alt_mem_onchip_mem+0xff785730>
  8059e8:	90a4703a 	and	r18,r18,r2
  8059ec:	903f4e26 	beq	r18,zero,805728 <__alt_mem_onchip_mem+0xff785728>
  8059f0:	003f4a06 	br	80571c <__alt_mem_onchip_mem+0xff78571c>
  8059f4:	00800084 	movi	r2,2
  8059f8:	10c5c83a 	sub	r2,r2,r3
  8059fc:	003f8406 	br	805810 <__alt_mem_onchip_mem+0xff785810>
  805a00:	d8802d17 	ldw	r2,180(sp)
  805a04:	d9002d17 	ldw	r4,180(sp)
  805a08:	ac400043 	ldbu	r17,1(r21)
  805a0c:	10800017 	ldw	r2,0(r2)
  805a10:	582b883a 	mov	r21,r11
  805a14:	d8802915 	stw	r2,164(sp)
  805a18:	20800104 	addi	r2,r4,4
  805a1c:	d9002917 	ldw	r4,164(sp)
  805a20:	d8802d15 	stw	r2,180(sp)
  805a24:	203e7a0e 	bge	r4,zero,805410 <__alt_mem_onchip_mem+0xff785410>
  805a28:	8c403fcc 	andi	r17,r17,255
  805a2c:	00bfffc4 	movi	r2,-1
  805a30:	8c40201c 	xori	r17,r17,128
  805a34:	d8802915 	stw	r2,164(sp)
  805a38:	8c7fe004 	addi	r17,r17,-128
  805a3c:	00380706 	br	803a5c <__alt_mem_onchip_mem+0xff783a5c>
  805a40:	d8c02917 	ldw	r3,164(sp)
  805a44:	18c00084 	addi	r3,r3,2
  805a48:	d8c02e15 	stw	r3,184(sp)
  805a4c:	1805883a 	mov	r2,r3
  805a50:	183d960e 	bge	r3,zero,8050ac <__alt_mem_onchip_mem+0xff7850ac>
  805a54:	003fd606 	br	8059b0 <__alt_mem_onchip_mem+0xff7859b0>
  805a58:	0005883a 	mov	r2,zero
  805a5c:	003f8e06 	br	805898 <__alt_mem_onchip_mem+0xff785898>
  805a60:	9080004c 	andi	r2,r18,1
  805a64:	103f811e 	bne	r2,zero,80586c <__alt_mem_onchip_mem+0xff78586c>
  805a68:	d8802117 	ldw	r2,132(sp)
  805a6c:	1405c83a 	sub	r2,r2,r16
  805a70:	d8803315 	stw	r2,204(sp)
  805a74:	b47ef326 	beq	r22,r17,805644 <__alt_mem_onchip_mem+0xff785644>
  805a78:	dd802617 	ldw	r22,152(sp)
  805a7c:	003f1106 	br	8056c4 <__alt_mem_onchip_mem+0xff7856c4>
  805a80:	d9c02785 	stb	r7,158(sp)
  805a84:	00390406 	br	803e98 <__alt_mem_onchip_mem+0xff783e98>
  805a88:	d9c02785 	stb	r7,158(sp)
  805a8c:	0038d306 	br	803ddc <__alt_mem_onchip_mem+0xff783ddc>
  805a90:	d9c02785 	stb	r7,158(sp)
  805a94:	003a6106 	br	80441c <__alt_mem_onchip_mem+0xff78441c>
  805a98:	d9c02785 	stb	r7,158(sp)
  805a9c:	003af806 	br	804680 <__alt_mem_onchip_mem+0xff784680>
  805aa0:	0005883a 	mov	r2,zero
  805aa4:	003d7e06 	br	8050a0 <__alt_mem_onchip_mem+0xff7850a0>
  805aa8:	d8802344 	addi	r2,sp,141
  805aac:	003f1306 	br	8056fc <__alt_mem_onchip_mem+0xff7856fc>
  805ab0:	d9c02785 	stb	r7,158(sp)
  805ab4:	00392306 	br	803f44 <__alt_mem_onchip_mem+0xff783f44>
  805ab8:	d9c02785 	stb	r7,158(sp)
  805abc:	003aa906 	br	804564 <__alt_mem_onchip_mem+0xff784564>
  805ac0:	d9c02785 	stb	r7,158(sp)
  805ac4:	003a3d06 	br	8043bc <__alt_mem_onchip_mem+0xff7843bc>
  805ac8:	d9c02785 	stb	r7,158(sp)
  805acc:	003aca06 	br	8045f8 <__alt_mem_onchip_mem+0xff7845f8>

00805ad0 <__vfprintf_internal>:
  805ad0:	00802074 	movhi	r2,129
  805ad4:	10957804 	addi	r2,r2,21984
  805ad8:	300f883a 	mov	r7,r6
  805adc:	280d883a 	mov	r6,r5
  805ae0:	200b883a 	mov	r5,r4
  805ae4:	11000017 	ldw	r4,0(r2)
  805ae8:	08038d81 	jmpi	8038d8 <___vfprintf_internal_r>

00805aec <__sbprintf>:
  805aec:	2880030b 	ldhu	r2,12(r5)
  805af0:	2ac01917 	ldw	r11,100(r5)
  805af4:	2a80038b 	ldhu	r10,14(r5)
  805af8:	2a400717 	ldw	r9,28(r5)
  805afc:	2a000917 	ldw	r8,36(r5)
  805b00:	defee204 	addi	sp,sp,-1144
  805b04:	00c10004 	movi	r3,1024
  805b08:	dc011a15 	stw	r16,1128(sp)
  805b0c:	10bfff4c 	andi	r2,r2,65533
  805b10:	2821883a 	mov	r16,r5
  805b14:	d8cb883a 	add	r5,sp,r3
  805b18:	dc811c15 	stw	r18,1136(sp)
  805b1c:	dc411b15 	stw	r17,1132(sp)
  805b20:	dfc11d15 	stw	ra,1140(sp)
  805b24:	2025883a 	mov	r18,r4
  805b28:	d881030d 	sth	r2,1036(sp)
  805b2c:	dac11915 	stw	r11,1124(sp)
  805b30:	da81038d 	sth	r10,1038(sp)
  805b34:	da410715 	stw	r9,1052(sp)
  805b38:	da010915 	stw	r8,1060(sp)
  805b3c:	dec10015 	stw	sp,1024(sp)
  805b40:	dec10415 	stw	sp,1040(sp)
  805b44:	d8c10215 	stw	r3,1032(sp)
  805b48:	d8c10515 	stw	r3,1044(sp)
  805b4c:	d8010615 	stw	zero,1048(sp)
  805b50:	08038d80 	call	8038d8 <___vfprintf_internal_r>
  805b54:	1023883a 	mov	r17,r2
  805b58:	10000416 	blt	r2,zero,805b6c <__sbprintf+0x80>
  805b5c:	d9410004 	addi	r5,sp,1024
  805b60:	9009883a 	mov	r4,r18
  805b64:	0807ab00 	call	807ab0 <_fflush_r>
  805b68:	10000d1e 	bne	r2,zero,805ba0 <__sbprintf+0xb4>
  805b6c:	d881030b 	ldhu	r2,1036(sp)
  805b70:	1080100c 	andi	r2,r2,64
  805b74:	10000326 	beq	r2,zero,805b84 <__sbprintf+0x98>
  805b78:	8080030b 	ldhu	r2,12(r16)
  805b7c:	10801014 	ori	r2,r2,64
  805b80:	8080030d 	sth	r2,12(r16)
  805b84:	8805883a 	mov	r2,r17
  805b88:	dfc11d17 	ldw	ra,1140(sp)
  805b8c:	dc811c17 	ldw	r18,1136(sp)
  805b90:	dc411b17 	ldw	r17,1132(sp)
  805b94:	dc011a17 	ldw	r16,1128(sp)
  805b98:	dec11e04 	addi	sp,sp,1144
  805b9c:	f800283a 	ret
  805ba0:	047fffc4 	movi	r17,-1
  805ba4:	003ff106 	br	805b6c <__alt_mem_onchip_mem+0xff785b6c>

00805ba8 <__swbuf_r>:
  805ba8:	defffb04 	addi	sp,sp,-20
  805bac:	dcc00315 	stw	r19,12(sp)
  805bb0:	dc800215 	stw	r18,8(sp)
  805bb4:	dc000015 	stw	r16,0(sp)
  805bb8:	dfc00415 	stw	ra,16(sp)
  805bbc:	dc400115 	stw	r17,4(sp)
  805bc0:	2025883a 	mov	r18,r4
  805bc4:	2827883a 	mov	r19,r5
  805bc8:	3021883a 	mov	r16,r6
  805bcc:	20000226 	beq	r4,zero,805bd8 <__swbuf_r+0x30>
  805bd0:	20800e17 	ldw	r2,56(r4)
  805bd4:	10004226 	beq	r2,zero,805ce0 <__swbuf_r+0x138>
  805bd8:	80800617 	ldw	r2,24(r16)
  805bdc:	8100030b 	ldhu	r4,12(r16)
  805be0:	80800215 	stw	r2,8(r16)
  805be4:	2080020c 	andi	r2,r4,8
  805be8:	10003626 	beq	r2,zero,805cc4 <__swbuf_r+0x11c>
  805bec:	80c00417 	ldw	r3,16(r16)
  805bf0:	18003426 	beq	r3,zero,805cc4 <__swbuf_r+0x11c>
  805bf4:	2088000c 	andi	r2,r4,8192
  805bf8:	9c403fcc 	andi	r17,r19,255
  805bfc:	10001a26 	beq	r2,zero,805c68 <__swbuf_r+0xc0>
  805c00:	80800017 	ldw	r2,0(r16)
  805c04:	81000517 	ldw	r4,20(r16)
  805c08:	10c7c83a 	sub	r3,r2,r3
  805c0c:	1900200e 	bge	r3,r4,805c90 <__swbuf_r+0xe8>
  805c10:	18c00044 	addi	r3,r3,1
  805c14:	81000217 	ldw	r4,8(r16)
  805c18:	11400044 	addi	r5,r2,1
  805c1c:	81400015 	stw	r5,0(r16)
  805c20:	213fffc4 	addi	r4,r4,-1
  805c24:	81000215 	stw	r4,8(r16)
  805c28:	14c00005 	stb	r19,0(r2)
  805c2c:	80800517 	ldw	r2,20(r16)
  805c30:	10c01e26 	beq	r2,r3,805cac <__swbuf_r+0x104>
  805c34:	8080030b 	ldhu	r2,12(r16)
  805c38:	1080004c 	andi	r2,r2,1
  805c3c:	10000226 	beq	r2,zero,805c48 <__swbuf_r+0xa0>
  805c40:	00800284 	movi	r2,10
  805c44:	88801926 	beq	r17,r2,805cac <__swbuf_r+0x104>
  805c48:	8805883a 	mov	r2,r17
  805c4c:	dfc00417 	ldw	ra,16(sp)
  805c50:	dcc00317 	ldw	r19,12(sp)
  805c54:	dc800217 	ldw	r18,8(sp)
  805c58:	dc400117 	ldw	r17,4(sp)
  805c5c:	dc000017 	ldw	r16,0(sp)
  805c60:	dec00504 	addi	sp,sp,20
  805c64:	f800283a 	ret
  805c68:	81401917 	ldw	r5,100(r16)
  805c6c:	00b7ffc4 	movi	r2,-8193
  805c70:	21080014 	ori	r4,r4,8192
  805c74:	2884703a 	and	r2,r5,r2
  805c78:	80801915 	stw	r2,100(r16)
  805c7c:	80800017 	ldw	r2,0(r16)
  805c80:	8100030d 	sth	r4,12(r16)
  805c84:	81000517 	ldw	r4,20(r16)
  805c88:	10c7c83a 	sub	r3,r2,r3
  805c8c:	193fe016 	blt	r3,r4,805c10 <__alt_mem_onchip_mem+0xff785c10>
  805c90:	800b883a 	mov	r5,r16
  805c94:	9009883a 	mov	r4,r18
  805c98:	0807ab00 	call	807ab0 <_fflush_r>
  805c9c:	1000071e 	bne	r2,zero,805cbc <__swbuf_r+0x114>
  805ca0:	80800017 	ldw	r2,0(r16)
  805ca4:	00c00044 	movi	r3,1
  805ca8:	003fda06 	br	805c14 <__alt_mem_onchip_mem+0xff785c14>
  805cac:	800b883a 	mov	r5,r16
  805cb0:	9009883a 	mov	r4,r18
  805cb4:	0807ab00 	call	807ab0 <_fflush_r>
  805cb8:	103fe326 	beq	r2,zero,805c48 <__alt_mem_onchip_mem+0xff785c48>
  805cbc:	00bfffc4 	movi	r2,-1
  805cc0:	003fe206 	br	805c4c <__alt_mem_onchip_mem+0xff785c4c>
  805cc4:	800b883a 	mov	r5,r16
  805cc8:	9009883a 	mov	r4,r18
  805ccc:	0805d600 	call	805d60 <__swsetup_r>
  805cd0:	103ffa1e 	bne	r2,zero,805cbc <__alt_mem_onchip_mem+0xff785cbc>
  805cd4:	8100030b 	ldhu	r4,12(r16)
  805cd8:	80c00417 	ldw	r3,16(r16)
  805cdc:	003fc506 	br	805bf4 <__alt_mem_onchip_mem+0xff785bf4>
  805ce0:	0801aa80 	call	801aa8 <__sinit>
  805ce4:	003fbc06 	br	805bd8 <__alt_mem_onchip_mem+0xff785bd8>

00805ce8 <__swbuf>:
  805ce8:	00802074 	movhi	r2,129
  805cec:	10957804 	addi	r2,r2,21984
  805cf0:	280d883a 	mov	r6,r5
  805cf4:	200b883a 	mov	r5,r4
  805cf8:	11000017 	ldw	r4,0(r2)
  805cfc:	0805ba81 	jmpi	805ba8 <__swbuf_r>

00805d00 <_write_r>:
  805d00:	defffd04 	addi	sp,sp,-12
  805d04:	2805883a 	mov	r2,r5
  805d08:	dc000015 	stw	r16,0(sp)
  805d0c:	04002074 	movhi	r16,129
  805d10:	dc400115 	stw	r17,4(sp)
  805d14:	300b883a 	mov	r5,r6
  805d18:	841cd404 	addi	r16,r16,29520
  805d1c:	2023883a 	mov	r17,r4
  805d20:	380d883a 	mov	r6,r7
  805d24:	1009883a 	mov	r4,r2
  805d28:	dfc00215 	stw	ra,8(sp)
  805d2c:	80000015 	stw	zero,0(r16)
  805d30:	080fe500 	call	80fe50 <write>
  805d34:	00ffffc4 	movi	r3,-1
  805d38:	10c00526 	beq	r2,r3,805d50 <_write_r+0x50>
  805d3c:	dfc00217 	ldw	ra,8(sp)
  805d40:	dc400117 	ldw	r17,4(sp)
  805d44:	dc000017 	ldw	r16,0(sp)
  805d48:	dec00304 	addi	sp,sp,12
  805d4c:	f800283a 	ret
  805d50:	80c00017 	ldw	r3,0(r16)
  805d54:	183ff926 	beq	r3,zero,805d3c <__alt_mem_onchip_mem+0xff785d3c>
  805d58:	88c00015 	stw	r3,0(r17)
  805d5c:	003ff706 	br	805d3c <__alt_mem_onchip_mem+0xff785d3c>

00805d60 <__swsetup_r>:
  805d60:	00802074 	movhi	r2,129
  805d64:	defffd04 	addi	sp,sp,-12
  805d68:	10957804 	addi	r2,r2,21984
  805d6c:	dc400115 	stw	r17,4(sp)
  805d70:	2023883a 	mov	r17,r4
  805d74:	11000017 	ldw	r4,0(r2)
  805d78:	dc000015 	stw	r16,0(sp)
  805d7c:	dfc00215 	stw	ra,8(sp)
  805d80:	2821883a 	mov	r16,r5
  805d84:	20000226 	beq	r4,zero,805d90 <__swsetup_r+0x30>
  805d88:	20800e17 	ldw	r2,56(r4)
  805d8c:	10003126 	beq	r2,zero,805e54 <__swsetup_r+0xf4>
  805d90:	8080030b 	ldhu	r2,12(r16)
  805d94:	10c0020c 	andi	r3,r2,8
  805d98:	1009883a 	mov	r4,r2
  805d9c:	18000f26 	beq	r3,zero,805ddc <__swsetup_r+0x7c>
  805da0:	80c00417 	ldw	r3,16(r16)
  805da4:	18001526 	beq	r3,zero,805dfc <__swsetup_r+0x9c>
  805da8:	1100004c 	andi	r4,r2,1
  805dac:	20001c1e 	bne	r4,zero,805e20 <__swsetup_r+0xc0>
  805db0:	1080008c 	andi	r2,r2,2
  805db4:	1000291e 	bne	r2,zero,805e5c <__swsetup_r+0xfc>
  805db8:	80800517 	ldw	r2,20(r16)
  805dbc:	80800215 	stw	r2,8(r16)
  805dc0:	18001c26 	beq	r3,zero,805e34 <__swsetup_r+0xd4>
  805dc4:	0005883a 	mov	r2,zero
  805dc8:	dfc00217 	ldw	ra,8(sp)
  805dcc:	dc400117 	ldw	r17,4(sp)
  805dd0:	dc000017 	ldw	r16,0(sp)
  805dd4:	dec00304 	addi	sp,sp,12
  805dd8:	f800283a 	ret
  805ddc:	2080040c 	andi	r2,r4,16
  805de0:	10002e26 	beq	r2,zero,805e9c <__swsetup_r+0x13c>
  805de4:	2080010c 	andi	r2,r4,4
  805de8:	10001e1e 	bne	r2,zero,805e64 <__swsetup_r+0x104>
  805dec:	80c00417 	ldw	r3,16(r16)
  805df0:	20800214 	ori	r2,r4,8
  805df4:	8080030d 	sth	r2,12(r16)
  805df8:	183feb1e 	bne	r3,zero,805da8 <__alt_mem_onchip_mem+0xff785da8>
  805dfc:	1100a00c 	andi	r4,r2,640
  805e00:	01408004 	movi	r5,512
  805e04:	217fe826 	beq	r4,r5,805da8 <__alt_mem_onchip_mem+0xff785da8>
  805e08:	800b883a 	mov	r5,r16
  805e0c:	8809883a 	mov	r4,r17
  805e10:	08024540 	call	802454 <__smakebuf_r>
  805e14:	8080030b 	ldhu	r2,12(r16)
  805e18:	80c00417 	ldw	r3,16(r16)
  805e1c:	003fe206 	br	805da8 <__alt_mem_onchip_mem+0xff785da8>
  805e20:	80800517 	ldw	r2,20(r16)
  805e24:	80000215 	stw	zero,8(r16)
  805e28:	0085c83a 	sub	r2,zero,r2
  805e2c:	80800615 	stw	r2,24(r16)
  805e30:	183fe41e 	bne	r3,zero,805dc4 <__alt_mem_onchip_mem+0xff785dc4>
  805e34:	80c0030b 	ldhu	r3,12(r16)
  805e38:	0005883a 	mov	r2,zero
  805e3c:	1900200c 	andi	r4,r3,128
  805e40:	203fe126 	beq	r4,zero,805dc8 <__alt_mem_onchip_mem+0xff785dc8>
  805e44:	18c01014 	ori	r3,r3,64
  805e48:	80c0030d 	sth	r3,12(r16)
  805e4c:	00bfffc4 	movi	r2,-1
  805e50:	003fdd06 	br	805dc8 <__alt_mem_onchip_mem+0xff785dc8>
  805e54:	0801aa80 	call	801aa8 <__sinit>
  805e58:	003fcd06 	br	805d90 <__alt_mem_onchip_mem+0xff785d90>
  805e5c:	0005883a 	mov	r2,zero
  805e60:	003fd606 	br	805dbc <__alt_mem_onchip_mem+0xff785dbc>
  805e64:	81400c17 	ldw	r5,48(r16)
  805e68:	28000626 	beq	r5,zero,805e84 <__swsetup_r+0x124>
  805e6c:	80801004 	addi	r2,r16,64
  805e70:	28800326 	beq	r5,r2,805e80 <__swsetup_r+0x120>
  805e74:	8809883a 	mov	r4,r17
  805e78:	0807d0c0 	call	807d0c <_free_r>
  805e7c:	8100030b 	ldhu	r4,12(r16)
  805e80:	80000c15 	stw	zero,48(r16)
  805e84:	80c00417 	ldw	r3,16(r16)
  805e88:	00bff6c4 	movi	r2,-37
  805e8c:	1108703a 	and	r4,r2,r4
  805e90:	80000115 	stw	zero,4(r16)
  805e94:	80c00015 	stw	r3,0(r16)
  805e98:	003fd506 	br	805df0 <__alt_mem_onchip_mem+0xff785df0>
  805e9c:	00800244 	movi	r2,9
  805ea0:	88800015 	stw	r2,0(r17)
  805ea4:	20801014 	ori	r2,r4,64
  805ea8:	8080030d 	sth	r2,12(r16)
  805eac:	00bfffc4 	movi	r2,-1
  805eb0:	003fc506 	br	805dc8 <__alt_mem_onchip_mem+0xff785dc8>

00805eb4 <_close_r>:
  805eb4:	defffd04 	addi	sp,sp,-12
  805eb8:	dc000015 	stw	r16,0(sp)
  805ebc:	04002074 	movhi	r16,129
  805ec0:	dc400115 	stw	r17,4(sp)
  805ec4:	841cd404 	addi	r16,r16,29520
  805ec8:	2023883a 	mov	r17,r4
  805ecc:	2809883a 	mov	r4,r5
  805ed0:	dfc00215 	stw	ra,8(sp)
  805ed4:	80000015 	stw	zero,0(r16)
  805ed8:	080f0c80 	call	80f0c8 <close>
  805edc:	00ffffc4 	movi	r3,-1
  805ee0:	10c00526 	beq	r2,r3,805ef8 <_close_r+0x44>
  805ee4:	dfc00217 	ldw	ra,8(sp)
  805ee8:	dc400117 	ldw	r17,4(sp)
  805eec:	dc000017 	ldw	r16,0(sp)
  805ef0:	dec00304 	addi	sp,sp,12
  805ef4:	f800283a 	ret
  805ef8:	80c00017 	ldw	r3,0(r16)
  805efc:	183ff926 	beq	r3,zero,805ee4 <__alt_mem_onchip_mem+0xff785ee4>
  805f00:	88c00015 	stw	r3,0(r17)
  805f04:	003ff706 	br	805ee4 <__alt_mem_onchip_mem+0xff785ee4>

00805f08 <quorem>:
  805f08:	defff704 	addi	sp,sp,-36
  805f0c:	dc800215 	stw	r18,8(sp)
  805f10:	20800417 	ldw	r2,16(r4)
  805f14:	2c800417 	ldw	r18,16(r5)
  805f18:	dfc00815 	stw	ra,32(sp)
  805f1c:	ddc00715 	stw	r23,28(sp)
  805f20:	dd800615 	stw	r22,24(sp)
  805f24:	dd400515 	stw	r21,20(sp)
  805f28:	dd000415 	stw	r20,16(sp)
  805f2c:	dcc00315 	stw	r19,12(sp)
  805f30:	dc400115 	stw	r17,4(sp)
  805f34:	dc000015 	stw	r16,0(sp)
  805f38:	14807116 	blt	r2,r18,806100 <quorem+0x1f8>
  805f3c:	94bfffc4 	addi	r18,r18,-1
  805f40:	94ad883a 	add	r22,r18,r18
  805f44:	b5ad883a 	add	r22,r22,r22
  805f48:	2c400504 	addi	r17,r5,20
  805f4c:	8da9883a 	add	r20,r17,r22
  805f50:	25400504 	addi	r21,r4,20
  805f54:	282f883a 	mov	r23,r5
  805f58:	adad883a 	add	r22,r21,r22
  805f5c:	a1400017 	ldw	r5,0(r20)
  805f60:	2021883a 	mov	r16,r4
  805f64:	b1000017 	ldw	r4,0(r22)
  805f68:	29400044 	addi	r5,r5,1
  805f6c:	080c83c0 	call	80c83c <__udivsi3>
  805f70:	1027883a 	mov	r19,r2
  805f74:	10002c26 	beq	r2,zero,806028 <quorem+0x120>
  805f78:	a813883a 	mov	r9,r21
  805f7c:	880b883a 	mov	r5,r17
  805f80:	0009883a 	mov	r4,zero
  805f84:	000d883a 	mov	r6,zero
  805f88:	2a000017 	ldw	r8,0(r5)
  805f8c:	49c00017 	ldw	r7,0(r9)
  805f90:	29400104 	addi	r5,r5,4
  805f94:	40bfffcc 	andi	r2,r8,65535
  805f98:	14c5383a 	mul	r2,r2,r19
  805f9c:	4010d43a 	srli	r8,r8,16
  805fa0:	38ffffcc 	andi	r3,r7,65535
  805fa4:	1105883a 	add	r2,r2,r4
  805fa8:	1008d43a 	srli	r4,r2,16
  805fac:	44d1383a 	mul	r8,r8,r19
  805fb0:	198d883a 	add	r6,r3,r6
  805fb4:	10ffffcc 	andi	r3,r2,65535
  805fb8:	30c7c83a 	sub	r3,r6,r3
  805fbc:	380ed43a 	srli	r7,r7,16
  805fc0:	4105883a 	add	r2,r8,r4
  805fc4:	180dd43a 	srai	r6,r3,16
  805fc8:	113fffcc 	andi	r4,r2,65535
  805fcc:	390fc83a 	sub	r7,r7,r4
  805fd0:	398d883a 	add	r6,r7,r6
  805fd4:	300e943a 	slli	r7,r6,16
  805fd8:	18ffffcc 	andi	r3,r3,65535
  805fdc:	1008d43a 	srli	r4,r2,16
  805fe0:	38ceb03a 	or	r7,r7,r3
  805fe4:	49c00015 	stw	r7,0(r9)
  805fe8:	300dd43a 	srai	r6,r6,16
  805fec:	4a400104 	addi	r9,r9,4
  805ff0:	a17fe52e 	bgeu	r20,r5,805f88 <__alt_mem_onchip_mem+0xff785f88>
  805ff4:	b0800017 	ldw	r2,0(r22)
  805ff8:	10000b1e 	bne	r2,zero,806028 <quorem+0x120>
  805ffc:	b0bfff04 	addi	r2,r22,-4
  806000:	a880082e 	bgeu	r21,r2,806024 <quorem+0x11c>
  806004:	b0ffff17 	ldw	r3,-4(r22)
  806008:	18000326 	beq	r3,zero,806018 <quorem+0x110>
  80600c:	00000506 	br	806024 <quorem+0x11c>
  806010:	10c00017 	ldw	r3,0(r2)
  806014:	1800031e 	bne	r3,zero,806024 <quorem+0x11c>
  806018:	10bfff04 	addi	r2,r2,-4
  80601c:	94bfffc4 	addi	r18,r18,-1
  806020:	a8bffb36 	bltu	r21,r2,806010 <__alt_mem_onchip_mem+0xff786010>
  806024:	84800415 	stw	r18,16(r16)
  806028:	b80b883a 	mov	r5,r23
  80602c:	8009883a 	mov	r4,r16
  806030:	08092b80 	call	8092b8 <__mcmp>
  806034:	10002616 	blt	r2,zero,8060d0 <quorem+0x1c8>
  806038:	9cc00044 	addi	r19,r19,1
  80603c:	a805883a 	mov	r2,r21
  806040:	000b883a 	mov	r5,zero
  806044:	11000017 	ldw	r4,0(r2)
  806048:	89800017 	ldw	r6,0(r17)
  80604c:	10800104 	addi	r2,r2,4
  806050:	20ffffcc 	andi	r3,r4,65535
  806054:	194b883a 	add	r5,r3,r5
  806058:	30ffffcc 	andi	r3,r6,65535
  80605c:	28c7c83a 	sub	r3,r5,r3
  806060:	300cd43a 	srli	r6,r6,16
  806064:	2008d43a 	srli	r4,r4,16
  806068:	180bd43a 	srai	r5,r3,16
  80606c:	18ffffcc 	andi	r3,r3,65535
  806070:	2189c83a 	sub	r4,r4,r6
  806074:	2149883a 	add	r4,r4,r5
  806078:	200c943a 	slli	r6,r4,16
  80607c:	8c400104 	addi	r17,r17,4
  806080:	200bd43a 	srai	r5,r4,16
  806084:	30c6b03a 	or	r3,r6,r3
  806088:	10ffff15 	stw	r3,-4(r2)
  80608c:	a47fed2e 	bgeu	r20,r17,806044 <__alt_mem_onchip_mem+0xff786044>
  806090:	9485883a 	add	r2,r18,r18
  806094:	1085883a 	add	r2,r2,r2
  806098:	a887883a 	add	r3,r21,r2
  80609c:	18800017 	ldw	r2,0(r3)
  8060a0:	10000b1e 	bne	r2,zero,8060d0 <quorem+0x1c8>
  8060a4:	18bfff04 	addi	r2,r3,-4
  8060a8:	a880082e 	bgeu	r21,r2,8060cc <quorem+0x1c4>
  8060ac:	18ffff17 	ldw	r3,-4(r3)
  8060b0:	18000326 	beq	r3,zero,8060c0 <quorem+0x1b8>
  8060b4:	00000506 	br	8060cc <quorem+0x1c4>
  8060b8:	10c00017 	ldw	r3,0(r2)
  8060bc:	1800031e 	bne	r3,zero,8060cc <quorem+0x1c4>
  8060c0:	10bfff04 	addi	r2,r2,-4
  8060c4:	94bfffc4 	addi	r18,r18,-1
  8060c8:	a8bffb36 	bltu	r21,r2,8060b8 <__alt_mem_onchip_mem+0xff7860b8>
  8060cc:	84800415 	stw	r18,16(r16)
  8060d0:	9805883a 	mov	r2,r19
  8060d4:	dfc00817 	ldw	ra,32(sp)
  8060d8:	ddc00717 	ldw	r23,28(sp)
  8060dc:	dd800617 	ldw	r22,24(sp)
  8060e0:	dd400517 	ldw	r21,20(sp)
  8060e4:	dd000417 	ldw	r20,16(sp)
  8060e8:	dcc00317 	ldw	r19,12(sp)
  8060ec:	dc800217 	ldw	r18,8(sp)
  8060f0:	dc400117 	ldw	r17,4(sp)
  8060f4:	dc000017 	ldw	r16,0(sp)
  8060f8:	dec00904 	addi	sp,sp,36
  8060fc:	f800283a 	ret
  806100:	0005883a 	mov	r2,zero
  806104:	003ff306 	br	8060d4 <__alt_mem_onchip_mem+0xff7860d4>

00806108 <_dtoa_r>:
  806108:	20801017 	ldw	r2,64(r4)
  80610c:	deffde04 	addi	sp,sp,-136
  806110:	df002015 	stw	fp,128(sp)
  806114:	dcc01b15 	stw	r19,108(sp)
  806118:	dc801a15 	stw	r18,104(sp)
  80611c:	dc401915 	stw	r17,100(sp)
  806120:	dc001815 	stw	r16,96(sp)
  806124:	dfc02115 	stw	ra,132(sp)
  806128:	ddc01f15 	stw	r23,124(sp)
  80612c:	dd801e15 	stw	r22,120(sp)
  806130:	dd401d15 	stw	r21,116(sp)
  806134:	dd001c15 	stw	r20,112(sp)
  806138:	d9c00315 	stw	r7,12(sp)
  80613c:	2039883a 	mov	fp,r4
  806140:	3023883a 	mov	r17,r6
  806144:	2825883a 	mov	r18,r5
  806148:	dc002417 	ldw	r16,144(sp)
  80614c:	3027883a 	mov	r19,r6
  806150:	10000826 	beq	r2,zero,806174 <_dtoa_r+0x6c>
  806154:	21801117 	ldw	r6,68(r4)
  806158:	00c00044 	movi	r3,1
  80615c:	100b883a 	mov	r5,r2
  806160:	1986983a 	sll	r3,r3,r6
  806164:	11800115 	stw	r6,4(r2)
  806168:	10c00215 	stw	r3,8(r2)
  80616c:	0808a980 	call	808a98 <_Bfree>
  806170:	e0001015 	stw	zero,64(fp)
  806174:	88002e16 	blt	r17,zero,806230 <_dtoa_r+0x128>
  806178:	80000015 	stw	zero,0(r16)
  80617c:	889ffc2c 	andhi	r2,r17,32752
  806180:	00dffc34 	movhi	r3,32752
  806184:	10c01c26 	beq	r2,r3,8061f8 <_dtoa_r+0xf0>
  806188:	000d883a 	mov	r6,zero
  80618c:	000f883a 	mov	r7,zero
  806190:	9009883a 	mov	r4,r18
  806194:	980b883a 	mov	r5,r19
  806198:	080da8c0 	call	80da8c <__eqdf2>
  80619c:	10002b1e 	bne	r2,zero,80624c <_dtoa_r+0x144>
  8061a0:	d9c02317 	ldw	r7,140(sp)
  8061a4:	00800044 	movi	r2,1
  8061a8:	38800015 	stw	r2,0(r7)
  8061ac:	d8802517 	ldw	r2,148(sp)
  8061b0:	10019e26 	beq	r2,zero,80682c <_dtoa_r+0x724>
  8061b4:	d8c02517 	ldw	r3,148(sp)
  8061b8:	00802074 	movhi	r2,129
  8061bc:	108cf944 	addi	r2,r2,13285
  8061c0:	18800015 	stw	r2,0(r3)
  8061c4:	10bfffc4 	addi	r2,r2,-1
  8061c8:	dfc02117 	ldw	ra,132(sp)
  8061cc:	df002017 	ldw	fp,128(sp)
  8061d0:	ddc01f17 	ldw	r23,124(sp)
  8061d4:	dd801e17 	ldw	r22,120(sp)
  8061d8:	dd401d17 	ldw	r21,116(sp)
  8061dc:	dd001c17 	ldw	r20,112(sp)
  8061e0:	dcc01b17 	ldw	r19,108(sp)
  8061e4:	dc801a17 	ldw	r18,104(sp)
  8061e8:	dc401917 	ldw	r17,100(sp)
  8061ec:	dc001817 	ldw	r16,96(sp)
  8061f0:	dec02204 	addi	sp,sp,136
  8061f4:	f800283a 	ret
  8061f8:	d8c02317 	ldw	r3,140(sp)
  8061fc:	0089c3c4 	movi	r2,9999
  806200:	18800015 	stw	r2,0(r3)
  806204:	90017726 	beq	r18,zero,8067e4 <_dtoa_r+0x6dc>
  806208:	00802074 	movhi	r2,129
  80620c:	108da504 	addi	r2,r2,13972
  806210:	d9002517 	ldw	r4,148(sp)
  806214:	203fec26 	beq	r4,zero,8061c8 <__alt_mem_onchip_mem+0xff7861c8>
  806218:	10c000c7 	ldb	r3,3(r2)
  80621c:	1801781e 	bne	r3,zero,806800 <_dtoa_r+0x6f8>
  806220:	10c000c4 	addi	r3,r2,3
  806224:	d9802517 	ldw	r6,148(sp)
  806228:	30c00015 	stw	r3,0(r6)
  80622c:	003fe606 	br	8061c8 <__alt_mem_onchip_mem+0xff7861c8>
  806230:	04e00034 	movhi	r19,32768
  806234:	9cffffc4 	addi	r19,r19,-1
  806238:	00800044 	movi	r2,1
  80623c:	8ce6703a 	and	r19,r17,r19
  806240:	80800015 	stw	r2,0(r16)
  806244:	9823883a 	mov	r17,r19
  806248:	003fcc06 	br	80617c <__alt_mem_onchip_mem+0xff78617c>
  80624c:	d8800204 	addi	r2,sp,8
  806250:	d8800015 	stw	r2,0(sp)
  806254:	d9c00104 	addi	r7,sp,4
  806258:	900b883a 	mov	r5,r18
  80625c:	980d883a 	mov	r6,r19
  806260:	e009883a 	mov	r4,fp
  806264:	8820d53a 	srli	r16,r17,20
  806268:	08096840 	call	809684 <__d2b>
  80626c:	d8800915 	stw	r2,36(sp)
  806270:	8001651e 	bne	r16,zero,806808 <_dtoa_r+0x700>
  806274:	dd800217 	ldw	r22,8(sp)
  806278:	dc000117 	ldw	r16,4(sp)
  80627c:	00800804 	movi	r2,32
  806280:	b421883a 	add	r16,r22,r16
  806284:	80c10c84 	addi	r3,r16,1074
  806288:	10c2d10e 	bge	r2,r3,806dd0 <_dtoa_r+0xcc8>
  80628c:	00801004 	movi	r2,64
  806290:	81010484 	addi	r4,r16,1042
  806294:	10c7c83a 	sub	r3,r2,r3
  806298:	9108d83a 	srl	r4,r18,r4
  80629c:	88e2983a 	sll	r17,r17,r3
  8062a0:	2448b03a 	or	r4,r4,r17
  8062a4:	080ee540 	call	80ee54 <__floatunsidf>
  8062a8:	017f8434 	movhi	r5,65040
  8062ac:	01800044 	movi	r6,1
  8062b0:	1009883a 	mov	r4,r2
  8062b4:	194b883a 	add	r5,r3,r5
  8062b8:	843fffc4 	addi	r16,r16,-1
  8062bc:	d9801115 	stw	r6,68(sp)
  8062c0:	000d883a 	mov	r6,zero
  8062c4:	01cffe34 	movhi	r7,16376
  8062c8:	080e3fc0 	call	80e3fc <__subdf3>
  8062cc:	0198dbf4 	movhi	r6,25455
  8062d0:	01cff4f4 	movhi	r7,16339
  8062d4:	3190d844 	addi	r6,r6,17249
  8062d8:	39e1e9c4 	addi	r7,r7,-30809
  8062dc:	1009883a 	mov	r4,r2
  8062e0:	180b883a 	mov	r5,r3
  8062e4:	080dce40 	call	80dce4 <__muldf3>
  8062e8:	01a2d874 	movhi	r6,35681
  8062ec:	01cff1f4 	movhi	r7,16327
  8062f0:	31b22cc4 	addi	r6,r6,-14157
  8062f4:	39e28a04 	addi	r7,r7,-30168
  8062f8:	180b883a 	mov	r5,r3
  8062fc:	1009883a 	mov	r4,r2
  806300:	080c8f80 	call	80c8f8 <__adddf3>
  806304:	8009883a 	mov	r4,r16
  806308:	1029883a 	mov	r20,r2
  80630c:	1823883a 	mov	r17,r3
  806310:	080ed780 	call	80ed78 <__floatsidf>
  806314:	019427f4 	movhi	r6,20639
  806318:	01cff4f4 	movhi	r7,16339
  80631c:	319e7ec4 	addi	r6,r6,31227
  806320:	39d104c4 	addi	r7,r7,17427
  806324:	1009883a 	mov	r4,r2
  806328:	180b883a 	mov	r5,r3
  80632c:	080dce40 	call	80dce4 <__muldf3>
  806330:	100d883a 	mov	r6,r2
  806334:	180f883a 	mov	r7,r3
  806338:	a009883a 	mov	r4,r20
  80633c:	880b883a 	mov	r5,r17
  806340:	080c8f80 	call	80c8f8 <__adddf3>
  806344:	1009883a 	mov	r4,r2
  806348:	180b883a 	mov	r5,r3
  80634c:	1029883a 	mov	r20,r2
  806350:	1823883a 	mov	r17,r3
  806354:	080ecf80 	call	80ecf8 <__fixdfsi>
  806358:	000d883a 	mov	r6,zero
  80635c:	000f883a 	mov	r7,zero
  806360:	a009883a 	mov	r4,r20
  806364:	880b883a 	mov	r5,r17
  806368:	d8800515 	stw	r2,20(sp)
  80636c:	080dbf00 	call	80dbf0 <__ledf2>
  806370:	10028716 	blt	r2,zero,806d90 <_dtoa_r+0xc88>
  806374:	d8c00517 	ldw	r3,20(sp)
  806378:	00800584 	movi	r2,22
  80637c:	10c27536 	bltu	r2,r3,806d54 <_dtoa_r+0xc4c>
  806380:	180490fa 	slli	r2,r3,3
  806384:	00c02074 	movhi	r3,129
  806388:	18cdc004 	addi	r3,r3,14080
  80638c:	1885883a 	add	r2,r3,r2
  806390:	11000017 	ldw	r4,0(r2)
  806394:	11400117 	ldw	r5,4(r2)
  806398:	900d883a 	mov	r6,r18
  80639c:	980f883a 	mov	r7,r19
  8063a0:	080db140 	call	80db14 <__gedf2>
  8063a4:	00828d0e 	bge	zero,r2,806ddc <_dtoa_r+0xcd4>
  8063a8:	d9000517 	ldw	r4,20(sp)
  8063ac:	d8000e15 	stw	zero,56(sp)
  8063b0:	213fffc4 	addi	r4,r4,-1
  8063b4:	d9000515 	stw	r4,20(sp)
  8063b8:	b42dc83a 	sub	r22,r22,r16
  8063bc:	b5bfffc4 	addi	r22,r22,-1
  8063c0:	b0026f16 	blt	r22,zero,806d80 <_dtoa_r+0xc78>
  8063c4:	d8000815 	stw	zero,32(sp)
  8063c8:	d9c00517 	ldw	r7,20(sp)
  8063cc:	38026416 	blt	r7,zero,806d60 <_dtoa_r+0xc58>
  8063d0:	b1ed883a 	add	r22,r22,r7
  8063d4:	d9c00d15 	stw	r7,52(sp)
  8063d8:	d8000a15 	stw	zero,40(sp)
  8063dc:	d9800317 	ldw	r6,12(sp)
  8063e0:	00800244 	movi	r2,9
  8063e4:	11811436 	bltu	r2,r6,806838 <_dtoa_r+0x730>
  8063e8:	00800144 	movi	r2,5
  8063ec:	1184e10e 	bge	r2,r6,807774 <_dtoa_r+0x166c>
  8063f0:	31bfff04 	addi	r6,r6,-4
  8063f4:	d9800315 	stw	r6,12(sp)
  8063f8:	0023883a 	mov	r17,zero
  8063fc:	d9800317 	ldw	r6,12(sp)
  806400:	008000c4 	movi	r2,3
  806404:	30836726 	beq	r6,r2,8071a4 <_dtoa_r+0x109c>
  806408:	1183410e 	bge	r2,r6,807110 <_dtoa_r+0x1008>
  80640c:	d9c00317 	ldw	r7,12(sp)
  806410:	00800104 	movi	r2,4
  806414:	38827c26 	beq	r7,r2,806e08 <_dtoa_r+0xd00>
  806418:	00800144 	movi	r2,5
  80641c:	3884c41e 	bne	r7,r2,807730 <_dtoa_r+0x1628>
  806420:	00800044 	movi	r2,1
  806424:	d8800b15 	stw	r2,44(sp)
  806428:	d8c00517 	ldw	r3,20(sp)
  80642c:	d9002217 	ldw	r4,136(sp)
  806430:	1907883a 	add	r3,r3,r4
  806434:	19800044 	addi	r6,r3,1
  806438:	d8c00c15 	stw	r3,48(sp)
  80643c:	d9800615 	stw	r6,24(sp)
  806440:	0183a40e 	bge	zero,r6,8072d4 <_dtoa_r+0x11cc>
  806444:	d9800617 	ldw	r6,24(sp)
  806448:	3021883a 	mov	r16,r6
  80644c:	e0001115 	stw	zero,68(fp)
  806450:	008005c4 	movi	r2,23
  806454:	1184c92e 	bgeu	r2,r6,80777c <_dtoa_r+0x1674>
  806458:	00c00044 	movi	r3,1
  80645c:	00800104 	movi	r2,4
  806460:	1085883a 	add	r2,r2,r2
  806464:	11000504 	addi	r4,r2,20
  806468:	180b883a 	mov	r5,r3
  80646c:	18c00044 	addi	r3,r3,1
  806470:	313ffb2e 	bgeu	r6,r4,806460 <__alt_mem_onchip_mem+0xff786460>
  806474:	e1401115 	stw	r5,68(fp)
  806478:	e009883a 	mov	r4,fp
  80647c:	08089f00 	call	8089f0 <_Balloc>
  806480:	d8800715 	stw	r2,28(sp)
  806484:	e0801015 	stw	r2,64(fp)
  806488:	00800384 	movi	r2,14
  80648c:	1400f736 	bltu	r2,r16,80686c <_dtoa_r+0x764>
  806490:	8800f626 	beq	r17,zero,80686c <_dtoa_r+0x764>
  806494:	d9c00517 	ldw	r7,20(sp)
  806498:	01c39a0e 	bge	zero,r7,807304 <_dtoa_r+0x11fc>
  80649c:	388003cc 	andi	r2,r7,15
  8064a0:	100490fa 	slli	r2,r2,3
  8064a4:	382bd13a 	srai	r21,r7,4
  8064a8:	00c02074 	movhi	r3,129
  8064ac:	18cdc004 	addi	r3,r3,14080
  8064b0:	1885883a 	add	r2,r3,r2
  8064b4:	a8c0040c 	andi	r3,r21,16
  8064b8:	12400017 	ldw	r9,0(r2)
  8064bc:	12000117 	ldw	r8,4(r2)
  8064c0:	18037926 	beq	r3,zero,8072a8 <_dtoa_r+0x11a0>
  8064c4:	00802074 	movhi	r2,129
  8064c8:	108db604 	addi	r2,r2,14040
  8064cc:	11800817 	ldw	r6,32(r2)
  8064d0:	11c00917 	ldw	r7,36(r2)
  8064d4:	9009883a 	mov	r4,r18
  8064d8:	980b883a 	mov	r5,r19
  8064dc:	da001715 	stw	r8,92(sp)
  8064e0:	da401615 	stw	r9,88(sp)
  8064e4:	080d1a40 	call	80d1a4 <__divdf3>
  8064e8:	da001717 	ldw	r8,92(sp)
  8064ec:	da401617 	ldw	r9,88(sp)
  8064f0:	ad4003cc 	andi	r21,r21,15
  8064f4:	040000c4 	movi	r16,3
  8064f8:	1023883a 	mov	r17,r2
  8064fc:	1829883a 	mov	r20,r3
  806500:	a8001126 	beq	r21,zero,806548 <_dtoa_r+0x440>
  806504:	05c02074 	movhi	r23,129
  806508:	bdcdb604 	addi	r23,r23,14040
  80650c:	4805883a 	mov	r2,r9
  806510:	4007883a 	mov	r3,r8
  806514:	a980004c 	andi	r6,r21,1
  806518:	1009883a 	mov	r4,r2
  80651c:	a82bd07a 	srai	r21,r21,1
  806520:	180b883a 	mov	r5,r3
  806524:	30000426 	beq	r6,zero,806538 <_dtoa_r+0x430>
  806528:	b9800017 	ldw	r6,0(r23)
  80652c:	b9c00117 	ldw	r7,4(r23)
  806530:	84000044 	addi	r16,r16,1
  806534:	080dce40 	call	80dce4 <__muldf3>
  806538:	bdc00204 	addi	r23,r23,8
  80653c:	a83ff51e 	bne	r21,zero,806514 <__alt_mem_onchip_mem+0xff786514>
  806540:	1013883a 	mov	r9,r2
  806544:	1811883a 	mov	r8,r3
  806548:	480d883a 	mov	r6,r9
  80654c:	400f883a 	mov	r7,r8
  806550:	8809883a 	mov	r4,r17
  806554:	a00b883a 	mov	r5,r20
  806558:	080d1a40 	call	80d1a4 <__divdf3>
  80655c:	d8800f15 	stw	r2,60(sp)
  806560:	d8c01015 	stw	r3,64(sp)
  806564:	d8c00e17 	ldw	r3,56(sp)
  806568:	18000626 	beq	r3,zero,806584 <_dtoa_r+0x47c>
  80656c:	d9000f17 	ldw	r4,60(sp)
  806570:	d9401017 	ldw	r5,64(sp)
  806574:	000d883a 	mov	r6,zero
  806578:	01cffc34 	movhi	r7,16368
  80657c:	080dbf00 	call	80dbf0 <__ledf2>
  806580:	10040b16 	blt	r2,zero,8075b0 <_dtoa_r+0x14a8>
  806584:	8009883a 	mov	r4,r16
  806588:	080ed780 	call	80ed78 <__floatsidf>
  80658c:	d9800f17 	ldw	r6,60(sp)
  806590:	d9c01017 	ldw	r7,64(sp)
  806594:	1009883a 	mov	r4,r2
  806598:	180b883a 	mov	r5,r3
  80659c:	080dce40 	call	80dce4 <__muldf3>
  8065a0:	000d883a 	mov	r6,zero
  8065a4:	01d00734 	movhi	r7,16412
  8065a8:	1009883a 	mov	r4,r2
  8065ac:	180b883a 	mov	r5,r3
  8065b0:	080c8f80 	call	80c8f8 <__adddf3>
  8065b4:	1021883a 	mov	r16,r2
  8065b8:	d8800617 	ldw	r2,24(sp)
  8065bc:	047f3034 	movhi	r17,64704
  8065c0:	1c63883a 	add	r17,r3,r17
  8065c4:	10031826 	beq	r2,zero,807228 <_dtoa_r+0x1120>
  8065c8:	d8c00517 	ldw	r3,20(sp)
  8065cc:	db000617 	ldw	r12,24(sp)
  8065d0:	d8c01315 	stw	r3,76(sp)
  8065d4:	d9000b17 	ldw	r4,44(sp)
  8065d8:	20038f26 	beq	r4,zero,807418 <_dtoa_r+0x1310>
  8065dc:	60bfffc4 	addi	r2,r12,-1
  8065e0:	100490fa 	slli	r2,r2,3
  8065e4:	00c02074 	movhi	r3,129
  8065e8:	18cdc004 	addi	r3,r3,14080
  8065ec:	1885883a 	add	r2,r3,r2
  8065f0:	11800017 	ldw	r6,0(r2)
  8065f4:	11c00117 	ldw	r7,4(r2)
  8065f8:	d8800717 	ldw	r2,28(sp)
  8065fc:	0009883a 	mov	r4,zero
  806600:	014ff834 	movhi	r5,16352
  806604:	db001615 	stw	r12,88(sp)
  806608:	15c00044 	addi	r23,r2,1
  80660c:	080d1a40 	call	80d1a4 <__divdf3>
  806610:	800d883a 	mov	r6,r16
  806614:	880f883a 	mov	r7,r17
  806618:	1009883a 	mov	r4,r2
  80661c:	180b883a 	mov	r5,r3
  806620:	080e3fc0 	call	80e3fc <__subdf3>
  806624:	d9401017 	ldw	r5,64(sp)
  806628:	d9000f17 	ldw	r4,60(sp)
  80662c:	102b883a 	mov	r21,r2
  806630:	d8c01215 	stw	r3,72(sp)
  806634:	080ecf80 	call	80ecf8 <__fixdfsi>
  806638:	1009883a 	mov	r4,r2
  80663c:	1029883a 	mov	r20,r2
  806640:	080ed780 	call	80ed78 <__floatsidf>
  806644:	d9000f17 	ldw	r4,60(sp)
  806648:	d9401017 	ldw	r5,64(sp)
  80664c:	100d883a 	mov	r6,r2
  806650:	180f883a 	mov	r7,r3
  806654:	080e3fc0 	call	80e3fc <__subdf3>
  806658:	1823883a 	mov	r17,r3
  80665c:	d8c00717 	ldw	r3,28(sp)
  806660:	d9401217 	ldw	r5,72(sp)
  806664:	a2000c04 	addi	r8,r20,48
  806668:	1021883a 	mov	r16,r2
  80666c:	1a000005 	stb	r8,0(r3)
  806670:	800d883a 	mov	r6,r16
  806674:	880f883a 	mov	r7,r17
  806678:	a809883a 	mov	r4,r21
  80667c:	4029883a 	mov	r20,r8
  806680:	080db140 	call	80db14 <__gedf2>
  806684:	00841d16 	blt	zero,r2,8076fc <_dtoa_r+0x15f4>
  806688:	800d883a 	mov	r6,r16
  80668c:	880f883a 	mov	r7,r17
  806690:	0009883a 	mov	r4,zero
  806694:	014ffc34 	movhi	r5,16368
  806698:	080e3fc0 	call	80e3fc <__subdf3>
  80669c:	d9401217 	ldw	r5,72(sp)
  8066a0:	100d883a 	mov	r6,r2
  8066a4:	180f883a 	mov	r7,r3
  8066a8:	a809883a 	mov	r4,r21
  8066ac:	080db140 	call	80db14 <__gedf2>
  8066b0:	db001617 	ldw	r12,88(sp)
  8066b4:	00840e16 	blt	zero,r2,8076f0 <_dtoa_r+0x15e8>
  8066b8:	00800044 	movi	r2,1
  8066bc:	13006b0e 	bge	r2,r12,80686c <_dtoa_r+0x764>
  8066c0:	d9000717 	ldw	r4,28(sp)
  8066c4:	dd800f15 	stw	r22,60(sp)
  8066c8:	dcc01015 	stw	r19,64(sp)
  8066cc:	2319883a 	add	r12,r4,r12
  8066d0:	dcc01217 	ldw	r19,72(sp)
  8066d4:	602d883a 	mov	r22,r12
  8066d8:	dc801215 	stw	r18,72(sp)
  8066dc:	b825883a 	mov	r18,r23
  8066e0:	00000906 	br	806708 <_dtoa_r+0x600>
  8066e4:	080e3fc0 	call	80e3fc <__subdf3>
  8066e8:	a80d883a 	mov	r6,r21
  8066ec:	980f883a 	mov	r7,r19
  8066f0:	1009883a 	mov	r4,r2
  8066f4:	180b883a 	mov	r5,r3
  8066f8:	080dbf00 	call	80dbf0 <__ledf2>
  8066fc:	1003e816 	blt	r2,zero,8076a0 <_dtoa_r+0x1598>
  806700:	b825883a 	mov	r18,r23
  806704:	bd83e926 	beq	r23,r22,8076ac <_dtoa_r+0x15a4>
  806708:	a809883a 	mov	r4,r21
  80670c:	980b883a 	mov	r5,r19
  806710:	000d883a 	mov	r6,zero
  806714:	01d00934 	movhi	r7,16420
  806718:	080dce40 	call	80dce4 <__muldf3>
  80671c:	000d883a 	mov	r6,zero
  806720:	01d00934 	movhi	r7,16420
  806724:	8009883a 	mov	r4,r16
  806728:	880b883a 	mov	r5,r17
  80672c:	102b883a 	mov	r21,r2
  806730:	1827883a 	mov	r19,r3
  806734:	080dce40 	call	80dce4 <__muldf3>
  806738:	180b883a 	mov	r5,r3
  80673c:	1009883a 	mov	r4,r2
  806740:	1821883a 	mov	r16,r3
  806744:	1023883a 	mov	r17,r2
  806748:	080ecf80 	call	80ecf8 <__fixdfsi>
  80674c:	1009883a 	mov	r4,r2
  806750:	1029883a 	mov	r20,r2
  806754:	080ed780 	call	80ed78 <__floatsidf>
  806758:	8809883a 	mov	r4,r17
  80675c:	800b883a 	mov	r5,r16
  806760:	100d883a 	mov	r6,r2
  806764:	180f883a 	mov	r7,r3
  806768:	080e3fc0 	call	80e3fc <__subdf3>
  80676c:	a5000c04 	addi	r20,r20,48
  806770:	a80d883a 	mov	r6,r21
  806774:	980f883a 	mov	r7,r19
  806778:	1009883a 	mov	r4,r2
  80677c:	180b883a 	mov	r5,r3
  806780:	95000005 	stb	r20,0(r18)
  806784:	1021883a 	mov	r16,r2
  806788:	1823883a 	mov	r17,r3
  80678c:	080dbf00 	call	80dbf0 <__ledf2>
  806790:	bdc00044 	addi	r23,r23,1
  806794:	800d883a 	mov	r6,r16
  806798:	880f883a 	mov	r7,r17
  80679c:	0009883a 	mov	r4,zero
  8067a0:	014ffc34 	movhi	r5,16368
  8067a4:	103fcf0e 	bge	r2,zero,8066e4 <__alt_mem_onchip_mem+0xff7866e4>
  8067a8:	d8c01317 	ldw	r3,76(sp)
  8067ac:	d8c00515 	stw	r3,20(sp)
  8067b0:	d9400917 	ldw	r5,36(sp)
  8067b4:	e009883a 	mov	r4,fp
  8067b8:	0808a980 	call	808a98 <_Bfree>
  8067bc:	d9000517 	ldw	r4,20(sp)
  8067c0:	d9802317 	ldw	r6,140(sp)
  8067c4:	d9c02517 	ldw	r7,148(sp)
  8067c8:	b8000005 	stb	zero,0(r23)
  8067cc:	20800044 	addi	r2,r4,1
  8067d0:	30800015 	stw	r2,0(r6)
  8067d4:	3802aa26 	beq	r7,zero,807280 <_dtoa_r+0x1178>
  8067d8:	3dc00015 	stw	r23,0(r7)
  8067dc:	d8800717 	ldw	r2,28(sp)
  8067e0:	003e7906 	br	8061c8 <__alt_mem_onchip_mem+0xff7861c8>
  8067e4:	00800434 	movhi	r2,16
  8067e8:	10bfffc4 	addi	r2,r2,-1
  8067ec:	88a2703a 	and	r17,r17,r2
  8067f0:	883e851e 	bne	r17,zero,806208 <__alt_mem_onchip_mem+0xff786208>
  8067f4:	00802074 	movhi	r2,129
  8067f8:	108da204 	addi	r2,r2,13960
  8067fc:	003e8406 	br	806210 <__alt_mem_onchip_mem+0xff786210>
  806800:	10c00204 	addi	r3,r2,8
  806804:	003e8706 	br	806224 <__alt_mem_onchip_mem+0xff786224>
  806808:	01400434 	movhi	r5,16
  80680c:	297fffc4 	addi	r5,r5,-1
  806810:	994a703a 	and	r5,r19,r5
  806814:	9009883a 	mov	r4,r18
  806818:	843f0044 	addi	r16,r16,-1023
  80681c:	294ffc34 	orhi	r5,r5,16368
  806820:	dd800217 	ldw	r22,8(sp)
  806824:	d8001115 	stw	zero,68(sp)
  806828:	003ea506 	br	8062c0 <__alt_mem_onchip_mem+0xff7862c0>
  80682c:	00802074 	movhi	r2,129
  806830:	108cf904 	addi	r2,r2,13284
  806834:	003e6406 	br	8061c8 <__alt_mem_onchip_mem+0xff7861c8>
  806838:	e0001115 	stw	zero,68(fp)
  80683c:	000b883a 	mov	r5,zero
  806840:	e009883a 	mov	r4,fp
  806844:	08089f00 	call	8089f0 <_Balloc>
  806848:	01bfffc4 	movi	r6,-1
  80684c:	01c00044 	movi	r7,1
  806850:	d8800715 	stw	r2,28(sp)
  806854:	d9800c15 	stw	r6,48(sp)
  806858:	e0801015 	stw	r2,64(fp)
  80685c:	d8000315 	stw	zero,12(sp)
  806860:	d9c00b15 	stw	r7,44(sp)
  806864:	d9800615 	stw	r6,24(sp)
  806868:	d8002215 	stw	zero,136(sp)
  80686c:	d8800117 	ldw	r2,4(sp)
  806870:	10008916 	blt	r2,zero,806a98 <_dtoa_r+0x990>
  806874:	d9000517 	ldw	r4,20(sp)
  806878:	00c00384 	movi	r3,14
  80687c:	19008616 	blt	r3,r4,806a98 <_dtoa_r+0x990>
  806880:	200490fa 	slli	r2,r4,3
  806884:	00c02074 	movhi	r3,129
  806888:	d9802217 	ldw	r6,136(sp)
  80688c:	18cdc004 	addi	r3,r3,14080
  806890:	1885883a 	add	r2,r3,r2
  806894:	14000017 	ldw	r16,0(r2)
  806898:	14400117 	ldw	r17,4(r2)
  80689c:	30016316 	blt	r6,zero,806e2c <_dtoa_r+0xd24>
  8068a0:	800d883a 	mov	r6,r16
  8068a4:	880f883a 	mov	r7,r17
  8068a8:	9009883a 	mov	r4,r18
  8068ac:	980b883a 	mov	r5,r19
  8068b0:	080d1a40 	call	80d1a4 <__divdf3>
  8068b4:	180b883a 	mov	r5,r3
  8068b8:	1009883a 	mov	r4,r2
  8068bc:	080ecf80 	call	80ecf8 <__fixdfsi>
  8068c0:	1009883a 	mov	r4,r2
  8068c4:	102b883a 	mov	r21,r2
  8068c8:	080ed780 	call	80ed78 <__floatsidf>
  8068cc:	800d883a 	mov	r6,r16
  8068d0:	880f883a 	mov	r7,r17
  8068d4:	1009883a 	mov	r4,r2
  8068d8:	180b883a 	mov	r5,r3
  8068dc:	080dce40 	call	80dce4 <__muldf3>
  8068e0:	100d883a 	mov	r6,r2
  8068e4:	180f883a 	mov	r7,r3
  8068e8:	9009883a 	mov	r4,r18
  8068ec:	980b883a 	mov	r5,r19
  8068f0:	080e3fc0 	call	80e3fc <__subdf3>
  8068f4:	d9c00717 	ldw	r7,28(sp)
  8068f8:	1009883a 	mov	r4,r2
  8068fc:	a8800c04 	addi	r2,r21,48
  806900:	38800005 	stb	r2,0(r7)
  806904:	3dc00044 	addi	r23,r7,1
  806908:	d9c00617 	ldw	r7,24(sp)
  80690c:	01800044 	movi	r6,1
  806910:	180b883a 	mov	r5,r3
  806914:	2005883a 	mov	r2,r4
  806918:	39803826 	beq	r7,r6,8069fc <_dtoa_r+0x8f4>
  80691c:	000d883a 	mov	r6,zero
  806920:	01d00934 	movhi	r7,16420
  806924:	080dce40 	call	80dce4 <__muldf3>
  806928:	000d883a 	mov	r6,zero
  80692c:	000f883a 	mov	r7,zero
  806930:	1009883a 	mov	r4,r2
  806934:	180b883a 	mov	r5,r3
  806938:	1025883a 	mov	r18,r2
  80693c:	1827883a 	mov	r19,r3
  806940:	080da8c0 	call	80da8c <__eqdf2>
  806944:	103f9a26 	beq	r2,zero,8067b0 <__alt_mem_onchip_mem+0xff7867b0>
  806948:	d9c00617 	ldw	r7,24(sp)
  80694c:	d8c00717 	ldw	r3,28(sp)
  806950:	b829883a 	mov	r20,r23
  806954:	38bfffc4 	addi	r2,r7,-1
  806958:	18ad883a 	add	r22,r3,r2
  80695c:	00000a06 	br	806988 <_dtoa_r+0x880>
  806960:	080dce40 	call	80dce4 <__muldf3>
  806964:	000d883a 	mov	r6,zero
  806968:	000f883a 	mov	r7,zero
  80696c:	1009883a 	mov	r4,r2
  806970:	180b883a 	mov	r5,r3
  806974:	1025883a 	mov	r18,r2
  806978:	1827883a 	mov	r19,r3
  80697c:	b829883a 	mov	r20,r23
  806980:	080da8c0 	call	80da8c <__eqdf2>
  806984:	103f8a26 	beq	r2,zero,8067b0 <__alt_mem_onchip_mem+0xff7867b0>
  806988:	800d883a 	mov	r6,r16
  80698c:	880f883a 	mov	r7,r17
  806990:	9009883a 	mov	r4,r18
  806994:	980b883a 	mov	r5,r19
  806998:	080d1a40 	call	80d1a4 <__divdf3>
  80699c:	180b883a 	mov	r5,r3
  8069a0:	1009883a 	mov	r4,r2
  8069a4:	080ecf80 	call	80ecf8 <__fixdfsi>
  8069a8:	1009883a 	mov	r4,r2
  8069ac:	102b883a 	mov	r21,r2
  8069b0:	080ed780 	call	80ed78 <__floatsidf>
  8069b4:	800d883a 	mov	r6,r16
  8069b8:	880f883a 	mov	r7,r17
  8069bc:	1009883a 	mov	r4,r2
  8069c0:	180b883a 	mov	r5,r3
  8069c4:	080dce40 	call	80dce4 <__muldf3>
  8069c8:	100d883a 	mov	r6,r2
  8069cc:	180f883a 	mov	r7,r3
  8069d0:	9009883a 	mov	r4,r18
  8069d4:	980b883a 	mov	r5,r19
  8069d8:	080e3fc0 	call	80e3fc <__subdf3>
  8069dc:	aa000c04 	addi	r8,r21,48
  8069e0:	a2000005 	stb	r8,0(r20)
  8069e4:	000d883a 	mov	r6,zero
  8069e8:	01d00934 	movhi	r7,16420
  8069ec:	1009883a 	mov	r4,r2
  8069f0:	180b883a 	mov	r5,r3
  8069f4:	a5c00044 	addi	r23,r20,1
  8069f8:	b53fd91e 	bne	r22,r20,806960 <__alt_mem_onchip_mem+0xff786960>
  8069fc:	100d883a 	mov	r6,r2
  806a00:	180f883a 	mov	r7,r3
  806a04:	1009883a 	mov	r4,r2
  806a08:	180b883a 	mov	r5,r3
  806a0c:	080c8f80 	call	80c8f8 <__adddf3>
  806a10:	100d883a 	mov	r6,r2
  806a14:	180f883a 	mov	r7,r3
  806a18:	8009883a 	mov	r4,r16
  806a1c:	880b883a 	mov	r5,r17
  806a20:	1027883a 	mov	r19,r2
  806a24:	1825883a 	mov	r18,r3
  806a28:	080dbf00 	call	80dbf0 <__ledf2>
  806a2c:	10000816 	blt	r2,zero,806a50 <_dtoa_r+0x948>
  806a30:	980d883a 	mov	r6,r19
  806a34:	900f883a 	mov	r7,r18
  806a38:	8009883a 	mov	r4,r16
  806a3c:	880b883a 	mov	r5,r17
  806a40:	080da8c0 	call	80da8c <__eqdf2>
  806a44:	103f5a1e 	bne	r2,zero,8067b0 <__alt_mem_onchip_mem+0xff7867b0>
  806a48:	ad40004c 	andi	r21,r21,1
  806a4c:	a83f5826 	beq	r21,zero,8067b0 <__alt_mem_onchip_mem+0xff7867b0>
  806a50:	bd3fffc3 	ldbu	r20,-1(r23)
  806a54:	b8bfffc4 	addi	r2,r23,-1
  806a58:	1007883a 	mov	r3,r2
  806a5c:	01400e44 	movi	r5,57
  806a60:	d9800717 	ldw	r6,28(sp)
  806a64:	00000506 	br	806a7c <_dtoa_r+0x974>
  806a68:	18ffffc4 	addi	r3,r3,-1
  806a6c:	11824726 	beq	r2,r6,80738c <_dtoa_r+0x1284>
  806a70:	1d000003 	ldbu	r20,0(r3)
  806a74:	102f883a 	mov	r23,r2
  806a78:	10bfffc4 	addi	r2,r2,-1
  806a7c:	a1003fcc 	andi	r4,r20,255
  806a80:	2100201c 	xori	r4,r4,128
  806a84:	213fe004 	addi	r4,r4,-128
  806a88:	217ff726 	beq	r4,r5,806a68 <__alt_mem_onchip_mem+0xff786a68>
  806a8c:	a2000044 	addi	r8,r20,1
  806a90:	12000005 	stb	r8,0(r2)
  806a94:	003f4606 	br	8067b0 <__alt_mem_onchip_mem+0xff7867b0>
  806a98:	d9000b17 	ldw	r4,44(sp)
  806a9c:	2000c826 	beq	r4,zero,806dc0 <_dtoa_r+0xcb8>
  806aa0:	d9800317 	ldw	r6,12(sp)
  806aa4:	00c00044 	movi	r3,1
  806aa8:	1980f90e 	bge	r3,r6,806e90 <_dtoa_r+0xd88>
  806aac:	d8800617 	ldw	r2,24(sp)
  806ab0:	d8c00a17 	ldw	r3,40(sp)
  806ab4:	157fffc4 	addi	r21,r2,-1
  806ab8:	1d41f316 	blt	r3,r21,807288 <_dtoa_r+0x1180>
  806abc:	1d6bc83a 	sub	r21,r3,r21
  806ac0:	d9c00617 	ldw	r7,24(sp)
  806ac4:	3802aa16 	blt	r7,zero,807570 <_dtoa_r+0x1468>
  806ac8:	dd000817 	ldw	r20,32(sp)
  806acc:	d8800617 	ldw	r2,24(sp)
  806ad0:	d8c00817 	ldw	r3,32(sp)
  806ad4:	01400044 	movi	r5,1
  806ad8:	e009883a 	mov	r4,fp
  806adc:	1887883a 	add	r3,r3,r2
  806ae0:	d8c00815 	stw	r3,32(sp)
  806ae4:	b0ad883a 	add	r22,r22,r2
  806ae8:	0808dfc0 	call	808dfc <__i2b>
  806aec:	1023883a 	mov	r17,r2
  806af0:	a0000826 	beq	r20,zero,806b14 <_dtoa_r+0xa0c>
  806af4:	0580070e 	bge	zero,r22,806b14 <_dtoa_r+0xa0c>
  806af8:	a005883a 	mov	r2,r20
  806afc:	b500b916 	blt	r22,r20,806de4 <_dtoa_r+0xcdc>
  806b00:	d9000817 	ldw	r4,32(sp)
  806b04:	a0a9c83a 	sub	r20,r20,r2
  806b08:	b0adc83a 	sub	r22,r22,r2
  806b0c:	2089c83a 	sub	r4,r4,r2
  806b10:	d9000815 	stw	r4,32(sp)
  806b14:	d9800a17 	ldw	r6,40(sp)
  806b18:	0181810e 	bge	zero,r6,807120 <_dtoa_r+0x1018>
  806b1c:	d9c00b17 	ldw	r7,44(sp)
  806b20:	3800b326 	beq	r7,zero,806df0 <_dtoa_r+0xce8>
  806b24:	a800b226 	beq	r21,zero,806df0 <_dtoa_r+0xce8>
  806b28:	880b883a 	mov	r5,r17
  806b2c:	a80d883a 	mov	r6,r21
  806b30:	e009883a 	mov	r4,fp
  806b34:	08090300 	call	809030 <__pow5mult>
  806b38:	d9800917 	ldw	r6,36(sp)
  806b3c:	100b883a 	mov	r5,r2
  806b40:	e009883a 	mov	r4,fp
  806b44:	1023883a 	mov	r17,r2
  806b48:	0808e380 	call	808e38 <__multiply>
  806b4c:	1021883a 	mov	r16,r2
  806b50:	d8800a17 	ldw	r2,40(sp)
  806b54:	d9400917 	ldw	r5,36(sp)
  806b58:	e009883a 	mov	r4,fp
  806b5c:	1545c83a 	sub	r2,r2,r21
  806b60:	d8800a15 	stw	r2,40(sp)
  806b64:	0808a980 	call	808a98 <_Bfree>
  806b68:	d8c00a17 	ldw	r3,40(sp)
  806b6c:	18009f1e 	bne	r3,zero,806dec <_dtoa_r+0xce4>
  806b70:	05c00044 	movi	r23,1
  806b74:	e009883a 	mov	r4,fp
  806b78:	b80b883a 	mov	r5,r23
  806b7c:	0808dfc0 	call	808dfc <__i2b>
  806b80:	d9000d17 	ldw	r4,52(sp)
  806b84:	102b883a 	mov	r21,r2
  806b88:	2000ce26 	beq	r4,zero,806ec4 <_dtoa_r+0xdbc>
  806b8c:	200d883a 	mov	r6,r4
  806b90:	100b883a 	mov	r5,r2
  806b94:	e009883a 	mov	r4,fp
  806b98:	08090300 	call	809030 <__pow5mult>
  806b9c:	d9800317 	ldw	r6,12(sp)
  806ba0:	102b883a 	mov	r21,r2
  806ba4:	b981810e 	bge	r23,r6,8071ac <_dtoa_r+0x10a4>
  806ba8:	0027883a 	mov	r19,zero
  806bac:	a8800417 	ldw	r2,16(r21)
  806bb0:	05c00804 	movi	r23,32
  806bb4:	10800104 	addi	r2,r2,4
  806bb8:	1085883a 	add	r2,r2,r2
  806bbc:	1085883a 	add	r2,r2,r2
  806bc0:	a885883a 	add	r2,r21,r2
  806bc4:	11000017 	ldw	r4,0(r2)
  806bc8:	0808ce40 	call	808ce4 <__hi0bits>
  806bcc:	b885c83a 	sub	r2,r23,r2
  806bd0:	1585883a 	add	r2,r2,r22
  806bd4:	108007cc 	andi	r2,r2,31
  806bd8:	1000b326 	beq	r2,zero,806ea8 <_dtoa_r+0xda0>
  806bdc:	00c00804 	movi	r3,32
  806be0:	1887c83a 	sub	r3,r3,r2
  806be4:	01000104 	movi	r4,4
  806be8:	20c2cd0e 	bge	r4,r3,807720 <_dtoa_r+0x1618>
  806bec:	00c00704 	movi	r3,28
  806bf0:	1885c83a 	sub	r2,r3,r2
  806bf4:	d8c00817 	ldw	r3,32(sp)
  806bf8:	a0a9883a 	add	r20,r20,r2
  806bfc:	b0ad883a 	add	r22,r22,r2
  806c00:	1887883a 	add	r3,r3,r2
  806c04:	d8c00815 	stw	r3,32(sp)
  806c08:	d9800817 	ldw	r6,32(sp)
  806c0c:	0180040e 	bge	zero,r6,806c20 <_dtoa_r+0xb18>
  806c10:	800b883a 	mov	r5,r16
  806c14:	e009883a 	mov	r4,fp
  806c18:	08091700 	call	809170 <__lshift>
  806c1c:	1021883a 	mov	r16,r2
  806c20:	0580050e 	bge	zero,r22,806c38 <_dtoa_r+0xb30>
  806c24:	a80b883a 	mov	r5,r21
  806c28:	b00d883a 	mov	r6,r22
  806c2c:	e009883a 	mov	r4,fp
  806c30:	08091700 	call	809170 <__lshift>
  806c34:	102b883a 	mov	r21,r2
  806c38:	d9c00e17 	ldw	r7,56(sp)
  806c3c:	3801211e 	bne	r7,zero,8070c4 <_dtoa_r+0xfbc>
  806c40:	d9800617 	ldw	r6,24(sp)
  806c44:	0181380e 	bge	zero,r6,807128 <_dtoa_r+0x1020>
  806c48:	d8c00b17 	ldw	r3,44(sp)
  806c4c:	1800ab1e 	bne	r3,zero,806efc <_dtoa_r+0xdf4>
  806c50:	dc800717 	ldw	r18,28(sp)
  806c54:	dcc00617 	ldw	r19,24(sp)
  806c58:	9029883a 	mov	r20,r18
  806c5c:	00000206 	br	806c68 <_dtoa_r+0xb60>
  806c60:	0808ac00 	call	808ac0 <__multadd>
  806c64:	1021883a 	mov	r16,r2
  806c68:	a80b883a 	mov	r5,r21
  806c6c:	8009883a 	mov	r4,r16
  806c70:	0805f080 	call	805f08 <quorem>
  806c74:	10800c04 	addi	r2,r2,48
  806c78:	90800005 	stb	r2,0(r18)
  806c7c:	94800044 	addi	r18,r18,1
  806c80:	9507c83a 	sub	r3,r18,r20
  806c84:	000f883a 	mov	r7,zero
  806c88:	01800284 	movi	r6,10
  806c8c:	800b883a 	mov	r5,r16
  806c90:	e009883a 	mov	r4,fp
  806c94:	1cfff216 	blt	r3,r19,806c60 <__alt_mem_onchip_mem+0xff786c60>
  806c98:	1011883a 	mov	r8,r2
  806c9c:	d8800617 	ldw	r2,24(sp)
  806ca0:	0082370e 	bge	zero,r2,807580 <_dtoa_r+0x1478>
  806ca4:	d9000717 	ldw	r4,28(sp)
  806ca8:	0025883a 	mov	r18,zero
  806cac:	20af883a 	add	r23,r4,r2
  806cb0:	01800044 	movi	r6,1
  806cb4:	800b883a 	mov	r5,r16
  806cb8:	e009883a 	mov	r4,fp
  806cbc:	da001715 	stw	r8,92(sp)
  806cc0:	08091700 	call	809170 <__lshift>
  806cc4:	a80b883a 	mov	r5,r21
  806cc8:	1009883a 	mov	r4,r2
  806ccc:	d8800915 	stw	r2,36(sp)
  806cd0:	08092b80 	call	8092b8 <__mcmp>
  806cd4:	da001717 	ldw	r8,92(sp)
  806cd8:	0081800e 	bge	zero,r2,8072dc <_dtoa_r+0x11d4>
  806cdc:	b93fffc3 	ldbu	r4,-1(r23)
  806ce0:	b8bfffc4 	addi	r2,r23,-1
  806ce4:	1007883a 	mov	r3,r2
  806ce8:	01800e44 	movi	r6,57
  806cec:	d9c00717 	ldw	r7,28(sp)
  806cf0:	00000506 	br	806d08 <_dtoa_r+0xc00>
  806cf4:	18ffffc4 	addi	r3,r3,-1
  806cf8:	11c12326 	beq	r2,r7,807188 <_dtoa_r+0x1080>
  806cfc:	19000003 	ldbu	r4,0(r3)
  806d00:	102f883a 	mov	r23,r2
  806d04:	10bfffc4 	addi	r2,r2,-1
  806d08:	21403fcc 	andi	r5,r4,255
  806d0c:	2940201c 	xori	r5,r5,128
  806d10:	297fe004 	addi	r5,r5,-128
  806d14:	29bff726 	beq	r5,r6,806cf4 <__alt_mem_onchip_mem+0xff786cf4>
  806d18:	21000044 	addi	r4,r4,1
  806d1c:	11000005 	stb	r4,0(r2)
  806d20:	a80b883a 	mov	r5,r21
  806d24:	e009883a 	mov	r4,fp
  806d28:	0808a980 	call	808a98 <_Bfree>
  806d2c:	883ea026 	beq	r17,zero,8067b0 <__alt_mem_onchip_mem+0xff7867b0>
  806d30:	90000426 	beq	r18,zero,806d44 <_dtoa_r+0xc3c>
  806d34:	94400326 	beq	r18,r17,806d44 <_dtoa_r+0xc3c>
  806d38:	900b883a 	mov	r5,r18
  806d3c:	e009883a 	mov	r4,fp
  806d40:	0808a980 	call	808a98 <_Bfree>
  806d44:	880b883a 	mov	r5,r17
  806d48:	e009883a 	mov	r4,fp
  806d4c:	0808a980 	call	808a98 <_Bfree>
  806d50:	003e9706 	br	8067b0 <__alt_mem_onchip_mem+0xff7867b0>
  806d54:	01800044 	movi	r6,1
  806d58:	d9800e15 	stw	r6,56(sp)
  806d5c:	003d9606 	br	8063b8 <__alt_mem_onchip_mem+0xff7863b8>
  806d60:	d8800817 	ldw	r2,32(sp)
  806d64:	d8c00517 	ldw	r3,20(sp)
  806d68:	d8000d15 	stw	zero,52(sp)
  806d6c:	10c5c83a 	sub	r2,r2,r3
  806d70:	00c9c83a 	sub	r4,zero,r3
  806d74:	d8800815 	stw	r2,32(sp)
  806d78:	d9000a15 	stw	r4,40(sp)
  806d7c:	003d9706 	br	8063dc <__alt_mem_onchip_mem+0xff7863dc>
  806d80:	05adc83a 	sub	r22,zero,r22
  806d84:	dd800815 	stw	r22,32(sp)
  806d88:	002d883a 	mov	r22,zero
  806d8c:	003d8e06 	br	8063c8 <__alt_mem_onchip_mem+0xff7863c8>
  806d90:	d9000517 	ldw	r4,20(sp)
  806d94:	080ed780 	call	80ed78 <__floatsidf>
  806d98:	100d883a 	mov	r6,r2
  806d9c:	180f883a 	mov	r7,r3
  806da0:	a009883a 	mov	r4,r20
  806da4:	880b883a 	mov	r5,r17
  806da8:	080da8c0 	call	80da8c <__eqdf2>
  806dac:	103d7126 	beq	r2,zero,806374 <__alt_mem_onchip_mem+0xff786374>
  806db0:	d9c00517 	ldw	r7,20(sp)
  806db4:	39ffffc4 	addi	r7,r7,-1
  806db8:	d9c00515 	stw	r7,20(sp)
  806dbc:	003d6d06 	br	806374 <__alt_mem_onchip_mem+0xff786374>
  806dc0:	dd400a17 	ldw	r21,40(sp)
  806dc4:	dd000817 	ldw	r20,32(sp)
  806dc8:	0023883a 	mov	r17,zero
  806dcc:	003f4806 	br	806af0 <__alt_mem_onchip_mem+0xff786af0>
  806dd0:	10e3c83a 	sub	r17,r2,r3
  806dd4:	9448983a 	sll	r4,r18,r17
  806dd8:	003d3206 	br	8062a4 <__alt_mem_onchip_mem+0xff7862a4>
  806ddc:	d8000e15 	stw	zero,56(sp)
  806de0:	003d7506 	br	8063b8 <__alt_mem_onchip_mem+0xff7863b8>
  806de4:	b005883a 	mov	r2,r22
  806de8:	003f4506 	br	806b00 <__alt_mem_onchip_mem+0xff786b00>
  806dec:	dc000915 	stw	r16,36(sp)
  806df0:	d9800a17 	ldw	r6,40(sp)
  806df4:	d9400917 	ldw	r5,36(sp)
  806df8:	e009883a 	mov	r4,fp
  806dfc:	08090300 	call	809030 <__pow5mult>
  806e00:	1021883a 	mov	r16,r2
  806e04:	003f5a06 	br	806b70 <__alt_mem_onchip_mem+0xff786b70>
  806e08:	01c00044 	movi	r7,1
  806e0c:	d9c00b15 	stw	r7,44(sp)
  806e10:	d8802217 	ldw	r2,136(sp)
  806e14:	0081280e 	bge	zero,r2,8072b8 <_dtoa_r+0x11b0>
  806e18:	100d883a 	mov	r6,r2
  806e1c:	1021883a 	mov	r16,r2
  806e20:	d8800c15 	stw	r2,48(sp)
  806e24:	d8800615 	stw	r2,24(sp)
  806e28:	003d8806 	br	80644c <__alt_mem_onchip_mem+0xff78644c>
  806e2c:	d8800617 	ldw	r2,24(sp)
  806e30:	00be9b16 	blt	zero,r2,8068a0 <__alt_mem_onchip_mem+0xff7868a0>
  806e34:	10010f1e 	bne	r2,zero,807274 <_dtoa_r+0x116c>
  806e38:	880b883a 	mov	r5,r17
  806e3c:	000d883a 	mov	r6,zero
  806e40:	01d00534 	movhi	r7,16404
  806e44:	8009883a 	mov	r4,r16
  806e48:	080dce40 	call	80dce4 <__muldf3>
  806e4c:	900d883a 	mov	r6,r18
  806e50:	980f883a 	mov	r7,r19
  806e54:	1009883a 	mov	r4,r2
  806e58:	180b883a 	mov	r5,r3
  806e5c:	080db140 	call	80db14 <__gedf2>
  806e60:	002b883a 	mov	r21,zero
  806e64:	0023883a 	mov	r17,zero
  806e68:	1000bf16 	blt	r2,zero,807168 <_dtoa_r+0x1060>
  806e6c:	d9802217 	ldw	r6,136(sp)
  806e70:	ddc00717 	ldw	r23,28(sp)
  806e74:	018c303a 	nor	r6,zero,r6
  806e78:	d9800515 	stw	r6,20(sp)
  806e7c:	a80b883a 	mov	r5,r21
  806e80:	e009883a 	mov	r4,fp
  806e84:	0808a980 	call	808a98 <_Bfree>
  806e88:	883e4926 	beq	r17,zero,8067b0 <__alt_mem_onchip_mem+0xff7867b0>
  806e8c:	003fad06 	br	806d44 <__alt_mem_onchip_mem+0xff786d44>
  806e90:	d9c01117 	ldw	r7,68(sp)
  806e94:	3801bc26 	beq	r7,zero,807588 <_dtoa_r+0x1480>
  806e98:	10810cc4 	addi	r2,r2,1075
  806e9c:	dd400a17 	ldw	r21,40(sp)
  806ea0:	dd000817 	ldw	r20,32(sp)
  806ea4:	003f0a06 	br	806ad0 <__alt_mem_onchip_mem+0xff786ad0>
  806ea8:	00800704 	movi	r2,28
  806eac:	d9000817 	ldw	r4,32(sp)
  806eb0:	a0a9883a 	add	r20,r20,r2
  806eb4:	b0ad883a 	add	r22,r22,r2
  806eb8:	2089883a 	add	r4,r4,r2
  806ebc:	d9000815 	stw	r4,32(sp)
  806ec0:	003f5106 	br	806c08 <__alt_mem_onchip_mem+0xff786c08>
  806ec4:	d8c00317 	ldw	r3,12(sp)
  806ec8:	b8c1fc0e 	bge	r23,r3,8076bc <_dtoa_r+0x15b4>
  806ecc:	0027883a 	mov	r19,zero
  806ed0:	b805883a 	mov	r2,r23
  806ed4:	003f3e06 	br	806bd0 <__alt_mem_onchip_mem+0xff786bd0>
  806ed8:	880b883a 	mov	r5,r17
  806edc:	e009883a 	mov	r4,fp
  806ee0:	000f883a 	mov	r7,zero
  806ee4:	01800284 	movi	r6,10
  806ee8:	0808ac00 	call	808ac0 <__multadd>
  806eec:	d9000c17 	ldw	r4,48(sp)
  806ef0:	1023883a 	mov	r17,r2
  806ef4:	0102040e 	bge	zero,r4,807708 <_dtoa_r+0x1600>
  806ef8:	d9000615 	stw	r4,24(sp)
  806efc:	0500050e 	bge	zero,r20,806f14 <_dtoa_r+0xe0c>
  806f00:	880b883a 	mov	r5,r17
  806f04:	a00d883a 	mov	r6,r20
  806f08:	e009883a 	mov	r4,fp
  806f0c:	08091700 	call	809170 <__lshift>
  806f10:	1023883a 	mov	r17,r2
  806f14:	9801241e 	bne	r19,zero,8073a8 <_dtoa_r+0x12a0>
  806f18:	8829883a 	mov	r20,r17
  806f1c:	d9000617 	ldw	r4,24(sp)
  806f20:	dcc00717 	ldw	r19,28(sp)
  806f24:	9480004c 	andi	r18,r18,1
  806f28:	20bfffc4 	addi	r2,r4,-1
  806f2c:	9885883a 	add	r2,r19,r2
  806f30:	d8800415 	stw	r2,16(sp)
  806f34:	dc800615 	stw	r18,24(sp)
  806f38:	a80b883a 	mov	r5,r21
  806f3c:	8009883a 	mov	r4,r16
  806f40:	0805f080 	call	805f08 <quorem>
  806f44:	880b883a 	mov	r5,r17
  806f48:	8009883a 	mov	r4,r16
  806f4c:	102f883a 	mov	r23,r2
  806f50:	08092b80 	call	8092b8 <__mcmp>
  806f54:	a80b883a 	mov	r5,r21
  806f58:	a00d883a 	mov	r6,r20
  806f5c:	e009883a 	mov	r4,fp
  806f60:	102d883a 	mov	r22,r2
  806f64:	08093180 	call	809318 <__mdiff>
  806f68:	1007883a 	mov	r3,r2
  806f6c:	10800317 	ldw	r2,12(r2)
  806f70:	bc800c04 	addi	r18,r23,48
  806f74:	180b883a 	mov	r5,r3
  806f78:	10004e1e 	bne	r2,zero,8070b4 <_dtoa_r+0xfac>
  806f7c:	8009883a 	mov	r4,r16
  806f80:	d8c01615 	stw	r3,88(sp)
  806f84:	08092b80 	call	8092b8 <__mcmp>
  806f88:	d8c01617 	ldw	r3,88(sp)
  806f8c:	e009883a 	mov	r4,fp
  806f90:	d8801615 	stw	r2,88(sp)
  806f94:	180b883a 	mov	r5,r3
  806f98:	0808a980 	call	808a98 <_Bfree>
  806f9c:	d8801617 	ldw	r2,88(sp)
  806fa0:	1000041e 	bne	r2,zero,806fb4 <_dtoa_r+0xeac>
  806fa4:	d9800317 	ldw	r6,12(sp)
  806fa8:	3000021e 	bne	r6,zero,806fb4 <_dtoa_r+0xeac>
  806fac:	d8c00617 	ldw	r3,24(sp)
  806fb0:	18003726 	beq	r3,zero,807090 <_dtoa_r+0xf88>
  806fb4:	b0002016 	blt	r22,zero,807038 <_dtoa_r+0xf30>
  806fb8:	b000041e 	bne	r22,zero,806fcc <_dtoa_r+0xec4>
  806fbc:	d9000317 	ldw	r4,12(sp)
  806fc0:	2000021e 	bne	r4,zero,806fcc <_dtoa_r+0xec4>
  806fc4:	d8c00617 	ldw	r3,24(sp)
  806fc8:	18001b26 	beq	r3,zero,807038 <_dtoa_r+0xf30>
  806fcc:	00810716 	blt	zero,r2,8073ec <_dtoa_r+0x12e4>
  806fd0:	d8c00417 	ldw	r3,16(sp)
  806fd4:	9d800044 	addi	r22,r19,1
  806fd8:	9c800005 	stb	r18,0(r19)
  806fdc:	b02f883a 	mov	r23,r22
  806fe0:	98c10626 	beq	r19,r3,8073fc <_dtoa_r+0x12f4>
  806fe4:	800b883a 	mov	r5,r16
  806fe8:	000f883a 	mov	r7,zero
  806fec:	01800284 	movi	r6,10
  806ff0:	e009883a 	mov	r4,fp
  806ff4:	0808ac00 	call	808ac0 <__multadd>
  806ff8:	1021883a 	mov	r16,r2
  806ffc:	000f883a 	mov	r7,zero
  807000:	01800284 	movi	r6,10
  807004:	880b883a 	mov	r5,r17
  807008:	e009883a 	mov	r4,fp
  80700c:	8d002526 	beq	r17,r20,8070a4 <_dtoa_r+0xf9c>
  807010:	0808ac00 	call	808ac0 <__multadd>
  807014:	a00b883a 	mov	r5,r20
  807018:	000f883a 	mov	r7,zero
  80701c:	01800284 	movi	r6,10
  807020:	e009883a 	mov	r4,fp
  807024:	1023883a 	mov	r17,r2
  807028:	0808ac00 	call	808ac0 <__multadd>
  80702c:	1029883a 	mov	r20,r2
  807030:	b027883a 	mov	r19,r22
  807034:	003fc006 	br	806f38 <__alt_mem_onchip_mem+0xff786f38>
  807038:	9011883a 	mov	r8,r18
  80703c:	00800e0e 	bge	zero,r2,807078 <_dtoa_r+0xf70>
  807040:	800b883a 	mov	r5,r16
  807044:	01800044 	movi	r6,1
  807048:	e009883a 	mov	r4,fp
  80704c:	da001715 	stw	r8,92(sp)
  807050:	08091700 	call	809170 <__lshift>
  807054:	a80b883a 	mov	r5,r21
  807058:	1009883a 	mov	r4,r2
  80705c:	1021883a 	mov	r16,r2
  807060:	08092b80 	call	8092b8 <__mcmp>
  807064:	da001717 	ldw	r8,92(sp)
  807068:	0081960e 	bge	zero,r2,8076c4 <_dtoa_r+0x15bc>
  80706c:	00800e44 	movi	r2,57
  807070:	40817026 	beq	r8,r2,807634 <_dtoa_r+0x152c>
  807074:	ba000c44 	addi	r8,r23,49
  807078:	8825883a 	mov	r18,r17
  80707c:	9dc00044 	addi	r23,r19,1
  807080:	9a000005 	stb	r8,0(r19)
  807084:	a023883a 	mov	r17,r20
  807088:	dc000915 	stw	r16,36(sp)
  80708c:	003f2406 	br	806d20 <__alt_mem_onchip_mem+0xff786d20>
  807090:	00800e44 	movi	r2,57
  807094:	9011883a 	mov	r8,r18
  807098:	90816626 	beq	r18,r2,807634 <_dtoa_r+0x152c>
  80709c:	05bff516 	blt	zero,r22,807074 <__alt_mem_onchip_mem+0xff787074>
  8070a0:	003ff506 	br	807078 <__alt_mem_onchip_mem+0xff787078>
  8070a4:	0808ac00 	call	808ac0 <__multadd>
  8070a8:	1023883a 	mov	r17,r2
  8070ac:	1029883a 	mov	r20,r2
  8070b0:	003fdf06 	br	807030 <__alt_mem_onchip_mem+0xff787030>
  8070b4:	e009883a 	mov	r4,fp
  8070b8:	0808a980 	call	808a98 <_Bfree>
  8070bc:	00800044 	movi	r2,1
  8070c0:	003fbc06 	br	806fb4 <__alt_mem_onchip_mem+0xff786fb4>
  8070c4:	a80b883a 	mov	r5,r21
  8070c8:	8009883a 	mov	r4,r16
  8070cc:	08092b80 	call	8092b8 <__mcmp>
  8070d0:	103edb0e 	bge	r2,zero,806c40 <__alt_mem_onchip_mem+0xff786c40>
  8070d4:	800b883a 	mov	r5,r16
  8070d8:	000f883a 	mov	r7,zero
  8070dc:	01800284 	movi	r6,10
  8070e0:	e009883a 	mov	r4,fp
  8070e4:	0808ac00 	call	808ac0 <__multadd>
  8070e8:	1021883a 	mov	r16,r2
  8070ec:	d8800517 	ldw	r2,20(sp)
  8070f0:	d8c00b17 	ldw	r3,44(sp)
  8070f4:	10bfffc4 	addi	r2,r2,-1
  8070f8:	d8800515 	stw	r2,20(sp)
  8070fc:	183f761e 	bne	r3,zero,806ed8 <__alt_mem_onchip_mem+0xff786ed8>
  807100:	d9000c17 	ldw	r4,48(sp)
  807104:	0101730e 	bge	zero,r4,8076d4 <_dtoa_r+0x15cc>
  807108:	d9000615 	stw	r4,24(sp)
  80710c:	003ed006 	br	806c50 <__alt_mem_onchip_mem+0xff786c50>
  807110:	00800084 	movi	r2,2
  807114:	3081861e 	bne	r6,r2,807730 <_dtoa_r+0x1628>
  807118:	d8000b15 	stw	zero,44(sp)
  80711c:	003f3c06 	br	806e10 <__alt_mem_onchip_mem+0xff786e10>
  807120:	dc000917 	ldw	r16,36(sp)
  807124:	003e9206 	br	806b70 <__alt_mem_onchip_mem+0xff786b70>
  807128:	d9c00317 	ldw	r7,12(sp)
  80712c:	00800084 	movi	r2,2
  807130:	11fec50e 	bge	r2,r7,806c48 <__alt_mem_onchip_mem+0xff786c48>
  807134:	d9000617 	ldw	r4,24(sp)
  807138:	20013c1e 	bne	r4,zero,80762c <_dtoa_r+0x1524>
  80713c:	a80b883a 	mov	r5,r21
  807140:	000f883a 	mov	r7,zero
  807144:	01800144 	movi	r6,5
  807148:	e009883a 	mov	r4,fp
  80714c:	0808ac00 	call	808ac0 <__multadd>
  807150:	100b883a 	mov	r5,r2
  807154:	8009883a 	mov	r4,r16
  807158:	102b883a 	mov	r21,r2
  80715c:	08092b80 	call	8092b8 <__mcmp>
  807160:	dc000915 	stw	r16,36(sp)
  807164:	00bf410e 	bge	zero,r2,806e6c <__alt_mem_onchip_mem+0xff786e6c>
  807168:	d9c00717 	ldw	r7,28(sp)
  80716c:	00800c44 	movi	r2,49
  807170:	38800005 	stb	r2,0(r7)
  807174:	d8800517 	ldw	r2,20(sp)
  807178:	3dc00044 	addi	r23,r7,1
  80717c:	10800044 	addi	r2,r2,1
  807180:	d8800515 	stw	r2,20(sp)
  807184:	003f3d06 	br	806e7c <__alt_mem_onchip_mem+0xff786e7c>
  807188:	d9800517 	ldw	r6,20(sp)
  80718c:	d9c00717 	ldw	r7,28(sp)
  807190:	00800c44 	movi	r2,49
  807194:	31800044 	addi	r6,r6,1
  807198:	d9800515 	stw	r6,20(sp)
  80719c:	38800005 	stb	r2,0(r7)
  8071a0:	003edf06 	br	806d20 <__alt_mem_onchip_mem+0xff786d20>
  8071a4:	d8000b15 	stw	zero,44(sp)
  8071a8:	003c9f06 	br	806428 <__alt_mem_onchip_mem+0xff786428>
  8071ac:	903e7e1e 	bne	r18,zero,806ba8 <__alt_mem_onchip_mem+0xff786ba8>
  8071b0:	00800434 	movhi	r2,16
  8071b4:	10bfffc4 	addi	r2,r2,-1
  8071b8:	9884703a 	and	r2,r19,r2
  8071bc:	1000ea1e 	bne	r2,zero,807568 <_dtoa_r+0x1460>
  8071c0:	9cdffc2c 	andhi	r19,r19,32752
  8071c4:	9800e826 	beq	r19,zero,807568 <_dtoa_r+0x1460>
  8071c8:	d9c00817 	ldw	r7,32(sp)
  8071cc:	b5800044 	addi	r22,r22,1
  8071d0:	04c00044 	movi	r19,1
  8071d4:	39c00044 	addi	r7,r7,1
  8071d8:	d9c00815 	stw	r7,32(sp)
  8071dc:	d8800d17 	ldw	r2,52(sp)
  8071e0:	103e721e 	bne	r2,zero,806bac <__alt_mem_onchip_mem+0xff786bac>
  8071e4:	00800044 	movi	r2,1
  8071e8:	003e7906 	br	806bd0 <__alt_mem_onchip_mem+0xff786bd0>
  8071ec:	8009883a 	mov	r4,r16
  8071f0:	080ed780 	call	80ed78 <__floatsidf>
  8071f4:	d9800f17 	ldw	r6,60(sp)
  8071f8:	d9c01017 	ldw	r7,64(sp)
  8071fc:	1009883a 	mov	r4,r2
  807200:	180b883a 	mov	r5,r3
  807204:	080dce40 	call	80dce4 <__muldf3>
  807208:	000d883a 	mov	r6,zero
  80720c:	01d00734 	movhi	r7,16412
  807210:	1009883a 	mov	r4,r2
  807214:	180b883a 	mov	r5,r3
  807218:	080c8f80 	call	80c8f8 <__adddf3>
  80721c:	047f3034 	movhi	r17,64704
  807220:	1021883a 	mov	r16,r2
  807224:	1c63883a 	add	r17,r3,r17
  807228:	d9000f17 	ldw	r4,60(sp)
  80722c:	d9401017 	ldw	r5,64(sp)
  807230:	000d883a 	mov	r6,zero
  807234:	01d00534 	movhi	r7,16404
  807238:	080e3fc0 	call	80e3fc <__subdf3>
  80723c:	800d883a 	mov	r6,r16
  807240:	880f883a 	mov	r7,r17
  807244:	1009883a 	mov	r4,r2
  807248:	180b883a 	mov	r5,r3
  80724c:	102b883a 	mov	r21,r2
  807250:	1829883a 	mov	r20,r3
  807254:	080db140 	call	80db14 <__gedf2>
  807258:	00806c16 	blt	zero,r2,80740c <_dtoa_r+0x1304>
  80725c:	89e0003c 	xorhi	r7,r17,32768
  807260:	800d883a 	mov	r6,r16
  807264:	a809883a 	mov	r4,r21
  807268:	a00b883a 	mov	r5,r20
  80726c:	080dbf00 	call	80dbf0 <__ledf2>
  807270:	103d7e0e 	bge	r2,zero,80686c <__alt_mem_onchip_mem+0xff78686c>
  807274:	002b883a 	mov	r21,zero
  807278:	0023883a 	mov	r17,zero
  80727c:	003efb06 	br	806e6c <__alt_mem_onchip_mem+0xff786e6c>
  807280:	d8800717 	ldw	r2,28(sp)
  807284:	003bd006 	br	8061c8 <__alt_mem_onchip_mem+0xff7861c8>
  807288:	d9000a17 	ldw	r4,40(sp)
  80728c:	d9800d17 	ldw	r6,52(sp)
  807290:	dd400a15 	stw	r21,40(sp)
  807294:	a905c83a 	sub	r2,r21,r4
  807298:	308d883a 	add	r6,r6,r2
  80729c:	d9800d15 	stw	r6,52(sp)
  8072a0:	002b883a 	mov	r21,zero
  8072a4:	003e0606 	br	806ac0 <__alt_mem_onchip_mem+0xff786ac0>
  8072a8:	9023883a 	mov	r17,r18
  8072ac:	9829883a 	mov	r20,r19
  8072b0:	04000084 	movi	r16,2
  8072b4:	003c9206 	br	806500 <__alt_mem_onchip_mem+0xff786500>
  8072b8:	04000044 	movi	r16,1
  8072bc:	dc000c15 	stw	r16,48(sp)
  8072c0:	dc000615 	stw	r16,24(sp)
  8072c4:	dc002215 	stw	r16,136(sp)
  8072c8:	e0001115 	stw	zero,68(fp)
  8072cc:	000b883a 	mov	r5,zero
  8072d0:	003c6906 	br	806478 <__alt_mem_onchip_mem+0xff786478>
  8072d4:	3021883a 	mov	r16,r6
  8072d8:	003ffb06 	br	8072c8 <__alt_mem_onchip_mem+0xff7872c8>
  8072dc:	1000021e 	bne	r2,zero,8072e8 <_dtoa_r+0x11e0>
  8072e0:	4200004c 	andi	r8,r8,1
  8072e4:	403e7d1e 	bne	r8,zero,806cdc <__alt_mem_onchip_mem+0xff786cdc>
  8072e8:	01000c04 	movi	r4,48
  8072ec:	00000106 	br	8072f4 <_dtoa_r+0x11ec>
  8072f0:	102f883a 	mov	r23,r2
  8072f4:	b8bfffc4 	addi	r2,r23,-1
  8072f8:	10c00007 	ldb	r3,0(r2)
  8072fc:	193ffc26 	beq	r3,r4,8072f0 <__alt_mem_onchip_mem+0xff7872f0>
  807300:	003e8706 	br	806d20 <__alt_mem_onchip_mem+0xff786d20>
  807304:	d8800517 	ldw	r2,20(sp)
  807308:	00a3c83a 	sub	r17,zero,r2
  80730c:	8800a426 	beq	r17,zero,8075a0 <_dtoa_r+0x1498>
  807310:	888003cc 	andi	r2,r17,15
  807314:	100490fa 	slli	r2,r2,3
  807318:	00c02074 	movhi	r3,129
  80731c:	18cdc004 	addi	r3,r3,14080
  807320:	1885883a 	add	r2,r3,r2
  807324:	11800017 	ldw	r6,0(r2)
  807328:	11c00117 	ldw	r7,4(r2)
  80732c:	9009883a 	mov	r4,r18
  807330:	980b883a 	mov	r5,r19
  807334:	8823d13a 	srai	r17,r17,4
  807338:	080dce40 	call	80dce4 <__muldf3>
  80733c:	d8800f15 	stw	r2,60(sp)
  807340:	d8c01015 	stw	r3,64(sp)
  807344:	8800e826 	beq	r17,zero,8076e8 <_dtoa_r+0x15e0>
  807348:	05002074 	movhi	r20,129
  80734c:	a50db604 	addi	r20,r20,14040
  807350:	04000084 	movi	r16,2
  807354:	8980004c 	andi	r6,r17,1
  807358:	1009883a 	mov	r4,r2
  80735c:	8823d07a 	srai	r17,r17,1
  807360:	180b883a 	mov	r5,r3
  807364:	30000426 	beq	r6,zero,807378 <_dtoa_r+0x1270>
  807368:	a1800017 	ldw	r6,0(r20)
  80736c:	a1c00117 	ldw	r7,4(r20)
  807370:	84000044 	addi	r16,r16,1
  807374:	080dce40 	call	80dce4 <__muldf3>
  807378:	a5000204 	addi	r20,r20,8
  80737c:	883ff51e 	bne	r17,zero,807354 <__alt_mem_onchip_mem+0xff787354>
  807380:	d8800f15 	stw	r2,60(sp)
  807384:	d8c01015 	stw	r3,64(sp)
  807388:	003c7606 	br	806564 <__alt_mem_onchip_mem+0xff786564>
  80738c:	00c00c04 	movi	r3,48
  807390:	10c00005 	stb	r3,0(r2)
  807394:	d8c00517 	ldw	r3,20(sp)
  807398:	bd3fffc3 	ldbu	r20,-1(r23)
  80739c:	18c00044 	addi	r3,r3,1
  8073a0:	d8c00515 	stw	r3,20(sp)
  8073a4:	003db906 	br	806a8c <__alt_mem_onchip_mem+0xff786a8c>
  8073a8:	89400117 	ldw	r5,4(r17)
  8073ac:	e009883a 	mov	r4,fp
  8073b0:	08089f00 	call	8089f0 <_Balloc>
  8073b4:	89800417 	ldw	r6,16(r17)
  8073b8:	89400304 	addi	r5,r17,12
  8073bc:	11000304 	addi	r4,r2,12
  8073c0:	31800084 	addi	r6,r6,2
  8073c4:	318d883a 	add	r6,r6,r6
  8073c8:	318d883a 	add	r6,r6,r6
  8073cc:	1027883a 	mov	r19,r2
  8073d0:	080874c0 	call	80874c <memcpy>
  8073d4:	01800044 	movi	r6,1
  8073d8:	980b883a 	mov	r5,r19
  8073dc:	e009883a 	mov	r4,fp
  8073e0:	08091700 	call	809170 <__lshift>
  8073e4:	1029883a 	mov	r20,r2
  8073e8:	003ecc06 	br	806f1c <__alt_mem_onchip_mem+0xff786f1c>
  8073ec:	00800e44 	movi	r2,57
  8073f0:	90809026 	beq	r18,r2,807634 <_dtoa_r+0x152c>
  8073f4:	92000044 	addi	r8,r18,1
  8073f8:	003f1f06 	br	807078 <__alt_mem_onchip_mem+0xff787078>
  8073fc:	9011883a 	mov	r8,r18
  807400:	8825883a 	mov	r18,r17
  807404:	a023883a 	mov	r17,r20
  807408:	003e2906 	br	806cb0 <__alt_mem_onchip_mem+0xff786cb0>
  80740c:	002b883a 	mov	r21,zero
  807410:	0023883a 	mov	r17,zero
  807414:	003f5406 	br	807168 <__alt_mem_onchip_mem+0xff787168>
  807418:	61bfffc4 	addi	r6,r12,-1
  80741c:	300490fa 	slli	r2,r6,3
  807420:	00c02074 	movhi	r3,129
  807424:	18cdc004 	addi	r3,r3,14080
  807428:	1885883a 	add	r2,r3,r2
  80742c:	11000017 	ldw	r4,0(r2)
  807430:	11400117 	ldw	r5,4(r2)
  807434:	d8800717 	ldw	r2,28(sp)
  807438:	880f883a 	mov	r7,r17
  80743c:	d9801215 	stw	r6,72(sp)
  807440:	800d883a 	mov	r6,r16
  807444:	db001615 	stw	r12,88(sp)
  807448:	15c00044 	addi	r23,r2,1
  80744c:	080dce40 	call	80dce4 <__muldf3>
  807450:	d9401017 	ldw	r5,64(sp)
  807454:	d9000f17 	ldw	r4,60(sp)
  807458:	d8c01515 	stw	r3,84(sp)
  80745c:	d8801415 	stw	r2,80(sp)
  807460:	080ecf80 	call	80ecf8 <__fixdfsi>
  807464:	1009883a 	mov	r4,r2
  807468:	1021883a 	mov	r16,r2
  80746c:	080ed780 	call	80ed78 <__floatsidf>
  807470:	d9000f17 	ldw	r4,60(sp)
  807474:	d9401017 	ldw	r5,64(sp)
  807478:	100d883a 	mov	r6,r2
  80747c:	180f883a 	mov	r7,r3
  807480:	080e3fc0 	call	80e3fc <__subdf3>
  807484:	1829883a 	mov	r20,r3
  807488:	d8c00717 	ldw	r3,28(sp)
  80748c:	84000c04 	addi	r16,r16,48
  807490:	1023883a 	mov	r17,r2
  807494:	1c000005 	stb	r16,0(r3)
  807498:	db001617 	ldw	r12,88(sp)
  80749c:	00800044 	movi	r2,1
  8074a0:	60802226 	beq	r12,r2,80752c <_dtoa_r+0x1424>
  8074a4:	d9c00717 	ldw	r7,28(sp)
  8074a8:	8805883a 	mov	r2,r17
  8074ac:	b82b883a 	mov	r21,r23
  8074b0:	3b19883a 	add	r12,r7,r12
  8074b4:	6023883a 	mov	r17,r12
  8074b8:	a007883a 	mov	r3,r20
  8074bc:	dc800f15 	stw	r18,60(sp)
  8074c0:	000d883a 	mov	r6,zero
  8074c4:	01d00934 	movhi	r7,16420
  8074c8:	1009883a 	mov	r4,r2
  8074cc:	180b883a 	mov	r5,r3
  8074d0:	080dce40 	call	80dce4 <__muldf3>
  8074d4:	180b883a 	mov	r5,r3
  8074d8:	1009883a 	mov	r4,r2
  8074dc:	1829883a 	mov	r20,r3
  8074e0:	1025883a 	mov	r18,r2
  8074e4:	080ecf80 	call	80ecf8 <__fixdfsi>
  8074e8:	1009883a 	mov	r4,r2
  8074ec:	1021883a 	mov	r16,r2
  8074f0:	080ed780 	call	80ed78 <__floatsidf>
  8074f4:	100d883a 	mov	r6,r2
  8074f8:	180f883a 	mov	r7,r3
  8074fc:	9009883a 	mov	r4,r18
  807500:	a00b883a 	mov	r5,r20
  807504:	84000c04 	addi	r16,r16,48
  807508:	080e3fc0 	call	80e3fc <__subdf3>
  80750c:	ad400044 	addi	r21,r21,1
  807510:	ac3fffc5 	stb	r16,-1(r21)
  807514:	ac7fea1e 	bne	r21,r17,8074c0 <__alt_mem_onchip_mem+0xff7874c0>
  807518:	1023883a 	mov	r17,r2
  80751c:	d8801217 	ldw	r2,72(sp)
  807520:	dc800f17 	ldw	r18,60(sp)
  807524:	1829883a 	mov	r20,r3
  807528:	b8af883a 	add	r23,r23,r2
  80752c:	d9001417 	ldw	r4,80(sp)
  807530:	d9401517 	ldw	r5,84(sp)
  807534:	000d883a 	mov	r6,zero
  807538:	01cff834 	movhi	r7,16352
  80753c:	080c8f80 	call	80c8f8 <__adddf3>
  807540:	880d883a 	mov	r6,r17
  807544:	a00f883a 	mov	r7,r20
  807548:	1009883a 	mov	r4,r2
  80754c:	180b883a 	mov	r5,r3
  807550:	080dbf00 	call	80dbf0 <__ledf2>
  807554:	10003e0e 	bge	r2,zero,807650 <_dtoa_r+0x1548>
  807558:	d9001317 	ldw	r4,76(sp)
  80755c:	bd3fffc3 	ldbu	r20,-1(r23)
  807560:	d9000515 	stw	r4,20(sp)
  807564:	003d3b06 	br	806a54 <__alt_mem_onchip_mem+0xff786a54>
  807568:	0027883a 	mov	r19,zero
  80756c:	003f1b06 	br	8071dc <__alt_mem_onchip_mem+0xff7871dc>
  807570:	d8800817 	ldw	r2,32(sp)
  807574:	11e9c83a 	sub	r20,r2,r7
  807578:	0005883a 	mov	r2,zero
  80757c:	003d5406 	br	806ad0 <__alt_mem_onchip_mem+0xff786ad0>
  807580:	00800044 	movi	r2,1
  807584:	003dc706 	br	806ca4 <__alt_mem_onchip_mem+0xff786ca4>
  807588:	d8c00217 	ldw	r3,8(sp)
  80758c:	00800d84 	movi	r2,54
  807590:	dd400a17 	ldw	r21,40(sp)
  807594:	10c5c83a 	sub	r2,r2,r3
  807598:	dd000817 	ldw	r20,32(sp)
  80759c:	003d4c06 	br	806ad0 <__alt_mem_onchip_mem+0xff786ad0>
  8075a0:	dc800f15 	stw	r18,60(sp)
  8075a4:	dcc01015 	stw	r19,64(sp)
  8075a8:	04000084 	movi	r16,2
  8075ac:	003bed06 	br	806564 <__alt_mem_onchip_mem+0xff786564>
  8075b0:	d9000617 	ldw	r4,24(sp)
  8075b4:	203f0d26 	beq	r4,zero,8071ec <__alt_mem_onchip_mem+0xff7871ec>
  8075b8:	d9800c17 	ldw	r6,48(sp)
  8075bc:	01bcab0e 	bge	zero,r6,80686c <__alt_mem_onchip_mem+0xff78686c>
  8075c0:	d9401017 	ldw	r5,64(sp)
  8075c4:	d9000f17 	ldw	r4,60(sp)
  8075c8:	000d883a 	mov	r6,zero
  8075cc:	01d00934 	movhi	r7,16420
  8075d0:	080dce40 	call	80dce4 <__muldf3>
  8075d4:	81000044 	addi	r4,r16,1
  8075d8:	d8800f15 	stw	r2,60(sp)
  8075dc:	d8c01015 	stw	r3,64(sp)
  8075e0:	080ed780 	call	80ed78 <__floatsidf>
  8075e4:	d9800f17 	ldw	r6,60(sp)
  8075e8:	d9c01017 	ldw	r7,64(sp)
  8075ec:	1009883a 	mov	r4,r2
  8075f0:	180b883a 	mov	r5,r3
  8075f4:	080dce40 	call	80dce4 <__muldf3>
  8075f8:	01d00734 	movhi	r7,16412
  8075fc:	000d883a 	mov	r6,zero
  807600:	1009883a 	mov	r4,r2
  807604:	180b883a 	mov	r5,r3
  807608:	080c8f80 	call	80c8f8 <__adddf3>
  80760c:	d9c00517 	ldw	r7,20(sp)
  807610:	047f3034 	movhi	r17,64704
  807614:	1021883a 	mov	r16,r2
  807618:	39ffffc4 	addi	r7,r7,-1
  80761c:	d9c01315 	stw	r7,76(sp)
  807620:	1c63883a 	add	r17,r3,r17
  807624:	db000c17 	ldw	r12,48(sp)
  807628:	003bea06 	br	8065d4 <__alt_mem_onchip_mem+0xff7865d4>
  80762c:	dc000915 	stw	r16,36(sp)
  807630:	003e0e06 	br	806e6c <__alt_mem_onchip_mem+0xff786e6c>
  807634:	01000e44 	movi	r4,57
  807638:	8825883a 	mov	r18,r17
  80763c:	9dc00044 	addi	r23,r19,1
  807640:	99000005 	stb	r4,0(r19)
  807644:	a023883a 	mov	r17,r20
  807648:	dc000915 	stw	r16,36(sp)
  80764c:	003da406 	br	806ce0 <__alt_mem_onchip_mem+0xff786ce0>
  807650:	d9801417 	ldw	r6,80(sp)
  807654:	d9c01517 	ldw	r7,84(sp)
  807658:	0009883a 	mov	r4,zero
  80765c:	014ff834 	movhi	r5,16352
  807660:	080e3fc0 	call	80e3fc <__subdf3>
  807664:	880d883a 	mov	r6,r17
  807668:	a00f883a 	mov	r7,r20
  80766c:	1009883a 	mov	r4,r2
  807670:	180b883a 	mov	r5,r3
  807674:	080db140 	call	80db14 <__gedf2>
  807678:	00bc7c0e 	bge	zero,r2,80686c <__alt_mem_onchip_mem+0xff78686c>
  80767c:	01000c04 	movi	r4,48
  807680:	00000106 	br	807688 <_dtoa_r+0x1580>
  807684:	102f883a 	mov	r23,r2
  807688:	b8bfffc4 	addi	r2,r23,-1
  80768c:	10c00007 	ldb	r3,0(r2)
  807690:	193ffc26 	beq	r3,r4,807684 <__alt_mem_onchip_mem+0xff787684>
  807694:	d9801317 	ldw	r6,76(sp)
  807698:	d9800515 	stw	r6,20(sp)
  80769c:	003c4406 	br	8067b0 <__alt_mem_onchip_mem+0xff7867b0>
  8076a0:	d9801317 	ldw	r6,76(sp)
  8076a4:	d9800515 	stw	r6,20(sp)
  8076a8:	003cea06 	br	806a54 <__alt_mem_onchip_mem+0xff786a54>
  8076ac:	dd800f17 	ldw	r22,60(sp)
  8076b0:	dcc01017 	ldw	r19,64(sp)
  8076b4:	dc801217 	ldw	r18,72(sp)
  8076b8:	003c6c06 	br	80686c <__alt_mem_onchip_mem+0xff78686c>
  8076bc:	903e031e 	bne	r18,zero,806ecc <__alt_mem_onchip_mem+0xff786ecc>
  8076c0:	003ebb06 	br	8071b0 <__alt_mem_onchip_mem+0xff7871b0>
  8076c4:	103e6c1e 	bne	r2,zero,807078 <__alt_mem_onchip_mem+0xff787078>
  8076c8:	4080004c 	andi	r2,r8,1
  8076cc:	103e6a26 	beq	r2,zero,807078 <__alt_mem_onchip_mem+0xff787078>
  8076d0:	003e6606 	br	80706c <__alt_mem_onchip_mem+0xff78706c>
  8076d4:	d8c00317 	ldw	r3,12(sp)
  8076d8:	00800084 	movi	r2,2
  8076dc:	10c02916 	blt	r2,r3,807784 <_dtoa_r+0x167c>
  8076e0:	d9000c17 	ldw	r4,48(sp)
  8076e4:	003e8806 	br	807108 <__alt_mem_onchip_mem+0xff787108>
  8076e8:	04000084 	movi	r16,2
  8076ec:	003b9d06 	br	806564 <__alt_mem_onchip_mem+0xff786564>
  8076f0:	d9001317 	ldw	r4,76(sp)
  8076f4:	d9000515 	stw	r4,20(sp)
  8076f8:	003cd606 	br	806a54 <__alt_mem_onchip_mem+0xff786a54>
  8076fc:	d8801317 	ldw	r2,76(sp)
  807700:	d8800515 	stw	r2,20(sp)
  807704:	003c2a06 	br	8067b0 <__alt_mem_onchip_mem+0xff7867b0>
  807708:	d9800317 	ldw	r6,12(sp)
  80770c:	00800084 	movi	r2,2
  807710:	11801516 	blt	r2,r6,807768 <_dtoa_r+0x1660>
  807714:	d9c00c17 	ldw	r7,48(sp)
  807718:	d9c00615 	stw	r7,24(sp)
  80771c:	003df706 	br	806efc <__alt_mem_onchip_mem+0xff786efc>
  807720:	193d3926 	beq	r3,r4,806c08 <__alt_mem_onchip_mem+0xff786c08>
  807724:	00c00f04 	movi	r3,60
  807728:	1885c83a 	sub	r2,r3,r2
  80772c:	003ddf06 	br	806eac <__alt_mem_onchip_mem+0xff786eac>
  807730:	e009883a 	mov	r4,fp
  807734:	e0001115 	stw	zero,68(fp)
  807738:	000b883a 	mov	r5,zero
  80773c:	08089f00 	call	8089f0 <_Balloc>
  807740:	d8800715 	stw	r2,28(sp)
  807744:	d8c00717 	ldw	r3,28(sp)
  807748:	00bfffc4 	movi	r2,-1
  80774c:	01000044 	movi	r4,1
  807750:	d8800c15 	stw	r2,48(sp)
  807754:	e0c01015 	stw	r3,64(fp)
  807758:	d9000b15 	stw	r4,44(sp)
  80775c:	d8800615 	stw	r2,24(sp)
  807760:	d8002215 	stw	zero,136(sp)
  807764:	003c4106 	br	80686c <__alt_mem_onchip_mem+0xff78686c>
  807768:	d8c00c17 	ldw	r3,48(sp)
  80776c:	d8c00615 	stw	r3,24(sp)
  807770:	003e7006 	br	807134 <__alt_mem_onchip_mem+0xff787134>
  807774:	04400044 	movi	r17,1
  807778:	003b2006 	br	8063fc <__alt_mem_onchip_mem+0xff7863fc>
  80777c:	000b883a 	mov	r5,zero
  807780:	003b3d06 	br	806478 <__alt_mem_onchip_mem+0xff786478>
  807784:	d8800c17 	ldw	r2,48(sp)
  807788:	d8800615 	stw	r2,24(sp)
  80778c:	003e6906 	br	807134 <__alt_mem_onchip_mem+0xff787134>

00807790 <_fclose_r>:
  807790:	28003926 	beq	r5,zero,807878 <_fclose_r+0xe8>
  807794:	defffc04 	addi	sp,sp,-16
  807798:	dc400115 	stw	r17,4(sp)
  80779c:	dc000015 	stw	r16,0(sp)
  8077a0:	dfc00315 	stw	ra,12(sp)
  8077a4:	dc800215 	stw	r18,8(sp)
  8077a8:	2023883a 	mov	r17,r4
  8077ac:	2821883a 	mov	r16,r5
  8077b0:	20000226 	beq	r4,zero,8077bc <_fclose_r+0x2c>
  8077b4:	20800e17 	ldw	r2,56(r4)
  8077b8:	10002726 	beq	r2,zero,807858 <_fclose_r+0xc8>
  8077bc:	8080030f 	ldh	r2,12(r16)
  8077c0:	1000071e 	bne	r2,zero,8077e0 <_fclose_r+0x50>
  8077c4:	0005883a 	mov	r2,zero
  8077c8:	dfc00317 	ldw	ra,12(sp)
  8077cc:	dc800217 	ldw	r18,8(sp)
  8077d0:	dc400117 	ldw	r17,4(sp)
  8077d4:	dc000017 	ldw	r16,0(sp)
  8077d8:	dec00404 	addi	sp,sp,16
  8077dc:	f800283a 	ret
  8077e0:	800b883a 	mov	r5,r16
  8077e4:	8809883a 	mov	r4,r17
  8077e8:	08078940 	call	807894 <__sflush_r>
  8077ec:	1025883a 	mov	r18,r2
  8077f0:	80800b17 	ldw	r2,44(r16)
  8077f4:	10000426 	beq	r2,zero,807808 <_fclose_r+0x78>
  8077f8:	81400717 	ldw	r5,28(r16)
  8077fc:	8809883a 	mov	r4,r17
  807800:	103ee83a 	callr	r2
  807804:	10001616 	blt	r2,zero,807860 <_fclose_r+0xd0>
  807808:	8080030b 	ldhu	r2,12(r16)
  80780c:	1080200c 	andi	r2,r2,128
  807810:	1000151e 	bne	r2,zero,807868 <_fclose_r+0xd8>
  807814:	81400c17 	ldw	r5,48(r16)
  807818:	28000526 	beq	r5,zero,807830 <_fclose_r+0xa0>
  80781c:	80801004 	addi	r2,r16,64
  807820:	28800226 	beq	r5,r2,80782c <_fclose_r+0x9c>
  807824:	8809883a 	mov	r4,r17
  807828:	0807d0c0 	call	807d0c <_free_r>
  80782c:	80000c15 	stw	zero,48(r16)
  807830:	81401117 	ldw	r5,68(r16)
  807834:	28000326 	beq	r5,zero,807844 <_fclose_r+0xb4>
  807838:	8809883a 	mov	r4,r17
  80783c:	0807d0c0 	call	807d0c <_free_r>
  807840:	80001115 	stw	zero,68(r16)
  807844:	0801ab80 	call	801ab8 <__sfp_lock_acquire>
  807848:	8000030d 	sth	zero,12(r16)
  80784c:	0801abc0 	call	801abc <__sfp_lock_release>
  807850:	9005883a 	mov	r2,r18
  807854:	003fdc06 	br	8077c8 <__alt_mem_onchip_mem+0xff7877c8>
  807858:	0801aa80 	call	801aa8 <__sinit>
  80785c:	003fd706 	br	8077bc <__alt_mem_onchip_mem+0xff7877bc>
  807860:	04bfffc4 	movi	r18,-1
  807864:	003fe806 	br	807808 <__alt_mem_onchip_mem+0xff787808>
  807868:	81400417 	ldw	r5,16(r16)
  80786c:	8809883a 	mov	r4,r17
  807870:	0807d0c0 	call	807d0c <_free_r>
  807874:	003fe706 	br	807814 <__alt_mem_onchip_mem+0xff787814>
  807878:	0005883a 	mov	r2,zero
  80787c:	f800283a 	ret

00807880 <fclose>:
  807880:	00802074 	movhi	r2,129
  807884:	10957804 	addi	r2,r2,21984
  807888:	200b883a 	mov	r5,r4
  80788c:	11000017 	ldw	r4,0(r2)
  807890:	08077901 	jmpi	807790 <_fclose_r>

00807894 <__sflush_r>:
  807894:	2880030b 	ldhu	r2,12(r5)
  807898:	defffb04 	addi	sp,sp,-20
  80789c:	dcc00315 	stw	r19,12(sp)
  8078a0:	dc400115 	stw	r17,4(sp)
  8078a4:	dfc00415 	stw	ra,16(sp)
  8078a8:	dc800215 	stw	r18,8(sp)
  8078ac:	dc000015 	stw	r16,0(sp)
  8078b0:	10c0020c 	andi	r3,r2,8
  8078b4:	2823883a 	mov	r17,r5
  8078b8:	2027883a 	mov	r19,r4
  8078bc:	1800311e 	bne	r3,zero,807984 <__sflush_r+0xf0>
  8078c0:	28c00117 	ldw	r3,4(r5)
  8078c4:	10820014 	ori	r2,r2,2048
  8078c8:	2880030d 	sth	r2,12(r5)
  8078cc:	00c04b0e 	bge	zero,r3,8079fc <__sflush_r+0x168>
  8078d0:	8a000a17 	ldw	r8,40(r17)
  8078d4:	40002326 	beq	r8,zero,807964 <__sflush_r+0xd0>
  8078d8:	9c000017 	ldw	r16,0(r19)
  8078dc:	10c4000c 	andi	r3,r2,4096
  8078e0:	98000015 	stw	zero,0(r19)
  8078e4:	18004826 	beq	r3,zero,807a08 <__sflush_r+0x174>
  8078e8:	89801417 	ldw	r6,80(r17)
  8078ec:	10c0010c 	andi	r3,r2,4
  8078f0:	18000626 	beq	r3,zero,80790c <__sflush_r+0x78>
  8078f4:	88c00117 	ldw	r3,4(r17)
  8078f8:	88800c17 	ldw	r2,48(r17)
  8078fc:	30cdc83a 	sub	r6,r6,r3
  807900:	10000226 	beq	r2,zero,80790c <__sflush_r+0x78>
  807904:	88800f17 	ldw	r2,60(r17)
  807908:	308dc83a 	sub	r6,r6,r2
  80790c:	89400717 	ldw	r5,28(r17)
  807910:	000f883a 	mov	r7,zero
  807914:	9809883a 	mov	r4,r19
  807918:	403ee83a 	callr	r8
  80791c:	00ffffc4 	movi	r3,-1
  807920:	10c04426 	beq	r2,r3,807a34 <__sflush_r+0x1a0>
  807924:	88c0030b 	ldhu	r3,12(r17)
  807928:	89000417 	ldw	r4,16(r17)
  80792c:	88000115 	stw	zero,4(r17)
  807930:	197dffcc 	andi	r5,r3,63487
  807934:	8940030d 	sth	r5,12(r17)
  807938:	89000015 	stw	r4,0(r17)
  80793c:	18c4000c 	andi	r3,r3,4096
  807940:	18002c1e 	bne	r3,zero,8079f4 <__sflush_r+0x160>
  807944:	89400c17 	ldw	r5,48(r17)
  807948:	9c000015 	stw	r16,0(r19)
  80794c:	28000526 	beq	r5,zero,807964 <__sflush_r+0xd0>
  807950:	88801004 	addi	r2,r17,64
  807954:	28800226 	beq	r5,r2,807960 <__sflush_r+0xcc>
  807958:	9809883a 	mov	r4,r19
  80795c:	0807d0c0 	call	807d0c <_free_r>
  807960:	88000c15 	stw	zero,48(r17)
  807964:	0005883a 	mov	r2,zero
  807968:	dfc00417 	ldw	ra,16(sp)
  80796c:	dcc00317 	ldw	r19,12(sp)
  807970:	dc800217 	ldw	r18,8(sp)
  807974:	dc400117 	ldw	r17,4(sp)
  807978:	dc000017 	ldw	r16,0(sp)
  80797c:	dec00504 	addi	sp,sp,20
  807980:	f800283a 	ret
  807984:	2c800417 	ldw	r18,16(r5)
  807988:	903ff626 	beq	r18,zero,807964 <__alt_mem_onchip_mem+0xff787964>
  80798c:	2c000017 	ldw	r16,0(r5)
  807990:	108000cc 	andi	r2,r2,3
  807994:	2c800015 	stw	r18,0(r5)
  807998:	84a1c83a 	sub	r16,r16,r18
  80799c:	1000131e 	bne	r2,zero,8079ec <__sflush_r+0x158>
  8079a0:	28800517 	ldw	r2,20(r5)
  8079a4:	88800215 	stw	r2,8(r17)
  8079a8:	04000316 	blt	zero,r16,8079b8 <__sflush_r+0x124>
  8079ac:	003fed06 	br	807964 <__alt_mem_onchip_mem+0xff787964>
  8079b0:	90a5883a 	add	r18,r18,r2
  8079b4:	043feb0e 	bge	zero,r16,807964 <__alt_mem_onchip_mem+0xff787964>
  8079b8:	88800917 	ldw	r2,36(r17)
  8079bc:	89400717 	ldw	r5,28(r17)
  8079c0:	800f883a 	mov	r7,r16
  8079c4:	900d883a 	mov	r6,r18
  8079c8:	9809883a 	mov	r4,r19
  8079cc:	103ee83a 	callr	r2
  8079d0:	80a1c83a 	sub	r16,r16,r2
  8079d4:	00bff616 	blt	zero,r2,8079b0 <__alt_mem_onchip_mem+0xff7879b0>
  8079d8:	88c0030b 	ldhu	r3,12(r17)
  8079dc:	00bfffc4 	movi	r2,-1
  8079e0:	18c01014 	ori	r3,r3,64
  8079e4:	88c0030d 	sth	r3,12(r17)
  8079e8:	003fdf06 	br	807968 <__alt_mem_onchip_mem+0xff787968>
  8079ec:	0005883a 	mov	r2,zero
  8079f0:	003fec06 	br	8079a4 <__alt_mem_onchip_mem+0xff7879a4>
  8079f4:	88801415 	stw	r2,80(r17)
  8079f8:	003fd206 	br	807944 <__alt_mem_onchip_mem+0xff787944>
  8079fc:	28c00f17 	ldw	r3,60(r5)
  807a00:	00ffb316 	blt	zero,r3,8078d0 <__alt_mem_onchip_mem+0xff7878d0>
  807a04:	003fd706 	br	807964 <__alt_mem_onchip_mem+0xff787964>
  807a08:	89400717 	ldw	r5,28(r17)
  807a0c:	000d883a 	mov	r6,zero
  807a10:	01c00044 	movi	r7,1
  807a14:	9809883a 	mov	r4,r19
  807a18:	403ee83a 	callr	r8
  807a1c:	100d883a 	mov	r6,r2
  807a20:	00bfffc4 	movi	r2,-1
  807a24:	30801426 	beq	r6,r2,807a78 <__sflush_r+0x1e4>
  807a28:	8880030b 	ldhu	r2,12(r17)
  807a2c:	8a000a17 	ldw	r8,40(r17)
  807a30:	003fae06 	br	8078ec <__alt_mem_onchip_mem+0xff7878ec>
  807a34:	98c00017 	ldw	r3,0(r19)
  807a38:	183fba26 	beq	r3,zero,807924 <__alt_mem_onchip_mem+0xff787924>
  807a3c:	01000744 	movi	r4,29
  807a40:	19000626 	beq	r3,r4,807a5c <__sflush_r+0x1c8>
  807a44:	01000584 	movi	r4,22
  807a48:	19000426 	beq	r3,r4,807a5c <__sflush_r+0x1c8>
  807a4c:	88c0030b 	ldhu	r3,12(r17)
  807a50:	18c01014 	ori	r3,r3,64
  807a54:	88c0030d 	sth	r3,12(r17)
  807a58:	003fc306 	br	807968 <__alt_mem_onchip_mem+0xff787968>
  807a5c:	8880030b 	ldhu	r2,12(r17)
  807a60:	88c00417 	ldw	r3,16(r17)
  807a64:	88000115 	stw	zero,4(r17)
  807a68:	10bdffcc 	andi	r2,r2,63487
  807a6c:	8880030d 	sth	r2,12(r17)
  807a70:	88c00015 	stw	r3,0(r17)
  807a74:	003fb306 	br	807944 <__alt_mem_onchip_mem+0xff787944>
  807a78:	98800017 	ldw	r2,0(r19)
  807a7c:	103fea26 	beq	r2,zero,807a28 <__alt_mem_onchip_mem+0xff787a28>
  807a80:	00c00744 	movi	r3,29
  807a84:	10c00226 	beq	r2,r3,807a90 <__sflush_r+0x1fc>
  807a88:	00c00584 	movi	r3,22
  807a8c:	10c0031e 	bne	r2,r3,807a9c <__sflush_r+0x208>
  807a90:	9c000015 	stw	r16,0(r19)
  807a94:	0005883a 	mov	r2,zero
  807a98:	003fb306 	br	807968 <__alt_mem_onchip_mem+0xff787968>
  807a9c:	88c0030b 	ldhu	r3,12(r17)
  807aa0:	3005883a 	mov	r2,r6
  807aa4:	18c01014 	ori	r3,r3,64
  807aa8:	88c0030d 	sth	r3,12(r17)
  807aac:	003fae06 	br	807968 <__alt_mem_onchip_mem+0xff787968>

00807ab0 <_fflush_r>:
  807ab0:	defffd04 	addi	sp,sp,-12
  807ab4:	dc000115 	stw	r16,4(sp)
  807ab8:	dfc00215 	stw	ra,8(sp)
  807abc:	2021883a 	mov	r16,r4
  807ac0:	20000226 	beq	r4,zero,807acc <_fflush_r+0x1c>
  807ac4:	20800e17 	ldw	r2,56(r4)
  807ac8:	10000c26 	beq	r2,zero,807afc <_fflush_r+0x4c>
  807acc:	2880030f 	ldh	r2,12(r5)
  807ad0:	1000051e 	bne	r2,zero,807ae8 <_fflush_r+0x38>
  807ad4:	0005883a 	mov	r2,zero
  807ad8:	dfc00217 	ldw	ra,8(sp)
  807adc:	dc000117 	ldw	r16,4(sp)
  807ae0:	dec00304 	addi	sp,sp,12
  807ae4:	f800283a 	ret
  807ae8:	8009883a 	mov	r4,r16
  807aec:	dfc00217 	ldw	ra,8(sp)
  807af0:	dc000117 	ldw	r16,4(sp)
  807af4:	dec00304 	addi	sp,sp,12
  807af8:	08078941 	jmpi	807894 <__sflush_r>
  807afc:	d9400015 	stw	r5,0(sp)
  807b00:	0801aa80 	call	801aa8 <__sinit>
  807b04:	d9400017 	ldw	r5,0(sp)
  807b08:	003ff006 	br	807acc <__alt_mem_onchip_mem+0xff787acc>

00807b0c <fflush>:
  807b0c:	20000526 	beq	r4,zero,807b24 <fflush+0x18>
  807b10:	00802074 	movhi	r2,129
  807b14:	10957804 	addi	r2,r2,21984
  807b18:	200b883a 	mov	r5,r4
  807b1c:	11000017 	ldw	r4,0(r2)
  807b20:	0807ab01 	jmpi	807ab0 <_fflush_r>
  807b24:	00802074 	movhi	r2,129
  807b28:	10957704 	addi	r2,r2,21980
  807b2c:	11000017 	ldw	r4,0(r2)
  807b30:	01402034 	movhi	r5,128
  807b34:	295eac04 	addi	r5,r5,31408
  807b38:	08022901 	jmpi	802290 <_fwalk_reent>

00807b3c <__sflags>:
  807b3c:	28800007 	ldb	r2,0(r5)
  807b40:	00c01c84 	movi	r3,114
  807b44:	10c02426 	beq	r2,r3,807bd8 <__sflags+0x9c>
  807b48:	00c01dc4 	movi	r3,119
  807b4c:	10c01e26 	beq	r2,r3,807bc8 <__sflags+0x8c>
  807b50:	00c01844 	movi	r3,97
  807b54:	10c00426 	beq	r2,r3,807b68 <__sflags+0x2c>
  807b58:	00800584 	movi	r2,22
  807b5c:	20800015 	stw	r2,0(r4)
  807b60:	0005883a 	mov	r2,zero
  807b64:	f800283a 	ret
  807b68:	02c08204 	movi	r11,520
  807b6c:	01000044 	movi	r4,1
  807b70:	00804204 	movi	r2,264
  807b74:	01c00ac4 	movi	r7,43
  807b78:	02bff8c4 	movi	r10,-29
  807b7c:	027fff04 	movi	r9,-4
  807b80:	02001e04 	movi	r8,120
  807b84:	29400044 	addi	r5,r5,1
  807b88:	28c00007 	ldb	r3,0(r5)
  807b8c:	18000626 	beq	r3,zero,807ba8 <__sflags+0x6c>
  807b90:	19c00826 	beq	r3,r7,807bb4 <__sflags+0x78>
  807b94:	1a3ffb1e 	bne	r3,r8,807b84 <__alt_mem_onchip_mem+0xff787b84>
  807b98:	29400044 	addi	r5,r5,1
  807b9c:	28c00007 	ldb	r3,0(r5)
  807ba0:	21020014 	ori	r4,r4,2048
  807ba4:	183ffa1e 	bne	r3,zero,807b90 <__alt_mem_onchip_mem+0xff787b90>
  807ba8:	22c8b03a 	or	r4,r4,r11
  807bac:	31000015 	stw	r4,0(r6)
  807bb0:	f800283a 	ret
  807bb4:	1284703a 	and	r2,r2,r10
  807bb8:	2248703a 	and	r4,r4,r9
  807bbc:	10800414 	ori	r2,r2,16
  807bc0:	21000094 	ori	r4,r4,2
  807bc4:	003fef06 	br	807b84 <__alt_mem_onchip_mem+0xff787b84>
  807bc8:	02c18004 	movi	r11,1536
  807bcc:	01000044 	movi	r4,1
  807bd0:	00800204 	movi	r2,8
  807bd4:	003fe706 	br	807b74 <__alt_mem_onchip_mem+0xff787b74>
  807bd8:	0017883a 	mov	r11,zero
  807bdc:	0009883a 	mov	r4,zero
  807be0:	00800104 	movi	r2,4
  807be4:	003fe306 	br	807b74 <__alt_mem_onchip_mem+0xff787b74>

00807be8 <_malloc_trim_r>:
  807be8:	defffb04 	addi	sp,sp,-20
  807bec:	dcc00315 	stw	r19,12(sp)
  807bf0:	04c02074 	movhi	r19,129
  807bf4:	dc800215 	stw	r18,8(sp)
  807bf8:	dc400115 	stw	r17,4(sp)
  807bfc:	dc000015 	stw	r16,0(sp)
  807c00:	dfc00415 	stw	ra,16(sp)
  807c04:	2821883a 	mov	r16,r5
  807c08:	9ccf5404 	addi	r19,r19,15696
  807c0c:	2025883a 	mov	r18,r4
  807c10:	080f7880 	call	80f788 <__malloc_lock>
  807c14:	98800217 	ldw	r2,8(r19)
  807c18:	14400117 	ldw	r17,4(r2)
  807c1c:	00bfff04 	movi	r2,-4
  807c20:	88a2703a 	and	r17,r17,r2
  807c24:	8c21c83a 	sub	r16,r17,r16
  807c28:	8403fbc4 	addi	r16,r16,4079
  807c2c:	8020d33a 	srli	r16,r16,12
  807c30:	0083ffc4 	movi	r2,4095
  807c34:	843fffc4 	addi	r16,r16,-1
  807c38:	8020933a 	slli	r16,r16,12
  807c3c:	1400060e 	bge	r2,r16,807c58 <_malloc_trim_r+0x70>
  807c40:	000b883a 	mov	r5,zero
  807c44:	9009883a 	mov	r4,r18
  807c48:	08034380 	call	803438 <_sbrk_r>
  807c4c:	98c00217 	ldw	r3,8(r19)
  807c50:	1c47883a 	add	r3,r3,r17
  807c54:	10c00a26 	beq	r2,r3,807c80 <_malloc_trim_r+0x98>
  807c58:	9009883a 	mov	r4,r18
  807c5c:	080f7ac0 	call	80f7ac <__malloc_unlock>
  807c60:	0005883a 	mov	r2,zero
  807c64:	dfc00417 	ldw	ra,16(sp)
  807c68:	dcc00317 	ldw	r19,12(sp)
  807c6c:	dc800217 	ldw	r18,8(sp)
  807c70:	dc400117 	ldw	r17,4(sp)
  807c74:	dc000017 	ldw	r16,0(sp)
  807c78:	dec00504 	addi	sp,sp,20
  807c7c:	f800283a 	ret
  807c80:	040bc83a 	sub	r5,zero,r16
  807c84:	9009883a 	mov	r4,r18
  807c88:	08034380 	call	803438 <_sbrk_r>
  807c8c:	00ffffc4 	movi	r3,-1
  807c90:	10c00d26 	beq	r2,r3,807cc8 <_malloc_trim_r+0xe0>
  807c94:	00c02074 	movhi	r3,129
  807c98:	18dce204 	addi	r3,r3,29576
  807c9c:	18800017 	ldw	r2,0(r3)
  807ca0:	99000217 	ldw	r4,8(r19)
  807ca4:	8c23c83a 	sub	r17,r17,r16
  807ca8:	8c400054 	ori	r17,r17,1
  807cac:	1421c83a 	sub	r16,r2,r16
  807cb0:	24400115 	stw	r17,4(r4)
  807cb4:	9009883a 	mov	r4,r18
  807cb8:	1c000015 	stw	r16,0(r3)
  807cbc:	080f7ac0 	call	80f7ac <__malloc_unlock>
  807cc0:	00800044 	movi	r2,1
  807cc4:	003fe706 	br	807c64 <__alt_mem_onchip_mem+0xff787c64>
  807cc8:	000b883a 	mov	r5,zero
  807ccc:	9009883a 	mov	r4,r18
  807cd0:	08034380 	call	803438 <_sbrk_r>
  807cd4:	99000217 	ldw	r4,8(r19)
  807cd8:	014003c4 	movi	r5,15
  807cdc:	1107c83a 	sub	r3,r2,r4
  807ce0:	28ffdd0e 	bge	r5,r3,807c58 <__alt_mem_onchip_mem+0xff787c58>
  807ce4:	01402074 	movhi	r5,129
  807ce8:	29557904 	addi	r5,r5,21988
  807cec:	29400017 	ldw	r5,0(r5)
  807cf0:	18c00054 	ori	r3,r3,1
  807cf4:	20c00115 	stw	r3,4(r4)
  807cf8:	00c02074 	movhi	r3,129
  807cfc:	1145c83a 	sub	r2,r2,r5
  807d00:	18dce204 	addi	r3,r3,29576
  807d04:	18800015 	stw	r2,0(r3)
  807d08:	003fd306 	br	807c58 <__alt_mem_onchip_mem+0xff787c58>

00807d0c <_free_r>:
  807d0c:	28004126 	beq	r5,zero,807e14 <_free_r+0x108>
  807d10:	defffd04 	addi	sp,sp,-12
  807d14:	dc400115 	stw	r17,4(sp)
  807d18:	dc000015 	stw	r16,0(sp)
  807d1c:	2023883a 	mov	r17,r4
  807d20:	2821883a 	mov	r16,r5
  807d24:	dfc00215 	stw	ra,8(sp)
  807d28:	080f7880 	call	80f788 <__malloc_lock>
  807d2c:	81ffff17 	ldw	r7,-4(r16)
  807d30:	00bfff84 	movi	r2,-2
  807d34:	01002074 	movhi	r4,129
  807d38:	81bffe04 	addi	r6,r16,-8
  807d3c:	3884703a 	and	r2,r7,r2
  807d40:	210f5404 	addi	r4,r4,15696
  807d44:	308b883a 	add	r5,r6,r2
  807d48:	2a400117 	ldw	r9,4(r5)
  807d4c:	22000217 	ldw	r8,8(r4)
  807d50:	00ffff04 	movi	r3,-4
  807d54:	48c6703a 	and	r3,r9,r3
  807d58:	2a005726 	beq	r5,r8,807eb8 <_free_r+0x1ac>
  807d5c:	28c00115 	stw	r3,4(r5)
  807d60:	39c0004c 	andi	r7,r7,1
  807d64:	3800091e 	bne	r7,zero,807d8c <_free_r+0x80>
  807d68:	823ffe17 	ldw	r8,-8(r16)
  807d6c:	22400204 	addi	r9,r4,8
  807d70:	320dc83a 	sub	r6,r6,r8
  807d74:	31c00217 	ldw	r7,8(r6)
  807d78:	1205883a 	add	r2,r2,r8
  807d7c:	3a406526 	beq	r7,r9,807f14 <_free_r+0x208>
  807d80:	32000317 	ldw	r8,12(r6)
  807d84:	3a000315 	stw	r8,12(r7)
  807d88:	41c00215 	stw	r7,8(r8)
  807d8c:	28cf883a 	add	r7,r5,r3
  807d90:	39c00117 	ldw	r7,4(r7)
  807d94:	39c0004c 	andi	r7,r7,1
  807d98:	38003a26 	beq	r7,zero,807e84 <_free_r+0x178>
  807d9c:	10c00054 	ori	r3,r2,1
  807da0:	30c00115 	stw	r3,4(r6)
  807da4:	3087883a 	add	r3,r6,r2
  807da8:	18800015 	stw	r2,0(r3)
  807dac:	00c07fc4 	movi	r3,511
  807db0:	18801936 	bltu	r3,r2,807e18 <_free_r+0x10c>
  807db4:	1004d0fa 	srli	r2,r2,3
  807db8:	01c00044 	movi	r7,1
  807dbc:	21400117 	ldw	r5,4(r4)
  807dc0:	10c00044 	addi	r3,r2,1
  807dc4:	18c7883a 	add	r3,r3,r3
  807dc8:	1005d0ba 	srai	r2,r2,2
  807dcc:	18c7883a 	add	r3,r3,r3
  807dd0:	18c7883a 	add	r3,r3,r3
  807dd4:	1907883a 	add	r3,r3,r4
  807dd8:	3884983a 	sll	r2,r7,r2
  807ddc:	19c00017 	ldw	r7,0(r3)
  807de0:	1a3ffe04 	addi	r8,r3,-8
  807de4:	1144b03a 	or	r2,r2,r5
  807de8:	32000315 	stw	r8,12(r6)
  807dec:	31c00215 	stw	r7,8(r6)
  807df0:	20800115 	stw	r2,4(r4)
  807df4:	19800015 	stw	r6,0(r3)
  807df8:	39800315 	stw	r6,12(r7)
  807dfc:	8809883a 	mov	r4,r17
  807e00:	dfc00217 	ldw	ra,8(sp)
  807e04:	dc400117 	ldw	r17,4(sp)
  807e08:	dc000017 	ldw	r16,0(sp)
  807e0c:	dec00304 	addi	sp,sp,12
  807e10:	080f7ac1 	jmpi	80f7ac <__malloc_unlock>
  807e14:	f800283a 	ret
  807e18:	100ad27a 	srli	r5,r2,9
  807e1c:	00c00104 	movi	r3,4
  807e20:	19404a36 	bltu	r3,r5,807f4c <_free_r+0x240>
  807e24:	100ad1ba 	srli	r5,r2,6
  807e28:	28c00e44 	addi	r3,r5,57
  807e2c:	18c7883a 	add	r3,r3,r3
  807e30:	29400e04 	addi	r5,r5,56
  807e34:	18c7883a 	add	r3,r3,r3
  807e38:	18c7883a 	add	r3,r3,r3
  807e3c:	1909883a 	add	r4,r3,r4
  807e40:	20c00017 	ldw	r3,0(r4)
  807e44:	01c02074 	movhi	r7,129
  807e48:	213ffe04 	addi	r4,r4,-8
  807e4c:	39cf5404 	addi	r7,r7,15696
  807e50:	20c04426 	beq	r4,r3,807f64 <_free_r+0x258>
  807e54:	01ffff04 	movi	r7,-4
  807e58:	19400117 	ldw	r5,4(r3)
  807e5c:	29ca703a 	and	r5,r5,r7
  807e60:	1140022e 	bgeu	r2,r5,807e6c <_free_r+0x160>
  807e64:	18c00217 	ldw	r3,8(r3)
  807e68:	20fffb1e 	bne	r4,r3,807e58 <__alt_mem_onchip_mem+0xff787e58>
  807e6c:	19000317 	ldw	r4,12(r3)
  807e70:	31000315 	stw	r4,12(r6)
  807e74:	30c00215 	stw	r3,8(r6)
  807e78:	21800215 	stw	r6,8(r4)
  807e7c:	19800315 	stw	r6,12(r3)
  807e80:	003fde06 	br	807dfc <__alt_mem_onchip_mem+0xff787dfc>
  807e84:	29c00217 	ldw	r7,8(r5)
  807e88:	10c5883a 	add	r2,r2,r3
  807e8c:	00c02074 	movhi	r3,129
  807e90:	18cf5604 	addi	r3,r3,15704
  807e94:	38c03b26 	beq	r7,r3,807f84 <_free_r+0x278>
  807e98:	2a000317 	ldw	r8,12(r5)
  807e9c:	11400054 	ori	r5,r2,1
  807ea0:	3087883a 	add	r3,r6,r2
  807ea4:	3a000315 	stw	r8,12(r7)
  807ea8:	41c00215 	stw	r7,8(r8)
  807eac:	31400115 	stw	r5,4(r6)
  807eb0:	18800015 	stw	r2,0(r3)
  807eb4:	003fbd06 	br	807dac <__alt_mem_onchip_mem+0xff787dac>
  807eb8:	39c0004c 	andi	r7,r7,1
  807ebc:	10c5883a 	add	r2,r2,r3
  807ec0:	3800071e 	bne	r7,zero,807ee0 <_free_r+0x1d4>
  807ec4:	81fffe17 	ldw	r7,-8(r16)
  807ec8:	31cdc83a 	sub	r6,r6,r7
  807ecc:	30c00317 	ldw	r3,12(r6)
  807ed0:	31400217 	ldw	r5,8(r6)
  807ed4:	11c5883a 	add	r2,r2,r7
  807ed8:	28c00315 	stw	r3,12(r5)
  807edc:	19400215 	stw	r5,8(r3)
  807ee0:	10c00054 	ori	r3,r2,1
  807ee4:	30c00115 	stw	r3,4(r6)
  807ee8:	00c02074 	movhi	r3,129
  807eec:	18d57a04 	addi	r3,r3,21992
  807ef0:	18c00017 	ldw	r3,0(r3)
  807ef4:	21800215 	stw	r6,8(r4)
  807ef8:	10ffc036 	bltu	r2,r3,807dfc <__alt_mem_onchip_mem+0xff787dfc>
  807efc:	00802074 	movhi	r2,129
  807f00:	109cd704 	addi	r2,r2,29532
  807f04:	11400017 	ldw	r5,0(r2)
  807f08:	8809883a 	mov	r4,r17
  807f0c:	0807be80 	call	807be8 <_malloc_trim_r>
  807f10:	003fba06 	br	807dfc <__alt_mem_onchip_mem+0xff787dfc>
  807f14:	28c9883a 	add	r4,r5,r3
  807f18:	21000117 	ldw	r4,4(r4)
  807f1c:	2100004c 	andi	r4,r4,1
  807f20:	2000391e 	bne	r4,zero,808008 <_free_r+0x2fc>
  807f24:	29c00217 	ldw	r7,8(r5)
  807f28:	29000317 	ldw	r4,12(r5)
  807f2c:	1885883a 	add	r2,r3,r2
  807f30:	10c00054 	ori	r3,r2,1
  807f34:	39000315 	stw	r4,12(r7)
  807f38:	21c00215 	stw	r7,8(r4)
  807f3c:	30c00115 	stw	r3,4(r6)
  807f40:	308d883a 	add	r6,r6,r2
  807f44:	30800015 	stw	r2,0(r6)
  807f48:	003fac06 	br	807dfc <__alt_mem_onchip_mem+0xff787dfc>
  807f4c:	00c00504 	movi	r3,20
  807f50:	19401536 	bltu	r3,r5,807fa8 <_free_r+0x29c>
  807f54:	28c01704 	addi	r3,r5,92
  807f58:	18c7883a 	add	r3,r3,r3
  807f5c:	294016c4 	addi	r5,r5,91
  807f60:	003fb406 	br	807e34 <__alt_mem_onchip_mem+0xff787e34>
  807f64:	280bd0ba 	srai	r5,r5,2
  807f68:	00c00044 	movi	r3,1
  807f6c:	38800117 	ldw	r2,4(r7)
  807f70:	194a983a 	sll	r5,r3,r5
  807f74:	2007883a 	mov	r3,r4
  807f78:	2884b03a 	or	r2,r5,r2
  807f7c:	38800115 	stw	r2,4(r7)
  807f80:	003fbb06 	br	807e70 <__alt_mem_onchip_mem+0xff787e70>
  807f84:	21800515 	stw	r6,20(r4)
  807f88:	21800415 	stw	r6,16(r4)
  807f8c:	10c00054 	ori	r3,r2,1
  807f90:	31c00315 	stw	r7,12(r6)
  807f94:	31c00215 	stw	r7,8(r6)
  807f98:	30c00115 	stw	r3,4(r6)
  807f9c:	308d883a 	add	r6,r6,r2
  807fa0:	30800015 	stw	r2,0(r6)
  807fa4:	003f9506 	br	807dfc <__alt_mem_onchip_mem+0xff787dfc>
  807fa8:	00c01504 	movi	r3,84
  807fac:	19400536 	bltu	r3,r5,807fc4 <_free_r+0x2b8>
  807fb0:	100ad33a 	srli	r5,r2,12
  807fb4:	28c01bc4 	addi	r3,r5,111
  807fb8:	18c7883a 	add	r3,r3,r3
  807fbc:	29401b84 	addi	r5,r5,110
  807fc0:	003f9c06 	br	807e34 <__alt_mem_onchip_mem+0xff787e34>
  807fc4:	00c05504 	movi	r3,340
  807fc8:	19400536 	bltu	r3,r5,807fe0 <_free_r+0x2d4>
  807fcc:	100ad3fa 	srli	r5,r2,15
  807fd0:	28c01e04 	addi	r3,r5,120
  807fd4:	18c7883a 	add	r3,r3,r3
  807fd8:	29401dc4 	addi	r5,r5,119
  807fdc:	003f9506 	br	807e34 <__alt_mem_onchip_mem+0xff787e34>
  807fe0:	00c15504 	movi	r3,1364
  807fe4:	19400536 	bltu	r3,r5,807ffc <_free_r+0x2f0>
  807fe8:	100ad4ba 	srli	r5,r2,18
  807fec:	28c01f44 	addi	r3,r5,125
  807ff0:	18c7883a 	add	r3,r3,r3
  807ff4:	29401f04 	addi	r5,r5,124
  807ff8:	003f8e06 	br	807e34 <__alt_mem_onchip_mem+0xff787e34>
  807ffc:	00c03f84 	movi	r3,254
  808000:	01401f84 	movi	r5,126
  808004:	003f8b06 	br	807e34 <__alt_mem_onchip_mem+0xff787e34>
  808008:	10c00054 	ori	r3,r2,1
  80800c:	30c00115 	stw	r3,4(r6)
  808010:	308d883a 	add	r6,r6,r2
  808014:	30800015 	stw	r2,0(r6)
  808018:	003f7806 	br	807dfc <__alt_mem_onchip_mem+0xff787dfc>

0080801c <__sfvwrite_r>:
  80801c:	30800217 	ldw	r2,8(r6)
  808020:	10006726 	beq	r2,zero,8081c0 <__sfvwrite_r+0x1a4>
  808024:	28c0030b 	ldhu	r3,12(r5)
  808028:	defff404 	addi	sp,sp,-48
  80802c:	dd400715 	stw	r21,28(sp)
  808030:	dd000615 	stw	r20,24(sp)
  808034:	dc000215 	stw	r16,8(sp)
  808038:	dfc00b15 	stw	ra,44(sp)
  80803c:	df000a15 	stw	fp,40(sp)
  808040:	ddc00915 	stw	r23,36(sp)
  808044:	dd800815 	stw	r22,32(sp)
  808048:	dcc00515 	stw	r19,20(sp)
  80804c:	dc800415 	stw	r18,16(sp)
  808050:	dc400315 	stw	r17,12(sp)
  808054:	1880020c 	andi	r2,r3,8
  808058:	2821883a 	mov	r16,r5
  80805c:	202b883a 	mov	r21,r4
  808060:	3029883a 	mov	r20,r6
  808064:	10002726 	beq	r2,zero,808104 <__sfvwrite_r+0xe8>
  808068:	28800417 	ldw	r2,16(r5)
  80806c:	10002526 	beq	r2,zero,808104 <__sfvwrite_r+0xe8>
  808070:	1880008c 	andi	r2,r3,2
  808074:	a4400017 	ldw	r17,0(r20)
  808078:	10002a26 	beq	r2,zero,808124 <__sfvwrite_r+0x108>
  80807c:	05a00034 	movhi	r22,32768
  808080:	0027883a 	mov	r19,zero
  808084:	0025883a 	mov	r18,zero
  808088:	b5bf0004 	addi	r22,r22,-1024
  80808c:	980d883a 	mov	r6,r19
  808090:	a809883a 	mov	r4,r21
  808094:	90004626 	beq	r18,zero,8081b0 <__sfvwrite_r+0x194>
  808098:	900f883a 	mov	r7,r18
  80809c:	b480022e 	bgeu	r22,r18,8080a8 <__sfvwrite_r+0x8c>
  8080a0:	01e00034 	movhi	r7,32768
  8080a4:	39ff0004 	addi	r7,r7,-1024
  8080a8:	80800917 	ldw	r2,36(r16)
  8080ac:	81400717 	ldw	r5,28(r16)
  8080b0:	103ee83a 	callr	r2
  8080b4:	0080570e 	bge	zero,r2,808214 <__sfvwrite_r+0x1f8>
  8080b8:	a0c00217 	ldw	r3,8(r20)
  8080bc:	98a7883a 	add	r19,r19,r2
  8080c0:	90a5c83a 	sub	r18,r18,r2
  8080c4:	1885c83a 	sub	r2,r3,r2
  8080c8:	a0800215 	stw	r2,8(r20)
  8080cc:	103fef1e 	bne	r2,zero,80808c <__alt_mem_onchip_mem+0xff78808c>
  8080d0:	0005883a 	mov	r2,zero
  8080d4:	dfc00b17 	ldw	ra,44(sp)
  8080d8:	df000a17 	ldw	fp,40(sp)
  8080dc:	ddc00917 	ldw	r23,36(sp)
  8080e0:	dd800817 	ldw	r22,32(sp)
  8080e4:	dd400717 	ldw	r21,28(sp)
  8080e8:	dd000617 	ldw	r20,24(sp)
  8080ec:	dcc00517 	ldw	r19,20(sp)
  8080f0:	dc800417 	ldw	r18,16(sp)
  8080f4:	dc400317 	ldw	r17,12(sp)
  8080f8:	dc000217 	ldw	r16,8(sp)
  8080fc:	dec00c04 	addi	sp,sp,48
  808100:	f800283a 	ret
  808104:	800b883a 	mov	r5,r16
  808108:	a809883a 	mov	r4,r21
  80810c:	0805d600 	call	805d60 <__swsetup_r>
  808110:	1000eb1e 	bne	r2,zero,8084c0 <__sfvwrite_r+0x4a4>
  808114:	80c0030b 	ldhu	r3,12(r16)
  808118:	a4400017 	ldw	r17,0(r20)
  80811c:	1880008c 	andi	r2,r3,2
  808120:	103fd61e 	bne	r2,zero,80807c <__alt_mem_onchip_mem+0xff78807c>
  808124:	1880004c 	andi	r2,r3,1
  808128:	10003f1e 	bne	r2,zero,808228 <__sfvwrite_r+0x20c>
  80812c:	0039883a 	mov	fp,zero
  808130:	0025883a 	mov	r18,zero
  808134:	90001a26 	beq	r18,zero,8081a0 <__sfvwrite_r+0x184>
  808138:	1880800c 	andi	r2,r3,512
  80813c:	84c00217 	ldw	r19,8(r16)
  808140:	10002126 	beq	r2,zero,8081c8 <__sfvwrite_r+0x1ac>
  808144:	982f883a 	mov	r23,r19
  808148:	94c09336 	bltu	r18,r19,808398 <__sfvwrite_r+0x37c>
  80814c:	1881200c 	andi	r2,r3,1152
  808150:	10009e1e 	bne	r2,zero,8083cc <__sfvwrite_r+0x3b0>
  808154:	81000017 	ldw	r4,0(r16)
  808158:	b80d883a 	mov	r6,r23
  80815c:	e00b883a 	mov	r5,fp
  808160:	08088940 	call	808894 <memmove>
  808164:	80c00217 	ldw	r3,8(r16)
  808168:	81000017 	ldw	r4,0(r16)
  80816c:	9005883a 	mov	r2,r18
  808170:	1ce7c83a 	sub	r19,r3,r19
  808174:	25cf883a 	add	r7,r4,r23
  808178:	84c00215 	stw	r19,8(r16)
  80817c:	81c00015 	stw	r7,0(r16)
  808180:	a0c00217 	ldw	r3,8(r20)
  808184:	e0b9883a 	add	fp,fp,r2
  808188:	90a5c83a 	sub	r18,r18,r2
  80818c:	18a7c83a 	sub	r19,r3,r2
  808190:	a4c00215 	stw	r19,8(r20)
  808194:	983fce26 	beq	r19,zero,8080d0 <__alt_mem_onchip_mem+0xff7880d0>
  808198:	80c0030b 	ldhu	r3,12(r16)
  80819c:	903fe61e 	bne	r18,zero,808138 <__alt_mem_onchip_mem+0xff788138>
  8081a0:	8f000017 	ldw	fp,0(r17)
  8081a4:	8c800117 	ldw	r18,4(r17)
  8081a8:	8c400204 	addi	r17,r17,8
  8081ac:	003fe106 	br	808134 <__alt_mem_onchip_mem+0xff788134>
  8081b0:	8cc00017 	ldw	r19,0(r17)
  8081b4:	8c800117 	ldw	r18,4(r17)
  8081b8:	8c400204 	addi	r17,r17,8
  8081bc:	003fb306 	br	80808c <__alt_mem_onchip_mem+0xff78808c>
  8081c0:	0005883a 	mov	r2,zero
  8081c4:	f800283a 	ret
  8081c8:	81000017 	ldw	r4,0(r16)
  8081cc:	80800417 	ldw	r2,16(r16)
  8081d0:	11005736 	bltu	r2,r4,808330 <__sfvwrite_r+0x314>
  8081d4:	85c00517 	ldw	r23,20(r16)
  8081d8:	95c05536 	bltu	r18,r23,808330 <__sfvwrite_r+0x314>
  8081dc:	00a00034 	movhi	r2,32768
  8081e0:	10bfffc4 	addi	r2,r2,-1
  8081e4:	9009883a 	mov	r4,r18
  8081e8:	1480012e 	bgeu	r2,r18,8081f0 <__sfvwrite_r+0x1d4>
  8081ec:	1009883a 	mov	r4,r2
  8081f0:	b80b883a 	mov	r5,r23
  8081f4:	080c7440 	call	80c744 <__divsi3>
  8081f8:	15cf383a 	mul	r7,r2,r23
  8081fc:	81400717 	ldw	r5,28(r16)
  808200:	80800917 	ldw	r2,36(r16)
  808204:	e00d883a 	mov	r6,fp
  808208:	a809883a 	mov	r4,r21
  80820c:	103ee83a 	callr	r2
  808210:	00bfdb16 	blt	zero,r2,808180 <__alt_mem_onchip_mem+0xff788180>
  808214:	8080030b 	ldhu	r2,12(r16)
  808218:	10801014 	ori	r2,r2,64
  80821c:	8080030d 	sth	r2,12(r16)
  808220:	00bfffc4 	movi	r2,-1
  808224:	003fab06 	br	8080d4 <__alt_mem_onchip_mem+0xff7880d4>
  808228:	0027883a 	mov	r19,zero
  80822c:	0011883a 	mov	r8,zero
  808230:	0039883a 	mov	fp,zero
  808234:	0025883a 	mov	r18,zero
  808238:	90001f26 	beq	r18,zero,8082b8 <__sfvwrite_r+0x29c>
  80823c:	40005a26 	beq	r8,zero,8083a8 <__sfvwrite_r+0x38c>
  808240:	982d883a 	mov	r22,r19
  808244:	94c0012e 	bgeu	r18,r19,80824c <__sfvwrite_r+0x230>
  808248:	902d883a 	mov	r22,r18
  80824c:	81000017 	ldw	r4,0(r16)
  808250:	80800417 	ldw	r2,16(r16)
  808254:	b02f883a 	mov	r23,r22
  808258:	81c00517 	ldw	r7,20(r16)
  80825c:	1100032e 	bgeu	r2,r4,80826c <__sfvwrite_r+0x250>
  808260:	80c00217 	ldw	r3,8(r16)
  808264:	38c7883a 	add	r3,r7,r3
  808268:	1d801816 	blt	r3,r22,8082cc <__sfvwrite_r+0x2b0>
  80826c:	b1c03e16 	blt	r22,r7,808368 <__sfvwrite_r+0x34c>
  808270:	80800917 	ldw	r2,36(r16)
  808274:	81400717 	ldw	r5,28(r16)
  808278:	e00d883a 	mov	r6,fp
  80827c:	da000115 	stw	r8,4(sp)
  808280:	a809883a 	mov	r4,r21
  808284:	103ee83a 	callr	r2
  808288:	102f883a 	mov	r23,r2
  80828c:	da000117 	ldw	r8,4(sp)
  808290:	00bfe00e 	bge	zero,r2,808214 <__alt_mem_onchip_mem+0xff788214>
  808294:	9de7c83a 	sub	r19,r19,r23
  808298:	98001f26 	beq	r19,zero,808318 <__sfvwrite_r+0x2fc>
  80829c:	a0800217 	ldw	r2,8(r20)
  8082a0:	e5f9883a 	add	fp,fp,r23
  8082a4:	95e5c83a 	sub	r18,r18,r23
  8082a8:	15efc83a 	sub	r23,r2,r23
  8082ac:	a5c00215 	stw	r23,8(r20)
  8082b0:	b83f8726 	beq	r23,zero,8080d0 <__alt_mem_onchip_mem+0xff7880d0>
  8082b4:	903fe11e 	bne	r18,zero,80823c <__alt_mem_onchip_mem+0xff78823c>
  8082b8:	8f000017 	ldw	fp,0(r17)
  8082bc:	8c800117 	ldw	r18,4(r17)
  8082c0:	0011883a 	mov	r8,zero
  8082c4:	8c400204 	addi	r17,r17,8
  8082c8:	003fdb06 	br	808238 <__alt_mem_onchip_mem+0xff788238>
  8082cc:	180d883a 	mov	r6,r3
  8082d0:	e00b883a 	mov	r5,fp
  8082d4:	da000115 	stw	r8,4(sp)
  8082d8:	d8c00015 	stw	r3,0(sp)
  8082dc:	08088940 	call	808894 <memmove>
  8082e0:	d8c00017 	ldw	r3,0(sp)
  8082e4:	80800017 	ldw	r2,0(r16)
  8082e8:	800b883a 	mov	r5,r16
  8082ec:	a809883a 	mov	r4,r21
  8082f0:	10c5883a 	add	r2,r2,r3
  8082f4:	80800015 	stw	r2,0(r16)
  8082f8:	d8c00015 	stw	r3,0(sp)
  8082fc:	0807ab00 	call	807ab0 <_fflush_r>
  808300:	d8c00017 	ldw	r3,0(sp)
  808304:	da000117 	ldw	r8,4(sp)
  808308:	103fc21e 	bne	r2,zero,808214 <__alt_mem_onchip_mem+0xff788214>
  80830c:	182f883a 	mov	r23,r3
  808310:	9de7c83a 	sub	r19,r19,r23
  808314:	983fe11e 	bne	r19,zero,80829c <__alt_mem_onchip_mem+0xff78829c>
  808318:	800b883a 	mov	r5,r16
  80831c:	a809883a 	mov	r4,r21
  808320:	0807ab00 	call	807ab0 <_fflush_r>
  808324:	103fbb1e 	bne	r2,zero,808214 <__alt_mem_onchip_mem+0xff788214>
  808328:	0011883a 	mov	r8,zero
  80832c:	003fdb06 	br	80829c <__alt_mem_onchip_mem+0xff78829c>
  808330:	94c0012e 	bgeu	r18,r19,808338 <__sfvwrite_r+0x31c>
  808334:	9027883a 	mov	r19,r18
  808338:	980d883a 	mov	r6,r19
  80833c:	e00b883a 	mov	r5,fp
  808340:	08088940 	call	808894 <memmove>
  808344:	80800217 	ldw	r2,8(r16)
  808348:	80c00017 	ldw	r3,0(r16)
  80834c:	14c5c83a 	sub	r2,r2,r19
  808350:	1cc7883a 	add	r3,r3,r19
  808354:	80800215 	stw	r2,8(r16)
  808358:	80c00015 	stw	r3,0(r16)
  80835c:	10004326 	beq	r2,zero,80846c <__sfvwrite_r+0x450>
  808360:	9805883a 	mov	r2,r19
  808364:	003f8606 	br	808180 <__alt_mem_onchip_mem+0xff788180>
  808368:	b00d883a 	mov	r6,r22
  80836c:	e00b883a 	mov	r5,fp
  808370:	da000115 	stw	r8,4(sp)
  808374:	08088940 	call	808894 <memmove>
  808378:	80800217 	ldw	r2,8(r16)
  80837c:	80c00017 	ldw	r3,0(r16)
  808380:	da000117 	ldw	r8,4(sp)
  808384:	1585c83a 	sub	r2,r2,r22
  808388:	1dad883a 	add	r22,r3,r22
  80838c:	80800215 	stw	r2,8(r16)
  808390:	85800015 	stw	r22,0(r16)
  808394:	003fbf06 	br	808294 <__alt_mem_onchip_mem+0xff788294>
  808398:	81000017 	ldw	r4,0(r16)
  80839c:	9027883a 	mov	r19,r18
  8083a0:	902f883a 	mov	r23,r18
  8083a4:	003f6c06 	br	808158 <__alt_mem_onchip_mem+0xff788158>
  8083a8:	900d883a 	mov	r6,r18
  8083ac:	01400284 	movi	r5,10
  8083b0:	e009883a 	mov	r4,fp
  8083b4:	08086680 	call	808668 <memchr>
  8083b8:	10003e26 	beq	r2,zero,8084b4 <__sfvwrite_r+0x498>
  8083bc:	10800044 	addi	r2,r2,1
  8083c0:	1727c83a 	sub	r19,r2,fp
  8083c4:	02000044 	movi	r8,1
  8083c8:	003f9d06 	br	808240 <__alt_mem_onchip_mem+0xff788240>
  8083cc:	80800517 	ldw	r2,20(r16)
  8083d0:	81400417 	ldw	r5,16(r16)
  8083d4:	81c00017 	ldw	r7,0(r16)
  8083d8:	10a7883a 	add	r19,r2,r2
  8083dc:	9885883a 	add	r2,r19,r2
  8083e0:	1026d7fa 	srli	r19,r2,31
  8083e4:	396dc83a 	sub	r22,r7,r5
  8083e8:	b1000044 	addi	r4,r22,1
  8083ec:	9885883a 	add	r2,r19,r2
  8083f0:	1027d07a 	srai	r19,r2,1
  8083f4:	2485883a 	add	r2,r4,r18
  8083f8:	980d883a 	mov	r6,r19
  8083fc:	9880022e 	bgeu	r19,r2,808408 <__sfvwrite_r+0x3ec>
  808400:	1027883a 	mov	r19,r2
  808404:	100d883a 	mov	r6,r2
  808408:	18c1000c 	andi	r3,r3,1024
  80840c:	18001c26 	beq	r3,zero,808480 <__sfvwrite_r+0x464>
  808410:	300b883a 	mov	r5,r6
  808414:	a809883a 	mov	r4,r21
  808418:	08026380 	call	802638 <_malloc_r>
  80841c:	102f883a 	mov	r23,r2
  808420:	10002926 	beq	r2,zero,8084c8 <__sfvwrite_r+0x4ac>
  808424:	81400417 	ldw	r5,16(r16)
  808428:	b00d883a 	mov	r6,r22
  80842c:	1009883a 	mov	r4,r2
  808430:	080874c0 	call	80874c <memcpy>
  808434:	8080030b 	ldhu	r2,12(r16)
  808438:	00fedfc4 	movi	r3,-1153
  80843c:	10c4703a 	and	r2,r2,r3
  808440:	10802014 	ori	r2,r2,128
  808444:	8080030d 	sth	r2,12(r16)
  808448:	bd89883a 	add	r4,r23,r22
  80844c:	9d8fc83a 	sub	r7,r19,r22
  808450:	85c00415 	stw	r23,16(r16)
  808454:	84c00515 	stw	r19,20(r16)
  808458:	81000015 	stw	r4,0(r16)
  80845c:	9027883a 	mov	r19,r18
  808460:	81c00215 	stw	r7,8(r16)
  808464:	902f883a 	mov	r23,r18
  808468:	003f3b06 	br	808158 <__alt_mem_onchip_mem+0xff788158>
  80846c:	800b883a 	mov	r5,r16
  808470:	a809883a 	mov	r4,r21
  808474:	0807ab00 	call	807ab0 <_fflush_r>
  808478:	103fb926 	beq	r2,zero,808360 <__alt_mem_onchip_mem+0xff788360>
  80847c:	003f6506 	br	808214 <__alt_mem_onchip_mem+0xff788214>
  808480:	a809883a 	mov	r4,r21
  808484:	0809a4c0 	call	809a4c <_realloc_r>
  808488:	102f883a 	mov	r23,r2
  80848c:	103fee1e 	bne	r2,zero,808448 <__alt_mem_onchip_mem+0xff788448>
  808490:	81400417 	ldw	r5,16(r16)
  808494:	a809883a 	mov	r4,r21
  808498:	0807d0c0 	call	807d0c <_free_r>
  80849c:	8080030b 	ldhu	r2,12(r16)
  8084a0:	00ffdfc4 	movi	r3,-129
  8084a4:	1884703a 	and	r2,r3,r2
  8084a8:	00c00304 	movi	r3,12
  8084ac:	a8c00015 	stw	r3,0(r21)
  8084b0:	003f5906 	br	808218 <__alt_mem_onchip_mem+0xff788218>
  8084b4:	94c00044 	addi	r19,r18,1
  8084b8:	02000044 	movi	r8,1
  8084bc:	003f6006 	br	808240 <__alt_mem_onchip_mem+0xff788240>
  8084c0:	00bfffc4 	movi	r2,-1
  8084c4:	003f0306 	br	8080d4 <__alt_mem_onchip_mem+0xff7880d4>
  8084c8:	00800304 	movi	r2,12
  8084cc:	a8800015 	stw	r2,0(r21)
  8084d0:	8080030b 	ldhu	r2,12(r16)
  8084d4:	003f5006 	br	808218 <__alt_mem_onchip_mem+0xff788218>

008084d8 <_isatty_r>:
  8084d8:	defffd04 	addi	sp,sp,-12
  8084dc:	dc000015 	stw	r16,0(sp)
  8084e0:	04002074 	movhi	r16,129
  8084e4:	dc400115 	stw	r17,4(sp)
  8084e8:	841cd404 	addi	r16,r16,29520
  8084ec:	2023883a 	mov	r17,r4
  8084f0:	2809883a 	mov	r4,r5
  8084f4:	dfc00215 	stw	ra,8(sp)
  8084f8:	80000015 	stw	zero,0(r16)
  8084fc:	080f46c0 	call	80f46c <isatty>
  808500:	00ffffc4 	movi	r3,-1
  808504:	10c00526 	beq	r2,r3,80851c <_isatty_r+0x44>
  808508:	dfc00217 	ldw	ra,8(sp)
  80850c:	dc400117 	ldw	r17,4(sp)
  808510:	dc000017 	ldw	r16,0(sp)
  808514:	dec00304 	addi	sp,sp,12
  808518:	f800283a 	ret
  80851c:	80c00017 	ldw	r3,0(r16)
  808520:	183ff926 	beq	r3,zero,808508 <__alt_mem_onchip_mem+0xff788508>
  808524:	88c00015 	stw	r3,0(r17)
  808528:	003ff706 	br	808508 <__alt_mem_onchip_mem+0xff788508>

0080852c <_setlocale_r>:
  80852c:	30001b26 	beq	r6,zero,80859c <_setlocale_r+0x70>
  808530:	01402074 	movhi	r5,129
  808534:	defffe04 	addi	sp,sp,-8
  808538:	294da604 	addi	r5,r5,13976
  80853c:	3009883a 	mov	r4,r6
  808540:	dc000015 	stw	r16,0(sp)
  808544:	dfc00115 	stw	ra,4(sp)
  808548:	3021883a 	mov	r16,r6
  80854c:	080a0240 	call	80a024 <strcmp>
  808550:	1000061e 	bne	r2,zero,80856c <_setlocale_r+0x40>
  808554:	00802074 	movhi	r2,129
  808558:	108ce804 	addi	r2,r2,13216
  80855c:	dfc00117 	ldw	ra,4(sp)
  808560:	dc000017 	ldw	r16,0(sp)
  808564:	dec00204 	addi	sp,sp,8
  808568:	f800283a 	ret
  80856c:	01402074 	movhi	r5,129
  808570:	294ce804 	addi	r5,r5,13216
  808574:	8009883a 	mov	r4,r16
  808578:	080a0240 	call	80a024 <strcmp>
  80857c:	103ff526 	beq	r2,zero,808554 <__alt_mem_onchip_mem+0xff788554>
  808580:	01402074 	movhi	r5,129
  808584:	294cf104 	addi	r5,r5,13252
  808588:	8009883a 	mov	r4,r16
  80858c:	080a0240 	call	80a024 <strcmp>
  808590:	103ff026 	beq	r2,zero,808554 <__alt_mem_onchip_mem+0xff788554>
  808594:	0005883a 	mov	r2,zero
  808598:	003ff006 	br	80855c <__alt_mem_onchip_mem+0xff78855c>
  80859c:	00802074 	movhi	r2,129
  8085a0:	108ce804 	addi	r2,r2,13216
  8085a4:	f800283a 	ret

008085a8 <__locale_charset>:
  8085a8:	00802074 	movhi	r2,129
  8085ac:	10905e04 	addi	r2,r2,16760
  8085b0:	f800283a 	ret

008085b4 <__locale_mb_cur_max>:
  8085b4:	00802074 	movhi	r2,129
  8085b8:	10957c04 	addi	r2,r2,22000
  8085bc:	10800017 	ldw	r2,0(r2)
  8085c0:	f800283a 	ret

008085c4 <__locale_msgcharset>:
  8085c4:	00802074 	movhi	r2,129
  8085c8:	10905604 	addi	r2,r2,16728
  8085cc:	f800283a 	ret

008085d0 <__locale_cjk_lang>:
  8085d0:	0005883a 	mov	r2,zero
  8085d4:	f800283a 	ret

008085d8 <_localeconv_r>:
  8085d8:	00802074 	movhi	r2,129
  8085dc:	10906604 	addi	r2,r2,16792
  8085e0:	f800283a 	ret

008085e4 <setlocale>:
  8085e4:	00802074 	movhi	r2,129
  8085e8:	10957804 	addi	r2,r2,21984
  8085ec:	280d883a 	mov	r6,r5
  8085f0:	200b883a 	mov	r5,r4
  8085f4:	11000017 	ldw	r4,0(r2)
  8085f8:	080852c1 	jmpi	80852c <_setlocale_r>

008085fc <localeconv>:
  8085fc:	00802074 	movhi	r2,129
  808600:	10906604 	addi	r2,r2,16792
  808604:	f800283a 	ret

00808608 <_lseek_r>:
  808608:	defffd04 	addi	sp,sp,-12
  80860c:	2805883a 	mov	r2,r5
  808610:	dc000015 	stw	r16,0(sp)
  808614:	04002074 	movhi	r16,129
  808618:	dc400115 	stw	r17,4(sp)
  80861c:	300b883a 	mov	r5,r6
  808620:	841cd404 	addi	r16,r16,29520
  808624:	2023883a 	mov	r17,r4
  808628:	380d883a 	mov	r6,r7
  80862c:	1009883a 	mov	r4,r2
  808630:	dfc00215 	stw	ra,8(sp)
  808634:	80000015 	stw	zero,0(r16)
  808638:	080f6380 	call	80f638 <lseek>
  80863c:	00ffffc4 	movi	r3,-1
  808640:	10c00526 	beq	r2,r3,808658 <_lseek_r+0x50>
  808644:	dfc00217 	ldw	ra,8(sp)
  808648:	dc400117 	ldw	r17,4(sp)
  80864c:	dc000017 	ldw	r16,0(sp)
  808650:	dec00304 	addi	sp,sp,12
  808654:	f800283a 	ret
  808658:	80c00017 	ldw	r3,0(r16)
  80865c:	183ff926 	beq	r3,zero,808644 <__alt_mem_onchip_mem+0xff788644>
  808660:	88c00015 	stw	r3,0(r17)
  808664:	003ff706 	br	808644 <__alt_mem_onchip_mem+0xff788644>

00808668 <memchr>:
  808668:	208000cc 	andi	r2,r4,3
  80866c:	280f883a 	mov	r7,r5
  808670:	10003426 	beq	r2,zero,808744 <memchr+0xdc>
  808674:	30bfffc4 	addi	r2,r6,-1
  808678:	30001a26 	beq	r6,zero,8086e4 <memchr+0x7c>
  80867c:	20c00003 	ldbu	r3,0(r4)
  808680:	29803fcc 	andi	r6,r5,255
  808684:	30c0051e 	bne	r6,r3,80869c <memchr+0x34>
  808688:	00001806 	br	8086ec <memchr+0x84>
  80868c:	10001526 	beq	r2,zero,8086e4 <memchr+0x7c>
  808690:	20c00003 	ldbu	r3,0(r4)
  808694:	10bfffc4 	addi	r2,r2,-1
  808698:	30c01426 	beq	r6,r3,8086ec <memchr+0x84>
  80869c:	21000044 	addi	r4,r4,1
  8086a0:	20c000cc 	andi	r3,r4,3
  8086a4:	183ff91e 	bne	r3,zero,80868c <__alt_mem_onchip_mem+0xff78868c>
  8086a8:	020000c4 	movi	r8,3
  8086ac:	40801136 	bltu	r8,r2,8086f4 <memchr+0x8c>
  8086b0:	10000c26 	beq	r2,zero,8086e4 <memchr+0x7c>
  8086b4:	20c00003 	ldbu	r3,0(r4)
  8086b8:	29403fcc 	andi	r5,r5,255
  8086bc:	28c00b26 	beq	r5,r3,8086ec <memchr+0x84>
  8086c0:	20c00044 	addi	r3,r4,1
  8086c4:	39803fcc 	andi	r6,r7,255
  8086c8:	2089883a 	add	r4,r4,r2
  8086cc:	00000306 	br	8086dc <memchr+0x74>
  8086d0:	18c00044 	addi	r3,r3,1
  8086d4:	197fffc3 	ldbu	r5,-1(r3)
  8086d8:	31400526 	beq	r6,r5,8086f0 <memchr+0x88>
  8086dc:	1805883a 	mov	r2,r3
  8086e0:	20fffb1e 	bne	r4,r3,8086d0 <__alt_mem_onchip_mem+0xff7886d0>
  8086e4:	0005883a 	mov	r2,zero
  8086e8:	f800283a 	ret
  8086ec:	2005883a 	mov	r2,r4
  8086f0:	f800283a 	ret
  8086f4:	28c03fcc 	andi	r3,r5,255
  8086f8:	1812923a 	slli	r9,r3,8
  8086fc:	02ffbff4 	movhi	r11,65279
  808700:	02a02074 	movhi	r10,32897
  808704:	48d2b03a 	or	r9,r9,r3
  808708:	4806943a 	slli	r3,r9,16
  80870c:	5affbfc4 	addi	r11,r11,-257
  808710:	52a02004 	addi	r10,r10,-32640
  808714:	48d2b03a 	or	r9,r9,r3
  808718:	20c00017 	ldw	r3,0(r4)
  80871c:	48c6f03a 	xor	r3,r9,r3
  808720:	1acd883a 	add	r6,r3,r11
  808724:	00c6303a 	nor	r3,zero,r3
  808728:	30c6703a 	and	r3,r6,r3
  80872c:	1a86703a 	and	r3,r3,r10
  808730:	183fe01e 	bne	r3,zero,8086b4 <__alt_mem_onchip_mem+0xff7886b4>
  808734:	10bfff04 	addi	r2,r2,-4
  808738:	21000104 	addi	r4,r4,4
  80873c:	40bff636 	bltu	r8,r2,808718 <__alt_mem_onchip_mem+0xff788718>
  808740:	003fdb06 	br	8086b0 <__alt_mem_onchip_mem+0xff7886b0>
  808744:	3005883a 	mov	r2,r6
  808748:	003fd706 	br	8086a8 <__alt_mem_onchip_mem+0xff7886a8>

0080874c <memcpy>:
  80874c:	defffd04 	addi	sp,sp,-12
  808750:	dfc00215 	stw	ra,8(sp)
  808754:	dc400115 	stw	r17,4(sp)
  808758:	dc000015 	stw	r16,0(sp)
  80875c:	00c003c4 	movi	r3,15
  808760:	2005883a 	mov	r2,r4
  808764:	1980452e 	bgeu	r3,r6,80887c <memcpy+0x130>
  808768:	2906b03a 	or	r3,r5,r4
  80876c:	18c000cc 	andi	r3,r3,3
  808770:	1800441e 	bne	r3,zero,808884 <memcpy+0x138>
  808774:	347ffc04 	addi	r17,r6,-16
  808778:	8822d13a 	srli	r17,r17,4
  80877c:	28c00104 	addi	r3,r5,4
  808780:	23400104 	addi	r13,r4,4
  808784:	8820913a 	slli	r16,r17,4
  808788:	2b000204 	addi	r12,r5,8
  80878c:	22c00204 	addi	r11,r4,8
  808790:	84000504 	addi	r16,r16,20
  808794:	2a800304 	addi	r10,r5,12
  808798:	22400304 	addi	r9,r4,12
  80879c:	2c21883a 	add	r16,r5,r16
  8087a0:	2811883a 	mov	r8,r5
  8087a4:	200f883a 	mov	r7,r4
  8087a8:	41000017 	ldw	r4,0(r8)
  8087ac:	1fc00017 	ldw	ra,0(r3)
  8087b0:	63c00017 	ldw	r15,0(r12)
  8087b4:	39000015 	stw	r4,0(r7)
  8087b8:	53800017 	ldw	r14,0(r10)
  8087bc:	6fc00015 	stw	ra,0(r13)
  8087c0:	5bc00015 	stw	r15,0(r11)
  8087c4:	4b800015 	stw	r14,0(r9)
  8087c8:	18c00404 	addi	r3,r3,16
  8087cc:	39c00404 	addi	r7,r7,16
  8087d0:	42000404 	addi	r8,r8,16
  8087d4:	6b400404 	addi	r13,r13,16
  8087d8:	63000404 	addi	r12,r12,16
  8087dc:	5ac00404 	addi	r11,r11,16
  8087e0:	52800404 	addi	r10,r10,16
  8087e4:	4a400404 	addi	r9,r9,16
  8087e8:	1c3fef1e 	bne	r3,r16,8087a8 <__alt_mem_onchip_mem+0xff7887a8>
  8087ec:	89c00044 	addi	r7,r17,1
  8087f0:	380e913a 	slli	r7,r7,4
  8087f4:	310003cc 	andi	r4,r6,15
  8087f8:	02c000c4 	movi	r11,3
  8087fc:	11c7883a 	add	r3,r2,r7
  808800:	29cb883a 	add	r5,r5,r7
  808804:	5900212e 	bgeu	r11,r4,80888c <memcpy+0x140>
  808808:	1813883a 	mov	r9,r3
  80880c:	2811883a 	mov	r8,r5
  808810:	200f883a 	mov	r7,r4
  808814:	42800017 	ldw	r10,0(r8)
  808818:	4a400104 	addi	r9,r9,4
  80881c:	39ffff04 	addi	r7,r7,-4
  808820:	4abfff15 	stw	r10,-4(r9)
  808824:	42000104 	addi	r8,r8,4
  808828:	59fffa36 	bltu	r11,r7,808814 <__alt_mem_onchip_mem+0xff788814>
  80882c:	213fff04 	addi	r4,r4,-4
  808830:	2008d0ba 	srli	r4,r4,2
  808834:	318000cc 	andi	r6,r6,3
  808838:	21000044 	addi	r4,r4,1
  80883c:	2109883a 	add	r4,r4,r4
  808840:	2109883a 	add	r4,r4,r4
  808844:	1907883a 	add	r3,r3,r4
  808848:	290b883a 	add	r5,r5,r4
  80884c:	30000626 	beq	r6,zero,808868 <memcpy+0x11c>
  808850:	198d883a 	add	r6,r3,r6
  808854:	29c00003 	ldbu	r7,0(r5)
  808858:	18c00044 	addi	r3,r3,1
  80885c:	29400044 	addi	r5,r5,1
  808860:	19ffffc5 	stb	r7,-1(r3)
  808864:	19bffb1e 	bne	r3,r6,808854 <__alt_mem_onchip_mem+0xff788854>
  808868:	dfc00217 	ldw	ra,8(sp)
  80886c:	dc400117 	ldw	r17,4(sp)
  808870:	dc000017 	ldw	r16,0(sp)
  808874:	dec00304 	addi	sp,sp,12
  808878:	f800283a 	ret
  80887c:	2007883a 	mov	r3,r4
  808880:	003ff206 	br	80884c <__alt_mem_onchip_mem+0xff78884c>
  808884:	2007883a 	mov	r3,r4
  808888:	003ff106 	br	808850 <__alt_mem_onchip_mem+0xff788850>
  80888c:	200d883a 	mov	r6,r4
  808890:	003fee06 	br	80884c <__alt_mem_onchip_mem+0xff78884c>

00808894 <memmove>:
  808894:	2005883a 	mov	r2,r4
  808898:	29000b2e 	bgeu	r5,r4,8088c8 <memmove+0x34>
  80889c:	298f883a 	add	r7,r5,r6
  8088a0:	21c0092e 	bgeu	r4,r7,8088c8 <memmove+0x34>
  8088a4:	2187883a 	add	r3,r4,r6
  8088a8:	198bc83a 	sub	r5,r3,r6
  8088ac:	30004826 	beq	r6,zero,8089d0 <memmove+0x13c>
  8088b0:	39ffffc4 	addi	r7,r7,-1
  8088b4:	39000003 	ldbu	r4,0(r7)
  8088b8:	18ffffc4 	addi	r3,r3,-1
  8088bc:	19000005 	stb	r4,0(r3)
  8088c0:	28fffb1e 	bne	r5,r3,8088b0 <__alt_mem_onchip_mem+0xff7888b0>
  8088c4:	f800283a 	ret
  8088c8:	00c003c4 	movi	r3,15
  8088cc:	1980412e 	bgeu	r3,r6,8089d4 <memmove+0x140>
  8088d0:	2886b03a 	or	r3,r5,r2
  8088d4:	18c000cc 	andi	r3,r3,3
  8088d8:	1800401e 	bne	r3,zero,8089dc <memmove+0x148>
  8088dc:	33fffc04 	addi	r15,r6,-16
  8088e0:	781ed13a 	srli	r15,r15,4
  8088e4:	28c00104 	addi	r3,r5,4
  8088e8:	13400104 	addi	r13,r2,4
  8088ec:	781c913a 	slli	r14,r15,4
  8088f0:	2b000204 	addi	r12,r5,8
  8088f4:	12c00204 	addi	r11,r2,8
  8088f8:	73800504 	addi	r14,r14,20
  8088fc:	2a800304 	addi	r10,r5,12
  808900:	12400304 	addi	r9,r2,12
  808904:	2b9d883a 	add	r14,r5,r14
  808908:	2811883a 	mov	r8,r5
  80890c:	100f883a 	mov	r7,r2
  808910:	41000017 	ldw	r4,0(r8)
  808914:	39c00404 	addi	r7,r7,16
  808918:	18c00404 	addi	r3,r3,16
  80891c:	393ffc15 	stw	r4,-16(r7)
  808920:	193ffc17 	ldw	r4,-16(r3)
  808924:	6b400404 	addi	r13,r13,16
  808928:	5ac00404 	addi	r11,r11,16
  80892c:	693ffc15 	stw	r4,-16(r13)
  808930:	61000017 	ldw	r4,0(r12)
  808934:	4a400404 	addi	r9,r9,16
  808938:	42000404 	addi	r8,r8,16
  80893c:	593ffc15 	stw	r4,-16(r11)
  808940:	51000017 	ldw	r4,0(r10)
  808944:	63000404 	addi	r12,r12,16
  808948:	52800404 	addi	r10,r10,16
  80894c:	493ffc15 	stw	r4,-16(r9)
  808950:	1bbfef1e 	bne	r3,r14,808910 <__alt_mem_onchip_mem+0xff788910>
  808954:	79000044 	addi	r4,r15,1
  808958:	2008913a 	slli	r4,r4,4
  80895c:	328003cc 	andi	r10,r6,15
  808960:	02c000c4 	movi	r11,3
  808964:	1107883a 	add	r3,r2,r4
  808968:	290b883a 	add	r5,r5,r4
  80896c:	5a801e2e 	bgeu	r11,r10,8089e8 <memmove+0x154>
  808970:	1813883a 	mov	r9,r3
  808974:	2811883a 	mov	r8,r5
  808978:	500f883a 	mov	r7,r10
  80897c:	41000017 	ldw	r4,0(r8)
  808980:	4a400104 	addi	r9,r9,4
  808984:	39ffff04 	addi	r7,r7,-4
  808988:	493fff15 	stw	r4,-4(r9)
  80898c:	42000104 	addi	r8,r8,4
  808990:	59fffa36 	bltu	r11,r7,80897c <__alt_mem_onchip_mem+0xff78897c>
  808994:	513fff04 	addi	r4,r10,-4
  808998:	2008d0ba 	srli	r4,r4,2
  80899c:	318000cc 	andi	r6,r6,3
  8089a0:	21000044 	addi	r4,r4,1
  8089a4:	2109883a 	add	r4,r4,r4
  8089a8:	2109883a 	add	r4,r4,r4
  8089ac:	1907883a 	add	r3,r3,r4
  8089b0:	290b883a 	add	r5,r5,r4
  8089b4:	30000b26 	beq	r6,zero,8089e4 <memmove+0x150>
  8089b8:	198d883a 	add	r6,r3,r6
  8089bc:	29c00003 	ldbu	r7,0(r5)
  8089c0:	18c00044 	addi	r3,r3,1
  8089c4:	29400044 	addi	r5,r5,1
  8089c8:	19ffffc5 	stb	r7,-1(r3)
  8089cc:	19bffb1e 	bne	r3,r6,8089bc <__alt_mem_onchip_mem+0xff7889bc>
  8089d0:	f800283a 	ret
  8089d4:	1007883a 	mov	r3,r2
  8089d8:	003ff606 	br	8089b4 <__alt_mem_onchip_mem+0xff7889b4>
  8089dc:	1007883a 	mov	r3,r2
  8089e0:	003ff506 	br	8089b8 <__alt_mem_onchip_mem+0xff7889b8>
  8089e4:	f800283a 	ret
  8089e8:	500d883a 	mov	r6,r10
  8089ec:	003ff106 	br	8089b4 <__alt_mem_onchip_mem+0xff7889b4>

008089f0 <_Balloc>:
  8089f0:	20801317 	ldw	r2,76(r4)
  8089f4:	defffc04 	addi	sp,sp,-16
  8089f8:	dc400115 	stw	r17,4(sp)
  8089fc:	dc000015 	stw	r16,0(sp)
  808a00:	dfc00315 	stw	ra,12(sp)
  808a04:	dc800215 	stw	r18,8(sp)
  808a08:	2023883a 	mov	r17,r4
  808a0c:	2821883a 	mov	r16,r5
  808a10:	10000f26 	beq	r2,zero,808a50 <_Balloc+0x60>
  808a14:	8407883a 	add	r3,r16,r16
  808a18:	18c7883a 	add	r3,r3,r3
  808a1c:	10c7883a 	add	r3,r2,r3
  808a20:	18800017 	ldw	r2,0(r3)
  808a24:	10001126 	beq	r2,zero,808a6c <_Balloc+0x7c>
  808a28:	11000017 	ldw	r4,0(r2)
  808a2c:	19000015 	stw	r4,0(r3)
  808a30:	10000415 	stw	zero,16(r2)
  808a34:	10000315 	stw	zero,12(r2)
  808a38:	dfc00317 	ldw	ra,12(sp)
  808a3c:	dc800217 	ldw	r18,8(sp)
  808a40:	dc400117 	ldw	r17,4(sp)
  808a44:	dc000017 	ldw	r16,0(sp)
  808a48:	dec00404 	addi	sp,sp,16
  808a4c:	f800283a 	ret
  808a50:	01800844 	movi	r6,33
  808a54:	01400104 	movi	r5,4
  808a58:	080b7e00 	call	80b7e0 <_calloc_r>
  808a5c:	88801315 	stw	r2,76(r17)
  808a60:	103fec1e 	bne	r2,zero,808a14 <__alt_mem_onchip_mem+0xff788a14>
  808a64:	0005883a 	mov	r2,zero
  808a68:	003ff306 	br	808a38 <__alt_mem_onchip_mem+0xff788a38>
  808a6c:	01400044 	movi	r5,1
  808a70:	2c24983a 	sll	r18,r5,r16
  808a74:	8809883a 	mov	r4,r17
  808a78:	91800144 	addi	r6,r18,5
  808a7c:	318d883a 	add	r6,r6,r6
  808a80:	318d883a 	add	r6,r6,r6
  808a84:	080b7e00 	call	80b7e0 <_calloc_r>
  808a88:	103ff626 	beq	r2,zero,808a64 <__alt_mem_onchip_mem+0xff788a64>
  808a8c:	14000115 	stw	r16,4(r2)
  808a90:	14800215 	stw	r18,8(r2)
  808a94:	003fe606 	br	808a30 <__alt_mem_onchip_mem+0xff788a30>

00808a98 <_Bfree>:
  808a98:	28000826 	beq	r5,zero,808abc <_Bfree+0x24>
  808a9c:	28c00117 	ldw	r3,4(r5)
  808aa0:	20801317 	ldw	r2,76(r4)
  808aa4:	18c7883a 	add	r3,r3,r3
  808aa8:	18c7883a 	add	r3,r3,r3
  808aac:	10c5883a 	add	r2,r2,r3
  808ab0:	10c00017 	ldw	r3,0(r2)
  808ab4:	28c00015 	stw	r3,0(r5)
  808ab8:	11400015 	stw	r5,0(r2)
  808abc:	f800283a 	ret

00808ac0 <__multadd>:
  808ac0:	defffa04 	addi	sp,sp,-24
  808ac4:	dc800315 	stw	r18,12(sp)
  808ac8:	dc400215 	stw	r17,8(sp)
  808acc:	dc000115 	stw	r16,4(sp)
  808ad0:	2823883a 	mov	r17,r5
  808ad4:	2c000417 	ldw	r16,16(r5)
  808ad8:	dfc00515 	stw	ra,20(sp)
  808adc:	dcc00415 	stw	r19,16(sp)
  808ae0:	2025883a 	mov	r18,r4
  808ae4:	29400504 	addi	r5,r5,20
  808ae8:	0011883a 	mov	r8,zero
  808aec:	28c00017 	ldw	r3,0(r5)
  808af0:	29400104 	addi	r5,r5,4
  808af4:	42000044 	addi	r8,r8,1
  808af8:	18bfffcc 	andi	r2,r3,65535
  808afc:	1185383a 	mul	r2,r2,r6
  808b00:	1806d43a 	srli	r3,r3,16
  808b04:	11cf883a 	add	r7,r2,r7
  808b08:	3808d43a 	srli	r4,r7,16
  808b0c:	1987383a 	mul	r3,r3,r6
  808b10:	38bfffcc 	andi	r2,r7,65535
  808b14:	1907883a 	add	r3,r3,r4
  808b18:	1808943a 	slli	r4,r3,16
  808b1c:	180ed43a 	srli	r7,r3,16
  808b20:	2085883a 	add	r2,r4,r2
  808b24:	28bfff15 	stw	r2,-4(r5)
  808b28:	443ff016 	blt	r8,r16,808aec <__alt_mem_onchip_mem+0xff788aec>
  808b2c:	38000926 	beq	r7,zero,808b54 <__multadd+0x94>
  808b30:	88800217 	ldw	r2,8(r17)
  808b34:	80800f0e 	bge	r16,r2,808b74 <__multadd+0xb4>
  808b38:	80800144 	addi	r2,r16,5
  808b3c:	1085883a 	add	r2,r2,r2
  808b40:	1085883a 	add	r2,r2,r2
  808b44:	8885883a 	add	r2,r17,r2
  808b48:	11c00015 	stw	r7,0(r2)
  808b4c:	84000044 	addi	r16,r16,1
  808b50:	8c000415 	stw	r16,16(r17)
  808b54:	8805883a 	mov	r2,r17
  808b58:	dfc00517 	ldw	ra,20(sp)
  808b5c:	dcc00417 	ldw	r19,16(sp)
  808b60:	dc800317 	ldw	r18,12(sp)
  808b64:	dc400217 	ldw	r17,8(sp)
  808b68:	dc000117 	ldw	r16,4(sp)
  808b6c:	dec00604 	addi	sp,sp,24
  808b70:	f800283a 	ret
  808b74:	89400117 	ldw	r5,4(r17)
  808b78:	9009883a 	mov	r4,r18
  808b7c:	d9c00015 	stw	r7,0(sp)
  808b80:	29400044 	addi	r5,r5,1
  808b84:	08089f00 	call	8089f0 <_Balloc>
  808b88:	89800417 	ldw	r6,16(r17)
  808b8c:	89400304 	addi	r5,r17,12
  808b90:	11000304 	addi	r4,r2,12
  808b94:	31800084 	addi	r6,r6,2
  808b98:	318d883a 	add	r6,r6,r6
  808b9c:	318d883a 	add	r6,r6,r6
  808ba0:	1027883a 	mov	r19,r2
  808ba4:	080874c0 	call	80874c <memcpy>
  808ba8:	d9c00017 	ldw	r7,0(sp)
  808bac:	88000a26 	beq	r17,zero,808bd8 <__multadd+0x118>
  808bb0:	88c00117 	ldw	r3,4(r17)
  808bb4:	90801317 	ldw	r2,76(r18)
  808bb8:	18c7883a 	add	r3,r3,r3
  808bbc:	18c7883a 	add	r3,r3,r3
  808bc0:	10c5883a 	add	r2,r2,r3
  808bc4:	10c00017 	ldw	r3,0(r2)
  808bc8:	88c00015 	stw	r3,0(r17)
  808bcc:	14400015 	stw	r17,0(r2)
  808bd0:	9823883a 	mov	r17,r19
  808bd4:	003fd806 	br	808b38 <__alt_mem_onchip_mem+0xff788b38>
  808bd8:	9823883a 	mov	r17,r19
  808bdc:	003fd606 	br	808b38 <__alt_mem_onchip_mem+0xff788b38>

00808be0 <__s2b>:
  808be0:	defff904 	addi	sp,sp,-28
  808be4:	dc400115 	stw	r17,4(sp)
  808be8:	dc000015 	stw	r16,0(sp)
  808bec:	2023883a 	mov	r17,r4
  808bf0:	2821883a 	mov	r16,r5
  808bf4:	39000204 	addi	r4,r7,8
  808bf8:	01400244 	movi	r5,9
  808bfc:	dcc00315 	stw	r19,12(sp)
  808c00:	dc800215 	stw	r18,8(sp)
  808c04:	dfc00615 	stw	ra,24(sp)
  808c08:	dd400515 	stw	r21,20(sp)
  808c0c:	dd000415 	stw	r20,16(sp)
  808c10:	3825883a 	mov	r18,r7
  808c14:	3027883a 	mov	r19,r6
  808c18:	080c7440 	call	80c744 <__divsi3>
  808c1c:	00c00044 	movi	r3,1
  808c20:	000b883a 	mov	r5,zero
  808c24:	1880030e 	bge	r3,r2,808c34 <__s2b+0x54>
  808c28:	18c7883a 	add	r3,r3,r3
  808c2c:	29400044 	addi	r5,r5,1
  808c30:	18bffd16 	blt	r3,r2,808c28 <__alt_mem_onchip_mem+0xff788c28>
  808c34:	8809883a 	mov	r4,r17
  808c38:	08089f00 	call	8089f0 <_Balloc>
  808c3c:	d8c00717 	ldw	r3,28(sp)
  808c40:	10c00515 	stw	r3,20(r2)
  808c44:	00c00044 	movi	r3,1
  808c48:	10c00415 	stw	r3,16(r2)
  808c4c:	00c00244 	movi	r3,9
  808c50:	1cc0210e 	bge	r3,r19,808cd8 <__s2b+0xf8>
  808c54:	80eb883a 	add	r21,r16,r3
  808c58:	a829883a 	mov	r20,r21
  808c5c:	84e1883a 	add	r16,r16,r19
  808c60:	a1c00007 	ldb	r7,0(r20)
  808c64:	01800284 	movi	r6,10
  808c68:	a5000044 	addi	r20,r20,1
  808c6c:	100b883a 	mov	r5,r2
  808c70:	39fff404 	addi	r7,r7,-48
  808c74:	8809883a 	mov	r4,r17
  808c78:	0808ac00 	call	808ac0 <__multadd>
  808c7c:	a43ff81e 	bne	r20,r16,808c60 <__alt_mem_onchip_mem+0xff788c60>
  808c80:	ace1883a 	add	r16,r21,r19
  808c84:	843ffe04 	addi	r16,r16,-8
  808c88:	9c800a0e 	bge	r19,r18,808cb4 <__s2b+0xd4>
  808c8c:	94e5c83a 	sub	r18,r18,r19
  808c90:	84a5883a 	add	r18,r16,r18
  808c94:	81c00007 	ldb	r7,0(r16)
  808c98:	01800284 	movi	r6,10
  808c9c:	84000044 	addi	r16,r16,1
  808ca0:	100b883a 	mov	r5,r2
  808ca4:	39fff404 	addi	r7,r7,-48
  808ca8:	8809883a 	mov	r4,r17
  808cac:	0808ac00 	call	808ac0 <__multadd>
  808cb0:	84bff81e 	bne	r16,r18,808c94 <__alt_mem_onchip_mem+0xff788c94>
  808cb4:	dfc00617 	ldw	ra,24(sp)
  808cb8:	dd400517 	ldw	r21,20(sp)
  808cbc:	dd000417 	ldw	r20,16(sp)
  808cc0:	dcc00317 	ldw	r19,12(sp)
  808cc4:	dc800217 	ldw	r18,8(sp)
  808cc8:	dc400117 	ldw	r17,4(sp)
  808ccc:	dc000017 	ldw	r16,0(sp)
  808cd0:	dec00704 	addi	sp,sp,28
  808cd4:	f800283a 	ret
  808cd8:	84000284 	addi	r16,r16,10
  808cdc:	1827883a 	mov	r19,r3
  808ce0:	003fe906 	br	808c88 <__alt_mem_onchip_mem+0xff788c88>

00808ce4 <__hi0bits>:
  808ce4:	20bfffec 	andhi	r2,r4,65535
  808ce8:	1000141e 	bne	r2,zero,808d3c <__hi0bits+0x58>
  808cec:	2008943a 	slli	r4,r4,16
  808cf0:	00800404 	movi	r2,16
  808cf4:	20ffc02c 	andhi	r3,r4,65280
  808cf8:	1800021e 	bne	r3,zero,808d04 <__hi0bits+0x20>
  808cfc:	2008923a 	slli	r4,r4,8
  808d00:	10800204 	addi	r2,r2,8
  808d04:	20fc002c 	andhi	r3,r4,61440
  808d08:	1800021e 	bne	r3,zero,808d14 <__hi0bits+0x30>
  808d0c:	2008913a 	slli	r4,r4,4
  808d10:	10800104 	addi	r2,r2,4
  808d14:	20f0002c 	andhi	r3,r4,49152
  808d18:	1800031e 	bne	r3,zero,808d28 <__hi0bits+0x44>
  808d1c:	2109883a 	add	r4,r4,r4
  808d20:	10800084 	addi	r2,r2,2
  808d24:	2109883a 	add	r4,r4,r4
  808d28:	20000316 	blt	r4,zero,808d38 <__hi0bits+0x54>
  808d2c:	2110002c 	andhi	r4,r4,16384
  808d30:	2000041e 	bne	r4,zero,808d44 <__hi0bits+0x60>
  808d34:	00800804 	movi	r2,32
  808d38:	f800283a 	ret
  808d3c:	0005883a 	mov	r2,zero
  808d40:	003fec06 	br	808cf4 <__alt_mem_onchip_mem+0xff788cf4>
  808d44:	10800044 	addi	r2,r2,1
  808d48:	f800283a 	ret

00808d4c <__lo0bits>:
  808d4c:	20c00017 	ldw	r3,0(r4)
  808d50:	188001cc 	andi	r2,r3,7
  808d54:	10000826 	beq	r2,zero,808d78 <__lo0bits+0x2c>
  808d58:	1880004c 	andi	r2,r3,1
  808d5c:	1000211e 	bne	r2,zero,808de4 <__lo0bits+0x98>
  808d60:	1880008c 	andi	r2,r3,2
  808d64:	1000211e 	bne	r2,zero,808dec <__lo0bits+0xa0>
  808d68:	1806d0ba 	srli	r3,r3,2
  808d6c:	00800084 	movi	r2,2
  808d70:	20c00015 	stw	r3,0(r4)
  808d74:	f800283a 	ret
  808d78:	18bfffcc 	andi	r2,r3,65535
  808d7c:	10001326 	beq	r2,zero,808dcc <__lo0bits+0x80>
  808d80:	0005883a 	mov	r2,zero
  808d84:	19403fcc 	andi	r5,r3,255
  808d88:	2800021e 	bne	r5,zero,808d94 <__lo0bits+0x48>
  808d8c:	1806d23a 	srli	r3,r3,8
  808d90:	10800204 	addi	r2,r2,8
  808d94:	194003cc 	andi	r5,r3,15
  808d98:	2800021e 	bne	r5,zero,808da4 <__lo0bits+0x58>
  808d9c:	1806d13a 	srli	r3,r3,4
  808da0:	10800104 	addi	r2,r2,4
  808da4:	194000cc 	andi	r5,r3,3
  808da8:	2800021e 	bne	r5,zero,808db4 <__lo0bits+0x68>
  808dac:	1806d0ba 	srli	r3,r3,2
  808db0:	10800084 	addi	r2,r2,2
  808db4:	1940004c 	andi	r5,r3,1
  808db8:	2800081e 	bne	r5,zero,808ddc <__lo0bits+0x90>
  808dbc:	1806d07a 	srli	r3,r3,1
  808dc0:	1800051e 	bne	r3,zero,808dd8 <__lo0bits+0x8c>
  808dc4:	00800804 	movi	r2,32
  808dc8:	f800283a 	ret
  808dcc:	1806d43a 	srli	r3,r3,16
  808dd0:	00800404 	movi	r2,16
  808dd4:	003feb06 	br	808d84 <__alt_mem_onchip_mem+0xff788d84>
  808dd8:	10800044 	addi	r2,r2,1
  808ddc:	20c00015 	stw	r3,0(r4)
  808de0:	f800283a 	ret
  808de4:	0005883a 	mov	r2,zero
  808de8:	f800283a 	ret
  808dec:	1806d07a 	srli	r3,r3,1
  808df0:	00800044 	movi	r2,1
  808df4:	20c00015 	stw	r3,0(r4)
  808df8:	f800283a 	ret

00808dfc <__i2b>:
  808dfc:	defffd04 	addi	sp,sp,-12
  808e00:	dc000015 	stw	r16,0(sp)
  808e04:	04000044 	movi	r16,1
  808e08:	dc400115 	stw	r17,4(sp)
  808e0c:	2823883a 	mov	r17,r5
  808e10:	800b883a 	mov	r5,r16
  808e14:	dfc00215 	stw	ra,8(sp)
  808e18:	08089f00 	call	8089f0 <_Balloc>
  808e1c:	14400515 	stw	r17,20(r2)
  808e20:	14000415 	stw	r16,16(r2)
  808e24:	dfc00217 	ldw	ra,8(sp)
  808e28:	dc400117 	ldw	r17,4(sp)
  808e2c:	dc000017 	ldw	r16,0(sp)
  808e30:	dec00304 	addi	sp,sp,12
  808e34:	f800283a 	ret

00808e38 <__multiply>:
  808e38:	defffa04 	addi	sp,sp,-24
  808e3c:	dcc00315 	stw	r19,12(sp)
  808e40:	dc800215 	stw	r18,8(sp)
  808e44:	34c00417 	ldw	r19,16(r6)
  808e48:	2c800417 	ldw	r18,16(r5)
  808e4c:	dd000415 	stw	r20,16(sp)
  808e50:	dc400115 	stw	r17,4(sp)
  808e54:	dfc00515 	stw	ra,20(sp)
  808e58:	dc000015 	stw	r16,0(sp)
  808e5c:	2829883a 	mov	r20,r5
  808e60:	3023883a 	mov	r17,r6
  808e64:	94c0050e 	bge	r18,r19,808e7c <__multiply+0x44>
  808e68:	9007883a 	mov	r3,r18
  808e6c:	3029883a 	mov	r20,r6
  808e70:	9825883a 	mov	r18,r19
  808e74:	2823883a 	mov	r17,r5
  808e78:	1827883a 	mov	r19,r3
  808e7c:	a0800217 	ldw	r2,8(r20)
  808e80:	94e1883a 	add	r16,r18,r19
  808e84:	a1400117 	ldw	r5,4(r20)
  808e88:	1400010e 	bge	r2,r16,808e90 <__multiply+0x58>
  808e8c:	29400044 	addi	r5,r5,1
  808e90:	08089f00 	call	8089f0 <_Balloc>
  808e94:	8415883a 	add	r10,r16,r16
  808e98:	12c00504 	addi	r11,r2,20
  808e9c:	5295883a 	add	r10,r10,r10
  808ea0:	5a95883a 	add	r10,r11,r10
  808ea4:	5807883a 	mov	r3,r11
  808ea8:	5a80032e 	bgeu	r11,r10,808eb8 <__multiply+0x80>
  808eac:	18000015 	stw	zero,0(r3)
  808eb0:	18c00104 	addi	r3,r3,4
  808eb4:	1abffd36 	bltu	r3,r10,808eac <__alt_mem_onchip_mem+0xff788eac>
  808eb8:	9ce7883a 	add	r19,r19,r19
  808ebc:	94a5883a 	add	r18,r18,r18
  808ec0:	89800504 	addi	r6,r17,20
  808ec4:	9ce7883a 	add	r19,r19,r19
  808ec8:	a3400504 	addi	r13,r20,20
  808ecc:	94a5883a 	add	r18,r18,r18
  808ed0:	34d9883a 	add	r12,r6,r19
  808ed4:	6c93883a 	add	r9,r13,r18
  808ed8:	3300422e 	bgeu	r6,r12,808fe4 <__multiply+0x1ac>
  808edc:	37c00017 	ldw	ra,0(r6)
  808ee0:	fbffffcc 	andi	r15,ra,65535
  808ee4:	78001b26 	beq	r15,zero,808f54 <__multiply+0x11c>
  808ee8:	5811883a 	mov	r8,r11
  808eec:	681d883a 	mov	r14,r13
  808ef0:	000f883a 	mov	r7,zero
  808ef4:	71000017 	ldw	r4,0(r14)
  808ef8:	40c00017 	ldw	r3,0(r8)
  808efc:	73800104 	addi	r14,r14,4
  808f00:	217fffcc 	andi	r5,r4,65535
  808f04:	2bcb383a 	mul	r5,r5,r15
  808f08:	2008d43a 	srli	r4,r4,16
  808f0c:	1c7fffcc 	andi	r17,r3,65535
  808f10:	2c4b883a 	add	r5,r5,r17
  808f14:	29cb883a 	add	r5,r5,r7
  808f18:	23c9383a 	mul	r4,r4,r15
  808f1c:	1806d43a 	srli	r3,r3,16
  808f20:	280ed43a 	srli	r7,r5,16
  808f24:	297fffcc 	andi	r5,r5,65535
  808f28:	20c7883a 	add	r3,r4,r3
  808f2c:	19c7883a 	add	r3,r3,r7
  808f30:	1808943a 	slli	r4,r3,16
  808f34:	4023883a 	mov	r17,r8
  808f38:	180ed43a 	srli	r7,r3,16
  808f3c:	214ab03a 	or	r5,r4,r5
  808f40:	41400015 	stw	r5,0(r8)
  808f44:	42000104 	addi	r8,r8,4
  808f48:	727fea36 	bltu	r14,r9,808ef4 <__alt_mem_onchip_mem+0xff788ef4>
  808f4c:	89c00115 	stw	r7,4(r17)
  808f50:	37c00017 	ldw	ra,0(r6)
  808f54:	f83ed43a 	srli	ra,ra,16
  808f58:	f8001f26 	beq	ra,zero,808fd8 <__multiply+0x1a0>
  808f5c:	58c00017 	ldw	r3,0(r11)
  808f60:	681d883a 	mov	r14,r13
  808f64:	581f883a 	mov	r15,r11
  808f68:	1811883a 	mov	r8,r3
  808f6c:	5825883a 	mov	r18,r11
  808f70:	000f883a 	mov	r7,zero
  808f74:	00000106 	br	808f7c <__multiply+0x144>
  808f78:	8825883a 	mov	r18,r17
  808f7c:	7140000b 	ldhu	r5,0(r14)
  808f80:	4010d43a 	srli	r8,r8,16
  808f84:	193fffcc 	andi	r4,r3,65535
  808f88:	2fcb383a 	mul	r5,r5,ra
  808f8c:	7bc00104 	addi	r15,r15,4
  808f90:	73800104 	addi	r14,r14,4
  808f94:	2a0b883a 	add	r5,r5,r8
  808f98:	29cb883a 	add	r5,r5,r7
  808f9c:	2806943a 	slli	r3,r5,16
  808fa0:	94400104 	addi	r17,r18,4
  808fa4:	280ad43a 	srli	r5,r5,16
  808fa8:	1908b03a 	or	r4,r3,r4
  808fac:	793fff15 	stw	r4,-4(r15)
  808fb0:	70ffff17 	ldw	r3,-4(r14)
  808fb4:	8a000017 	ldw	r8,0(r17)
  808fb8:	1806d43a 	srli	r3,r3,16
  808fbc:	413fffcc 	andi	r4,r8,65535
  808fc0:	1fc7383a 	mul	r3,r3,ra
  808fc4:	1907883a 	add	r3,r3,r4
  808fc8:	1947883a 	add	r3,r3,r5
  808fcc:	180ed43a 	srli	r7,r3,16
  808fd0:	727fe936 	bltu	r14,r9,808f78 <__alt_mem_onchip_mem+0xff788f78>
  808fd4:	90c00115 	stw	r3,4(r18)
  808fd8:	31800104 	addi	r6,r6,4
  808fdc:	5ac00104 	addi	r11,r11,4
  808fe0:	333fbe36 	bltu	r6,r12,808edc <__alt_mem_onchip_mem+0xff788edc>
  808fe4:	0400090e 	bge	zero,r16,80900c <__multiply+0x1d4>
  808fe8:	50ffff17 	ldw	r3,-4(r10)
  808fec:	52bfff04 	addi	r10,r10,-4
  808ff0:	18000326 	beq	r3,zero,809000 <__multiply+0x1c8>
  808ff4:	00000506 	br	80900c <__multiply+0x1d4>
  808ff8:	50c00017 	ldw	r3,0(r10)
  808ffc:	1800031e 	bne	r3,zero,80900c <__multiply+0x1d4>
  809000:	843fffc4 	addi	r16,r16,-1
  809004:	52bfff04 	addi	r10,r10,-4
  809008:	803ffb1e 	bne	r16,zero,808ff8 <__alt_mem_onchip_mem+0xff788ff8>
  80900c:	14000415 	stw	r16,16(r2)
  809010:	dfc00517 	ldw	ra,20(sp)
  809014:	dd000417 	ldw	r20,16(sp)
  809018:	dcc00317 	ldw	r19,12(sp)
  80901c:	dc800217 	ldw	r18,8(sp)
  809020:	dc400117 	ldw	r17,4(sp)
  809024:	dc000017 	ldw	r16,0(sp)
  809028:	dec00604 	addi	sp,sp,24
  80902c:	f800283a 	ret

00809030 <__pow5mult>:
  809030:	defffa04 	addi	sp,sp,-24
  809034:	dcc00315 	stw	r19,12(sp)
  809038:	dc000015 	stw	r16,0(sp)
  80903c:	dfc00515 	stw	ra,20(sp)
  809040:	dd000415 	stw	r20,16(sp)
  809044:	dc800215 	stw	r18,8(sp)
  809048:	dc400115 	stw	r17,4(sp)
  80904c:	308000cc 	andi	r2,r6,3
  809050:	3021883a 	mov	r16,r6
  809054:	2027883a 	mov	r19,r4
  809058:	10002f1e 	bne	r2,zero,809118 <__pow5mult+0xe8>
  80905c:	2825883a 	mov	r18,r5
  809060:	8021d0ba 	srai	r16,r16,2
  809064:	80001a26 	beq	r16,zero,8090d0 <__pow5mult+0xa0>
  809068:	9c401217 	ldw	r17,72(r19)
  80906c:	8800061e 	bne	r17,zero,809088 <__pow5mult+0x58>
  809070:	00003406 	br	809144 <__pow5mult+0x114>
  809074:	8021d07a 	srai	r16,r16,1
  809078:	80001526 	beq	r16,zero,8090d0 <__pow5mult+0xa0>
  80907c:	88800017 	ldw	r2,0(r17)
  809080:	10001c26 	beq	r2,zero,8090f4 <__pow5mult+0xc4>
  809084:	1023883a 	mov	r17,r2
  809088:	8080004c 	andi	r2,r16,1
  80908c:	103ff926 	beq	r2,zero,809074 <__alt_mem_onchip_mem+0xff789074>
  809090:	880d883a 	mov	r6,r17
  809094:	900b883a 	mov	r5,r18
  809098:	9809883a 	mov	r4,r19
  80909c:	0808e380 	call	808e38 <__multiply>
  8090a0:	90001b26 	beq	r18,zero,809110 <__pow5mult+0xe0>
  8090a4:	91000117 	ldw	r4,4(r18)
  8090a8:	98c01317 	ldw	r3,76(r19)
  8090ac:	8021d07a 	srai	r16,r16,1
  8090b0:	2109883a 	add	r4,r4,r4
  8090b4:	2109883a 	add	r4,r4,r4
  8090b8:	1907883a 	add	r3,r3,r4
  8090bc:	19000017 	ldw	r4,0(r3)
  8090c0:	91000015 	stw	r4,0(r18)
  8090c4:	1c800015 	stw	r18,0(r3)
  8090c8:	1025883a 	mov	r18,r2
  8090cc:	803feb1e 	bne	r16,zero,80907c <__alt_mem_onchip_mem+0xff78907c>
  8090d0:	9005883a 	mov	r2,r18
  8090d4:	dfc00517 	ldw	ra,20(sp)
  8090d8:	dd000417 	ldw	r20,16(sp)
  8090dc:	dcc00317 	ldw	r19,12(sp)
  8090e0:	dc800217 	ldw	r18,8(sp)
  8090e4:	dc400117 	ldw	r17,4(sp)
  8090e8:	dc000017 	ldw	r16,0(sp)
  8090ec:	dec00604 	addi	sp,sp,24
  8090f0:	f800283a 	ret
  8090f4:	880d883a 	mov	r6,r17
  8090f8:	880b883a 	mov	r5,r17
  8090fc:	9809883a 	mov	r4,r19
  809100:	0808e380 	call	808e38 <__multiply>
  809104:	88800015 	stw	r2,0(r17)
  809108:	10000015 	stw	zero,0(r2)
  80910c:	003fdd06 	br	809084 <__alt_mem_onchip_mem+0xff789084>
  809110:	1025883a 	mov	r18,r2
  809114:	003fd706 	br	809074 <__alt_mem_onchip_mem+0xff789074>
  809118:	10bfffc4 	addi	r2,r2,-1
  80911c:	1085883a 	add	r2,r2,r2
  809120:	00c02074 	movhi	r3,129
  809124:	18cda904 	addi	r3,r3,13988
  809128:	1085883a 	add	r2,r2,r2
  80912c:	1885883a 	add	r2,r3,r2
  809130:	11800017 	ldw	r6,0(r2)
  809134:	000f883a 	mov	r7,zero
  809138:	0808ac00 	call	808ac0 <__multadd>
  80913c:	1025883a 	mov	r18,r2
  809140:	003fc706 	br	809060 <__alt_mem_onchip_mem+0xff789060>
  809144:	05000044 	movi	r20,1
  809148:	a00b883a 	mov	r5,r20
  80914c:	9809883a 	mov	r4,r19
  809150:	08089f00 	call	8089f0 <_Balloc>
  809154:	1023883a 	mov	r17,r2
  809158:	00809c44 	movi	r2,625
  80915c:	88800515 	stw	r2,20(r17)
  809160:	8d000415 	stw	r20,16(r17)
  809164:	9c401215 	stw	r17,72(r19)
  809168:	88000015 	stw	zero,0(r17)
  80916c:	003fc606 	br	809088 <__alt_mem_onchip_mem+0xff789088>

00809170 <__lshift>:
  809170:	defff904 	addi	sp,sp,-28
  809174:	dd400515 	stw	r21,20(sp)
  809178:	dcc00315 	stw	r19,12(sp)
  80917c:	302bd17a 	srai	r21,r6,5
  809180:	2cc00417 	ldw	r19,16(r5)
  809184:	28800217 	ldw	r2,8(r5)
  809188:	dd000415 	stw	r20,16(sp)
  80918c:	ace7883a 	add	r19,r21,r19
  809190:	dc800215 	stw	r18,8(sp)
  809194:	dc400115 	stw	r17,4(sp)
  809198:	dc000015 	stw	r16,0(sp)
  80919c:	dfc00615 	stw	ra,24(sp)
  8091a0:	9c000044 	addi	r16,r19,1
  8091a4:	2823883a 	mov	r17,r5
  8091a8:	3029883a 	mov	r20,r6
  8091ac:	2025883a 	mov	r18,r4
  8091b0:	29400117 	ldw	r5,4(r5)
  8091b4:	1400030e 	bge	r2,r16,8091c4 <__lshift+0x54>
  8091b8:	1085883a 	add	r2,r2,r2
  8091bc:	29400044 	addi	r5,r5,1
  8091c0:	143ffd16 	blt	r2,r16,8091b8 <__alt_mem_onchip_mem+0xff7891b8>
  8091c4:	9009883a 	mov	r4,r18
  8091c8:	08089f00 	call	8089f0 <_Balloc>
  8091cc:	10c00504 	addi	r3,r2,20
  8091d0:	0540070e 	bge	zero,r21,8091f0 <__lshift+0x80>
  8091d4:	ad6b883a 	add	r21,r21,r21
  8091d8:	ad6b883a 	add	r21,r21,r21
  8091dc:	1809883a 	mov	r4,r3
  8091e0:	1d47883a 	add	r3,r3,r21
  8091e4:	20000015 	stw	zero,0(r4)
  8091e8:	21000104 	addi	r4,r4,4
  8091ec:	193ffd1e 	bne	r3,r4,8091e4 <__alt_mem_onchip_mem+0xff7891e4>
  8091f0:	8a000417 	ldw	r8,16(r17)
  8091f4:	89000504 	addi	r4,r17,20
  8091f8:	a18007cc 	andi	r6,r20,31
  8091fc:	4211883a 	add	r8,r8,r8
  809200:	4211883a 	add	r8,r8,r8
  809204:	2211883a 	add	r8,r4,r8
  809208:	30002326 	beq	r6,zero,809298 <__lshift+0x128>
  80920c:	02400804 	movi	r9,32
  809210:	4993c83a 	sub	r9,r9,r6
  809214:	000b883a 	mov	r5,zero
  809218:	21c00017 	ldw	r7,0(r4)
  80921c:	1815883a 	mov	r10,r3
  809220:	18c00104 	addi	r3,r3,4
  809224:	398e983a 	sll	r7,r7,r6
  809228:	21000104 	addi	r4,r4,4
  80922c:	394ab03a 	or	r5,r7,r5
  809230:	197fff15 	stw	r5,-4(r3)
  809234:	217fff17 	ldw	r5,-4(r4)
  809238:	2a4ad83a 	srl	r5,r5,r9
  80923c:	223ff636 	bltu	r4,r8,809218 <__alt_mem_onchip_mem+0xff789218>
  809240:	51400115 	stw	r5,4(r10)
  809244:	28001a1e 	bne	r5,zero,8092b0 <__lshift+0x140>
  809248:	843fffc4 	addi	r16,r16,-1
  80924c:	14000415 	stw	r16,16(r2)
  809250:	88000826 	beq	r17,zero,809274 <__lshift+0x104>
  809254:	89000117 	ldw	r4,4(r17)
  809258:	90c01317 	ldw	r3,76(r18)
  80925c:	2109883a 	add	r4,r4,r4
  809260:	2109883a 	add	r4,r4,r4
  809264:	1907883a 	add	r3,r3,r4
  809268:	19000017 	ldw	r4,0(r3)
  80926c:	89000015 	stw	r4,0(r17)
  809270:	1c400015 	stw	r17,0(r3)
  809274:	dfc00617 	ldw	ra,24(sp)
  809278:	dd400517 	ldw	r21,20(sp)
  80927c:	dd000417 	ldw	r20,16(sp)
  809280:	dcc00317 	ldw	r19,12(sp)
  809284:	dc800217 	ldw	r18,8(sp)
  809288:	dc400117 	ldw	r17,4(sp)
  80928c:	dc000017 	ldw	r16,0(sp)
  809290:	dec00704 	addi	sp,sp,28
  809294:	f800283a 	ret
  809298:	21400017 	ldw	r5,0(r4)
  80929c:	18c00104 	addi	r3,r3,4
  8092a0:	21000104 	addi	r4,r4,4
  8092a4:	197fff15 	stw	r5,-4(r3)
  8092a8:	223ffb36 	bltu	r4,r8,809298 <__alt_mem_onchip_mem+0xff789298>
  8092ac:	003fe606 	br	809248 <__alt_mem_onchip_mem+0xff789248>
  8092b0:	9c000084 	addi	r16,r19,2
  8092b4:	003fe406 	br	809248 <__alt_mem_onchip_mem+0xff789248>

008092b8 <__mcmp>:
  8092b8:	20800417 	ldw	r2,16(r4)
  8092bc:	28c00417 	ldw	r3,16(r5)
  8092c0:	10c5c83a 	sub	r2,r2,r3
  8092c4:	1000111e 	bne	r2,zero,80930c <__mcmp+0x54>
  8092c8:	18c7883a 	add	r3,r3,r3
  8092cc:	18c7883a 	add	r3,r3,r3
  8092d0:	21000504 	addi	r4,r4,20
  8092d4:	29400504 	addi	r5,r5,20
  8092d8:	20c5883a 	add	r2,r4,r3
  8092dc:	28cb883a 	add	r5,r5,r3
  8092e0:	00000106 	br	8092e8 <__mcmp+0x30>
  8092e4:	20800a2e 	bgeu	r4,r2,809310 <__mcmp+0x58>
  8092e8:	10bfff04 	addi	r2,r2,-4
  8092ec:	297fff04 	addi	r5,r5,-4
  8092f0:	11800017 	ldw	r6,0(r2)
  8092f4:	28c00017 	ldw	r3,0(r5)
  8092f8:	30fffa26 	beq	r6,r3,8092e4 <__alt_mem_onchip_mem+0xff7892e4>
  8092fc:	30c00236 	bltu	r6,r3,809308 <__mcmp+0x50>
  809300:	00800044 	movi	r2,1
  809304:	f800283a 	ret
  809308:	00bfffc4 	movi	r2,-1
  80930c:	f800283a 	ret
  809310:	0005883a 	mov	r2,zero
  809314:	f800283a 	ret

00809318 <__mdiff>:
  809318:	28c00417 	ldw	r3,16(r5)
  80931c:	30800417 	ldw	r2,16(r6)
  809320:	defffa04 	addi	sp,sp,-24
  809324:	dcc00315 	stw	r19,12(sp)
  809328:	dc800215 	stw	r18,8(sp)
  80932c:	dfc00515 	stw	ra,20(sp)
  809330:	dd000415 	stw	r20,16(sp)
  809334:	dc400115 	stw	r17,4(sp)
  809338:	dc000015 	stw	r16,0(sp)
  80933c:	1887c83a 	sub	r3,r3,r2
  809340:	2825883a 	mov	r18,r5
  809344:	3027883a 	mov	r19,r6
  809348:	1800141e 	bne	r3,zero,80939c <__mdiff+0x84>
  80934c:	1085883a 	add	r2,r2,r2
  809350:	1085883a 	add	r2,r2,r2
  809354:	2a000504 	addi	r8,r5,20
  809358:	34000504 	addi	r16,r6,20
  80935c:	4087883a 	add	r3,r8,r2
  809360:	8085883a 	add	r2,r16,r2
  809364:	00000106 	br	80936c <__mdiff+0x54>
  809368:	40c0592e 	bgeu	r8,r3,8094d0 <__mdiff+0x1b8>
  80936c:	18ffff04 	addi	r3,r3,-4
  809370:	10bfff04 	addi	r2,r2,-4
  809374:	19c00017 	ldw	r7,0(r3)
  809378:	11400017 	ldw	r5,0(r2)
  80937c:	397ffa26 	beq	r7,r5,809368 <__alt_mem_onchip_mem+0xff789368>
  809380:	3940592e 	bgeu	r7,r5,8094e8 <__mdiff+0x1d0>
  809384:	9005883a 	mov	r2,r18
  809388:	4023883a 	mov	r17,r8
  80938c:	9825883a 	mov	r18,r19
  809390:	05000044 	movi	r20,1
  809394:	1027883a 	mov	r19,r2
  809398:	00000406 	br	8093ac <__mdiff+0x94>
  80939c:	18005616 	blt	r3,zero,8094f8 <__mdiff+0x1e0>
  8093a0:	34400504 	addi	r17,r6,20
  8093a4:	2c000504 	addi	r16,r5,20
  8093a8:	0029883a 	mov	r20,zero
  8093ac:	91400117 	ldw	r5,4(r18)
  8093b0:	08089f00 	call	8089f0 <_Balloc>
  8093b4:	92400417 	ldw	r9,16(r18)
  8093b8:	9b000417 	ldw	r12,16(r19)
  8093bc:	12c00504 	addi	r11,r2,20
  8093c0:	4a51883a 	add	r8,r9,r9
  8093c4:	6319883a 	add	r12,r12,r12
  8093c8:	4211883a 	add	r8,r8,r8
  8093cc:	6319883a 	add	r12,r12,r12
  8093d0:	15000315 	stw	r20,12(r2)
  8093d4:	8211883a 	add	r8,r16,r8
  8093d8:	8b19883a 	add	r12,r17,r12
  8093dc:	0007883a 	mov	r3,zero
  8093e0:	81400017 	ldw	r5,0(r16)
  8093e4:	89c00017 	ldw	r7,0(r17)
  8093e8:	59800104 	addi	r6,r11,4
  8093ec:	293fffcc 	andi	r4,r5,65535
  8093f0:	20c7883a 	add	r3,r4,r3
  8093f4:	393fffcc 	andi	r4,r7,65535
  8093f8:	1909c83a 	sub	r4,r3,r4
  8093fc:	280ad43a 	srli	r5,r5,16
  809400:	380ed43a 	srli	r7,r7,16
  809404:	2007d43a 	srai	r3,r4,16
  809408:	213fffcc 	andi	r4,r4,65535
  80940c:	29cbc83a 	sub	r5,r5,r7
  809410:	28c7883a 	add	r3,r5,r3
  809414:	180a943a 	slli	r5,r3,16
  809418:	8c400104 	addi	r17,r17,4
  80941c:	84000104 	addi	r16,r16,4
  809420:	2908b03a 	or	r4,r5,r4
  809424:	59000015 	stw	r4,0(r11)
  809428:	1807d43a 	srai	r3,r3,16
  80942c:	3015883a 	mov	r10,r6
  809430:	3017883a 	mov	r11,r6
  809434:	8b3fea36 	bltu	r17,r12,8093e0 <__alt_mem_onchip_mem+0xff7893e0>
  809438:	8200162e 	bgeu	r16,r8,809494 <__mdiff+0x17c>
  80943c:	8017883a 	mov	r11,r16
  809440:	59400017 	ldw	r5,0(r11)
  809444:	31800104 	addi	r6,r6,4
  809448:	5ac00104 	addi	r11,r11,4
  80944c:	293fffcc 	andi	r4,r5,65535
  809450:	20c7883a 	add	r3,r4,r3
  809454:	280ed43a 	srli	r7,r5,16
  809458:	180bd43a 	srai	r5,r3,16
  80945c:	193fffcc 	andi	r4,r3,65535
  809460:	3947883a 	add	r3,r7,r5
  809464:	180a943a 	slli	r5,r3,16
  809468:	1807d43a 	srai	r3,r3,16
  80946c:	2908b03a 	or	r4,r5,r4
  809470:	313fff15 	stw	r4,-4(r6)
  809474:	5a3ff236 	bltu	r11,r8,809440 <__alt_mem_onchip_mem+0xff789440>
  809478:	0406303a 	nor	r3,zero,r16
  80947c:	1a07883a 	add	r3,r3,r8
  809480:	1806d0ba 	srli	r3,r3,2
  809484:	18c00044 	addi	r3,r3,1
  809488:	18c7883a 	add	r3,r3,r3
  80948c:	18c7883a 	add	r3,r3,r3
  809490:	50d5883a 	add	r10,r10,r3
  809494:	50ffff04 	addi	r3,r10,-4
  809498:	2000041e 	bne	r4,zero,8094ac <__mdiff+0x194>
  80949c:	18ffff04 	addi	r3,r3,-4
  8094a0:	19000017 	ldw	r4,0(r3)
  8094a4:	4a7fffc4 	addi	r9,r9,-1
  8094a8:	203ffc26 	beq	r4,zero,80949c <__alt_mem_onchip_mem+0xff78949c>
  8094ac:	12400415 	stw	r9,16(r2)
  8094b0:	dfc00517 	ldw	ra,20(sp)
  8094b4:	dd000417 	ldw	r20,16(sp)
  8094b8:	dcc00317 	ldw	r19,12(sp)
  8094bc:	dc800217 	ldw	r18,8(sp)
  8094c0:	dc400117 	ldw	r17,4(sp)
  8094c4:	dc000017 	ldw	r16,0(sp)
  8094c8:	dec00604 	addi	sp,sp,24
  8094cc:	f800283a 	ret
  8094d0:	000b883a 	mov	r5,zero
  8094d4:	08089f00 	call	8089f0 <_Balloc>
  8094d8:	00c00044 	movi	r3,1
  8094dc:	10c00415 	stw	r3,16(r2)
  8094e0:	10000515 	stw	zero,20(r2)
  8094e4:	003ff206 	br	8094b0 <__alt_mem_onchip_mem+0xff7894b0>
  8094e8:	8023883a 	mov	r17,r16
  8094ec:	0029883a 	mov	r20,zero
  8094f0:	4021883a 	mov	r16,r8
  8094f4:	003fad06 	br	8093ac <__alt_mem_onchip_mem+0xff7893ac>
  8094f8:	9005883a 	mov	r2,r18
  8094fc:	94400504 	addi	r17,r18,20
  809500:	9c000504 	addi	r16,r19,20
  809504:	9825883a 	mov	r18,r19
  809508:	05000044 	movi	r20,1
  80950c:	1027883a 	mov	r19,r2
  809510:	003fa606 	br	8093ac <__alt_mem_onchip_mem+0xff7893ac>

00809514 <__ulp>:
  809514:	295ffc2c 	andhi	r5,r5,32752
  809518:	00bf3034 	movhi	r2,64704
  80951c:	2887883a 	add	r3,r5,r2
  809520:	00c0020e 	bge	zero,r3,80952c <__ulp+0x18>
  809524:	0005883a 	mov	r2,zero
  809528:	f800283a 	ret
  80952c:	00c7c83a 	sub	r3,zero,r3
  809530:	1807d53a 	srai	r3,r3,20
  809534:	008004c4 	movi	r2,19
  809538:	10c00b0e 	bge	r2,r3,809568 <__ulp+0x54>
  80953c:	18bffb04 	addi	r2,r3,-20
  809540:	01000784 	movi	r4,30
  809544:	0007883a 	mov	r3,zero
  809548:	20800516 	blt	r4,r2,809560 <__ulp+0x4c>
  80954c:	010007c4 	movi	r4,31
  809550:	2089c83a 	sub	r4,r4,r2
  809554:	00800044 	movi	r2,1
  809558:	1104983a 	sll	r2,r2,r4
  80955c:	f800283a 	ret
  809560:	00800044 	movi	r2,1
  809564:	f800283a 	ret
  809568:	01400234 	movhi	r5,8
  80956c:	28c7d83a 	sra	r3,r5,r3
  809570:	0005883a 	mov	r2,zero
  809574:	f800283a 	ret

00809578 <__b2d>:
  809578:	defffa04 	addi	sp,sp,-24
  80957c:	dc000015 	stw	r16,0(sp)
  809580:	24000417 	ldw	r16,16(r4)
  809584:	dc400115 	stw	r17,4(sp)
  809588:	24400504 	addi	r17,r4,20
  80958c:	8421883a 	add	r16,r16,r16
  809590:	8421883a 	add	r16,r16,r16
  809594:	8c21883a 	add	r16,r17,r16
  809598:	dc800215 	stw	r18,8(sp)
  80959c:	84bfff17 	ldw	r18,-4(r16)
  8095a0:	dd000415 	stw	r20,16(sp)
  8095a4:	dcc00315 	stw	r19,12(sp)
  8095a8:	9009883a 	mov	r4,r18
  8095ac:	2829883a 	mov	r20,r5
  8095b0:	dfc00515 	stw	ra,20(sp)
  8095b4:	0808ce40 	call	808ce4 <__hi0bits>
  8095b8:	00c00804 	movi	r3,32
  8095bc:	1889c83a 	sub	r4,r3,r2
  8095c0:	a1000015 	stw	r4,0(r20)
  8095c4:	01000284 	movi	r4,10
  8095c8:	84ffff04 	addi	r19,r16,-4
  8095cc:	20801216 	blt	r4,r2,809618 <__b2d+0xa0>
  8095d0:	018002c4 	movi	r6,11
  8095d4:	308dc83a 	sub	r6,r6,r2
  8095d8:	9186d83a 	srl	r3,r18,r6
  8095dc:	18cffc34 	orhi	r3,r3,16368
  8095e0:	8cc0212e 	bgeu	r17,r19,809668 <__b2d+0xf0>
  8095e4:	813ffe17 	ldw	r4,-8(r16)
  8095e8:	218cd83a 	srl	r6,r4,r6
  8095ec:	10800544 	addi	r2,r2,21
  8095f0:	9084983a 	sll	r2,r18,r2
  8095f4:	1184b03a 	or	r2,r2,r6
  8095f8:	dfc00517 	ldw	ra,20(sp)
  8095fc:	dd000417 	ldw	r20,16(sp)
  809600:	dcc00317 	ldw	r19,12(sp)
  809604:	dc800217 	ldw	r18,8(sp)
  809608:	dc400117 	ldw	r17,4(sp)
  80960c:	dc000017 	ldw	r16,0(sp)
  809610:	dec00604 	addi	sp,sp,24
  809614:	f800283a 	ret
  809618:	8cc00f2e 	bgeu	r17,r19,809658 <__b2d+0xe0>
  80961c:	117ffd44 	addi	r5,r2,-11
  809620:	80bffe17 	ldw	r2,-8(r16)
  809624:	28000e26 	beq	r5,zero,809660 <__b2d+0xe8>
  809628:	1949c83a 	sub	r4,r3,r5
  80962c:	9164983a 	sll	r18,r18,r5
  809630:	1106d83a 	srl	r3,r2,r4
  809634:	81bffe04 	addi	r6,r16,-8
  809638:	948ffc34 	orhi	r18,r18,16368
  80963c:	90c6b03a 	or	r3,r18,r3
  809640:	89800e2e 	bgeu	r17,r6,80967c <__b2d+0x104>
  809644:	81bffd17 	ldw	r6,-12(r16)
  809648:	1144983a 	sll	r2,r2,r5
  80964c:	310ad83a 	srl	r5,r6,r4
  809650:	2884b03a 	or	r2,r5,r2
  809654:	003fe806 	br	8095f8 <__alt_mem_onchip_mem+0xff7895f8>
  809658:	10bffd44 	addi	r2,r2,-11
  80965c:	1000041e 	bne	r2,zero,809670 <__b2d+0xf8>
  809660:	90cffc34 	orhi	r3,r18,16368
  809664:	003fe406 	br	8095f8 <__alt_mem_onchip_mem+0xff7895f8>
  809668:	000d883a 	mov	r6,zero
  80966c:	003fdf06 	br	8095ec <__alt_mem_onchip_mem+0xff7895ec>
  809670:	90a4983a 	sll	r18,r18,r2
  809674:	0005883a 	mov	r2,zero
  809678:	003ff906 	br	809660 <__alt_mem_onchip_mem+0xff789660>
  80967c:	1144983a 	sll	r2,r2,r5
  809680:	003fdd06 	br	8095f8 <__alt_mem_onchip_mem+0xff7895f8>

00809684 <__d2b>:
  809684:	defff804 	addi	sp,sp,-32
  809688:	dc000215 	stw	r16,8(sp)
  80968c:	3021883a 	mov	r16,r6
  809690:	dc400315 	stw	r17,12(sp)
  809694:	8022907a 	slli	r17,r16,1
  809698:	dd000615 	stw	r20,24(sp)
  80969c:	2829883a 	mov	r20,r5
  8096a0:	01400044 	movi	r5,1
  8096a4:	dcc00515 	stw	r19,20(sp)
  8096a8:	dc800415 	stw	r18,16(sp)
  8096ac:	dfc00715 	stw	ra,28(sp)
  8096b0:	3825883a 	mov	r18,r7
  8096b4:	8822d57a 	srli	r17,r17,21
  8096b8:	08089f00 	call	8089f0 <_Balloc>
  8096bc:	1027883a 	mov	r19,r2
  8096c0:	00800434 	movhi	r2,16
  8096c4:	10bfffc4 	addi	r2,r2,-1
  8096c8:	808c703a 	and	r6,r16,r2
  8096cc:	88000126 	beq	r17,zero,8096d4 <__d2b+0x50>
  8096d0:	31800434 	orhi	r6,r6,16
  8096d4:	d9800015 	stw	r6,0(sp)
  8096d8:	a0002426 	beq	r20,zero,80976c <__d2b+0xe8>
  8096dc:	d9000104 	addi	r4,sp,4
  8096e0:	dd000115 	stw	r20,4(sp)
  8096e4:	0808d4c0 	call	808d4c <__lo0bits>
  8096e8:	d8c00017 	ldw	r3,0(sp)
  8096ec:	10002f1e 	bne	r2,zero,8097ac <__d2b+0x128>
  8096f0:	d9000117 	ldw	r4,4(sp)
  8096f4:	99000515 	stw	r4,20(r19)
  8096f8:	1821003a 	cmpeq	r16,r3,zero
  8096fc:	01000084 	movi	r4,2
  809700:	2421c83a 	sub	r16,r4,r16
  809704:	98c00615 	stw	r3,24(r19)
  809708:	9c000415 	stw	r16,16(r19)
  80970c:	88001f1e 	bne	r17,zero,80978c <__d2b+0x108>
  809710:	10bef384 	addi	r2,r2,-1074
  809714:	90800015 	stw	r2,0(r18)
  809718:	00900034 	movhi	r2,16384
  80971c:	10bfffc4 	addi	r2,r2,-1
  809720:	8085883a 	add	r2,r16,r2
  809724:	1085883a 	add	r2,r2,r2
  809728:	1085883a 	add	r2,r2,r2
  80972c:	9885883a 	add	r2,r19,r2
  809730:	11000517 	ldw	r4,20(r2)
  809734:	8020917a 	slli	r16,r16,5
  809738:	0808ce40 	call	808ce4 <__hi0bits>
  80973c:	d8c00817 	ldw	r3,32(sp)
  809740:	8085c83a 	sub	r2,r16,r2
  809744:	18800015 	stw	r2,0(r3)
  809748:	9805883a 	mov	r2,r19
  80974c:	dfc00717 	ldw	ra,28(sp)
  809750:	dd000617 	ldw	r20,24(sp)
  809754:	dcc00517 	ldw	r19,20(sp)
  809758:	dc800417 	ldw	r18,16(sp)
  80975c:	dc400317 	ldw	r17,12(sp)
  809760:	dc000217 	ldw	r16,8(sp)
  809764:	dec00804 	addi	sp,sp,32
  809768:	f800283a 	ret
  80976c:	d809883a 	mov	r4,sp
  809770:	0808d4c0 	call	808d4c <__lo0bits>
  809774:	d8c00017 	ldw	r3,0(sp)
  809778:	04000044 	movi	r16,1
  80977c:	9c000415 	stw	r16,16(r19)
  809780:	98c00515 	stw	r3,20(r19)
  809784:	10800804 	addi	r2,r2,32
  809788:	883fe126 	beq	r17,zero,809710 <__alt_mem_onchip_mem+0xff789710>
  80978c:	00c00d44 	movi	r3,53
  809790:	8c7ef344 	addi	r17,r17,-1075
  809794:	88a3883a 	add	r17,r17,r2
  809798:	1885c83a 	sub	r2,r3,r2
  80979c:	d8c00817 	ldw	r3,32(sp)
  8097a0:	94400015 	stw	r17,0(r18)
  8097a4:	18800015 	stw	r2,0(r3)
  8097a8:	003fe706 	br	809748 <__alt_mem_onchip_mem+0xff789748>
  8097ac:	01000804 	movi	r4,32
  8097b0:	2089c83a 	sub	r4,r4,r2
  8097b4:	1908983a 	sll	r4,r3,r4
  8097b8:	d9400117 	ldw	r5,4(sp)
  8097bc:	1886d83a 	srl	r3,r3,r2
  8097c0:	2148b03a 	or	r4,r4,r5
  8097c4:	99000515 	stw	r4,20(r19)
  8097c8:	d8c00015 	stw	r3,0(sp)
  8097cc:	003fca06 	br	8096f8 <__alt_mem_onchip_mem+0xff7896f8>

008097d0 <__ratio>:
  8097d0:	defff904 	addi	sp,sp,-28
  8097d4:	dc400315 	stw	r17,12(sp)
  8097d8:	2823883a 	mov	r17,r5
  8097dc:	d9400104 	addi	r5,sp,4
  8097e0:	dfc00615 	stw	ra,24(sp)
  8097e4:	dcc00515 	stw	r19,20(sp)
  8097e8:	dc800415 	stw	r18,16(sp)
  8097ec:	2027883a 	mov	r19,r4
  8097f0:	dc000215 	stw	r16,8(sp)
  8097f4:	08095780 	call	809578 <__b2d>
  8097f8:	d80b883a 	mov	r5,sp
  8097fc:	8809883a 	mov	r4,r17
  809800:	1025883a 	mov	r18,r2
  809804:	1821883a 	mov	r16,r3
  809808:	08095780 	call	809578 <__b2d>
  80980c:	8a000417 	ldw	r8,16(r17)
  809810:	99000417 	ldw	r4,16(r19)
  809814:	d9400117 	ldw	r5,4(sp)
  809818:	2209c83a 	sub	r4,r4,r8
  80981c:	2010917a 	slli	r8,r4,5
  809820:	d9000017 	ldw	r4,0(sp)
  809824:	2909c83a 	sub	r4,r5,r4
  809828:	4109883a 	add	r4,r8,r4
  80982c:	01000e0e 	bge	zero,r4,809868 <__ratio+0x98>
  809830:	2008953a 	slli	r4,r4,20
  809834:	2421883a 	add	r16,r4,r16
  809838:	100d883a 	mov	r6,r2
  80983c:	180f883a 	mov	r7,r3
  809840:	9009883a 	mov	r4,r18
  809844:	800b883a 	mov	r5,r16
  809848:	080d1a40 	call	80d1a4 <__divdf3>
  80984c:	dfc00617 	ldw	ra,24(sp)
  809850:	dcc00517 	ldw	r19,20(sp)
  809854:	dc800417 	ldw	r18,16(sp)
  809858:	dc400317 	ldw	r17,12(sp)
  80985c:	dc000217 	ldw	r16,8(sp)
  809860:	dec00704 	addi	sp,sp,28
  809864:	f800283a 	ret
  809868:	2008953a 	slli	r4,r4,20
  80986c:	1907c83a 	sub	r3,r3,r4
  809870:	003ff106 	br	809838 <__alt_mem_onchip_mem+0xff789838>

00809874 <_mprec_log10>:
  809874:	defffe04 	addi	sp,sp,-8
  809878:	dc000015 	stw	r16,0(sp)
  80987c:	dfc00115 	stw	ra,4(sp)
  809880:	008005c4 	movi	r2,23
  809884:	2021883a 	mov	r16,r4
  809888:	11000d0e 	bge	r2,r4,8098c0 <_mprec_log10+0x4c>
  80988c:	0005883a 	mov	r2,zero
  809890:	00cffc34 	movhi	r3,16368
  809894:	843fffc4 	addi	r16,r16,-1
  809898:	000d883a 	mov	r6,zero
  80989c:	01d00934 	movhi	r7,16420
  8098a0:	1009883a 	mov	r4,r2
  8098a4:	180b883a 	mov	r5,r3
  8098a8:	080dce40 	call	80dce4 <__muldf3>
  8098ac:	803ff91e 	bne	r16,zero,809894 <__alt_mem_onchip_mem+0xff789894>
  8098b0:	dfc00117 	ldw	ra,4(sp)
  8098b4:	dc000017 	ldw	r16,0(sp)
  8098b8:	dec00204 	addi	sp,sp,8
  8098bc:	f800283a 	ret
  8098c0:	202090fa 	slli	r16,r4,3
  8098c4:	00802074 	movhi	r2,129
  8098c8:	108dc004 	addi	r2,r2,14080
  8098cc:	1421883a 	add	r16,r2,r16
  8098d0:	80800017 	ldw	r2,0(r16)
  8098d4:	80c00117 	ldw	r3,4(r16)
  8098d8:	dfc00117 	ldw	ra,4(sp)
  8098dc:	dc000017 	ldw	r16,0(sp)
  8098e0:	dec00204 	addi	sp,sp,8
  8098e4:	f800283a 	ret

008098e8 <__copybits>:
  8098e8:	297fffc4 	addi	r5,r5,-1
  8098ec:	280fd17a 	srai	r7,r5,5
  8098f0:	30c00417 	ldw	r3,16(r6)
  8098f4:	30800504 	addi	r2,r6,20
  8098f8:	39c00044 	addi	r7,r7,1
  8098fc:	18c7883a 	add	r3,r3,r3
  809900:	39cf883a 	add	r7,r7,r7
  809904:	18c7883a 	add	r3,r3,r3
  809908:	39cf883a 	add	r7,r7,r7
  80990c:	10c7883a 	add	r3,r2,r3
  809910:	21cf883a 	add	r7,r4,r7
  809914:	10c00d2e 	bgeu	r2,r3,80994c <__copybits+0x64>
  809918:	200b883a 	mov	r5,r4
  80991c:	12000017 	ldw	r8,0(r2)
  809920:	29400104 	addi	r5,r5,4
  809924:	10800104 	addi	r2,r2,4
  809928:	2a3fff15 	stw	r8,-4(r5)
  80992c:	10fffb36 	bltu	r2,r3,80991c <__alt_mem_onchip_mem+0xff78991c>
  809930:	1985c83a 	sub	r2,r3,r6
  809934:	10bffac4 	addi	r2,r2,-21
  809938:	1004d0ba 	srli	r2,r2,2
  80993c:	10800044 	addi	r2,r2,1
  809940:	1085883a 	add	r2,r2,r2
  809944:	1085883a 	add	r2,r2,r2
  809948:	2089883a 	add	r4,r4,r2
  80994c:	21c0032e 	bgeu	r4,r7,80995c <__copybits+0x74>
  809950:	20000015 	stw	zero,0(r4)
  809954:	21000104 	addi	r4,r4,4
  809958:	21fffd36 	bltu	r4,r7,809950 <__alt_mem_onchip_mem+0xff789950>
  80995c:	f800283a 	ret

00809960 <__any_on>:
  809960:	20c00417 	ldw	r3,16(r4)
  809964:	2805d17a 	srai	r2,r5,5
  809968:	21000504 	addi	r4,r4,20
  80996c:	18800d0e 	bge	r3,r2,8099a4 <__any_on+0x44>
  809970:	18c7883a 	add	r3,r3,r3
  809974:	18c7883a 	add	r3,r3,r3
  809978:	20c7883a 	add	r3,r4,r3
  80997c:	20c0192e 	bgeu	r4,r3,8099e4 <__any_on+0x84>
  809980:	18bfff17 	ldw	r2,-4(r3)
  809984:	18ffff04 	addi	r3,r3,-4
  809988:	1000041e 	bne	r2,zero,80999c <__any_on+0x3c>
  80998c:	20c0142e 	bgeu	r4,r3,8099e0 <__any_on+0x80>
  809990:	18ffff04 	addi	r3,r3,-4
  809994:	19400017 	ldw	r5,0(r3)
  809998:	283ffc26 	beq	r5,zero,80998c <__alt_mem_onchip_mem+0xff78998c>
  80999c:	00800044 	movi	r2,1
  8099a0:	f800283a 	ret
  8099a4:	10c00a0e 	bge	r2,r3,8099d0 <__any_on+0x70>
  8099a8:	1085883a 	add	r2,r2,r2
  8099ac:	1085883a 	add	r2,r2,r2
  8099b0:	294007cc 	andi	r5,r5,31
  8099b4:	2087883a 	add	r3,r4,r2
  8099b8:	283ff026 	beq	r5,zero,80997c <__alt_mem_onchip_mem+0xff78997c>
  8099bc:	19800017 	ldw	r6,0(r3)
  8099c0:	3144d83a 	srl	r2,r6,r5
  8099c4:	114a983a 	sll	r5,r2,r5
  8099c8:	317ff41e 	bne	r6,r5,80999c <__alt_mem_onchip_mem+0xff78999c>
  8099cc:	003feb06 	br	80997c <__alt_mem_onchip_mem+0xff78997c>
  8099d0:	1085883a 	add	r2,r2,r2
  8099d4:	1085883a 	add	r2,r2,r2
  8099d8:	2087883a 	add	r3,r4,r2
  8099dc:	003fe706 	br	80997c <__alt_mem_onchip_mem+0xff78997c>
  8099e0:	f800283a 	ret
  8099e4:	0005883a 	mov	r2,zero
  8099e8:	f800283a 	ret

008099ec <_read_r>:
  8099ec:	defffd04 	addi	sp,sp,-12
  8099f0:	2805883a 	mov	r2,r5
  8099f4:	dc000015 	stw	r16,0(sp)
  8099f8:	04002074 	movhi	r16,129
  8099fc:	dc400115 	stw	r17,4(sp)
  809a00:	300b883a 	mov	r5,r6
  809a04:	841cd404 	addi	r16,r16,29520
  809a08:	2023883a 	mov	r17,r4
  809a0c:	380d883a 	mov	r6,r7
  809a10:	1009883a 	mov	r4,r2
  809a14:	dfc00215 	stw	ra,8(sp)
  809a18:	80000015 	stw	zero,0(r16)
  809a1c:	080fa600 	call	80fa60 <read>
  809a20:	00ffffc4 	movi	r3,-1
  809a24:	10c00526 	beq	r2,r3,809a3c <_read_r+0x50>
  809a28:	dfc00217 	ldw	ra,8(sp)
  809a2c:	dc400117 	ldw	r17,4(sp)
  809a30:	dc000017 	ldw	r16,0(sp)
  809a34:	dec00304 	addi	sp,sp,12
  809a38:	f800283a 	ret
  809a3c:	80c00017 	ldw	r3,0(r16)
  809a40:	183ff926 	beq	r3,zero,809a28 <__alt_mem_onchip_mem+0xff789a28>
  809a44:	88c00015 	stw	r3,0(r17)
  809a48:	003ff706 	br	809a28 <__alt_mem_onchip_mem+0xff789a28>

00809a4c <_realloc_r>:
  809a4c:	defff604 	addi	sp,sp,-40
  809a50:	dc800215 	stw	r18,8(sp)
  809a54:	dfc00915 	stw	ra,36(sp)
  809a58:	df000815 	stw	fp,32(sp)
  809a5c:	ddc00715 	stw	r23,28(sp)
  809a60:	dd800615 	stw	r22,24(sp)
  809a64:	dd400515 	stw	r21,20(sp)
  809a68:	dd000415 	stw	r20,16(sp)
  809a6c:	dcc00315 	stw	r19,12(sp)
  809a70:	dc400115 	stw	r17,4(sp)
  809a74:	dc000015 	stw	r16,0(sp)
  809a78:	3025883a 	mov	r18,r6
  809a7c:	2800b726 	beq	r5,zero,809d5c <_realloc_r+0x310>
  809a80:	282b883a 	mov	r21,r5
  809a84:	2029883a 	mov	r20,r4
  809a88:	080f7880 	call	80f788 <__malloc_lock>
  809a8c:	a8bfff17 	ldw	r2,-4(r21)
  809a90:	043fff04 	movi	r16,-4
  809a94:	90c002c4 	addi	r3,r18,11
  809a98:	01000584 	movi	r4,22
  809a9c:	acfffe04 	addi	r19,r21,-8
  809aa0:	1420703a 	and	r16,r2,r16
  809aa4:	20c0332e 	bgeu	r4,r3,809b74 <_realloc_r+0x128>
  809aa8:	047ffe04 	movi	r17,-8
  809aac:	1c62703a 	and	r17,r3,r17
  809ab0:	8807883a 	mov	r3,r17
  809ab4:	88005816 	blt	r17,zero,809c18 <_realloc_r+0x1cc>
  809ab8:	8c805736 	bltu	r17,r18,809c18 <_realloc_r+0x1cc>
  809abc:	80c0300e 	bge	r16,r3,809b80 <_realloc_r+0x134>
  809ac0:	07002074 	movhi	fp,129
  809ac4:	e70f5404 	addi	fp,fp,15696
  809ac8:	e1c00217 	ldw	r7,8(fp)
  809acc:	9c09883a 	add	r4,r19,r16
  809ad0:	22000117 	ldw	r8,4(r4)
  809ad4:	21c06326 	beq	r4,r7,809c64 <_realloc_r+0x218>
  809ad8:	017fff84 	movi	r5,-2
  809adc:	414a703a 	and	r5,r8,r5
  809ae0:	214b883a 	add	r5,r4,r5
  809ae4:	29800117 	ldw	r6,4(r5)
  809ae8:	3180004c 	andi	r6,r6,1
  809aec:	30003f26 	beq	r6,zero,809bec <_realloc_r+0x1a0>
  809af0:	1080004c 	andi	r2,r2,1
  809af4:	10008326 	beq	r2,zero,809d04 <_realloc_r+0x2b8>
  809af8:	900b883a 	mov	r5,r18
  809afc:	a009883a 	mov	r4,r20
  809b00:	08026380 	call	802638 <_malloc_r>
  809b04:	1025883a 	mov	r18,r2
  809b08:	10011e26 	beq	r2,zero,809f84 <_realloc_r+0x538>
  809b0c:	a93fff17 	ldw	r4,-4(r21)
  809b10:	10fffe04 	addi	r3,r2,-8
  809b14:	00bfff84 	movi	r2,-2
  809b18:	2084703a 	and	r2,r4,r2
  809b1c:	9885883a 	add	r2,r19,r2
  809b20:	1880ee26 	beq	r3,r2,809edc <_realloc_r+0x490>
  809b24:	81bfff04 	addi	r6,r16,-4
  809b28:	00800904 	movi	r2,36
  809b2c:	1180b836 	bltu	r2,r6,809e10 <_realloc_r+0x3c4>
  809b30:	00c004c4 	movi	r3,19
  809b34:	19809636 	bltu	r3,r6,809d90 <_realloc_r+0x344>
  809b38:	9005883a 	mov	r2,r18
  809b3c:	a807883a 	mov	r3,r21
  809b40:	19000017 	ldw	r4,0(r3)
  809b44:	11000015 	stw	r4,0(r2)
  809b48:	19000117 	ldw	r4,4(r3)
  809b4c:	11000115 	stw	r4,4(r2)
  809b50:	18c00217 	ldw	r3,8(r3)
  809b54:	10c00215 	stw	r3,8(r2)
  809b58:	a80b883a 	mov	r5,r21
  809b5c:	a009883a 	mov	r4,r20
  809b60:	0807d0c0 	call	807d0c <_free_r>
  809b64:	a009883a 	mov	r4,r20
  809b68:	080f7ac0 	call	80f7ac <__malloc_unlock>
  809b6c:	9005883a 	mov	r2,r18
  809b70:	00001206 	br	809bbc <_realloc_r+0x170>
  809b74:	00c00404 	movi	r3,16
  809b78:	1823883a 	mov	r17,r3
  809b7c:	003fce06 	br	809ab8 <__alt_mem_onchip_mem+0xff789ab8>
  809b80:	a825883a 	mov	r18,r21
  809b84:	8445c83a 	sub	r2,r16,r17
  809b88:	00c003c4 	movi	r3,15
  809b8c:	18802636 	bltu	r3,r2,809c28 <_realloc_r+0x1dc>
  809b90:	99800117 	ldw	r6,4(r19)
  809b94:	9c07883a 	add	r3,r19,r16
  809b98:	3180004c 	andi	r6,r6,1
  809b9c:	3420b03a 	or	r16,r6,r16
  809ba0:	9c000115 	stw	r16,4(r19)
  809ba4:	18800117 	ldw	r2,4(r3)
  809ba8:	10800054 	ori	r2,r2,1
  809bac:	18800115 	stw	r2,4(r3)
  809bb0:	a009883a 	mov	r4,r20
  809bb4:	080f7ac0 	call	80f7ac <__malloc_unlock>
  809bb8:	9005883a 	mov	r2,r18
  809bbc:	dfc00917 	ldw	ra,36(sp)
  809bc0:	df000817 	ldw	fp,32(sp)
  809bc4:	ddc00717 	ldw	r23,28(sp)
  809bc8:	dd800617 	ldw	r22,24(sp)
  809bcc:	dd400517 	ldw	r21,20(sp)
  809bd0:	dd000417 	ldw	r20,16(sp)
  809bd4:	dcc00317 	ldw	r19,12(sp)
  809bd8:	dc800217 	ldw	r18,8(sp)
  809bdc:	dc400117 	ldw	r17,4(sp)
  809be0:	dc000017 	ldw	r16,0(sp)
  809be4:	dec00a04 	addi	sp,sp,40
  809be8:	f800283a 	ret
  809bec:	017fff04 	movi	r5,-4
  809bf0:	414a703a 	and	r5,r8,r5
  809bf4:	814d883a 	add	r6,r16,r5
  809bf8:	30c01f16 	blt	r6,r3,809c78 <_realloc_r+0x22c>
  809bfc:	20800317 	ldw	r2,12(r4)
  809c00:	20c00217 	ldw	r3,8(r4)
  809c04:	a825883a 	mov	r18,r21
  809c08:	3021883a 	mov	r16,r6
  809c0c:	18800315 	stw	r2,12(r3)
  809c10:	10c00215 	stw	r3,8(r2)
  809c14:	003fdb06 	br	809b84 <__alt_mem_onchip_mem+0xff789b84>
  809c18:	00800304 	movi	r2,12
  809c1c:	a0800015 	stw	r2,0(r20)
  809c20:	0005883a 	mov	r2,zero
  809c24:	003fe506 	br	809bbc <__alt_mem_onchip_mem+0xff789bbc>
  809c28:	98c00117 	ldw	r3,4(r19)
  809c2c:	9c4b883a 	add	r5,r19,r17
  809c30:	11000054 	ori	r4,r2,1
  809c34:	18c0004c 	andi	r3,r3,1
  809c38:	1c62b03a 	or	r17,r3,r17
  809c3c:	9c400115 	stw	r17,4(r19)
  809c40:	29000115 	stw	r4,4(r5)
  809c44:	2885883a 	add	r2,r5,r2
  809c48:	10c00117 	ldw	r3,4(r2)
  809c4c:	29400204 	addi	r5,r5,8
  809c50:	a009883a 	mov	r4,r20
  809c54:	18c00054 	ori	r3,r3,1
  809c58:	10c00115 	stw	r3,4(r2)
  809c5c:	0807d0c0 	call	807d0c <_free_r>
  809c60:	003fd306 	br	809bb0 <__alt_mem_onchip_mem+0xff789bb0>
  809c64:	017fff04 	movi	r5,-4
  809c68:	414a703a 	and	r5,r8,r5
  809c6c:	89800404 	addi	r6,r17,16
  809c70:	8151883a 	add	r8,r16,r5
  809c74:	4180590e 	bge	r8,r6,809ddc <_realloc_r+0x390>
  809c78:	1080004c 	andi	r2,r2,1
  809c7c:	103f9e1e 	bne	r2,zero,809af8 <__alt_mem_onchip_mem+0xff789af8>
  809c80:	adbffe17 	ldw	r22,-8(r21)
  809c84:	00bfff04 	movi	r2,-4
  809c88:	9dadc83a 	sub	r22,r19,r22
  809c8c:	b1800117 	ldw	r6,4(r22)
  809c90:	3084703a 	and	r2,r6,r2
  809c94:	20002026 	beq	r4,zero,809d18 <_realloc_r+0x2cc>
  809c98:	80af883a 	add	r23,r16,r2
  809c9c:	b96f883a 	add	r23,r23,r5
  809ca0:	21c05f26 	beq	r4,r7,809e20 <_realloc_r+0x3d4>
  809ca4:	b8c01c16 	blt	r23,r3,809d18 <_realloc_r+0x2cc>
  809ca8:	20800317 	ldw	r2,12(r4)
  809cac:	20c00217 	ldw	r3,8(r4)
  809cb0:	81bfff04 	addi	r6,r16,-4
  809cb4:	01000904 	movi	r4,36
  809cb8:	18800315 	stw	r2,12(r3)
  809cbc:	10c00215 	stw	r3,8(r2)
  809cc0:	b0c00217 	ldw	r3,8(r22)
  809cc4:	b0800317 	ldw	r2,12(r22)
  809cc8:	b4800204 	addi	r18,r22,8
  809ccc:	18800315 	stw	r2,12(r3)
  809cd0:	10c00215 	stw	r3,8(r2)
  809cd4:	21801b36 	bltu	r4,r6,809d44 <_realloc_r+0x2f8>
  809cd8:	008004c4 	movi	r2,19
  809cdc:	1180352e 	bgeu	r2,r6,809db4 <_realloc_r+0x368>
  809ce0:	a8800017 	ldw	r2,0(r21)
  809ce4:	b0800215 	stw	r2,8(r22)
  809ce8:	a8800117 	ldw	r2,4(r21)
  809cec:	b0800315 	stw	r2,12(r22)
  809cf0:	008006c4 	movi	r2,27
  809cf4:	11807f36 	bltu	r2,r6,809ef4 <_realloc_r+0x4a8>
  809cf8:	b0800404 	addi	r2,r22,16
  809cfc:	ad400204 	addi	r21,r21,8
  809d00:	00002d06 	br	809db8 <_realloc_r+0x36c>
  809d04:	adbffe17 	ldw	r22,-8(r21)
  809d08:	00bfff04 	movi	r2,-4
  809d0c:	9dadc83a 	sub	r22,r19,r22
  809d10:	b1000117 	ldw	r4,4(r22)
  809d14:	2084703a 	and	r2,r4,r2
  809d18:	b03f7726 	beq	r22,zero,809af8 <__alt_mem_onchip_mem+0xff789af8>
  809d1c:	80af883a 	add	r23,r16,r2
  809d20:	b8ff7516 	blt	r23,r3,809af8 <__alt_mem_onchip_mem+0xff789af8>
  809d24:	b0800317 	ldw	r2,12(r22)
  809d28:	b0c00217 	ldw	r3,8(r22)
  809d2c:	81bfff04 	addi	r6,r16,-4
  809d30:	01000904 	movi	r4,36
  809d34:	18800315 	stw	r2,12(r3)
  809d38:	10c00215 	stw	r3,8(r2)
  809d3c:	b4800204 	addi	r18,r22,8
  809d40:	21bfe52e 	bgeu	r4,r6,809cd8 <__alt_mem_onchip_mem+0xff789cd8>
  809d44:	a80b883a 	mov	r5,r21
  809d48:	9009883a 	mov	r4,r18
  809d4c:	08088940 	call	808894 <memmove>
  809d50:	b821883a 	mov	r16,r23
  809d54:	b027883a 	mov	r19,r22
  809d58:	003f8a06 	br	809b84 <__alt_mem_onchip_mem+0xff789b84>
  809d5c:	300b883a 	mov	r5,r6
  809d60:	dfc00917 	ldw	ra,36(sp)
  809d64:	df000817 	ldw	fp,32(sp)
  809d68:	ddc00717 	ldw	r23,28(sp)
  809d6c:	dd800617 	ldw	r22,24(sp)
  809d70:	dd400517 	ldw	r21,20(sp)
  809d74:	dd000417 	ldw	r20,16(sp)
  809d78:	dcc00317 	ldw	r19,12(sp)
  809d7c:	dc800217 	ldw	r18,8(sp)
  809d80:	dc400117 	ldw	r17,4(sp)
  809d84:	dc000017 	ldw	r16,0(sp)
  809d88:	dec00a04 	addi	sp,sp,40
  809d8c:	08026381 	jmpi	802638 <_malloc_r>
  809d90:	a8c00017 	ldw	r3,0(r21)
  809d94:	90c00015 	stw	r3,0(r18)
  809d98:	a8c00117 	ldw	r3,4(r21)
  809d9c:	90c00115 	stw	r3,4(r18)
  809da0:	00c006c4 	movi	r3,27
  809da4:	19804536 	bltu	r3,r6,809ebc <_realloc_r+0x470>
  809da8:	90800204 	addi	r2,r18,8
  809dac:	a8c00204 	addi	r3,r21,8
  809db0:	003f6306 	br	809b40 <__alt_mem_onchip_mem+0xff789b40>
  809db4:	9005883a 	mov	r2,r18
  809db8:	a8c00017 	ldw	r3,0(r21)
  809dbc:	b821883a 	mov	r16,r23
  809dc0:	b027883a 	mov	r19,r22
  809dc4:	10c00015 	stw	r3,0(r2)
  809dc8:	a8c00117 	ldw	r3,4(r21)
  809dcc:	10c00115 	stw	r3,4(r2)
  809dd0:	a8c00217 	ldw	r3,8(r21)
  809dd4:	10c00215 	stw	r3,8(r2)
  809dd8:	003f6a06 	br	809b84 <__alt_mem_onchip_mem+0xff789b84>
  809ddc:	9c67883a 	add	r19,r19,r17
  809de0:	4445c83a 	sub	r2,r8,r17
  809de4:	e4c00215 	stw	r19,8(fp)
  809de8:	10800054 	ori	r2,r2,1
  809dec:	98800115 	stw	r2,4(r19)
  809df0:	a8bfff17 	ldw	r2,-4(r21)
  809df4:	a009883a 	mov	r4,r20
  809df8:	1080004c 	andi	r2,r2,1
  809dfc:	1462b03a 	or	r17,r2,r17
  809e00:	ac7fff15 	stw	r17,-4(r21)
  809e04:	080f7ac0 	call	80f7ac <__malloc_unlock>
  809e08:	a805883a 	mov	r2,r21
  809e0c:	003f6b06 	br	809bbc <__alt_mem_onchip_mem+0xff789bbc>
  809e10:	a80b883a 	mov	r5,r21
  809e14:	9009883a 	mov	r4,r18
  809e18:	08088940 	call	808894 <memmove>
  809e1c:	003f4e06 	br	809b58 <__alt_mem_onchip_mem+0xff789b58>
  809e20:	89000404 	addi	r4,r17,16
  809e24:	b93fbc16 	blt	r23,r4,809d18 <__alt_mem_onchip_mem+0xff789d18>
  809e28:	b0800317 	ldw	r2,12(r22)
  809e2c:	b0c00217 	ldw	r3,8(r22)
  809e30:	81bfff04 	addi	r6,r16,-4
  809e34:	01000904 	movi	r4,36
  809e38:	18800315 	stw	r2,12(r3)
  809e3c:	10c00215 	stw	r3,8(r2)
  809e40:	b4800204 	addi	r18,r22,8
  809e44:	21804336 	bltu	r4,r6,809f54 <_realloc_r+0x508>
  809e48:	008004c4 	movi	r2,19
  809e4c:	11803f2e 	bgeu	r2,r6,809f4c <_realloc_r+0x500>
  809e50:	a8800017 	ldw	r2,0(r21)
  809e54:	b0800215 	stw	r2,8(r22)
  809e58:	a8800117 	ldw	r2,4(r21)
  809e5c:	b0800315 	stw	r2,12(r22)
  809e60:	008006c4 	movi	r2,27
  809e64:	11803f36 	bltu	r2,r6,809f64 <_realloc_r+0x518>
  809e68:	b0800404 	addi	r2,r22,16
  809e6c:	ad400204 	addi	r21,r21,8
  809e70:	a8c00017 	ldw	r3,0(r21)
  809e74:	10c00015 	stw	r3,0(r2)
  809e78:	a8c00117 	ldw	r3,4(r21)
  809e7c:	10c00115 	stw	r3,4(r2)
  809e80:	a8c00217 	ldw	r3,8(r21)
  809e84:	10c00215 	stw	r3,8(r2)
  809e88:	b447883a 	add	r3,r22,r17
  809e8c:	bc45c83a 	sub	r2,r23,r17
  809e90:	e0c00215 	stw	r3,8(fp)
  809e94:	10800054 	ori	r2,r2,1
  809e98:	18800115 	stw	r2,4(r3)
  809e9c:	b0800117 	ldw	r2,4(r22)
  809ea0:	a009883a 	mov	r4,r20
  809ea4:	1080004c 	andi	r2,r2,1
  809ea8:	1462b03a 	or	r17,r2,r17
  809eac:	b4400115 	stw	r17,4(r22)
  809eb0:	080f7ac0 	call	80f7ac <__malloc_unlock>
  809eb4:	9005883a 	mov	r2,r18
  809eb8:	003f4006 	br	809bbc <__alt_mem_onchip_mem+0xff789bbc>
  809ebc:	a8c00217 	ldw	r3,8(r21)
  809ec0:	90c00215 	stw	r3,8(r18)
  809ec4:	a8c00317 	ldw	r3,12(r21)
  809ec8:	90c00315 	stw	r3,12(r18)
  809ecc:	30801126 	beq	r6,r2,809f14 <_realloc_r+0x4c8>
  809ed0:	90800404 	addi	r2,r18,16
  809ed4:	a8c00404 	addi	r3,r21,16
  809ed8:	003f1906 	br	809b40 <__alt_mem_onchip_mem+0xff789b40>
  809edc:	90ffff17 	ldw	r3,-4(r18)
  809ee0:	00bfff04 	movi	r2,-4
  809ee4:	a825883a 	mov	r18,r21
  809ee8:	1884703a 	and	r2,r3,r2
  809eec:	80a1883a 	add	r16,r16,r2
  809ef0:	003f2406 	br	809b84 <__alt_mem_onchip_mem+0xff789b84>
  809ef4:	a8800217 	ldw	r2,8(r21)
  809ef8:	b0800415 	stw	r2,16(r22)
  809efc:	a8800317 	ldw	r2,12(r21)
  809f00:	b0800515 	stw	r2,20(r22)
  809f04:	31000a26 	beq	r6,r4,809f30 <_realloc_r+0x4e4>
  809f08:	b0800604 	addi	r2,r22,24
  809f0c:	ad400404 	addi	r21,r21,16
  809f10:	003fa906 	br	809db8 <__alt_mem_onchip_mem+0xff789db8>
  809f14:	a9000417 	ldw	r4,16(r21)
  809f18:	90800604 	addi	r2,r18,24
  809f1c:	a8c00604 	addi	r3,r21,24
  809f20:	91000415 	stw	r4,16(r18)
  809f24:	a9000517 	ldw	r4,20(r21)
  809f28:	91000515 	stw	r4,20(r18)
  809f2c:	003f0406 	br	809b40 <__alt_mem_onchip_mem+0xff789b40>
  809f30:	a8c00417 	ldw	r3,16(r21)
  809f34:	ad400604 	addi	r21,r21,24
  809f38:	b0800804 	addi	r2,r22,32
  809f3c:	b0c00615 	stw	r3,24(r22)
  809f40:	a8ffff17 	ldw	r3,-4(r21)
  809f44:	b0c00715 	stw	r3,28(r22)
  809f48:	003f9b06 	br	809db8 <__alt_mem_onchip_mem+0xff789db8>
  809f4c:	9005883a 	mov	r2,r18
  809f50:	003fc706 	br	809e70 <__alt_mem_onchip_mem+0xff789e70>
  809f54:	a80b883a 	mov	r5,r21
  809f58:	9009883a 	mov	r4,r18
  809f5c:	08088940 	call	808894 <memmove>
  809f60:	003fc906 	br	809e88 <__alt_mem_onchip_mem+0xff789e88>
  809f64:	a8800217 	ldw	r2,8(r21)
  809f68:	b0800415 	stw	r2,16(r22)
  809f6c:	a8800317 	ldw	r2,12(r21)
  809f70:	b0800515 	stw	r2,20(r22)
  809f74:	31000726 	beq	r6,r4,809f94 <_realloc_r+0x548>
  809f78:	b0800604 	addi	r2,r22,24
  809f7c:	ad400404 	addi	r21,r21,16
  809f80:	003fbb06 	br	809e70 <__alt_mem_onchip_mem+0xff789e70>
  809f84:	a009883a 	mov	r4,r20
  809f88:	080f7ac0 	call	80f7ac <__malloc_unlock>
  809f8c:	0005883a 	mov	r2,zero
  809f90:	003f0a06 	br	809bbc <__alt_mem_onchip_mem+0xff789bbc>
  809f94:	a8c00417 	ldw	r3,16(r21)
  809f98:	ad400604 	addi	r21,r21,24
  809f9c:	b0800804 	addi	r2,r22,32
  809fa0:	b0c00615 	stw	r3,24(r22)
  809fa4:	a8ffff17 	ldw	r3,-4(r21)
  809fa8:	b0c00715 	stw	r3,28(r22)
  809fac:	003fb006 	br	809e70 <__alt_mem_onchip_mem+0xff789e70>

00809fb0 <__fpclassifyd>:
  809fb0:	00a00034 	movhi	r2,32768
  809fb4:	10bfffc4 	addi	r2,r2,-1
  809fb8:	2884703a 	and	r2,r5,r2
  809fbc:	10000726 	beq	r2,zero,809fdc <__fpclassifyd+0x2c>
  809fc0:	00fffc34 	movhi	r3,65520
  809fc4:	019ff834 	movhi	r6,32736
  809fc8:	28c7883a 	add	r3,r5,r3
  809fcc:	31bfffc4 	addi	r6,r6,-1
  809fd0:	30c00536 	bltu	r6,r3,809fe8 <__fpclassifyd+0x38>
  809fd4:	00800104 	movi	r2,4
  809fd8:	f800283a 	ret
  809fdc:	2000021e 	bne	r4,zero,809fe8 <__fpclassifyd+0x38>
  809fe0:	00800084 	movi	r2,2
  809fe4:	f800283a 	ret
  809fe8:	00dffc34 	movhi	r3,32752
  809fec:	019ff834 	movhi	r6,32736
  809ff0:	28cb883a 	add	r5,r5,r3
  809ff4:	31bfffc4 	addi	r6,r6,-1
  809ff8:	317ff62e 	bgeu	r6,r5,809fd4 <__alt_mem_onchip_mem+0xff789fd4>
  809ffc:	01400434 	movhi	r5,16
  80a000:	297fffc4 	addi	r5,r5,-1
  80a004:	28800236 	bltu	r5,r2,80a010 <__fpclassifyd+0x60>
  80a008:	008000c4 	movi	r2,3
  80a00c:	f800283a 	ret
  80a010:	10c00226 	beq	r2,r3,80a01c <__fpclassifyd+0x6c>
  80a014:	0005883a 	mov	r2,zero
  80a018:	f800283a 	ret
  80a01c:	2005003a 	cmpeq	r2,r4,zero
  80a020:	f800283a 	ret

0080a024 <strcmp>:
  80a024:	2144b03a 	or	r2,r4,r5
  80a028:	108000cc 	andi	r2,r2,3
  80a02c:	1000171e 	bne	r2,zero,80a08c <strcmp+0x68>
  80a030:	20800017 	ldw	r2,0(r4)
  80a034:	28c00017 	ldw	r3,0(r5)
  80a038:	10c0141e 	bne	r2,r3,80a08c <strcmp+0x68>
  80a03c:	027fbff4 	movhi	r9,65279
  80a040:	4a7fbfc4 	addi	r9,r9,-257
  80a044:	0086303a 	nor	r3,zero,r2
  80a048:	02202074 	movhi	r8,32897
  80a04c:	1245883a 	add	r2,r2,r9
  80a050:	42202004 	addi	r8,r8,-32640
  80a054:	10c4703a 	and	r2,r2,r3
  80a058:	1204703a 	and	r2,r2,r8
  80a05c:	10000226 	beq	r2,zero,80a068 <strcmp+0x44>
  80a060:	00002306 	br	80a0f0 <strcmp+0xcc>
  80a064:	1000221e 	bne	r2,zero,80a0f0 <strcmp+0xcc>
  80a068:	21000104 	addi	r4,r4,4
  80a06c:	20c00017 	ldw	r3,0(r4)
  80a070:	29400104 	addi	r5,r5,4
  80a074:	29800017 	ldw	r6,0(r5)
  80a078:	1a4f883a 	add	r7,r3,r9
  80a07c:	00c4303a 	nor	r2,zero,r3
  80a080:	3884703a 	and	r2,r7,r2
  80a084:	1204703a 	and	r2,r2,r8
  80a088:	19bff626 	beq	r3,r6,80a064 <__alt_mem_onchip_mem+0xff78a064>
  80a08c:	20800003 	ldbu	r2,0(r4)
  80a090:	10c03fcc 	andi	r3,r2,255
  80a094:	18c0201c 	xori	r3,r3,128
  80a098:	18ffe004 	addi	r3,r3,-128
  80a09c:	18000c26 	beq	r3,zero,80a0d0 <strcmp+0xac>
  80a0a0:	29800007 	ldb	r6,0(r5)
  80a0a4:	19800326 	beq	r3,r6,80a0b4 <strcmp+0x90>
  80a0a8:	00001306 	br	80a0f8 <strcmp+0xd4>
  80a0ac:	29800007 	ldb	r6,0(r5)
  80a0b0:	11800b1e 	bne	r2,r6,80a0e0 <strcmp+0xbc>
  80a0b4:	21000044 	addi	r4,r4,1
  80a0b8:	20c00003 	ldbu	r3,0(r4)
  80a0bc:	29400044 	addi	r5,r5,1
  80a0c0:	18803fcc 	andi	r2,r3,255
  80a0c4:	1080201c 	xori	r2,r2,128
  80a0c8:	10bfe004 	addi	r2,r2,-128
  80a0cc:	103ff71e 	bne	r2,zero,80a0ac <__alt_mem_onchip_mem+0xff78a0ac>
  80a0d0:	0007883a 	mov	r3,zero
  80a0d4:	28800003 	ldbu	r2,0(r5)
  80a0d8:	1885c83a 	sub	r2,r3,r2
  80a0dc:	f800283a 	ret
  80a0e0:	28800003 	ldbu	r2,0(r5)
  80a0e4:	18c03fcc 	andi	r3,r3,255
  80a0e8:	1885c83a 	sub	r2,r3,r2
  80a0ec:	f800283a 	ret
  80a0f0:	0005883a 	mov	r2,zero
  80a0f4:	f800283a 	ret
  80a0f8:	10c03fcc 	andi	r3,r2,255
  80a0fc:	003ff506 	br	80a0d4 <__alt_mem_onchip_mem+0xff78a0d4>

0080a100 <strlen>:
  80a100:	208000cc 	andi	r2,r4,3
  80a104:	10002026 	beq	r2,zero,80a188 <strlen+0x88>
  80a108:	20800007 	ldb	r2,0(r4)
  80a10c:	10002026 	beq	r2,zero,80a190 <strlen+0x90>
  80a110:	2005883a 	mov	r2,r4
  80a114:	00000206 	br	80a120 <strlen+0x20>
  80a118:	10c00007 	ldb	r3,0(r2)
  80a11c:	18001826 	beq	r3,zero,80a180 <strlen+0x80>
  80a120:	10800044 	addi	r2,r2,1
  80a124:	10c000cc 	andi	r3,r2,3
  80a128:	183ffb1e 	bne	r3,zero,80a118 <__alt_mem_onchip_mem+0xff78a118>
  80a12c:	10c00017 	ldw	r3,0(r2)
  80a130:	01ffbff4 	movhi	r7,65279
  80a134:	39ffbfc4 	addi	r7,r7,-257
  80a138:	00ca303a 	nor	r5,zero,r3
  80a13c:	01a02074 	movhi	r6,32897
  80a140:	19c7883a 	add	r3,r3,r7
  80a144:	31a02004 	addi	r6,r6,-32640
  80a148:	1946703a 	and	r3,r3,r5
  80a14c:	1986703a 	and	r3,r3,r6
  80a150:	1800091e 	bne	r3,zero,80a178 <strlen+0x78>
  80a154:	10800104 	addi	r2,r2,4
  80a158:	10c00017 	ldw	r3,0(r2)
  80a15c:	19cb883a 	add	r5,r3,r7
  80a160:	00c6303a 	nor	r3,zero,r3
  80a164:	28c6703a 	and	r3,r5,r3
  80a168:	1986703a 	and	r3,r3,r6
  80a16c:	183ff926 	beq	r3,zero,80a154 <__alt_mem_onchip_mem+0xff78a154>
  80a170:	00000106 	br	80a178 <strlen+0x78>
  80a174:	10800044 	addi	r2,r2,1
  80a178:	10c00007 	ldb	r3,0(r2)
  80a17c:	183ffd1e 	bne	r3,zero,80a174 <__alt_mem_onchip_mem+0xff78a174>
  80a180:	1105c83a 	sub	r2,r2,r4
  80a184:	f800283a 	ret
  80a188:	2005883a 	mov	r2,r4
  80a18c:	003fe706 	br	80a12c <__alt_mem_onchip_mem+0xff78a12c>
  80a190:	0005883a 	mov	r2,zero
  80a194:	f800283a 	ret

0080a198 <__sprint_r.part.0>:
  80a198:	28801917 	ldw	r2,100(r5)
  80a19c:	defff604 	addi	sp,sp,-40
  80a1a0:	dd400515 	stw	r21,20(sp)
  80a1a4:	dfc00915 	stw	ra,36(sp)
  80a1a8:	df000815 	stw	fp,32(sp)
  80a1ac:	ddc00715 	stw	r23,28(sp)
  80a1b0:	dd800615 	stw	r22,24(sp)
  80a1b4:	dd000415 	stw	r20,16(sp)
  80a1b8:	dcc00315 	stw	r19,12(sp)
  80a1bc:	dc800215 	stw	r18,8(sp)
  80a1c0:	dc400115 	stw	r17,4(sp)
  80a1c4:	dc000015 	stw	r16,0(sp)
  80a1c8:	1088000c 	andi	r2,r2,8192
  80a1cc:	302b883a 	mov	r21,r6
  80a1d0:	10002e26 	beq	r2,zero,80a28c <__sprint_r.part.0+0xf4>
  80a1d4:	30800217 	ldw	r2,8(r6)
  80a1d8:	35800017 	ldw	r22,0(r6)
  80a1dc:	10002926 	beq	r2,zero,80a284 <__sprint_r.part.0+0xec>
  80a1e0:	2827883a 	mov	r19,r5
  80a1e4:	2029883a 	mov	r20,r4
  80a1e8:	b5c00104 	addi	r23,r22,4
  80a1ec:	04bfffc4 	movi	r18,-1
  80a1f0:	bc400017 	ldw	r17,0(r23)
  80a1f4:	b4000017 	ldw	r16,0(r22)
  80a1f8:	0039883a 	mov	fp,zero
  80a1fc:	8822d0ba 	srli	r17,r17,2
  80a200:	8800031e 	bne	r17,zero,80a210 <__sprint_r.part.0+0x78>
  80a204:	00001806 	br	80a268 <__sprint_r.part.0+0xd0>
  80a208:	84000104 	addi	r16,r16,4
  80a20c:	8f001526 	beq	r17,fp,80a264 <__sprint_r.part.0+0xcc>
  80a210:	81400017 	ldw	r5,0(r16)
  80a214:	980d883a 	mov	r6,r19
  80a218:	a009883a 	mov	r4,r20
  80a21c:	080ba080 	call	80ba08 <_fputwc_r>
  80a220:	e7000044 	addi	fp,fp,1
  80a224:	14bff81e 	bne	r2,r18,80a208 <__alt_mem_onchip_mem+0xff78a208>
  80a228:	9005883a 	mov	r2,r18
  80a22c:	a8000215 	stw	zero,8(r21)
  80a230:	a8000115 	stw	zero,4(r21)
  80a234:	dfc00917 	ldw	ra,36(sp)
  80a238:	df000817 	ldw	fp,32(sp)
  80a23c:	ddc00717 	ldw	r23,28(sp)
  80a240:	dd800617 	ldw	r22,24(sp)
  80a244:	dd400517 	ldw	r21,20(sp)
  80a248:	dd000417 	ldw	r20,16(sp)
  80a24c:	dcc00317 	ldw	r19,12(sp)
  80a250:	dc800217 	ldw	r18,8(sp)
  80a254:	dc400117 	ldw	r17,4(sp)
  80a258:	dc000017 	ldw	r16,0(sp)
  80a25c:	dec00a04 	addi	sp,sp,40
  80a260:	f800283a 	ret
  80a264:	a8800217 	ldw	r2,8(r21)
  80a268:	8c63883a 	add	r17,r17,r17
  80a26c:	8c63883a 	add	r17,r17,r17
  80a270:	1445c83a 	sub	r2,r2,r17
  80a274:	a8800215 	stw	r2,8(r21)
  80a278:	b5800204 	addi	r22,r22,8
  80a27c:	bdc00204 	addi	r23,r23,8
  80a280:	103fdb1e 	bne	r2,zero,80a1f0 <__alt_mem_onchip_mem+0xff78a1f0>
  80a284:	0005883a 	mov	r2,zero
  80a288:	003fe806 	br	80a22c <__alt_mem_onchip_mem+0xff78a22c>
  80a28c:	080801c0 	call	80801c <__sfvwrite_r>
  80a290:	003fe606 	br	80a22c <__alt_mem_onchip_mem+0xff78a22c>

0080a294 <__sprint_r>:
  80a294:	30c00217 	ldw	r3,8(r6)
  80a298:	18000126 	beq	r3,zero,80a2a0 <__sprint_r+0xc>
  80a29c:	080a1981 	jmpi	80a198 <__sprint_r.part.0>
  80a2a0:	30000115 	stw	zero,4(r6)
  80a2a4:	0005883a 	mov	r2,zero
  80a2a8:	f800283a 	ret

0080a2ac <___vfiprintf_internal_r>:
  80a2ac:	deffc904 	addi	sp,sp,-220
  80a2b0:	df003515 	stw	fp,212(sp)
  80a2b4:	dd003115 	stw	r20,196(sp)
  80a2b8:	dfc03615 	stw	ra,216(sp)
  80a2bc:	ddc03415 	stw	r23,208(sp)
  80a2c0:	dd803315 	stw	r22,204(sp)
  80a2c4:	dd403215 	stw	r21,200(sp)
  80a2c8:	dcc03015 	stw	r19,192(sp)
  80a2cc:	dc802f15 	stw	r18,188(sp)
  80a2d0:	dc402e15 	stw	r17,184(sp)
  80a2d4:	dc002d15 	stw	r16,180(sp)
  80a2d8:	d9002015 	stw	r4,128(sp)
  80a2dc:	d9c02215 	stw	r7,136(sp)
  80a2e0:	2829883a 	mov	r20,r5
  80a2e4:	3039883a 	mov	fp,r6
  80a2e8:	20000226 	beq	r4,zero,80a2f4 <___vfiprintf_internal_r+0x48>
  80a2ec:	20800e17 	ldw	r2,56(r4)
  80a2f0:	1000cf26 	beq	r2,zero,80a630 <___vfiprintf_internal_r+0x384>
  80a2f4:	a080030b 	ldhu	r2,12(r20)
  80a2f8:	10c8000c 	andi	r3,r2,8192
  80a2fc:	1800061e 	bne	r3,zero,80a318 <___vfiprintf_internal_r+0x6c>
  80a300:	a1001917 	ldw	r4,100(r20)
  80a304:	00f7ffc4 	movi	r3,-8193
  80a308:	10880014 	ori	r2,r2,8192
  80a30c:	20c6703a 	and	r3,r4,r3
  80a310:	a080030d 	sth	r2,12(r20)
  80a314:	a0c01915 	stw	r3,100(r20)
  80a318:	10c0020c 	andi	r3,r2,8
  80a31c:	1800a926 	beq	r3,zero,80a5c4 <___vfiprintf_internal_r+0x318>
  80a320:	a0c00417 	ldw	r3,16(r20)
  80a324:	1800a726 	beq	r3,zero,80a5c4 <___vfiprintf_internal_r+0x318>
  80a328:	1080068c 	andi	r2,r2,26
  80a32c:	00c00284 	movi	r3,10
  80a330:	10c0ac26 	beq	r2,r3,80a5e4 <___vfiprintf_internal_r+0x338>
  80a334:	da801a04 	addi	r10,sp,104
  80a338:	da801e15 	stw	r10,120(sp)
  80a33c:	d8801e17 	ldw	r2,120(sp)
  80a340:	da8019c4 	addi	r10,sp,103
  80a344:	05802074 	movhi	r22,129
  80a348:	05c02074 	movhi	r23,129
  80a34c:	da801f15 	stw	r10,124(sp)
  80a350:	1295c83a 	sub	r10,r2,r10
  80a354:	b58df604 	addi	r22,r22,14296
  80a358:	bdcdf204 	addi	r23,r23,14280
  80a35c:	dec01a15 	stw	sp,104(sp)
  80a360:	d8001c15 	stw	zero,112(sp)
  80a364:	d8001b15 	stw	zero,108(sp)
  80a368:	d8002615 	stw	zero,152(sp)
  80a36c:	d8002315 	stw	zero,140(sp)
  80a370:	da802715 	stw	r10,156(sp)
  80a374:	d811883a 	mov	r8,sp
  80a378:	dd002115 	stw	r20,132(sp)
  80a37c:	e021883a 	mov	r16,fp
  80a380:	80800007 	ldb	r2,0(r16)
  80a384:	1003ea26 	beq	r2,zero,80b330 <___vfiprintf_internal_r+0x1084>
  80a388:	00c00944 	movi	r3,37
  80a38c:	8025883a 	mov	r18,r16
  80a390:	10c0021e 	bne	r2,r3,80a39c <___vfiprintf_internal_r+0xf0>
  80a394:	00001606 	br	80a3f0 <___vfiprintf_internal_r+0x144>
  80a398:	10c00326 	beq	r2,r3,80a3a8 <___vfiprintf_internal_r+0xfc>
  80a39c:	94800044 	addi	r18,r18,1
  80a3a0:	90800007 	ldb	r2,0(r18)
  80a3a4:	103ffc1e 	bne	r2,zero,80a398 <__alt_mem_onchip_mem+0xff78a398>
  80a3a8:	9423c83a 	sub	r17,r18,r16
  80a3ac:	88001026 	beq	r17,zero,80a3f0 <___vfiprintf_internal_r+0x144>
  80a3b0:	d8c01c17 	ldw	r3,112(sp)
  80a3b4:	d8801b17 	ldw	r2,108(sp)
  80a3b8:	44000015 	stw	r16,0(r8)
  80a3bc:	88c7883a 	add	r3,r17,r3
  80a3c0:	10800044 	addi	r2,r2,1
  80a3c4:	44400115 	stw	r17,4(r8)
  80a3c8:	d8c01c15 	stw	r3,112(sp)
  80a3cc:	d8801b15 	stw	r2,108(sp)
  80a3d0:	010001c4 	movi	r4,7
  80a3d4:	2080760e 	bge	r4,r2,80a5b0 <___vfiprintf_internal_r+0x304>
  80a3d8:	1803821e 	bne	r3,zero,80b1e4 <___vfiprintf_internal_r+0xf38>
  80a3dc:	da802317 	ldw	r10,140(sp)
  80a3e0:	d8001b15 	stw	zero,108(sp)
  80a3e4:	d811883a 	mov	r8,sp
  80a3e8:	5455883a 	add	r10,r10,r17
  80a3ec:	da802315 	stw	r10,140(sp)
  80a3f0:	90800007 	ldb	r2,0(r18)
  80a3f4:	10044626 	beq	r2,zero,80b510 <___vfiprintf_internal_r+0x1264>
  80a3f8:	90c00047 	ldb	r3,1(r18)
  80a3fc:	94000044 	addi	r16,r18,1
  80a400:	d8001d85 	stb	zero,118(sp)
  80a404:	0009883a 	mov	r4,zero
  80a408:	000f883a 	mov	r7,zero
  80a40c:	027fffc4 	movi	r9,-1
  80a410:	0023883a 	mov	r17,zero
  80a414:	0029883a 	mov	r20,zero
  80a418:	01401604 	movi	r5,88
  80a41c:	01800244 	movi	r6,9
  80a420:	03400a84 	movi	r13,42
  80a424:	03001b04 	movi	r12,108
  80a428:	84000044 	addi	r16,r16,1
  80a42c:	18bff804 	addi	r2,r3,-32
  80a430:	28827336 	bltu	r5,r2,80ae00 <___vfiprintf_internal_r+0xb54>
  80a434:	100490ba 	slli	r2,r2,2
  80a438:	02802074 	movhi	r10,129
  80a43c:	52a91304 	addi	r10,r10,-23476
  80a440:	1285883a 	add	r2,r2,r10
  80a444:	10800017 	ldw	r2,0(r2)
  80a448:	1000683a 	jmp	r2
  80a44c:	0080ab34 	movhi	r2,684
  80a450:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a454:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a458:	0080ab54 	movui	r2,685
  80a45c:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a460:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a464:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a468:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a46c:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a470:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a474:	0080ad3c 	xorhi	r2,zero,692
  80a478:	0080ad58 	cmpnei	r2,zero,693
  80a47c:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a480:	0080a640 	call	80a64 <__reset-0x77f59c>
  80a484:	0080ad68 	cmpgeui	r2,zero,693
  80a488:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a48c:	0080ab60 	cmpeqi	r2,zero,685
  80a490:	0080ab6c 	andhi	r2,zero,685
  80a494:	0080ab6c 	andhi	r2,zero,685
  80a498:	0080ab6c 	andhi	r2,zero,685
  80a49c:	0080ab6c 	andhi	r2,zero,685
  80a4a0:	0080ab6c 	andhi	r2,zero,685
  80a4a4:	0080ab6c 	andhi	r2,zero,685
  80a4a8:	0080ab6c 	andhi	r2,zero,685
  80a4ac:	0080ab6c 	andhi	r2,zero,685
  80a4b0:	0080ab6c 	andhi	r2,zero,685
  80a4b4:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a4b8:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a4bc:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a4c0:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a4c4:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a4c8:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a4cc:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a4d0:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a4d4:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a4d8:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a4dc:	0080ab98 	cmpnei	r2,zero,686
  80a4e0:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a4e4:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a4e8:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a4ec:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a4f0:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a4f4:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a4f8:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a4fc:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a500:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a504:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a508:	0080abd0 	cmplti	r2,zero,687
  80a50c:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a510:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a514:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a518:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a51c:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a520:	0080ac28 	cmpgeui	r2,zero,688
  80a524:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a528:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a52c:	0080ac98 	cmpnei	r2,zero,690
  80a530:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a534:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a538:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a53c:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a540:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a544:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a548:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a54c:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a550:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a554:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a558:	0080aa44 	movi	r2,681
  80a55c:	0080aa70 	cmpltui	r2,zero,681
  80a560:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a564:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a568:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a56c:	0080ada8 	cmpgeui	r2,zero,694
  80a570:	0080aa70 	cmpltui	r2,zero,681
  80a574:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a578:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a57c:	0080a904 	movi	r2,676
  80a580:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a584:	0080a914 	movui	r2,676
  80a588:	0080a950 	cmplti	r2,zero,677
  80a58c:	0080a64c 	andi	r2,zero,665
  80a590:	0080a8f8 	rdprs	r2,zero,675
  80a594:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a598:	0080acd4 	movui	r2,691
  80a59c:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a5a0:	0080ad2c 	andhi	r2,zero,692
  80a5a4:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a5a8:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a5ac:	0080a9f0 	cmpltui	r2,zero,679
  80a5b0:	42000204 	addi	r8,r8,8
  80a5b4:	da802317 	ldw	r10,140(sp)
  80a5b8:	5455883a 	add	r10,r10,r17
  80a5bc:	da802315 	stw	r10,140(sp)
  80a5c0:	003f8b06 	br	80a3f0 <__alt_mem_onchip_mem+0xff78a3f0>
  80a5c4:	d9002017 	ldw	r4,128(sp)
  80a5c8:	a00b883a 	mov	r5,r20
  80a5cc:	0805d600 	call	805d60 <__swsetup_r>
  80a5d0:	1003b11e 	bne	r2,zero,80b498 <___vfiprintf_internal_r+0x11ec>
  80a5d4:	a080030b 	ldhu	r2,12(r20)
  80a5d8:	00c00284 	movi	r3,10
  80a5dc:	1080068c 	andi	r2,r2,26
  80a5e0:	10ff541e 	bne	r2,r3,80a334 <__alt_mem_onchip_mem+0xff78a334>
  80a5e4:	a080038f 	ldh	r2,14(r20)
  80a5e8:	103f5216 	blt	r2,zero,80a334 <__alt_mem_onchip_mem+0xff78a334>
  80a5ec:	d9c02217 	ldw	r7,136(sp)
  80a5f0:	d9002017 	ldw	r4,128(sp)
  80a5f4:	e00d883a 	mov	r6,fp
  80a5f8:	a00b883a 	mov	r5,r20
  80a5fc:	080b7240 	call	80b724 <__sbprintf>
  80a600:	dfc03617 	ldw	ra,216(sp)
  80a604:	df003517 	ldw	fp,212(sp)
  80a608:	ddc03417 	ldw	r23,208(sp)
  80a60c:	dd803317 	ldw	r22,204(sp)
  80a610:	dd403217 	ldw	r21,200(sp)
  80a614:	dd003117 	ldw	r20,196(sp)
  80a618:	dcc03017 	ldw	r19,192(sp)
  80a61c:	dc802f17 	ldw	r18,188(sp)
  80a620:	dc402e17 	ldw	r17,184(sp)
  80a624:	dc002d17 	ldw	r16,180(sp)
  80a628:	dec03704 	addi	sp,sp,220
  80a62c:	f800283a 	ret
  80a630:	0801aa80 	call	801aa8 <__sinit>
  80a634:	003f2f06 	br	80a2f4 <__alt_mem_onchip_mem+0xff78a2f4>
  80a638:	0463c83a 	sub	r17,zero,r17
  80a63c:	d8802215 	stw	r2,136(sp)
  80a640:	a5000114 	ori	r20,r20,4
  80a644:	80c00007 	ldb	r3,0(r16)
  80a648:	003f7706 	br	80a428 <__alt_mem_onchip_mem+0xff78a428>
  80a64c:	00800c04 	movi	r2,48
  80a650:	da802217 	ldw	r10,136(sp)
  80a654:	d8801d05 	stb	r2,116(sp)
  80a658:	00801e04 	movi	r2,120
  80a65c:	d8801d45 	stb	r2,117(sp)
  80a660:	d8001d85 	stb	zero,118(sp)
  80a664:	50c00104 	addi	r3,r10,4
  80a668:	54800017 	ldw	r18,0(r10)
  80a66c:	0027883a 	mov	r19,zero
  80a670:	a0800094 	ori	r2,r20,2
  80a674:	48030b16 	blt	r9,zero,80b2a4 <___vfiprintf_internal_r+0xff8>
  80a678:	00bfdfc4 	movi	r2,-129
  80a67c:	a096703a 	and	r11,r20,r2
  80a680:	d8c02215 	stw	r3,136(sp)
  80a684:	5d000094 	ori	r20,r11,2
  80a688:	90032b1e 	bne	r18,zero,80b338 <___vfiprintf_internal_r+0x108c>
  80a68c:	00802074 	movhi	r2,129
  80a690:	108cf204 	addi	r2,r2,13256
  80a694:	d8802615 	stw	r2,152(sp)
  80a698:	0039883a 	mov	fp,zero
  80a69c:	48017b1e 	bne	r9,zero,80ac8c <___vfiprintf_internal_r+0x9e0>
  80a6a0:	0013883a 	mov	r9,zero
  80a6a4:	0027883a 	mov	r19,zero
  80a6a8:	dd401a04 	addi	r21,sp,104
  80a6ac:	4825883a 	mov	r18,r9
  80a6b0:	4cc0010e 	bge	r9,r19,80a6b8 <___vfiprintf_internal_r+0x40c>
  80a6b4:	9825883a 	mov	r18,r19
  80a6b8:	e7003fcc 	andi	fp,fp,255
  80a6bc:	e700201c 	xori	fp,fp,128
  80a6c0:	e73fe004 	addi	fp,fp,-128
  80a6c4:	e0000126 	beq	fp,zero,80a6cc <___vfiprintf_internal_r+0x420>
  80a6c8:	94800044 	addi	r18,r18,1
  80a6cc:	a380008c 	andi	r14,r20,2
  80a6d0:	70000126 	beq	r14,zero,80a6d8 <___vfiprintf_internal_r+0x42c>
  80a6d4:	94800084 	addi	r18,r18,2
  80a6d8:	a700210c 	andi	fp,r20,132
  80a6dc:	e001df1e 	bne	fp,zero,80ae5c <___vfiprintf_internal_r+0xbb0>
  80a6e0:	8c87c83a 	sub	r3,r17,r18
  80a6e4:	00c1dd0e 	bge	zero,r3,80ae5c <___vfiprintf_internal_r+0xbb0>
  80a6e8:	01c00404 	movi	r7,16
  80a6ec:	d8801c17 	ldw	r2,112(sp)
  80a6f0:	38c3ad0e 	bge	r7,r3,80b5a8 <___vfiprintf_internal_r+0x12fc>
  80a6f4:	02802074 	movhi	r10,129
  80a6f8:	528df604 	addi	r10,r10,14296
  80a6fc:	dc002915 	stw	r16,164(sp)
  80a700:	d9801b17 	ldw	r6,108(sp)
  80a704:	da802415 	stw	r10,144(sp)
  80a708:	03c001c4 	movi	r15,7
  80a70c:	da402515 	stw	r9,148(sp)
  80a710:	db802815 	stw	r14,160(sp)
  80a714:	1821883a 	mov	r16,r3
  80a718:	00000506 	br	80a730 <___vfiprintf_internal_r+0x484>
  80a71c:	31400084 	addi	r5,r6,2
  80a720:	42000204 	addi	r8,r8,8
  80a724:	200d883a 	mov	r6,r4
  80a728:	843ffc04 	addi	r16,r16,-16
  80a72c:	3c000d0e 	bge	r7,r16,80a764 <___vfiprintf_internal_r+0x4b8>
  80a730:	10800404 	addi	r2,r2,16
  80a734:	31000044 	addi	r4,r6,1
  80a738:	45800015 	stw	r22,0(r8)
  80a73c:	41c00115 	stw	r7,4(r8)
  80a740:	d8801c15 	stw	r2,112(sp)
  80a744:	d9001b15 	stw	r4,108(sp)
  80a748:	793ff40e 	bge	r15,r4,80a71c <__alt_mem_onchip_mem+0xff78a71c>
  80a74c:	1001b51e 	bne	r2,zero,80ae24 <___vfiprintf_internal_r+0xb78>
  80a750:	843ffc04 	addi	r16,r16,-16
  80a754:	000d883a 	mov	r6,zero
  80a758:	01400044 	movi	r5,1
  80a75c:	d811883a 	mov	r8,sp
  80a760:	3c3ff316 	blt	r7,r16,80a730 <__alt_mem_onchip_mem+0xff78a730>
  80a764:	8007883a 	mov	r3,r16
  80a768:	da402517 	ldw	r9,148(sp)
  80a76c:	db802817 	ldw	r14,160(sp)
  80a770:	dc002917 	ldw	r16,164(sp)
  80a774:	da802417 	ldw	r10,144(sp)
  80a778:	1885883a 	add	r2,r3,r2
  80a77c:	40c00115 	stw	r3,4(r8)
  80a780:	42800015 	stw	r10,0(r8)
  80a784:	d8801c15 	stw	r2,112(sp)
  80a788:	d9401b15 	stw	r5,108(sp)
  80a78c:	00c001c4 	movi	r3,7
  80a790:	19426016 	blt	r3,r5,80b114 <___vfiprintf_internal_r+0xe68>
  80a794:	d8c01d87 	ldb	r3,118(sp)
  80a798:	42000204 	addi	r8,r8,8
  80a79c:	29000044 	addi	r4,r5,1
  80a7a0:	1801b31e 	bne	r3,zero,80ae70 <___vfiprintf_internal_r+0xbc4>
  80a7a4:	7001c026 	beq	r14,zero,80aea8 <___vfiprintf_internal_r+0xbfc>
  80a7a8:	d8c01d04 	addi	r3,sp,116
  80a7ac:	10800084 	addi	r2,r2,2
  80a7b0:	40c00015 	stw	r3,0(r8)
  80a7b4:	00c00084 	movi	r3,2
  80a7b8:	40c00115 	stw	r3,4(r8)
  80a7bc:	d8801c15 	stw	r2,112(sp)
  80a7c0:	d9001b15 	stw	r4,108(sp)
  80a7c4:	00c001c4 	movi	r3,7
  80a7c8:	1902650e 	bge	r3,r4,80b160 <___vfiprintf_internal_r+0xeb4>
  80a7cc:	10029a1e 	bne	r2,zero,80b238 <___vfiprintf_internal_r+0xf8c>
  80a7d0:	00c02004 	movi	r3,128
  80a7d4:	01000044 	movi	r4,1
  80a7d8:	000b883a 	mov	r5,zero
  80a7dc:	d811883a 	mov	r8,sp
  80a7e0:	e0c1b31e 	bne	fp,r3,80aeb0 <___vfiprintf_internal_r+0xc04>
  80a7e4:	8cb9c83a 	sub	fp,r17,r18
  80a7e8:	0701b10e 	bge	zero,fp,80aeb0 <___vfiprintf_internal_r+0xc04>
  80a7ec:	01c00404 	movi	r7,16
  80a7f0:	3f03890e 	bge	r7,fp,80b618 <___vfiprintf_internal_r+0x136c>
  80a7f4:	00c02074 	movhi	r3,129
  80a7f8:	18cdf204 	addi	r3,r3,14280
  80a7fc:	d8c02415 	stw	r3,144(sp)
  80a800:	8007883a 	mov	r3,r16
  80a804:	034001c4 	movi	r13,7
  80a808:	e021883a 	mov	r16,fp
  80a80c:	da402515 	stw	r9,148(sp)
  80a810:	1839883a 	mov	fp,r3
  80a814:	00000506 	br	80a82c <___vfiprintf_internal_r+0x580>
  80a818:	29800084 	addi	r6,r5,2
  80a81c:	42000204 	addi	r8,r8,8
  80a820:	180b883a 	mov	r5,r3
  80a824:	843ffc04 	addi	r16,r16,-16
  80a828:	3c000d0e 	bge	r7,r16,80a860 <___vfiprintf_internal_r+0x5b4>
  80a82c:	10800404 	addi	r2,r2,16
  80a830:	28c00044 	addi	r3,r5,1
  80a834:	45c00015 	stw	r23,0(r8)
  80a838:	41c00115 	stw	r7,4(r8)
  80a83c:	d8801c15 	stw	r2,112(sp)
  80a840:	d8c01b15 	stw	r3,108(sp)
  80a844:	68fff40e 	bge	r13,r3,80a818 <__alt_mem_onchip_mem+0xff78a818>
  80a848:	1002241e 	bne	r2,zero,80b0dc <___vfiprintf_internal_r+0xe30>
  80a84c:	843ffc04 	addi	r16,r16,-16
  80a850:	01800044 	movi	r6,1
  80a854:	000b883a 	mov	r5,zero
  80a858:	d811883a 	mov	r8,sp
  80a85c:	3c3ff316 	blt	r7,r16,80a82c <__alt_mem_onchip_mem+0xff78a82c>
  80a860:	da402517 	ldw	r9,148(sp)
  80a864:	e007883a 	mov	r3,fp
  80a868:	8039883a 	mov	fp,r16
  80a86c:	1821883a 	mov	r16,r3
  80a870:	d8c02417 	ldw	r3,144(sp)
  80a874:	1705883a 	add	r2,r2,fp
  80a878:	47000115 	stw	fp,4(r8)
  80a87c:	40c00015 	stw	r3,0(r8)
  80a880:	d8801c15 	stw	r2,112(sp)
  80a884:	d9801b15 	stw	r6,108(sp)
  80a888:	00c001c4 	movi	r3,7
  80a88c:	19827616 	blt	r3,r6,80b268 <___vfiprintf_internal_r+0xfbc>
  80a890:	4cf9c83a 	sub	fp,r9,r19
  80a894:	42000204 	addi	r8,r8,8
  80a898:	31000044 	addi	r4,r6,1
  80a89c:	300b883a 	mov	r5,r6
  80a8a0:	07018516 	blt	zero,fp,80aeb8 <___vfiprintf_internal_r+0xc0c>
  80a8a4:	9885883a 	add	r2,r19,r2
  80a8a8:	45400015 	stw	r21,0(r8)
  80a8ac:	44c00115 	stw	r19,4(r8)
  80a8b0:	d8801c15 	stw	r2,112(sp)
  80a8b4:	d9001b15 	stw	r4,108(sp)
  80a8b8:	00c001c4 	movi	r3,7
  80a8bc:	1901dd0e 	bge	r3,r4,80b034 <___vfiprintf_internal_r+0xd88>
  80a8c0:	1002401e 	bne	r2,zero,80b1c4 <___vfiprintf_internal_r+0xf18>
  80a8c4:	d8001b15 	stw	zero,108(sp)
  80a8c8:	a2c0010c 	andi	r11,r20,4
  80a8cc:	58000226 	beq	r11,zero,80a8d8 <___vfiprintf_internal_r+0x62c>
  80a8d0:	8ca7c83a 	sub	r19,r17,r18
  80a8d4:	04c2f216 	blt	zero,r19,80b4a0 <___vfiprintf_internal_r+0x11f4>
  80a8d8:	8c80010e 	bge	r17,r18,80a8e0 <___vfiprintf_internal_r+0x634>
  80a8dc:	9023883a 	mov	r17,r18
  80a8e0:	da802317 	ldw	r10,140(sp)
  80a8e4:	5455883a 	add	r10,r10,r17
  80a8e8:	da802315 	stw	r10,140(sp)
  80a8ec:	d8001b15 	stw	zero,108(sp)
  80a8f0:	d811883a 	mov	r8,sp
  80a8f4:	003ea206 	br	80a380 <__alt_mem_onchip_mem+0xff78a380>
  80a8f8:	a5000814 	ori	r20,r20,32
  80a8fc:	80c00007 	ldb	r3,0(r16)
  80a900:	003ec906 	br	80a428 <__alt_mem_onchip_mem+0xff78a428>
  80a904:	80c00007 	ldb	r3,0(r16)
  80a908:	1b030926 	beq	r3,r12,80b530 <___vfiprintf_internal_r+0x1284>
  80a90c:	a5000414 	ori	r20,r20,16
  80a910:	003ec506 	br	80a428 <__alt_mem_onchip_mem+0xff78a428>
  80a914:	21003fcc 	andi	r4,r4,255
  80a918:	20035e1e 	bne	r4,zero,80b694 <___vfiprintf_internal_r+0x13e8>
  80a91c:	a080080c 	andi	r2,r20,32
  80a920:	1002a526 	beq	r2,zero,80b3b8 <___vfiprintf_internal_r+0x110c>
  80a924:	da802217 	ldw	r10,136(sp)
  80a928:	50800017 	ldw	r2,0(r10)
  80a92c:	da802317 	ldw	r10,140(sp)
  80a930:	5007d7fa 	srai	r3,r10,31
  80a934:	da802217 	ldw	r10,136(sp)
  80a938:	10c00115 	stw	r3,4(r2)
  80a93c:	52800104 	addi	r10,r10,4
  80a940:	da802215 	stw	r10,136(sp)
  80a944:	da802317 	ldw	r10,140(sp)
  80a948:	12800015 	stw	r10,0(r2)
  80a94c:	003e8c06 	br	80a380 <__alt_mem_onchip_mem+0xff78a380>
  80a950:	21003fcc 	andi	r4,r4,255
  80a954:	2003511e 	bne	r4,zero,80b69c <___vfiprintf_internal_r+0x13f0>
  80a958:	a080080c 	andi	r2,r20,32
  80a95c:	1000a126 	beq	r2,zero,80abe4 <___vfiprintf_internal_r+0x938>
  80a960:	da802217 	ldw	r10,136(sp)
  80a964:	d8001d85 	stb	zero,118(sp)
  80a968:	50800204 	addi	r2,r10,8
  80a96c:	54800017 	ldw	r18,0(r10)
  80a970:	54c00117 	ldw	r19,4(r10)
  80a974:	4802b416 	blt	r9,zero,80b448 <___vfiprintf_internal_r+0x119c>
  80a978:	013fdfc4 	movi	r4,-129
  80a97c:	94c6b03a 	or	r3,r18,r19
  80a980:	d8802215 	stw	r2,136(sp)
  80a984:	a128703a 	and	r20,r20,r4
  80a988:	1800a226 	beq	r3,zero,80ac14 <___vfiprintf_internal_r+0x968>
  80a98c:	0039883a 	mov	fp,zero
  80a990:	dd401a04 	addi	r21,sp,104
  80a994:	9006d0fa 	srli	r3,r18,3
  80a998:	9808977a 	slli	r4,r19,29
  80a99c:	9826d0fa 	srli	r19,r19,3
  80a9a0:	948001cc 	andi	r18,r18,7
  80a9a4:	90800c04 	addi	r2,r18,48
  80a9a8:	ad7fffc4 	addi	r21,r21,-1
  80a9ac:	20e4b03a 	or	r18,r4,r3
  80a9b0:	a8800005 	stb	r2,0(r21)
  80a9b4:	94c6b03a 	or	r3,r18,r19
  80a9b8:	183ff61e 	bne	r3,zero,80a994 <__alt_mem_onchip_mem+0xff78a994>
  80a9bc:	a0c0004c 	andi	r3,r20,1
  80a9c0:	18005926 	beq	r3,zero,80ab28 <___vfiprintf_internal_r+0x87c>
  80a9c4:	10803fcc 	andi	r2,r2,255
  80a9c8:	1080201c 	xori	r2,r2,128
  80a9cc:	10bfe004 	addi	r2,r2,-128
  80a9d0:	00c00c04 	movi	r3,48
  80a9d4:	10c05426 	beq	r2,r3,80ab28 <___vfiprintf_internal_r+0x87c>
  80a9d8:	da801e17 	ldw	r10,120(sp)
  80a9dc:	a8bfffc4 	addi	r2,r21,-1
  80a9e0:	a8ffffc5 	stb	r3,-1(r21)
  80a9e4:	50a7c83a 	sub	r19,r10,r2
  80a9e8:	102b883a 	mov	r21,r2
  80a9ec:	003f2f06 	br	80a6ac <__alt_mem_onchip_mem+0xff78a6ac>
  80a9f0:	21003fcc 	andi	r4,r4,255
  80a9f4:	2003421e 	bne	r4,zero,80b700 <___vfiprintf_internal_r+0x1454>
  80a9f8:	00802074 	movhi	r2,129
  80a9fc:	108cf204 	addi	r2,r2,13256
  80aa00:	d8802615 	stw	r2,152(sp)
  80aa04:	a080080c 	andi	r2,r20,32
  80aa08:	1000aa26 	beq	r2,zero,80acb4 <___vfiprintf_internal_r+0xa08>
  80aa0c:	da802217 	ldw	r10,136(sp)
  80aa10:	54800017 	ldw	r18,0(r10)
  80aa14:	54c00117 	ldw	r19,4(r10)
  80aa18:	52800204 	addi	r10,r10,8
  80aa1c:	da802215 	stw	r10,136(sp)
  80aa20:	a080004c 	andi	r2,r20,1
  80aa24:	1001d226 	beq	r2,zero,80b170 <___vfiprintf_internal_r+0xec4>
  80aa28:	94c4b03a 	or	r2,r18,r19
  80aa2c:	1002351e 	bne	r2,zero,80b304 <___vfiprintf_internal_r+0x1058>
  80aa30:	d8001d85 	stb	zero,118(sp)
  80aa34:	48022216 	blt	r9,zero,80b2c0 <___vfiprintf_internal_r+0x1014>
  80aa38:	00bfdfc4 	movi	r2,-129
  80aa3c:	a0a8703a 	and	r20,r20,r2
  80aa40:	003f1506 	br	80a698 <__alt_mem_onchip_mem+0xff78a698>
  80aa44:	da802217 	ldw	r10,136(sp)
  80aa48:	04800044 	movi	r18,1
  80aa4c:	d8001d85 	stb	zero,118(sp)
  80aa50:	50800017 	ldw	r2,0(r10)
  80aa54:	52800104 	addi	r10,r10,4
  80aa58:	da802215 	stw	r10,136(sp)
  80aa5c:	d8801005 	stb	r2,64(sp)
  80aa60:	9027883a 	mov	r19,r18
  80aa64:	dd401004 	addi	r21,sp,64
  80aa68:	0013883a 	mov	r9,zero
  80aa6c:	003f1706 	br	80a6cc <__alt_mem_onchip_mem+0xff78a6cc>
  80aa70:	21003fcc 	andi	r4,r4,255
  80aa74:	2003201e 	bne	r4,zero,80b6f8 <___vfiprintf_internal_r+0x144c>
  80aa78:	a080080c 	andi	r2,r20,32
  80aa7c:	10004b26 	beq	r2,zero,80abac <___vfiprintf_internal_r+0x900>
  80aa80:	da802217 	ldw	r10,136(sp)
  80aa84:	50800117 	ldw	r2,4(r10)
  80aa88:	54800017 	ldw	r18,0(r10)
  80aa8c:	52800204 	addi	r10,r10,8
  80aa90:	da802215 	stw	r10,136(sp)
  80aa94:	1027883a 	mov	r19,r2
  80aa98:	10022c16 	blt	r2,zero,80b34c <___vfiprintf_internal_r+0x10a0>
  80aa9c:	df001d83 	ldbu	fp,118(sp)
  80aaa0:	48007216 	blt	r9,zero,80ac6c <___vfiprintf_internal_r+0x9c0>
  80aaa4:	00ffdfc4 	movi	r3,-129
  80aaa8:	94c4b03a 	or	r2,r18,r19
  80aaac:	a0e8703a 	and	r20,r20,r3
  80aab0:	1000cc26 	beq	r2,zero,80ade4 <___vfiprintf_internal_r+0xb38>
  80aab4:	98021026 	beq	r19,zero,80b2f8 <___vfiprintf_internal_r+0x104c>
  80aab8:	dc402415 	stw	r17,144(sp)
  80aabc:	dc002515 	stw	r16,148(sp)
  80aac0:	9823883a 	mov	r17,r19
  80aac4:	9021883a 	mov	r16,r18
  80aac8:	dd401a04 	addi	r21,sp,104
  80aacc:	4825883a 	mov	r18,r9
  80aad0:	4027883a 	mov	r19,r8
  80aad4:	8009883a 	mov	r4,r16
  80aad8:	880b883a 	mov	r5,r17
  80aadc:	01800284 	movi	r6,10
  80aae0:	000f883a 	mov	r7,zero
  80aae4:	080c20c0 	call	80c20c <__umoddi3>
  80aae8:	10800c04 	addi	r2,r2,48
  80aaec:	ad7fffc4 	addi	r21,r21,-1
  80aaf0:	8009883a 	mov	r4,r16
  80aaf4:	880b883a 	mov	r5,r17
  80aaf8:	a8800005 	stb	r2,0(r21)
  80aafc:	01800284 	movi	r6,10
  80ab00:	000f883a 	mov	r7,zero
  80ab04:	080bc940 	call	80bc94 <__udivdi3>
  80ab08:	1021883a 	mov	r16,r2
  80ab0c:	10c4b03a 	or	r2,r2,r3
  80ab10:	1823883a 	mov	r17,r3
  80ab14:	103fef1e 	bne	r2,zero,80aad4 <__alt_mem_onchip_mem+0xff78aad4>
  80ab18:	dc402417 	ldw	r17,144(sp)
  80ab1c:	dc002517 	ldw	r16,148(sp)
  80ab20:	9013883a 	mov	r9,r18
  80ab24:	9811883a 	mov	r8,r19
  80ab28:	da801e17 	ldw	r10,120(sp)
  80ab2c:	5567c83a 	sub	r19,r10,r21
  80ab30:	003ede06 	br	80a6ac <__alt_mem_onchip_mem+0xff78a6ac>
  80ab34:	38803fcc 	andi	r2,r7,255
  80ab38:	1080201c 	xori	r2,r2,128
  80ab3c:	10bfe004 	addi	r2,r2,-128
  80ab40:	1002371e 	bne	r2,zero,80b420 <___vfiprintf_internal_r+0x1174>
  80ab44:	01000044 	movi	r4,1
  80ab48:	01c00804 	movi	r7,32
  80ab4c:	80c00007 	ldb	r3,0(r16)
  80ab50:	003e3506 	br	80a428 <__alt_mem_onchip_mem+0xff78a428>
  80ab54:	a5000054 	ori	r20,r20,1
  80ab58:	80c00007 	ldb	r3,0(r16)
  80ab5c:	003e3206 	br	80a428 <__alt_mem_onchip_mem+0xff78a428>
  80ab60:	a5002014 	ori	r20,r20,128
  80ab64:	80c00007 	ldb	r3,0(r16)
  80ab68:	003e2f06 	br	80a428 <__alt_mem_onchip_mem+0xff78a428>
  80ab6c:	8015883a 	mov	r10,r16
  80ab70:	0023883a 	mov	r17,zero
  80ab74:	18bff404 	addi	r2,r3,-48
  80ab78:	50c00007 	ldb	r3,0(r10)
  80ab7c:	8c4002a4 	muli	r17,r17,10
  80ab80:	84000044 	addi	r16,r16,1
  80ab84:	8015883a 	mov	r10,r16
  80ab88:	1463883a 	add	r17,r2,r17
  80ab8c:	18bff404 	addi	r2,r3,-48
  80ab90:	30bff92e 	bgeu	r6,r2,80ab78 <__alt_mem_onchip_mem+0xff78ab78>
  80ab94:	003e2506 	br	80a42c <__alt_mem_onchip_mem+0xff78a42c>
  80ab98:	21003fcc 	andi	r4,r4,255
  80ab9c:	2002d41e 	bne	r4,zero,80b6f0 <___vfiprintf_internal_r+0x1444>
  80aba0:	a5000414 	ori	r20,r20,16
  80aba4:	a080080c 	andi	r2,r20,32
  80aba8:	103fb51e 	bne	r2,zero,80aa80 <__alt_mem_onchip_mem+0xff78aa80>
  80abac:	a080040c 	andi	r2,r20,16
  80abb0:	1001f826 	beq	r2,zero,80b394 <___vfiprintf_internal_r+0x10e8>
  80abb4:	da802217 	ldw	r10,136(sp)
  80abb8:	54800017 	ldw	r18,0(r10)
  80abbc:	52800104 	addi	r10,r10,4
  80abc0:	da802215 	stw	r10,136(sp)
  80abc4:	9027d7fa 	srai	r19,r18,31
  80abc8:	9805883a 	mov	r2,r19
  80abcc:	003fb206 	br	80aa98 <__alt_mem_onchip_mem+0xff78aa98>
  80abd0:	21003fcc 	andi	r4,r4,255
  80abd4:	2002c41e 	bne	r4,zero,80b6e8 <___vfiprintf_internal_r+0x143c>
  80abd8:	a5000414 	ori	r20,r20,16
  80abdc:	a080080c 	andi	r2,r20,32
  80abe0:	103f5f1e 	bne	r2,zero,80a960 <__alt_mem_onchip_mem+0xff78a960>
  80abe4:	a080040c 	andi	r2,r20,16
  80abe8:	10020f26 	beq	r2,zero,80b428 <___vfiprintf_internal_r+0x117c>
  80abec:	da802217 	ldw	r10,136(sp)
  80abf0:	d8001d85 	stb	zero,118(sp)
  80abf4:	0027883a 	mov	r19,zero
  80abf8:	50800104 	addi	r2,r10,4
  80abfc:	54800017 	ldw	r18,0(r10)
  80ac00:	48021116 	blt	r9,zero,80b448 <___vfiprintf_internal_r+0x119c>
  80ac04:	00ffdfc4 	movi	r3,-129
  80ac08:	d8802215 	stw	r2,136(sp)
  80ac0c:	a0e8703a 	and	r20,r20,r3
  80ac10:	903f5e1e 	bne	r18,zero,80a98c <__alt_mem_onchip_mem+0xff78a98c>
  80ac14:	0039883a 	mov	fp,zero
  80ac18:	4802a626 	beq	r9,zero,80b6b4 <___vfiprintf_internal_r+0x1408>
  80ac1c:	0025883a 	mov	r18,zero
  80ac20:	0027883a 	mov	r19,zero
  80ac24:	003f5a06 	br	80a990 <__alt_mem_onchip_mem+0xff78a990>
  80ac28:	21003fcc 	andi	r4,r4,255
  80ac2c:	20029f1e 	bne	r4,zero,80b6ac <___vfiprintf_internal_r+0x1400>
  80ac30:	a5000414 	ori	r20,r20,16
  80ac34:	a080080c 	andi	r2,r20,32
  80ac38:	10005e1e 	bne	r2,zero,80adb4 <___vfiprintf_internal_r+0xb08>
  80ac3c:	a080040c 	andi	r2,r20,16
  80ac40:	1001a21e 	bne	r2,zero,80b2cc <___vfiprintf_internal_r+0x1020>
  80ac44:	a080100c 	andi	r2,r20,64
  80ac48:	d8001d85 	stb	zero,118(sp)
  80ac4c:	da802217 	ldw	r10,136(sp)
  80ac50:	1002231e 	bne	r2,zero,80b4e0 <___vfiprintf_internal_r+0x1234>
  80ac54:	50800104 	addi	r2,r10,4
  80ac58:	54800017 	ldw	r18,0(r10)
  80ac5c:	0027883a 	mov	r19,zero
  80ac60:	4801a00e 	bge	r9,zero,80b2e4 <___vfiprintf_internal_r+0x1038>
  80ac64:	d8802215 	stw	r2,136(sp)
  80ac68:	0039883a 	mov	fp,zero
  80ac6c:	94c4b03a 	or	r2,r18,r19
  80ac70:	103f901e 	bne	r2,zero,80aab4 <__alt_mem_onchip_mem+0xff78aab4>
  80ac74:	00800044 	movi	r2,1
  80ac78:	10803fcc 	andi	r2,r2,255
  80ac7c:	00c00044 	movi	r3,1
  80ac80:	10c05926 	beq	r2,r3,80ade8 <___vfiprintf_internal_r+0xb3c>
  80ac84:	00c00084 	movi	r3,2
  80ac88:	10ffe41e 	bne	r2,r3,80ac1c <__alt_mem_onchip_mem+0xff78ac1c>
  80ac8c:	0025883a 	mov	r18,zero
  80ac90:	0027883a 	mov	r19,zero
  80ac94:	00013d06 	br	80b18c <___vfiprintf_internal_r+0xee0>
  80ac98:	21003fcc 	andi	r4,r4,255
  80ac9c:	2002811e 	bne	r4,zero,80b6a4 <___vfiprintf_internal_r+0x13f8>
  80aca0:	00802074 	movhi	r2,129
  80aca4:	108ced04 	addi	r2,r2,13236
  80aca8:	d8802615 	stw	r2,152(sp)
  80acac:	a080080c 	andi	r2,r20,32
  80acb0:	103f561e 	bne	r2,zero,80aa0c <__alt_mem_onchip_mem+0xff78aa0c>
  80acb4:	a080040c 	andi	r2,r20,16
  80acb8:	1001d126 	beq	r2,zero,80b400 <___vfiprintf_internal_r+0x1154>
  80acbc:	da802217 	ldw	r10,136(sp)
  80acc0:	0027883a 	mov	r19,zero
  80acc4:	54800017 	ldw	r18,0(r10)
  80acc8:	52800104 	addi	r10,r10,4
  80accc:	da802215 	stw	r10,136(sp)
  80acd0:	003f5306 	br	80aa20 <__alt_mem_onchip_mem+0xff78aa20>
  80acd4:	da802217 	ldw	r10,136(sp)
  80acd8:	d8001d85 	stb	zero,118(sp)
  80acdc:	55400017 	ldw	r21,0(r10)
  80ace0:	50c00104 	addi	r3,r10,4
  80ace4:	a8024226 	beq	r21,zero,80b5f0 <___vfiprintf_internal_r+0x1344>
  80ace8:	48021816 	blt	r9,zero,80b54c <___vfiprintf_internal_r+0x12a0>
  80acec:	480d883a 	mov	r6,r9
  80acf0:	000b883a 	mov	r5,zero
  80acf4:	a809883a 	mov	r4,r21
  80acf8:	d8c02a15 	stw	r3,168(sp)
  80acfc:	da002b15 	stw	r8,172(sp)
  80ad00:	da402c15 	stw	r9,176(sp)
  80ad04:	08086680 	call	808668 <memchr>
  80ad08:	d8c02a17 	ldw	r3,168(sp)
  80ad0c:	da002b17 	ldw	r8,172(sp)
  80ad10:	da402c17 	ldw	r9,176(sp)
  80ad14:	10024826 	beq	r2,zero,80b638 <___vfiprintf_internal_r+0x138c>
  80ad18:	1567c83a 	sub	r19,r2,r21
  80ad1c:	df001d83 	ldbu	fp,118(sp)
  80ad20:	d8c02215 	stw	r3,136(sp)
  80ad24:	0013883a 	mov	r9,zero
  80ad28:	003e6006 	br	80a6ac <__alt_mem_onchip_mem+0xff78a6ac>
  80ad2c:	21003fcc 	andi	r4,r4,255
  80ad30:	203fc026 	beq	r4,zero,80ac34 <__alt_mem_onchip_mem+0xff78ac34>
  80ad34:	d9c01d85 	stb	r7,118(sp)
  80ad38:	003fbe06 	br	80ac34 <__alt_mem_onchip_mem+0xff78ac34>
  80ad3c:	da802217 	ldw	r10,136(sp)
  80ad40:	54400017 	ldw	r17,0(r10)
  80ad44:	50800104 	addi	r2,r10,4
  80ad48:	883e3b16 	blt	r17,zero,80a638 <__alt_mem_onchip_mem+0xff78a638>
  80ad4c:	d8802215 	stw	r2,136(sp)
  80ad50:	80c00007 	ldb	r3,0(r16)
  80ad54:	003db406 	br	80a428 <__alt_mem_onchip_mem+0xff78a428>
  80ad58:	01000044 	movi	r4,1
  80ad5c:	01c00ac4 	movi	r7,43
  80ad60:	80c00007 	ldb	r3,0(r16)
  80ad64:	003db006 	br	80a428 <__alt_mem_onchip_mem+0xff78a428>
  80ad68:	80c00007 	ldb	r3,0(r16)
  80ad6c:	82800044 	addi	r10,r16,1
  80ad70:	1b423c26 	beq	r3,r13,80b664 <___vfiprintf_internal_r+0x13b8>
  80ad74:	18bff404 	addi	r2,r3,-48
  80ad78:	0013883a 	mov	r9,zero
  80ad7c:	30822b36 	bltu	r6,r2,80b62c <___vfiprintf_internal_r+0x1380>
  80ad80:	50c00007 	ldb	r3,0(r10)
  80ad84:	4a4002a4 	muli	r9,r9,10
  80ad88:	54000044 	addi	r16,r10,1
  80ad8c:	8015883a 	mov	r10,r16
  80ad90:	4893883a 	add	r9,r9,r2
  80ad94:	18bff404 	addi	r2,r3,-48
  80ad98:	30bff92e 	bgeu	r6,r2,80ad80 <__alt_mem_onchip_mem+0xff78ad80>
  80ad9c:	483da30e 	bge	r9,zero,80a42c <__alt_mem_onchip_mem+0xff78a42c>
  80ada0:	027fffc4 	movi	r9,-1
  80ada4:	003da106 	br	80a42c <__alt_mem_onchip_mem+0xff78a42c>
  80ada8:	a5001014 	ori	r20,r20,64
  80adac:	80c00007 	ldb	r3,0(r16)
  80adb0:	003d9d06 	br	80a428 <__alt_mem_onchip_mem+0xff78a428>
  80adb4:	da802217 	ldw	r10,136(sp)
  80adb8:	d8001d85 	stb	zero,118(sp)
  80adbc:	50c00204 	addi	r3,r10,8
  80adc0:	54800017 	ldw	r18,0(r10)
  80adc4:	54c00117 	ldw	r19,4(r10)
  80adc8:	4801ca16 	blt	r9,zero,80b4f4 <___vfiprintf_internal_r+0x1248>
  80adcc:	013fdfc4 	movi	r4,-129
  80add0:	94c4b03a 	or	r2,r18,r19
  80add4:	d8c02215 	stw	r3,136(sp)
  80add8:	a128703a 	and	r20,r20,r4
  80addc:	0039883a 	mov	fp,zero
  80ade0:	103f341e 	bne	r2,zero,80aab4 <__alt_mem_onchip_mem+0xff78aab4>
  80ade4:	483e2e26 	beq	r9,zero,80a6a0 <__alt_mem_onchip_mem+0xff78a6a0>
  80ade8:	0025883a 	mov	r18,zero
  80adec:	94800c04 	addi	r18,r18,48
  80adf0:	dc8019c5 	stb	r18,103(sp)
  80adf4:	dcc02717 	ldw	r19,156(sp)
  80adf8:	dd4019c4 	addi	r21,sp,103
  80adfc:	003e2b06 	br	80a6ac <__alt_mem_onchip_mem+0xff78a6ac>
  80ae00:	21003fcc 	andi	r4,r4,255
  80ae04:	2002361e 	bne	r4,zero,80b6e0 <___vfiprintf_internal_r+0x1434>
  80ae08:	1801c126 	beq	r3,zero,80b510 <___vfiprintf_internal_r+0x1264>
  80ae0c:	04800044 	movi	r18,1
  80ae10:	d8c01005 	stb	r3,64(sp)
  80ae14:	d8001d85 	stb	zero,118(sp)
  80ae18:	9027883a 	mov	r19,r18
  80ae1c:	dd401004 	addi	r21,sp,64
  80ae20:	003f1106 	br	80aa68 <__alt_mem_onchip_mem+0xff78aa68>
  80ae24:	d9402117 	ldw	r5,132(sp)
  80ae28:	d9002017 	ldw	r4,128(sp)
  80ae2c:	d9801a04 	addi	r6,sp,104
  80ae30:	d9c02b15 	stw	r7,172(sp)
  80ae34:	dbc02a15 	stw	r15,168(sp)
  80ae38:	080a1980 	call	80a198 <__sprint_r.part.0>
  80ae3c:	d9c02b17 	ldw	r7,172(sp)
  80ae40:	dbc02a17 	ldw	r15,168(sp)
  80ae44:	10006d1e 	bne	r2,zero,80affc <___vfiprintf_internal_r+0xd50>
  80ae48:	d9801b17 	ldw	r6,108(sp)
  80ae4c:	d8801c17 	ldw	r2,112(sp)
  80ae50:	d811883a 	mov	r8,sp
  80ae54:	31400044 	addi	r5,r6,1
  80ae58:	003e3306 	br	80a728 <__alt_mem_onchip_mem+0xff78a728>
  80ae5c:	d9401b17 	ldw	r5,108(sp)
  80ae60:	d8801c17 	ldw	r2,112(sp)
  80ae64:	29000044 	addi	r4,r5,1
  80ae68:	d8c01d87 	ldb	r3,118(sp)
  80ae6c:	183e4d26 	beq	r3,zero,80a7a4 <__alt_mem_onchip_mem+0xff78a7a4>
  80ae70:	00c00044 	movi	r3,1
  80ae74:	d9401d84 	addi	r5,sp,118
  80ae78:	10c5883a 	add	r2,r2,r3
  80ae7c:	41400015 	stw	r5,0(r8)
  80ae80:	40c00115 	stw	r3,4(r8)
  80ae84:	d8801c15 	stw	r2,112(sp)
  80ae88:	d9001b15 	stw	r4,108(sp)
  80ae8c:	014001c4 	movi	r5,7
  80ae90:	2900a90e 	bge	r5,r4,80b138 <___vfiprintf_internal_r+0xe8c>
  80ae94:	1000da1e 	bne	r2,zero,80b200 <___vfiprintf_internal_r+0xf54>
  80ae98:	7000ab1e 	bne	r14,zero,80b148 <___vfiprintf_internal_r+0xe9c>
  80ae9c:	000b883a 	mov	r5,zero
  80aea0:	1809883a 	mov	r4,r3
  80aea4:	d811883a 	mov	r8,sp
  80aea8:	00c02004 	movi	r3,128
  80aeac:	e0fe4d26 	beq	fp,r3,80a7e4 <__alt_mem_onchip_mem+0xff78a7e4>
  80aeb0:	4cf9c83a 	sub	fp,r9,r19
  80aeb4:	073e7b0e 	bge	zero,fp,80a8a4 <__alt_mem_onchip_mem+0xff78a8a4>
  80aeb8:	01c00404 	movi	r7,16
  80aebc:	3f01900e 	bge	r7,fp,80b500 <___vfiprintf_internal_r+0x1254>
  80aec0:	00c02074 	movhi	r3,129
  80aec4:	18cdf204 	addi	r3,r3,14280
  80aec8:	d8c02415 	stw	r3,144(sp)
  80aecc:	034001c4 	movi	r13,7
  80aed0:	00000506 	br	80aee8 <___vfiprintf_internal_r+0xc3c>
  80aed4:	29000084 	addi	r4,r5,2
  80aed8:	42000204 	addi	r8,r8,8
  80aedc:	180b883a 	mov	r5,r3
  80aee0:	e73ffc04 	addi	fp,fp,-16
  80aee4:	3f000d0e 	bge	r7,fp,80af1c <___vfiprintf_internal_r+0xc70>
  80aee8:	10800404 	addi	r2,r2,16
  80aeec:	28c00044 	addi	r3,r5,1
  80aef0:	45c00015 	stw	r23,0(r8)
  80aef4:	41c00115 	stw	r7,4(r8)
  80aef8:	d8801c15 	stw	r2,112(sp)
  80aefc:	d8c01b15 	stw	r3,108(sp)
  80af00:	68fff40e 	bge	r13,r3,80aed4 <__alt_mem_onchip_mem+0xff78aed4>
  80af04:	1000101e 	bne	r2,zero,80af48 <___vfiprintf_internal_r+0xc9c>
  80af08:	e73ffc04 	addi	fp,fp,-16
  80af0c:	01000044 	movi	r4,1
  80af10:	000b883a 	mov	r5,zero
  80af14:	d811883a 	mov	r8,sp
  80af18:	3f3ff316 	blt	r7,fp,80aee8 <__alt_mem_onchip_mem+0xff78aee8>
  80af1c:	da802417 	ldw	r10,144(sp)
  80af20:	1705883a 	add	r2,r2,fp
  80af24:	47000115 	stw	fp,4(r8)
  80af28:	42800015 	stw	r10,0(r8)
  80af2c:	d8801c15 	stw	r2,112(sp)
  80af30:	d9001b15 	stw	r4,108(sp)
  80af34:	00c001c4 	movi	r3,7
  80af38:	19003616 	blt	r3,r4,80b014 <___vfiprintf_internal_r+0xd68>
  80af3c:	42000204 	addi	r8,r8,8
  80af40:	21000044 	addi	r4,r4,1
  80af44:	003e5706 	br	80a8a4 <__alt_mem_onchip_mem+0xff78a8a4>
  80af48:	d9402117 	ldw	r5,132(sp)
  80af4c:	d9002017 	ldw	r4,128(sp)
  80af50:	d9801a04 	addi	r6,sp,104
  80af54:	d9c02b15 	stw	r7,172(sp)
  80af58:	db402a15 	stw	r13,168(sp)
  80af5c:	080a1980 	call	80a198 <__sprint_r.part.0>
  80af60:	d9c02b17 	ldw	r7,172(sp)
  80af64:	db402a17 	ldw	r13,168(sp)
  80af68:	1000241e 	bne	r2,zero,80affc <___vfiprintf_internal_r+0xd50>
  80af6c:	d9401b17 	ldw	r5,108(sp)
  80af70:	d8801c17 	ldw	r2,112(sp)
  80af74:	d811883a 	mov	r8,sp
  80af78:	29000044 	addi	r4,r5,1
  80af7c:	003fd806 	br	80aee0 <__alt_mem_onchip_mem+0xff78aee0>
  80af80:	d9401b17 	ldw	r5,108(sp)
  80af84:	00c02074 	movhi	r3,129
  80af88:	18cdf604 	addi	r3,r3,14296
  80af8c:	d8c02415 	stw	r3,144(sp)
  80af90:	29400044 	addi	r5,r5,1
  80af94:	d8c02417 	ldw	r3,144(sp)
  80af98:	14c5883a 	add	r2,r2,r19
  80af9c:	44c00115 	stw	r19,4(r8)
  80afa0:	40c00015 	stw	r3,0(r8)
  80afa4:	d8801c15 	stw	r2,112(sp)
  80afa8:	d9401b15 	stw	r5,108(sp)
  80afac:	00c001c4 	movi	r3,7
  80afb0:	1940070e 	bge	r3,r5,80afd0 <___vfiprintf_internal_r+0xd24>
  80afb4:	103e4826 	beq	r2,zero,80a8d8 <__alt_mem_onchip_mem+0xff78a8d8>
  80afb8:	d9402117 	ldw	r5,132(sp)
  80afbc:	d9002017 	ldw	r4,128(sp)
  80afc0:	d9801a04 	addi	r6,sp,104
  80afc4:	080a1980 	call	80a198 <__sprint_r.part.0>
  80afc8:	10000c1e 	bne	r2,zero,80affc <___vfiprintf_internal_r+0xd50>
  80afcc:	d8801c17 	ldw	r2,112(sp)
  80afd0:	8c80010e 	bge	r17,r18,80afd8 <___vfiprintf_internal_r+0xd2c>
  80afd4:	9023883a 	mov	r17,r18
  80afd8:	da802317 	ldw	r10,140(sp)
  80afdc:	5455883a 	add	r10,r10,r17
  80afe0:	da802315 	stw	r10,140(sp)
  80afe4:	103e4126 	beq	r2,zero,80a8ec <__alt_mem_onchip_mem+0xff78a8ec>
  80afe8:	d9402117 	ldw	r5,132(sp)
  80afec:	d9002017 	ldw	r4,128(sp)
  80aff0:	d9801a04 	addi	r6,sp,104
  80aff4:	080a1980 	call	80a198 <__sprint_r.part.0>
  80aff8:	103e3c26 	beq	r2,zero,80a8ec <__alt_mem_onchip_mem+0xff78a8ec>
  80affc:	dd002117 	ldw	r20,132(sp)
  80b000:	a080030b 	ldhu	r2,12(r20)
  80b004:	1080100c 	andi	r2,r2,64
  80b008:	1001231e 	bne	r2,zero,80b498 <___vfiprintf_internal_r+0x11ec>
  80b00c:	d8802317 	ldw	r2,140(sp)
  80b010:	003d7b06 	br	80a600 <__alt_mem_onchip_mem+0xff78a600>
  80b014:	1000991e 	bne	r2,zero,80b27c <___vfiprintf_internal_r+0xfd0>
  80b018:	00c00044 	movi	r3,1
  80b01c:	9805883a 	mov	r2,r19
  80b020:	dd400015 	stw	r21,0(sp)
  80b024:	dcc00115 	stw	r19,4(sp)
  80b028:	dcc01c15 	stw	r19,112(sp)
  80b02c:	d8c01b15 	stw	r3,108(sp)
  80b030:	d811883a 	mov	r8,sp
  80b034:	42000204 	addi	r8,r8,8
  80b038:	a2c0010c 	andi	r11,r20,4
  80b03c:	583fe426 	beq	r11,zero,80afd0 <__alt_mem_onchip_mem+0xff78afd0>
  80b040:	8ca7c83a 	sub	r19,r17,r18
  80b044:	04ffe20e 	bge	zero,r19,80afd0 <__alt_mem_onchip_mem+0xff78afd0>
  80b048:	01c00404 	movi	r7,16
  80b04c:	3cffcc0e 	bge	r7,r19,80af80 <__alt_mem_onchip_mem+0xff78af80>
  80b050:	02802074 	movhi	r10,129
  80b054:	528df604 	addi	r10,r10,14296
  80b058:	d9001b17 	ldw	r4,108(sp)
  80b05c:	da802415 	stw	r10,144(sp)
  80b060:	382b883a 	mov	r21,r7
  80b064:	050001c4 	movi	r20,7
  80b068:	df002017 	ldw	fp,128(sp)
  80b06c:	00000506 	br	80b084 <___vfiprintf_internal_r+0xdd8>
  80b070:	21400084 	addi	r5,r4,2
  80b074:	42000204 	addi	r8,r8,8
  80b078:	1809883a 	mov	r4,r3
  80b07c:	9cfffc04 	addi	r19,r19,-16
  80b080:	acffc40e 	bge	r21,r19,80af94 <__alt_mem_onchip_mem+0xff78af94>
  80b084:	10800404 	addi	r2,r2,16
  80b088:	20c00044 	addi	r3,r4,1
  80b08c:	45800015 	stw	r22,0(r8)
  80b090:	45400115 	stw	r21,4(r8)
  80b094:	d8801c15 	stw	r2,112(sp)
  80b098:	d8c01b15 	stw	r3,108(sp)
  80b09c:	a0fff40e 	bge	r20,r3,80b070 <__alt_mem_onchip_mem+0xff78b070>
  80b0a0:	1000041e 	bne	r2,zero,80b0b4 <___vfiprintf_internal_r+0xe08>
  80b0a4:	01400044 	movi	r5,1
  80b0a8:	0009883a 	mov	r4,zero
  80b0ac:	d811883a 	mov	r8,sp
  80b0b0:	003ff206 	br	80b07c <__alt_mem_onchip_mem+0xff78b07c>
  80b0b4:	d9402117 	ldw	r5,132(sp)
  80b0b8:	d9801a04 	addi	r6,sp,104
  80b0bc:	e009883a 	mov	r4,fp
  80b0c0:	080a1980 	call	80a198 <__sprint_r.part.0>
  80b0c4:	103fcd1e 	bne	r2,zero,80affc <__alt_mem_onchip_mem+0xff78affc>
  80b0c8:	d9001b17 	ldw	r4,108(sp)
  80b0cc:	d8801c17 	ldw	r2,112(sp)
  80b0d0:	d811883a 	mov	r8,sp
  80b0d4:	21400044 	addi	r5,r4,1
  80b0d8:	003fe806 	br	80b07c <__alt_mem_onchip_mem+0xff78b07c>
  80b0dc:	d9402117 	ldw	r5,132(sp)
  80b0e0:	d9002017 	ldw	r4,128(sp)
  80b0e4:	d9801a04 	addi	r6,sp,104
  80b0e8:	d9c02b15 	stw	r7,172(sp)
  80b0ec:	db402a15 	stw	r13,168(sp)
  80b0f0:	080a1980 	call	80a198 <__sprint_r.part.0>
  80b0f4:	d9c02b17 	ldw	r7,172(sp)
  80b0f8:	db402a17 	ldw	r13,168(sp)
  80b0fc:	103fbf1e 	bne	r2,zero,80affc <__alt_mem_onchip_mem+0xff78affc>
  80b100:	d9401b17 	ldw	r5,108(sp)
  80b104:	d8801c17 	ldw	r2,112(sp)
  80b108:	d811883a 	mov	r8,sp
  80b10c:	29800044 	addi	r6,r5,1
  80b110:	003dc406 	br	80a824 <__alt_mem_onchip_mem+0xff78a824>
  80b114:	1000d21e 	bne	r2,zero,80b460 <___vfiprintf_internal_r+0x11b4>
  80b118:	d8c01d87 	ldb	r3,118(sp)
  80b11c:	18009526 	beq	r3,zero,80b374 <___vfiprintf_internal_r+0x10c8>
  80b120:	00800044 	movi	r2,1
  80b124:	d8c01d84 	addi	r3,sp,118
  80b128:	1009883a 	mov	r4,r2
  80b12c:	d8c00015 	stw	r3,0(sp)
  80b130:	d8800115 	stw	r2,4(sp)
  80b134:	d811883a 	mov	r8,sp
  80b138:	200b883a 	mov	r5,r4
  80b13c:	42000204 	addi	r8,r8,8
  80b140:	21000044 	addi	r4,r4,1
  80b144:	003d9706 	br	80a7a4 <__alt_mem_onchip_mem+0xff78a7a4>
  80b148:	d9001d04 	addi	r4,sp,116
  80b14c:	00800084 	movi	r2,2
  80b150:	d9000015 	stw	r4,0(sp)
  80b154:	d8800115 	stw	r2,4(sp)
  80b158:	1809883a 	mov	r4,r3
  80b15c:	d811883a 	mov	r8,sp
  80b160:	200b883a 	mov	r5,r4
  80b164:	42000204 	addi	r8,r8,8
  80b168:	21000044 	addi	r4,r4,1
  80b16c:	003f4e06 	br	80aea8 <__alt_mem_onchip_mem+0xff78aea8>
  80b170:	d8001d85 	stb	zero,118(sp)
  80b174:	48005016 	blt	r9,zero,80b2b8 <___vfiprintf_internal_r+0x100c>
  80b178:	00ffdfc4 	movi	r3,-129
  80b17c:	94c4b03a 	or	r2,r18,r19
  80b180:	a0e8703a 	and	r20,r20,r3
  80b184:	103d4426 	beq	r2,zero,80a698 <__alt_mem_onchip_mem+0xff78a698>
  80b188:	0039883a 	mov	fp,zero
  80b18c:	d9002617 	ldw	r4,152(sp)
  80b190:	dd401a04 	addi	r21,sp,104
  80b194:	908003cc 	andi	r2,r18,15
  80b198:	9806973a 	slli	r3,r19,28
  80b19c:	2085883a 	add	r2,r4,r2
  80b1a0:	9024d13a 	srli	r18,r18,4
  80b1a4:	10800003 	ldbu	r2,0(r2)
  80b1a8:	9826d13a 	srli	r19,r19,4
  80b1ac:	ad7fffc4 	addi	r21,r21,-1
  80b1b0:	1ca4b03a 	or	r18,r3,r18
  80b1b4:	a8800005 	stb	r2,0(r21)
  80b1b8:	94c4b03a 	or	r2,r18,r19
  80b1bc:	103ff51e 	bne	r2,zero,80b194 <__alt_mem_onchip_mem+0xff78b194>
  80b1c0:	003e5906 	br	80ab28 <__alt_mem_onchip_mem+0xff78ab28>
  80b1c4:	d9402117 	ldw	r5,132(sp)
  80b1c8:	d9002017 	ldw	r4,128(sp)
  80b1cc:	d9801a04 	addi	r6,sp,104
  80b1d0:	080a1980 	call	80a198 <__sprint_r.part.0>
  80b1d4:	103f891e 	bne	r2,zero,80affc <__alt_mem_onchip_mem+0xff78affc>
  80b1d8:	d8801c17 	ldw	r2,112(sp)
  80b1dc:	d811883a 	mov	r8,sp
  80b1e0:	003f9506 	br	80b038 <__alt_mem_onchip_mem+0xff78b038>
  80b1e4:	d9402117 	ldw	r5,132(sp)
  80b1e8:	d9002017 	ldw	r4,128(sp)
  80b1ec:	d9801a04 	addi	r6,sp,104
  80b1f0:	080a1980 	call	80a198 <__sprint_r.part.0>
  80b1f4:	103f811e 	bne	r2,zero,80affc <__alt_mem_onchip_mem+0xff78affc>
  80b1f8:	d811883a 	mov	r8,sp
  80b1fc:	003ced06 	br	80a5b4 <__alt_mem_onchip_mem+0xff78a5b4>
  80b200:	d9402117 	ldw	r5,132(sp)
  80b204:	d9002017 	ldw	r4,128(sp)
  80b208:	d9801a04 	addi	r6,sp,104
  80b20c:	da402c15 	stw	r9,176(sp)
  80b210:	db802a15 	stw	r14,168(sp)
  80b214:	080a1980 	call	80a198 <__sprint_r.part.0>
  80b218:	da402c17 	ldw	r9,176(sp)
  80b21c:	db802a17 	ldw	r14,168(sp)
  80b220:	103f761e 	bne	r2,zero,80affc <__alt_mem_onchip_mem+0xff78affc>
  80b224:	d9401b17 	ldw	r5,108(sp)
  80b228:	d8801c17 	ldw	r2,112(sp)
  80b22c:	d811883a 	mov	r8,sp
  80b230:	29000044 	addi	r4,r5,1
  80b234:	003d5b06 	br	80a7a4 <__alt_mem_onchip_mem+0xff78a7a4>
  80b238:	d9402117 	ldw	r5,132(sp)
  80b23c:	d9002017 	ldw	r4,128(sp)
  80b240:	d9801a04 	addi	r6,sp,104
  80b244:	da402c15 	stw	r9,176(sp)
  80b248:	080a1980 	call	80a198 <__sprint_r.part.0>
  80b24c:	da402c17 	ldw	r9,176(sp)
  80b250:	103f6a1e 	bne	r2,zero,80affc <__alt_mem_onchip_mem+0xff78affc>
  80b254:	d9401b17 	ldw	r5,108(sp)
  80b258:	d8801c17 	ldw	r2,112(sp)
  80b25c:	d811883a 	mov	r8,sp
  80b260:	29000044 	addi	r4,r5,1
  80b264:	003f1006 	br	80aea8 <__alt_mem_onchip_mem+0xff78aea8>
  80b268:	1000c31e 	bne	r2,zero,80b578 <___vfiprintf_internal_r+0x12cc>
  80b26c:	01000044 	movi	r4,1
  80b270:	000b883a 	mov	r5,zero
  80b274:	d811883a 	mov	r8,sp
  80b278:	003f0d06 	br	80aeb0 <__alt_mem_onchip_mem+0xff78aeb0>
  80b27c:	d9402117 	ldw	r5,132(sp)
  80b280:	d9002017 	ldw	r4,128(sp)
  80b284:	d9801a04 	addi	r6,sp,104
  80b288:	080a1980 	call	80a198 <__sprint_r.part.0>
  80b28c:	103f5b1e 	bne	r2,zero,80affc <__alt_mem_onchip_mem+0xff78affc>
  80b290:	d9001b17 	ldw	r4,108(sp)
  80b294:	d8801c17 	ldw	r2,112(sp)
  80b298:	d811883a 	mov	r8,sp
  80b29c:	21000044 	addi	r4,r4,1
  80b2a0:	003d8006 	br	80a8a4 <__alt_mem_onchip_mem+0xff78a8a4>
  80b2a4:	01002074 	movhi	r4,129
  80b2a8:	210cf204 	addi	r4,r4,13256
  80b2ac:	d9002615 	stw	r4,152(sp)
  80b2b0:	d8c02215 	stw	r3,136(sp)
  80b2b4:	1029883a 	mov	r20,r2
  80b2b8:	94c4b03a 	or	r2,r18,r19
  80b2bc:	103fb21e 	bne	r2,zero,80b188 <__alt_mem_onchip_mem+0xff78b188>
  80b2c0:	0039883a 	mov	fp,zero
  80b2c4:	00800084 	movi	r2,2
  80b2c8:	003e6b06 	br	80ac78 <__alt_mem_onchip_mem+0xff78ac78>
  80b2cc:	da802217 	ldw	r10,136(sp)
  80b2d0:	d8001d85 	stb	zero,118(sp)
  80b2d4:	0027883a 	mov	r19,zero
  80b2d8:	50800104 	addi	r2,r10,4
  80b2dc:	54800017 	ldw	r18,0(r10)
  80b2e0:	483e6016 	blt	r9,zero,80ac64 <__alt_mem_onchip_mem+0xff78ac64>
  80b2e4:	00ffdfc4 	movi	r3,-129
  80b2e8:	d8802215 	stw	r2,136(sp)
  80b2ec:	a0e8703a 	and	r20,r20,r3
  80b2f0:	0039883a 	mov	fp,zero
  80b2f4:	903ebb26 	beq	r18,zero,80ade4 <__alt_mem_onchip_mem+0xff78ade4>
  80b2f8:	00800244 	movi	r2,9
  80b2fc:	14bdee36 	bltu	r2,r18,80aab8 <__alt_mem_onchip_mem+0xff78aab8>
  80b300:	003eba06 	br	80adec <__alt_mem_onchip_mem+0xff78adec>
  80b304:	00800c04 	movi	r2,48
  80b308:	d8c01d45 	stb	r3,117(sp)
  80b30c:	d8801d05 	stb	r2,116(sp)
  80b310:	d8001d85 	stb	zero,118(sp)
  80b314:	a0c00094 	ori	r3,r20,2
  80b318:	4800a916 	blt	r9,zero,80b5c0 <___vfiprintf_internal_r+0x1314>
  80b31c:	00bfdfc4 	movi	r2,-129
  80b320:	a096703a 	and	r11,r20,r2
  80b324:	5d000094 	ori	r20,r11,2
  80b328:	0039883a 	mov	fp,zero
  80b32c:	003f9706 	br	80b18c <__alt_mem_onchip_mem+0xff78b18c>
  80b330:	8025883a 	mov	r18,r16
  80b334:	003c2e06 	br	80a3f0 <__alt_mem_onchip_mem+0xff78a3f0>
  80b338:	00802074 	movhi	r2,129
  80b33c:	108cf204 	addi	r2,r2,13256
  80b340:	0039883a 	mov	fp,zero
  80b344:	d8802615 	stw	r2,152(sp)
  80b348:	003f9006 	br	80b18c <__alt_mem_onchip_mem+0xff78b18c>
  80b34c:	04a5c83a 	sub	r18,zero,r18
  80b350:	07000b44 	movi	fp,45
  80b354:	9004c03a 	cmpne	r2,r18,zero
  80b358:	04e7c83a 	sub	r19,zero,r19
  80b35c:	df001d85 	stb	fp,118(sp)
  80b360:	98a7c83a 	sub	r19,r19,r2
  80b364:	48009f16 	blt	r9,zero,80b5e4 <___vfiprintf_internal_r+0x1338>
  80b368:	00bfdfc4 	movi	r2,-129
  80b36c:	a0a8703a 	and	r20,r20,r2
  80b370:	003dd006 	br	80aab4 <__alt_mem_onchip_mem+0xff78aab4>
  80b374:	70004c26 	beq	r14,zero,80b4a8 <___vfiprintf_internal_r+0x11fc>
  80b378:	00800084 	movi	r2,2
  80b37c:	d8c01d04 	addi	r3,sp,116
  80b380:	d8c00015 	stw	r3,0(sp)
  80b384:	d8800115 	stw	r2,4(sp)
  80b388:	01000044 	movi	r4,1
  80b38c:	d811883a 	mov	r8,sp
  80b390:	003f7306 	br	80b160 <__alt_mem_onchip_mem+0xff78b160>
  80b394:	a080100c 	andi	r2,r20,64
  80b398:	da802217 	ldw	r10,136(sp)
  80b39c:	103e0626 	beq	r2,zero,80abb8 <__alt_mem_onchip_mem+0xff78abb8>
  80b3a0:	5480000f 	ldh	r18,0(r10)
  80b3a4:	52800104 	addi	r10,r10,4
  80b3a8:	da802215 	stw	r10,136(sp)
  80b3ac:	9027d7fa 	srai	r19,r18,31
  80b3b0:	9805883a 	mov	r2,r19
  80b3b4:	003db806 	br	80aa98 <__alt_mem_onchip_mem+0xff78aa98>
  80b3b8:	a080040c 	andi	r2,r20,16
  80b3bc:	1000091e 	bne	r2,zero,80b3e4 <___vfiprintf_internal_r+0x1138>
  80b3c0:	a2c0100c 	andi	r11,r20,64
  80b3c4:	58000726 	beq	r11,zero,80b3e4 <___vfiprintf_internal_r+0x1138>
  80b3c8:	da802217 	ldw	r10,136(sp)
  80b3cc:	50800017 	ldw	r2,0(r10)
  80b3d0:	52800104 	addi	r10,r10,4
  80b3d4:	da802215 	stw	r10,136(sp)
  80b3d8:	da802317 	ldw	r10,140(sp)
  80b3dc:	1280000d 	sth	r10,0(r2)
  80b3e0:	003be706 	br	80a380 <__alt_mem_onchip_mem+0xff78a380>
  80b3e4:	da802217 	ldw	r10,136(sp)
  80b3e8:	50800017 	ldw	r2,0(r10)
  80b3ec:	52800104 	addi	r10,r10,4
  80b3f0:	da802215 	stw	r10,136(sp)
  80b3f4:	da802317 	ldw	r10,140(sp)
  80b3f8:	12800015 	stw	r10,0(r2)
  80b3fc:	003be006 	br	80a380 <__alt_mem_onchip_mem+0xff78a380>
  80b400:	a080100c 	andi	r2,r20,64
  80b404:	da802217 	ldw	r10,136(sp)
  80b408:	10003026 	beq	r2,zero,80b4cc <___vfiprintf_internal_r+0x1220>
  80b40c:	5480000b 	ldhu	r18,0(r10)
  80b410:	52800104 	addi	r10,r10,4
  80b414:	0027883a 	mov	r19,zero
  80b418:	da802215 	stw	r10,136(sp)
  80b41c:	003d8006 	br	80aa20 <__alt_mem_onchip_mem+0xff78aa20>
  80b420:	80c00007 	ldb	r3,0(r16)
  80b424:	003c0006 	br	80a428 <__alt_mem_onchip_mem+0xff78a428>
  80b428:	a080100c 	andi	r2,r20,64
  80b42c:	d8001d85 	stb	zero,118(sp)
  80b430:	da802217 	ldw	r10,136(sp)
  80b434:	1000201e 	bne	r2,zero,80b4b8 <___vfiprintf_internal_r+0x120c>
  80b438:	50800104 	addi	r2,r10,4
  80b43c:	54800017 	ldw	r18,0(r10)
  80b440:	0027883a 	mov	r19,zero
  80b444:	483def0e 	bge	r9,zero,80ac04 <__alt_mem_onchip_mem+0xff78ac04>
  80b448:	94c6b03a 	or	r3,r18,r19
  80b44c:	d8802215 	stw	r2,136(sp)
  80b450:	183d4e1e 	bne	r3,zero,80a98c <__alt_mem_onchip_mem+0xff78a98c>
  80b454:	0039883a 	mov	fp,zero
  80b458:	0005883a 	mov	r2,zero
  80b45c:	003e0606 	br	80ac78 <__alt_mem_onchip_mem+0xff78ac78>
  80b460:	d9402117 	ldw	r5,132(sp)
  80b464:	d9002017 	ldw	r4,128(sp)
  80b468:	d9801a04 	addi	r6,sp,104
  80b46c:	da402c15 	stw	r9,176(sp)
  80b470:	db802a15 	stw	r14,168(sp)
  80b474:	080a1980 	call	80a198 <__sprint_r.part.0>
  80b478:	da402c17 	ldw	r9,176(sp)
  80b47c:	db802a17 	ldw	r14,168(sp)
  80b480:	103ede1e 	bne	r2,zero,80affc <__alt_mem_onchip_mem+0xff78affc>
  80b484:	d9401b17 	ldw	r5,108(sp)
  80b488:	d8801c17 	ldw	r2,112(sp)
  80b48c:	d811883a 	mov	r8,sp
  80b490:	29000044 	addi	r4,r5,1
  80b494:	003e7406 	br	80ae68 <__alt_mem_onchip_mem+0xff78ae68>
  80b498:	00bfffc4 	movi	r2,-1
  80b49c:	003c5806 	br	80a600 <__alt_mem_onchip_mem+0xff78a600>
  80b4a0:	d811883a 	mov	r8,sp
  80b4a4:	003ee806 	br	80b048 <__alt_mem_onchip_mem+0xff78b048>
  80b4a8:	000b883a 	mov	r5,zero
  80b4ac:	01000044 	movi	r4,1
  80b4b0:	d811883a 	mov	r8,sp
  80b4b4:	003e7c06 	br	80aea8 <__alt_mem_onchip_mem+0xff78aea8>
  80b4b8:	50800104 	addi	r2,r10,4
  80b4bc:	5480000b 	ldhu	r18,0(r10)
  80b4c0:	0027883a 	mov	r19,zero
  80b4c4:	483dcf0e 	bge	r9,zero,80ac04 <__alt_mem_onchip_mem+0xff78ac04>
  80b4c8:	003fdf06 	br	80b448 <__alt_mem_onchip_mem+0xff78b448>
  80b4cc:	54800017 	ldw	r18,0(r10)
  80b4d0:	52800104 	addi	r10,r10,4
  80b4d4:	0027883a 	mov	r19,zero
  80b4d8:	da802215 	stw	r10,136(sp)
  80b4dc:	003d5006 	br	80aa20 <__alt_mem_onchip_mem+0xff78aa20>
  80b4e0:	50800104 	addi	r2,r10,4
  80b4e4:	5480000b 	ldhu	r18,0(r10)
  80b4e8:	0027883a 	mov	r19,zero
  80b4ec:	483f7d0e 	bge	r9,zero,80b2e4 <__alt_mem_onchip_mem+0xff78b2e4>
  80b4f0:	003ddc06 	br	80ac64 <__alt_mem_onchip_mem+0xff78ac64>
  80b4f4:	d8c02215 	stw	r3,136(sp)
  80b4f8:	0039883a 	mov	fp,zero
  80b4fc:	003ddb06 	br	80ac6c <__alt_mem_onchip_mem+0xff78ac6c>
  80b500:	02802074 	movhi	r10,129
  80b504:	528df204 	addi	r10,r10,14280
  80b508:	da802415 	stw	r10,144(sp)
  80b50c:	003e8306 	br	80af1c <__alt_mem_onchip_mem+0xff78af1c>
  80b510:	d8801c17 	ldw	r2,112(sp)
  80b514:	dd002117 	ldw	r20,132(sp)
  80b518:	103eb926 	beq	r2,zero,80b000 <__alt_mem_onchip_mem+0xff78b000>
  80b51c:	d9002017 	ldw	r4,128(sp)
  80b520:	d9801a04 	addi	r6,sp,104
  80b524:	a00b883a 	mov	r5,r20
  80b528:	080a1980 	call	80a198 <__sprint_r.part.0>
  80b52c:	003eb406 	br	80b000 <__alt_mem_onchip_mem+0xff78b000>
  80b530:	80c00043 	ldbu	r3,1(r16)
  80b534:	a5000814 	ori	r20,r20,32
  80b538:	84000044 	addi	r16,r16,1
  80b53c:	18c03fcc 	andi	r3,r3,255
  80b540:	18c0201c 	xori	r3,r3,128
  80b544:	18ffe004 	addi	r3,r3,-128
  80b548:	003bb706 	br	80a428 <__alt_mem_onchip_mem+0xff78a428>
  80b54c:	a809883a 	mov	r4,r21
  80b550:	d8c02a15 	stw	r3,168(sp)
  80b554:	da002b15 	stw	r8,172(sp)
  80b558:	080a1000 	call	80a100 <strlen>
  80b55c:	d8c02a17 	ldw	r3,168(sp)
  80b560:	1027883a 	mov	r19,r2
  80b564:	df001d83 	ldbu	fp,118(sp)
  80b568:	d8c02215 	stw	r3,136(sp)
  80b56c:	0013883a 	mov	r9,zero
  80b570:	da002b17 	ldw	r8,172(sp)
  80b574:	003c4d06 	br	80a6ac <__alt_mem_onchip_mem+0xff78a6ac>
  80b578:	d9402117 	ldw	r5,132(sp)
  80b57c:	d9002017 	ldw	r4,128(sp)
  80b580:	d9801a04 	addi	r6,sp,104
  80b584:	da402c15 	stw	r9,176(sp)
  80b588:	080a1980 	call	80a198 <__sprint_r.part.0>
  80b58c:	da402c17 	ldw	r9,176(sp)
  80b590:	103e9a1e 	bne	r2,zero,80affc <__alt_mem_onchip_mem+0xff78affc>
  80b594:	d9401b17 	ldw	r5,108(sp)
  80b598:	d8801c17 	ldw	r2,112(sp)
  80b59c:	d811883a 	mov	r8,sp
  80b5a0:	29000044 	addi	r4,r5,1
  80b5a4:	003e4206 	br	80aeb0 <__alt_mem_onchip_mem+0xff78aeb0>
  80b5a8:	d9401b17 	ldw	r5,108(sp)
  80b5ac:	01002074 	movhi	r4,129
  80b5b0:	210df604 	addi	r4,r4,14296
  80b5b4:	d9002415 	stw	r4,144(sp)
  80b5b8:	29400044 	addi	r5,r5,1
  80b5bc:	003c6d06 	br	80a774 <__alt_mem_onchip_mem+0xff78a774>
  80b5c0:	0039883a 	mov	fp,zero
  80b5c4:	00800084 	movi	r2,2
  80b5c8:	10803fcc 	andi	r2,r2,255
  80b5cc:	01000044 	movi	r4,1
  80b5d0:	11001e26 	beq	r2,r4,80b64c <___vfiprintf_internal_r+0x13a0>
  80b5d4:	01000084 	movi	r4,2
  80b5d8:	11001e1e 	bne	r2,r4,80b654 <___vfiprintf_internal_r+0x13a8>
  80b5dc:	1829883a 	mov	r20,r3
  80b5e0:	003eea06 	br	80b18c <__alt_mem_onchip_mem+0xff78b18c>
  80b5e4:	a007883a 	mov	r3,r20
  80b5e8:	00800044 	movi	r2,1
  80b5ec:	003ff606 	br	80b5c8 <__alt_mem_onchip_mem+0xff78b5c8>
  80b5f0:	00800184 	movi	r2,6
  80b5f4:	1240012e 	bgeu	r2,r9,80b5fc <___vfiprintf_internal_r+0x1350>
  80b5f8:	1013883a 	mov	r9,r2
  80b5fc:	4827883a 	mov	r19,r9
  80b600:	4825883a 	mov	r18,r9
  80b604:	48001516 	blt	r9,zero,80b65c <___vfiprintf_internal_r+0x13b0>
  80b608:	05402074 	movhi	r21,129
  80b60c:	d8c02215 	stw	r3,136(sp)
  80b610:	ad4cf704 	addi	r21,r21,13276
  80b614:	003d1406 	br	80aa68 <__alt_mem_onchip_mem+0xff78aa68>
  80b618:	02802074 	movhi	r10,129
  80b61c:	528df204 	addi	r10,r10,14280
  80b620:	da802415 	stw	r10,144(sp)
  80b624:	200d883a 	mov	r6,r4
  80b628:	003c9106 	br	80a870 <__alt_mem_onchip_mem+0xff78a870>
  80b62c:	5021883a 	mov	r16,r10
  80b630:	0013883a 	mov	r9,zero
  80b634:	003b7d06 	br	80a42c <__alt_mem_onchip_mem+0xff78a42c>
  80b638:	4827883a 	mov	r19,r9
  80b63c:	df001d83 	ldbu	fp,118(sp)
  80b640:	d8c02215 	stw	r3,136(sp)
  80b644:	0013883a 	mov	r9,zero
  80b648:	003c1806 	br	80a6ac <__alt_mem_onchip_mem+0xff78a6ac>
  80b64c:	1829883a 	mov	r20,r3
  80b650:	003d1806 	br	80aab4 <__alt_mem_onchip_mem+0xff78aab4>
  80b654:	1829883a 	mov	r20,r3
  80b658:	003ccd06 	br	80a990 <__alt_mem_onchip_mem+0xff78a990>
  80b65c:	0025883a 	mov	r18,zero
  80b660:	003fe906 	br	80b608 <__alt_mem_onchip_mem+0xff78b608>
  80b664:	d8802217 	ldw	r2,136(sp)
  80b668:	80c00043 	ldbu	r3,1(r16)
  80b66c:	5021883a 	mov	r16,r10
  80b670:	12400017 	ldw	r9,0(r2)
  80b674:	10800104 	addi	r2,r2,4
  80b678:	d8802215 	stw	r2,136(sp)
  80b67c:	483faf0e 	bge	r9,zero,80b53c <__alt_mem_onchip_mem+0xff78b53c>
  80b680:	18c03fcc 	andi	r3,r3,255
  80b684:	18c0201c 	xori	r3,r3,128
  80b688:	027fffc4 	movi	r9,-1
  80b68c:	18ffe004 	addi	r3,r3,-128
  80b690:	003b6506 	br	80a428 <__alt_mem_onchip_mem+0xff78a428>
  80b694:	d9c01d85 	stb	r7,118(sp)
  80b698:	003ca006 	br	80a91c <__alt_mem_onchip_mem+0xff78a91c>
  80b69c:	d9c01d85 	stb	r7,118(sp)
  80b6a0:	003cad06 	br	80a958 <__alt_mem_onchip_mem+0xff78a958>
  80b6a4:	d9c01d85 	stb	r7,118(sp)
  80b6a8:	003d7d06 	br	80aca0 <__alt_mem_onchip_mem+0xff78aca0>
  80b6ac:	d9c01d85 	stb	r7,118(sp)
  80b6b0:	003d5f06 	br	80ac30 <__alt_mem_onchip_mem+0xff78ac30>
  80b6b4:	a080004c 	andi	r2,r20,1
  80b6b8:	0039883a 	mov	fp,zero
  80b6bc:	10000526 	beq	r2,zero,80b6d4 <___vfiprintf_internal_r+0x1428>
  80b6c0:	00800c04 	movi	r2,48
  80b6c4:	d88019c5 	stb	r2,103(sp)
  80b6c8:	dcc02717 	ldw	r19,156(sp)
  80b6cc:	dd4019c4 	addi	r21,sp,103
  80b6d0:	003bf606 	br	80a6ac <__alt_mem_onchip_mem+0xff78a6ac>
  80b6d4:	0027883a 	mov	r19,zero
  80b6d8:	dd401a04 	addi	r21,sp,104
  80b6dc:	003bf306 	br	80a6ac <__alt_mem_onchip_mem+0xff78a6ac>
  80b6e0:	d9c01d85 	stb	r7,118(sp)
  80b6e4:	003dc806 	br	80ae08 <__alt_mem_onchip_mem+0xff78ae08>
  80b6e8:	d9c01d85 	stb	r7,118(sp)
  80b6ec:	003d3a06 	br	80abd8 <__alt_mem_onchip_mem+0xff78abd8>
  80b6f0:	d9c01d85 	stb	r7,118(sp)
  80b6f4:	003d2a06 	br	80aba0 <__alt_mem_onchip_mem+0xff78aba0>
  80b6f8:	d9c01d85 	stb	r7,118(sp)
  80b6fc:	003cde06 	br	80aa78 <__alt_mem_onchip_mem+0xff78aa78>
  80b700:	d9c01d85 	stb	r7,118(sp)
  80b704:	003cbc06 	br	80a9f8 <__alt_mem_onchip_mem+0xff78a9f8>

0080b708 <__vfiprintf_internal>:
  80b708:	00802074 	movhi	r2,129
  80b70c:	10957804 	addi	r2,r2,21984
  80b710:	300f883a 	mov	r7,r6
  80b714:	280d883a 	mov	r6,r5
  80b718:	200b883a 	mov	r5,r4
  80b71c:	11000017 	ldw	r4,0(r2)
  80b720:	080a2ac1 	jmpi	80a2ac <___vfiprintf_internal_r>

0080b724 <__sbprintf>:
  80b724:	2880030b 	ldhu	r2,12(r5)
  80b728:	2ac01917 	ldw	r11,100(r5)
  80b72c:	2a80038b 	ldhu	r10,14(r5)
  80b730:	2a400717 	ldw	r9,28(r5)
  80b734:	2a000917 	ldw	r8,36(r5)
  80b738:	defee204 	addi	sp,sp,-1144
  80b73c:	00c10004 	movi	r3,1024
  80b740:	dc011a15 	stw	r16,1128(sp)
  80b744:	10bfff4c 	andi	r2,r2,65533
  80b748:	2821883a 	mov	r16,r5
  80b74c:	d8cb883a 	add	r5,sp,r3
  80b750:	dc811c15 	stw	r18,1136(sp)
  80b754:	dc411b15 	stw	r17,1132(sp)
  80b758:	dfc11d15 	stw	ra,1140(sp)
  80b75c:	2025883a 	mov	r18,r4
  80b760:	d881030d 	sth	r2,1036(sp)
  80b764:	dac11915 	stw	r11,1124(sp)
  80b768:	da81038d 	sth	r10,1038(sp)
  80b76c:	da410715 	stw	r9,1052(sp)
  80b770:	da010915 	stw	r8,1060(sp)
  80b774:	dec10015 	stw	sp,1024(sp)
  80b778:	dec10415 	stw	sp,1040(sp)
  80b77c:	d8c10215 	stw	r3,1032(sp)
  80b780:	d8c10515 	stw	r3,1044(sp)
  80b784:	d8010615 	stw	zero,1048(sp)
  80b788:	080a2ac0 	call	80a2ac <___vfiprintf_internal_r>
  80b78c:	1023883a 	mov	r17,r2
  80b790:	10000416 	blt	r2,zero,80b7a4 <__sbprintf+0x80>
  80b794:	d9410004 	addi	r5,sp,1024
  80b798:	9009883a 	mov	r4,r18
  80b79c:	0807ab00 	call	807ab0 <_fflush_r>
  80b7a0:	10000d1e 	bne	r2,zero,80b7d8 <__sbprintf+0xb4>
  80b7a4:	d881030b 	ldhu	r2,1036(sp)
  80b7a8:	1080100c 	andi	r2,r2,64
  80b7ac:	10000326 	beq	r2,zero,80b7bc <__sbprintf+0x98>
  80b7b0:	8080030b 	ldhu	r2,12(r16)
  80b7b4:	10801014 	ori	r2,r2,64
  80b7b8:	8080030d 	sth	r2,12(r16)
  80b7bc:	8805883a 	mov	r2,r17
  80b7c0:	dfc11d17 	ldw	ra,1140(sp)
  80b7c4:	dc811c17 	ldw	r18,1136(sp)
  80b7c8:	dc411b17 	ldw	r17,1132(sp)
  80b7cc:	dc011a17 	ldw	r16,1128(sp)
  80b7d0:	dec11e04 	addi	sp,sp,1144
  80b7d4:	f800283a 	ret
  80b7d8:	047fffc4 	movi	r17,-1
  80b7dc:	003ff106 	br	80b7a4 <__alt_mem_onchip_mem+0xff78b7a4>

0080b7e0 <_calloc_r>:
  80b7e0:	298b383a 	mul	r5,r5,r6
  80b7e4:	defffe04 	addi	sp,sp,-8
  80b7e8:	dfc00115 	stw	ra,4(sp)
  80b7ec:	dc000015 	stw	r16,0(sp)
  80b7f0:	08026380 	call	802638 <_malloc_r>
  80b7f4:	10002926 	beq	r2,zero,80b89c <_calloc_r+0xbc>
  80b7f8:	11bfff17 	ldw	r6,-4(r2)
  80b7fc:	1021883a 	mov	r16,r2
  80b800:	00bfff04 	movi	r2,-4
  80b804:	308c703a 	and	r6,r6,r2
  80b808:	00c00904 	movi	r3,36
  80b80c:	308d883a 	add	r6,r6,r2
  80b810:	19801636 	bltu	r3,r6,80b86c <_calloc_r+0x8c>
  80b814:	008004c4 	movi	r2,19
  80b818:	11800b2e 	bgeu	r2,r6,80b848 <_calloc_r+0x68>
  80b81c:	80000015 	stw	zero,0(r16)
  80b820:	80000115 	stw	zero,4(r16)
  80b824:	008006c4 	movi	r2,27
  80b828:	11801a2e 	bgeu	r2,r6,80b894 <_calloc_r+0xb4>
  80b82c:	80000215 	stw	zero,8(r16)
  80b830:	80000315 	stw	zero,12(r16)
  80b834:	30c0151e 	bne	r6,r3,80b88c <_calloc_r+0xac>
  80b838:	80000415 	stw	zero,16(r16)
  80b83c:	80800604 	addi	r2,r16,24
  80b840:	80000515 	stw	zero,20(r16)
  80b844:	00000106 	br	80b84c <_calloc_r+0x6c>
  80b848:	8005883a 	mov	r2,r16
  80b84c:	10000015 	stw	zero,0(r2)
  80b850:	10000115 	stw	zero,4(r2)
  80b854:	10000215 	stw	zero,8(r2)
  80b858:	8005883a 	mov	r2,r16
  80b85c:	dfc00117 	ldw	ra,4(sp)
  80b860:	dc000017 	ldw	r16,0(sp)
  80b864:	dec00204 	addi	sp,sp,8
  80b868:	f800283a 	ret
  80b86c:	000b883a 	mov	r5,zero
  80b870:	8009883a 	mov	r4,r16
  80b874:	0802e440 	call	802e44 <memset>
  80b878:	8005883a 	mov	r2,r16
  80b87c:	dfc00117 	ldw	ra,4(sp)
  80b880:	dc000017 	ldw	r16,0(sp)
  80b884:	dec00204 	addi	sp,sp,8
  80b888:	f800283a 	ret
  80b88c:	80800404 	addi	r2,r16,16
  80b890:	003fee06 	br	80b84c <__alt_mem_onchip_mem+0xff78b84c>
  80b894:	80800204 	addi	r2,r16,8
  80b898:	003fec06 	br	80b84c <__alt_mem_onchip_mem+0xff78b84c>
  80b89c:	0005883a 	mov	r2,zero
  80b8a0:	003fee06 	br	80b85c <__alt_mem_onchip_mem+0xff78b85c>

0080b8a4 <__fputwc>:
  80b8a4:	defff804 	addi	sp,sp,-32
  80b8a8:	dcc00415 	stw	r19,16(sp)
  80b8ac:	dc800315 	stw	r18,12(sp)
  80b8b0:	dc000115 	stw	r16,4(sp)
  80b8b4:	dfc00715 	stw	ra,28(sp)
  80b8b8:	dd400615 	stw	r21,24(sp)
  80b8bc:	dd000515 	stw	r20,20(sp)
  80b8c0:	dc400215 	stw	r17,8(sp)
  80b8c4:	2027883a 	mov	r19,r4
  80b8c8:	2825883a 	mov	r18,r5
  80b8cc:	3021883a 	mov	r16,r6
  80b8d0:	08085b40 	call	8085b4 <__locale_mb_cur_max>
  80b8d4:	00c00044 	movi	r3,1
  80b8d8:	10c03e26 	beq	r2,r3,80b9d4 <__fputwc+0x130>
  80b8dc:	81c01704 	addi	r7,r16,92
  80b8e0:	900d883a 	mov	r6,r18
  80b8e4:	d80b883a 	mov	r5,sp
  80b8e8:	9809883a 	mov	r4,r19
  80b8ec:	080baac0 	call	80baac <_wcrtomb_r>
  80b8f0:	1029883a 	mov	r20,r2
  80b8f4:	00bfffc4 	movi	r2,-1
  80b8f8:	a0802026 	beq	r20,r2,80b97c <__fputwc+0xd8>
  80b8fc:	d9400003 	ldbu	r5,0(sp)
  80b900:	a0001c26 	beq	r20,zero,80b974 <__fputwc+0xd0>
  80b904:	0023883a 	mov	r17,zero
  80b908:	05400284 	movi	r21,10
  80b90c:	00000906 	br	80b934 <__fputwc+0x90>
  80b910:	80800017 	ldw	r2,0(r16)
  80b914:	11400005 	stb	r5,0(r2)
  80b918:	80c00017 	ldw	r3,0(r16)
  80b91c:	18c00044 	addi	r3,r3,1
  80b920:	80c00015 	stw	r3,0(r16)
  80b924:	8c400044 	addi	r17,r17,1
  80b928:	dc45883a 	add	r2,sp,r17
  80b92c:	8d00112e 	bgeu	r17,r20,80b974 <__fputwc+0xd0>
  80b930:	11400003 	ldbu	r5,0(r2)
  80b934:	80c00217 	ldw	r3,8(r16)
  80b938:	18ffffc4 	addi	r3,r3,-1
  80b93c:	80c00215 	stw	r3,8(r16)
  80b940:	183ff30e 	bge	r3,zero,80b910 <__alt_mem_onchip_mem+0xff78b910>
  80b944:	80800617 	ldw	r2,24(r16)
  80b948:	18801916 	blt	r3,r2,80b9b0 <__fputwc+0x10c>
  80b94c:	80800017 	ldw	r2,0(r16)
  80b950:	11400005 	stb	r5,0(r2)
  80b954:	80800017 	ldw	r2,0(r16)
  80b958:	10c00003 	ldbu	r3,0(r2)
  80b95c:	10800044 	addi	r2,r2,1
  80b960:	1d402326 	beq	r3,r21,80b9f0 <__fputwc+0x14c>
  80b964:	80800015 	stw	r2,0(r16)
  80b968:	8c400044 	addi	r17,r17,1
  80b96c:	dc45883a 	add	r2,sp,r17
  80b970:	8d3fef36 	bltu	r17,r20,80b930 <__alt_mem_onchip_mem+0xff78b930>
  80b974:	9005883a 	mov	r2,r18
  80b978:	00000406 	br	80b98c <__fputwc+0xe8>
  80b97c:	80c0030b 	ldhu	r3,12(r16)
  80b980:	a005883a 	mov	r2,r20
  80b984:	18c01014 	ori	r3,r3,64
  80b988:	80c0030d 	sth	r3,12(r16)
  80b98c:	dfc00717 	ldw	ra,28(sp)
  80b990:	dd400617 	ldw	r21,24(sp)
  80b994:	dd000517 	ldw	r20,20(sp)
  80b998:	dcc00417 	ldw	r19,16(sp)
  80b99c:	dc800317 	ldw	r18,12(sp)
  80b9a0:	dc400217 	ldw	r17,8(sp)
  80b9a4:	dc000117 	ldw	r16,4(sp)
  80b9a8:	dec00804 	addi	sp,sp,32
  80b9ac:	f800283a 	ret
  80b9b0:	800d883a 	mov	r6,r16
  80b9b4:	29403fcc 	andi	r5,r5,255
  80b9b8:	9809883a 	mov	r4,r19
  80b9bc:	0805ba80 	call	805ba8 <__swbuf_r>
  80b9c0:	10bfffe0 	cmpeqi	r2,r2,-1
  80b9c4:	10803fcc 	andi	r2,r2,255
  80b9c8:	103fd626 	beq	r2,zero,80b924 <__alt_mem_onchip_mem+0xff78b924>
  80b9cc:	00bfffc4 	movi	r2,-1
  80b9d0:	003fee06 	br	80b98c <__alt_mem_onchip_mem+0xff78b98c>
  80b9d4:	90ffffc4 	addi	r3,r18,-1
  80b9d8:	01003f84 	movi	r4,254
  80b9dc:	20ffbf36 	bltu	r4,r3,80b8dc <__alt_mem_onchip_mem+0xff78b8dc>
  80b9e0:	900b883a 	mov	r5,r18
  80b9e4:	dc800005 	stb	r18,0(sp)
  80b9e8:	1029883a 	mov	r20,r2
  80b9ec:	003fc506 	br	80b904 <__alt_mem_onchip_mem+0xff78b904>
  80b9f0:	800d883a 	mov	r6,r16
  80b9f4:	a80b883a 	mov	r5,r21
  80b9f8:	9809883a 	mov	r4,r19
  80b9fc:	0805ba80 	call	805ba8 <__swbuf_r>
  80ba00:	10bfffe0 	cmpeqi	r2,r2,-1
  80ba04:	003fef06 	br	80b9c4 <__alt_mem_onchip_mem+0xff78b9c4>

0080ba08 <_fputwc_r>:
  80ba08:	3080030b 	ldhu	r2,12(r6)
  80ba0c:	10c8000c 	andi	r3,r2,8192
  80ba10:	1800051e 	bne	r3,zero,80ba28 <_fputwc_r+0x20>
  80ba14:	30c01917 	ldw	r3,100(r6)
  80ba18:	10880014 	ori	r2,r2,8192
  80ba1c:	3080030d 	sth	r2,12(r6)
  80ba20:	18880014 	ori	r2,r3,8192
  80ba24:	30801915 	stw	r2,100(r6)
  80ba28:	080b8a41 	jmpi	80b8a4 <__fputwc>

0080ba2c <fputwc>:
  80ba2c:	00802074 	movhi	r2,129
  80ba30:	defffc04 	addi	sp,sp,-16
  80ba34:	10957804 	addi	r2,r2,21984
  80ba38:	dc000115 	stw	r16,4(sp)
  80ba3c:	14000017 	ldw	r16,0(r2)
  80ba40:	dc400215 	stw	r17,8(sp)
  80ba44:	dfc00315 	stw	ra,12(sp)
  80ba48:	2023883a 	mov	r17,r4
  80ba4c:	80000226 	beq	r16,zero,80ba58 <fputwc+0x2c>
  80ba50:	80800e17 	ldw	r2,56(r16)
  80ba54:	10001026 	beq	r2,zero,80ba98 <fputwc+0x6c>
  80ba58:	2880030b 	ldhu	r2,12(r5)
  80ba5c:	10c8000c 	andi	r3,r2,8192
  80ba60:	1800051e 	bne	r3,zero,80ba78 <fputwc+0x4c>
  80ba64:	28c01917 	ldw	r3,100(r5)
  80ba68:	10880014 	ori	r2,r2,8192
  80ba6c:	2880030d 	sth	r2,12(r5)
  80ba70:	18880014 	ori	r2,r3,8192
  80ba74:	28801915 	stw	r2,100(r5)
  80ba78:	280d883a 	mov	r6,r5
  80ba7c:	8009883a 	mov	r4,r16
  80ba80:	880b883a 	mov	r5,r17
  80ba84:	dfc00317 	ldw	ra,12(sp)
  80ba88:	dc400217 	ldw	r17,8(sp)
  80ba8c:	dc000117 	ldw	r16,4(sp)
  80ba90:	dec00404 	addi	sp,sp,16
  80ba94:	080b8a41 	jmpi	80b8a4 <__fputwc>
  80ba98:	8009883a 	mov	r4,r16
  80ba9c:	d9400015 	stw	r5,0(sp)
  80baa0:	0801aa80 	call	801aa8 <__sinit>
  80baa4:	d9400017 	ldw	r5,0(sp)
  80baa8:	003feb06 	br	80ba58 <__alt_mem_onchip_mem+0xff78ba58>

0080baac <_wcrtomb_r>:
  80baac:	defff604 	addi	sp,sp,-40
  80bab0:	00802074 	movhi	r2,129
  80bab4:	dc800815 	stw	r18,32(sp)
  80bab8:	dc400715 	stw	r17,28(sp)
  80babc:	dc000615 	stw	r16,24(sp)
  80bac0:	10957d04 	addi	r2,r2,22004
  80bac4:	dfc00915 	stw	ra,36(sp)
  80bac8:	2021883a 	mov	r16,r4
  80bacc:	3823883a 	mov	r17,r7
  80bad0:	14800017 	ldw	r18,0(r2)
  80bad4:	28001426 	beq	r5,zero,80bb28 <_wcrtomb_r+0x7c>
  80bad8:	d9400415 	stw	r5,16(sp)
  80badc:	d9800515 	stw	r6,20(sp)
  80bae0:	08085a80 	call	8085a8 <__locale_charset>
  80bae4:	d9800517 	ldw	r6,20(sp)
  80bae8:	d9400417 	ldw	r5,16(sp)
  80baec:	100f883a 	mov	r7,r2
  80baf0:	dc400015 	stw	r17,0(sp)
  80baf4:	8009883a 	mov	r4,r16
  80baf8:	903ee83a 	callr	r18
  80bafc:	00ffffc4 	movi	r3,-1
  80bb00:	10c0031e 	bne	r2,r3,80bb10 <_wcrtomb_r+0x64>
  80bb04:	88000015 	stw	zero,0(r17)
  80bb08:	00c02284 	movi	r3,138
  80bb0c:	80c00015 	stw	r3,0(r16)
  80bb10:	dfc00917 	ldw	ra,36(sp)
  80bb14:	dc800817 	ldw	r18,32(sp)
  80bb18:	dc400717 	ldw	r17,28(sp)
  80bb1c:	dc000617 	ldw	r16,24(sp)
  80bb20:	dec00a04 	addi	sp,sp,40
  80bb24:	f800283a 	ret
  80bb28:	08085a80 	call	8085a8 <__locale_charset>
  80bb2c:	100f883a 	mov	r7,r2
  80bb30:	dc400015 	stw	r17,0(sp)
  80bb34:	000d883a 	mov	r6,zero
  80bb38:	d9400104 	addi	r5,sp,4
  80bb3c:	8009883a 	mov	r4,r16
  80bb40:	903ee83a 	callr	r18
  80bb44:	003fed06 	br	80bafc <__alt_mem_onchip_mem+0xff78bafc>

0080bb48 <wcrtomb>:
  80bb48:	defff604 	addi	sp,sp,-40
  80bb4c:	00802074 	movhi	r2,129
  80bb50:	dc800615 	stw	r18,24(sp)
  80bb54:	dc400515 	stw	r17,20(sp)
  80bb58:	10957804 	addi	r2,r2,21984
  80bb5c:	dfc00915 	stw	ra,36(sp)
  80bb60:	dd000815 	stw	r20,32(sp)
  80bb64:	dcc00715 	stw	r19,28(sp)
  80bb68:	dc000415 	stw	r16,16(sp)
  80bb6c:	3025883a 	mov	r18,r6
  80bb70:	14400017 	ldw	r17,0(r2)
  80bb74:	20001926 	beq	r4,zero,80bbdc <wcrtomb+0x94>
  80bb78:	00802074 	movhi	r2,129
  80bb7c:	10957d04 	addi	r2,r2,22004
  80bb80:	15000017 	ldw	r20,0(r2)
  80bb84:	2021883a 	mov	r16,r4
  80bb88:	2827883a 	mov	r19,r5
  80bb8c:	08085a80 	call	8085a8 <__locale_charset>
  80bb90:	100f883a 	mov	r7,r2
  80bb94:	dc800015 	stw	r18,0(sp)
  80bb98:	980d883a 	mov	r6,r19
  80bb9c:	800b883a 	mov	r5,r16
  80bba0:	8809883a 	mov	r4,r17
  80bba4:	a03ee83a 	callr	r20
  80bba8:	00ffffc4 	movi	r3,-1
  80bbac:	10c0031e 	bne	r2,r3,80bbbc <wcrtomb+0x74>
  80bbb0:	90000015 	stw	zero,0(r18)
  80bbb4:	00c02284 	movi	r3,138
  80bbb8:	88c00015 	stw	r3,0(r17)
  80bbbc:	dfc00917 	ldw	ra,36(sp)
  80bbc0:	dd000817 	ldw	r20,32(sp)
  80bbc4:	dcc00717 	ldw	r19,28(sp)
  80bbc8:	dc800617 	ldw	r18,24(sp)
  80bbcc:	dc400517 	ldw	r17,20(sp)
  80bbd0:	dc000417 	ldw	r16,16(sp)
  80bbd4:	dec00a04 	addi	sp,sp,40
  80bbd8:	f800283a 	ret
  80bbdc:	00802074 	movhi	r2,129
  80bbe0:	10957d04 	addi	r2,r2,22004
  80bbe4:	14000017 	ldw	r16,0(r2)
  80bbe8:	08085a80 	call	8085a8 <__locale_charset>
  80bbec:	100f883a 	mov	r7,r2
  80bbf0:	dc800015 	stw	r18,0(sp)
  80bbf4:	000d883a 	mov	r6,zero
  80bbf8:	d9400104 	addi	r5,sp,4
  80bbfc:	8809883a 	mov	r4,r17
  80bc00:	803ee83a 	callr	r16
  80bc04:	003fe806 	br	80bba8 <__alt_mem_onchip_mem+0xff78bba8>

0080bc08 <__ascii_wctomb>:
  80bc08:	28000526 	beq	r5,zero,80bc20 <__ascii_wctomb+0x18>
  80bc0c:	00803fc4 	movi	r2,255
  80bc10:	11800536 	bltu	r2,r6,80bc28 <__ascii_wctomb+0x20>
  80bc14:	29800005 	stb	r6,0(r5)
  80bc18:	00800044 	movi	r2,1
  80bc1c:	f800283a 	ret
  80bc20:	0005883a 	mov	r2,zero
  80bc24:	f800283a 	ret
  80bc28:	00802284 	movi	r2,138
  80bc2c:	20800015 	stw	r2,0(r4)
  80bc30:	00bfffc4 	movi	r2,-1
  80bc34:	f800283a 	ret

0080bc38 <_wctomb_r>:
  80bc38:	00802074 	movhi	r2,129
  80bc3c:	defff904 	addi	sp,sp,-28
  80bc40:	10957d04 	addi	r2,r2,22004
  80bc44:	dfc00615 	stw	ra,24(sp)
  80bc48:	dc400515 	stw	r17,20(sp)
  80bc4c:	dc000415 	stw	r16,16(sp)
  80bc50:	3823883a 	mov	r17,r7
  80bc54:	14000017 	ldw	r16,0(r2)
  80bc58:	d9000115 	stw	r4,4(sp)
  80bc5c:	d9400215 	stw	r5,8(sp)
  80bc60:	d9800315 	stw	r6,12(sp)
  80bc64:	08085a80 	call	8085a8 <__locale_charset>
  80bc68:	d9800317 	ldw	r6,12(sp)
  80bc6c:	d9400217 	ldw	r5,8(sp)
  80bc70:	d9000117 	ldw	r4,4(sp)
  80bc74:	100f883a 	mov	r7,r2
  80bc78:	dc400015 	stw	r17,0(sp)
  80bc7c:	803ee83a 	callr	r16
  80bc80:	dfc00617 	ldw	ra,24(sp)
  80bc84:	dc400517 	ldw	r17,20(sp)
  80bc88:	dc000417 	ldw	r16,16(sp)
  80bc8c:	dec00704 	addi	sp,sp,28
  80bc90:	f800283a 	ret

0080bc94 <__udivdi3>:
  80bc94:	defff504 	addi	sp,sp,-44
  80bc98:	dcc00415 	stw	r19,16(sp)
  80bc9c:	dc000115 	stw	r16,4(sp)
  80bca0:	dfc00a15 	stw	ra,40(sp)
  80bca4:	df000915 	stw	fp,36(sp)
  80bca8:	ddc00815 	stw	r23,32(sp)
  80bcac:	dd800715 	stw	r22,28(sp)
  80bcb0:	dd400615 	stw	r21,24(sp)
  80bcb4:	dd000515 	stw	r20,20(sp)
  80bcb8:	dc800315 	stw	r18,12(sp)
  80bcbc:	dc400215 	stw	r17,8(sp)
  80bcc0:	2027883a 	mov	r19,r4
  80bcc4:	2821883a 	mov	r16,r5
  80bcc8:	3800411e 	bne	r7,zero,80bdd0 <__udivdi3+0x13c>
  80bccc:	3023883a 	mov	r17,r6
  80bcd0:	2025883a 	mov	r18,r4
  80bcd4:	2980522e 	bgeu	r5,r6,80be20 <__udivdi3+0x18c>
  80bcd8:	00bfffd4 	movui	r2,65535
  80bcdc:	282d883a 	mov	r22,r5
  80bce0:	1180a836 	bltu	r2,r6,80bf84 <__udivdi3+0x2f0>
  80bce4:	00803fc4 	movi	r2,255
  80bce8:	1185803a 	cmpltu	r2,r2,r6
  80bcec:	100490fa 	slli	r2,r2,3
  80bcf0:	3086d83a 	srl	r3,r6,r2
  80bcf4:	01002074 	movhi	r4,129
  80bcf8:	210dfa04 	addi	r4,r4,14312
  80bcfc:	20c7883a 	add	r3,r4,r3
  80bd00:	18c00003 	ldbu	r3,0(r3)
  80bd04:	1885883a 	add	r2,r3,r2
  80bd08:	00c00804 	movi	r3,32
  80bd0c:	1887c83a 	sub	r3,r3,r2
  80bd10:	18000526 	beq	r3,zero,80bd28 <__udivdi3+0x94>
  80bd14:	80e0983a 	sll	r16,r16,r3
  80bd18:	9884d83a 	srl	r2,r19,r2
  80bd1c:	30e2983a 	sll	r17,r6,r3
  80bd20:	98e4983a 	sll	r18,r19,r3
  80bd24:	142cb03a 	or	r22,r2,r16
  80bd28:	882ad43a 	srli	r21,r17,16
  80bd2c:	b009883a 	mov	r4,r22
  80bd30:	8d3fffcc 	andi	r20,r17,65535
  80bd34:	a80b883a 	mov	r5,r21
  80bd38:	080c8a00 	call	80c8a0 <__umodsi3>
  80bd3c:	b009883a 	mov	r4,r22
  80bd40:	a80b883a 	mov	r5,r21
  80bd44:	1027883a 	mov	r19,r2
  80bd48:	080c83c0 	call	80c83c <__udivsi3>
  80bd4c:	102d883a 	mov	r22,r2
  80bd50:	9826943a 	slli	r19,r19,16
  80bd54:	9004d43a 	srli	r2,r18,16
  80bd58:	a5a1383a 	mul	r16,r20,r22
  80bd5c:	14c4b03a 	or	r2,r2,r19
  80bd60:	1400052e 	bgeu	r2,r16,80bd78 <__udivdi3+0xe4>
  80bd64:	1445883a 	add	r2,r2,r17
  80bd68:	b0ffffc4 	addi	r3,r22,-1
  80bd6c:	14400136 	bltu	r2,r17,80bd74 <__udivdi3+0xe0>
  80bd70:	14012336 	bltu	r2,r16,80c200 <__udivdi3+0x56c>
  80bd74:	182d883a 	mov	r22,r3
  80bd78:	1421c83a 	sub	r16,r2,r16
  80bd7c:	a80b883a 	mov	r5,r21
  80bd80:	8009883a 	mov	r4,r16
  80bd84:	080c8a00 	call	80c8a0 <__umodsi3>
  80bd88:	1027883a 	mov	r19,r2
  80bd8c:	a80b883a 	mov	r5,r21
  80bd90:	8009883a 	mov	r4,r16
  80bd94:	080c83c0 	call	80c83c <__udivsi3>
  80bd98:	9826943a 	slli	r19,r19,16
  80bd9c:	a0a9383a 	mul	r20,r20,r2
  80bda0:	94bfffcc 	andi	r18,r18,65535
  80bda4:	94e4b03a 	or	r18,r18,r19
  80bda8:	9500052e 	bgeu	r18,r20,80bdc0 <__udivdi3+0x12c>
  80bdac:	8ca5883a 	add	r18,r17,r18
  80bdb0:	10ffffc4 	addi	r3,r2,-1
  80bdb4:	9440f136 	bltu	r18,r17,80c17c <__udivdi3+0x4e8>
  80bdb8:	9500f02e 	bgeu	r18,r20,80c17c <__udivdi3+0x4e8>
  80bdbc:	10bfff84 	addi	r2,r2,-2
  80bdc0:	b00c943a 	slli	r6,r22,16
  80bdc4:	0007883a 	mov	r3,zero
  80bdc8:	3084b03a 	or	r2,r6,r2
  80bdcc:	00005906 	br	80bf34 <__udivdi3+0x2a0>
  80bdd0:	29c05636 	bltu	r5,r7,80bf2c <__udivdi3+0x298>
  80bdd4:	00bfffd4 	movui	r2,65535
  80bdd8:	11c0622e 	bgeu	r2,r7,80bf64 <__udivdi3+0x2d0>
  80bddc:	00804034 	movhi	r2,256
  80bde0:	10bfffc4 	addi	r2,r2,-1
  80bde4:	11c0ee36 	bltu	r2,r7,80c1a0 <__udivdi3+0x50c>
  80bde8:	00800404 	movi	r2,16
  80bdec:	3886d83a 	srl	r3,r7,r2
  80bdf0:	01002074 	movhi	r4,129
  80bdf4:	210dfa04 	addi	r4,r4,14312
  80bdf8:	20c7883a 	add	r3,r4,r3
  80bdfc:	18c00003 	ldbu	r3,0(r3)
  80be00:	05400804 	movi	r21,32
  80be04:	1885883a 	add	r2,r3,r2
  80be08:	a8abc83a 	sub	r21,r21,r2
  80be0c:	a800621e 	bne	r21,zero,80bf98 <__udivdi3+0x304>
  80be10:	3c00e936 	bltu	r7,r16,80c1b8 <__udivdi3+0x524>
  80be14:	9985403a 	cmpgeu	r2,r19,r6
  80be18:	0007883a 	mov	r3,zero
  80be1c:	00004506 	br	80bf34 <__udivdi3+0x2a0>
  80be20:	3000041e 	bne	r6,zero,80be34 <__udivdi3+0x1a0>
  80be24:	000b883a 	mov	r5,zero
  80be28:	01000044 	movi	r4,1
  80be2c:	080c83c0 	call	80c83c <__udivsi3>
  80be30:	1023883a 	mov	r17,r2
  80be34:	00bfffd4 	movui	r2,65535
  80be38:	14404e2e 	bgeu	r2,r17,80bf74 <__udivdi3+0x2e0>
  80be3c:	00804034 	movhi	r2,256
  80be40:	10bfffc4 	addi	r2,r2,-1
  80be44:	1440d836 	bltu	r2,r17,80c1a8 <__udivdi3+0x514>
  80be48:	00800404 	movi	r2,16
  80be4c:	8886d83a 	srl	r3,r17,r2
  80be50:	01002074 	movhi	r4,129
  80be54:	210dfa04 	addi	r4,r4,14312
  80be58:	20c7883a 	add	r3,r4,r3
  80be5c:	18c00003 	ldbu	r3,0(r3)
  80be60:	1885883a 	add	r2,r3,r2
  80be64:	00c00804 	movi	r3,32
  80be68:	1887c83a 	sub	r3,r3,r2
  80be6c:	18008f1e 	bne	r3,zero,80c0ac <__udivdi3+0x418>
  80be70:	882ad43a 	srli	r21,r17,16
  80be74:	8461c83a 	sub	r16,r16,r17
  80be78:	8d3fffcc 	andi	r20,r17,65535
  80be7c:	00c00044 	movi	r3,1
  80be80:	8009883a 	mov	r4,r16
  80be84:	a80b883a 	mov	r5,r21
  80be88:	d8c00015 	stw	r3,0(sp)
  80be8c:	080c8a00 	call	80c8a0 <__umodsi3>
  80be90:	8009883a 	mov	r4,r16
  80be94:	a80b883a 	mov	r5,r21
  80be98:	1027883a 	mov	r19,r2
  80be9c:	080c83c0 	call	80c83c <__udivsi3>
  80bea0:	9826943a 	slli	r19,r19,16
  80bea4:	9008d43a 	srli	r4,r18,16
  80bea8:	1521383a 	mul	r16,r2,r20
  80beac:	102d883a 	mov	r22,r2
  80beb0:	24c8b03a 	or	r4,r4,r19
  80beb4:	d8c00017 	ldw	r3,0(sp)
  80beb8:	2400052e 	bgeu	r4,r16,80bed0 <__udivdi3+0x23c>
  80bebc:	2449883a 	add	r4,r4,r17
  80bec0:	b0bfffc4 	addi	r2,r22,-1
  80bec4:	24400136 	bltu	r4,r17,80becc <__udivdi3+0x238>
  80bec8:	2400ca36 	bltu	r4,r16,80c1f4 <__udivdi3+0x560>
  80becc:	102d883a 	mov	r22,r2
  80bed0:	2421c83a 	sub	r16,r4,r16
  80bed4:	a80b883a 	mov	r5,r21
  80bed8:	8009883a 	mov	r4,r16
  80bedc:	d8c00015 	stw	r3,0(sp)
  80bee0:	080c8a00 	call	80c8a0 <__umodsi3>
  80bee4:	1027883a 	mov	r19,r2
  80bee8:	a80b883a 	mov	r5,r21
  80beec:	8009883a 	mov	r4,r16
  80bef0:	080c83c0 	call	80c83c <__udivsi3>
  80bef4:	9826943a 	slli	r19,r19,16
  80bef8:	1529383a 	mul	r20,r2,r20
  80befc:	94bfffcc 	andi	r18,r18,65535
  80bf00:	94e4b03a 	or	r18,r18,r19
  80bf04:	d8c00017 	ldw	r3,0(sp)
  80bf08:	9500052e 	bgeu	r18,r20,80bf20 <__udivdi3+0x28c>
  80bf0c:	8ca5883a 	add	r18,r17,r18
  80bf10:	113fffc4 	addi	r4,r2,-1
  80bf14:	94409736 	bltu	r18,r17,80c174 <__udivdi3+0x4e0>
  80bf18:	9500962e 	bgeu	r18,r20,80c174 <__udivdi3+0x4e0>
  80bf1c:	10bfff84 	addi	r2,r2,-2
  80bf20:	b00c943a 	slli	r6,r22,16
  80bf24:	3084b03a 	or	r2,r6,r2
  80bf28:	00000206 	br	80bf34 <__udivdi3+0x2a0>
  80bf2c:	0007883a 	mov	r3,zero
  80bf30:	0005883a 	mov	r2,zero
  80bf34:	dfc00a17 	ldw	ra,40(sp)
  80bf38:	df000917 	ldw	fp,36(sp)
  80bf3c:	ddc00817 	ldw	r23,32(sp)
  80bf40:	dd800717 	ldw	r22,28(sp)
  80bf44:	dd400617 	ldw	r21,24(sp)
  80bf48:	dd000517 	ldw	r20,20(sp)
  80bf4c:	dcc00417 	ldw	r19,16(sp)
  80bf50:	dc800317 	ldw	r18,12(sp)
  80bf54:	dc400217 	ldw	r17,8(sp)
  80bf58:	dc000117 	ldw	r16,4(sp)
  80bf5c:	dec00b04 	addi	sp,sp,44
  80bf60:	f800283a 	ret
  80bf64:	00803fc4 	movi	r2,255
  80bf68:	11c5803a 	cmpltu	r2,r2,r7
  80bf6c:	100490fa 	slli	r2,r2,3
  80bf70:	003f9e06 	br	80bdec <__alt_mem_onchip_mem+0xff78bdec>
  80bf74:	00803fc4 	movi	r2,255
  80bf78:	1445803a 	cmpltu	r2,r2,r17
  80bf7c:	100490fa 	slli	r2,r2,3
  80bf80:	003fb206 	br	80be4c <__alt_mem_onchip_mem+0xff78be4c>
  80bf84:	00804034 	movhi	r2,256
  80bf88:	10bfffc4 	addi	r2,r2,-1
  80bf8c:	11808836 	bltu	r2,r6,80c1b0 <__udivdi3+0x51c>
  80bf90:	00800404 	movi	r2,16
  80bf94:	003f5606 	br	80bcf0 <__alt_mem_onchip_mem+0xff78bcf0>
  80bf98:	30aed83a 	srl	r23,r6,r2
  80bf9c:	3d4e983a 	sll	r7,r7,r21
  80bfa0:	80acd83a 	srl	r22,r16,r2
  80bfa4:	9884d83a 	srl	r2,r19,r2
  80bfa8:	3deeb03a 	or	r23,r7,r23
  80bfac:	b824d43a 	srli	r18,r23,16
  80bfb0:	8560983a 	sll	r16,r16,r21
  80bfb4:	b009883a 	mov	r4,r22
  80bfb8:	900b883a 	mov	r5,r18
  80bfbc:	3568983a 	sll	r20,r6,r21
  80bfc0:	1420b03a 	or	r16,r2,r16
  80bfc4:	080c8a00 	call	80c8a0 <__umodsi3>
  80bfc8:	b009883a 	mov	r4,r22
  80bfcc:	900b883a 	mov	r5,r18
  80bfd0:	1023883a 	mov	r17,r2
  80bfd4:	080c83c0 	call	80c83c <__udivsi3>
  80bfd8:	8808943a 	slli	r4,r17,16
  80bfdc:	bf3fffcc 	andi	fp,r23,65535
  80bfe0:	8006d43a 	srli	r3,r16,16
  80bfe4:	e0a3383a 	mul	r17,fp,r2
  80bfe8:	100d883a 	mov	r6,r2
  80bfec:	1906b03a 	or	r3,r3,r4
  80bff0:	1c40042e 	bgeu	r3,r17,80c004 <__udivdi3+0x370>
  80bff4:	1dc7883a 	add	r3,r3,r23
  80bff8:	10bfffc4 	addi	r2,r2,-1
  80bffc:	1dc0752e 	bgeu	r3,r23,80c1d4 <__udivdi3+0x540>
  80c000:	100d883a 	mov	r6,r2
  80c004:	1c63c83a 	sub	r17,r3,r17
  80c008:	900b883a 	mov	r5,r18
  80c00c:	8809883a 	mov	r4,r17
  80c010:	d9800015 	stw	r6,0(sp)
  80c014:	080c8a00 	call	80c8a0 <__umodsi3>
  80c018:	102d883a 	mov	r22,r2
  80c01c:	8809883a 	mov	r4,r17
  80c020:	900b883a 	mov	r5,r18
  80c024:	080c83c0 	call	80c83c <__udivsi3>
  80c028:	b02c943a 	slli	r22,r22,16
  80c02c:	e089383a 	mul	r4,fp,r2
  80c030:	843fffcc 	andi	r16,r16,65535
  80c034:	85a0b03a 	or	r16,r16,r22
  80c038:	d9800017 	ldw	r6,0(sp)
  80c03c:	8100042e 	bgeu	r16,r4,80c050 <__udivdi3+0x3bc>
  80c040:	85e1883a 	add	r16,r16,r23
  80c044:	10ffffc4 	addi	r3,r2,-1
  80c048:	85c05e2e 	bgeu	r16,r23,80c1c4 <__udivdi3+0x530>
  80c04c:	1805883a 	mov	r2,r3
  80c050:	300c943a 	slli	r6,r6,16
  80c054:	a17fffcc 	andi	r5,r20,65535
  80c058:	a028d43a 	srli	r20,r20,16
  80c05c:	3084b03a 	or	r2,r6,r2
  80c060:	10ffffcc 	andi	r3,r2,65535
  80c064:	100cd43a 	srli	r6,r2,16
  80c068:	194f383a 	mul	r7,r3,r5
  80c06c:	1d07383a 	mul	r3,r3,r20
  80c070:	314b383a 	mul	r5,r6,r5
  80c074:	3810d43a 	srli	r8,r7,16
  80c078:	8121c83a 	sub	r16,r16,r4
  80c07c:	1947883a 	add	r3,r3,r5
  80c080:	40c7883a 	add	r3,r8,r3
  80c084:	350d383a 	mul	r6,r6,r20
  80c088:	1940022e 	bgeu	r3,r5,80c094 <__udivdi3+0x400>
  80c08c:	01000074 	movhi	r4,1
  80c090:	310d883a 	add	r6,r6,r4
  80c094:	1828d43a 	srli	r20,r3,16
  80c098:	a18d883a 	add	r6,r20,r6
  80c09c:	81803e36 	bltu	r16,r6,80c198 <__udivdi3+0x504>
  80c0a0:	81803826 	beq	r16,r6,80c184 <__udivdi3+0x4f0>
  80c0a4:	0007883a 	mov	r3,zero
  80c0a8:	003fa206 	br	80bf34 <__alt_mem_onchip_mem+0xff78bf34>
  80c0ac:	88e2983a 	sll	r17,r17,r3
  80c0b0:	80a8d83a 	srl	r20,r16,r2
  80c0b4:	80e0983a 	sll	r16,r16,r3
  80c0b8:	882ad43a 	srli	r21,r17,16
  80c0bc:	9884d83a 	srl	r2,r19,r2
  80c0c0:	a009883a 	mov	r4,r20
  80c0c4:	a80b883a 	mov	r5,r21
  80c0c8:	142eb03a 	or	r23,r2,r16
  80c0cc:	98e4983a 	sll	r18,r19,r3
  80c0d0:	080c8a00 	call	80c8a0 <__umodsi3>
  80c0d4:	a009883a 	mov	r4,r20
  80c0d8:	a80b883a 	mov	r5,r21
  80c0dc:	1021883a 	mov	r16,r2
  80c0e0:	080c83c0 	call	80c83c <__udivsi3>
  80c0e4:	1039883a 	mov	fp,r2
  80c0e8:	8d3fffcc 	andi	r20,r17,65535
  80c0ec:	8020943a 	slli	r16,r16,16
  80c0f0:	b804d43a 	srli	r2,r23,16
  80c0f4:	a72d383a 	mul	r22,r20,fp
  80c0f8:	1404b03a 	or	r2,r2,r16
  80c0fc:	1580062e 	bgeu	r2,r22,80c118 <__udivdi3+0x484>
  80c100:	1445883a 	add	r2,r2,r17
  80c104:	e0ffffc4 	addi	r3,fp,-1
  80c108:	14403836 	bltu	r2,r17,80c1ec <__udivdi3+0x558>
  80c10c:	1580372e 	bgeu	r2,r22,80c1ec <__udivdi3+0x558>
  80c110:	e73fff84 	addi	fp,fp,-2
  80c114:	1445883a 	add	r2,r2,r17
  80c118:	15adc83a 	sub	r22,r2,r22
  80c11c:	a80b883a 	mov	r5,r21
  80c120:	b009883a 	mov	r4,r22
  80c124:	080c8a00 	call	80c8a0 <__umodsi3>
  80c128:	1027883a 	mov	r19,r2
  80c12c:	b009883a 	mov	r4,r22
  80c130:	a80b883a 	mov	r5,r21
  80c134:	080c83c0 	call	80c83c <__udivsi3>
  80c138:	9826943a 	slli	r19,r19,16
  80c13c:	a0a1383a 	mul	r16,r20,r2
  80c140:	b93fffcc 	andi	r4,r23,65535
  80c144:	24c8b03a 	or	r4,r4,r19
  80c148:	2400062e 	bgeu	r4,r16,80c164 <__udivdi3+0x4d0>
  80c14c:	2449883a 	add	r4,r4,r17
  80c150:	10ffffc4 	addi	r3,r2,-1
  80c154:	24402336 	bltu	r4,r17,80c1e4 <__udivdi3+0x550>
  80c158:	2400222e 	bgeu	r4,r16,80c1e4 <__udivdi3+0x550>
  80c15c:	10bfff84 	addi	r2,r2,-2
  80c160:	2449883a 	add	r4,r4,r17
  80c164:	e038943a 	slli	fp,fp,16
  80c168:	2421c83a 	sub	r16,r4,r16
  80c16c:	e086b03a 	or	r3,fp,r2
  80c170:	003f4306 	br	80be80 <__alt_mem_onchip_mem+0xff78be80>
  80c174:	2005883a 	mov	r2,r4
  80c178:	003f6906 	br	80bf20 <__alt_mem_onchip_mem+0xff78bf20>
  80c17c:	1805883a 	mov	r2,r3
  80c180:	003f0f06 	br	80bdc0 <__alt_mem_onchip_mem+0xff78bdc0>
  80c184:	1806943a 	slli	r3,r3,16
  80c188:	9d66983a 	sll	r19,r19,r21
  80c18c:	39ffffcc 	andi	r7,r7,65535
  80c190:	19c7883a 	add	r3,r3,r7
  80c194:	98ffc32e 	bgeu	r19,r3,80c0a4 <__alt_mem_onchip_mem+0xff78c0a4>
  80c198:	10bfffc4 	addi	r2,r2,-1
  80c19c:	003fc106 	br	80c0a4 <__alt_mem_onchip_mem+0xff78c0a4>
  80c1a0:	00800604 	movi	r2,24
  80c1a4:	003f1106 	br	80bdec <__alt_mem_onchip_mem+0xff78bdec>
  80c1a8:	00800604 	movi	r2,24
  80c1ac:	003f2706 	br	80be4c <__alt_mem_onchip_mem+0xff78be4c>
  80c1b0:	00800604 	movi	r2,24
  80c1b4:	003ece06 	br	80bcf0 <__alt_mem_onchip_mem+0xff78bcf0>
  80c1b8:	0007883a 	mov	r3,zero
  80c1bc:	00800044 	movi	r2,1
  80c1c0:	003f5c06 	br	80bf34 <__alt_mem_onchip_mem+0xff78bf34>
  80c1c4:	813fa12e 	bgeu	r16,r4,80c04c <__alt_mem_onchip_mem+0xff78c04c>
  80c1c8:	10bfff84 	addi	r2,r2,-2
  80c1cc:	85e1883a 	add	r16,r16,r23
  80c1d0:	003f9f06 	br	80c050 <__alt_mem_onchip_mem+0xff78c050>
  80c1d4:	1c7f8a2e 	bgeu	r3,r17,80c000 <__alt_mem_onchip_mem+0xff78c000>
  80c1d8:	31bfff84 	addi	r6,r6,-2
  80c1dc:	1dc7883a 	add	r3,r3,r23
  80c1e0:	003f8806 	br	80c004 <__alt_mem_onchip_mem+0xff78c004>
  80c1e4:	1805883a 	mov	r2,r3
  80c1e8:	003fde06 	br	80c164 <__alt_mem_onchip_mem+0xff78c164>
  80c1ec:	1839883a 	mov	fp,r3
  80c1f0:	003fc906 	br	80c118 <__alt_mem_onchip_mem+0xff78c118>
  80c1f4:	b5bfff84 	addi	r22,r22,-2
  80c1f8:	2449883a 	add	r4,r4,r17
  80c1fc:	003f3406 	br	80bed0 <__alt_mem_onchip_mem+0xff78bed0>
  80c200:	b5bfff84 	addi	r22,r22,-2
  80c204:	1445883a 	add	r2,r2,r17
  80c208:	003edb06 	br	80bd78 <__alt_mem_onchip_mem+0xff78bd78>

0080c20c <__umoddi3>:
  80c20c:	defff404 	addi	sp,sp,-48
  80c210:	df000a15 	stw	fp,40(sp)
  80c214:	dc400315 	stw	r17,12(sp)
  80c218:	dc000215 	stw	r16,8(sp)
  80c21c:	dfc00b15 	stw	ra,44(sp)
  80c220:	ddc00915 	stw	r23,36(sp)
  80c224:	dd800815 	stw	r22,32(sp)
  80c228:	dd400715 	stw	r21,28(sp)
  80c22c:	dd000615 	stw	r20,24(sp)
  80c230:	dcc00515 	stw	r19,20(sp)
  80c234:	dc800415 	stw	r18,16(sp)
  80c238:	2021883a 	mov	r16,r4
  80c23c:	2823883a 	mov	r17,r5
  80c240:	2839883a 	mov	fp,r5
  80c244:	38003c1e 	bne	r7,zero,80c338 <__umoddi3+0x12c>
  80c248:	3027883a 	mov	r19,r6
  80c24c:	2029883a 	mov	r20,r4
  80c250:	2980512e 	bgeu	r5,r6,80c398 <__umoddi3+0x18c>
  80c254:	00bfffd4 	movui	r2,65535
  80c258:	11809a36 	bltu	r2,r6,80c4c4 <__umoddi3+0x2b8>
  80c25c:	01003fc4 	movi	r4,255
  80c260:	2189803a 	cmpltu	r4,r4,r6
  80c264:	200890fa 	slli	r4,r4,3
  80c268:	3104d83a 	srl	r2,r6,r4
  80c26c:	00c02074 	movhi	r3,129
  80c270:	18cdfa04 	addi	r3,r3,14312
  80c274:	1885883a 	add	r2,r3,r2
  80c278:	10c00003 	ldbu	r3,0(r2)
  80c27c:	00800804 	movi	r2,32
  80c280:	1909883a 	add	r4,r3,r4
  80c284:	1125c83a 	sub	r18,r2,r4
  80c288:	90000526 	beq	r18,zero,80c2a0 <__umoddi3+0x94>
  80c28c:	8ca2983a 	sll	r17,r17,r18
  80c290:	8108d83a 	srl	r4,r16,r4
  80c294:	34a6983a 	sll	r19,r6,r18
  80c298:	84a8983a 	sll	r20,r16,r18
  80c29c:	2478b03a 	or	fp,r4,r17
  80c2a0:	982ed43a 	srli	r23,r19,16
  80c2a4:	e009883a 	mov	r4,fp
  80c2a8:	9dbfffcc 	andi	r22,r19,65535
  80c2ac:	b80b883a 	mov	r5,r23
  80c2b0:	080c8a00 	call	80c8a0 <__umodsi3>
  80c2b4:	e009883a 	mov	r4,fp
  80c2b8:	b80b883a 	mov	r5,r23
  80c2bc:	102b883a 	mov	r21,r2
  80c2c0:	080c83c0 	call	80c83c <__udivsi3>
  80c2c4:	a806943a 	slli	r3,r21,16
  80c2c8:	a008d43a 	srli	r4,r20,16
  80c2cc:	b085383a 	mul	r2,r22,r2
  80c2d0:	20c8b03a 	or	r4,r4,r3
  80c2d4:	2080032e 	bgeu	r4,r2,80c2e4 <__umoddi3+0xd8>
  80c2d8:	24c9883a 	add	r4,r4,r19
  80c2dc:	24c00136 	bltu	r4,r19,80c2e4 <__umoddi3+0xd8>
  80c2e0:	20811036 	bltu	r4,r2,80c724 <__umoddi3+0x518>
  80c2e4:	20abc83a 	sub	r21,r4,r2
  80c2e8:	b80b883a 	mov	r5,r23
  80c2ec:	a809883a 	mov	r4,r21
  80c2f0:	080c8a00 	call	80c8a0 <__umodsi3>
  80c2f4:	1023883a 	mov	r17,r2
  80c2f8:	b80b883a 	mov	r5,r23
  80c2fc:	a809883a 	mov	r4,r21
  80c300:	080c83c0 	call	80c83c <__udivsi3>
  80c304:	8822943a 	slli	r17,r17,16
  80c308:	b085383a 	mul	r2,r22,r2
  80c30c:	a0ffffcc 	andi	r3,r20,65535
  80c310:	1c46b03a 	or	r3,r3,r17
  80c314:	1880042e 	bgeu	r3,r2,80c328 <__umoddi3+0x11c>
  80c318:	1cc7883a 	add	r3,r3,r19
  80c31c:	1cc00236 	bltu	r3,r19,80c328 <__umoddi3+0x11c>
  80c320:	1880012e 	bgeu	r3,r2,80c328 <__umoddi3+0x11c>
  80c324:	1cc7883a 	add	r3,r3,r19
  80c328:	1885c83a 	sub	r2,r3,r2
  80c32c:	1484d83a 	srl	r2,r2,r18
  80c330:	0007883a 	mov	r3,zero
  80c334:	00004f06 	br	80c474 <__umoddi3+0x268>
  80c338:	29c04c36 	bltu	r5,r7,80c46c <__umoddi3+0x260>
  80c33c:	00bfffd4 	movui	r2,65535
  80c340:	11c0582e 	bgeu	r2,r7,80c4a4 <__umoddi3+0x298>
  80c344:	00804034 	movhi	r2,256
  80c348:	10bfffc4 	addi	r2,r2,-1
  80c34c:	11c0e736 	bltu	r2,r7,80c6ec <__umoddi3+0x4e0>
  80c350:	01000404 	movi	r4,16
  80c354:	3904d83a 	srl	r2,r7,r4
  80c358:	00c02074 	movhi	r3,129
  80c35c:	18cdfa04 	addi	r3,r3,14312
  80c360:	1885883a 	add	r2,r3,r2
  80c364:	14c00003 	ldbu	r19,0(r2)
  80c368:	00c00804 	movi	r3,32
  80c36c:	9927883a 	add	r19,r19,r4
  80c370:	1ce9c83a 	sub	r20,r3,r19
  80c374:	a000581e 	bne	r20,zero,80c4d8 <__umoddi3+0x2cc>
  80c378:	3c400136 	bltu	r7,r17,80c380 <__umoddi3+0x174>
  80c37c:	8180eb36 	bltu	r16,r6,80c72c <__umoddi3+0x520>
  80c380:	8185c83a 	sub	r2,r16,r6
  80c384:	89e3c83a 	sub	r17,r17,r7
  80c388:	8089803a 	cmpltu	r4,r16,r2
  80c38c:	8939c83a 	sub	fp,r17,r4
  80c390:	e007883a 	mov	r3,fp
  80c394:	00003706 	br	80c474 <__umoddi3+0x268>
  80c398:	3000041e 	bne	r6,zero,80c3ac <__umoddi3+0x1a0>
  80c39c:	000b883a 	mov	r5,zero
  80c3a0:	01000044 	movi	r4,1
  80c3a4:	080c83c0 	call	80c83c <__udivsi3>
  80c3a8:	1027883a 	mov	r19,r2
  80c3ac:	00bfffd4 	movui	r2,65535
  80c3b0:	14c0402e 	bgeu	r2,r19,80c4b4 <__umoddi3+0x2a8>
  80c3b4:	00804034 	movhi	r2,256
  80c3b8:	10bfffc4 	addi	r2,r2,-1
  80c3bc:	14c0cd36 	bltu	r2,r19,80c6f4 <__umoddi3+0x4e8>
  80c3c0:	00800404 	movi	r2,16
  80c3c4:	9886d83a 	srl	r3,r19,r2
  80c3c8:	01002074 	movhi	r4,129
  80c3cc:	210dfa04 	addi	r4,r4,14312
  80c3d0:	20c7883a 	add	r3,r4,r3
  80c3d4:	18c00003 	ldbu	r3,0(r3)
  80c3d8:	1887883a 	add	r3,r3,r2
  80c3dc:	00800804 	movi	r2,32
  80c3e0:	10e5c83a 	sub	r18,r2,r3
  80c3e4:	9000901e 	bne	r18,zero,80c628 <__umoddi3+0x41c>
  80c3e8:	982cd43a 	srli	r22,r19,16
  80c3ec:	8ce3c83a 	sub	r17,r17,r19
  80c3f0:	9d7fffcc 	andi	r21,r19,65535
  80c3f4:	b00b883a 	mov	r5,r22
  80c3f8:	8809883a 	mov	r4,r17
  80c3fc:	080c8a00 	call	80c8a0 <__umodsi3>
  80c400:	8809883a 	mov	r4,r17
  80c404:	b00b883a 	mov	r5,r22
  80c408:	1021883a 	mov	r16,r2
  80c40c:	080c83c0 	call	80c83c <__udivsi3>
  80c410:	8006943a 	slli	r3,r16,16
  80c414:	a008d43a 	srli	r4,r20,16
  80c418:	1545383a 	mul	r2,r2,r21
  80c41c:	20c8b03a 	or	r4,r4,r3
  80c420:	2080042e 	bgeu	r4,r2,80c434 <__umoddi3+0x228>
  80c424:	24c9883a 	add	r4,r4,r19
  80c428:	24c00236 	bltu	r4,r19,80c434 <__umoddi3+0x228>
  80c42c:	2080012e 	bgeu	r4,r2,80c434 <__umoddi3+0x228>
  80c430:	24c9883a 	add	r4,r4,r19
  80c434:	20a1c83a 	sub	r16,r4,r2
  80c438:	b00b883a 	mov	r5,r22
  80c43c:	8009883a 	mov	r4,r16
  80c440:	080c8a00 	call	80c8a0 <__umodsi3>
  80c444:	1023883a 	mov	r17,r2
  80c448:	b00b883a 	mov	r5,r22
  80c44c:	8009883a 	mov	r4,r16
  80c450:	080c83c0 	call	80c83c <__udivsi3>
  80c454:	8822943a 	slli	r17,r17,16
  80c458:	1545383a 	mul	r2,r2,r21
  80c45c:	a53fffcc 	andi	r20,r20,65535
  80c460:	a446b03a 	or	r3,r20,r17
  80c464:	18bfb02e 	bgeu	r3,r2,80c328 <__alt_mem_onchip_mem+0xff78c328>
  80c468:	003fab06 	br	80c318 <__alt_mem_onchip_mem+0xff78c318>
  80c46c:	2005883a 	mov	r2,r4
  80c470:	2807883a 	mov	r3,r5
  80c474:	dfc00b17 	ldw	ra,44(sp)
  80c478:	df000a17 	ldw	fp,40(sp)
  80c47c:	ddc00917 	ldw	r23,36(sp)
  80c480:	dd800817 	ldw	r22,32(sp)
  80c484:	dd400717 	ldw	r21,28(sp)
  80c488:	dd000617 	ldw	r20,24(sp)
  80c48c:	dcc00517 	ldw	r19,20(sp)
  80c490:	dc800417 	ldw	r18,16(sp)
  80c494:	dc400317 	ldw	r17,12(sp)
  80c498:	dc000217 	ldw	r16,8(sp)
  80c49c:	dec00c04 	addi	sp,sp,48
  80c4a0:	f800283a 	ret
  80c4a4:	04c03fc4 	movi	r19,255
  80c4a8:	99c9803a 	cmpltu	r4,r19,r7
  80c4ac:	200890fa 	slli	r4,r4,3
  80c4b0:	003fa806 	br	80c354 <__alt_mem_onchip_mem+0xff78c354>
  80c4b4:	00803fc4 	movi	r2,255
  80c4b8:	14c5803a 	cmpltu	r2,r2,r19
  80c4bc:	100490fa 	slli	r2,r2,3
  80c4c0:	003fc006 	br	80c3c4 <__alt_mem_onchip_mem+0xff78c3c4>
  80c4c4:	00804034 	movhi	r2,256
  80c4c8:	10bfffc4 	addi	r2,r2,-1
  80c4cc:	11808b36 	bltu	r2,r6,80c6fc <__umoddi3+0x4f0>
  80c4d0:	01000404 	movi	r4,16
  80c4d4:	003f6406 	br	80c268 <__alt_mem_onchip_mem+0xff78c268>
  80c4d8:	34c4d83a 	srl	r2,r6,r19
  80c4dc:	3d0e983a 	sll	r7,r7,r20
  80c4e0:	8cf8d83a 	srl	fp,r17,r19
  80c4e4:	8d10983a 	sll	r8,r17,r20
  80c4e8:	38aab03a 	or	r21,r7,r2
  80c4ec:	a82cd43a 	srli	r22,r21,16
  80c4f0:	84e2d83a 	srl	r17,r16,r19
  80c4f4:	e009883a 	mov	r4,fp
  80c4f8:	b00b883a 	mov	r5,r22
  80c4fc:	8a22b03a 	or	r17,r17,r8
  80c500:	3524983a 	sll	r18,r6,r20
  80c504:	080c8a00 	call	80c8a0 <__umodsi3>
  80c508:	e009883a 	mov	r4,fp
  80c50c:	b00b883a 	mov	r5,r22
  80c510:	102f883a 	mov	r23,r2
  80c514:	080c83c0 	call	80c83c <__udivsi3>
  80c518:	100d883a 	mov	r6,r2
  80c51c:	b808943a 	slli	r4,r23,16
  80c520:	aa3fffcc 	andi	r8,r21,65535
  80c524:	8804d43a 	srli	r2,r17,16
  80c528:	41af383a 	mul	r23,r8,r6
  80c52c:	8520983a 	sll	r16,r16,r20
  80c530:	1104b03a 	or	r2,r2,r4
  80c534:	15c0042e 	bgeu	r2,r23,80c548 <__umoddi3+0x33c>
  80c538:	1545883a 	add	r2,r2,r21
  80c53c:	30ffffc4 	addi	r3,r6,-1
  80c540:	1540742e 	bgeu	r2,r21,80c714 <__umoddi3+0x508>
  80c544:	180d883a 	mov	r6,r3
  80c548:	15efc83a 	sub	r23,r2,r23
  80c54c:	b00b883a 	mov	r5,r22
  80c550:	b809883a 	mov	r4,r23
  80c554:	d9800115 	stw	r6,4(sp)
  80c558:	da000015 	stw	r8,0(sp)
  80c55c:	080c8a00 	call	80c8a0 <__umodsi3>
  80c560:	b00b883a 	mov	r5,r22
  80c564:	b809883a 	mov	r4,r23
  80c568:	1039883a 	mov	fp,r2
  80c56c:	080c83c0 	call	80c83c <__udivsi3>
  80c570:	da000017 	ldw	r8,0(sp)
  80c574:	e038943a 	slli	fp,fp,16
  80c578:	100b883a 	mov	r5,r2
  80c57c:	4089383a 	mul	r4,r8,r2
  80c580:	8a3fffcc 	andi	r8,r17,65535
  80c584:	4710b03a 	or	r8,r8,fp
  80c588:	d9800117 	ldw	r6,4(sp)
  80c58c:	4100042e 	bgeu	r8,r4,80c5a0 <__umoddi3+0x394>
  80c590:	4551883a 	add	r8,r8,r21
  80c594:	10bfffc4 	addi	r2,r2,-1
  80c598:	45405a2e 	bgeu	r8,r21,80c704 <__umoddi3+0x4f8>
  80c59c:	100b883a 	mov	r5,r2
  80c5a0:	300c943a 	slli	r6,r6,16
  80c5a4:	91ffffcc 	andi	r7,r18,65535
  80c5a8:	9004d43a 	srli	r2,r18,16
  80c5ac:	314cb03a 	or	r6,r6,r5
  80c5b0:	317fffcc 	andi	r5,r6,65535
  80c5b4:	300cd43a 	srli	r6,r6,16
  80c5b8:	29d3383a 	mul	r9,r5,r7
  80c5bc:	288b383a 	mul	r5,r5,r2
  80c5c0:	31cf383a 	mul	r7,r6,r7
  80c5c4:	4806d43a 	srli	r3,r9,16
  80c5c8:	4111c83a 	sub	r8,r8,r4
  80c5cc:	29cb883a 	add	r5,r5,r7
  80c5d0:	194b883a 	add	r5,r3,r5
  80c5d4:	3085383a 	mul	r2,r6,r2
  80c5d8:	29c0022e 	bgeu	r5,r7,80c5e4 <__umoddi3+0x3d8>
  80c5dc:	00c00074 	movhi	r3,1
  80c5e0:	10c5883a 	add	r2,r2,r3
  80c5e4:	2808d43a 	srli	r4,r5,16
  80c5e8:	280a943a 	slli	r5,r5,16
  80c5ec:	4a7fffcc 	andi	r9,r9,65535
  80c5f0:	2085883a 	add	r2,r4,r2
  80c5f4:	2a4b883a 	add	r5,r5,r9
  80c5f8:	40803636 	bltu	r8,r2,80c6d4 <__umoddi3+0x4c8>
  80c5fc:	40804d26 	beq	r8,r2,80c734 <__umoddi3+0x528>
  80c600:	4089c83a 	sub	r4,r8,r2
  80c604:	280f883a 	mov	r7,r5
  80c608:	81cfc83a 	sub	r7,r16,r7
  80c60c:	81c7803a 	cmpltu	r3,r16,r7
  80c610:	20c7c83a 	sub	r3,r4,r3
  80c614:	1cc4983a 	sll	r2,r3,r19
  80c618:	3d0ed83a 	srl	r7,r7,r20
  80c61c:	1d06d83a 	srl	r3,r3,r20
  80c620:	11c4b03a 	or	r2,r2,r7
  80c624:	003f9306 	br	80c474 <__alt_mem_onchip_mem+0xff78c474>
  80c628:	9ca6983a 	sll	r19,r19,r18
  80c62c:	88e8d83a 	srl	r20,r17,r3
  80c630:	80c4d83a 	srl	r2,r16,r3
  80c634:	982cd43a 	srli	r22,r19,16
  80c638:	8ca2983a 	sll	r17,r17,r18
  80c63c:	a009883a 	mov	r4,r20
  80c640:	b00b883a 	mov	r5,r22
  80c644:	1478b03a 	or	fp,r2,r17
  80c648:	080c8a00 	call	80c8a0 <__umodsi3>
  80c64c:	a009883a 	mov	r4,r20
  80c650:	b00b883a 	mov	r5,r22
  80c654:	1023883a 	mov	r17,r2
  80c658:	080c83c0 	call	80c83c <__udivsi3>
  80c65c:	9d7fffcc 	andi	r21,r19,65535
  80c660:	880a943a 	slli	r5,r17,16
  80c664:	e008d43a 	srli	r4,fp,16
  80c668:	a885383a 	mul	r2,r21,r2
  80c66c:	84a8983a 	sll	r20,r16,r18
  80c670:	2148b03a 	or	r4,r4,r5
  80c674:	2080042e 	bgeu	r4,r2,80c688 <__umoddi3+0x47c>
  80c678:	24c9883a 	add	r4,r4,r19
  80c67c:	24c00236 	bltu	r4,r19,80c688 <__umoddi3+0x47c>
  80c680:	2080012e 	bgeu	r4,r2,80c688 <__umoddi3+0x47c>
  80c684:	24c9883a 	add	r4,r4,r19
  80c688:	20a3c83a 	sub	r17,r4,r2
  80c68c:	b00b883a 	mov	r5,r22
  80c690:	8809883a 	mov	r4,r17
  80c694:	080c8a00 	call	80c8a0 <__umodsi3>
  80c698:	102f883a 	mov	r23,r2
  80c69c:	8809883a 	mov	r4,r17
  80c6a0:	b00b883a 	mov	r5,r22
  80c6a4:	080c83c0 	call	80c83c <__udivsi3>
  80c6a8:	b82e943a 	slli	r23,r23,16
  80c6ac:	a885383a 	mul	r2,r21,r2
  80c6b0:	e13fffcc 	andi	r4,fp,65535
  80c6b4:	25c8b03a 	or	r4,r4,r23
  80c6b8:	2080042e 	bgeu	r4,r2,80c6cc <__umoddi3+0x4c0>
  80c6bc:	24c9883a 	add	r4,r4,r19
  80c6c0:	24c00236 	bltu	r4,r19,80c6cc <__umoddi3+0x4c0>
  80c6c4:	2080012e 	bgeu	r4,r2,80c6cc <__umoddi3+0x4c0>
  80c6c8:	24c9883a 	add	r4,r4,r19
  80c6cc:	20a3c83a 	sub	r17,r4,r2
  80c6d0:	003f4806 	br	80c3f4 <__alt_mem_onchip_mem+0xff78c3f4>
  80c6d4:	2c8fc83a 	sub	r7,r5,r18
  80c6d8:	1545c83a 	sub	r2,r2,r21
  80c6dc:	29cb803a 	cmpltu	r5,r5,r7
  80c6e0:	1145c83a 	sub	r2,r2,r5
  80c6e4:	4089c83a 	sub	r4,r8,r2
  80c6e8:	003fc706 	br	80c608 <__alt_mem_onchip_mem+0xff78c608>
  80c6ec:	01000604 	movi	r4,24
  80c6f0:	003f1806 	br	80c354 <__alt_mem_onchip_mem+0xff78c354>
  80c6f4:	00800604 	movi	r2,24
  80c6f8:	003f3206 	br	80c3c4 <__alt_mem_onchip_mem+0xff78c3c4>
  80c6fc:	01000604 	movi	r4,24
  80c700:	003ed906 	br	80c268 <__alt_mem_onchip_mem+0xff78c268>
  80c704:	413fa52e 	bgeu	r8,r4,80c59c <__alt_mem_onchip_mem+0xff78c59c>
  80c708:	297fff84 	addi	r5,r5,-2
  80c70c:	4551883a 	add	r8,r8,r21
  80c710:	003fa306 	br	80c5a0 <__alt_mem_onchip_mem+0xff78c5a0>
  80c714:	15ff8b2e 	bgeu	r2,r23,80c544 <__alt_mem_onchip_mem+0xff78c544>
  80c718:	31bfff84 	addi	r6,r6,-2
  80c71c:	1545883a 	add	r2,r2,r21
  80c720:	003f8906 	br	80c548 <__alt_mem_onchip_mem+0xff78c548>
  80c724:	24c9883a 	add	r4,r4,r19
  80c728:	003eee06 	br	80c2e4 <__alt_mem_onchip_mem+0xff78c2e4>
  80c72c:	8005883a 	mov	r2,r16
  80c730:	003f1706 	br	80c390 <__alt_mem_onchip_mem+0xff78c390>
  80c734:	817fe736 	bltu	r16,r5,80c6d4 <__alt_mem_onchip_mem+0xff78c6d4>
  80c738:	280f883a 	mov	r7,r5
  80c73c:	0009883a 	mov	r4,zero
  80c740:	003fb106 	br	80c608 <__alt_mem_onchip_mem+0xff78c608>

0080c744 <__divsi3>:
  80c744:	20001b16 	blt	r4,zero,80c7b4 <__divsi3+0x70>
  80c748:	000f883a 	mov	r7,zero
  80c74c:	28001616 	blt	r5,zero,80c7a8 <__divsi3+0x64>
  80c750:	200d883a 	mov	r6,r4
  80c754:	29001a2e 	bgeu	r5,r4,80c7c0 <__divsi3+0x7c>
  80c758:	00800804 	movi	r2,32
  80c75c:	00c00044 	movi	r3,1
  80c760:	00000106 	br	80c768 <__divsi3+0x24>
  80c764:	10000d26 	beq	r2,zero,80c79c <__divsi3+0x58>
  80c768:	294b883a 	add	r5,r5,r5
  80c76c:	10bfffc4 	addi	r2,r2,-1
  80c770:	18c7883a 	add	r3,r3,r3
  80c774:	293ffb36 	bltu	r5,r4,80c764 <__alt_mem_onchip_mem+0xff78c764>
  80c778:	0005883a 	mov	r2,zero
  80c77c:	18000726 	beq	r3,zero,80c79c <__divsi3+0x58>
  80c780:	0005883a 	mov	r2,zero
  80c784:	31400236 	bltu	r6,r5,80c790 <__divsi3+0x4c>
  80c788:	314dc83a 	sub	r6,r6,r5
  80c78c:	10c4b03a 	or	r2,r2,r3
  80c790:	1806d07a 	srli	r3,r3,1
  80c794:	280ad07a 	srli	r5,r5,1
  80c798:	183ffa1e 	bne	r3,zero,80c784 <__alt_mem_onchip_mem+0xff78c784>
  80c79c:	38000126 	beq	r7,zero,80c7a4 <__divsi3+0x60>
  80c7a0:	0085c83a 	sub	r2,zero,r2
  80c7a4:	f800283a 	ret
  80c7a8:	014bc83a 	sub	r5,zero,r5
  80c7ac:	39c0005c 	xori	r7,r7,1
  80c7b0:	003fe706 	br	80c750 <__alt_mem_onchip_mem+0xff78c750>
  80c7b4:	0109c83a 	sub	r4,zero,r4
  80c7b8:	01c00044 	movi	r7,1
  80c7bc:	003fe306 	br	80c74c <__alt_mem_onchip_mem+0xff78c74c>
  80c7c0:	00c00044 	movi	r3,1
  80c7c4:	003fee06 	br	80c780 <__alt_mem_onchip_mem+0xff78c780>

0080c7c8 <__modsi3>:
  80c7c8:	20001716 	blt	r4,zero,80c828 <__modsi3+0x60>
  80c7cc:	000f883a 	mov	r7,zero
  80c7d0:	2005883a 	mov	r2,r4
  80c7d4:	28001216 	blt	r5,zero,80c820 <__modsi3+0x58>
  80c7d8:	2900162e 	bgeu	r5,r4,80c834 <__modsi3+0x6c>
  80c7dc:	01800804 	movi	r6,32
  80c7e0:	00c00044 	movi	r3,1
  80c7e4:	00000106 	br	80c7ec <__modsi3+0x24>
  80c7e8:	30000a26 	beq	r6,zero,80c814 <__modsi3+0x4c>
  80c7ec:	294b883a 	add	r5,r5,r5
  80c7f0:	31bfffc4 	addi	r6,r6,-1
  80c7f4:	18c7883a 	add	r3,r3,r3
  80c7f8:	293ffb36 	bltu	r5,r4,80c7e8 <__alt_mem_onchip_mem+0xff78c7e8>
  80c7fc:	18000526 	beq	r3,zero,80c814 <__modsi3+0x4c>
  80c800:	1806d07a 	srli	r3,r3,1
  80c804:	11400136 	bltu	r2,r5,80c80c <__modsi3+0x44>
  80c808:	1145c83a 	sub	r2,r2,r5
  80c80c:	280ad07a 	srli	r5,r5,1
  80c810:	183ffb1e 	bne	r3,zero,80c800 <__alt_mem_onchip_mem+0xff78c800>
  80c814:	38000126 	beq	r7,zero,80c81c <__modsi3+0x54>
  80c818:	0085c83a 	sub	r2,zero,r2
  80c81c:	f800283a 	ret
  80c820:	014bc83a 	sub	r5,zero,r5
  80c824:	003fec06 	br	80c7d8 <__alt_mem_onchip_mem+0xff78c7d8>
  80c828:	0109c83a 	sub	r4,zero,r4
  80c82c:	01c00044 	movi	r7,1
  80c830:	003fe706 	br	80c7d0 <__alt_mem_onchip_mem+0xff78c7d0>
  80c834:	00c00044 	movi	r3,1
  80c838:	003ff106 	br	80c800 <__alt_mem_onchip_mem+0xff78c800>

0080c83c <__udivsi3>:
  80c83c:	200d883a 	mov	r6,r4
  80c840:	2900152e 	bgeu	r5,r4,80c898 <__udivsi3+0x5c>
  80c844:	28001416 	blt	r5,zero,80c898 <__udivsi3+0x5c>
  80c848:	00800804 	movi	r2,32
  80c84c:	00c00044 	movi	r3,1
  80c850:	00000206 	br	80c85c <__udivsi3+0x20>
  80c854:	10000e26 	beq	r2,zero,80c890 <__udivsi3+0x54>
  80c858:	28000516 	blt	r5,zero,80c870 <__udivsi3+0x34>
  80c85c:	294b883a 	add	r5,r5,r5
  80c860:	10bfffc4 	addi	r2,r2,-1
  80c864:	18c7883a 	add	r3,r3,r3
  80c868:	293ffa36 	bltu	r5,r4,80c854 <__alt_mem_onchip_mem+0xff78c854>
  80c86c:	18000826 	beq	r3,zero,80c890 <__udivsi3+0x54>
  80c870:	0005883a 	mov	r2,zero
  80c874:	31400236 	bltu	r6,r5,80c880 <__udivsi3+0x44>
  80c878:	314dc83a 	sub	r6,r6,r5
  80c87c:	10c4b03a 	or	r2,r2,r3
  80c880:	1806d07a 	srli	r3,r3,1
  80c884:	280ad07a 	srli	r5,r5,1
  80c888:	183ffa1e 	bne	r3,zero,80c874 <__alt_mem_onchip_mem+0xff78c874>
  80c88c:	f800283a 	ret
  80c890:	0005883a 	mov	r2,zero
  80c894:	f800283a 	ret
  80c898:	00c00044 	movi	r3,1
  80c89c:	003ff406 	br	80c870 <__alt_mem_onchip_mem+0xff78c870>

0080c8a0 <__umodsi3>:
  80c8a0:	2005883a 	mov	r2,r4
  80c8a4:	2900122e 	bgeu	r5,r4,80c8f0 <__umodsi3+0x50>
  80c8a8:	28001116 	blt	r5,zero,80c8f0 <__umodsi3+0x50>
  80c8ac:	01800804 	movi	r6,32
  80c8b0:	00c00044 	movi	r3,1
  80c8b4:	00000206 	br	80c8c0 <__umodsi3+0x20>
  80c8b8:	30000c26 	beq	r6,zero,80c8ec <__umodsi3+0x4c>
  80c8bc:	28000516 	blt	r5,zero,80c8d4 <__umodsi3+0x34>
  80c8c0:	294b883a 	add	r5,r5,r5
  80c8c4:	31bfffc4 	addi	r6,r6,-1
  80c8c8:	18c7883a 	add	r3,r3,r3
  80c8cc:	293ffa36 	bltu	r5,r4,80c8b8 <__alt_mem_onchip_mem+0xff78c8b8>
  80c8d0:	18000626 	beq	r3,zero,80c8ec <__umodsi3+0x4c>
  80c8d4:	1806d07a 	srli	r3,r3,1
  80c8d8:	11400136 	bltu	r2,r5,80c8e0 <__umodsi3+0x40>
  80c8dc:	1145c83a 	sub	r2,r2,r5
  80c8e0:	280ad07a 	srli	r5,r5,1
  80c8e4:	183ffb1e 	bne	r3,zero,80c8d4 <__alt_mem_onchip_mem+0xff78c8d4>
  80c8e8:	f800283a 	ret
  80c8ec:	f800283a 	ret
  80c8f0:	00c00044 	movi	r3,1
  80c8f4:	003ff706 	br	80c8d4 <__alt_mem_onchip_mem+0xff78c8d4>

0080c8f8 <__adddf3>:
  80c8f8:	02c00434 	movhi	r11,16
  80c8fc:	5affffc4 	addi	r11,r11,-1
  80c900:	2806d7fa 	srli	r3,r5,31
  80c904:	2ad4703a 	and	r10,r5,r11
  80c908:	3ad2703a 	and	r9,r7,r11
  80c90c:	3804d53a 	srli	r2,r7,20
  80c910:	3018d77a 	srli	r12,r6,29
  80c914:	280ad53a 	srli	r5,r5,20
  80c918:	501490fa 	slli	r10,r10,3
  80c91c:	2010d77a 	srli	r8,r4,29
  80c920:	481290fa 	slli	r9,r9,3
  80c924:	380ed7fa 	srli	r7,r7,31
  80c928:	defffb04 	addi	sp,sp,-20
  80c92c:	dc800215 	stw	r18,8(sp)
  80c930:	dc400115 	stw	r17,4(sp)
  80c934:	dc000015 	stw	r16,0(sp)
  80c938:	dfc00415 	stw	ra,16(sp)
  80c93c:	dcc00315 	stw	r19,12(sp)
  80c940:	1c803fcc 	andi	r18,r3,255
  80c944:	2c01ffcc 	andi	r16,r5,2047
  80c948:	5210b03a 	or	r8,r10,r8
  80c94c:	202290fa 	slli	r17,r4,3
  80c950:	1081ffcc 	andi	r2,r2,2047
  80c954:	4b12b03a 	or	r9,r9,r12
  80c958:	300c90fa 	slli	r6,r6,3
  80c95c:	91c07526 	beq	r18,r7,80cb34 <__adddf3+0x23c>
  80c960:	8087c83a 	sub	r3,r16,r2
  80c964:	00c0ab0e 	bge	zero,r3,80cc14 <__adddf3+0x31c>
  80c968:	10002a1e 	bne	r2,zero,80ca14 <__adddf3+0x11c>
  80c96c:	4984b03a 	or	r2,r9,r6
  80c970:	1000961e 	bne	r2,zero,80cbcc <__adddf3+0x2d4>
  80c974:	888001cc 	andi	r2,r17,7
  80c978:	10000726 	beq	r2,zero,80c998 <__adddf3+0xa0>
  80c97c:	888003cc 	andi	r2,r17,15
  80c980:	00c00104 	movi	r3,4
  80c984:	10c00426 	beq	r2,r3,80c998 <__adddf3+0xa0>
  80c988:	88c7883a 	add	r3,r17,r3
  80c98c:	1c63803a 	cmpltu	r17,r3,r17
  80c990:	4451883a 	add	r8,r8,r17
  80c994:	1823883a 	mov	r17,r3
  80c998:	4080202c 	andhi	r2,r8,128
  80c99c:	10005926 	beq	r2,zero,80cb04 <__adddf3+0x20c>
  80c9a0:	84000044 	addi	r16,r16,1
  80c9a4:	0081ffc4 	movi	r2,2047
  80c9a8:	8080ba26 	beq	r16,r2,80cc94 <__adddf3+0x39c>
  80c9ac:	00bfe034 	movhi	r2,65408
  80c9b0:	10bfffc4 	addi	r2,r2,-1
  80c9b4:	4090703a 	and	r8,r8,r2
  80c9b8:	4004977a 	slli	r2,r8,29
  80c9bc:	4010927a 	slli	r8,r8,9
  80c9c0:	8822d0fa 	srli	r17,r17,3
  80c9c4:	8401ffcc 	andi	r16,r16,2047
  80c9c8:	4010d33a 	srli	r8,r8,12
  80c9cc:	9007883a 	mov	r3,r18
  80c9d0:	1444b03a 	or	r2,r2,r17
  80c9d4:	8401ffcc 	andi	r16,r16,2047
  80c9d8:	8020953a 	slli	r16,r16,20
  80c9dc:	18c03fcc 	andi	r3,r3,255
  80c9e0:	01000434 	movhi	r4,16
  80c9e4:	213fffc4 	addi	r4,r4,-1
  80c9e8:	180697fa 	slli	r3,r3,31
  80c9ec:	4110703a 	and	r8,r8,r4
  80c9f0:	4410b03a 	or	r8,r8,r16
  80c9f4:	40c6b03a 	or	r3,r8,r3
  80c9f8:	dfc00417 	ldw	ra,16(sp)
  80c9fc:	dcc00317 	ldw	r19,12(sp)
  80ca00:	dc800217 	ldw	r18,8(sp)
  80ca04:	dc400117 	ldw	r17,4(sp)
  80ca08:	dc000017 	ldw	r16,0(sp)
  80ca0c:	dec00504 	addi	sp,sp,20
  80ca10:	f800283a 	ret
  80ca14:	0081ffc4 	movi	r2,2047
  80ca18:	80bfd626 	beq	r16,r2,80c974 <__alt_mem_onchip_mem+0xff78c974>
  80ca1c:	4a402034 	orhi	r9,r9,128
  80ca20:	00800e04 	movi	r2,56
  80ca24:	10c09f16 	blt	r2,r3,80cca4 <__adddf3+0x3ac>
  80ca28:	008007c4 	movi	r2,31
  80ca2c:	10c0c216 	blt	r2,r3,80cd38 <__adddf3+0x440>
  80ca30:	00800804 	movi	r2,32
  80ca34:	10c5c83a 	sub	r2,r2,r3
  80ca38:	488a983a 	sll	r5,r9,r2
  80ca3c:	30c8d83a 	srl	r4,r6,r3
  80ca40:	3084983a 	sll	r2,r6,r2
  80ca44:	48c6d83a 	srl	r3,r9,r3
  80ca48:	290cb03a 	or	r6,r5,r4
  80ca4c:	1004c03a 	cmpne	r2,r2,zero
  80ca50:	308cb03a 	or	r6,r6,r2
  80ca54:	898dc83a 	sub	r6,r17,r6
  80ca58:	89a3803a 	cmpltu	r17,r17,r6
  80ca5c:	40d1c83a 	sub	r8,r8,r3
  80ca60:	4451c83a 	sub	r8,r8,r17
  80ca64:	3023883a 	mov	r17,r6
  80ca68:	4080202c 	andhi	r2,r8,128
  80ca6c:	10002326 	beq	r2,zero,80cafc <__adddf3+0x204>
  80ca70:	04c02034 	movhi	r19,128
  80ca74:	9cffffc4 	addi	r19,r19,-1
  80ca78:	44e6703a 	and	r19,r8,r19
  80ca7c:	98007626 	beq	r19,zero,80cc58 <__adddf3+0x360>
  80ca80:	9809883a 	mov	r4,r19
  80ca84:	080eefc0 	call	80eefc <__clzsi2>
  80ca88:	10fffe04 	addi	r3,r2,-8
  80ca8c:	010007c4 	movi	r4,31
  80ca90:	20c07716 	blt	r4,r3,80cc70 <__adddf3+0x378>
  80ca94:	00800804 	movi	r2,32
  80ca98:	10c5c83a 	sub	r2,r2,r3
  80ca9c:	8884d83a 	srl	r2,r17,r2
  80caa0:	98d0983a 	sll	r8,r19,r3
  80caa4:	88e2983a 	sll	r17,r17,r3
  80caa8:	1204b03a 	or	r2,r2,r8
  80caac:	1c007416 	blt	r3,r16,80cc80 <__adddf3+0x388>
  80cab0:	1c21c83a 	sub	r16,r3,r16
  80cab4:	82000044 	addi	r8,r16,1
  80cab8:	00c007c4 	movi	r3,31
  80cabc:	1a009116 	blt	r3,r8,80cd04 <__adddf3+0x40c>
  80cac0:	00c00804 	movi	r3,32
  80cac4:	1a07c83a 	sub	r3,r3,r8
  80cac8:	8a08d83a 	srl	r4,r17,r8
  80cacc:	88e2983a 	sll	r17,r17,r3
  80cad0:	10c6983a 	sll	r3,r2,r3
  80cad4:	1210d83a 	srl	r8,r2,r8
  80cad8:	8804c03a 	cmpne	r2,r17,zero
  80cadc:	1906b03a 	or	r3,r3,r4
  80cae0:	18a2b03a 	or	r17,r3,r2
  80cae4:	0021883a 	mov	r16,zero
  80cae8:	003fa206 	br	80c974 <__alt_mem_onchip_mem+0xff78c974>
  80caec:	1890b03a 	or	r8,r3,r2
  80caf0:	40017d26 	beq	r8,zero,80d0e8 <__adddf3+0x7f0>
  80caf4:	1011883a 	mov	r8,r2
  80caf8:	1823883a 	mov	r17,r3
  80cafc:	888001cc 	andi	r2,r17,7
  80cb00:	103f9e1e 	bne	r2,zero,80c97c <__alt_mem_onchip_mem+0xff78c97c>
  80cb04:	4004977a 	slli	r2,r8,29
  80cb08:	8822d0fa 	srli	r17,r17,3
  80cb0c:	4010d0fa 	srli	r8,r8,3
  80cb10:	9007883a 	mov	r3,r18
  80cb14:	1444b03a 	or	r2,r2,r17
  80cb18:	0101ffc4 	movi	r4,2047
  80cb1c:	81002426 	beq	r16,r4,80cbb0 <__adddf3+0x2b8>
  80cb20:	8120703a 	and	r16,r16,r4
  80cb24:	01000434 	movhi	r4,16
  80cb28:	213fffc4 	addi	r4,r4,-1
  80cb2c:	4110703a 	and	r8,r8,r4
  80cb30:	003fa806 	br	80c9d4 <__alt_mem_onchip_mem+0xff78c9d4>
  80cb34:	8089c83a 	sub	r4,r16,r2
  80cb38:	01005e0e 	bge	zero,r4,80ccb4 <__adddf3+0x3bc>
  80cb3c:	10002b26 	beq	r2,zero,80cbec <__adddf3+0x2f4>
  80cb40:	0081ffc4 	movi	r2,2047
  80cb44:	80bf8b26 	beq	r16,r2,80c974 <__alt_mem_onchip_mem+0xff78c974>
  80cb48:	4a402034 	orhi	r9,r9,128
  80cb4c:	00800e04 	movi	r2,56
  80cb50:	1100a40e 	bge	r2,r4,80cde4 <__adddf3+0x4ec>
  80cb54:	498cb03a 	or	r6,r9,r6
  80cb58:	300ac03a 	cmpne	r5,r6,zero
  80cb5c:	0013883a 	mov	r9,zero
  80cb60:	2c4b883a 	add	r5,r5,r17
  80cb64:	2c63803a 	cmpltu	r17,r5,r17
  80cb68:	4a11883a 	add	r8,r9,r8
  80cb6c:	8a11883a 	add	r8,r17,r8
  80cb70:	2823883a 	mov	r17,r5
  80cb74:	4080202c 	andhi	r2,r8,128
  80cb78:	103fe026 	beq	r2,zero,80cafc <__alt_mem_onchip_mem+0xff78cafc>
  80cb7c:	84000044 	addi	r16,r16,1
  80cb80:	0081ffc4 	movi	r2,2047
  80cb84:	8080d226 	beq	r16,r2,80ced0 <__adddf3+0x5d8>
  80cb88:	00bfe034 	movhi	r2,65408
  80cb8c:	10bfffc4 	addi	r2,r2,-1
  80cb90:	4090703a 	and	r8,r8,r2
  80cb94:	880ad07a 	srli	r5,r17,1
  80cb98:	400897fa 	slli	r4,r8,31
  80cb9c:	88c0004c 	andi	r3,r17,1
  80cba0:	28e2b03a 	or	r17,r5,r3
  80cba4:	4010d07a 	srli	r8,r8,1
  80cba8:	2462b03a 	or	r17,r4,r17
  80cbac:	003f7106 	br	80c974 <__alt_mem_onchip_mem+0xff78c974>
  80cbb0:	4088b03a 	or	r4,r8,r2
  80cbb4:	20014526 	beq	r4,zero,80d0cc <__adddf3+0x7d4>
  80cbb8:	01000434 	movhi	r4,16
  80cbbc:	42000234 	orhi	r8,r8,8
  80cbc0:	213fffc4 	addi	r4,r4,-1
  80cbc4:	4110703a 	and	r8,r8,r4
  80cbc8:	003f8206 	br	80c9d4 <__alt_mem_onchip_mem+0xff78c9d4>
  80cbcc:	18ffffc4 	addi	r3,r3,-1
  80cbd0:	1800491e 	bne	r3,zero,80ccf8 <__adddf3+0x400>
  80cbd4:	898bc83a 	sub	r5,r17,r6
  80cbd8:	8963803a 	cmpltu	r17,r17,r5
  80cbdc:	4251c83a 	sub	r8,r8,r9
  80cbe0:	4451c83a 	sub	r8,r8,r17
  80cbe4:	2823883a 	mov	r17,r5
  80cbe8:	003f9f06 	br	80ca68 <__alt_mem_onchip_mem+0xff78ca68>
  80cbec:	4984b03a 	or	r2,r9,r6
  80cbf0:	103f6026 	beq	r2,zero,80c974 <__alt_mem_onchip_mem+0xff78c974>
  80cbf4:	213fffc4 	addi	r4,r4,-1
  80cbf8:	2000931e 	bne	r4,zero,80ce48 <__adddf3+0x550>
  80cbfc:	898d883a 	add	r6,r17,r6
  80cc00:	3463803a 	cmpltu	r17,r6,r17
  80cc04:	4251883a 	add	r8,r8,r9
  80cc08:	8a11883a 	add	r8,r17,r8
  80cc0c:	3023883a 	mov	r17,r6
  80cc10:	003fd806 	br	80cb74 <__alt_mem_onchip_mem+0xff78cb74>
  80cc14:	1800541e 	bne	r3,zero,80cd68 <__adddf3+0x470>
  80cc18:	80800044 	addi	r2,r16,1
  80cc1c:	1081ffcc 	andi	r2,r2,2047
  80cc20:	00c00044 	movi	r3,1
  80cc24:	1880a00e 	bge	r3,r2,80cea8 <__adddf3+0x5b0>
  80cc28:	8989c83a 	sub	r4,r17,r6
  80cc2c:	8905803a 	cmpltu	r2,r17,r4
  80cc30:	4267c83a 	sub	r19,r8,r9
  80cc34:	98a7c83a 	sub	r19,r19,r2
  80cc38:	9880202c 	andhi	r2,r19,128
  80cc3c:	10006326 	beq	r2,zero,80cdcc <__adddf3+0x4d4>
  80cc40:	3463c83a 	sub	r17,r6,r17
  80cc44:	4a07c83a 	sub	r3,r9,r8
  80cc48:	344d803a 	cmpltu	r6,r6,r17
  80cc4c:	19a7c83a 	sub	r19,r3,r6
  80cc50:	3825883a 	mov	r18,r7
  80cc54:	983f8a1e 	bne	r19,zero,80ca80 <__alt_mem_onchip_mem+0xff78ca80>
  80cc58:	8809883a 	mov	r4,r17
  80cc5c:	080eefc0 	call	80eefc <__clzsi2>
  80cc60:	10800804 	addi	r2,r2,32
  80cc64:	10fffe04 	addi	r3,r2,-8
  80cc68:	010007c4 	movi	r4,31
  80cc6c:	20ff890e 	bge	r4,r3,80ca94 <__alt_mem_onchip_mem+0xff78ca94>
  80cc70:	10bff604 	addi	r2,r2,-40
  80cc74:	8884983a 	sll	r2,r17,r2
  80cc78:	0023883a 	mov	r17,zero
  80cc7c:	1c3f8c0e 	bge	r3,r16,80cab0 <__alt_mem_onchip_mem+0xff78cab0>
  80cc80:	023fe034 	movhi	r8,65408
  80cc84:	423fffc4 	addi	r8,r8,-1
  80cc88:	80e1c83a 	sub	r16,r16,r3
  80cc8c:	1210703a 	and	r8,r2,r8
  80cc90:	003f3806 	br	80c974 <__alt_mem_onchip_mem+0xff78c974>
  80cc94:	9007883a 	mov	r3,r18
  80cc98:	0011883a 	mov	r8,zero
  80cc9c:	0005883a 	mov	r2,zero
  80cca0:	003f4c06 	br	80c9d4 <__alt_mem_onchip_mem+0xff78c9d4>
  80cca4:	498cb03a 	or	r6,r9,r6
  80cca8:	300cc03a 	cmpne	r6,r6,zero
  80ccac:	0007883a 	mov	r3,zero
  80ccb0:	003f6806 	br	80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80ccb4:	20009c1e 	bne	r4,zero,80cf28 <__adddf3+0x630>
  80ccb8:	80800044 	addi	r2,r16,1
  80ccbc:	1141ffcc 	andi	r5,r2,2047
  80ccc0:	01000044 	movi	r4,1
  80ccc4:	2140670e 	bge	r4,r5,80ce64 <__adddf3+0x56c>
  80ccc8:	0101ffc4 	movi	r4,2047
  80cccc:	11007f26 	beq	r2,r4,80cecc <__adddf3+0x5d4>
  80ccd0:	898d883a 	add	r6,r17,r6
  80ccd4:	4247883a 	add	r3,r8,r9
  80ccd8:	3451803a 	cmpltu	r8,r6,r17
  80ccdc:	40d1883a 	add	r8,r8,r3
  80cce0:	402297fa 	slli	r17,r8,31
  80cce4:	300cd07a 	srli	r6,r6,1
  80cce8:	4010d07a 	srli	r8,r8,1
  80ccec:	1021883a 	mov	r16,r2
  80ccf0:	89a2b03a 	or	r17,r17,r6
  80ccf4:	003f1f06 	br	80c974 <__alt_mem_onchip_mem+0xff78c974>
  80ccf8:	0081ffc4 	movi	r2,2047
  80ccfc:	80bf481e 	bne	r16,r2,80ca20 <__alt_mem_onchip_mem+0xff78ca20>
  80cd00:	003f1c06 	br	80c974 <__alt_mem_onchip_mem+0xff78c974>
  80cd04:	843ff844 	addi	r16,r16,-31
  80cd08:	01000804 	movi	r4,32
  80cd0c:	1406d83a 	srl	r3,r2,r16
  80cd10:	41005026 	beq	r8,r4,80ce54 <__adddf3+0x55c>
  80cd14:	01001004 	movi	r4,64
  80cd18:	2211c83a 	sub	r8,r4,r8
  80cd1c:	1204983a 	sll	r2,r2,r8
  80cd20:	88a2b03a 	or	r17,r17,r2
  80cd24:	8822c03a 	cmpne	r17,r17,zero
  80cd28:	1c62b03a 	or	r17,r3,r17
  80cd2c:	0011883a 	mov	r8,zero
  80cd30:	0021883a 	mov	r16,zero
  80cd34:	003f7106 	br	80cafc <__alt_mem_onchip_mem+0xff78cafc>
  80cd38:	193ff804 	addi	r4,r3,-32
  80cd3c:	00800804 	movi	r2,32
  80cd40:	4908d83a 	srl	r4,r9,r4
  80cd44:	18804526 	beq	r3,r2,80ce5c <__adddf3+0x564>
  80cd48:	00801004 	movi	r2,64
  80cd4c:	10c5c83a 	sub	r2,r2,r3
  80cd50:	4886983a 	sll	r3,r9,r2
  80cd54:	198cb03a 	or	r6,r3,r6
  80cd58:	300cc03a 	cmpne	r6,r6,zero
  80cd5c:	218cb03a 	or	r6,r4,r6
  80cd60:	0007883a 	mov	r3,zero
  80cd64:	003f3b06 	br	80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80cd68:	80002a26 	beq	r16,zero,80ce14 <__adddf3+0x51c>
  80cd6c:	0101ffc4 	movi	r4,2047
  80cd70:	11006826 	beq	r2,r4,80cf14 <__adddf3+0x61c>
  80cd74:	00c7c83a 	sub	r3,zero,r3
  80cd78:	42002034 	orhi	r8,r8,128
  80cd7c:	01000e04 	movi	r4,56
  80cd80:	20c07c16 	blt	r4,r3,80cf74 <__adddf3+0x67c>
  80cd84:	010007c4 	movi	r4,31
  80cd88:	20c0da16 	blt	r4,r3,80d0f4 <__adddf3+0x7fc>
  80cd8c:	01000804 	movi	r4,32
  80cd90:	20c9c83a 	sub	r4,r4,r3
  80cd94:	4114983a 	sll	r10,r8,r4
  80cd98:	88cad83a 	srl	r5,r17,r3
  80cd9c:	8908983a 	sll	r4,r17,r4
  80cda0:	40c6d83a 	srl	r3,r8,r3
  80cda4:	5162b03a 	or	r17,r10,r5
  80cda8:	2008c03a 	cmpne	r4,r4,zero
  80cdac:	8922b03a 	or	r17,r17,r4
  80cdb0:	3463c83a 	sub	r17,r6,r17
  80cdb4:	48c7c83a 	sub	r3,r9,r3
  80cdb8:	344d803a 	cmpltu	r6,r6,r17
  80cdbc:	1991c83a 	sub	r8,r3,r6
  80cdc0:	1021883a 	mov	r16,r2
  80cdc4:	3825883a 	mov	r18,r7
  80cdc8:	003f2706 	br	80ca68 <__alt_mem_onchip_mem+0xff78ca68>
  80cdcc:	24d0b03a 	or	r8,r4,r19
  80cdd0:	40001b1e 	bne	r8,zero,80ce40 <__adddf3+0x548>
  80cdd4:	0005883a 	mov	r2,zero
  80cdd8:	0007883a 	mov	r3,zero
  80cddc:	0021883a 	mov	r16,zero
  80cde0:	003f4d06 	br	80cb18 <__alt_mem_onchip_mem+0xff78cb18>
  80cde4:	008007c4 	movi	r2,31
  80cde8:	11003c16 	blt	r2,r4,80cedc <__adddf3+0x5e4>
  80cdec:	00800804 	movi	r2,32
  80cdf0:	1105c83a 	sub	r2,r2,r4
  80cdf4:	488e983a 	sll	r7,r9,r2
  80cdf8:	310ad83a 	srl	r5,r6,r4
  80cdfc:	3084983a 	sll	r2,r6,r2
  80ce00:	4912d83a 	srl	r9,r9,r4
  80ce04:	394ab03a 	or	r5,r7,r5
  80ce08:	1004c03a 	cmpne	r2,r2,zero
  80ce0c:	288ab03a 	or	r5,r5,r2
  80ce10:	003f5306 	br	80cb60 <__alt_mem_onchip_mem+0xff78cb60>
  80ce14:	4448b03a 	or	r4,r8,r17
  80ce18:	20003e26 	beq	r4,zero,80cf14 <__adddf3+0x61c>
  80ce1c:	00c6303a 	nor	r3,zero,r3
  80ce20:	18003a1e 	bne	r3,zero,80cf0c <__adddf3+0x614>
  80ce24:	3463c83a 	sub	r17,r6,r17
  80ce28:	4a07c83a 	sub	r3,r9,r8
  80ce2c:	344d803a 	cmpltu	r6,r6,r17
  80ce30:	1991c83a 	sub	r8,r3,r6
  80ce34:	1021883a 	mov	r16,r2
  80ce38:	3825883a 	mov	r18,r7
  80ce3c:	003f0a06 	br	80ca68 <__alt_mem_onchip_mem+0xff78ca68>
  80ce40:	2023883a 	mov	r17,r4
  80ce44:	003f0d06 	br	80ca7c <__alt_mem_onchip_mem+0xff78ca7c>
  80ce48:	0081ffc4 	movi	r2,2047
  80ce4c:	80bf3f1e 	bne	r16,r2,80cb4c <__alt_mem_onchip_mem+0xff78cb4c>
  80ce50:	003ec806 	br	80c974 <__alt_mem_onchip_mem+0xff78c974>
  80ce54:	0005883a 	mov	r2,zero
  80ce58:	003fb106 	br	80cd20 <__alt_mem_onchip_mem+0xff78cd20>
  80ce5c:	0007883a 	mov	r3,zero
  80ce60:	003fbc06 	br	80cd54 <__alt_mem_onchip_mem+0xff78cd54>
  80ce64:	4444b03a 	or	r2,r8,r17
  80ce68:	8000871e 	bne	r16,zero,80d088 <__adddf3+0x790>
  80ce6c:	1000ba26 	beq	r2,zero,80d158 <__adddf3+0x860>
  80ce70:	4984b03a 	or	r2,r9,r6
  80ce74:	103ebf26 	beq	r2,zero,80c974 <__alt_mem_onchip_mem+0xff78c974>
  80ce78:	8985883a 	add	r2,r17,r6
  80ce7c:	4247883a 	add	r3,r8,r9
  80ce80:	1451803a 	cmpltu	r8,r2,r17
  80ce84:	40d1883a 	add	r8,r8,r3
  80ce88:	40c0202c 	andhi	r3,r8,128
  80ce8c:	1023883a 	mov	r17,r2
  80ce90:	183f1a26 	beq	r3,zero,80cafc <__alt_mem_onchip_mem+0xff78cafc>
  80ce94:	00bfe034 	movhi	r2,65408
  80ce98:	10bfffc4 	addi	r2,r2,-1
  80ce9c:	2021883a 	mov	r16,r4
  80cea0:	4090703a 	and	r8,r8,r2
  80cea4:	003eb306 	br	80c974 <__alt_mem_onchip_mem+0xff78c974>
  80cea8:	4444b03a 	or	r2,r8,r17
  80ceac:	8000291e 	bne	r16,zero,80cf54 <__adddf3+0x65c>
  80ceb0:	10004b1e 	bne	r2,zero,80cfe0 <__adddf3+0x6e8>
  80ceb4:	4990b03a 	or	r8,r9,r6
  80ceb8:	40008b26 	beq	r8,zero,80d0e8 <__adddf3+0x7f0>
  80cebc:	4811883a 	mov	r8,r9
  80cec0:	3023883a 	mov	r17,r6
  80cec4:	3825883a 	mov	r18,r7
  80cec8:	003eaa06 	br	80c974 <__alt_mem_onchip_mem+0xff78c974>
  80cecc:	1021883a 	mov	r16,r2
  80ced0:	0011883a 	mov	r8,zero
  80ced4:	0005883a 	mov	r2,zero
  80ced8:	003f0f06 	br	80cb18 <__alt_mem_onchip_mem+0xff78cb18>
  80cedc:	217ff804 	addi	r5,r4,-32
  80cee0:	00800804 	movi	r2,32
  80cee4:	494ad83a 	srl	r5,r9,r5
  80cee8:	20807d26 	beq	r4,r2,80d0e0 <__adddf3+0x7e8>
  80ceec:	00801004 	movi	r2,64
  80cef0:	1109c83a 	sub	r4,r2,r4
  80cef4:	4912983a 	sll	r9,r9,r4
  80cef8:	498cb03a 	or	r6,r9,r6
  80cefc:	300cc03a 	cmpne	r6,r6,zero
  80cf00:	298ab03a 	or	r5,r5,r6
  80cf04:	0013883a 	mov	r9,zero
  80cf08:	003f1506 	br	80cb60 <__alt_mem_onchip_mem+0xff78cb60>
  80cf0c:	0101ffc4 	movi	r4,2047
  80cf10:	113f9a1e 	bne	r2,r4,80cd7c <__alt_mem_onchip_mem+0xff78cd7c>
  80cf14:	4811883a 	mov	r8,r9
  80cf18:	3023883a 	mov	r17,r6
  80cf1c:	1021883a 	mov	r16,r2
  80cf20:	3825883a 	mov	r18,r7
  80cf24:	003e9306 	br	80c974 <__alt_mem_onchip_mem+0xff78c974>
  80cf28:	8000161e 	bne	r16,zero,80cf84 <__adddf3+0x68c>
  80cf2c:	444ab03a 	or	r5,r8,r17
  80cf30:	28005126 	beq	r5,zero,80d078 <__adddf3+0x780>
  80cf34:	0108303a 	nor	r4,zero,r4
  80cf38:	20004d1e 	bne	r4,zero,80d070 <__adddf3+0x778>
  80cf3c:	89a3883a 	add	r17,r17,r6
  80cf40:	4253883a 	add	r9,r8,r9
  80cf44:	898d803a 	cmpltu	r6,r17,r6
  80cf48:	3251883a 	add	r8,r6,r9
  80cf4c:	1021883a 	mov	r16,r2
  80cf50:	003f0806 	br	80cb74 <__alt_mem_onchip_mem+0xff78cb74>
  80cf54:	1000301e 	bne	r2,zero,80d018 <__adddf3+0x720>
  80cf58:	4984b03a 	or	r2,r9,r6
  80cf5c:	10007126 	beq	r2,zero,80d124 <__adddf3+0x82c>
  80cf60:	4811883a 	mov	r8,r9
  80cf64:	3023883a 	mov	r17,r6
  80cf68:	3825883a 	mov	r18,r7
  80cf6c:	0401ffc4 	movi	r16,2047
  80cf70:	003e8006 	br	80c974 <__alt_mem_onchip_mem+0xff78c974>
  80cf74:	4462b03a 	or	r17,r8,r17
  80cf78:	8822c03a 	cmpne	r17,r17,zero
  80cf7c:	0007883a 	mov	r3,zero
  80cf80:	003f8b06 	br	80cdb0 <__alt_mem_onchip_mem+0xff78cdb0>
  80cf84:	0141ffc4 	movi	r5,2047
  80cf88:	11403b26 	beq	r2,r5,80d078 <__adddf3+0x780>
  80cf8c:	0109c83a 	sub	r4,zero,r4
  80cf90:	42002034 	orhi	r8,r8,128
  80cf94:	01400e04 	movi	r5,56
  80cf98:	29006716 	blt	r5,r4,80d138 <__adddf3+0x840>
  80cf9c:	014007c4 	movi	r5,31
  80cfa0:	29007016 	blt	r5,r4,80d164 <__adddf3+0x86c>
  80cfa4:	01400804 	movi	r5,32
  80cfa8:	290bc83a 	sub	r5,r5,r4
  80cfac:	4154983a 	sll	r10,r8,r5
  80cfb0:	890ed83a 	srl	r7,r17,r4
  80cfb4:	894a983a 	sll	r5,r17,r5
  80cfb8:	4108d83a 	srl	r4,r8,r4
  80cfbc:	51e2b03a 	or	r17,r10,r7
  80cfc0:	280ac03a 	cmpne	r5,r5,zero
  80cfc4:	8962b03a 	or	r17,r17,r5
  80cfc8:	89a3883a 	add	r17,r17,r6
  80cfcc:	2253883a 	add	r9,r4,r9
  80cfd0:	898d803a 	cmpltu	r6,r17,r6
  80cfd4:	3251883a 	add	r8,r6,r9
  80cfd8:	1021883a 	mov	r16,r2
  80cfdc:	003ee506 	br	80cb74 <__alt_mem_onchip_mem+0xff78cb74>
  80cfe0:	4984b03a 	or	r2,r9,r6
  80cfe4:	103e6326 	beq	r2,zero,80c974 <__alt_mem_onchip_mem+0xff78c974>
  80cfe8:	8987c83a 	sub	r3,r17,r6
  80cfec:	88c9803a 	cmpltu	r4,r17,r3
  80cff0:	4245c83a 	sub	r2,r8,r9
  80cff4:	1105c83a 	sub	r2,r2,r4
  80cff8:	1100202c 	andhi	r4,r2,128
  80cffc:	203ebb26 	beq	r4,zero,80caec <__alt_mem_onchip_mem+0xff78caec>
  80d000:	3463c83a 	sub	r17,r6,r17
  80d004:	4a07c83a 	sub	r3,r9,r8
  80d008:	344d803a 	cmpltu	r6,r6,r17
  80d00c:	1991c83a 	sub	r8,r3,r6
  80d010:	3825883a 	mov	r18,r7
  80d014:	003e5706 	br	80c974 <__alt_mem_onchip_mem+0xff78c974>
  80d018:	4984b03a 	or	r2,r9,r6
  80d01c:	10002e26 	beq	r2,zero,80d0d8 <__adddf3+0x7e0>
  80d020:	4004d0fa 	srli	r2,r8,3
  80d024:	8822d0fa 	srli	r17,r17,3
  80d028:	4010977a 	slli	r8,r8,29
  80d02c:	10c0022c 	andhi	r3,r2,8
  80d030:	4462b03a 	or	r17,r8,r17
  80d034:	18000826 	beq	r3,zero,80d058 <__adddf3+0x760>
  80d038:	4808d0fa 	srli	r4,r9,3
  80d03c:	20c0022c 	andhi	r3,r4,8
  80d040:	1800051e 	bne	r3,zero,80d058 <__adddf3+0x760>
  80d044:	300cd0fa 	srli	r6,r6,3
  80d048:	4806977a 	slli	r3,r9,29
  80d04c:	2005883a 	mov	r2,r4
  80d050:	3825883a 	mov	r18,r7
  80d054:	19a2b03a 	or	r17,r3,r6
  80d058:	8810d77a 	srli	r8,r17,29
  80d05c:	100490fa 	slli	r2,r2,3
  80d060:	882290fa 	slli	r17,r17,3
  80d064:	0401ffc4 	movi	r16,2047
  80d068:	4090b03a 	or	r8,r8,r2
  80d06c:	003e4106 	br	80c974 <__alt_mem_onchip_mem+0xff78c974>
  80d070:	0141ffc4 	movi	r5,2047
  80d074:	117fc71e 	bne	r2,r5,80cf94 <__alt_mem_onchip_mem+0xff78cf94>
  80d078:	4811883a 	mov	r8,r9
  80d07c:	3023883a 	mov	r17,r6
  80d080:	1021883a 	mov	r16,r2
  80d084:	003e3b06 	br	80c974 <__alt_mem_onchip_mem+0xff78c974>
  80d088:	10002f26 	beq	r2,zero,80d148 <__adddf3+0x850>
  80d08c:	4984b03a 	or	r2,r9,r6
  80d090:	10001126 	beq	r2,zero,80d0d8 <__adddf3+0x7e0>
  80d094:	4004d0fa 	srli	r2,r8,3
  80d098:	8822d0fa 	srli	r17,r17,3
  80d09c:	4010977a 	slli	r8,r8,29
  80d0a0:	10c0022c 	andhi	r3,r2,8
  80d0a4:	4462b03a 	or	r17,r8,r17
  80d0a8:	183feb26 	beq	r3,zero,80d058 <__alt_mem_onchip_mem+0xff78d058>
  80d0ac:	4808d0fa 	srli	r4,r9,3
  80d0b0:	20c0022c 	andhi	r3,r4,8
  80d0b4:	183fe81e 	bne	r3,zero,80d058 <__alt_mem_onchip_mem+0xff78d058>
  80d0b8:	300cd0fa 	srli	r6,r6,3
  80d0bc:	4806977a 	slli	r3,r9,29
  80d0c0:	2005883a 	mov	r2,r4
  80d0c4:	19a2b03a 	or	r17,r3,r6
  80d0c8:	003fe306 	br	80d058 <__alt_mem_onchip_mem+0xff78d058>
  80d0cc:	0011883a 	mov	r8,zero
  80d0d0:	0005883a 	mov	r2,zero
  80d0d4:	003e3f06 	br	80c9d4 <__alt_mem_onchip_mem+0xff78c9d4>
  80d0d8:	0401ffc4 	movi	r16,2047
  80d0dc:	003e2506 	br	80c974 <__alt_mem_onchip_mem+0xff78c974>
  80d0e0:	0013883a 	mov	r9,zero
  80d0e4:	003f8406 	br	80cef8 <__alt_mem_onchip_mem+0xff78cef8>
  80d0e8:	0005883a 	mov	r2,zero
  80d0ec:	0007883a 	mov	r3,zero
  80d0f0:	003e8906 	br	80cb18 <__alt_mem_onchip_mem+0xff78cb18>
  80d0f4:	197ff804 	addi	r5,r3,-32
  80d0f8:	01000804 	movi	r4,32
  80d0fc:	414ad83a 	srl	r5,r8,r5
  80d100:	19002426 	beq	r3,r4,80d194 <__adddf3+0x89c>
  80d104:	01001004 	movi	r4,64
  80d108:	20c7c83a 	sub	r3,r4,r3
  80d10c:	40c6983a 	sll	r3,r8,r3
  80d110:	1c46b03a 	or	r3,r3,r17
  80d114:	1806c03a 	cmpne	r3,r3,zero
  80d118:	28e2b03a 	or	r17,r5,r3
  80d11c:	0007883a 	mov	r3,zero
  80d120:	003f2306 	br	80cdb0 <__alt_mem_onchip_mem+0xff78cdb0>
  80d124:	0007883a 	mov	r3,zero
  80d128:	5811883a 	mov	r8,r11
  80d12c:	00bfffc4 	movi	r2,-1
  80d130:	0401ffc4 	movi	r16,2047
  80d134:	003e7806 	br	80cb18 <__alt_mem_onchip_mem+0xff78cb18>
  80d138:	4462b03a 	or	r17,r8,r17
  80d13c:	8822c03a 	cmpne	r17,r17,zero
  80d140:	0009883a 	mov	r4,zero
  80d144:	003fa006 	br	80cfc8 <__alt_mem_onchip_mem+0xff78cfc8>
  80d148:	4811883a 	mov	r8,r9
  80d14c:	3023883a 	mov	r17,r6
  80d150:	0401ffc4 	movi	r16,2047
  80d154:	003e0706 	br	80c974 <__alt_mem_onchip_mem+0xff78c974>
  80d158:	4811883a 	mov	r8,r9
  80d15c:	3023883a 	mov	r17,r6
  80d160:	003e0406 	br	80c974 <__alt_mem_onchip_mem+0xff78c974>
  80d164:	21fff804 	addi	r7,r4,-32
  80d168:	01400804 	movi	r5,32
  80d16c:	41ced83a 	srl	r7,r8,r7
  80d170:	21400a26 	beq	r4,r5,80d19c <__adddf3+0x8a4>
  80d174:	01401004 	movi	r5,64
  80d178:	2909c83a 	sub	r4,r5,r4
  80d17c:	4108983a 	sll	r4,r8,r4
  80d180:	2448b03a 	or	r4,r4,r17
  80d184:	2008c03a 	cmpne	r4,r4,zero
  80d188:	3922b03a 	or	r17,r7,r4
  80d18c:	0009883a 	mov	r4,zero
  80d190:	003f8d06 	br	80cfc8 <__alt_mem_onchip_mem+0xff78cfc8>
  80d194:	0007883a 	mov	r3,zero
  80d198:	003fdd06 	br	80d110 <__alt_mem_onchip_mem+0xff78d110>
  80d19c:	0009883a 	mov	r4,zero
  80d1a0:	003ff706 	br	80d180 <__alt_mem_onchip_mem+0xff78d180>

0080d1a4 <__divdf3>:
  80d1a4:	defff204 	addi	sp,sp,-56
  80d1a8:	dd400915 	stw	r21,36(sp)
  80d1ac:	282ad53a 	srli	r21,r5,20
  80d1b0:	dd000815 	stw	r20,32(sp)
  80d1b4:	2828d7fa 	srli	r20,r5,31
  80d1b8:	dc000415 	stw	r16,16(sp)
  80d1bc:	04000434 	movhi	r16,16
  80d1c0:	df000c15 	stw	fp,48(sp)
  80d1c4:	843fffc4 	addi	r16,r16,-1
  80d1c8:	dfc00d15 	stw	ra,52(sp)
  80d1cc:	ddc00b15 	stw	r23,44(sp)
  80d1d0:	dd800a15 	stw	r22,40(sp)
  80d1d4:	dcc00715 	stw	r19,28(sp)
  80d1d8:	dc800615 	stw	r18,24(sp)
  80d1dc:	dc400515 	stw	r17,20(sp)
  80d1e0:	ad41ffcc 	andi	r21,r21,2047
  80d1e4:	2c20703a 	and	r16,r5,r16
  80d1e8:	a7003fcc 	andi	fp,r20,255
  80d1ec:	a8006126 	beq	r21,zero,80d374 <__divdf3+0x1d0>
  80d1f0:	0081ffc4 	movi	r2,2047
  80d1f4:	2025883a 	mov	r18,r4
  80d1f8:	a8803726 	beq	r21,r2,80d2d8 <__divdf3+0x134>
  80d1fc:	80800434 	orhi	r2,r16,16
  80d200:	100490fa 	slli	r2,r2,3
  80d204:	2020d77a 	srli	r16,r4,29
  80d208:	202490fa 	slli	r18,r4,3
  80d20c:	ad7f0044 	addi	r21,r21,-1023
  80d210:	80a0b03a 	or	r16,r16,r2
  80d214:	0027883a 	mov	r19,zero
  80d218:	0013883a 	mov	r9,zero
  80d21c:	3804d53a 	srli	r2,r7,20
  80d220:	382cd7fa 	srli	r22,r7,31
  80d224:	04400434 	movhi	r17,16
  80d228:	8c7fffc4 	addi	r17,r17,-1
  80d22c:	1081ffcc 	andi	r2,r2,2047
  80d230:	3011883a 	mov	r8,r6
  80d234:	3c62703a 	and	r17,r7,r17
  80d238:	b5c03fcc 	andi	r23,r22,255
  80d23c:	10006c26 	beq	r2,zero,80d3f0 <__divdf3+0x24c>
  80d240:	00c1ffc4 	movi	r3,2047
  80d244:	10c06426 	beq	r2,r3,80d3d8 <__divdf3+0x234>
  80d248:	88c00434 	orhi	r3,r17,16
  80d24c:	180690fa 	slli	r3,r3,3
  80d250:	3022d77a 	srli	r17,r6,29
  80d254:	301090fa 	slli	r8,r6,3
  80d258:	10bf0044 	addi	r2,r2,-1023
  80d25c:	88e2b03a 	or	r17,r17,r3
  80d260:	000f883a 	mov	r7,zero
  80d264:	a58cf03a 	xor	r6,r20,r22
  80d268:	3cc8b03a 	or	r4,r7,r19
  80d26c:	a8abc83a 	sub	r21,r21,r2
  80d270:	008003c4 	movi	r2,15
  80d274:	3007883a 	mov	r3,r6
  80d278:	34c03fcc 	andi	r19,r6,255
  80d27c:	11009036 	bltu	r2,r4,80d4c0 <__divdf3+0x31c>
  80d280:	200890ba 	slli	r4,r4,2
  80d284:	00802074 	movhi	r2,129
  80d288:	10b4a604 	addi	r2,r2,-11624
  80d28c:	2089883a 	add	r4,r4,r2
  80d290:	20800017 	ldw	r2,0(r4)
  80d294:	1000683a 	jmp	r2
  80d298:	0080d4c0 	call	80d4c <__reset-0x77f2b4>
  80d29c:	0080d310 	cmplti	r2,zero,844
  80d2a0:	0080d4b0 	cmpltui	r2,zero,850
  80d2a4:	0080d304 	movi	r2,844
  80d2a8:	0080d4b0 	cmpltui	r2,zero,850
  80d2ac:	0080d484 	movi	r2,850
  80d2b0:	0080d4b0 	cmpltui	r2,zero,850
  80d2b4:	0080d304 	movi	r2,844
  80d2b8:	0080d310 	cmplti	r2,zero,844
  80d2bc:	0080d310 	cmplti	r2,zero,844
  80d2c0:	0080d484 	movi	r2,850
  80d2c4:	0080d304 	movi	r2,844
  80d2c8:	0080d2f4 	movhi	r2,843
  80d2cc:	0080d2f4 	movhi	r2,843
  80d2d0:	0080d2f4 	movhi	r2,843
  80d2d4:	0080d7a4 	muli	r2,zero,862
  80d2d8:	2404b03a 	or	r2,r4,r16
  80d2dc:	1000661e 	bne	r2,zero,80d478 <__divdf3+0x2d4>
  80d2e0:	04c00204 	movi	r19,8
  80d2e4:	0021883a 	mov	r16,zero
  80d2e8:	0025883a 	mov	r18,zero
  80d2ec:	02400084 	movi	r9,2
  80d2f0:	003fca06 	br	80d21c <__alt_mem_onchip_mem+0xff78d21c>
  80d2f4:	8023883a 	mov	r17,r16
  80d2f8:	9011883a 	mov	r8,r18
  80d2fc:	e02f883a 	mov	r23,fp
  80d300:	480f883a 	mov	r7,r9
  80d304:	00800084 	movi	r2,2
  80d308:	3881311e 	bne	r7,r2,80d7d0 <__divdf3+0x62c>
  80d30c:	b827883a 	mov	r19,r23
  80d310:	98c0004c 	andi	r3,r19,1
  80d314:	0081ffc4 	movi	r2,2047
  80d318:	000b883a 	mov	r5,zero
  80d31c:	0025883a 	mov	r18,zero
  80d320:	1004953a 	slli	r2,r2,20
  80d324:	18c03fcc 	andi	r3,r3,255
  80d328:	04400434 	movhi	r17,16
  80d32c:	8c7fffc4 	addi	r17,r17,-1
  80d330:	180697fa 	slli	r3,r3,31
  80d334:	2c4a703a 	and	r5,r5,r17
  80d338:	288ab03a 	or	r5,r5,r2
  80d33c:	28c6b03a 	or	r3,r5,r3
  80d340:	9005883a 	mov	r2,r18
  80d344:	dfc00d17 	ldw	ra,52(sp)
  80d348:	df000c17 	ldw	fp,48(sp)
  80d34c:	ddc00b17 	ldw	r23,44(sp)
  80d350:	dd800a17 	ldw	r22,40(sp)
  80d354:	dd400917 	ldw	r21,36(sp)
  80d358:	dd000817 	ldw	r20,32(sp)
  80d35c:	dcc00717 	ldw	r19,28(sp)
  80d360:	dc800617 	ldw	r18,24(sp)
  80d364:	dc400517 	ldw	r17,20(sp)
  80d368:	dc000417 	ldw	r16,16(sp)
  80d36c:	dec00e04 	addi	sp,sp,56
  80d370:	f800283a 	ret
  80d374:	2404b03a 	or	r2,r4,r16
  80d378:	2027883a 	mov	r19,r4
  80d37c:	10003926 	beq	r2,zero,80d464 <__divdf3+0x2c0>
  80d380:	80012e26 	beq	r16,zero,80d83c <__divdf3+0x698>
  80d384:	8009883a 	mov	r4,r16
  80d388:	d9800315 	stw	r6,12(sp)
  80d38c:	d9c00215 	stw	r7,8(sp)
  80d390:	080eefc0 	call	80eefc <__clzsi2>
  80d394:	d9800317 	ldw	r6,12(sp)
  80d398:	d9c00217 	ldw	r7,8(sp)
  80d39c:	113ffd44 	addi	r4,r2,-11
  80d3a0:	00c00704 	movi	r3,28
  80d3a4:	19012116 	blt	r3,r4,80d82c <__divdf3+0x688>
  80d3a8:	00c00744 	movi	r3,29
  80d3ac:	147ffe04 	addi	r17,r2,-8
  80d3b0:	1907c83a 	sub	r3,r3,r4
  80d3b4:	8460983a 	sll	r16,r16,r17
  80d3b8:	98c6d83a 	srl	r3,r19,r3
  80d3bc:	9c64983a 	sll	r18,r19,r17
  80d3c0:	1c20b03a 	or	r16,r3,r16
  80d3c4:	1080fcc4 	addi	r2,r2,1011
  80d3c8:	00abc83a 	sub	r21,zero,r2
  80d3cc:	0027883a 	mov	r19,zero
  80d3d0:	0013883a 	mov	r9,zero
  80d3d4:	003f9106 	br	80d21c <__alt_mem_onchip_mem+0xff78d21c>
  80d3d8:	3446b03a 	or	r3,r6,r17
  80d3dc:	18001f1e 	bne	r3,zero,80d45c <__divdf3+0x2b8>
  80d3e0:	0023883a 	mov	r17,zero
  80d3e4:	0011883a 	mov	r8,zero
  80d3e8:	01c00084 	movi	r7,2
  80d3ec:	003f9d06 	br	80d264 <__alt_mem_onchip_mem+0xff78d264>
  80d3f0:	3446b03a 	or	r3,r6,r17
  80d3f4:	18001526 	beq	r3,zero,80d44c <__divdf3+0x2a8>
  80d3f8:	88011b26 	beq	r17,zero,80d868 <__divdf3+0x6c4>
  80d3fc:	8809883a 	mov	r4,r17
  80d400:	d9800315 	stw	r6,12(sp)
  80d404:	da400115 	stw	r9,4(sp)
  80d408:	080eefc0 	call	80eefc <__clzsi2>
  80d40c:	d9800317 	ldw	r6,12(sp)
  80d410:	da400117 	ldw	r9,4(sp)
  80d414:	113ffd44 	addi	r4,r2,-11
  80d418:	00c00704 	movi	r3,28
  80d41c:	19010e16 	blt	r3,r4,80d858 <__divdf3+0x6b4>
  80d420:	00c00744 	movi	r3,29
  80d424:	123ffe04 	addi	r8,r2,-8
  80d428:	1907c83a 	sub	r3,r3,r4
  80d42c:	8a22983a 	sll	r17,r17,r8
  80d430:	30c6d83a 	srl	r3,r6,r3
  80d434:	3210983a 	sll	r8,r6,r8
  80d438:	1c62b03a 	or	r17,r3,r17
  80d43c:	1080fcc4 	addi	r2,r2,1011
  80d440:	0085c83a 	sub	r2,zero,r2
  80d444:	000f883a 	mov	r7,zero
  80d448:	003f8606 	br	80d264 <__alt_mem_onchip_mem+0xff78d264>
  80d44c:	0023883a 	mov	r17,zero
  80d450:	0011883a 	mov	r8,zero
  80d454:	01c00044 	movi	r7,1
  80d458:	003f8206 	br	80d264 <__alt_mem_onchip_mem+0xff78d264>
  80d45c:	01c000c4 	movi	r7,3
  80d460:	003f8006 	br	80d264 <__alt_mem_onchip_mem+0xff78d264>
  80d464:	04c00104 	movi	r19,4
  80d468:	0021883a 	mov	r16,zero
  80d46c:	0025883a 	mov	r18,zero
  80d470:	02400044 	movi	r9,1
  80d474:	003f6906 	br	80d21c <__alt_mem_onchip_mem+0xff78d21c>
  80d478:	04c00304 	movi	r19,12
  80d47c:	024000c4 	movi	r9,3
  80d480:	003f6606 	br	80d21c <__alt_mem_onchip_mem+0xff78d21c>
  80d484:	01400434 	movhi	r5,16
  80d488:	0007883a 	mov	r3,zero
  80d48c:	297fffc4 	addi	r5,r5,-1
  80d490:	04bfffc4 	movi	r18,-1
  80d494:	0081ffc4 	movi	r2,2047
  80d498:	003fa106 	br	80d320 <__alt_mem_onchip_mem+0xff78d320>
  80d49c:	00c00044 	movi	r3,1
  80d4a0:	1887c83a 	sub	r3,r3,r2
  80d4a4:	01000e04 	movi	r4,56
  80d4a8:	20c1210e 	bge	r4,r3,80d930 <__divdf3+0x78c>
  80d4ac:	98c0004c 	andi	r3,r19,1
  80d4b0:	0005883a 	mov	r2,zero
  80d4b4:	000b883a 	mov	r5,zero
  80d4b8:	0025883a 	mov	r18,zero
  80d4bc:	003f9806 	br	80d320 <__alt_mem_onchip_mem+0xff78d320>
  80d4c0:	8c00fd36 	bltu	r17,r16,80d8b8 <__divdf3+0x714>
  80d4c4:	8440fb26 	beq	r16,r17,80d8b4 <__divdf3+0x710>
  80d4c8:	8007883a 	mov	r3,r16
  80d4cc:	ad7fffc4 	addi	r21,r21,-1
  80d4d0:	0021883a 	mov	r16,zero
  80d4d4:	4004d63a 	srli	r2,r8,24
  80d4d8:	8822923a 	slli	r17,r17,8
  80d4dc:	1809883a 	mov	r4,r3
  80d4e0:	402c923a 	slli	r22,r8,8
  80d4e4:	88b8b03a 	or	fp,r17,r2
  80d4e8:	e028d43a 	srli	r20,fp,16
  80d4ec:	d8c00015 	stw	r3,0(sp)
  80d4f0:	e5ffffcc 	andi	r23,fp,65535
  80d4f4:	a00b883a 	mov	r5,r20
  80d4f8:	080c83c0 	call	80c83c <__udivsi3>
  80d4fc:	d8c00017 	ldw	r3,0(sp)
  80d500:	a00b883a 	mov	r5,r20
  80d504:	d8800315 	stw	r2,12(sp)
  80d508:	1809883a 	mov	r4,r3
  80d50c:	080c8a00 	call	80c8a0 <__umodsi3>
  80d510:	d9800317 	ldw	r6,12(sp)
  80d514:	1006943a 	slli	r3,r2,16
  80d518:	9004d43a 	srli	r2,r18,16
  80d51c:	b9a3383a 	mul	r17,r23,r6
  80d520:	10c4b03a 	or	r2,r2,r3
  80d524:	1440062e 	bgeu	r2,r17,80d540 <__divdf3+0x39c>
  80d528:	1705883a 	add	r2,r2,fp
  80d52c:	30ffffc4 	addi	r3,r6,-1
  80d530:	1700ee36 	bltu	r2,fp,80d8ec <__divdf3+0x748>
  80d534:	1440ed2e 	bgeu	r2,r17,80d8ec <__divdf3+0x748>
  80d538:	31bfff84 	addi	r6,r6,-2
  80d53c:	1705883a 	add	r2,r2,fp
  80d540:	1463c83a 	sub	r17,r2,r17
  80d544:	a00b883a 	mov	r5,r20
  80d548:	8809883a 	mov	r4,r17
  80d54c:	d9800315 	stw	r6,12(sp)
  80d550:	080c83c0 	call	80c83c <__udivsi3>
  80d554:	a00b883a 	mov	r5,r20
  80d558:	8809883a 	mov	r4,r17
  80d55c:	d8800215 	stw	r2,8(sp)
  80d560:	080c8a00 	call	80c8a0 <__umodsi3>
  80d564:	d9c00217 	ldw	r7,8(sp)
  80d568:	1004943a 	slli	r2,r2,16
  80d56c:	94bfffcc 	andi	r18,r18,65535
  80d570:	b9d1383a 	mul	r8,r23,r7
  80d574:	90a4b03a 	or	r18,r18,r2
  80d578:	d9800317 	ldw	r6,12(sp)
  80d57c:	9200062e 	bgeu	r18,r8,80d598 <__divdf3+0x3f4>
  80d580:	9725883a 	add	r18,r18,fp
  80d584:	38bfffc4 	addi	r2,r7,-1
  80d588:	9700d636 	bltu	r18,fp,80d8e4 <__divdf3+0x740>
  80d58c:	9200d52e 	bgeu	r18,r8,80d8e4 <__divdf3+0x740>
  80d590:	39ffff84 	addi	r7,r7,-2
  80d594:	9725883a 	add	r18,r18,fp
  80d598:	3004943a 	slli	r2,r6,16
  80d59c:	b012d43a 	srli	r9,r22,16
  80d5a0:	b1bfffcc 	andi	r6,r22,65535
  80d5a4:	11e2b03a 	or	r17,r2,r7
  80d5a8:	8806d43a 	srli	r3,r17,16
  80d5ac:	893fffcc 	andi	r4,r17,65535
  80d5b0:	218b383a 	mul	r5,r4,r6
  80d5b4:	30c5383a 	mul	r2,r6,r3
  80d5b8:	2249383a 	mul	r4,r4,r9
  80d5bc:	280ed43a 	srli	r7,r5,16
  80d5c0:	9225c83a 	sub	r18,r18,r8
  80d5c4:	2089883a 	add	r4,r4,r2
  80d5c8:	3909883a 	add	r4,r7,r4
  80d5cc:	1a47383a 	mul	r3,r3,r9
  80d5d0:	2080022e 	bgeu	r4,r2,80d5dc <__divdf3+0x438>
  80d5d4:	00800074 	movhi	r2,1
  80d5d8:	1887883a 	add	r3,r3,r2
  80d5dc:	2004d43a 	srli	r2,r4,16
  80d5e0:	2008943a 	slli	r4,r4,16
  80d5e4:	297fffcc 	andi	r5,r5,65535
  80d5e8:	10c7883a 	add	r3,r2,r3
  80d5ec:	2149883a 	add	r4,r4,r5
  80d5f0:	90c0a536 	bltu	r18,r3,80d888 <__divdf3+0x6e4>
  80d5f4:	90c0bf26 	beq	r18,r3,80d8f4 <__divdf3+0x750>
  80d5f8:	90c7c83a 	sub	r3,r18,r3
  80d5fc:	810fc83a 	sub	r7,r16,r4
  80d600:	81e5803a 	cmpltu	r18,r16,r7
  80d604:	1ca5c83a 	sub	r18,r3,r18
  80d608:	e480c126 	beq	fp,r18,80d910 <__divdf3+0x76c>
  80d60c:	a00b883a 	mov	r5,r20
  80d610:	9009883a 	mov	r4,r18
  80d614:	d9800315 	stw	r6,12(sp)
  80d618:	d9c00215 	stw	r7,8(sp)
  80d61c:	da400115 	stw	r9,4(sp)
  80d620:	080c83c0 	call	80c83c <__udivsi3>
  80d624:	a00b883a 	mov	r5,r20
  80d628:	9009883a 	mov	r4,r18
  80d62c:	d8800015 	stw	r2,0(sp)
  80d630:	080c8a00 	call	80c8a0 <__umodsi3>
  80d634:	d9c00217 	ldw	r7,8(sp)
  80d638:	da000017 	ldw	r8,0(sp)
  80d63c:	1006943a 	slli	r3,r2,16
  80d640:	3804d43a 	srli	r2,r7,16
  80d644:	ba21383a 	mul	r16,r23,r8
  80d648:	d9800317 	ldw	r6,12(sp)
  80d64c:	10c4b03a 	or	r2,r2,r3
  80d650:	da400117 	ldw	r9,4(sp)
  80d654:	1400062e 	bgeu	r2,r16,80d670 <__divdf3+0x4cc>
  80d658:	1705883a 	add	r2,r2,fp
  80d65c:	40ffffc4 	addi	r3,r8,-1
  80d660:	1700ad36 	bltu	r2,fp,80d918 <__divdf3+0x774>
  80d664:	1400ac2e 	bgeu	r2,r16,80d918 <__divdf3+0x774>
  80d668:	423fff84 	addi	r8,r8,-2
  80d66c:	1705883a 	add	r2,r2,fp
  80d670:	1421c83a 	sub	r16,r2,r16
  80d674:	a00b883a 	mov	r5,r20
  80d678:	8009883a 	mov	r4,r16
  80d67c:	d9800315 	stw	r6,12(sp)
  80d680:	d9c00215 	stw	r7,8(sp)
  80d684:	da000015 	stw	r8,0(sp)
  80d688:	da400115 	stw	r9,4(sp)
  80d68c:	080c83c0 	call	80c83c <__udivsi3>
  80d690:	8009883a 	mov	r4,r16
  80d694:	a00b883a 	mov	r5,r20
  80d698:	1025883a 	mov	r18,r2
  80d69c:	080c8a00 	call	80c8a0 <__umodsi3>
  80d6a0:	d9c00217 	ldw	r7,8(sp)
  80d6a4:	1004943a 	slli	r2,r2,16
  80d6a8:	bcaf383a 	mul	r23,r23,r18
  80d6ac:	393fffcc 	andi	r4,r7,65535
  80d6b0:	2088b03a 	or	r4,r4,r2
  80d6b4:	d9800317 	ldw	r6,12(sp)
  80d6b8:	da000017 	ldw	r8,0(sp)
  80d6bc:	da400117 	ldw	r9,4(sp)
  80d6c0:	25c0062e 	bgeu	r4,r23,80d6dc <__divdf3+0x538>
  80d6c4:	2709883a 	add	r4,r4,fp
  80d6c8:	90bfffc4 	addi	r2,r18,-1
  80d6cc:	27009436 	bltu	r4,fp,80d920 <__divdf3+0x77c>
  80d6d0:	25c0932e 	bgeu	r4,r23,80d920 <__divdf3+0x77c>
  80d6d4:	94bfff84 	addi	r18,r18,-2
  80d6d8:	2709883a 	add	r4,r4,fp
  80d6dc:	4004943a 	slli	r2,r8,16
  80d6e0:	25efc83a 	sub	r23,r4,r23
  80d6e4:	1490b03a 	or	r8,r2,r18
  80d6e8:	4008d43a 	srli	r4,r8,16
  80d6ec:	40ffffcc 	andi	r3,r8,65535
  80d6f0:	30c5383a 	mul	r2,r6,r3
  80d6f4:	1a47383a 	mul	r3,r3,r9
  80d6f8:	310d383a 	mul	r6,r6,r4
  80d6fc:	100ad43a 	srli	r5,r2,16
  80d700:	4913383a 	mul	r9,r9,r4
  80d704:	1987883a 	add	r3,r3,r6
  80d708:	28c7883a 	add	r3,r5,r3
  80d70c:	1980022e 	bgeu	r3,r6,80d718 <__divdf3+0x574>
  80d710:	01000074 	movhi	r4,1
  80d714:	4913883a 	add	r9,r9,r4
  80d718:	1808d43a 	srli	r4,r3,16
  80d71c:	1806943a 	slli	r3,r3,16
  80d720:	10bfffcc 	andi	r2,r2,65535
  80d724:	2253883a 	add	r9,r4,r9
  80d728:	1887883a 	add	r3,r3,r2
  80d72c:	ba403836 	bltu	r23,r9,80d810 <__divdf3+0x66c>
  80d730:	ba403626 	beq	r23,r9,80d80c <__divdf3+0x668>
  80d734:	42000054 	ori	r8,r8,1
  80d738:	a880ffc4 	addi	r2,r21,1023
  80d73c:	00bf570e 	bge	zero,r2,80d49c <__alt_mem_onchip_mem+0xff78d49c>
  80d740:	40c001cc 	andi	r3,r8,7
  80d744:	18000726 	beq	r3,zero,80d764 <__divdf3+0x5c0>
  80d748:	40c003cc 	andi	r3,r8,15
  80d74c:	01000104 	movi	r4,4
  80d750:	19000426 	beq	r3,r4,80d764 <__divdf3+0x5c0>
  80d754:	4107883a 	add	r3,r8,r4
  80d758:	1a11803a 	cmpltu	r8,r3,r8
  80d75c:	8a23883a 	add	r17,r17,r8
  80d760:	1811883a 	mov	r8,r3
  80d764:	88c0402c 	andhi	r3,r17,256
  80d768:	18000426 	beq	r3,zero,80d77c <__divdf3+0x5d8>
  80d76c:	00ffc034 	movhi	r3,65280
  80d770:	18ffffc4 	addi	r3,r3,-1
  80d774:	a8810004 	addi	r2,r21,1024
  80d778:	88e2703a 	and	r17,r17,r3
  80d77c:	00c1ff84 	movi	r3,2046
  80d780:	18bee316 	blt	r3,r2,80d310 <__alt_mem_onchip_mem+0xff78d310>
  80d784:	8824977a 	slli	r18,r17,29
  80d788:	4010d0fa 	srli	r8,r8,3
  80d78c:	8822927a 	slli	r17,r17,9
  80d790:	1081ffcc 	andi	r2,r2,2047
  80d794:	9224b03a 	or	r18,r18,r8
  80d798:	880ad33a 	srli	r5,r17,12
  80d79c:	98c0004c 	andi	r3,r19,1
  80d7a0:	003edf06 	br	80d320 <__alt_mem_onchip_mem+0xff78d320>
  80d7a4:	8080022c 	andhi	r2,r16,8
  80d7a8:	10001226 	beq	r2,zero,80d7f4 <__divdf3+0x650>
  80d7ac:	8880022c 	andhi	r2,r17,8
  80d7b0:	1000101e 	bne	r2,zero,80d7f4 <__divdf3+0x650>
  80d7b4:	00800434 	movhi	r2,16
  80d7b8:	89400234 	orhi	r5,r17,8
  80d7bc:	10bfffc4 	addi	r2,r2,-1
  80d7c0:	b007883a 	mov	r3,r22
  80d7c4:	288a703a 	and	r5,r5,r2
  80d7c8:	4025883a 	mov	r18,r8
  80d7cc:	003f3106 	br	80d494 <__alt_mem_onchip_mem+0xff78d494>
  80d7d0:	008000c4 	movi	r2,3
  80d7d4:	3880a626 	beq	r7,r2,80da70 <__divdf3+0x8cc>
  80d7d8:	00800044 	movi	r2,1
  80d7dc:	3880521e 	bne	r7,r2,80d928 <__divdf3+0x784>
  80d7e0:	b807883a 	mov	r3,r23
  80d7e4:	0005883a 	mov	r2,zero
  80d7e8:	000b883a 	mov	r5,zero
  80d7ec:	0025883a 	mov	r18,zero
  80d7f0:	003ecb06 	br	80d320 <__alt_mem_onchip_mem+0xff78d320>
  80d7f4:	00800434 	movhi	r2,16
  80d7f8:	81400234 	orhi	r5,r16,8
  80d7fc:	10bfffc4 	addi	r2,r2,-1
  80d800:	a007883a 	mov	r3,r20
  80d804:	288a703a 	and	r5,r5,r2
  80d808:	003f2206 	br	80d494 <__alt_mem_onchip_mem+0xff78d494>
  80d80c:	183fca26 	beq	r3,zero,80d738 <__alt_mem_onchip_mem+0xff78d738>
  80d810:	e5ef883a 	add	r23,fp,r23
  80d814:	40bfffc4 	addi	r2,r8,-1
  80d818:	bf00392e 	bgeu	r23,fp,80d900 <__divdf3+0x75c>
  80d81c:	1011883a 	mov	r8,r2
  80d820:	ba7fc41e 	bne	r23,r9,80d734 <__alt_mem_onchip_mem+0xff78d734>
  80d824:	b0ffc31e 	bne	r22,r3,80d734 <__alt_mem_onchip_mem+0xff78d734>
  80d828:	003fc306 	br	80d738 <__alt_mem_onchip_mem+0xff78d738>
  80d82c:	143ff604 	addi	r16,r2,-40
  80d830:	9c20983a 	sll	r16,r19,r16
  80d834:	0025883a 	mov	r18,zero
  80d838:	003ee206 	br	80d3c4 <__alt_mem_onchip_mem+0xff78d3c4>
  80d83c:	d9800315 	stw	r6,12(sp)
  80d840:	d9c00215 	stw	r7,8(sp)
  80d844:	080eefc0 	call	80eefc <__clzsi2>
  80d848:	10800804 	addi	r2,r2,32
  80d84c:	d9c00217 	ldw	r7,8(sp)
  80d850:	d9800317 	ldw	r6,12(sp)
  80d854:	003ed106 	br	80d39c <__alt_mem_onchip_mem+0xff78d39c>
  80d858:	147ff604 	addi	r17,r2,-40
  80d85c:	3462983a 	sll	r17,r6,r17
  80d860:	0011883a 	mov	r8,zero
  80d864:	003ef506 	br	80d43c <__alt_mem_onchip_mem+0xff78d43c>
  80d868:	3009883a 	mov	r4,r6
  80d86c:	d9800315 	stw	r6,12(sp)
  80d870:	da400115 	stw	r9,4(sp)
  80d874:	080eefc0 	call	80eefc <__clzsi2>
  80d878:	10800804 	addi	r2,r2,32
  80d87c:	da400117 	ldw	r9,4(sp)
  80d880:	d9800317 	ldw	r6,12(sp)
  80d884:	003ee306 	br	80d414 <__alt_mem_onchip_mem+0xff78d414>
  80d888:	85a1883a 	add	r16,r16,r22
  80d88c:	8585803a 	cmpltu	r2,r16,r22
  80d890:	1705883a 	add	r2,r2,fp
  80d894:	14a5883a 	add	r18,r2,r18
  80d898:	88bfffc4 	addi	r2,r17,-1
  80d89c:	e4800c2e 	bgeu	fp,r18,80d8d0 <__divdf3+0x72c>
  80d8a0:	90c03e36 	bltu	r18,r3,80d99c <__divdf3+0x7f8>
  80d8a4:	1c806926 	beq	r3,r18,80da4c <__divdf3+0x8a8>
  80d8a8:	90c7c83a 	sub	r3,r18,r3
  80d8ac:	1023883a 	mov	r17,r2
  80d8b0:	003f5206 	br	80d5fc <__alt_mem_onchip_mem+0xff78d5fc>
  80d8b4:	923f0436 	bltu	r18,r8,80d4c8 <__alt_mem_onchip_mem+0xff78d4c8>
  80d8b8:	800897fa 	slli	r4,r16,31
  80d8bc:	9004d07a 	srli	r2,r18,1
  80d8c0:	8006d07a 	srli	r3,r16,1
  80d8c4:	902097fa 	slli	r16,r18,31
  80d8c8:	20a4b03a 	or	r18,r4,r2
  80d8cc:	003f0106 	br	80d4d4 <__alt_mem_onchip_mem+0xff78d4d4>
  80d8d0:	e4bff51e 	bne	fp,r18,80d8a8 <__alt_mem_onchip_mem+0xff78d8a8>
  80d8d4:	85bff22e 	bgeu	r16,r22,80d8a0 <__alt_mem_onchip_mem+0xff78d8a0>
  80d8d8:	e0c7c83a 	sub	r3,fp,r3
  80d8dc:	1023883a 	mov	r17,r2
  80d8e0:	003f4606 	br	80d5fc <__alt_mem_onchip_mem+0xff78d5fc>
  80d8e4:	100f883a 	mov	r7,r2
  80d8e8:	003f2b06 	br	80d598 <__alt_mem_onchip_mem+0xff78d598>
  80d8ec:	180d883a 	mov	r6,r3
  80d8f0:	003f1306 	br	80d540 <__alt_mem_onchip_mem+0xff78d540>
  80d8f4:	813fe436 	bltu	r16,r4,80d888 <__alt_mem_onchip_mem+0xff78d888>
  80d8f8:	0007883a 	mov	r3,zero
  80d8fc:	003f3f06 	br	80d5fc <__alt_mem_onchip_mem+0xff78d5fc>
  80d900:	ba402c36 	bltu	r23,r9,80d9b4 <__divdf3+0x810>
  80d904:	4dc05426 	beq	r9,r23,80da58 <__divdf3+0x8b4>
  80d908:	1011883a 	mov	r8,r2
  80d90c:	003f8906 	br	80d734 <__alt_mem_onchip_mem+0xff78d734>
  80d910:	023fffc4 	movi	r8,-1
  80d914:	003f8806 	br	80d738 <__alt_mem_onchip_mem+0xff78d738>
  80d918:	1811883a 	mov	r8,r3
  80d91c:	003f5406 	br	80d670 <__alt_mem_onchip_mem+0xff78d670>
  80d920:	1025883a 	mov	r18,r2
  80d924:	003f6d06 	br	80d6dc <__alt_mem_onchip_mem+0xff78d6dc>
  80d928:	b827883a 	mov	r19,r23
  80d92c:	003f8206 	br	80d738 <__alt_mem_onchip_mem+0xff78d738>
  80d930:	010007c4 	movi	r4,31
  80d934:	20c02616 	blt	r4,r3,80d9d0 <__divdf3+0x82c>
  80d938:	00800804 	movi	r2,32
  80d93c:	10c5c83a 	sub	r2,r2,r3
  80d940:	888a983a 	sll	r5,r17,r2
  80d944:	40c8d83a 	srl	r4,r8,r3
  80d948:	4084983a 	sll	r2,r8,r2
  80d94c:	88e2d83a 	srl	r17,r17,r3
  80d950:	2906b03a 	or	r3,r5,r4
  80d954:	1004c03a 	cmpne	r2,r2,zero
  80d958:	1886b03a 	or	r3,r3,r2
  80d95c:	188001cc 	andi	r2,r3,7
  80d960:	10000726 	beq	r2,zero,80d980 <__divdf3+0x7dc>
  80d964:	188003cc 	andi	r2,r3,15
  80d968:	01000104 	movi	r4,4
  80d96c:	11000426 	beq	r2,r4,80d980 <__divdf3+0x7dc>
  80d970:	1805883a 	mov	r2,r3
  80d974:	10c00104 	addi	r3,r2,4
  80d978:	1885803a 	cmpltu	r2,r3,r2
  80d97c:	88a3883a 	add	r17,r17,r2
  80d980:	8880202c 	andhi	r2,r17,128
  80d984:	10002726 	beq	r2,zero,80da24 <__divdf3+0x880>
  80d988:	98c0004c 	andi	r3,r19,1
  80d98c:	00800044 	movi	r2,1
  80d990:	000b883a 	mov	r5,zero
  80d994:	0025883a 	mov	r18,zero
  80d998:	003e6106 	br	80d320 <__alt_mem_onchip_mem+0xff78d320>
  80d99c:	85a1883a 	add	r16,r16,r22
  80d9a0:	8585803a 	cmpltu	r2,r16,r22
  80d9a4:	1705883a 	add	r2,r2,fp
  80d9a8:	14a5883a 	add	r18,r2,r18
  80d9ac:	8c7fff84 	addi	r17,r17,-2
  80d9b0:	003f1106 	br	80d5f8 <__alt_mem_onchip_mem+0xff78d5f8>
  80d9b4:	b589883a 	add	r4,r22,r22
  80d9b8:	25ad803a 	cmpltu	r22,r4,r22
  80d9bc:	b739883a 	add	fp,r22,fp
  80d9c0:	40bfff84 	addi	r2,r8,-2
  80d9c4:	bf2f883a 	add	r23,r23,fp
  80d9c8:	202d883a 	mov	r22,r4
  80d9cc:	003f9306 	br	80d81c <__alt_mem_onchip_mem+0xff78d81c>
  80d9d0:	013ff844 	movi	r4,-31
  80d9d4:	2085c83a 	sub	r2,r4,r2
  80d9d8:	8888d83a 	srl	r4,r17,r2
  80d9dc:	00800804 	movi	r2,32
  80d9e0:	18802126 	beq	r3,r2,80da68 <__divdf3+0x8c4>
  80d9e4:	00801004 	movi	r2,64
  80d9e8:	10c5c83a 	sub	r2,r2,r3
  80d9ec:	8884983a 	sll	r2,r17,r2
  80d9f0:	1204b03a 	or	r2,r2,r8
  80d9f4:	1004c03a 	cmpne	r2,r2,zero
  80d9f8:	2084b03a 	or	r2,r4,r2
  80d9fc:	144001cc 	andi	r17,r2,7
  80da00:	88000d1e 	bne	r17,zero,80da38 <__divdf3+0x894>
  80da04:	000b883a 	mov	r5,zero
  80da08:	1024d0fa 	srli	r18,r2,3
  80da0c:	98c0004c 	andi	r3,r19,1
  80da10:	0005883a 	mov	r2,zero
  80da14:	9464b03a 	or	r18,r18,r17
  80da18:	003e4106 	br	80d320 <__alt_mem_onchip_mem+0xff78d320>
  80da1c:	1007883a 	mov	r3,r2
  80da20:	0023883a 	mov	r17,zero
  80da24:	880a927a 	slli	r5,r17,9
  80da28:	1805883a 	mov	r2,r3
  80da2c:	8822977a 	slli	r17,r17,29
  80da30:	280ad33a 	srli	r5,r5,12
  80da34:	003ff406 	br	80da08 <__alt_mem_onchip_mem+0xff78da08>
  80da38:	10c003cc 	andi	r3,r2,15
  80da3c:	01000104 	movi	r4,4
  80da40:	193ff626 	beq	r3,r4,80da1c <__alt_mem_onchip_mem+0xff78da1c>
  80da44:	0023883a 	mov	r17,zero
  80da48:	003fca06 	br	80d974 <__alt_mem_onchip_mem+0xff78d974>
  80da4c:	813fd336 	bltu	r16,r4,80d99c <__alt_mem_onchip_mem+0xff78d99c>
  80da50:	1023883a 	mov	r17,r2
  80da54:	003fa806 	br	80d8f8 <__alt_mem_onchip_mem+0xff78d8f8>
  80da58:	b0ffd636 	bltu	r22,r3,80d9b4 <__alt_mem_onchip_mem+0xff78d9b4>
  80da5c:	1011883a 	mov	r8,r2
  80da60:	b0ff341e 	bne	r22,r3,80d734 <__alt_mem_onchip_mem+0xff78d734>
  80da64:	003f3406 	br	80d738 <__alt_mem_onchip_mem+0xff78d738>
  80da68:	0005883a 	mov	r2,zero
  80da6c:	003fe006 	br	80d9f0 <__alt_mem_onchip_mem+0xff78d9f0>
  80da70:	00800434 	movhi	r2,16
  80da74:	89400234 	orhi	r5,r17,8
  80da78:	10bfffc4 	addi	r2,r2,-1
  80da7c:	b807883a 	mov	r3,r23
  80da80:	288a703a 	and	r5,r5,r2
  80da84:	4025883a 	mov	r18,r8
  80da88:	003e8206 	br	80d494 <__alt_mem_onchip_mem+0xff78d494>

0080da8c <__eqdf2>:
  80da8c:	2804d53a 	srli	r2,r5,20
  80da90:	3806d53a 	srli	r3,r7,20
  80da94:	02000434 	movhi	r8,16
  80da98:	423fffc4 	addi	r8,r8,-1
  80da9c:	1081ffcc 	andi	r2,r2,2047
  80daa0:	0281ffc4 	movi	r10,2047
  80daa4:	2a12703a 	and	r9,r5,r8
  80daa8:	18c1ffcc 	andi	r3,r3,2047
  80daac:	3a10703a 	and	r8,r7,r8
  80dab0:	280ad7fa 	srli	r5,r5,31
  80dab4:	380ed7fa 	srli	r7,r7,31
  80dab8:	12801026 	beq	r2,r10,80dafc <__eqdf2+0x70>
  80dabc:	0281ffc4 	movi	r10,2047
  80dac0:	1a800a26 	beq	r3,r10,80daec <__eqdf2+0x60>
  80dac4:	10c00226 	beq	r2,r3,80dad0 <__eqdf2+0x44>
  80dac8:	00800044 	movi	r2,1
  80dacc:	f800283a 	ret
  80dad0:	4a3ffd1e 	bne	r9,r8,80dac8 <__alt_mem_onchip_mem+0xff78dac8>
  80dad4:	21bffc1e 	bne	r4,r6,80dac8 <__alt_mem_onchip_mem+0xff78dac8>
  80dad8:	29c00c26 	beq	r5,r7,80db0c <__eqdf2+0x80>
  80dadc:	103ffa1e 	bne	r2,zero,80dac8 <__alt_mem_onchip_mem+0xff78dac8>
  80dae0:	2244b03a 	or	r2,r4,r9
  80dae4:	1004c03a 	cmpne	r2,r2,zero
  80dae8:	f800283a 	ret
  80daec:	3214b03a 	or	r10,r6,r8
  80daf0:	503ff426 	beq	r10,zero,80dac4 <__alt_mem_onchip_mem+0xff78dac4>
  80daf4:	00800044 	movi	r2,1
  80daf8:	f800283a 	ret
  80dafc:	2254b03a 	or	r10,r4,r9
  80db00:	503fee26 	beq	r10,zero,80dabc <__alt_mem_onchip_mem+0xff78dabc>
  80db04:	00800044 	movi	r2,1
  80db08:	f800283a 	ret
  80db0c:	0005883a 	mov	r2,zero
  80db10:	f800283a 	ret

0080db14 <__gedf2>:
  80db14:	2804d53a 	srli	r2,r5,20
  80db18:	3806d53a 	srli	r3,r7,20
  80db1c:	02000434 	movhi	r8,16
  80db20:	423fffc4 	addi	r8,r8,-1
  80db24:	1081ffcc 	andi	r2,r2,2047
  80db28:	0241ffc4 	movi	r9,2047
  80db2c:	2a14703a 	and	r10,r5,r8
  80db30:	18c1ffcc 	andi	r3,r3,2047
  80db34:	3a10703a 	and	r8,r7,r8
  80db38:	280ad7fa 	srli	r5,r5,31
  80db3c:	380ed7fa 	srli	r7,r7,31
  80db40:	12401d26 	beq	r2,r9,80dbb8 <__gedf2+0xa4>
  80db44:	0241ffc4 	movi	r9,2047
  80db48:	1a401226 	beq	r3,r9,80db94 <__gedf2+0x80>
  80db4c:	1000081e 	bne	r2,zero,80db70 <__gedf2+0x5c>
  80db50:	2296b03a 	or	r11,r4,r10
  80db54:	5813003a 	cmpeq	r9,r11,zero
  80db58:	1800091e 	bne	r3,zero,80db80 <__gedf2+0x6c>
  80db5c:	3218b03a 	or	r12,r6,r8
  80db60:	6000071e 	bne	r12,zero,80db80 <__gedf2+0x6c>
  80db64:	0005883a 	mov	r2,zero
  80db68:	5800101e 	bne	r11,zero,80dbac <__gedf2+0x98>
  80db6c:	f800283a 	ret
  80db70:	18000c1e 	bne	r3,zero,80dba4 <__gedf2+0x90>
  80db74:	3212b03a 	or	r9,r6,r8
  80db78:	48000c26 	beq	r9,zero,80dbac <__gedf2+0x98>
  80db7c:	0013883a 	mov	r9,zero
  80db80:	39c03fcc 	andi	r7,r7,255
  80db84:	48000826 	beq	r9,zero,80dba8 <__gedf2+0x94>
  80db88:	38000926 	beq	r7,zero,80dbb0 <__gedf2+0x9c>
  80db8c:	00800044 	movi	r2,1
  80db90:	f800283a 	ret
  80db94:	3212b03a 	or	r9,r6,r8
  80db98:	483fec26 	beq	r9,zero,80db4c <__alt_mem_onchip_mem+0xff78db4c>
  80db9c:	00bfff84 	movi	r2,-2
  80dba0:	f800283a 	ret
  80dba4:	39c03fcc 	andi	r7,r7,255
  80dba8:	29c00626 	beq	r5,r7,80dbc4 <__gedf2+0xb0>
  80dbac:	283ff726 	beq	r5,zero,80db8c <__alt_mem_onchip_mem+0xff78db8c>
  80dbb0:	00bfffc4 	movi	r2,-1
  80dbb4:	f800283a 	ret
  80dbb8:	2292b03a 	or	r9,r4,r10
  80dbbc:	483fe126 	beq	r9,zero,80db44 <__alt_mem_onchip_mem+0xff78db44>
  80dbc0:	003ff606 	br	80db9c <__alt_mem_onchip_mem+0xff78db9c>
  80dbc4:	18bff916 	blt	r3,r2,80dbac <__alt_mem_onchip_mem+0xff78dbac>
  80dbc8:	10c00316 	blt	r2,r3,80dbd8 <__gedf2+0xc4>
  80dbcc:	42bff736 	bltu	r8,r10,80dbac <__alt_mem_onchip_mem+0xff78dbac>
  80dbd0:	52000326 	beq	r10,r8,80dbe0 <__gedf2+0xcc>
  80dbd4:	5200042e 	bgeu	r10,r8,80dbe8 <__gedf2+0xd4>
  80dbd8:	283fec1e 	bne	r5,zero,80db8c <__alt_mem_onchip_mem+0xff78db8c>
  80dbdc:	003ff406 	br	80dbb0 <__alt_mem_onchip_mem+0xff78dbb0>
  80dbe0:	313ff236 	bltu	r6,r4,80dbac <__alt_mem_onchip_mem+0xff78dbac>
  80dbe4:	21bffc36 	bltu	r4,r6,80dbd8 <__alt_mem_onchip_mem+0xff78dbd8>
  80dbe8:	0005883a 	mov	r2,zero
  80dbec:	f800283a 	ret

0080dbf0 <__ledf2>:
  80dbf0:	2804d53a 	srli	r2,r5,20
  80dbf4:	3810d53a 	srli	r8,r7,20
  80dbf8:	00c00434 	movhi	r3,16
  80dbfc:	18ffffc4 	addi	r3,r3,-1
  80dc00:	1081ffcc 	andi	r2,r2,2047
  80dc04:	0241ffc4 	movi	r9,2047
  80dc08:	28d4703a 	and	r10,r5,r3
  80dc0c:	4201ffcc 	andi	r8,r8,2047
  80dc10:	38c6703a 	and	r3,r7,r3
  80dc14:	280ad7fa 	srli	r5,r5,31
  80dc18:	380ed7fa 	srli	r7,r7,31
  80dc1c:	12401f26 	beq	r2,r9,80dc9c <__ledf2+0xac>
  80dc20:	0241ffc4 	movi	r9,2047
  80dc24:	42401426 	beq	r8,r9,80dc78 <__ledf2+0x88>
  80dc28:	1000091e 	bne	r2,zero,80dc50 <__ledf2+0x60>
  80dc2c:	2296b03a 	or	r11,r4,r10
  80dc30:	5813003a 	cmpeq	r9,r11,zero
  80dc34:	29403fcc 	andi	r5,r5,255
  80dc38:	40000a1e 	bne	r8,zero,80dc64 <__ledf2+0x74>
  80dc3c:	30d8b03a 	or	r12,r6,r3
  80dc40:	6000081e 	bne	r12,zero,80dc64 <__ledf2+0x74>
  80dc44:	0005883a 	mov	r2,zero
  80dc48:	5800111e 	bne	r11,zero,80dc90 <__ledf2+0xa0>
  80dc4c:	f800283a 	ret
  80dc50:	29403fcc 	andi	r5,r5,255
  80dc54:	40000c1e 	bne	r8,zero,80dc88 <__ledf2+0x98>
  80dc58:	30d2b03a 	or	r9,r6,r3
  80dc5c:	48000c26 	beq	r9,zero,80dc90 <__ledf2+0xa0>
  80dc60:	0013883a 	mov	r9,zero
  80dc64:	39c03fcc 	andi	r7,r7,255
  80dc68:	48000826 	beq	r9,zero,80dc8c <__ledf2+0x9c>
  80dc6c:	38001126 	beq	r7,zero,80dcb4 <__ledf2+0xc4>
  80dc70:	00800044 	movi	r2,1
  80dc74:	f800283a 	ret
  80dc78:	30d2b03a 	or	r9,r6,r3
  80dc7c:	483fea26 	beq	r9,zero,80dc28 <__alt_mem_onchip_mem+0xff78dc28>
  80dc80:	00800084 	movi	r2,2
  80dc84:	f800283a 	ret
  80dc88:	39c03fcc 	andi	r7,r7,255
  80dc8c:	39400726 	beq	r7,r5,80dcac <__ledf2+0xbc>
  80dc90:	2800081e 	bne	r5,zero,80dcb4 <__ledf2+0xc4>
  80dc94:	00800044 	movi	r2,1
  80dc98:	f800283a 	ret
  80dc9c:	2292b03a 	or	r9,r4,r10
  80dca0:	483fdf26 	beq	r9,zero,80dc20 <__alt_mem_onchip_mem+0xff78dc20>
  80dca4:	00800084 	movi	r2,2
  80dca8:	f800283a 	ret
  80dcac:	4080030e 	bge	r8,r2,80dcbc <__ledf2+0xcc>
  80dcb0:	383fef26 	beq	r7,zero,80dc70 <__alt_mem_onchip_mem+0xff78dc70>
  80dcb4:	00bfffc4 	movi	r2,-1
  80dcb8:	f800283a 	ret
  80dcbc:	123feb16 	blt	r2,r8,80dc6c <__alt_mem_onchip_mem+0xff78dc6c>
  80dcc0:	1abff336 	bltu	r3,r10,80dc90 <__alt_mem_onchip_mem+0xff78dc90>
  80dcc4:	50c00326 	beq	r10,r3,80dcd4 <__ledf2+0xe4>
  80dcc8:	50c0042e 	bgeu	r10,r3,80dcdc <__ledf2+0xec>
  80dccc:	283fe81e 	bne	r5,zero,80dc70 <__alt_mem_onchip_mem+0xff78dc70>
  80dcd0:	003ff806 	br	80dcb4 <__alt_mem_onchip_mem+0xff78dcb4>
  80dcd4:	313fee36 	bltu	r6,r4,80dc90 <__alt_mem_onchip_mem+0xff78dc90>
  80dcd8:	21bffc36 	bltu	r4,r6,80dccc <__alt_mem_onchip_mem+0xff78dccc>
  80dcdc:	0005883a 	mov	r2,zero
  80dce0:	f800283a 	ret

0080dce4 <__muldf3>:
  80dce4:	defff304 	addi	sp,sp,-52
  80dce8:	2804d53a 	srli	r2,r5,20
  80dcec:	dd800915 	stw	r22,36(sp)
  80dcf0:	282cd7fa 	srli	r22,r5,31
  80dcf4:	dc000315 	stw	r16,12(sp)
  80dcf8:	04000434 	movhi	r16,16
  80dcfc:	dd400815 	stw	r21,32(sp)
  80dd00:	dc800515 	stw	r18,20(sp)
  80dd04:	843fffc4 	addi	r16,r16,-1
  80dd08:	dfc00c15 	stw	ra,48(sp)
  80dd0c:	df000b15 	stw	fp,44(sp)
  80dd10:	ddc00a15 	stw	r23,40(sp)
  80dd14:	dd000715 	stw	r20,28(sp)
  80dd18:	dcc00615 	stw	r19,24(sp)
  80dd1c:	dc400415 	stw	r17,16(sp)
  80dd20:	1481ffcc 	andi	r18,r2,2047
  80dd24:	2c20703a 	and	r16,r5,r16
  80dd28:	b02b883a 	mov	r21,r22
  80dd2c:	b2403fcc 	andi	r9,r22,255
  80dd30:	90006026 	beq	r18,zero,80deb4 <__muldf3+0x1d0>
  80dd34:	0081ffc4 	movi	r2,2047
  80dd38:	2029883a 	mov	r20,r4
  80dd3c:	90803626 	beq	r18,r2,80de18 <__muldf3+0x134>
  80dd40:	80800434 	orhi	r2,r16,16
  80dd44:	100490fa 	slli	r2,r2,3
  80dd48:	2020d77a 	srli	r16,r4,29
  80dd4c:	202890fa 	slli	r20,r4,3
  80dd50:	94bf0044 	addi	r18,r18,-1023
  80dd54:	80a0b03a 	or	r16,r16,r2
  80dd58:	0027883a 	mov	r19,zero
  80dd5c:	0039883a 	mov	fp,zero
  80dd60:	3804d53a 	srli	r2,r7,20
  80dd64:	382ed7fa 	srli	r23,r7,31
  80dd68:	04400434 	movhi	r17,16
  80dd6c:	8c7fffc4 	addi	r17,r17,-1
  80dd70:	1081ffcc 	andi	r2,r2,2047
  80dd74:	3011883a 	mov	r8,r6
  80dd78:	3c62703a 	and	r17,r7,r17
  80dd7c:	ba803fcc 	andi	r10,r23,255
  80dd80:	10006d26 	beq	r2,zero,80df38 <__muldf3+0x254>
  80dd84:	00c1ffc4 	movi	r3,2047
  80dd88:	10c06526 	beq	r2,r3,80df20 <__muldf3+0x23c>
  80dd8c:	88c00434 	orhi	r3,r17,16
  80dd90:	180690fa 	slli	r3,r3,3
  80dd94:	3022d77a 	srli	r17,r6,29
  80dd98:	301090fa 	slli	r8,r6,3
  80dd9c:	10bf0044 	addi	r2,r2,-1023
  80dda0:	88e2b03a 	or	r17,r17,r3
  80dda4:	000b883a 	mov	r5,zero
  80dda8:	9085883a 	add	r2,r18,r2
  80ddac:	2cc8b03a 	or	r4,r5,r19
  80ddb0:	00c003c4 	movi	r3,15
  80ddb4:	bdacf03a 	xor	r22,r23,r22
  80ddb8:	12c00044 	addi	r11,r2,1
  80ddbc:	19009936 	bltu	r3,r4,80e024 <__muldf3+0x340>
  80ddc0:	200890ba 	slli	r4,r4,2
  80ddc4:	00c02074 	movhi	r3,129
  80ddc8:	18f77604 	addi	r3,r3,-8744
  80ddcc:	20c9883a 	add	r4,r4,r3
  80ddd0:	20c00017 	ldw	r3,0(r4)
  80ddd4:	1800683a 	jmp	r3
  80ddd8:	0080e024 	muli	r2,zero,896
  80dddc:	0080de38 	rdprs	r2,zero,888
  80dde0:	0080de38 	rdprs	r2,zero,888
  80dde4:	0080de34 	movhi	r2,888
  80dde8:	0080e000 	call	80e00 <__reset-0x77f200>
  80ddec:	0080e000 	call	80e00 <__reset-0x77f200>
  80ddf0:	0080dfe8 	cmpgeui	r2,zero,895
  80ddf4:	0080de34 	movhi	r2,888
  80ddf8:	0080e000 	call	80e00 <__reset-0x77f200>
  80ddfc:	0080dfe8 	cmpgeui	r2,zero,895
  80de00:	0080e000 	call	80e00 <__reset-0x77f200>
  80de04:	0080de34 	movhi	r2,888
  80de08:	0080e010 	cmplti	r2,zero,896
  80de0c:	0080e010 	cmplti	r2,zero,896
  80de10:	0080e010 	cmplti	r2,zero,896
  80de14:	0080e22c 	andhi	r2,zero,904
  80de18:	2404b03a 	or	r2,r4,r16
  80de1c:	10006f1e 	bne	r2,zero,80dfdc <__muldf3+0x2f8>
  80de20:	04c00204 	movi	r19,8
  80de24:	0021883a 	mov	r16,zero
  80de28:	0029883a 	mov	r20,zero
  80de2c:	07000084 	movi	fp,2
  80de30:	003fcb06 	br	80dd60 <__alt_mem_onchip_mem+0xff78dd60>
  80de34:	502d883a 	mov	r22,r10
  80de38:	00800084 	movi	r2,2
  80de3c:	28805726 	beq	r5,r2,80df9c <__muldf3+0x2b8>
  80de40:	008000c4 	movi	r2,3
  80de44:	28816626 	beq	r5,r2,80e3e0 <__muldf3+0x6fc>
  80de48:	00800044 	movi	r2,1
  80de4c:	2881411e 	bne	r5,r2,80e354 <__muldf3+0x670>
  80de50:	b02b883a 	mov	r21,r22
  80de54:	0005883a 	mov	r2,zero
  80de58:	000b883a 	mov	r5,zero
  80de5c:	0029883a 	mov	r20,zero
  80de60:	1004953a 	slli	r2,r2,20
  80de64:	a8c03fcc 	andi	r3,r21,255
  80de68:	04400434 	movhi	r17,16
  80de6c:	8c7fffc4 	addi	r17,r17,-1
  80de70:	180697fa 	slli	r3,r3,31
  80de74:	2c4a703a 	and	r5,r5,r17
  80de78:	288ab03a 	or	r5,r5,r2
  80de7c:	28c6b03a 	or	r3,r5,r3
  80de80:	a005883a 	mov	r2,r20
  80de84:	dfc00c17 	ldw	ra,48(sp)
  80de88:	df000b17 	ldw	fp,44(sp)
  80de8c:	ddc00a17 	ldw	r23,40(sp)
  80de90:	dd800917 	ldw	r22,36(sp)
  80de94:	dd400817 	ldw	r21,32(sp)
  80de98:	dd000717 	ldw	r20,28(sp)
  80de9c:	dcc00617 	ldw	r19,24(sp)
  80dea0:	dc800517 	ldw	r18,20(sp)
  80dea4:	dc400417 	ldw	r17,16(sp)
  80dea8:	dc000317 	ldw	r16,12(sp)
  80deac:	dec00d04 	addi	sp,sp,52
  80deb0:	f800283a 	ret
  80deb4:	2404b03a 	or	r2,r4,r16
  80deb8:	2027883a 	mov	r19,r4
  80debc:	10004226 	beq	r2,zero,80dfc8 <__muldf3+0x2e4>
  80dec0:	8000fc26 	beq	r16,zero,80e2b4 <__muldf3+0x5d0>
  80dec4:	8009883a 	mov	r4,r16
  80dec8:	d9800215 	stw	r6,8(sp)
  80decc:	d9c00015 	stw	r7,0(sp)
  80ded0:	da400115 	stw	r9,4(sp)
  80ded4:	080eefc0 	call	80eefc <__clzsi2>
  80ded8:	d9800217 	ldw	r6,8(sp)
  80dedc:	d9c00017 	ldw	r7,0(sp)
  80dee0:	da400117 	ldw	r9,4(sp)
  80dee4:	113ffd44 	addi	r4,r2,-11
  80dee8:	00c00704 	movi	r3,28
  80deec:	1900ed16 	blt	r3,r4,80e2a4 <__muldf3+0x5c0>
  80def0:	00c00744 	movi	r3,29
  80def4:	147ffe04 	addi	r17,r2,-8
  80def8:	1907c83a 	sub	r3,r3,r4
  80defc:	8460983a 	sll	r16,r16,r17
  80df00:	98c6d83a 	srl	r3,r19,r3
  80df04:	9c68983a 	sll	r20,r19,r17
  80df08:	1c20b03a 	or	r16,r3,r16
  80df0c:	1080fcc4 	addi	r2,r2,1011
  80df10:	00a5c83a 	sub	r18,zero,r2
  80df14:	0027883a 	mov	r19,zero
  80df18:	0039883a 	mov	fp,zero
  80df1c:	003f9006 	br	80dd60 <__alt_mem_onchip_mem+0xff78dd60>
  80df20:	3446b03a 	or	r3,r6,r17
  80df24:	1800261e 	bne	r3,zero,80dfc0 <__muldf3+0x2dc>
  80df28:	0023883a 	mov	r17,zero
  80df2c:	0011883a 	mov	r8,zero
  80df30:	01400084 	movi	r5,2
  80df34:	003f9c06 	br	80dda8 <__alt_mem_onchip_mem+0xff78dda8>
  80df38:	3446b03a 	or	r3,r6,r17
  80df3c:	18001c26 	beq	r3,zero,80dfb0 <__muldf3+0x2cc>
  80df40:	8800ce26 	beq	r17,zero,80e27c <__muldf3+0x598>
  80df44:	8809883a 	mov	r4,r17
  80df48:	d9800215 	stw	r6,8(sp)
  80df4c:	da400115 	stw	r9,4(sp)
  80df50:	da800015 	stw	r10,0(sp)
  80df54:	080eefc0 	call	80eefc <__clzsi2>
  80df58:	d9800217 	ldw	r6,8(sp)
  80df5c:	da400117 	ldw	r9,4(sp)
  80df60:	da800017 	ldw	r10,0(sp)
  80df64:	113ffd44 	addi	r4,r2,-11
  80df68:	00c00704 	movi	r3,28
  80df6c:	1900bf16 	blt	r3,r4,80e26c <__muldf3+0x588>
  80df70:	00c00744 	movi	r3,29
  80df74:	123ffe04 	addi	r8,r2,-8
  80df78:	1907c83a 	sub	r3,r3,r4
  80df7c:	8a22983a 	sll	r17,r17,r8
  80df80:	30c6d83a 	srl	r3,r6,r3
  80df84:	3210983a 	sll	r8,r6,r8
  80df88:	1c62b03a 	or	r17,r3,r17
  80df8c:	1080fcc4 	addi	r2,r2,1011
  80df90:	0085c83a 	sub	r2,zero,r2
  80df94:	000b883a 	mov	r5,zero
  80df98:	003f8306 	br	80dda8 <__alt_mem_onchip_mem+0xff78dda8>
  80df9c:	b02b883a 	mov	r21,r22
  80dfa0:	0081ffc4 	movi	r2,2047
  80dfa4:	000b883a 	mov	r5,zero
  80dfa8:	0029883a 	mov	r20,zero
  80dfac:	003fac06 	br	80de60 <__alt_mem_onchip_mem+0xff78de60>
  80dfb0:	0023883a 	mov	r17,zero
  80dfb4:	0011883a 	mov	r8,zero
  80dfb8:	01400044 	movi	r5,1
  80dfbc:	003f7a06 	br	80dda8 <__alt_mem_onchip_mem+0xff78dda8>
  80dfc0:	014000c4 	movi	r5,3
  80dfc4:	003f7806 	br	80dda8 <__alt_mem_onchip_mem+0xff78dda8>
  80dfc8:	04c00104 	movi	r19,4
  80dfcc:	0021883a 	mov	r16,zero
  80dfd0:	0029883a 	mov	r20,zero
  80dfd4:	07000044 	movi	fp,1
  80dfd8:	003f6106 	br	80dd60 <__alt_mem_onchip_mem+0xff78dd60>
  80dfdc:	04c00304 	movi	r19,12
  80dfe0:	070000c4 	movi	fp,3
  80dfe4:	003f5e06 	br	80dd60 <__alt_mem_onchip_mem+0xff78dd60>
  80dfe8:	01400434 	movhi	r5,16
  80dfec:	002b883a 	mov	r21,zero
  80dff0:	297fffc4 	addi	r5,r5,-1
  80dff4:	053fffc4 	movi	r20,-1
  80dff8:	0081ffc4 	movi	r2,2047
  80dffc:	003f9806 	br	80de60 <__alt_mem_onchip_mem+0xff78de60>
  80e000:	8023883a 	mov	r17,r16
  80e004:	a011883a 	mov	r8,r20
  80e008:	e00b883a 	mov	r5,fp
  80e00c:	003f8a06 	br	80de38 <__alt_mem_onchip_mem+0xff78de38>
  80e010:	8023883a 	mov	r17,r16
  80e014:	a011883a 	mov	r8,r20
  80e018:	482d883a 	mov	r22,r9
  80e01c:	e00b883a 	mov	r5,fp
  80e020:	003f8506 	br	80de38 <__alt_mem_onchip_mem+0xff78de38>
  80e024:	a00ad43a 	srli	r5,r20,16
  80e028:	401ad43a 	srli	r13,r8,16
  80e02c:	a53fffcc 	andi	r20,r20,65535
  80e030:	423fffcc 	andi	r8,r8,65535
  80e034:	4519383a 	mul	r12,r8,r20
  80e038:	4147383a 	mul	r3,r8,r5
  80e03c:	6d09383a 	mul	r4,r13,r20
  80e040:	600cd43a 	srli	r6,r12,16
  80e044:	2b5d383a 	mul	r14,r5,r13
  80e048:	20c9883a 	add	r4,r4,r3
  80e04c:	310d883a 	add	r6,r6,r4
  80e050:	30c0022e 	bgeu	r6,r3,80e05c <__muldf3+0x378>
  80e054:	00c00074 	movhi	r3,1
  80e058:	70dd883a 	add	r14,r14,r3
  80e05c:	8826d43a 	srli	r19,r17,16
  80e060:	8bffffcc 	andi	r15,r17,65535
  80e064:	7d23383a 	mul	r17,r15,r20
  80e068:	7949383a 	mul	r4,r15,r5
  80e06c:	9d29383a 	mul	r20,r19,r20
  80e070:	8814d43a 	srli	r10,r17,16
  80e074:	3012943a 	slli	r9,r6,16
  80e078:	a129883a 	add	r20,r20,r4
  80e07c:	633fffcc 	andi	r12,r12,65535
  80e080:	5515883a 	add	r10,r10,r20
  80e084:	3006d43a 	srli	r3,r6,16
  80e088:	4b13883a 	add	r9,r9,r12
  80e08c:	2ccb383a 	mul	r5,r5,r19
  80e090:	5100022e 	bgeu	r10,r4,80e09c <__muldf3+0x3b8>
  80e094:	01000074 	movhi	r4,1
  80e098:	290b883a 	add	r5,r5,r4
  80e09c:	802ad43a 	srli	r21,r16,16
  80e0a0:	843fffcc 	andi	r16,r16,65535
  80e0a4:	440d383a 	mul	r6,r8,r16
  80e0a8:	4565383a 	mul	r18,r8,r21
  80e0ac:	8349383a 	mul	r4,r16,r13
  80e0b0:	500e943a 	slli	r7,r10,16
  80e0b4:	3010d43a 	srli	r8,r6,16
  80e0b8:	5028d43a 	srli	r20,r10,16
  80e0bc:	2489883a 	add	r4,r4,r18
  80e0c0:	8abfffcc 	andi	r10,r17,65535
  80e0c4:	3a95883a 	add	r10,r7,r10
  80e0c8:	4119883a 	add	r12,r8,r4
  80e0cc:	a169883a 	add	r20,r20,r5
  80e0d0:	1a87883a 	add	r3,r3,r10
  80e0d4:	6d5b383a 	mul	r13,r13,r21
  80e0d8:	6480022e 	bgeu	r12,r18,80e0e4 <__muldf3+0x400>
  80e0dc:	01000074 	movhi	r4,1
  80e0e0:	691b883a 	add	r13,r13,r4
  80e0e4:	7c25383a 	mul	r18,r15,r16
  80e0e8:	7d4b383a 	mul	r5,r15,r21
  80e0ec:	84cf383a 	mul	r7,r16,r19
  80e0f0:	901ed43a 	srli	r15,r18,16
  80e0f4:	6008d43a 	srli	r4,r12,16
  80e0f8:	6010943a 	slli	r8,r12,16
  80e0fc:	394f883a 	add	r7,r7,r5
  80e100:	333fffcc 	andi	r12,r6,65535
  80e104:	79df883a 	add	r15,r15,r7
  80e108:	235b883a 	add	r13,r4,r13
  80e10c:	9d63383a 	mul	r17,r19,r21
  80e110:	4309883a 	add	r4,r8,r12
  80e114:	7940022e 	bgeu	r15,r5,80e120 <__muldf3+0x43c>
  80e118:	01400074 	movhi	r5,1
  80e11c:	8963883a 	add	r17,r17,r5
  80e120:	780a943a 	slli	r5,r15,16
  80e124:	91bfffcc 	andi	r6,r18,65535
  80e128:	70c7883a 	add	r3,r14,r3
  80e12c:	298d883a 	add	r6,r5,r6
  80e130:	1a8f803a 	cmpltu	r7,r3,r10
  80e134:	350b883a 	add	r5,r6,r20
  80e138:	20c7883a 	add	r3,r4,r3
  80e13c:	3955883a 	add	r10,r7,r5
  80e140:	1909803a 	cmpltu	r4,r3,r4
  80e144:	6a91883a 	add	r8,r13,r10
  80e148:	780cd43a 	srli	r6,r15,16
  80e14c:	2219883a 	add	r12,r4,r8
  80e150:	2d0b803a 	cmpltu	r5,r5,r20
  80e154:	51cf803a 	cmpltu	r7,r10,r7
  80e158:	29ceb03a 	or	r7,r5,r7
  80e15c:	4351803a 	cmpltu	r8,r8,r13
  80e160:	610b803a 	cmpltu	r5,r12,r4
  80e164:	4148b03a 	or	r4,r8,r5
  80e168:	398f883a 	add	r7,r7,r6
  80e16c:	3909883a 	add	r4,r7,r4
  80e170:	1810927a 	slli	r8,r3,9
  80e174:	2449883a 	add	r4,r4,r17
  80e178:	2008927a 	slli	r4,r4,9
  80e17c:	6022d5fa 	srli	r17,r12,23
  80e180:	1806d5fa 	srli	r3,r3,23
  80e184:	4252b03a 	or	r9,r8,r9
  80e188:	600a927a 	slli	r5,r12,9
  80e18c:	4810c03a 	cmpne	r8,r9,zero
  80e190:	2462b03a 	or	r17,r4,r17
  80e194:	40c6b03a 	or	r3,r8,r3
  80e198:	8900402c 	andhi	r4,r17,256
  80e19c:	1950b03a 	or	r8,r3,r5
  80e1a0:	20000726 	beq	r4,zero,80e1c0 <__muldf3+0x4dc>
  80e1a4:	4006d07a 	srli	r3,r8,1
  80e1a8:	880497fa 	slli	r2,r17,31
  80e1ac:	4200004c 	andi	r8,r8,1
  80e1b0:	8822d07a 	srli	r17,r17,1
  80e1b4:	1a10b03a 	or	r8,r3,r8
  80e1b8:	1210b03a 	or	r8,r2,r8
  80e1bc:	5805883a 	mov	r2,r11
  80e1c0:	1140ffc4 	addi	r5,r2,1023
  80e1c4:	0140440e 	bge	zero,r5,80e2d8 <__muldf3+0x5f4>
  80e1c8:	40c001cc 	andi	r3,r8,7
  80e1cc:	18000726 	beq	r3,zero,80e1ec <__muldf3+0x508>
  80e1d0:	40c003cc 	andi	r3,r8,15
  80e1d4:	01000104 	movi	r4,4
  80e1d8:	19000426 	beq	r3,r4,80e1ec <__muldf3+0x508>
  80e1dc:	4107883a 	add	r3,r8,r4
  80e1e0:	1a11803a 	cmpltu	r8,r3,r8
  80e1e4:	8a23883a 	add	r17,r17,r8
  80e1e8:	1811883a 	mov	r8,r3
  80e1ec:	88c0402c 	andhi	r3,r17,256
  80e1f0:	18000426 	beq	r3,zero,80e204 <__muldf3+0x520>
  80e1f4:	11410004 	addi	r5,r2,1024
  80e1f8:	00bfc034 	movhi	r2,65280
  80e1fc:	10bfffc4 	addi	r2,r2,-1
  80e200:	88a2703a 	and	r17,r17,r2
  80e204:	0081ff84 	movi	r2,2046
  80e208:	117f6416 	blt	r2,r5,80df9c <__alt_mem_onchip_mem+0xff78df9c>
  80e20c:	8828977a 	slli	r20,r17,29
  80e210:	4010d0fa 	srli	r8,r8,3
  80e214:	8822927a 	slli	r17,r17,9
  80e218:	2881ffcc 	andi	r2,r5,2047
  80e21c:	a228b03a 	or	r20,r20,r8
  80e220:	880ad33a 	srli	r5,r17,12
  80e224:	b02b883a 	mov	r21,r22
  80e228:	003f0d06 	br	80de60 <__alt_mem_onchip_mem+0xff78de60>
  80e22c:	8080022c 	andhi	r2,r16,8
  80e230:	10000926 	beq	r2,zero,80e258 <__muldf3+0x574>
  80e234:	8880022c 	andhi	r2,r17,8
  80e238:	1000071e 	bne	r2,zero,80e258 <__muldf3+0x574>
  80e23c:	00800434 	movhi	r2,16
  80e240:	89400234 	orhi	r5,r17,8
  80e244:	10bfffc4 	addi	r2,r2,-1
  80e248:	b82b883a 	mov	r21,r23
  80e24c:	288a703a 	and	r5,r5,r2
  80e250:	4029883a 	mov	r20,r8
  80e254:	003f6806 	br	80dff8 <__alt_mem_onchip_mem+0xff78dff8>
  80e258:	00800434 	movhi	r2,16
  80e25c:	81400234 	orhi	r5,r16,8
  80e260:	10bfffc4 	addi	r2,r2,-1
  80e264:	288a703a 	and	r5,r5,r2
  80e268:	003f6306 	br	80dff8 <__alt_mem_onchip_mem+0xff78dff8>
  80e26c:	147ff604 	addi	r17,r2,-40
  80e270:	3462983a 	sll	r17,r6,r17
  80e274:	0011883a 	mov	r8,zero
  80e278:	003f4406 	br	80df8c <__alt_mem_onchip_mem+0xff78df8c>
  80e27c:	3009883a 	mov	r4,r6
  80e280:	d9800215 	stw	r6,8(sp)
  80e284:	da400115 	stw	r9,4(sp)
  80e288:	da800015 	stw	r10,0(sp)
  80e28c:	080eefc0 	call	80eefc <__clzsi2>
  80e290:	10800804 	addi	r2,r2,32
  80e294:	da800017 	ldw	r10,0(sp)
  80e298:	da400117 	ldw	r9,4(sp)
  80e29c:	d9800217 	ldw	r6,8(sp)
  80e2a0:	003f3006 	br	80df64 <__alt_mem_onchip_mem+0xff78df64>
  80e2a4:	143ff604 	addi	r16,r2,-40
  80e2a8:	9c20983a 	sll	r16,r19,r16
  80e2ac:	0029883a 	mov	r20,zero
  80e2b0:	003f1606 	br	80df0c <__alt_mem_onchip_mem+0xff78df0c>
  80e2b4:	d9800215 	stw	r6,8(sp)
  80e2b8:	d9c00015 	stw	r7,0(sp)
  80e2bc:	da400115 	stw	r9,4(sp)
  80e2c0:	080eefc0 	call	80eefc <__clzsi2>
  80e2c4:	10800804 	addi	r2,r2,32
  80e2c8:	da400117 	ldw	r9,4(sp)
  80e2cc:	d9c00017 	ldw	r7,0(sp)
  80e2d0:	d9800217 	ldw	r6,8(sp)
  80e2d4:	003f0306 	br	80dee4 <__alt_mem_onchip_mem+0xff78dee4>
  80e2d8:	00c00044 	movi	r3,1
  80e2dc:	1947c83a 	sub	r3,r3,r5
  80e2e0:	00800e04 	movi	r2,56
  80e2e4:	10feda16 	blt	r2,r3,80de50 <__alt_mem_onchip_mem+0xff78de50>
  80e2e8:	008007c4 	movi	r2,31
  80e2ec:	10c01b16 	blt	r2,r3,80e35c <__muldf3+0x678>
  80e2f0:	00800804 	movi	r2,32
  80e2f4:	10c5c83a 	sub	r2,r2,r3
  80e2f8:	888a983a 	sll	r5,r17,r2
  80e2fc:	40c8d83a 	srl	r4,r8,r3
  80e300:	4084983a 	sll	r2,r8,r2
  80e304:	88e2d83a 	srl	r17,r17,r3
  80e308:	2906b03a 	or	r3,r5,r4
  80e30c:	1004c03a 	cmpne	r2,r2,zero
  80e310:	1886b03a 	or	r3,r3,r2
  80e314:	188001cc 	andi	r2,r3,7
  80e318:	10000726 	beq	r2,zero,80e338 <__muldf3+0x654>
  80e31c:	188003cc 	andi	r2,r3,15
  80e320:	01000104 	movi	r4,4
  80e324:	11000426 	beq	r2,r4,80e338 <__muldf3+0x654>
  80e328:	1805883a 	mov	r2,r3
  80e32c:	10c00104 	addi	r3,r2,4
  80e330:	1885803a 	cmpltu	r2,r3,r2
  80e334:	88a3883a 	add	r17,r17,r2
  80e338:	8880202c 	andhi	r2,r17,128
  80e33c:	10001c26 	beq	r2,zero,80e3b0 <__muldf3+0x6cc>
  80e340:	b02b883a 	mov	r21,r22
  80e344:	00800044 	movi	r2,1
  80e348:	000b883a 	mov	r5,zero
  80e34c:	0029883a 	mov	r20,zero
  80e350:	003ec306 	br	80de60 <__alt_mem_onchip_mem+0xff78de60>
  80e354:	5805883a 	mov	r2,r11
  80e358:	003f9906 	br	80e1c0 <__alt_mem_onchip_mem+0xff78e1c0>
  80e35c:	00bff844 	movi	r2,-31
  80e360:	1145c83a 	sub	r2,r2,r5
  80e364:	8888d83a 	srl	r4,r17,r2
  80e368:	00800804 	movi	r2,32
  80e36c:	18801a26 	beq	r3,r2,80e3d8 <__muldf3+0x6f4>
  80e370:	00801004 	movi	r2,64
  80e374:	10c5c83a 	sub	r2,r2,r3
  80e378:	8884983a 	sll	r2,r17,r2
  80e37c:	1204b03a 	or	r2,r2,r8
  80e380:	1004c03a 	cmpne	r2,r2,zero
  80e384:	2084b03a 	or	r2,r4,r2
  80e388:	144001cc 	andi	r17,r2,7
  80e38c:	88000d1e 	bne	r17,zero,80e3c4 <__muldf3+0x6e0>
  80e390:	000b883a 	mov	r5,zero
  80e394:	1028d0fa 	srli	r20,r2,3
  80e398:	b02b883a 	mov	r21,r22
  80e39c:	0005883a 	mov	r2,zero
  80e3a0:	a468b03a 	or	r20,r20,r17
  80e3a4:	003eae06 	br	80de60 <__alt_mem_onchip_mem+0xff78de60>
  80e3a8:	1007883a 	mov	r3,r2
  80e3ac:	0023883a 	mov	r17,zero
  80e3b0:	880a927a 	slli	r5,r17,9
  80e3b4:	1805883a 	mov	r2,r3
  80e3b8:	8822977a 	slli	r17,r17,29
  80e3bc:	280ad33a 	srli	r5,r5,12
  80e3c0:	003ff406 	br	80e394 <__alt_mem_onchip_mem+0xff78e394>
  80e3c4:	10c003cc 	andi	r3,r2,15
  80e3c8:	01000104 	movi	r4,4
  80e3cc:	193ff626 	beq	r3,r4,80e3a8 <__alt_mem_onchip_mem+0xff78e3a8>
  80e3d0:	0023883a 	mov	r17,zero
  80e3d4:	003fd506 	br	80e32c <__alt_mem_onchip_mem+0xff78e32c>
  80e3d8:	0005883a 	mov	r2,zero
  80e3dc:	003fe706 	br	80e37c <__alt_mem_onchip_mem+0xff78e37c>
  80e3e0:	00800434 	movhi	r2,16
  80e3e4:	89400234 	orhi	r5,r17,8
  80e3e8:	10bfffc4 	addi	r2,r2,-1
  80e3ec:	b02b883a 	mov	r21,r22
  80e3f0:	288a703a 	and	r5,r5,r2
  80e3f4:	4029883a 	mov	r20,r8
  80e3f8:	003eff06 	br	80dff8 <__alt_mem_onchip_mem+0xff78dff8>

0080e3fc <__subdf3>:
  80e3fc:	02000434 	movhi	r8,16
  80e400:	423fffc4 	addi	r8,r8,-1
  80e404:	defffb04 	addi	sp,sp,-20
  80e408:	2a14703a 	and	r10,r5,r8
  80e40c:	3812d53a 	srli	r9,r7,20
  80e410:	3a10703a 	and	r8,r7,r8
  80e414:	2006d77a 	srli	r3,r4,29
  80e418:	3004d77a 	srli	r2,r6,29
  80e41c:	dc000015 	stw	r16,0(sp)
  80e420:	501490fa 	slli	r10,r10,3
  80e424:	2820d53a 	srli	r16,r5,20
  80e428:	401090fa 	slli	r8,r8,3
  80e42c:	dc800215 	stw	r18,8(sp)
  80e430:	dc400115 	stw	r17,4(sp)
  80e434:	dfc00415 	stw	ra,16(sp)
  80e438:	202290fa 	slli	r17,r4,3
  80e43c:	dcc00315 	stw	r19,12(sp)
  80e440:	4a41ffcc 	andi	r9,r9,2047
  80e444:	0101ffc4 	movi	r4,2047
  80e448:	2824d7fa 	srli	r18,r5,31
  80e44c:	8401ffcc 	andi	r16,r16,2047
  80e450:	50c6b03a 	or	r3,r10,r3
  80e454:	380ed7fa 	srli	r7,r7,31
  80e458:	408ab03a 	or	r5,r8,r2
  80e45c:	300c90fa 	slli	r6,r6,3
  80e460:	49009626 	beq	r9,r4,80e6bc <__subdf3+0x2c0>
  80e464:	39c0005c 	xori	r7,r7,1
  80e468:	8245c83a 	sub	r2,r16,r9
  80e46c:	3c807426 	beq	r7,r18,80e640 <__subdf3+0x244>
  80e470:	0080af0e 	bge	zero,r2,80e730 <__subdf3+0x334>
  80e474:	48002a1e 	bne	r9,zero,80e520 <__subdf3+0x124>
  80e478:	2988b03a 	or	r4,r5,r6
  80e47c:	20009a1e 	bne	r4,zero,80e6e8 <__subdf3+0x2ec>
  80e480:	888001cc 	andi	r2,r17,7
  80e484:	10000726 	beq	r2,zero,80e4a4 <__subdf3+0xa8>
  80e488:	888003cc 	andi	r2,r17,15
  80e48c:	01000104 	movi	r4,4
  80e490:	11000426 	beq	r2,r4,80e4a4 <__subdf3+0xa8>
  80e494:	890b883a 	add	r5,r17,r4
  80e498:	2c63803a 	cmpltu	r17,r5,r17
  80e49c:	1c47883a 	add	r3,r3,r17
  80e4a0:	2823883a 	mov	r17,r5
  80e4a4:	1880202c 	andhi	r2,r3,128
  80e4a8:	10005926 	beq	r2,zero,80e610 <__subdf3+0x214>
  80e4ac:	84000044 	addi	r16,r16,1
  80e4b0:	0081ffc4 	movi	r2,2047
  80e4b4:	8080be26 	beq	r16,r2,80e7b0 <__subdf3+0x3b4>
  80e4b8:	017fe034 	movhi	r5,65408
  80e4bc:	297fffc4 	addi	r5,r5,-1
  80e4c0:	1946703a 	and	r3,r3,r5
  80e4c4:	1804977a 	slli	r2,r3,29
  80e4c8:	1806927a 	slli	r3,r3,9
  80e4cc:	8822d0fa 	srli	r17,r17,3
  80e4d0:	8401ffcc 	andi	r16,r16,2047
  80e4d4:	180ad33a 	srli	r5,r3,12
  80e4d8:	9100004c 	andi	r4,r18,1
  80e4dc:	1444b03a 	or	r2,r2,r17
  80e4e0:	80c1ffcc 	andi	r3,r16,2047
  80e4e4:	1820953a 	slli	r16,r3,20
  80e4e8:	20c03fcc 	andi	r3,r4,255
  80e4ec:	180897fa 	slli	r4,r3,31
  80e4f0:	00c00434 	movhi	r3,16
  80e4f4:	18ffffc4 	addi	r3,r3,-1
  80e4f8:	28c6703a 	and	r3,r5,r3
  80e4fc:	1c06b03a 	or	r3,r3,r16
  80e500:	1906b03a 	or	r3,r3,r4
  80e504:	dfc00417 	ldw	ra,16(sp)
  80e508:	dcc00317 	ldw	r19,12(sp)
  80e50c:	dc800217 	ldw	r18,8(sp)
  80e510:	dc400117 	ldw	r17,4(sp)
  80e514:	dc000017 	ldw	r16,0(sp)
  80e518:	dec00504 	addi	sp,sp,20
  80e51c:	f800283a 	ret
  80e520:	0101ffc4 	movi	r4,2047
  80e524:	813fd626 	beq	r16,r4,80e480 <__alt_mem_onchip_mem+0xff78e480>
  80e528:	29402034 	orhi	r5,r5,128
  80e52c:	01000e04 	movi	r4,56
  80e530:	2080a316 	blt	r4,r2,80e7c0 <__subdf3+0x3c4>
  80e534:	010007c4 	movi	r4,31
  80e538:	2080c616 	blt	r4,r2,80e854 <__subdf3+0x458>
  80e53c:	01000804 	movi	r4,32
  80e540:	2089c83a 	sub	r4,r4,r2
  80e544:	2910983a 	sll	r8,r5,r4
  80e548:	308ed83a 	srl	r7,r6,r2
  80e54c:	3108983a 	sll	r4,r6,r4
  80e550:	2884d83a 	srl	r2,r5,r2
  80e554:	41ccb03a 	or	r6,r8,r7
  80e558:	2008c03a 	cmpne	r4,r4,zero
  80e55c:	310cb03a 	or	r6,r6,r4
  80e560:	898dc83a 	sub	r6,r17,r6
  80e564:	89a3803a 	cmpltu	r17,r17,r6
  80e568:	1887c83a 	sub	r3,r3,r2
  80e56c:	1c47c83a 	sub	r3,r3,r17
  80e570:	3023883a 	mov	r17,r6
  80e574:	1880202c 	andhi	r2,r3,128
  80e578:	10002326 	beq	r2,zero,80e608 <__subdf3+0x20c>
  80e57c:	04c02034 	movhi	r19,128
  80e580:	9cffffc4 	addi	r19,r19,-1
  80e584:	1ce6703a 	and	r19,r3,r19
  80e588:	98007a26 	beq	r19,zero,80e774 <__subdf3+0x378>
  80e58c:	9809883a 	mov	r4,r19
  80e590:	080eefc0 	call	80eefc <__clzsi2>
  80e594:	113ffe04 	addi	r4,r2,-8
  80e598:	00c007c4 	movi	r3,31
  80e59c:	19007b16 	blt	r3,r4,80e78c <__subdf3+0x390>
  80e5a0:	00800804 	movi	r2,32
  80e5a4:	1105c83a 	sub	r2,r2,r4
  80e5a8:	8884d83a 	srl	r2,r17,r2
  80e5ac:	9906983a 	sll	r3,r19,r4
  80e5b0:	8922983a 	sll	r17,r17,r4
  80e5b4:	10c4b03a 	or	r2,r2,r3
  80e5b8:	24007816 	blt	r4,r16,80e79c <__subdf3+0x3a0>
  80e5bc:	2421c83a 	sub	r16,r4,r16
  80e5c0:	80c00044 	addi	r3,r16,1
  80e5c4:	010007c4 	movi	r4,31
  80e5c8:	20c09516 	blt	r4,r3,80e820 <__subdf3+0x424>
  80e5cc:	01400804 	movi	r5,32
  80e5d0:	28cbc83a 	sub	r5,r5,r3
  80e5d4:	88c8d83a 	srl	r4,r17,r3
  80e5d8:	8962983a 	sll	r17,r17,r5
  80e5dc:	114a983a 	sll	r5,r2,r5
  80e5e0:	10c6d83a 	srl	r3,r2,r3
  80e5e4:	8804c03a 	cmpne	r2,r17,zero
  80e5e8:	290ab03a 	or	r5,r5,r4
  80e5ec:	28a2b03a 	or	r17,r5,r2
  80e5f0:	0021883a 	mov	r16,zero
  80e5f4:	003fa206 	br	80e480 <__alt_mem_onchip_mem+0xff78e480>
  80e5f8:	2090b03a 	or	r8,r4,r2
  80e5fc:	40018e26 	beq	r8,zero,80ec38 <__subdf3+0x83c>
  80e600:	1007883a 	mov	r3,r2
  80e604:	2023883a 	mov	r17,r4
  80e608:	888001cc 	andi	r2,r17,7
  80e60c:	103f9e1e 	bne	r2,zero,80e488 <__alt_mem_onchip_mem+0xff78e488>
  80e610:	1804977a 	slli	r2,r3,29
  80e614:	8822d0fa 	srli	r17,r17,3
  80e618:	1810d0fa 	srli	r8,r3,3
  80e61c:	9100004c 	andi	r4,r18,1
  80e620:	1444b03a 	or	r2,r2,r17
  80e624:	00c1ffc4 	movi	r3,2047
  80e628:	80c02826 	beq	r16,r3,80e6cc <__subdf3+0x2d0>
  80e62c:	01400434 	movhi	r5,16
  80e630:	297fffc4 	addi	r5,r5,-1
  80e634:	80e0703a 	and	r16,r16,r3
  80e638:	414a703a 	and	r5,r8,r5
  80e63c:	003fa806 	br	80e4e0 <__alt_mem_onchip_mem+0xff78e4e0>
  80e640:	0080630e 	bge	zero,r2,80e7d0 <__subdf3+0x3d4>
  80e644:	48003026 	beq	r9,zero,80e708 <__subdf3+0x30c>
  80e648:	0101ffc4 	movi	r4,2047
  80e64c:	813f8c26 	beq	r16,r4,80e480 <__alt_mem_onchip_mem+0xff78e480>
  80e650:	29402034 	orhi	r5,r5,128
  80e654:	01000e04 	movi	r4,56
  80e658:	2080a90e 	bge	r4,r2,80e900 <__subdf3+0x504>
  80e65c:	298cb03a 	or	r6,r5,r6
  80e660:	3012c03a 	cmpne	r9,r6,zero
  80e664:	0005883a 	mov	r2,zero
  80e668:	4c53883a 	add	r9,r9,r17
  80e66c:	4c63803a 	cmpltu	r17,r9,r17
  80e670:	10c7883a 	add	r3,r2,r3
  80e674:	88c7883a 	add	r3,r17,r3
  80e678:	4823883a 	mov	r17,r9
  80e67c:	1880202c 	andhi	r2,r3,128
  80e680:	1000d026 	beq	r2,zero,80e9c4 <__subdf3+0x5c8>
  80e684:	84000044 	addi	r16,r16,1
  80e688:	0081ffc4 	movi	r2,2047
  80e68c:	8080fe26 	beq	r16,r2,80ea88 <__subdf3+0x68c>
  80e690:	00bfe034 	movhi	r2,65408
  80e694:	10bfffc4 	addi	r2,r2,-1
  80e698:	1886703a 	and	r3,r3,r2
  80e69c:	880ad07a 	srli	r5,r17,1
  80e6a0:	180497fa 	slli	r2,r3,31
  80e6a4:	8900004c 	andi	r4,r17,1
  80e6a8:	2922b03a 	or	r17,r5,r4
  80e6ac:	1806d07a 	srli	r3,r3,1
  80e6b0:	1462b03a 	or	r17,r2,r17
  80e6b4:	3825883a 	mov	r18,r7
  80e6b8:	003f7106 	br	80e480 <__alt_mem_onchip_mem+0xff78e480>
  80e6bc:	2984b03a 	or	r2,r5,r6
  80e6c0:	103f6826 	beq	r2,zero,80e464 <__alt_mem_onchip_mem+0xff78e464>
  80e6c4:	39c03fcc 	andi	r7,r7,255
  80e6c8:	003f6706 	br	80e468 <__alt_mem_onchip_mem+0xff78e468>
  80e6cc:	4086b03a 	or	r3,r8,r2
  80e6d0:	18015226 	beq	r3,zero,80ec1c <__subdf3+0x820>
  80e6d4:	00c00434 	movhi	r3,16
  80e6d8:	41400234 	orhi	r5,r8,8
  80e6dc:	18ffffc4 	addi	r3,r3,-1
  80e6e0:	28ca703a 	and	r5,r5,r3
  80e6e4:	003f7e06 	br	80e4e0 <__alt_mem_onchip_mem+0xff78e4e0>
  80e6e8:	10bfffc4 	addi	r2,r2,-1
  80e6ec:	1000491e 	bne	r2,zero,80e814 <__subdf3+0x418>
  80e6f0:	898fc83a 	sub	r7,r17,r6
  80e6f4:	89e3803a 	cmpltu	r17,r17,r7
  80e6f8:	1947c83a 	sub	r3,r3,r5
  80e6fc:	1c47c83a 	sub	r3,r3,r17
  80e700:	3823883a 	mov	r17,r7
  80e704:	003f9b06 	br	80e574 <__alt_mem_onchip_mem+0xff78e574>
  80e708:	2988b03a 	or	r4,r5,r6
  80e70c:	203f5c26 	beq	r4,zero,80e480 <__alt_mem_onchip_mem+0xff78e480>
  80e710:	10bfffc4 	addi	r2,r2,-1
  80e714:	1000931e 	bne	r2,zero,80e964 <__subdf3+0x568>
  80e718:	898d883a 	add	r6,r17,r6
  80e71c:	3463803a 	cmpltu	r17,r6,r17
  80e720:	1947883a 	add	r3,r3,r5
  80e724:	88c7883a 	add	r3,r17,r3
  80e728:	3023883a 	mov	r17,r6
  80e72c:	003fd306 	br	80e67c <__alt_mem_onchip_mem+0xff78e67c>
  80e730:	1000541e 	bne	r2,zero,80e884 <__subdf3+0x488>
  80e734:	80800044 	addi	r2,r16,1
  80e738:	1081ffcc 	andi	r2,r2,2047
  80e73c:	01000044 	movi	r4,1
  80e740:	2080a20e 	bge	r4,r2,80e9cc <__subdf3+0x5d0>
  80e744:	8989c83a 	sub	r4,r17,r6
  80e748:	8905803a 	cmpltu	r2,r17,r4
  80e74c:	1967c83a 	sub	r19,r3,r5
  80e750:	98a7c83a 	sub	r19,r19,r2
  80e754:	9880202c 	andhi	r2,r19,128
  80e758:	10006326 	beq	r2,zero,80e8e8 <__subdf3+0x4ec>
  80e75c:	3463c83a 	sub	r17,r6,r17
  80e760:	28c7c83a 	sub	r3,r5,r3
  80e764:	344d803a 	cmpltu	r6,r6,r17
  80e768:	19a7c83a 	sub	r19,r3,r6
  80e76c:	3825883a 	mov	r18,r7
  80e770:	983f861e 	bne	r19,zero,80e58c <__alt_mem_onchip_mem+0xff78e58c>
  80e774:	8809883a 	mov	r4,r17
  80e778:	080eefc0 	call	80eefc <__clzsi2>
  80e77c:	10800804 	addi	r2,r2,32
  80e780:	113ffe04 	addi	r4,r2,-8
  80e784:	00c007c4 	movi	r3,31
  80e788:	193f850e 	bge	r3,r4,80e5a0 <__alt_mem_onchip_mem+0xff78e5a0>
  80e78c:	10bff604 	addi	r2,r2,-40
  80e790:	8884983a 	sll	r2,r17,r2
  80e794:	0023883a 	mov	r17,zero
  80e798:	243f880e 	bge	r4,r16,80e5bc <__alt_mem_onchip_mem+0xff78e5bc>
  80e79c:	00ffe034 	movhi	r3,65408
  80e7a0:	18ffffc4 	addi	r3,r3,-1
  80e7a4:	8121c83a 	sub	r16,r16,r4
  80e7a8:	10c6703a 	and	r3,r2,r3
  80e7ac:	003f3406 	br	80e480 <__alt_mem_onchip_mem+0xff78e480>
  80e7b0:	9100004c 	andi	r4,r18,1
  80e7b4:	000b883a 	mov	r5,zero
  80e7b8:	0005883a 	mov	r2,zero
  80e7bc:	003f4806 	br	80e4e0 <__alt_mem_onchip_mem+0xff78e4e0>
  80e7c0:	298cb03a 	or	r6,r5,r6
  80e7c4:	300cc03a 	cmpne	r6,r6,zero
  80e7c8:	0005883a 	mov	r2,zero
  80e7cc:	003f6406 	br	80e560 <__alt_mem_onchip_mem+0xff78e560>
  80e7d0:	10009a1e 	bne	r2,zero,80ea3c <__subdf3+0x640>
  80e7d4:	82400044 	addi	r9,r16,1
  80e7d8:	4881ffcc 	andi	r2,r9,2047
  80e7dc:	02800044 	movi	r10,1
  80e7e0:	5080670e 	bge	r10,r2,80e980 <__subdf3+0x584>
  80e7e4:	0081ffc4 	movi	r2,2047
  80e7e8:	4880af26 	beq	r9,r2,80eaa8 <__subdf3+0x6ac>
  80e7ec:	898d883a 	add	r6,r17,r6
  80e7f0:	1945883a 	add	r2,r3,r5
  80e7f4:	3447803a 	cmpltu	r3,r6,r17
  80e7f8:	1887883a 	add	r3,r3,r2
  80e7fc:	182297fa 	slli	r17,r3,31
  80e800:	300cd07a 	srli	r6,r6,1
  80e804:	1806d07a 	srli	r3,r3,1
  80e808:	4821883a 	mov	r16,r9
  80e80c:	89a2b03a 	or	r17,r17,r6
  80e810:	003f1b06 	br	80e480 <__alt_mem_onchip_mem+0xff78e480>
  80e814:	0101ffc4 	movi	r4,2047
  80e818:	813f441e 	bne	r16,r4,80e52c <__alt_mem_onchip_mem+0xff78e52c>
  80e81c:	003f1806 	br	80e480 <__alt_mem_onchip_mem+0xff78e480>
  80e820:	843ff844 	addi	r16,r16,-31
  80e824:	01400804 	movi	r5,32
  80e828:	1408d83a 	srl	r4,r2,r16
  80e82c:	19405026 	beq	r3,r5,80e970 <__subdf3+0x574>
  80e830:	01401004 	movi	r5,64
  80e834:	28c7c83a 	sub	r3,r5,r3
  80e838:	10c4983a 	sll	r2,r2,r3
  80e83c:	88a2b03a 	or	r17,r17,r2
  80e840:	8822c03a 	cmpne	r17,r17,zero
  80e844:	2462b03a 	or	r17,r4,r17
  80e848:	0007883a 	mov	r3,zero
  80e84c:	0021883a 	mov	r16,zero
  80e850:	003f6d06 	br	80e608 <__alt_mem_onchip_mem+0xff78e608>
  80e854:	11fff804 	addi	r7,r2,-32
  80e858:	01000804 	movi	r4,32
  80e85c:	29ced83a 	srl	r7,r5,r7
  80e860:	11004526 	beq	r2,r4,80e978 <__subdf3+0x57c>
  80e864:	01001004 	movi	r4,64
  80e868:	2089c83a 	sub	r4,r4,r2
  80e86c:	2904983a 	sll	r2,r5,r4
  80e870:	118cb03a 	or	r6,r2,r6
  80e874:	300cc03a 	cmpne	r6,r6,zero
  80e878:	398cb03a 	or	r6,r7,r6
  80e87c:	0005883a 	mov	r2,zero
  80e880:	003f3706 	br	80e560 <__alt_mem_onchip_mem+0xff78e560>
  80e884:	80002a26 	beq	r16,zero,80e930 <__subdf3+0x534>
  80e888:	0101ffc4 	movi	r4,2047
  80e88c:	49006626 	beq	r9,r4,80ea28 <__subdf3+0x62c>
  80e890:	0085c83a 	sub	r2,zero,r2
  80e894:	18c02034 	orhi	r3,r3,128
  80e898:	01000e04 	movi	r4,56
  80e89c:	20807e16 	blt	r4,r2,80ea98 <__subdf3+0x69c>
  80e8a0:	010007c4 	movi	r4,31
  80e8a4:	2080e716 	blt	r4,r2,80ec44 <__subdf3+0x848>
  80e8a8:	01000804 	movi	r4,32
  80e8ac:	2089c83a 	sub	r4,r4,r2
  80e8b0:	1914983a 	sll	r10,r3,r4
  80e8b4:	8890d83a 	srl	r8,r17,r2
  80e8b8:	8908983a 	sll	r4,r17,r4
  80e8bc:	1884d83a 	srl	r2,r3,r2
  80e8c0:	5222b03a 	or	r17,r10,r8
  80e8c4:	2006c03a 	cmpne	r3,r4,zero
  80e8c8:	88e2b03a 	or	r17,r17,r3
  80e8cc:	3463c83a 	sub	r17,r6,r17
  80e8d0:	2885c83a 	sub	r2,r5,r2
  80e8d4:	344d803a 	cmpltu	r6,r6,r17
  80e8d8:	1187c83a 	sub	r3,r2,r6
  80e8dc:	4821883a 	mov	r16,r9
  80e8e0:	3825883a 	mov	r18,r7
  80e8e4:	003f2306 	br	80e574 <__alt_mem_onchip_mem+0xff78e574>
  80e8e8:	24d0b03a 	or	r8,r4,r19
  80e8ec:	40001b1e 	bne	r8,zero,80e95c <__subdf3+0x560>
  80e8f0:	0005883a 	mov	r2,zero
  80e8f4:	0009883a 	mov	r4,zero
  80e8f8:	0021883a 	mov	r16,zero
  80e8fc:	003f4906 	br	80e624 <__alt_mem_onchip_mem+0xff78e624>
  80e900:	010007c4 	movi	r4,31
  80e904:	20803a16 	blt	r4,r2,80e9f0 <__subdf3+0x5f4>
  80e908:	01000804 	movi	r4,32
  80e90c:	2089c83a 	sub	r4,r4,r2
  80e910:	2912983a 	sll	r9,r5,r4
  80e914:	3090d83a 	srl	r8,r6,r2
  80e918:	3108983a 	sll	r4,r6,r4
  80e91c:	2884d83a 	srl	r2,r5,r2
  80e920:	4a12b03a 	or	r9,r9,r8
  80e924:	2008c03a 	cmpne	r4,r4,zero
  80e928:	4912b03a 	or	r9,r9,r4
  80e92c:	003f4e06 	br	80e668 <__alt_mem_onchip_mem+0xff78e668>
  80e930:	1c48b03a 	or	r4,r3,r17
  80e934:	20003c26 	beq	r4,zero,80ea28 <__subdf3+0x62c>
  80e938:	0084303a 	nor	r2,zero,r2
  80e93c:	1000381e 	bne	r2,zero,80ea20 <__subdf3+0x624>
  80e940:	3463c83a 	sub	r17,r6,r17
  80e944:	28c5c83a 	sub	r2,r5,r3
  80e948:	344d803a 	cmpltu	r6,r6,r17
  80e94c:	1187c83a 	sub	r3,r2,r6
  80e950:	4821883a 	mov	r16,r9
  80e954:	3825883a 	mov	r18,r7
  80e958:	003f0606 	br	80e574 <__alt_mem_onchip_mem+0xff78e574>
  80e95c:	2023883a 	mov	r17,r4
  80e960:	003f0906 	br	80e588 <__alt_mem_onchip_mem+0xff78e588>
  80e964:	0101ffc4 	movi	r4,2047
  80e968:	813f3a1e 	bne	r16,r4,80e654 <__alt_mem_onchip_mem+0xff78e654>
  80e96c:	003ec406 	br	80e480 <__alt_mem_onchip_mem+0xff78e480>
  80e970:	0005883a 	mov	r2,zero
  80e974:	003fb106 	br	80e83c <__alt_mem_onchip_mem+0xff78e83c>
  80e978:	0005883a 	mov	r2,zero
  80e97c:	003fbc06 	br	80e870 <__alt_mem_onchip_mem+0xff78e870>
  80e980:	1c44b03a 	or	r2,r3,r17
  80e984:	80008e1e 	bne	r16,zero,80ebc0 <__subdf3+0x7c4>
  80e988:	1000c826 	beq	r2,zero,80ecac <__subdf3+0x8b0>
  80e98c:	2984b03a 	or	r2,r5,r6
  80e990:	103ebb26 	beq	r2,zero,80e480 <__alt_mem_onchip_mem+0xff78e480>
  80e994:	8989883a 	add	r4,r17,r6
  80e998:	1945883a 	add	r2,r3,r5
  80e99c:	2447803a 	cmpltu	r3,r4,r17
  80e9a0:	1887883a 	add	r3,r3,r2
  80e9a4:	1880202c 	andhi	r2,r3,128
  80e9a8:	2023883a 	mov	r17,r4
  80e9ac:	103f1626 	beq	r2,zero,80e608 <__alt_mem_onchip_mem+0xff78e608>
  80e9b0:	00bfe034 	movhi	r2,65408
  80e9b4:	10bfffc4 	addi	r2,r2,-1
  80e9b8:	5021883a 	mov	r16,r10
  80e9bc:	1886703a 	and	r3,r3,r2
  80e9c0:	003eaf06 	br	80e480 <__alt_mem_onchip_mem+0xff78e480>
  80e9c4:	3825883a 	mov	r18,r7
  80e9c8:	003f0f06 	br	80e608 <__alt_mem_onchip_mem+0xff78e608>
  80e9cc:	1c44b03a 	or	r2,r3,r17
  80e9d0:	8000251e 	bne	r16,zero,80ea68 <__subdf3+0x66c>
  80e9d4:	1000661e 	bne	r2,zero,80eb70 <__subdf3+0x774>
  80e9d8:	2990b03a 	or	r8,r5,r6
  80e9dc:	40009626 	beq	r8,zero,80ec38 <__subdf3+0x83c>
  80e9e0:	2807883a 	mov	r3,r5
  80e9e4:	3023883a 	mov	r17,r6
  80e9e8:	3825883a 	mov	r18,r7
  80e9ec:	003ea406 	br	80e480 <__alt_mem_onchip_mem+0xff78e480>
  80e9f0:	127ff804 	addi	r9,r2,-32
  80e9f4:	01000804 	movi	r4,32
  80e9f8:	2a52d83a 	srl	r9,r5,r9
  80e9fc:	11008c26 	beq	r2,r4,80ec30 <__subdf3+0x834>
  80ea00:	01001004 	movi	r4,64
  80ea04:	2085c83a 	sub	r2,r4,r2
  80ea08:	2884983a 	sll	r2,r5,r2
  80ea0c:	118cb03a 	or	r6,r2,r6
  80ea10:	300cc03a 	cmpne	r6,r6,zero
  80ea14:	4992b03a 	or	r9,r9,r6
  80ea18:	0005883a 	mov	r2,zero
  80ea1c:	003f1206 	br	80e668 <__alt_mem_onchip_mem+0xff78e668>
  80ea20:	0101ffc4 	movi	r4,2047
  80ea24:	493f9c1e 	bne	r9,r4,80e898 <__alt_mem_onchip_mem+0xff78e898>
  80ea28:	2807883a 	mov	r3,r5
  80ea2c:	3023883a 	mov	r17,r6
  80ea30:	4821883a 	mov	r16,r9
  80ea34:	3825883a 	mov	r18,r7
  80ea38:	003e9106 	br	80e480 <__alt_mem_onchip_mem+0xff78e480>
  80ea3c:	80001f1e 	bne	r16,zero,80eabc <__subdf3+0x6c0>
  80ea40:	1c48b03a 	or	r4,r3,r17
  80ea44:	20005a26 	beq	r4,zero,80ebb0 <__subdf3+0x7b4>
  80ea48:	0084303a 	nor	r2,zero,r2
  80ea4c:	1000561e 	bne	r2,zero,80eba8 <__subdf3+0x7ac>
  80ea50:	89a3883a 	add	r17,r17,r6
  80ea54:	1945883a 	add	r2,r3,r5
  80ea58:	898d803a 	cmpltu	r6,r17,r6
  80ea5c:	3087883a 	add	r3,r6,r2
  80ea60:	4821883a 	mov	r16,r9
  80ea64:	003f0506 	br	80e67c <__alt_mem_onchip_mem+0xff78e67c>
  80ea68:	10002b1e 	bne	r2,zero,80eb18 <__subdf3+0x71c>
  80ea6c:	2984b03a 	or	r2,r5,r6
  80ea70:	10008026 	beq	r2,zero,80ec74 <__subdf3+0x878>
  80ea74:	2807883a 	mov	r3,r5
  80ea78:	3023883a 	mov	r17,r6
  80ea7c:	3825883a 	mov	r18,r7
  80ea80:	0401ffc4 	movi	r16,2047
  80ea84:	003e7e06 	br	80e480 <__alt_mem_onchip_mem+0xff78e480>
  80ea88:	3809883a 	mov	r4,r7
  80ea8c:	0011883a 	mov	r8,zero
  80ea90:	0005883a 	mov	r2,zero
  80ea94:	003ee306 	br	80e624 <__alt_mem_onchip_mem+0xff78e624>
  80ea98:	1c62b03a 	or	r17,r3,r17
  80ea9c:	8822c03a 	cmpne	r17,r17,zero
  80eaa0:	0005883a 	mov	r2,zero
  80eaa4:	003f8906 	br	80e8cc <__alt_mem_onchip_mem+0xff78e8cc>
  80eaa8:	3809883a 	mov	r4,r7
  80eaac:	4821883a 	mov	r16,r9
  80eab0:	0011883a 	mov	r8,zero
  80eab4:	0005883a 	mov	r2,zero
  80eab8:	003eda06 	br	80e624 <__alt_mem_onchip_mem+0xff78e624>
  80eabc:	0101ffc4 	movi	r4,2047
  80eac0:	49003b26 	beq	r9,r4,80ebb0 <__subdf3+0x7b4>
  80eac4:	0085c83a 	sub	r2,zero,r2
  80eac8:	18c02034 	orhi	r3,r3,128
  80eacc:	01000e04 	movi	r4,56
  80ead0:	20806e16 	blt	r4,r2,80ec8c <__subdf3+0x890>
  80ead4:	010007c4 	movi	r4,31
  80ead8:	20807716 	blt	r4,r2,80ecb8 <__subdf3+0x8bc>
  80eadc:	01000804 	movi	r4,32
  80eae0:	2089c83a 	sub	r4,r4,r2
  80eae4:	1914983a 	sll	r10,r3,r4
  80eae8:	8890d83a 	srl	r8,r17,r2
  80eaec:	8908983a 	sll	r4,r17,r4
  80eaf0:	1884d83a 	srl	r2,r3,r2
  80eaf4:	5222b03a 	or	r17,r10,r8
  80eaf8:	2006c03a 	cmpne	r3,r4,zero
  80eafc:	88e2b03a 	or	r17,r17,r3
  80eb00:	89a3883a 	add	r17,r17,r6
  80eb04:	1145883a 	add	r2,r2,r5
  80eb08:	898d803a 	cmpltu	r6,r17,r6
  80eb0c:	3087883a 	add	r3,r6,r2
  80eb10:	4821883a 	mov	r16,r9
  80eb14:	003ed906 	br	80e67c <__alt_mem_onchip_mem+0xff78e67c>
  80eb18:	2984b03a 	or	r2,r5,r6
  80eb1c:	10004226 	beq	r2,zero,80ec28 <__subdf3+0x82c>
  80eb20:	1808d0fa 	srli	r4,r3,3
  80eb24:	8822d0fa 	srli	r17,r17,3
  80eb28:	1806977a 	slli	r3,r3,29
  80eb2c:	2080022c 	andhi	r2,r4,8
  80eb30:	1c62b03a 	or	r17,r3,r17
  80eb34:	10000826 	beq	r2,zero,80eb58 <__subdf3+0x75c>
  80eb38:	2812d0fa 	srli	r9,r5,3
  80eb3c:	4880022c 	andhi	r2,r9,8
  80eb40:	1000051e 	bne	r2,zero,80eb58 <__subdf3+0x75c>
  80eb44:	300cd0fa 	srli	r6,r6,3
  80eb48:	2804977a 	slli	r2,r5,29
  80eb4c:	4809883a 	mov	r4,r9
  80eb50:	3825883a 	mov	r18,r7
  80eb54:	11a2b03a 	or	r17,r2,r6
  80eb58:	8806d77a 	srli	r3,r17,29
  80eb5c:	200890fa 	slli	r4,r4,3
  80eb60:	882290fa 	slli	r17,r17,3
  80eb64:	0401ffc4 	movi	r16,2047
  80eb68:	1906b03a 	or	r3,r3,r4
  80eb6c:	003e4406 	br	80e480 <__alt_mem_onchip_mem+0xff78e480>
  80eb70:	2984b03a 	or	r2,r5,r6
  80eb74:	103e4226 	beq	r2,zero,80e480 <__alt_mem_onchip_mem+0xff78e480>
  80eb78:	8989c83a 	sub	r4,r17,r6
  80eb7c:	8911803a 	cmpltu	r8,r17,r4
  80eb80:	1945c83a 	sub	r2,r3,r5
  80eb84:	1205c83a 	sub	r2,r2,r8
  80eb88:	1200202c 	andhi	r8,r2,128
  80eb8c:	403e9a26 	beq	r8,zero,80e5f8 <__alt_mem_onchip_mem+0xff78e5f8>
  80eb90:	3463c83a 	sub	r17,r6,r17
  80eb94:	28c5c83a 	sub	r2,r5,r3
  80eb98:	344d803a 	cmpltu	r6,r6,r17
  80eb9c:	1187c83a 	sub	r3,r2,r6
  80eba0:	3825883a 	mov	r18,r7
  80eba4:	003e3606 	br	80e480 <__alt_mem_onchip_mem+0xff78e480>
  80eba8:	0101ffc4 	movi	r4,2047
  80ebac:	493fc71e 	bne	r9,r4,80eacc <__alt_mem_onchip_mem+0xff78eacc>
  80ebb0:	2807883a 	mov	r3,r5
  80ebb4:	3023883a 	mov	r17,r6
  80ebb8:	4821883a 	mov	r16,r9
  80ebbc:	003e3006 	br	80e480 <__alt_mem_onchip_mem+0xff78e480>
  80ebc0:	10003626 	beq	r2,zero,80ec9c <__subdf3+0x8a0>
  80ebc4:	2984b03a 	or	r2,r5,r6
  80ebc8:	10001726 	beq	r2,zero,80ec28 <__subdf3+0x82c>
  80ebcc:	1808d0fa 	srli	r4,r3,3
  80ebd0:	8822d0fa 	srli	r17,r17,3
  80ebd4:	1806977a 	slli	r3,r3,29
  80ebd8:	2080022c 	andhi	r2,r4,8
  80ebdc:	1c62b03a 	or	r17,r3,r17
  80ebe0:	10000726 	beq	r2,zero,80ec00 <__subdf3+0x804>
  80ebe4:	2812d0fa 	srli	r9,r5,3
  80ebe8:	4880022c 	andhi	r2,r9,8
  80ebec:	1000041e 	bne	r2,zero,80ec00 <__subdf3+0x804>
  80ebf0:	300cd0fa 	srli	r6,r6,3
  80ebf4:	2804977a 	slli	r2,r5,29
  80ebf8:	4809883a 	mov	r4,r9
  80ebfc:	11a2b03a 	or	r17,r2,r6
  80ec00:	8806d77a 	srli	r3,r17,29
  80ec04:	200890fa 	slli	r4,r4,3
  80ec08:	882290fa 	slli	r17,r17,3
  80ec0c:	3825883a 	mov	r18,r7
  80ec10:	1906b03a 	or	r3,r3,r4
  80ec14:	0401ffc4 	movi	r16,2047
  80ec18:	003e1906 	br	80e480 <__alt_mem_onchip_mem+0xff78e480>
  80ec1c:	000b883a 	mov	r5,zero
  80ec20:	0005883a 	mov	r2,zero
  80ec24:	003e2e06 	br	80e4e0 <__alt_mem_onchip_mem+0xff78e4e0>
  80ec28:	0401ffc4 	movi	r16,2047
  80ec2c:	003e1406 	br	80e480 <__alt_mem_onchip_mem+0xff78e480>
  80ec30:	0005883a 	mov	r2,zero
  80ec34:	003f7506 	br	80ea0c <__alt_mem_onchip_mem+0xff78ea0c>
  80ec38:	0005883a 	mov	r2,zero
  80ec3c:	0009883a 	mov	r4,zero
  80ec40:	003e7806 	br	80e624 <__alt_mem_onchip_mem+0xff78e624>
  80ec44:	123ff804 	addi	r8,r2,-32
  80ec48:	01000804 	movi	r4,32
  80ec4c:	1a10d83a 	srl	r8,r3,r8
  80ec50:	11002526 	beq	r2,r4,80ece8 <__subdf3+0x8ec>
  80ec54:	01001004 	movi	r4,64
  80ec58:	2085c83a 	sub	r2,r4,r2
  80ec5c:	1884983a 	sll	r2,r3,r2
  80ec60:	1444b03a 	or	r2,r2,r17
  80ec64:	1004c03a 	cmpne	r2,r2,zero
  80ec68:	40a2b03a 	or	r17,r8,r2
  80ec6c:	0005883a 	mov	r2,zero
  80ec70:	003f1606 	br	80e8cc <__alt_mem_onchip_mem+0xff78e8cc>
  80ec74:	02000434 	movhi	r8,16
  80ec78:	0009883a 	mov	r4,zero
  80ec7c:	423fffc4 	addi	r8,r8,-1
  80ec80:	00bfffc4 	movi	r2,-1
  80ec84:	0401ffc4 	movi	r16,2047
  80ec88:	003e6606 	br	80e624 <__alt_mem_onchip_mem+0xff78e624>
  80ec8c:	1c62b03a 	or	r17,r3,r17
  80ec90:	8822c03a 	cmpne	r17,r17,zero
  80ec94:	0005883a 	mov	r2,zero
  80ec98:	003f9906 	br	80eb00 <__alt_mem_onchip_mem+0xff78eb00>
  80ec9c:	2807883a 	mov	r3,r5
  80eca0:	3023883a 	mov	r17,r6
  80eca4:	0401ffc4 	movi	r16,2047
  80eca8:	003df506 	br	80e480 <__alt_mem_onchip_mem+0xff78e480>
  80ecac:	2807883a 	mov	r3,r5
  80ecb0:	3023883a 	mov	r17,r6
  80ecb4:	003df206 	br	80e480 <__alt_mem_onchip_mem+0xff78e480>
  80ecb8:	123ff804 	addi	r8,r2,-32
  80ecbc:	01000804 	movi	r4,32
  80ecc0:	1a10d83a 	srl	r8,r3,r8
  80ecc4:	11000a26 	beq	r2,r4,80ecf0 <__subdf3+0x8f4>
  80ecc8:	01001004 	movi	r4,64
  80eccc:	2085c83a 	sub	r2,r4,r2
  80ecd0:	1884983a 	sll	r2,r3,r2
  80ecd4:	1444b03a 	or	r2,r2,r17
  80ecd8:	1004c03a 	cmpne	r2,r2,zero
  80ecdc:	40a2b03a 	or	r17,r8,r2
  80ece0:	0005883a 	mov	r2,zero
  80ece4:	003f8606 	br	80eb00 <__alt_mem_onchip_mem+0xff78eb00>
  80ece8:	0005883a 	mov	r2,zero
  80ecec:	003fdc06 	br	80ec60 <__alt_mem_onchip_mem+0xff78ec60>
  80ecf0:	0005883a 	mov	r2,zero
  80ecf4:	003ff706 	br	80ecd4 <__alt_mem_onchip_mem+0xff78ecd4>

0080ecf8 <__fixdfsi>:
  80ecf8:	280cd53a 	srli	r6,r5,20
  80ecfc:	00c00434 	movhi	r3,16
  80ed00:	18ffffc4 	addi	r3,r3,-1
  80ed04:	3181ffcc 	andi	r6,r6,2047
  80ed08:	01c0ff84 	movi	r7,1022
  80ed0c:	28c6703a 	and	r3,r5,r3
  80ed10:	280ad7fa 	srli	r5,r5,31
  80ed14:	3980120e 	bge	r7,r6,80ed60 <__fixdfsi+0x68>
  80ed18:	00810744 	movi	r2,1053
  80ed1c:	11800c16 	blt	r2,r6,80ed50 <__fixdfsi+0x58>
  80ed20:	00810cc4 	movi	r2,1075
  80ed24:	1185c83a 	sub	r2,r2,r6
  80ed28:	01c007c4 	movi	r7,31
  80ed2c:	18c00434 	orhi	r3,r3,16
  80ed30:	38800d16 	blt	r7,r2,80ed68 <__fixdfsi+0x70>
  80ed34:	31befb44 	addi	r6,r6,-1043
  80ed38:	2084d83a 	srl	r2,r4,r2
  80ed3c:	1986983a 	sll	r3,r3,r6
  80ed40:	1884b03a 	or	r2,r3,r2
  80ed44:	28000726 	beq	r5,zero,80ed64 <__fixdfsi+0x6c>
  80ed48:	0085c83a 	sub	r2,zero,r2
  80ed4c:	f800283a 	ret
  80ed50:	00a00034 	movhi	r2,32768
  80ed54:	10bfffc4 	addi	r2,r2,-1
  80ed58:	2885883a 	add	r2,r5,r2
  80ed5c:	f800283a 	ret
  80ed60:	0005883a 	mov	r2,zero
  80ed64:	f800283a 	ret
  80ed68:	008104c4 	movi	r2,1043
  80ed6c:	1185c83a 	sub	r2,r2,r6
  80ed70:	1884d83a 	srl	r2,r3,r2
  80ed74:	003ff306 	br	80ed44 <__alt_mem_onchip_mem+0xff78ed44>

0080ed78 <__floatsidf>:
  80ed78:	defffd04 	addi	sp,sp,-12
  80ed7c:	dfc00215 	stw	ra,8(sp)
  80ed80:	dc400115 	stw	r17,4(sp)
  80ed84:	dc000015 	stw	r16,0(sp)
  80ed88:	20002b26 	beq	r4,zero,80ee38 <__floatsidf+0xc0>
  80ed8c:	2023883a 	mov	r17,r4
  80ed90:	2020d7fa 	srli	r16,r4,31
  80ed94:	20002d16 	blt	r4,zero,80ee4c <__floatsidf+0xd4>
  80ed98:	8809883a 	mov	r4,r17
  80ed9c:	080eefc0 	call	80eefc <__clzsi2>
  80eda0:	01410784 	movi	r5,1054
  80eda4:	288bc83a 	sub	r5,r5,r2
  80eda8:	01010cc4 	movi	r4,1075
  80edac:	2149c83a 	sub	r4,r4,r5
  80edb0:	00c007c4 	movi	r3,31
  80edb4:	1900160e 	bge	r3,r4,80ee10 <__floatsidf+0x98>
  80edb8:	00c104c4 	movi	r3,1043
  80edbc:	1947c83a 	sub	r3,r3,r5
  80edc0:	88c6983a 	sll	r3,r17,r3
  80edc4:	00800434 	movhi	r2,16
  80edc8:	10bfffc4 	addi	r2,r2,-1
  80edcc:	1886703a 	and	r3,r3,r2
  80edd0:	2941ffcc 	andi	r5,r5,2047
  80edd4:	800d883a 	mov	r6,r16
  80edd8:	0005883a 	mov	r2,zero
  80eddc:	280a953a 	slli	r5,r5,20
  80ede0:	31803fcc 	andi	r6,r6,255
  80ede4:	01000434 	movhi	r4,16
  80ede8:	300c97fa 	slli	r6,r6,31
  80edec:	213fffc4 	addi	r4,r4,-1
  80edf0:	1906703a 	and	r3,r3,r4
  80edf4:	1946b03a 	or	r3,r3,r5
  80edf8:	1986b03a 	or	r3,r3,r6
  80edfc:	dfc00217 	ldw	ra,8(sp)
  80ee00:	dc400117 	ldw	r17,4(sp)
  80ee04:	dc000017 	ldw	r16,0(sp)
  80ee08:	dec00304 	addi	sp,sp,12
  80ee0c:	f800283a 	ret
  80ee10:	00c002c4 	movi	r3,11
  80ee14:	1887c83a 	sub	r3,r3,r2
  80ee18:	88c6d83a 	srl	r3,r17,r3
  80ee1c:	8904983a 	sll	r2,r17,r4
  80ee20:	01000434 	movhi	r4,16
  80ee24:	213fffc4 	addi	r4,r4,-1
  80ee28:	2941ffcc 	andi	r5,r5,2047
  80ee2c:	1906703a 	and	r3,r3,r4
  80ee30:	800d883a 	mov	r6,r16
  80ee34:	003fe906 	br	80eddc <__alt_mem_onchip_mem+0xff78eddc>
  80ee38:	000d883a 	mov	r6,zero
  80ee3c:	000b883a 	mov	r5,zero
  80ee40:	0007883a 	mov	r3,zero
  80ee44:	0005883a 	mov	r2,zero
  80ee48:	003fe406 	br	80eddc <__alt_mem_onchip_mem+0xff78eddc>
  80ee4c:	0123c83a 	sub	r17,zero,r4
  80ee50:	003fd106 	br	80ed98 <__alt_mem_onchip_mem+0xff78ed98>

0080ee54 <__floatunsidf>:
  80ee54:	defffe04 	addi	sp,sp,-8
  80ee58:	dc000015 	stw	r16,0(sp)
  80ee5c:	dfc00115 	stw	ra,4(sp)
  80ee60:	2021883a 	mov	r16,r4
  80ee64:	20002226 	beq	r4,zero,80eef0 <__floatunsidf+0x9c>
  80ee68:	080eefc0 	call	80eefc <__clzsi2>
  80ee6c:	01010784 	movi	r4,1054
  80ee70:	2089c83a 	sub	r4,r4,r2
  80ee74:	01810cc4 	movi	r6,1075
  80ee78:	310dc83a 	sub	r6,r6,r4
  80ee7c:	00c007c4 	movi	r3,31
  80ee80:	1980120e 	bge	r3,r6,80eecc <__floatunsidf+0x78>
  80ee84:	00c104c4 	movi	r3,1043
  80ee88:	1907c83a 	sub	r3,r3,r4
  80ee8c:	80ca983a 	sll	r5,r16,r3
  80ee90:	00800434 	movhi	r2,16
  80ee94:	10bfffc4 	addi	r2,r2,-1
  80ee98:	2101ffcc 	andi	r4,r4,2047
  80ee9c:	0021883a 	mov	r16,zero
  80eea0:	288a703a 	and	r5,r5,r2
  80eea4:	2008953a 	slli	r4,r4,20
  80eea8:	00c00434 	movhi	r3,16
  80eeac:	18ffffc4 	addi	r3,r3,-1
  80eeb0:	28c6703a 	and	r3,r5,r3
  80eeb4:	8005883a 	mov	r2,r16
  80eeb8:	1906b03a 	or	r3,r3,r4
  80eebc:	dfc00117 	ldw	ra,4(sp)
  80eec0:	dc000017 	ldw	r16,0(sp)
  80eec4:	dec00204 	addi	sp,sp,8
  80eec8:	f800283a 	ret
  80eecc:	00c002c4 	movi	r3,11
  80eed0:	188bc83a 	sub	r5,r3,r2
  80eed4:	814ad83a 	srl	r5,r16,r5
  80eed8:	00c00434 	movhi	r3,16
  80eedc:	18ffffc4 	addi	r3,r3,-1
  80eee0:	81a0983a 	sll	r16,r16,r6
  80eee4:	2101ffcc 	andi	r4,r4,2047
  80eee8:	28ca703a 	and	r5,r5,r3
  80eeec:	003fed06 	br	80eea4 <__alt_mem_onchip_mem+0xff78eea4>
  80eef0:	0009883a 	mov	r4,zero
  80eef4:	000b883a 	mov	r5,zero
  80eef8:	003fea06 	br	80eea4 <__alt_mem_onchip_mem+0xff78eea4>

0080eefc <__clzsi2>:
  80eefc:	00bfffd4 	movui	r2,65535
  80ef00:	11000536 	bltu	r2,r4,80ef18 <__clzsi2+0x1c>
  80ef04:	00803fc4 	movi	r2,255
  80ef08:	11000f36 	bltu	r2,r4,80ef48 <__clzsi2+0x4c>
  80ef0c:	00800804 	movi	r2,32
  80ef10:	0007883a 	mov	r3,zero
  80ef14:	00000506 	br	80ef2c <__clzsi2+0x30>
  80ef18:	00804034 	movhi	r2,256
  80ef1c:	10bfffc4 	addi	r2,r2,-1
  80ef20:	11000c2e 	bgeu	r2,r4,80ef54 <__clzsi2+0x58>
  80ef24:	00800204 	movi	r2,8
  80ef28:	00c00604 	movi	r3,24
  80ef2c:	20c8d83a 	srl	r4,r4,r3
  80ef30:	00c02074 	movhi	r3,129
  80ef34:	18cdfa04 	addi	r3,r3,14312
  80ef38:	1909883a 	add	r4,r3,r4
  80ef3c:	20c00003 	ldbu	r3,0(r4)
  80ef40:	10c5c83a 	sub	r2,r2,r3
  80ef44:	f800283a 	ret
  80ef48:	00800604 	movi	r2,24
  80ef4c:	00c00204 	movi	r3,8
  80ef50:	003ff606 	br	80ef2c <__alt_mem_onchip_mem+0xff78ef2c>
  80ef54:	00800404 	movi	r2,16
  80ef58:	1007883a 	mov	r3,r2
  80ef5c:	003ff306 	br	80ef2c <__alt_mem_onchip_mem+0xff78ef2c>

0080ef60 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80ef60:	defff504 	addi	sp,sp,-44
  80ef64:	df000a15 	stw	fp,40(sp)
  80ef68:	df000a04 	addi	fp,sp,40
  80ef6c:	e13ffc15 	stw	r4,-16(fp)
  80ef70:	e17ffd15 	stw	r5,-12(fp)
  80ef74:	e1bffe15 	stw	r6,-8(fp)
  80ef78:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80ef7c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80ef80:	d0a77017 	ldw	r2,-25152(gp)
  
  if (alt_ticks_per_second ())
  80ef84:	10003c26 	beq	r2,zero,80f078 <alt_alarm_start+0x118>
  {
    if (alarm)
  80ef88:	e0bffc17 	ldw	r2,-16(fp)
  80ef8c:	10003826 	beq	r2,zero,80f070 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80ef90:	e0bffc17 	ldw	r2,-16(fp)
  80ef94:	e0fffe17 	ldw	r3,-8(fp)
  80ef98:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80ef9c:	e0bffc17 	ldw	r2,-16(fp)
  80efa0:	e0ffff17 	ldw	r3,-4(fp)
  80efa4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80efa8:	0005303a 	rdctl	r2,status
  80efac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80efb0:	e0fff917 	ldw	r3,-28(fp)
  80efb4:	00bfff84 	movi	r2,-2
  80efb8:	1884703a 	and	r2,r3,r2
  80efbc:	1001703a 	wrctl	status,r2
  
  return context;
  80efc0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80efc4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80efc8:	d0a77117 	ldw	r2,-25148(gp)
      
      current_nticks = alt_nticks();
  80efcc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80efd0:	e0fffd17 	ldw	r3,-12(fp)
  80efd4:	e0bff617 	ldw	r2,-40(fp)
  80efd8:	1885883a 	add	r2,r3,r2
  80efdc:	10c00044 	addi	r3,r2,1
  80efe0:	e0bffc17 	ldw	r2,-16(fp)
  80efe4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80efe8:	e0bffc17 	ldw	r2,-16(fp)
  80efec:	10c00217 	ldw	r3,8(r2)
  80eff0:	e0bff617 	ldw	r2,-40(fp)
  80eff4:	1880042e 	bgeu	r3,r2,80f008 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80eff8:	e0bffc17 	ldw	r2,-16(fp)
  80effc:	00c00044 	movi	r3,1
  80f000:	10c00405 	stb	r3,16(r2)
  80f004:	00000206 	br	80f010 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80f008:	e0bffc17 	ldw	r2,-16(fp)
  80f00c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80f010:	e0bffc17 	ldw	r2,-16(fp)
  80f014:	d0e01704 	addi	r3,gp,-32676
  80f018:	e0fffa15 	stw	r3,-24(fp)
  80f01c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80f020:	e0bffb17 	ldw	r2,-20(fp)
  80f024:	e0fffa17 	ldw	r3,-24(fp)
  80f028:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80f02c:	e0bffa17 	ldw	r2,-24(fp)
  80f030:	10c00017 	ldw	r3,0(r2)
  80f034:	e0bffb17 	ldw	r2,-20(fp)
  80f038:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80f03c:	e0bffa17 	ldw	r2,-24(fp)
  80f040:	10800017 	ldw	r2,0(r2)
  80f044:	e0fffb17 	ldw	r3,-20(fp)
  80f048:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80f04c:	e0bffa17 	ldw	r2,-24(fp)
  80f050:	e0fffb17 	ldw	r3,-20(fp)
  80f054:	10c00015 	stw	r3,0(r2)
  80f058:	e0bff817 	ldw	r2,-32(fp)
  80f05c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f060:	e0bff717 	ldw	r2,-36(fp)
  80f064:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80f068:	0005883a 	mov	r2,zero
  80f06c:	00000306 	br	80f07c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80f070:	00bffa84 	movi	r2,-22
  80f074:	00000106 	br	80f07c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80f078:	00bfde84 	movi	r2,-134
  }
}
  80f07c:	e037883a 	mov	sp,fp
  80f080:	df000017 	ldw	fp,0(sp)
  80f084:	dec00104 	addi	sp,sp,4
  80f088:	f800283a 	ret

0080f08c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f08c:	defffe04 	addi	sp,sp,-8
  80f090:	dfc00115 	stw	ra,4(sp)
  80f094:	df000015 	stw	fp,0(sp)
  80f098:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f09c:	d0a01417 	ldw	r2,-32688(gp)
  80f0a0:	10000326 	beq	r2,zero,80f0b0 <alt_get_errno+0x24>
  80f0a4:	d0a01417 	ldw	r2,-32688(gp)
  80f0a8:	103ee83a 	callr	r2
  80f0ac:	00000106 	br	80f0b4 <alt_get_errno+0x28>
  80f0b0:	d0a76504 	addi	r2,gp,-25196
}
  80f0b4:	e037883a 	mov	sp,fp
  80f0b8:	dfc00117 	ldw	ra,4(sp)
  80f0bc:	df000017 	ldw	fp,0(sp)
  80f0c0:	dec00204 	addi	sp,sp,8
  80f0c4:	f800283a 	ret

0080f0c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80f0c8:	defffb04 	addi	sp,sp,-20
  80f0cc:	dfc00415 	stw	ra,16(sp)
  80f0d0:	df000315 	stw	fp,12(sp)
  80f0d4:	df000304 	addi	fp,sp,12
  80f0d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80f0dc:	e0bfff17 	ldw	r2,-4(fp)
  80f0e0:	10000616 	blt	r2,zero,80f0fc <close+0x34>
  80f0e4:	e0bfff17 	ldw	r2,-4(fp)
  80f0e8:	10c00324 	muli	r3,r2,12
  80f0ec:	00802074 	movhi	r2,129
  80f0f0:	10907e04 	addi	r2,r2,16888
  80f0f4:	1885883a 	add	r2,r3,r2
  80f0f8:	00000106 	br	80f100 <close+0x38>
  80f0fc:	0005883a 	mov	r2,zero
  80f100:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80f104:	e0bffd17 	ldw	r2,-12(fp)
  80f108:	10001926 	beq	r2,zero,80f170 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80f10c:	e0bffd17 	ldw	r2,-12(fp)
  80f110:	10800017 	ldw	r2,0(r2)
  80f114:	10800417 	ldw	r2,16(r2)
  80f118:	10000626 	beq	r2,zero,80f134 <close+0x6c>
  80f11c:	e0bffd17 	ldw	r2,-12(fp)
  80f120:	10800017 	ldw	r2,0(r2)
  80f124:	10800417 	ldw	r2,16(r2)
  80f128:	e13ffd17 	ldw	r4,-12(fp)
  80f12c:	103ee83a 	callr	r2
  80f130:	00000106 	br	80f138 <close+0x70>
  80f134:	0005883a 	mov	r2,zero
  80f138:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80f13c:	e13fff17 	ldw	r4,-4(fp)
  80f140:	080fb5c0 	call	80fb5c <alt_release_fd>
    if (rval < 0)
  80f144:	e0bffe17 	ldw	r2,-8(fp)
  80f148:	1000070e 	bge	r2,zero,80f168 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80f14c:	080f08c0 	call	80f08c <alt_get_errno>
  80f150:	1007883a 	mov	r3,r2
  80f154:	e0bffe17 	ldw	r2,-8(fp)
  80f158:	0085c83a 	sub	r2,zero,r2
  80f15c:	18800015 	stw	r2,0(r3)
      return -1;
  80f160:	00bfffc4 	movi	r2,-1
  80f164:	00000706 	br	80f184 <close+0xbc>
    }
    return 0;
  80f168:	0005883a 	mov	r2,zero
  80f16c:	00000506 	br	80f184 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80f170:	080f08c0 	call	80f08c <alt_get_errno>
  80f174:	1007883a 	mov	r3,r2
  80f178:	00801444 	movi	r2,81
  80f17c:	18800015 	stw	r2,0(r3)
    return -1;
  80f180:	00bfffc4 	movi	r2,-1
  }
}
  80f184:	e037883a 	mov	sp,fp
  80f188:	dfc00117 	ldw	ra,4(sp)
  80f18c:	df000017 	ldw	fp,0(sp)
  80f190:	dec00204 	addi	sp,sp,8
  80f194:	f800283a 	ret

0080f198 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80f198:	defffc04 	addi	sp,sp,-16
  80f19c:	df000315 	stw	fp,12(sp)
  80f1a0:	df000304 	addi	fp,sp,12
  80f1a4:	e13ffd15 	stw	r4,-12(fp)
  80f1a8:	e17ffe15 	stw	r5,-8(fp)
  80f1ac:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80f1b0:	e0bfff17 	ldw	r2,-4(fp)
}
  80f1b4:	e037883a 	mov	sp,fp
  80f1b8:	df000017 	ldw	fp,0(sp)
  80f1bc:	dec00104 	addi	sp,sp,4
  80f1c0:	f800283a 	ret

0080f1c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f1c4:	defffe04 	addi	sp,sp,-8
  80f1c8:	dfc00115 	stw	ra,4(sp)
  80f1cc:	df000015 	stw	fp,0(sp)
  80f1d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f1d4:	d0a01417 	ldw	r2,-32688(gp)
  80f1d8:	10000326 	beq	r2,zero,80f1e8 <alt_get_errno+0x24>
  80f1dc:	d0a01417 	ldw	r2,-32688(gp)
  80f1e0:	103ee83a 	callr	r2
  80f1e4:	00000106 	br	80f1ec <alt_get_errno+0x28>
  80f1e8:	d0a76504 	addi	r2,gp,-25196
}
  80f1ec:	e037883a 	mov	sp,fp
  80f1f0:	dfc00117 	ldw	ra,4(sp)
  80f1f4:	df000017 	ldw	fp,0(sp)
  80f1f8:	dec00204 	addi	sp,sp,8
  80f1fc:	f800283a 	ret

0080f200 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80f200:	defffb04 	addi	sp,sp,-20
  80f204:	dfc00415 	stw	ra,16(sp)
  80f208:	df000315 	stw	fp,12(sp)
  80f20c:	df000304 	addi	fp,sp,12
  80f210:	e13ffe15 	stw	r4,-8(fp)
  80f214:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f218:	e0bffe17 	ldw	r2,-8(fp)
  80f21c:	10000616 	blt	r2,zero,80f238 <fstat+0x38>
  80f220:	e0bffe17 	ldw	r2,-8(fp)
  80f224:	10c00324 	muli	r3,r2,12
  80f228:	00802074 	movhi	r2,129
  80f22c:	10907e04 	addi	r2,r2,16888
  80f230:	1885883a 	add	r2,r3,r2
  80f234:	00000106 	br	80f23c <fstat+0x3c>
  80f238:	0005883a 	mov	r2,zero
  80f23c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80f240:	e0bffd17 	ldw	r2,-12(fp)
  80f244:	10001026 	beq	r2,zero,80f288 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80f248:	e0bffd17 	ldw	r2,-12(fp)
  80f24c:	10800017 	ldw	r2,0(r2)
  80f250:	10800817 	ldw	r2,32(r2)
  80f254:	10000726 	beq	r2,zero,80f274 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80f258:	e0bffd17 	ldw	r2,-12(fp)
  80f25c:	10800017 	ldw	r2,0(r2)
  80f260:	10800817 	ldw	r2,32(r2)
  80f264:	e17fff17 	ldw	r5,-4(fp)
  80f268:	e13ffd17 	ldw	r4,-12(fp)
  80f26c:	103ee83a 	callr	r2
  80f270:	00000a06 	br	80f29c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80f274:	e0bfff17 	ldw	r2,-4(fp)
  80f278:	00c80004 	movi	r3,8192
  80f27c:	10c00115 	stw	r3,4(r2)
      return 0;
  80f280:	0005883a 	mov	r2,zero
  80f284:	00000506 	br	80f29c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80f288:	080f1c40 	call	80f1c4 <alt_get_errno>
  80f28c:	1007883a 	mov	r3,r2
  80f290:	00801444 	movi	r2,81
  80f294:	18800015 	stw	r2,0(r3)
    return -1;
  80f298:	00bfffc4 	movi	r2,-1
  }
}
  80f29c:	e037883a 	mov	sp,fp
  80f2a0:	dfc00117 	ldw	ra,4(sp)
  80f2a4:	df000017 	ldw	fp,0(sp)
  80f2a8:	dec00204 	addi	sp,sp,8
  80f2ac:	f800283a 	ret

0080f2b0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80f2b0:	defff004 	addi	sp,sp,-64
  80f2b4:	df000f15 	stw	fp,60(sp)
  80f2b8:	df000f04 	addi	fp,sp,60
  80f2bc:	e13ffd15 	stw	r4,-12(fp)
  80f2c0:	e17ffe15 	stw	r5,-8(fp)
  80f2c4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  80f2c8:	00bffa84 	movi	r2,-22
  80f2cc:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80f2d0:	e0bffd17 	ldw	r2,-12(fp)
  80f2d4:	10800828 	cmpgeui	r2,r2,32
  80f2d8:	1000501e 	bne	r2,zero,80f41c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f2dc:	0005303a 	rdctl	r2,status
  80f2e0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f2e4:	e0fff617 	ldw	r3,-40(fp)
  80f2e8:	00bfff84 	movi	r2,-2
  80f2ec:	1884703a 	and	r2,r3,r2
  80f2f0:	1001703a 	wrctl	status,r2
  
  return context;
  80f2f4:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80f2f8:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  80f2fc:	00802074 	movhi	r2,129
  80f300:	109d0b04 	addi	r2,r2,29740
  80f304:	e0fffd17 	ldw	r3,-12(fp)
  80f308:	180690fa 	slli	r3,r3,3
  80f30c:	10c5883a 	add	r2,r2,r3
  80f310:	e0ffff17 	ldw	r3,-4(fp)
  80f314:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  80f318:	00802074 	movhi	r2,129
  80f31c:	109d0b04 	addi	r2,r2,29740
  80f320:	e0fffd17 	ldw	r3,-12(fp)
  80f324:	180690fa 	slli	r3,r3,3
  80f328:	10c5883a 	add	r2,r2,r3
  80f32c:	10800104 	addi	r2,r2,4
  80f330:	e0fffe17 	ldw	r3,-8(fp)
  80f334:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80f338:	e0bfff17 	ldw	r2,-4(fp)
  80f33c:	10001926 	beq	r2,zero,80f3a4 <alt_irq_register+0xf4>
  80f340:	e0bffd17 	ldw	r2,-12(fp)
  80f344:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f348:	0005303a 	rdctl	r2,status
  80f34c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f350:	e0fff717 	ldw	r3,-36(fp)
  80f354:	00bfff84 	movi	r2,-2
  80f358:	1884703a 	and	r2,r3,r2
  80f35c:	1001703a 	wrctl	status,r2
  
  return context;
  80f360:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80f364:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80f368:	00c00044 	movi	r3,1
  80f36c:	e0bff217 	ldw	r2,-56(fp)
  80f370:	1884983a 	sll	r2,r3,r2
  80f374:	1007883a 	mov	r3,r2
  80f378:	d0a76c17 	ldw	r2,-25168(gp)
  80f37c:	1884b03a 	or	r2,r3,r2
  80f380:	d0a76c15 	stw	r2,-25168(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80f384:	d0a76c17 	ldw	r2,-25168(gp)
  80f388:	100170fa 	wrctl	ienable,r2
  80f38c:	e0bff817 	ldw	r2,-32(fp)
  80f390:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f394:	e0bff917 	ldw	r2,-28(fp)
  80f398:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80f39c:	0005883a 	mov	r2,zero
  80f3a0:	00001906 	br	80f408 <alt_irq_register+0x158>
  80f3a4:	e0bffd17 	ldw	r2,-12(fp)
  80f3a8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f3ac:	0005303a 	rdctl	r2,status
  80f3b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f3b4:	e0fffa17 	ldw	r3,-24(fp)
  80f3b8:	00bfff84 	movi	r2,-2
  80f3bc:	1884703a 	and	r2,r3,r2
  80f3c0:	1001703a 	wrctl	status,r2
  
  return context;
  80f3c4:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80f3c8:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  80f3cc:	00c00044 	movi	r3,1
  80f3d0:	e0bff417 	ldw	r2,-48(fp)
  80f3d4:	1884983a 	sll	r2,r3,r2
  80f3d8:	0084303a 	nor	r2,zero,r2
  80f3dc:	1007883a 	mov	r3,r2
  80f3e0:	d0a76c17 	ldw	r2,-25168(gp)
  80f3e4:	1884703a 	and	r2,r3,r2
  80f3e8:	d0a76c15 	stw	r2,-25168(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80f3ec:	d0a76c17 	ldw	r2,-25168(gp)
  80f3f0:	100170fa 	wrctl	ienable,r2
  80f3f4:	e0bffb17 	ldw	r2,-20(fp)
  80f3f8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f3fc:	e0bffc17 	ldw	r2,-16(fp)
  80f400:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80f404:	0005883a 	mov	r2,zero
  80f408:	e0bff115 	stw	r2,-60(fp)
  80f40c:	e0bff317 	ldw	r2,-52(fp)
  80f410:	e0bff515 	stw	r2,-44(fp)
  80f414:	e0bff517 	ldw	r2,-44(fp)
  80f418:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80f41c:	e0bff117 	ldw	r2,-60(fp)
}
  80f420:	e037883a 	mov	sp,fp
  80f424:	df000017 	ldw	fp,0(sp)
  80f428:	dec00104 	addi	sp,sp,4
  80f42c:	f800283a 	ret

0080f430 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f430:	defffe04 	addi	sp,sp,-8
  80f434:	dfc00115 	stw	ra,4(sp)
  80f438:	df000015 	stw	fp,0(sp)
  80f43c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f440:	d0a01417 	ldw	r2,-32688(gp)
  80f444:	10000326 	beq	r2,zero,80f454 <alt_get_errno+0x24>
  80f448:	d0a01417 	ldw	r2,-32688(gp)
  80f44c:	103ee83a 	callr	r2
  80f450:	00000106 	br	80f458 <alt_get_errno+0x28>
  80f454:	d0a76504 	addi	r2,gp,-25196
}
  80f458:	e037883a 	mov	sp,fp
  80f45c:	dfc00117 	ldw	ra,4(sp)
  80f460:	df000017 	ldw	fp,0(sp)
  80f464:	dec00204 	addi	sp,sp,8
  80f468:	f800283a 	ret

0080f46c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80f46c:	deffed04 	addi	sp,sp,-76
  80f470:	dfc01215 	stw	ra,72(sp)
  80f474:	df001115 	stw	fp,68(sp)
  80f478:	df001104 	addi	fp,sp,68
  80f47c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f480:	e0bfff17 	ldw	r2,-4(fp)
  80f484:	10000616 	blt	r2,zero,80f4a0 <isatty+0x34>
  80f488:	e0bfff17 	ldw	r2,-4(fp)
  80f48c:	10c00324 	muli	r3,r2,12
  80f490:	00802074 	movhi	r2,129
  80f494:	10907e04 	addi	r2,r2,16888
  80f498:	1885883a 	add	r2,r3,r2
  80f49c:	00000106 	br	80f4a4 <isatty+0x38>
  80f4a0:	0005883a 	mov	r2,zero
  80f4a4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80f4a8:	e0bfef17 	ldw	r2,-68(fp)
  80f4ac:	10000e26 	beq	r2,zero,80f4e8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80f4b0:	e0bfef17 	ldw	r2,-68(fp)
  80f4b4:	10800017 	ldw	r2,0(r2)
  80f4b8:	10800817 	ldw	r2,32(r2)
  80f4bc:	1000021e 	bne	r2,zero,80f4c8 <isatty+0x5c>
    {
      return 1;
  80f4c0:	00800044 	movi	r2,1
  80f4c4:	00000d06 	br	80f4fc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80f4c8:	e0bff004 	addi	r2,fp,-64
  80f4cc:	100b883a 	mov	r5,r2
  80f4d0:	e13fff17 	ldw	r4,-4(fp)
  80f4d4:	080f2000 	call	80f200 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80f4d8:	e0bff117 	ldw	r2,-60(fp)
  80f4dc:	10880020 	cmpeqi	r2,r2,8192
  80f4e0:	10803fcc 	andi	r2,r2,255
  80f4e4:	00000506 	br	80f4fc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80f4e8:	080f4300 	call	80f430 <alt_get_errno>
  80f4ec:	1007883a 	mov	r3,r2
  80f4f0:	00801444 	movi	r2,81
  80f4f4:	18800015 	stw	r2,0(r3)
    return 0;
  80f4f8:	0005883a 	mov	r2,zero
  }
}
  80f4fc:	e037883a 	mov	sp,fp
  80f500:	dfc00117 	ldw	ra,4(sp)
  80f504:	df000017 	ldw	fp,0(sp)
  80f508:	dec00204 	addi	sp,sp,8
  80f50c:	f800283a 	ret

0080f510 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80f510:	defffc04 	addi	sp,sp,-16
  80f514:	df000315 	stw	fp,12(sp)
  80f518:	df000304 	addi	fp,sp,12
  80f51c:	e13ffd15 	stw	r4,-12(fp)
  80f520:	e17ffe15 	stw	r5,-8(fp)
  80f524:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80f528:	e0fffe17 	ldw	r3,-8(fp)
  80f52c:	e0bffd17 	ldw	r2,-12(fp)
  80f530:	18800c26 	beq	r3,r2,80f564 <alt_load_section+0x54>
  {
    while( to != end )
  80f534:	00000806 	br	80f558 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80f538:	e0bffe17 	ldw	r2,-8(fp)
  80f53c:	10c00104 	addi	r3,r2,4
  80f540:	e0fffe15 	stw	r3,-8(fp)
  80f544:	e0fffd17 	ldw	r3,-12(fp)
  80f548:	19000104 	addi	r4,r3,4
  80f54c:	e13ffd15 	stw	r4,-12(fp)
  80f550:	18c00017 	ldw	r3,0(r3)
  80f554:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80f558:	e0fffe17 	ldw	r3,-8(fp)
  80f55c:	e0bfff17 	ldw	r2,-4(fp)
  80f560:	18bff51e 	bne	r3,r2,80f538 <__alt_mem_onchip_mem+0xff78f538>
    {
      *to++ = *from++;
    }
  }
}
  80f564:	0001883a 	nop
  80f568:	e037883a 	mov	sp,fp
  80f56c:	df000017 	ldw	fp,0(sp)
  80f570:	dec00104 	addi	sp,sp,4
  80f574:	f800283a 	ret

0080f578 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80f578:	defffe04 	addi	sp,sp,-8
  80f57c:	dfc00115 	stw	ra,4(sp)
  80f580:	df000015 	stw	fp,0(sp)
  80f584:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80f588:	01802074 	movhi	r6,129
  80f58c:	31958904 	addi	r6,r6,22052
  80f590:	01402074 	movhi	r5,129
  80f594:	294e4b04 	addi	r5,r5,14636
  80f598:	01002074 	movhi	r4,129
  80f59c:	21158904 	addi	r4,r4,22052
  80f5a0:	080f5100 	call	80f510 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80f5a4:	01802034 	movhi	r6,128
  80f5a8:	31809104 	addi	r6,r6,580
  80f5ac:	01402034 	movhi	r5,128
  80f5b0:	29400804 	addi	r5,r5,32
  80f5b4:	01002034 	movhi	r4,128
  80f5b8:	21000804 	addi	r4,r4,32
  80f5bc:	080f5100 	call	80f510 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80f5c0:	01802074 	movhi	r6,129
  80f5c4:	318e4b04 	addi	r6,r6,14636
  80f5c8:	01402074 	movhi	r5,129
  80f5cc:	294c8104 	addi	r5,r5,12804
  80f5d0:	01002074 	movhi	r4,129
  80f5d4:	210c8104 	addi	r4,r4,12804
  80f5d8:	080f5100 	call	80f510 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80f5dc:	08123600 	call	812360 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80f5e0:	08127840 	call	812784 <alt_icache_flush_all>
}
  80f5e4:	0001883a 	nop
  80f5e8:	e037883a 	mov	sp,fp
  80f5ec:	dfc00117 	ldw	ra,4(sp)
  80f5f0:	df000017 	ldw	fp,0(sp)
  80f5f4:	dec00204 	addi	sp,sp,8
  80f5f8:	f800283a 	ret

0080f5fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f5fc:	defffe04 	addi	sp,sp,-8
  80f600:	dfc00115 	stw	ra,4(sp)
  80f604:	df000015 	stw	fp,0(sp)
  80f608:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f60c:	d0a01417 	ldw	r2,-32688(gp)
  80f610:	10000326 	beq	r2,zero,80f620 <alt_get_errno+0x24>
  80f614:	d0a01417 	ldw	r2,-32688(gp)
  80f618:	103ee83a 	callr	r2
  80f61c:	00000106 	br	80f624 <alt_get_errno+0x28>
  80f620:	d0a76504 	addi	r2,gp,-25196
}
  80f624:	e037883a 	mov	sp,fp
  80f628:	dfc00117 	ldw	ra,4(sp)
  80f62c:	df000017 	ldw	fp,0(sp)
  80f630:	dec00204 	addi	sp,sp,8
  80f634:	f800283a 	ret

0080f638 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80f638:	defff904 	addi	sp,sp,-28
  80f63c:	dfc00615 	stw	ra,24(sp)
  80f640:	df000515 	stw	fp,20(sp)
  80f644:	df000504 	addi	fp,sp,20
  80f648:	e13ffd15 	stw	r4,-12(fp)
  80f64c:	e17ffe15 	stw	r5,-8(fp)
  80f650:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80f654:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f658:	e0bffd17 	ldw	r2,-12(fp)
  80f65c:	10000616 	blt	r2,zero,80f678 <lseek+0x40>
  80f660:	e0bffd17 	ldw	r2,-12(fp)
  80f664:	10c00324 	muli	r3,r2,12
  80f668:	00802074 	movhi	r2,129
  80f66c:	10907e04 	addi	r2,r2,16888
  80f670:	1885883a 	add	r2,r3,r2
  80f674:	00000106 	br	80f67c <lseek+0x44>
  80f678:	0005883a 	mov	r2,zero
  80f67c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80f680:	e0bffc17 	ldw	r2,-16(fp)
  80f684:	10001026 	beq	r2,zero,80f6c8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80f688:	e0bffc17 	ldw	r2,-16(fp)
  80f68c:	10800017 	ldw	r2,0(r2)
  80f690:	10800717 	ldw	r2,28(r2)
  80f694:	10000926 	beq	r2,zero,80f6bc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80f698:	e0bffc17 	ldw	r2,-16(fp)
  80f69c:	10800017 	ldw	r2,0(r2)
  80f6a0:	10800717 	ldw	r2,28(r2)
  80f6a4:	e1bfff17 	ldw	r6,-4(fp)
  80f6a8:	e17ffe17 	ldw	r5,-8(fp)
  80f6ac:	e13ffc17 	ldw	r4,-16(fp)
  80f6b0:	103ee83a 	callr	r2
  80f6b4:	e0bffb15 	stw	r2,-20(fp)
  80f6b8:	00000506 	br	80f6d0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80f6bc:	00bfde84 	movi	r2,-134
  80f6c0:	e0bffb15 	stw	r2,-20(fp)
  80f6c4:	00000206 	br	80f6d0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80f6c8:	00bfebc4 	movi	r2,-81
  80f6cc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80f6d0:	e0bffb17 	ldw	r2,-20(fp)
  80f6d4:	1000070e 	bge	r2,zero,80f6f4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80f6d8:	080f5fc0 	call	80f5fc <alt_get_errno>
  80f6dc:	1007883a 	mov	r3,r2
  80f6e0:	e0bffb17 	ldw	r2,-20(fp)
  80f6e4:	0085c83a 	sub	r2,zero,r2
  80f6e8:	18800015 	stw	r2,0(r3)
    rc = -1;
  80f6ec:	00bfffc4 	movi	r2,-1
  80f6f0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80f6f4:	e0bffb17 	ldw	r2,-20(fp)
}
  80f6f8:	e037883a 	mov	sp,fp
  80f6fc:	dfc00117 	ldw	ra,4(sp)
  80f700:	df000017 	ldw	fp,0(sp)
  80f704:	dec00204 	addi	sp,sp,8
  80f708:	f800283a 	ret

0080f70c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80f70c:	defffd04 	addi	sp,sp,-12
  80f710:	dfc00215 	stw	ra,8(sp)
  80f714:	df000115 	stw	fp,4(sp)
  80f718:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80f71c:	0009883a 	mov	r4,zero
  80f720:	080ff7c0 	call	80ff7c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80f724:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80f728:	080ffb40 	call	80ffb4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80f72c:	01802074 	movhi	r6,129
  80f730:	318e3d04 	addi	r6,r6,14580
  80f734:	01402074 	movhi	r5,129
  80f738:	294e3d04 	addi	r5,r5,14580
  80f73c:	01002074 	movhi	r4,129
  80f740:	210e3d04 	addi	r4,r4,14580
  80f744:	0812b1c0 	call	812b1c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80f748:	08124880 	call	812488 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80f74c:	01002074 	movhi	r4,129
  80f750:	21093a04 	addi	r4,r4,9448
  80f754:	0812e700 	call	812e70 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80f758:	d0a76d17 	ldw	r2,-25164(gp)
  80f75c:	d0e76e17 	ldw	r3,-25160(gp)
  80f760:	d1276f17 	ldw	r4,-25156(gp)
  80f764:	200d883a 	mov	r6,r4
  80f768:	180b883a 	mov	r5,r3
  80f76c:	1009883a 	mov	r4,r2
  80f770:	08013e40 	call	8013e4 <main>
  80f774:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80f778:	01000044 	movi	r4,1
  80f77c:	080f0c80 	call	80f0c8 <close>
  exit (result);
  80f780:	e13fff17 	ldw	r4,-4(fp)
  80f784:	0812e840 	call	812e84 <exit>

0080f788 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80f788:	defffe04 	addi	sp,sp,-8
  80f78c:	df000115 	stw	fp,4(sp)
  80f790:	df000104 	addi	fp,sp,4
  80f794:	e13fff15 	stw	r4,-4(fp)
}
  80f798:	0001883a 	nop
  80f79c:	e037883a 	mov	sp,fp
  80f7a0:	df000017 	ldw	fp,0(sp)
  80f7a4:	dec00104 	addi	sp,sp,4
  80f7a8:	f800283a 	ret

0080f7ac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80f7ac:	defffe04 	addi	sp,sp,-8
  80f7b0:	df000115 	stw	fp,4(sp)
  80f7b4:	df000104 	addi	fp,sp,4
  80f7b8:	e13fff15 	stw	r4,-4(fp)
}
  80f7bc:	0001883a 	nop
  80f7c0:	e037883a 	mov	sp,fp
  80f7c4:	df000017 	ldw	fp,0(sp)
  80f7c8:	dec00104 	addi	sp,sp,4
  80f7cc:	f800283a 	ret

0080f7d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f7d0:	defffe04 	addi	sp,sp,-8
  80f7d4:	dfc00115 	stw	ra,4(sp)
  80f7d8:	df000015 	stw	fp,0(sp)
  80f7dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f7e0:	d0a01417 	ldw	r2,-32688(gp)
  80f7e4:	10000326 	beq	r2,zero,80f7f4 <alt_get_errno+0x24>
  80f7e8:	d0a01417 	ldw	r2,-32688(gp)
  80f7ec:	103ee83a 	callr	r2
  80f7f0:	00000106 	br	80f7f8 <alt_get_errno+0x28>
  80f7f4:	d0a76504 	addi	r2,gp,-25196
}
  80f7f8:	e037883a 	mov	sp,fp
  80f7fc:	dfc00117 	ldw	ra,4(sp)
  80f800:	df000017 	ldw	fp,0(sp)
  80f804:	dec00204 	addi	sp,sp,8
  80f808:	f800283a 	ret

0080f80c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80f80c:	defffd04 	addi	sp,sp,-12
  80f810:	df000215 	stw	fp,8(sp)
  80f814:	df000204 	addi	fp,sp,8
  80f818:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80f81c:	e0bfff17 	ldw	r2,-4(fp)
  80f820:	10800217 	ldw	r2,8(r2)
  80f824:	10d00034 	orhi	r3,r2,16384
  80f828:	e0bfff17 	ldw	r2,-4(fp)
  80f82c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f830:	e03ffe15 	stw	zero,-8(fp)
  80f834:	00001d06 	br	80f8ac <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80f838:	00802074 	movhi	r2,129
  80f83c:	10907e04 	addi	r2,r2,16888
  80f840:	e0fffe17 	ldw	r3,-8(fp)
  80f844:	18c00324 	muli	r3,r3,12
  80f848:	10c5883a 	add	r2,r2,r3
  80f84c:	10c00017 	ldw	r3,0(r2)
  80f850:	e0bfff17 	ldw	r2,-4(fp)
  80f854:	10800017 	ldw	r2,0(r2)
  80f858:	1880111e 	bne	r3,r2,80f8a0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80f85c:	00802074 	movhi	r2,129
  80f860:	10907e04 	addi	r2,r2,16888
  80f864:	e0fffe17 	ldw	r3,-8(fp)
  80f868:	18c00324 	muli	r3,r3,12
  80f86c:	10c5883a 	add	r2,r2,r3
  80f870:	10800204 	addi	r2,r2,8
  80f874:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80f878:	1000090e 	bge	r2,zero,80f8a0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80f87c:	e0bffe17 	ldw	r2,-8(fp)
  80f880:	10c00324 	muli	r3,r2,12
  80f884:	00802074 	movhi	r2,129
  80f888:	10907e04 	addi	r2,r2,16888
  80f88c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80f890:	e0bfff17 	ldw	r2,-4(fp)
  80f894:	18800226 	beq	r3,r2,80f8a0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80f898:	00bffcc4 	movi	r2,-13
  80f89c:	00000806 	br	80f8c0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f8a0:	e0bffe17 	ldw	r2,-8(fp)
  80f8a4:	10800044 	addi	r2,r2,1
  80f8a8:	e0bffe15 	stw	r2,-8(fp)
  80f8ac:	d0a01317 	ldw	r2,-32692(gp)
  80f8b0:	1007883a 	mov	r3,r2
  80f8b4:	e0bffe17 	ldw	r2,-8(fp)
  80f8b8:	18bfdf2e 	bgeu	r3,r2,80f838 <__alt_mem_onchip_mem+0xff78f838>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80f8bc:	0005883a 	mov	r2,zero
}
  80f8c0:	e037883a 	mov	sp,fp
  80f8c4:	df000017 	ldw	fp,0(sp)
  80f8c8:	dec00104 	addi	sp,sp,4
  80f8cc:	f800283a 	ret

0080f8d0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80f8d0:	defff604 	addi	sp,sp,-40
  80f8d4:	dfc00915 	stw	ra,36(sp)
  80f8d8:	df000815 	stw	fp,32(sp)
  80f8dc:	df000804 	addi	fp,sp,32
  80f8e0:	e13ffd15 	stw	r4,-12(fp)
  80f8e4:	e17ffe15 	stw	r5,-8(fp)
  80f8e8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80f8ec:	00bfffc4 	movi	r2,-1
  80f8f0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80f8f4:	00bffb44 	movi	r2,-19
  80f8f8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80f8fc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80f900:	d1601104 	addi	r5,gp,-32700
  80f904:	e13ffd17 	ldw	r4,-12(fp)
  80f908:	08125480 	call	812548 <alt_find_dev>
  80f90c:	e0bff815 	stw	r2,-32(fp)
  80f910:	e0bff817 	ldw	r2,-32(fp)
  80f914:	1000051e 	bne	r2,zero,80f92c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80f918:	e13ffd17 	ldw	r4,-12(fp)
  80f91c:	08125d80 	call	8125d8 <alt_find_file>
  80f920:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80f924:	00800044 	movi	r2,1
  80f928:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80f92c:	e0bff817 	ldw	r2,-32(fp)
  80f930:	10002926 	beq	r2,zero,80f9d8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80f934:	e13ff817 	ldw	r4,-32(fp)
  80f938:	08126e00 	call	8126e0 <alt_get_fd>
  80f93c:	e0bff915 	stw	r2,-28(fp)
  80f940:	e0bff917 	ldw	r2,-28(fp)
  80f944:	1000030e 	bge	r2,zero,80f954 <open+0x84>
    {
      status = index;
  80f948:	e0bff917 	ldw	r2,-28(fp)
  80f94c:	e0bffa15 	stw	r2,-24(fp)
  80f950:	00002306 	br	80f9e0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  80f954:	e0bff917 	ldw	r2,-28(fp)
  80f958:	10c00324 	muli	r3,r2,12
  80f95c:	00802074 	movhi	r2,129
  80f960:	10907e04 	addi	r2,r2,16888
  80f964:	1885883a 	add	r2,r3,r2
  80f968:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80f96c:	e0fffe17 	ldw	r3,-8(fp)
  80f970:	00900034 	movhi	r2,16384
  80f974:	10bfffc4 	addi	r2,r2,-1
  80f978:	1886703a 	and	r3,r3,r2
  80f97c:	e0bffc17 	ldw	r2,-16(fp)
  80f980:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80f984:	e0bffb17 	ldw	r2,-20(fp)
  80f988:	1000051e 	bne	r2,zero,80f9a0 <open+0xd0>
  80f98c:	e13ffc17 	ldw	r4,-16(fp)
  80f990:	080f80c0 	call	80f80c <alt_file_locked>
  80f994:	e0bffa15 	stw	r2,-24(fp)
  80f998:	e0bffa17 	ldw	r2,-24(fp)
  80f99c:	10001016 	blt	r2,zero,80f9e0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80f9a0:	e0bff817 	ldw	r2,-32(fp)
  80f9a4:	10800317 	ldw	r2,12(r2)
  80f9a8:	10000826 	beq	r2,zero,80f9cc <open+0xfc>
  80f9ac:	e0bff817 	ldw	r2,-32(fp)
  80f9b0:	10800317 	ldw	r2,12(r2)
  80f9b4:	e1ffff17 	ldw	r7,-4(fp)
  80f9b8:	e1bffe17 	ldw	r6,-8(fp)
  80f9bc:	e17ffd17 	ldw	r5,-12(fp)
  80f9c0:	e13ffc17 	ldw	r4,-16(fp)
  80f9c4:	103ee83a 	callr	r2
  80f9c8:	00000106 	br	80f9d0 <open+0x100>
  80f9cc:	0005883a 	mov	r2,zero
  80f9d0:	e0bffa15 	stw	r2,-24(fp)
  80f9d4:	00000206 	br	80f9e0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80f9d8:	00bffb44 	movi	r2,-19
  80f9dc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80f9e0:	e0bffa17 	ldw	r2,-24(fp)
  80f9e4:	1000090e 	bge	r2,zero,80fa0c <open+0x13c>
  {
    alt_release_fd (index);  
  80f9e8:	e13ff917 	ldw	r4,-28(fp)
  80f9ec:	080fb5c0 	call	80fb5c <alt_release_fd>
    ALT_ERRNO = -status;
  80f9f0:	080f7d00 	call	80f7d0 <alt_get_errno>
  80f9f4:	1007883a 	mov	r3,r2
  80f9f8:	e0bffa17 	ldw	r2,-24(fp)
  80f9fc:	0085c83a 	sub	r2,zero,r2
  80fa00:	18800015 	stw	r2,0(r3)
    return -1;
  80fa04:	00bfffc4 	movi	r2,-1
  80fa08:	00000106 	br	80fa10 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  80fa0c:	e0bff917 	ldw	r2,-28(fp)
}
  80fa10:	e037883a 	mov	sp,fp
  80fa14:	dfc00117 	ldw	ra,4(sp)
  80fa18:	df000017 	ldw	fp,0(sp)
  80fa1c:	dec00204 	addi	sp,sp,8
  80fa20:	f800283a 	ret

0080fa24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fa24:	defffe04 	addi	sp,sp,-8
  80fa28:	dfc00115 	stw	ra,4(sp)
  80fa2c:	df000015 	stw	fp,0(sp)
  80fa30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fa34:	d0a01417 	ldw	r2,-32688(gp)
  80fa38:	10000326 	beq	r2,zero,80fa48 <alt_get_errno+0x24>
  80fa3c:	d0a01417 	ldw	r2,-32688(gp)
  80fa40:	103ee83a 	callr	r2
  80fa44:	00000106 	br	80fa4c <alt_get_errno+0x28>
  80fa48:	d0a76504 	addi	r2,gp,-25196
}
  80fa4c:	e037883a 	mov	sp,fp
  80fa50:	dfc00117 	ldw	ra,4(sp)
  80fa54:	df000017 	ldw	fp,0(sp)
  80fa58:	dec00204 	addi	sp,sp,8
  80fa5c:	f800283a 	ret

0080fa60 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80fa60:	defff904 	addi	sp,sp,-28
  80fa64:	dfc00615 	stw	ra,24(sp)
  80fa68:	df000515 	stw	fp,20(sp)
  80fa6c:	df000504 	addi	fp,sp,20
  80fa70:	e13ffd15 	stw	r4,-12(fp)
  80fa74:	e17ffe15 	stw	r5,-8(fp)
  80fa78:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fa7c:	e0bffd17 	ldw	r2,-12(fp)
  80fa80:	10000616 	blt	r2,zero,80fa9c <read+0x3c>
  80fa84:	e0bffd17 	ldw	r2,-12(fp)
  80fa88:	10c00324 	muli	r3,r2,12
  80fa8c:	00802074 	movhi	r2,129
  80fa90:	10907e04 	addi	r2,r2,16888
  80fa94:	1885883a 	add	r2,r3,r2
  80fa98:	00000106 	br	80faa0 <read+0x40>
  80fa9c:	0005883a 	mov	r2,zero
  80faa0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80faa4:	e0bffb17 	ldw	r2,-20(fp)
  80faa8:	10002226 	beq	r2,zero,80fb34 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80faac:	e0bffb17 	ldw	r2,-20(fp)
  80fab0:	10800217 	ldw	r2,8(r2)
  80fab4:	108000cc 	andi	r2,r2,3
  80fab8:	10800060 	cmpeqi	r2,r2,1
  80fabc:	1000181e 	bne	r2,zero,80fb20 <read+0xc0>
        (fd->dev->read))
  80fac0:	e0bffb17 	ldw	r2,-20(fp)
  80fac4:	10800017 	ldw	r2,0(r2)
  80fac8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80facc:	10001426 	beq	r2,zero,80fb20 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80fad0:	e0bffb17 	ldw	r2,-20(fp)
  80fad4:	10800017 	ldw	r2,0(r2)
  80fad8:	10800517 	ldw	r2,20(r2)
  80fadc:	e0ffff17 	ldw	r3,-4(fp)
  80fae0:	180d883a 	mov	r6,r3
  80fae4:	e17ffe17 	ldw	r5,-8(fp)
  80fae8:	e13ffb17 	ldw	r4,-20(fp)
  80faec:	103ee83a 	callr	r2
  80faf0:	e0bffc15 	stw	r2,-16(fp)
  80faf4:	e0bffc17 	ldw	r2,-16(fp)
  80faf8:	1000070e 	bge	r2,zero,80fb18 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80fafc:	080fa240 	call	80fa24 <alt_get_errno>
  80fb00:	1007883a 	mov	r3,r2
  80fb04:	e0bffc17 	ldw	r2,-16(fp)
  80fb08:	0085c83a 	sub	r2,zero,r2
  80fb0c:	18800015 	stw	r2,0(r3)
          return -1;
  80fb10:	00bfffc4 	movi	r2,-1
  80fb14:	00000c06 	br	80fb48 <read+0xe8>
        }
        return rval;
  80fb18:	e0bffc17 	ldw	r2,-16(fp)
  80fb1c:	00000a06 	br	80fb48 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80fb20:	080fa240 	call	80fa24 <alt_get_errno>
  80fb24:	1007883a 	mov	r3,r2
  80fb28:	00800344 	movi	r2,13
  80fb2c:	18800015 	stw	r2,0(r3)
  80fb30:	00000406 	br	80fb44 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80fb34:	080fa240 	call	80fa24 <alt_get_errno>
  80fb38:	1007883a 	mov	r3,r2
  80fb3c:	00801444 	movi	r2,81
  80fb40:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80fb44:	00bfffc4 	movi	r2,-1
}
  80fb48:	e037883a 	mov	sp,fp
  80fb4c:	dfc00117 	ldw	ra,4(sp)
  80fb50:	df000017 	ldw	fp,0(sp)
  80fb54:	dec00204 	addi	sp,sp,8
  80fb58:	f800283a 	ret

0080fb5c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80fb5c:	defffe04 	addi	sp,sp,-8
  80fb60:	df000115 	stw	fp,4(sp)
  80fb64:	df000104 	addi	fp,sp,4
  80fb68:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80fb6c:	e0bfff17 	ldw	r2,-4(fp)
  80fb70:	108000d0 	cmplti	r2,r2,3
  80fb74:	10000d1e 	bne	r2,zero,80fbac <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80fb78:	00802074 	movhi	r2,129
  80fb7c:	10907e04 	addi	r2,r2,16888
  80fb80:	e0ffff17 	ldw	r3,-4(fp)
  80fb84:	18c00324 	muli	r3,r3,12
  80fb88:	10c5883a 	add	r2,r2,r3
  80fb8c:	10800204 	addi	r2,r2,8
  80fb90:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80fb94:	00802074 	movhi	r2,129
  80fb98:	10907e04 	addi	r2,r2,16888
  80fb9c:	e0ffff17 	ldw	r3,-4(fp)
  80fba0:	18c00324 	muli	r3,r3,12
  80fba4:	10c5883a 	add	r2,r2,r3
  80fba8:	10000015 	stw	zero,0(r2)
  }
}
  80fbac:	0001883a 	nop
  80fbb0:	e037883a 	mov	sp,fp
  80fbb4:	df000017 	ldw	fp,0(sp)
  80fbb8:	dec00104 	addi	sp,sp,4
  80fbbc:	f800283a 	ret

0080fbc0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80fbc0:	defff904 	addi	sp,sp,-28
  80fbc4:	df000615 	stw	fp,24(sp)
  80fbc8:	df000604 	addi	fp,sp,24
  80fbcc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fbd0:	0005303a 	rdctl	r2,status
  80fbd4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fbd8:	e0fffe17 	ldw	r3,-8(fp)
  80fbdc:	00bfff84 	movi	r2,-2
  80fbe0:	1884703a 	and	r2,r3,r2
  80fbe4:	1001703a 	wrctl	status,r2
  
  return context;
  80fbe8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80fbec:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80fbf0:	d0a01617 	ldw	r2,-32680(gp)
  80fbf4:	10c000c4 	addi	r3,r2,3
  80fbf8:	00bfff04 	movi	r2,-4
  80fbfc:	1884703a 	and	r2,r3,r2
  80fc00:	d0a01615 	stw	r2,-32680(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80fc04:	d0e01617 	ldw	r3,-32680(gp)
  80fc08:	e0bfff17 	ldw	r2,-4(fp)
  80fc0c:	1887883a 	add	r3,r3,r2
  80fc10:	00804034 	movhi	r2,256
  80fc14:	10800004 	addi	r2,r2,0
  80fc18:	10c0062e 	bgeu	r2,r3,80fc34 <sbrk+0x74>
  80fc1c:	e0bffb17 	ldw	r2,-20(fp)
  80fc20:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fc24:	e0bffa17 	ldw	r2,-24(fp)
  80fc28:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80fc2c:	00bfffc4 	movi	r2,-1
  80fc30:	00000b06 	br	80fc60 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80fc34:	d0a01617 	ldw	r2,-32680(gp)
  80fc38:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80fc3c:	d0e01617 	ldw	r3,-32680(gp)
  80fc40:	e0bfff17 	ldw	r2,-4(fp)
  80fc44:	1885883a 	add	r2,r3,r2
  80fc48:	d0a01615 	stw	r2,-32680(gp)
  80fc4c:	e0bffb17 	ldw	r2,-20(fp)
  80fc50:	e0bffc15 	stw	r2,-16(fp)
  80fc54:	e0bffc17 	ldw	r2,-16(fp)
  80fc58:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80fc5c:	e0bffd17 	ldw	r2,-12(fp)
} 
  80fc60:	e037883a 	mov	sp,fp
  80fc64:	df000017 	ldw	fp,0(sp)
  80fc68:	dec00104 	addi	sp,sp,4
  80fc6c:	f800283a 	ret

0080fc70 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80fc70:	defffa04 	addi	sp,sp,-24
  80fc74:	df000515 	stw	fp,20(sp)
  80fc78:	df000504 	addi	fp,sp,20
  80fc7c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fc80:	0005303a 	rdctl	r2,status
  80fc84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fc88:	e0fffc17 	ldw	r3,-16(fp)
  80fc8c:	00bfff84 	movi	r2,-2
  80fc90:	1884703a 	and	r2,r3,r2
  80fc94:	1001703a 	wrctl	status,r2
  
  return context;
  80fc98:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80fc9c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80fca0:	e0bfff17 	ldw	r2,-4(fp)
  80fca4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80fca8:	e0bffd17 	ldw	r2,-12(fp)
  80fcac:	10800017 	ldw	r2,0(r2)
  80fcb0:	e0fffd17 	ldw	r3,-12(fp)
  80fcb4:	18c00117 	ldw	r3,4(r3)
  80fcb8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80fcbc:	e0bffd17 	ldw	r2,-12(fp)
  80fcc0:	10800117 	ldw	r2,4(r2)
  80fcc4:	e0fffd17 	ldw	r3,-12(fp)
  80fcc8:	18c00017 	ldw	r3,0(r3)
  80fccc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80fcd0:	e0bffd17 	ldw	r2,-12(fp)
  80fcd4:	e0fffd17 	ldw	r3,-12(fp)
  80fcd8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80fcdc:	e0bffd17 	ldw	r2,-12(fp)
  80fce0:	e0fffd17 	ldw	r3,-12(fp)
  80fce4:	10c00015 	stw	r3,0(r2)
  80fce8:	e0bffb17 	ldw	r2,-20(fp)
  80fcec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fcf0:	e0bffe17 	ldw	r2,-8(fp)
  80fcf4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80fcf8:	0001883a 	nop
  80fcfc:	e037883a 	mov	sp,fp
  80fd00:	df000017 	ldw	fp,0(sp)
  80fd04:	dec00104 	addi	sp,sp,4
  80fd08:	f800283a 	ret

0080fd0c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80fd0c:	defffb04 	addi	sp,sp,-20
  80fd10:	dfc00415 	stw	ra,16(sp)
  80fd14:	df000315 	stw	fp,12(sp)
  80fd18:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80fd1c:	d0a01717 	ldw	r2,-32676(gp)
  80fd20:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80fd24:	d0a77117 	ldw	r2,-25148(gp)
  80fd28:	10800044 	addi	r2,r2,1
  80fd2c:	d0a77115 	stw	r2,-25148(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80fd30:	00002e06 	br	80fdec <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80fd34:	e0bffd17 	ldw	r2,-12(fp)
  80fd38:	10800017 	ldw	r2,0(r2)
  80fd3c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80fd40:	e0bffd17 	ldw	r2,-12(fp)
  80fd44:	10800403 	ldbu	r2,16(r2)
  80fd48:	10803fcc 	andi	r2,r2,255
  80fd4c:	10000426 	beq	r2,zero,80fd60 <alt_tick+0x54>
  80fd50:	d0a77117 	ldw	r2,-25148(gp)
  80fd54:	1000021e 	bne	r2,zero,80fd60 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80fd58:	e0bffd17 	ldw	r2,-12(fp)
  80fd5c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80fd60:	e0bffd17 	ldw	r2,-12(fp)
  80fd64:	10800217 	ldw	r2,8(r2)
  80fd68:	d0e77117 	ldw	r3,-25148(gp)
  80fd6c:	18801d36 	bltu	r3,r2,80fde4 <alt_tick+0xd8>
  80fd70:	e0bffd17 	ldw	r2,-12(fp)
  80fd74:	10800403 	ldbu	r2,16(r2)
  80fd78:	10803fcc 	andi	r2,r2,255
  80fd7c:	1000191e 	bne	r2,zero,80fde4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80fd80:	e0bffd17 	ldw	r2,-12(fp)
  80fd84:	10800317 	ldw	r2,12(r2)
  80fd88:	e0fffd17 	ldw	r3,-12(fp)
  80fd8c:	18c00517 	ldw	r3,20(r3)
  80fd90:	1809883a 	mov	r4,r3
  80fd94:	103ee83a 	callr	r2
  80fd98:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80fd9c:	e0bfff17 	ldw	r2,-4(fp)
  80fda0:	1000031e 	bne	r2,zero,80fdb0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80fda4:	e13ffd17 	ldw	r4,-12(fp)
  80fda8:	080fc700 	call	80fc70 <alt_alarm_stop>
  80fdac:	00000d06 	br	80fde4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80fdb0:	e0bffd17 	ldw	r2,-12(fp)
  80fdb4:	10c00217 	ldw	r3,8(r2)
  80fdb8:	e0bfff17 	ldw	r2,-4(fp)
  80fdbc:	1887883a 	add	r3,r3,r2
  80fdc0:	e0bffd17 	ldw	r2,-12(fp)
  80fdc4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80fdc8:	e0bffd17 	ldw	r2,-12(fp)
  80fdcc:	10c00217 	ldw	r3,8(r2)
  80fdd0:	d0a77117 	ldw	r2,-25148(gp)
  80fdd4:	1880032e 	bgeu	r3,r2,80fde4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80fdd8:	e0bffd17 	ldw	r2,-12(fp)
  80fddc:	00c00044 	movi	r3,1
  80fde0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80fde4:	e0bffe17 	ldw	r2,-8(fp)
  80fde8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80fdec:	e0fffd17 	ldw	r3,-12(fp)
  80fdf0:	d0a01704 	addi	r2,gp,-32676
  80fdf4:	18bfcf1e 	bne	r3,r2,80fd34 <__alt_mem_onchip_mem+0xff78fd34>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80fdf8:	0001883a 	nop
}
  80fdfc:	0001883a 	nop
  80fe00:	e037883a 	mov	sp,fp
  80fe04:	dfc00117 	ldw	ra,4(sp)
  80fe08:	df000017 	ldw	fp,0(sp)
  80fe0c:	dec00204 	addi	sp,sp,8
  80fe10:	f800283a 	ret

0080fe14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fe14:	defffe04 	addi	sp,sp,-8
  80fe18:	dfc00115 	stw	ra,4(sp)
  80fe1c:	df000015 	stw	fp,0(sp)
  80fe20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fe24:	d0a01417 	ldw	r2,-32688(gp)
  80fe28:	10000326 	beq	r2,zero,80fe38 <alt_get_errno+0x24>
  80fe2c:	d0a01417 	ldw	r2,-32688(gp)
  80fe30:	103ee83a 	callr	r2
  80fe34:	00000106 	br	80fe3c <alt_get_errno+0x28>
  80fe38:	d0a76504 	addi	r2,gp,-25196
}
  80fe3c:	e037883a 	mov	sp,fp
  80fe40:	dfc00117 	ldw	ra,4(sp)
  80fe44:	df000017 	ldw	fp,0(sp)
  80fe48:	dec00204 	addi	sp,sp,8
  80fe4c:	f800283a 	ret

0080fe50 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80fe50:	defff904 	addi	sp,sp,-28
  80fe54:	dfc00615 	stw	ra,24(sp)
  80fe58:	df000515 	stw	fp,20(sp)
  80fe5c:	df000504 	addi	fp,sp,20
  80fe60:	e13ffd15 	stw	r4,-12(fp)
  80fe64:	e17ffe15 	stw	r5,-8(fp)
  80fe68:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fe6c:	e0bffd17 	ldw	r2,-12(fp)
  80fe70:	10000616 	blt	r2,zero,80fe8c <write+0x3c>
  80fe74:	e0bffd17 	ldw	r2,-12(fp)
  80fe78:	10c00324 	muli	r3,r2,12
  80fe7c:	00802074 	movhi	r2,129
  80fe80:	10907e04 	addi	r2,r2,16888
  80fe84:	1885883a 	add	r2,r3,r2
  80fe88:	00000106 	br	80fe90 <write+0x40>
  80fe8c:	0005883a 	mov	r2,zero
  80fe90:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80fe94:	e0bffb17 	ldw	r2,-20(fp)
  80fe98:	10002126 	beq	r2,zero,80ff20 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80fe9c:	e0bffb17 	ldw	r2,-20(fp)
  80fea0:	10800217 	ldw	r2,8(r2)
  80fea4:	108000cc 	andi	r2,r2,3
  80fea8:	10001826 	beq	r2,zero,80ff0c <write+0xbc>
  80feac:	e0bffb17 	ldw	r2,-20(fp)
  80feb0:	10800017 	ldw	r2,0(r2)
  80feb4:	10800617 	ldw	r2,24(r2)
  80feb8:	10001426 	beq	r2,zero,80ff0c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80febc:	e0bffb17 	ldw	r2,-20(fp)
  80fec0:	10800017 	ldw	r2,0(r2)
  80fec4:	10800617 	ldw	r2,24(r2)
  80fec8:	e0ffff17 	ldw	r3,-4(fp)
  80fecc:	180d883a 	mov	r6,r3
  80fed0:	e17ffe17 	ldw	r5,-8(fp)
  80fed4:	e13ffb17 	ldw	r4,-20(fp)
  80fed8:	103ee83a 	callr	r2
  80fedc:	e0bffc15 	stw	r2,-16(fp)
  80fee0:	e0bffc17 	ldw	r2,-16(fp)
  80fee4:	1000070e 	bge	r2,zero,80ff04 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80fee8:	080fe140 	call	80fe14 <alt_get_errno>
  80feec:	1007883a 	mov	r3,r2
  80fef0:	e0bffc17 	ldw	r2,-16(fp)
  80fef4:	0085c83a 	sub	r2,zero,r2
  80fef8:	18800015 	stw	r2,0(r3)
        return -1;
  80fefc:	00bfffc4 	movi	r2,-1
  80ff00:	00000c06 	br	80ff34 <write+0xe4>
      }
      return rval;
  80ff04:	e0bffc17 	ldw	r2,-16(fp)
  80ff08:	00000a06 	br	80ff34 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80ff0c:	080fe140 	call	80fe14 <alt_get_errno>
  80ff10:	1007883a 	mov	r3,r2
  80ff14:	00800344 	movi	r2,13
  80ff18:	18800015 	stw	r2,0(r3)
  80ff1c:	00000406 	br	80ff30 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80ff20:	080fe140 	call	80fe14 <alt_get_errno>
  80ff24:	1007883a 	mov	r3,r2
  80ff28:	00801444 	movi	r2,81
  80ff2c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80ff30:	00bfffc4 	movi	r2,-1
}
  80ff34:	e037883a 	mov	sp,fp
  80ff38:	dfc00117 	ldw	ra,4(sp)
  80ff3c:	df000017 	ldw	fp,0(sp)
  80ff40:	dec00204 	addi	sp,sp,8
  80ff44:	f800283a 	ret

0080ff48 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80ff48:	defffd04 	addi	sp,sp,-12
  80ff4c:	dfc00215 	stw	ra,8(sp)
  80ff50:	df000115 	stw	fp,4(sp)
  80ff54:	df000104 	addi	fp,sp,4
  80ff58:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80ff5c:	d1601104 	addi	r5,gp,-32700
  80ff60:	e13fff17 	ldw	r4,-4(fp)
  80ff64:	08123e40 	call	8123e4 <alt_dev_llist_insert>
}
  80ff68:	e037883a 	mov	sp,fp
  80ff6c:	dfc00117 	ldw	ra,4(sp)
  80ff70:	df000017 	ldw	fp,0(sp)
  80ff74:	dec00204 	addi	sp,sp,8
  80ff78:	f800283a 	ret

0080ff7c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80ff7c:	defffd04 	addi	sp,sp,-12
  80ff80:	dfc00215 	stw	ra,8(sp)
  80ff84:	df000115 	stw	fp,4(sp)
  80ff88:	df000104 	addi	fp,sp,4
  80ff8c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80ff90:	0812bc80 	call	812bc8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80ff94:	00800044 	movi	r2,1
  80ff98:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80ff9c:	0001883a 	nop
  80ffa0:	e037883a 	mov	sp,fp
  80ffa4:	dfc00117 	ldw	ra,4(sp)
  80ffa8:	df000017 	ldw	fp,0(sp)
  80ffac:	dec00204 	addi	sp,sp,8
  80ffb0:	f800283a 	ret

0080ffb4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80ffb4:	defffe04 	addi	sp,sp,-8
  80ffb8:	dfc00115 	stw	ra,4(sp)
  80ffbc:	df000015 	stw	fp,0(sp)
  80ffc0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
  80ffc4:	01c0fa04 	movi	r7,1000
  80ffc8:	01800084 	movi	r6,2
  80ffcc:	000b883a 	mov	r5,zero
  80ffd0:	01004434 	movhi	r4,272
  80ffd4:	21040804 	addi	r4,r4,4128
  80ffd8:	0811a0c0 	call	811a0c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80ffdc:	01800044 	movi	r6,1
  80ffe0:	000b883a 	mov	r5,zero
  80ffe4:	01002074 	movhi	r4,129
  80ffe8:	2110e804 	addi	r4,r4,17312
  80ffec:	08101b40 	call	8101b4 <altera_avalon_jtag_uart_init>
  80fff0:	01002074 	movhi	r4,129
  80fff4:	2110de04 	addi	r4,r4,17272
  80fff8:	080ff480 	call	80ff48 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80fffc:	01002074 	movhi	r4,129
  810000:	21150004 	addi	r4,r4,21504
  810004:	08118000 	call	811800 <altera_avalon_lcd_16207_init>
  810008:	01002074 	movhi	r4,129
  81000c:	2114f604 	addi	r4,r4,21464
  810010:	080ff480 	call	80ff48 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( CPU_SYSID, cpu_sysid);
  810014:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  810018:	000d883a 	mov	r6,zero
  81001c:	000b883a 	mov	r5,zero
  810020:	01002074 	movhi	r4,129
  810024:	21154804 	addi	r4,r4,21792
  810028:	0811b980 	call	811b98 <altera_avalon_uart_init>
  81002c:	01002074 	movhi	r4,129
  810030:	21153e04 	addi	r4,r4,21752
  810034:	080ff480 	call	80ff48 <alt_dev_reg>
}
  810038:	0001883a 	nop
  81003c:	e037883a 	mov	sp,fp
  810040:	dfc00117 	ldw	ra,4(sp)
  810044:	df000017 	ldw	fp,0(sp)
  810048:	dec00204 	addi	sp,sp,8
  81004c:	f800283a 	ret

00810050 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  810050:	defffa04 	addi	sp,sp,-24
  810054:	dfc00515 	stw	ra,20(sp)
  810058:	df000415 	stw	fp,16(sp)
  81005c:	df000404 	addi	fp,sp,16
  810060:	e13ffd15 	stw	r4,-12(fp)
  810064:	e17ffe15 	stw	r5,-8(fp)
  810068:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81006c:	e0bffd17 	ldw	r2,-12(fp)
  810070:	10800017 	ldw	r2,0(r2)
  810074:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  810078:	e0bffc17 	ldw	r2,-16(fp)
  81007c:	10c00a04 	addi	r3,r2,40
  810080:	e0bffd17 	ldw	r2,-12(fp)
  810084:	10800217 	ldw	r2,8(r2)
  810088:	100f883a 	mov	r7,r2
  81008c:	e1bfff17 	ldw	r6,-4(fp)
  810090:	e17ffe17 	ldw	r5,-8(fp)
  810094:	1809883a 	mov	r4,r3
  810098:	08106780 	call	810678 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  81009c:	e037883a 	mov	sp,fp
  8100a0:	dfc00117 	ldw	ra,4(sp)
  8100a4:	df000017 	ldw	fp,0(sp)
  8100a8:	dec00204 	addi	sp,sp,8
  8100ac:	f800283a 	ret

008100b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8100b0:	defffa04 	addi	sp,sp,-24
  8100b4:	dfc00515 	stw	ra,20(sp)
  8100b8:	df000415 	stw	fp,16(sp)
  8100bc:	df000404 	addi	fp,sp,16
  8100c0:	e13ffd15 	stw	r4,-12(fp)
  8100c4:	e17ffe15 	stw	r5,-8(fp)
  8100c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8100cc:	e0bffd17 	ldw	r2,-12(fp)
  8100d0:	10800017 	ldw	r2,0(r2)
  8100d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8100d8:	e0bffc17 	ldw	r2,-16(fp)
  8100dc:	10c00a04 	addi	r3,r2,40
  8100e0:	e0bffd17 	ldw	r2,-12(fp)
  8100e4:	10800217 	ldw	r2,8(r2)
  8100e8:	100f883a 	mov	r7,r2
  8100ec:	e1bfff17 	ldw	r6,-4(fp)
  8100f0:	e17ffe17 	ldw	r5,-8(fp)
  8100f4:	1809883a 	mov	r4,r3
  8100f8:	08108940 	call	810894 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8100fc:	e037883a 	mov	sp,fp
  810100:	dfc00117 	ldw	ra,4(sp)
  810104:	df000017 	ldw	fp,0(sp)
  810108:	dec00204 	addi	sp,sp,8
  81010c:	f800283a 	ret

00810110 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  810110:	defffc04 	addi	sp,sp,-16
  810114:	dfc00315 	stw	ra,12(sp)
  810118:	df000215 	stw	fp,8(sp)
  81011c:	df000204 	addi	fp,sp,8
  810120:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810124:	e0bfff17 	ldw	r2,-4(fp)
  810128:	10800017 	ldw	r2,0(r2)
  81012c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  810130:	e0bffe17 	ldw	r2,-8(fp)
  810134:	10c00a04 	addi	r3,r2,40
  810138:	e0bfff17 	ldw	r2,-4(fp)
  81013c:	10800217 	ldw	r2,8(r2)
  810140:	100b883a 	mov	r5,r2
  810144:	1809883a 	mov	r4,r3
  810148:	08105200 	call	810520 <altera_avalon_jtag_uart_close>
}
  81014c:	e037883a 	mov	sp,fp
  810150:	dfc00117 	ldw	ra,4(sp)
  810154:	df000017 	ldw	fp,0(sp)
  810158:	dec00204 	addi	sp,sp,8
  81015c:	f800283a 	ret

00810160 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  810160:	defffa04 	addi	sp,sp,-24
  810164:	dfc00515 	stw	ra,20(sp)
  810168:	df000415 	stw	fp,16(sp)
  81016c:	df000404 	addi	fp,sp,16
  810170:	e13ffd15 	stw	r4,-12(fp)
  810174:	e17ffe15 	stw	r5,-8(fp)
  810178:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  81017c:	e0bffd17 	ldw	r2,-12(fp)
  810180:	10800017 	ldw	r2,0(r2)
  810184:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  810188:	e0bffc17 	ldw	r2,-16(fp)
  81018c:	10800a04 	addi	r2,r2,40
  810190:	e1bfff17 	ldw	r6,-4(fp)
  810194:	e17ffe17 	ldw	r5,-8(fp)
  810198:	1009883a 	mov	r4,r2
  81019c:	08105880 	call	810588 <altera_avalon_jtag_uart_ioctl>
}
  8101a0:	e037883a 	mov	sp,fp
  8101a4:	dfc00117 	ldw	ra,4(sp)
  8101a8:	df000017 	ldw	fp,0(sp)
  8101ac:	dec00204 	addi	sp,sp,8
  8101b0:	f800283a 	ret

008101b4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8101b4:	defffa04 	addi	sp,sp,-24
  8101b8:	dfc00515 	stw	ra,20(sp)
  8101bc:	df000415 	stw	fp,16(sp)
  8101c0:	df000404 	addi	fp,sp,16
  8101c4:	e13ffd15 	stw	r4,-12(fp)
  8101c8:	e17ffe15 	stw	r5,-8(fp)
  8101cc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8101d0:	e0bffd17 	ldw	r2,-12(fp)
  8101d4:	00c00044 	movi	r3,1
  8101d8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8101dc:	e0bffd17 	ldw	r2,-12(fp)
  8101e0:	10800017 	ldw	r2,0(r2)
  8101e4:	10800104 	addi	r2,r2,4
  8101e8:	1007883a 	mov	r3,r2
  8101ec:	e0bffd17 	ldw	r2,-12(fp)
  8101f0:	10800817 	ldw	r2,32(r2)
  8101f4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  8101f8:	e0bffe17 	ldw	r2,-8(fp)
  8101fc:	e0ffff17 	ldw	r3,-4(fp)
  810200:	d8000015 	stw	zero,0(sp)
  810204:	e1fffd17 	ldw	r7,-12(fp)
  810208:	01802074 	movhi	r6,129
  81020c:	31809d04 	addi	r6,r6,628
  810210:	180b883a 	mov	r5,r3
  810214:	1009883a 	mov	r4,r2
  810218:	08127b80 	call	8127b8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  81021c:	e0bffd17 	ldw	r2,-12(fp)
  810220:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  810224:	e0bffd17 	ldw	r2,-12(fp)
  810228:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81022c:	d0e77017 	ldw	r3,-25152(gp)
  810230:	e1fffd17 	ldw	r7,-12(fp)
  810234:	01802074 	movhi	r6,129
  810238:	31812004 	addi	r6,r6,1152
  81023c:	180b883a 	mov	r5,r3
  810240:	1009883a 	mov	r4,r2
  810244:	080ef600 	call	80ef60 <alt_alarm_start>
  810248:	1000040e 	bge	r2,zero,81025c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  81024c:	e0fffd17 	ldw	r3,-12(fp)
  810250:	00a00034 	movhi	r2,32768
  810254:	10bfffc4 	addi	r2,r2,-1
  810258:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  81025c:	0001883a 	nop
  810260:	e037883a 	mov	sp,fp
  810264:	dfc00117 	ldw	ra,4(sp)
  810268:	df000017 	ldw	fp,0(sp)
  81026c:	dec00204 	addi	sp,sp,8
  810270:	f800283a 	ret

00810274 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  810274:	defff804 	addi	sp,sp,-32
  810278:	df000715 	stw	fp,28(sp)
  81027c:	df000704 	addi	fp,sp,28
  810280:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  810284:	e0bfff17 	ldw	r2,-4(fp)
  810288:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  81028c:	e0bffb17 	ldw	r2,-20(fp)
  810290:	10800017 	ldw	r2,0(r2)
  810294:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810298:	e0bffc17 	ldw	r2,-16(fp)
  81029c:	10800104 	addi	r2,r2,4
  8102a0:	10800037 	ldwio	r2,0(r2)
  8102a4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8102a8:	e0bffd17 	ldw	r2,-12(fp)
  8102ac:	1080c00c 	andi	r2,r2,768
  8102b0:	10006d26 	beq	r2,zero,810468 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8102b4:	e0bffd17 	ldw	r2,-12(fp)
  8102b8:	1080400c 	andi	r2,r2,256
  8102bc:	10003526 	beq	r2,zero,810394 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  8102c0:	00800074 	movhi	r2,1
  8102c4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8102c8:	e0bffb17 	ldw	r2,-20(fp)
  8102cc:	10800a17 	ldw	r2,40(r2)
  8102d0:	10800044 	addi	r2,r2,1
  8102d4:	1081ffcc 	andi	r2,r2,2047
  8102d8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  8102dc:	e0bffb17 	ldw	r2,-20(fp)
  8102e0:	10c00b17 	ldw	r3,44(r2)
  8102e4:	e0bffe17 	ldw	r2,-8(fp)
  8102e8:	18801526 	beq	r3,r2,810340 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8102ec:	e0bffc17 	ldw	r2,-16(fp)
  8102f0:	10800037 	ldwio	r2,0(r2)
  8102f4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  8102f8:	e0bff917 	ldw	r2,-28(fp)
  8102fc:	10a0000c 	andi	r2,r2,32768
  810300:	10001126 	beq	r2,zero,810348 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  810304:	e0bffb17 	ldw	r2,-20(fp)
  810308:	10800a17 	ldw	r2,40(r2)
  81030c:	e0fff917 	ldw	r3,-28(fp)
  810310:	1809883a 	mov	r4,r3
  810314:	e0fffb17 	ldw	r3,-20(fp)
  810318:	1885883a 	add	r2,r3,r2
  81031c:	10800e04 	addi	r2,r2,56
  810320:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810324:	e0bffb17 	ldw	r2,-20(fp)
  810328:	10800a17 	ldw	r2,40(r2)
  81032c:	10800044 	addi	r2,r2,1
  810330:	10c1ffcc 	andi	r3,r2,2047
  810334:	e0bffb17 	ldw	r2,-20(fp)
  810338:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  81033c:	003fe206 	br	8102c8 <__alt_mem_onchip_mem+0xff7902c8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  810340:	0001883a 	nop
  810344:	00000106 	br	81034c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  810348:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  81034c:	e0bff917 	ldw	r2,-28(fp)
  810350:	10bfffec 	andhi	r2,r2,65535
  810354:	10000f26 	beq	r2,zero,810394 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810358:	e0bffb17 	ldw	r2,-20(fp)
  81035c:	10c00817 	ldw	r3,32(r2)
  810360:	00bfff84 	movi	r2,-2
  810364:	1886703a 	and	r3,r3,r2
  810368:	e0bffb17 	ldw	r2,-20(fp)
  81036c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  810370:	e0bffc17 	ldw	r2,-16(fp)
  810374:	10800104 	addi	r2,r2,4
  810378:	1007883a 	mov	r3,r2
  81037c:	e0bffb17 	ldw	r2,-20(fp)
  810380:	10800817 	ldw	r2,32(r2)
  810384:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810388:	e0bffc17 	ldw	r2,-16(fp)
  81038c:	10800104 	addi	r2,r2,4
  810390:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  810394:	e0bffd17 	ldw	r2,-12(fp)
  810398:	1080800c 	andi	r2,r2,512
  81039c:	103fbe26 	beq	r2,zero,810298 <__alt_mem_onchip_mem+0xff790298>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  8103a0:	e0bffd17 	ldw	r2,-12(fp)
  8103a4:	1004d43a 	srli	r2,r2,16
  8103a8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  8103ac:	00001406 	br	810400 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  8103b0:	e0bffc17 	ldw	r2,-16(fp)
  8103b4:	e0fffb17 	ldw	r3,-20(fp)
  8103b8:	18c00d17 	ldw	r3,52(r3)
  8103bc:	e13ffb17 	ldw	r4,-20(fp)
  8103c0:	20c7883a 	add	r3,r4,r3
  8103c4:	18c20e04 	addi	r3,r3,2104
  8103c8:	18c00003 	ldbu	r3,0(r3)
  8103cc:	18c03fcc 	andi	r3,r3,255
  8103d0:	18c0201c 	xori	r3,r3,128
  8103d4:	18ffe004 	addi	r3,r3,-128
  8103d8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8103dc:	e0bffb17 	ldw	r2,-20(fp)
  8103e0:	10800d17 	ldw	r2,52(r2)
  8103e4:	10800044 	addi	r2,r2,1
  8103e8:	10c1ffcc 	andi	r3,r2,2047
  8103ec:	e0bffb17 	ldw	r2,-20(fp)
  8103f0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  8103f4:	e0bffa17 	ldw	r2,-24(fp)
  8103f8:	10bfffc4 	addi	r2,r2,-1
  8103fc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  810400:	e0bffa17 	ldw	r2,-24(fp)
  810404:	10000526 	beq	r2,zero,81041c <altera_avalon_jtag_uart_irq+0x1a8>
  810408:	e0bffb17 	ldw	r2,-20(fp)
  81040c:	10c00d17 	ldw	r3,52(r2)
  810410:	e0bffb17 	ldw	r2,-20(fp)
  810414:	10800c17 	ldw	r2,48(r2)
  810418:	18bfe51e 	bne	r3,r2,8103b0 <__alt_mem_onchip_mem+0xff7903b0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  81041c:	e0bffa17 	ldw	r2,-24(fp)
  810420:	103f9d26 	beq	r2,zero,810298 <__alt_mem_onchip_mem+0xff790298>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  810424:	e0bffb17 	ldw	r2,-20(fp)
  810428:	10c00817 	ldw	r3,32(r2)
  81042c:	00bfff44 	movi	r2,-3
  810430:	1886703a 	and	r3,r3,r2
  810434:	e0bffb17 	ldw	r2,-20(fp)
  810438:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81043c:	e0bffb17 	ldw	r2,-20(fp)
  810440:	10800017 	ldw	r2,0(r2)
  810444:	10800104 	addi	r2,r2,4
  810448:	1007883a 	mov	r3,r2
  81044c:	e0bffb17 	ldw	r2,-20(fp)
  810450:	10800817 	ldw	r2,32(r2)
  810454:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810458:	e0bffc17 	ldw	r2,-16(fp)
  81045c:	10800104 	addi	r2,r2,4
  810460:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  810464:	003f8c06 	br	810298 <__alt_mem_onchip_mem+0xff790298>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  810468:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  81046c:	0001883a 	nop
  810470:	e037883a 	mov	sp,fp
  810474:	df000017 	ldw	fp,0(sp)
  810478:	dec00104 	addi	sp,sp,4
  81047c:	f800283a 	ret

00810480 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  810480:	defff804 	addi	sp,sp,-32
  810484:	df000715 	stw	fp,28(sp)
  810488:	df000704 	addi	fp,sp,28
  81048c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  810490:	e0bffb17 	ldw	r2,-20(fp)
  810494:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  810498:	e0bff917 	ldw	r2,-28(fp)
  81049c:	10800017 	ldw	r2,0(r2)
  8104a0:	10800104 	addi	r2,r2,4
  8104a4:	10800037 	ldwio	r2,0(r2)
  8104a8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  8104ac:	e0bffa17 	ldw	r2,-24(fp)
  8104b0:	1081000c 	andi	r2,r2,1024
  8104b4:	10000b26 	beq	r2,zero,8104e4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  8104b8:	e0bff917 	ldw	r2,-28(fp)
  8104bc:	10800017 	ldw	r2,0(r2)
  8104c0:	10800104 	addi	r2,r2,4
  8104c4:	1007883a 	mov	r3,r2
  8104c8:	e0bff917 	ldw	r2,-28(fp)
  8104cc:	10800817 	ldw	r2,32(r2)
  8104d0:	10810014 	ori	r2,r2,1024
  8104d4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  8104d8:	e0bff917 	ldw	r2,-28(fp)
  8104dc:	10000915 	stw	zero,36(r2)
  8104e0:	00000a06 	br	81050c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8104e4:	e0bff917 	ldw	r2,-28(fp)
  8104e8:	10c00917 	ldw	r3,36(r2)
  8104ec:	00a00034 	movhi	r2,32768
  8104f0:	10bfff04 	addi	r2,r2,-4
  8104f4:	10c00536 	bltu	r2,r3,81050c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  8104f8:	e0bff917 	ldw	r2,-28(fp)
  8104fc:	10800917 	ldw	r2,36(r2)
  810500:	10c00044 	addi	r3,r2,1
  810504:	e0bff917 	ldw	r2,-28(fp)
  810508:	10c00915 	stw	r3,36(r2)
  81050c:	d0a77017 	ldw	r2,-25152(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  810510:	e037883a 	mov	sp,fp
  810514:	df000017 	ldw	fp,0(sp)
  810518:	dec00104 	addi	sp,sp,4
  81051c:	f800283a 	ret

00810520 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  810520:	defffd04 	addi	sp,sp,-12
  810524:	df000215 	stw	fp,8(sp)
  810528:	df000204 	addi	fp,sp,8
  81052c:	e13ffe15 	stw	r4,-8(fp)
  810530:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  810534:	00000506 	br	81054c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  810538:	e0bfff17 	ldw	r2,-4(fp)
  81053c:	1090000c 	andi	r2,r2,16384
  810540:	10000226 	beq	r2,zero,81054c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  810544:	00bffd44 	movi	r2,-11
  810548:	00000b06 	br	810578 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81054c:	e0bffe17 	ldw	r2,-8(fp)
  810550:	10c00d17 	ldw	r3,52(r2)
  810554:	e0bffe17 	ldw	r2,-8(fp)
  810558:	10800c17 	ldw	r2,48(r2)
  81055c:	18800526 	beq	r3,r2,810574 <altera_avalon_jtag_uart_close+0x54>
  810560:	e0bffe17 	ldw	r2,-8(fp)
  810564:	10c00917 	ldw	r3,36(r2)
  810568:	e0bffe17 	ldw	r2,-8(fp)
  81056c:	10800117 	ldw	r2,4(r2)
  810570:	18bff136 	bltu	r3,r2,810538 <__alt_mem_onchip_mem+0xff790538>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  810574:	0005883a 	mov	r2,zero
}
  810578:	e037883a 	mov	sp,fp
  81057c:	df000017 	ldw	fp,0(sp)
  810580:	dec00104 	addi	sp,sp,4
  810584:	f800283a 	ret

00810588 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  810588:	defffa04 	addi	sp,sp,-24
  81058c:	df000515 	stw	fp,20(sp)
  810590:	df000504 	addi	fp,sp,20
  810594:	e13ffd15 	stw	r4,-12(fp)
  810598:	e17ffe15 	stw	r5,-8(fp)
  81059c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  8105a0:	00bff9c4 	movi	r2,-25
  8105a4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  8105a8:	e0bffe17 	ldw	r2,-8(fp)
  8105ac:	10da8060 	cmpeqi	r3,r2,27137
  8105b0:	1800031e 	bne	r3,zero,8105c0 <altera_avalon_jtag_uart_ioctl+0x38>
  8105b4:	109a80a0 	cmpeqi	r2,r2,27138
  8105b8:	1000181e 	bne	r2,zero,81061c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  8105bc:	00002906 	br	810664 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  8105c0:	e0bffd17 	ldw	r2,-12(fp)
  8105c4:	10c00117 	ldw	r3,4(r2)
  8105c8:	00a00034 	movhi	r2,32768
  8105cc:	10bfffc4 	addi	r2,r2,-1
  8105d0:	18802126 	beq	r3,r2,810658 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  8105d4:	e0bfff17 	ldw	r2,-4(fp)
  8105d8:	10800017 	ldw	r2,0(r2)
  8105dc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  8105e0:	e0bffc17 	ldw	r2,-16(fp)
  8105e4:	10800090 	cmplti	r2,r2,2
  8105e8:	1000061e 	bne	r2,zero,810604 <altera_avalon_jtag_uart_ioctl+0x7c>
  8105ec:	e0fffc17 	ldw	r3,-16(fp)
  8105f0:	00a00034 	movhi	r2,32768
  8105f4:	10bfffc4 	addi	r2,r2,-1
  8105f8:	18800226 	beq	r3,r2,810604 <altera_avalon_jtag_uart_ioctl+0x7c>
  8105fc:	e0bffc17 	ldw	r2,-16(fp)
  810600:	00000206 	br	81060c <altera_avalon_jtag_uart_ioctl+0x84>
  810604:	00a00034 	movhi	r2,32768
  810608:	10bfff84 	addi	r2,r2,-2
  81060c:	e0fffd17 	ldw	r3,-12(fp)
  810610:	18800115 	stw	r2,4(r3)
      rc = 0;
  810614:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  810618:	00000f06 	br	810658 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  81061c:	e0bffd17 	ldw	r2,-12(fp)
  810620:	10c00117 	ldw	r3,4(r2)
  810624:	00a00034 	movhi	r2,32768
  810628:	10bfffc4 	addi	r2,r2,-1
  81062c:	18800c26 	beq	r3,r2,810660 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  810630:	e0bffd17 	ldw	r2,-12(fp)
  810634:	10c00917 	ldw	r3,36(r2)
  810638:	e0bffd17 	ldw	r2,-12(fp)
  81063c:	10800117 	ldw	r2,4(r2)
  810640:	1885803a 	cmpltu	r2,r3,r2
  810644:	10c03fcc 	andi	r3,r2,255
  810648:	e0bfff17 	ldw	r2,-4(fp)
  81064c:	10c00015 	stw	r3,0(r2)
      rc = 0;
  810650:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  810654:	00000206 	br	810660 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  810658:	0001883a 	nop
  81065c:	00000106 	br	810664 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  810660:	0001883a 	nop

  default:
    break;
  }

  return rc;
  810664:	e0bffb17 	ldw	r2,-20(fp)
}
  810668:	e037883a 	mov	sp,fp
  81066c:	df000017 	ldw	fp,0(sp)
  810670:	dec00104 	addi	sp,sp,4
  810674:	f800283a 	ret

00810678 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  810678:	defff304 	addi	sp,sp,-52
  81067c:	dfc00c15 	stw	ra,48(sp)
  810680:	df000b15 	stw	fp,44(sp)
  810684:	df000b04 	addi	fp,sp,44
  810688:	e13ffc15 	stw	r4,-16(fp)
  81068c:	e17ffd15 	stw	r5,-12(fp)
  810690:	e1bffe15 	stw	r6,-8(fp)
  810694:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  810698:	e0bffd17 	ldw	r2,-12(fp)
  81069c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8106a0:	00004706 	br	8107c0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8106a4:	e0bffc17 	ldw	r2,-16(fp)
  8106a8:	10800a17 	ldw	r2,40(r2)
  8106ac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  8106b0:	e0bffc17 	ldw	r2,-16(fp)
  8106b4:	10800b17 	ldw	r2,44(r2)
  8106b8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  8106bc:	e0fff717 	ldw	r3,-36(fp)
  8106c0:	e0bff817 	ldw	r2,-32(fp)
  8106c4:	18800536 	bltu	r3,r2,8106dc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  8106c8:	e0fff717 	ldw	r3,-36(fp)
  8106cc:	e0bff817 	ldw	r2,-32(fp)
  8106d0:	1885c83a 	sub	r2,r3,r2
  8106d4:	e0bff615 	stw	r2,-40(fp)
  8106d8:	00000406 	br	8106ec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8106dc:	00c20004 	movi	r3,2048
  8106e0:	e0bff817 	ldw	r2,-32(fp)
  8106e4:	1885c83a 	sub	r2,r3,r2
  8106e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8106ec:	e0bff617 	ldw	r2,-40(fp)
  8106f0:	10001e26 	beq	r2,zero,81076c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  8106f4:	e0fffe17 	ldw	r3,-8(fp)
  8106f8:	e0bff617 	ldw	r2,-40(fp)
  8106fc:	1880022e 	bgeu	r3,r2,810708 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  810700:	e0bffe17 	ldw	r2,-8(fp)
  810704:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  810708:	e0bffc17 	ldw	r2,-16(fp)
  81070c:	10c00e04 	addi	r3,r2,56
  810710:	e0bff817 	ldw	r2,-32(fp)
  810714:	1885883a 	add	r2,r3,r2
  810718:	e1bff617 	ldw	r6,-40(fp)
  81071c:	100b883a 	mov	r5,r2
  810720:	e13ff517 	ldw	r4,-44(fp)
  810724:	080874c0 	call	80874c <memcpy>
      ptr   += n;
  810728:	e0fff517 	ldw	r3,-44(fp)
  81072c:	e0bff617 	ldw	r2,-40(fp)
  810730:	1885883a 	add	r2,r3,r2
  810734:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  810738:	e0fffe17 	ldw	r3,-8(fp)
  81073c:	e0bff617 	ldw	r2,-40(fp)
  810740:	1885c83a 	sub	r2,r3,r2
  810744:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810748:	e0fff817 	ldw	r3,-32(fp)
  81074c:	e0bff617 	ldw	r2,-40(fp)
  810750:	1885883a 	add	r2,r3,r2
  810754:	10c1ffcc 	andi	r3,r2,2047
  810758:	e0bffc17 	ldw	r2,-16(fp)
  81075c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  810760:	e0bffe17 	ldw	r2,-8(fp)
  810764:	00bfcf16 	blt	zero,r2,8106a4 <__alt_mem_onchip_mem+0xff7906a4>
  810768:	00000106 	br	810770 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  81076c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  810770:	e0fff517 	ldw	r3,-44(fp)
  810774:	e0bffd17 	ldw	r2,-12(fp)
  810778:	1880141e 	bne	r3,r2,8107cc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  81077c:	e0bfff17 	ldw	r2,-4(fp)
  810780:	1090000c 	andi	r2,r2,16384
  810784:	1000131e 	bne	r2,zero,8107d4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  810788:	0001883a 	nop
  81078c:	e0bffc17 	ldw	r2,-16(fp)
  810790:	10c00a17 	ldw	r3,40(r2)
  810794:	e0bff717 	ldw	r2,-36(fp)
  810798:	1880051e 	bne	r3,r2,8107b0 <altera_avalon_jtag_uart_read+0x138>
  81079c:	e0bffc17 	ldw	r2,-16(fp)
  8107a0:	10c00917 	ldw	r3,36(r2)
  8107a4:	e0bffc17 	ldw	r2,-16(fp)
  8107a8:	10800117 	ldw	r2,4(r2)
  8107ac:	18bff736 	bltu	r3,r2,81078c <__alt_mem_onchip_mem+0xff79078c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8107b0:	e0bffc17 	ldw	r2,-16(fp)
  8107b4:	10c00a17 	ldw	r3,40(r2)
  8107b8:	e0bff717 	ldw	r2,-36(fp)
  8107bc:	18800726 	beq	r3,r2,8107dc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8107c0:	e0bffe17 	ldw	r2,-8(fp)
  8107c4:	00bfb716 	blt	zero,r2,8106a4 <__alt_mem_onchip_mem+0xff7906a4>
  8107c8:	00000506 	br	8107e0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  8107cc:	0001883a 	nop
  8107d0:	00000306 	br	8107e0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  8107d4:	0001883a 	nop
  8107d8:	00000106 	br	8107e0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  8107dc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  8107e0:	e0fff517 	ldw	r3,-44(fp)
  8107e4:	e0bffd17 	ldw	r2,-12(fp)
  8107e8:	18801826 	beq	r3,r2,81084c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8107ec:	0005303a 	rdctl	r2,status
  8107f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8107f4:	e0fffb17 	ldw	r3,-20(fp)
  8107f8:	00bfff84 	movi	r2,-2
  8107fc:	1884703a 	and	r2,r3,r2
  810800:	1001703a 	wrctl	status,r2
  
  return context;
  810804:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  810808:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81080c:	e0bffc17 	ldw	r2,-16(fp)
  810810:	10800817 	ldw	r2,32(r2)
  810814:	10c00054 	ori	r3,r2,1
  810818:	e0bffc17 	ldw	r2,-16(fp)
  81081c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810820:	e0bffc17 	ldw	r2,-16(fp)
  810824:	10800017 	ldw	r2,0(r2)
  810828:	10800104 	addi	r2,r2,4
  81082c:	1007883a 	mov	r3,r2
  810830:	e0bffc17 	ldw	r2,-16(fp)
  810834:	10800817 	ldw	r2,32(r2)
  810838:	18800035 	stwio	r2,0(r3)
  81083c:	e0bffa17 	ldw	r2,-24(fp)
  810840:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810844:	e0bff917 	ldw	r2,-28(fp)
  810848:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  81084c:	e0fff517 	ldw	r3,-44(fp)
  810850:	e0bffd17 	ldw	r2,-12(fp)
  810854:	18800426 	beq	r3,r2,810868 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  810858:	e0fff517 	ldw	r3,-44(fp)
  81085c:	e0bffd17 	ldw	r2,-12(fp)
  810860:	1885c83a 	sub	r2,r3,r2
  810864:	00000606 	br	810880 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  810868:	e0bfff17 	ldw	r2,-4(fp)
  81086c:	1090000c 	andi	r2,r2,16384
  810870:	10000226 	beq	r2,zero,81087c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  810874:	00bffd44 	movi	r2,-11
  810878:	00000106 	br	810880 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  81087c:	00bffec4 	movi	r2,-5
}
  810880:	e037883a 	mov	sp,fp
  810884:	dfc00117 	ldw	ra,4(sp)
  810888:	df000017 	ldw	fp,0(sp)
  81088c:	dec00204 	addi	sp,sp,8
  810890:	f800283a 	ret

00810894 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  810894:	defff304 	addi	sp,sp,-52
  810898:	dfc00c15 	stw	ra,48(sp)
  81089c:	df000b15 	stw	fp,44(sp)
  8108a0:	df000b04 	addi	fp,sp,44
  8108a4:	e13ffc15 	stw	r4,-16(fp)
  8108a8:	e17ffd15 	stw	r5,-12(fp)
  8108ac:	e1bffe15 	stw	r6,-8(fp)
  8108b0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  8108b4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  8108b8:	e0bffd17 	ldw	r2,-12(fp)
  8108bc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8108c0:	00003706 	br	8109a0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  8108c4:	e0bffc17 	ldw	r2,-16(fp)
  8108c8:	10800c17 	ldw	r2,48(r2)
  8108cc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  8108d0:	e0bffc17 	ldw	r2,-16(fp)
  8108d4:	10800d17 	ldw	r2,52(r2)
  8108d8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  8108dc:	e0fff917 	ldw	r3,-28(fp)
  8108e0:	e0bff517 	ldw	r2,-44(fp)
  8108e4:	1880062e 	bgeu	r3,r2,810900 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8108e8:	e0fff517 	ldw	r3,-44(fp)
  8108ec:	e0bff917 	ldw	r2,-28(fp)
  8108f0:	1885c83a 	sub	r2,r3,r2
  8108f4:	10bfffc4 	addi	r2,r2,-1
  8108f8:	e0bff615 	stw	r2,-40(fp)
  8108fc:	00000b06 	br	81092c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  810900:	e0bff517 	ldw	r2,-44(fp)
  810904:	10000526 	beq	r2,zero,81091c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  810908:	00c20004 	movi	r3,2048
  81090c:	e0bff917 	ldw	r2,-28(fp)
  810910:	1885c83a 	sub	r2,r3,r2
  810914:	e0bff615 	stw	r2,-40(fp)
  810918:	00000406 	br	81092c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  81091c:	00c1ffc4 	movi	r3,2047
  810920:	e0bff917 	ldw	r2,-28(fp)
  810924:	1885c83a 	sub	r2,r3,r2
  810928:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  81092c:	e0bff617 	ldw	r2,-40(fp)
  810930:	10001e26 	beq	r2,zero,8109ac <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  810934:	e0fffe17 	ldw	r3,-8(fp)
  810938:	e0bff617 	ldw	r2,-40(fp)
  81093c:	1880022e 	bgeu	r3,r2,810948 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  810940:	e0bffe17 	ldw	r2,-8(fp)
  810944:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  810948:	e0bffc17 	ldw	r2,-16(fp)
  81094c:	10c20e04 	addi	r3,r2,2104
  810950:	e0bff917 	ldw	r2,-28(fp)
  810954:	1885883a 	add	r2,r3,r2
  810958:	e1bff617 	ldw	r6,-40(fp)
  81095c:	e17ffd17 	ldw	r5,-12(fp)
  810960:	1009883a 	mov	r4,r2
  810964:	080874c0 	call	80874c <memcpy>
      ptr   += n;
  810968:	e0fffd17 	ldw	r3,-12(fp)
  81096c:	e0bff617 	ldw	r2,-40(fp)
  810970:	1885883a 	add	r2,r3,r2
  810974:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  810978:	e0fffe17 	ldw	r3,-8(fp)
  81097c:	e0bff617 	ldw	r2,-40(fp)
  810980:	1885c83a 	sub	r2,r3,r2
  810984:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810988:	e0fff917 	ldw	r3,-28(fp)
  81098c:	e0bff617 	ldw	r2,-40(fp)
  810990:	1885883a 	add	r2,r3,r2
  810994:	10c1ffcc 	andi	r3,r2,2047
  810998:	e0bffc17 	ldw	r2,-16(fp)
  81099c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8109a0:	e0bffe17 	ldw	r2,-8(fp)
  8109a4:	00bfc716 	blt	zero,r2,8108c4 <__alt_mem_onchip_mem+0xff7908c4>
  8109a8:	00000106 	br	8109b0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  8109ac:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8109b0:	0005303a 	rdctl	r2,status
  8109b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8109b8:	e0fffb17 	ldw	r3,-20(fp)
  8109bc:	00bfff84 	movi	r2,-2
  8109c0:	1884703a 	and	r2,r3,r2
  8109c4:	1001703a 	wrctl	status,r2
  
  return context;
  8109c8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8109cc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8109d0:	e0bffc17 	ldw	r2,-16(fp)
  8109d4:	10800817 	ldw	r2,32(r2)
  8109d8:	10c00094 	ori	r3,r2,2
  8109dc:	e0bffc17 	ldw	r2,-16(fp)
  8109e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8109e4:	e0bffc17 	ldw	r2,-16(fp)
  8109e8:	10800017 	ldw	r2,0(r2)
  8109ec:	10800104 	addi	r2,r2,4
  8109f0:	1007883a 	mov	r3,r2
  8109f4:	e0bffc17 	ldw	r2,-16(fp)
  8109f8:	10800817 	ldw	r2,32(r2)
  8109fc:	18800035 	stwio	r2,0(r3)
  810a00:	e0bffa17 	ldw	r2,-24(fp)
  810a04:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810a08:	e0bff817 	ldw	r2,-32(fp)
  810a0c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  810a10:	e0bffe17 	ldw	r2,-8(fp)
  810a14:	0080100e 	bge	zero,r2,810a58 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  810a18:	e0bfff17 	ldw	r2,-4(fp)
  810a1c:	1090000c 	andi	r2,r2,16384
  810a20:	1000101e 	bne	r2,zero,810a64 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  810a24:	0001883a 	nop
  810a28:	e0bffc17 	ldw	r2,-16(fp)
  810a2c:	10c00d17 	ldw	r3,52(r2)
  810a30:	e0bff517 	ldw	r2,-44(fp)
  810a34:	1880051e 	bne	r3,r2,810a4c <altera_avalon_jtag_uart_write+0x1b8>
  810a38:	e0bffc17 	ldw	r2,-16(fp)
  810a3c:	10c00917 	ldw	r3,36(r2)
  810a40:	e0bffc17 	ldw	r2,-16(fp)
  810a44:	10800117 	ldw	r2,4(r2)
  810a48:	18bff736 	bltu	r3,r2,810a28 <__alt_mem_onchip_mem+0xff790a28>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  810a4c:	e0bffc17 	ldw	r2,-16(fp)
  810a50:	10800917 	ldw	r2,36(r2)
  810a54:	1000051e 	bne	r2,zero,810a6c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  810a58:	e0bffe17 	ldw	r2,-8(fp)
  810a5c:	00bfd016 	blt	zero,r2,8109a0 <__alt_mem_onchip_mem+0xff7909a0>
  810a60:	00000306 	br	810a70 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  810a64:	0001883a 	nop
  810a68:	00000106 	br	810a70 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  810a6c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  810a70:	e0fffd17 	ldw	r3,-12(fp)
  810a74:	e0bff717 	ldw	r2,-36(fp)
  810a78:	18800426 	beq	r3,r2,810a8c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  810a7c:	e0fffd17 	ldw	r3,-12(fp)
  810a80:	e0bff717 	ldw	r2,-36(fp)
  810a84:	1885c83a 	sub	r2,r3,r2
  810a88:	00000606 	br	810aa4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  810a8c:	e0bfff17 	ldw	r2,-4(fp)
  810a90:	1090000c 	andi	r2,r2,16384
  810a94:	10000226 	beq	r2,zero,810aa0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  810a98:	00bffd44 	movi	r2,-11
  810a9c:	00000106 	br	810aa4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  810aa0:	00bffec4 	movi	r2,-5
}
  810aa4:	e037883a 	mov	sp,fp
  810aa8:	dfc00117 	ldw	ra,4(sp)
  810aac:	df000017 	ldw	fp,0(sp)
  810ab0:	dec00204 	addi	sp,sp,8
  810ab4:	f800283a 	ret

00810ab8 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  810ab8:	defffa04 	addi	sp,sp,-24
  810abc:	dfc00515 	stw	ra,20(sp)
  810ac0:	df000415 	stw	fp,16(sp)
  810ac4:	df000404 	addi	fp,sp,16
  810ac8:	e13ffe15 	stw	r4,-8(fp)
  810acc:	2805883a 	mov	r2,r5
  810ad0:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  810ad4:	e0bffe17 	ldw	r2,-8(fp)
  810ad8:	10800017 	ldw	r2,0(r2)
  810adc:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  810ae0:	008003f4 	movhi	r2,15
  810ae4:	10909004 	addi	r2,r2,16960
  810ae8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  810aec:	e0bffe17 	ldw	r2,-8(fp)
  810af0:	10800803 	ldbu	r2,32(r2)
  810af4:	10803fcc 	andi	r2,r2,255
  810af8:	1080201c 	xori	r2,r2,128
  810afc:	10bfe004 	addi	r2,r2,-128
  810b00:	1000151e 	bne	r2,zero,810b58 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  810b04:	00000906 	br	810b2c <lcd_write_command+0x74>
    if (--i == 0)
  810b08:	e0bffc17 	ldw	r2,-16(fp)
  810b0c:	10bfffc4 	addi	r2,r2,-1
  810b10:	e0bffc15 	stw	r2,-16(fp)
  810b14:	e0bffc17 	ldw	r2,-16(fp)
  810b18:	1000041e 	bne	r2,zero,810b2c <lcd_write_command+0x74>
    {
      sp->broken = 1;
  810b1c:	e0bffe17 	ldw	r2,-8(fp)
  810b20:	00c00044 	movi	r3,1
  810b24:	10c00805 	stb	r3,32(r2)
      return;
  810b28:	00000c06 	br	810b5c <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  810b2c:	e0bffd17 	ldw	r2,-12(fp)
  810b30:	10800104 	addi	r2,r2,4
  810b34:	10800037 	ldwio	r2,0(r2)
  810b38:	1080200c 	andi	r2,r2,128
  810b3c:	103ff21e 	bne	r2,zero,810b08 <__alt_mem_onchip_mem+0xff790b08>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  810b40:	01001904 	movi	r4,100
  810b44:	0812b980 	call	812b98 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  810b48:	e0bffd17 	ldw	r2,-12(fp)
  810b4c:	e0ffff03 	ldbu	r3,-4(fp)
  810b50:	10c00035 	stwio	r3,0(r2)
  810b54:	00000106 	br	810b5c <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  810b58:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  810b5c:	e037883a 	mov	sp,fp
  810b60:	dfc00117 	ldw	ra,4(sp)
  810b64:	df000017 	ldw	fp,0(sp)
  810b68:	dec00204 	addi	sp,sp,8
  810b6c:	f800283a 	ret

00810b70 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  810b70:	defffa04 	addi	sp,sp,-24
  810b74:	dfc00515 	stw	ra,20(sp)
  810b78:	df000415 	stw	fp,16(sp)
  810b7c:	df000404 	addi	fp,sp,16
  810b80:	e13ffe15 	stw	r4,-8(fp)
  810b84:	2805883a 	mov	r2,r5
  810b88:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  810b8c:	e0bffe17 	ldw	r2,-8(fp)
  810b90:	10800017 	ldw	r2,0(r2)
  810b94:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  810b98:	008003f4 	movhi	r2,15
  810b9c:	10909004 	addi	r2,r2,16960
  810ba0:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  810ba4:	e0bffe17 	ldw	r2,-8(fp)
  810ba8:	10800803 	ldbu	r2,32(r2)
  810bac:	10803fcc 	andi	r2,r2,255
  810bb0:	1080201c 	xori	r2,r2,128
  810bb4:	10bfe004 	addi	r2,r2,-128
  810bb8:	10001d1e 	bne	r2,zero,810c30 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  810bbc:	00000906 	br	810be4 <lcd_write_data+0x74>
    if (--i == 0)
  810bc0:	e0bffc17 	ldw	r2,-16(fp)
  810bc4:	10bfffc4 	addi	r2,r2,-1
  810bc8:	e0bffc15 	stw	r2,-16(fp)
  810bcc:	e0bffc17 	ldw	r2,-16(fp)
  810bd0:	1000041e 	bne	r2,zero,810be4 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  810bd4:	e0bffe17 	ldw	r2,-8(fp)
  810bd8:	00c00044 	movi	r3,1
  810bdc:	10c00805 	stb	r3,32(r2)
      return;
  810be0:	00001406 	br	810c34 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  810be4:	e0bffd17 	ldw	r2,-12(fp)
  810be8:	10800104 	addi	r2,r2,4
  810bec:	10800037 	ldwio	r2,0(r2)
  810bf0:	1080200c 	andi	r2,r2,128
  810bf4:	103ff21e 	bne	r2,zero,810bc0 <__alt_mem_onchip_mem+0xff790bc0>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  810bf8:	01001904 	movi	r4,100
  810bfc:	0812b980 	call	812b98 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  810c00:	e0bffd17 	ldw	r2,-12(fp)
  810c04:	10800204 	addi	r2,r2,8
  810c08:	1007883a 	mov	r3,r2
  810c0c:	e0bfff03 	ldbu	r2,-4(fp)
  810c10:	18800035 	stwio	r2,0(r3)

  sp->address++;
  810c14:	e0bffe17 	ldw	r2,-8(fp)
  810c18:	108008c3 	ldbu	r2,35(r2)
  810c1c:	10800044 	addi	r2,r2,1
  810c20:	1007883a 	mov	r3,r2
  810c24:	e0bffe17 	ldw	r2,-8(fp)
  810c28:	10c008c5 	stb	r3,35(r2)
  810c2c:	00000106 	br	810c34 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  810c30:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  810c34:	e037883a 	mov	sp,fp
  810c38:	dfc00117 	ldw	ra,4(sp)
  810c3c:	df000017 	ldw	fp,0(sp)
  810c40:	dec00204 	addi	sp,sp,8
  810c44:	f800283a 	ret

00810c48 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  810c48:	defffc04 	addi	sp,sp,-16
  810c4c:	dfc00315 	stw	ra,12(sp)
  810c50:	df000215 	stw	fp,8(sp)
  810c54:	df000204 	addi	fp,sp,8
  810c58:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  810c5c:	01400044 	movi	r5,1
  810c60:	e13fff17 	ldw	r4,-4(fp)
  810c64:	0810ab80 	call	810ab8 <lcd_write_command>

  sp->x = 0;
  810c68:	e0bfff17 	ldw	r2,-4(fp)
  810c6c:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  810c70:	e0bfff17 	ldw	r2,-4(fp)
  810c74:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  810c78:	e0bfff17 	ldw	r2,-4(fp)
  810c7c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810c80:	e03ffe15 	stw	zero,-8(fp)
  810c84:	00001b06 	br	810cf4 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  810c88:	e0bffe17 	ldw	r2,-8(fp)
  810c8c:	108018e4 	muli	r2,r2,99
  810c90:	10801004 	addi	r2,r2,64
  810c94:	e0ffff17 	ldw	r3,-4(fp)
  810c98:	1885883a 	add	r2,r3,r2
  810c9c:	01801444 	movi	r6,81
  810ca0:	01400804 	movi	r5,32
  810ca4:	1009883a 	mov	r4,r2
  810ca8:	0802e440 	call	802e44 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  810cac:	e0bffe17 	ldw	r2,-8(fp)
  810cb0:	108018e4 	muli	r2,r2,99
  810cb4:	10800c04 	addi	r2,r2,48
  810cb8:	e0ffff17 	ldw	r3,-4(fp)
  810cbc:	1885883a 	add	r2,r3,r2
  810cc0:	01800404 	movi	r6,16
  810cc4:	01400804 	movi	r5,32
  810cc8:	1009883a 	mov	r4,r2
  810ccc:	0802e440 	call	802e44 <memset>
    sp->line[y].width = 0;
  810cd0:	e0ffff17 	ldw	r3,-4(fp)
  810cd4:	e0bffe17 	ldw	r2,-8(fp)
  810cd8:	108018e4 	muli	r2,r2,99
  810cdc:	1885883a 	add	r2,r3,r2
  810ce0:	10802444 	addi	r2,r2,145
  810ce4:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810ce8:	e0bffe17 	ldw	r2,-8(fp)
  810cec:	10800044 	addi	r2,r2,1
  810cf0:	e0bffe15 	stw	r2,-8(fp)
  810cf4:	e0bffe17 	ldw	r2,-8(fp)
  810cf8:	10800090 	cmplti	r2,r2,2
  810cfc:	103fe21e 	bne	r2,zero,810c88 <__alt_mem_onchip_mem+0xff790c88>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  810d00:	0001883a 	nop
  810d04:	e037883a 	mov	sp,fp
  810d08:	dfc00117 	ldw	ra,4(sp)
  810d0c:	df000017 	ldw	fp,0(sp)
  810d10:	dec00204 	addi	sp,sp,8
  810d14:	f800283a 	ret

00810d18 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  810d18:	defff704 	addi	sp,sp,-36
  810d1c:	dfc00815 	stw	ra,32(sp)
  810d20:	df000715 	stw	fp,28(sp)
  810d24:	df000704 	addi	fp,sp,28
  810d28:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  810d2c:	e0bfff17 	ldw	r2,-4(fp)
  810d30:	10800943 	ldbu	r2,37(r2)
  810d34:	10803fcc 	andi	r2,r2,255
  810d38:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810d3c:	e03ff915 	stw	zero,-28(fp)
  810d40:	00006706 	br	810ee0 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  810d44:	e0ffff17 	ldw	r3,-4(fp)
  810d48:	e0bff917 	ldw	r2,-28(fp)
  810d4c:	108018e4 	muli	r2,r2,99
  810d50:	1885883a 	add	r2,r3,r2
  810d54:	10802444 	addi	r2,r2,145
  810d58:	10800003 	ldbu	r2,0(r2)
  810d5c:	10803fcc 	andi	r2,r2,255
  810d60:	1080201c 	xori	r2,r2,128
  810d64:	10bfe004 	addi	r2,r2,-128
  810d68:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  810d6c:	e0ffff17 	ldw	r3,-4(fp)
  810d70:	e0bff917 	ldw	r2,-28(fp)
  810d74:	108018e4 	muli	r2,r2,99
  810d78:	1885883a 	add	r2,r3,r2
  810d7c:	10802484 	addi	r2,r2,146
  810d80:	10800003 	ldbu	r2,0(r2)
  810d84:	10c03fcc 	andi	r3,r2,255
  810d88:	e0bffc17 	ldw	r2,-16(fp)
  810d8c:	1885383a 	mul	r2,r3,r2
  810d90:	1005d23a 	srai	r2,r2,8
  810d94:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  810d98:	e0fffb17 	ldw	r3,-20(fp)
  810d9c:	e0bffd17 	ldw	r2,-12(fp)
  810da0:	18800116 	blt	r3,r2,810da8 <lcd_repaint_screen+0x90>
      offset = 0;
  810da4:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  810da8:	e03ffa15 	stw	zero,-24(fp)
  810dac:	00004606 	br	810ec8 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  810db0:	e0fffa17 	ldw	r3,-24(fp)
  810db4:	e0bffb17 	ldw	r2,-20(fp)
  810db8:	1885883a 	add	r2,r3,r2
  810dbc:	e17ffd17 	ldw	r5,-12(fp)
  810dc0:	1009883a 	mov	r4,r2
  810dc4:	080c7c80 	call	80c7c8 <__modsi3>
  810dc8:	1009883a 	mov	r4,r2
  810dcc:	e0ffff17 	ldw	r3,-4(fp)
  810dd0:	e0bff917 	ldw	r2,-28(fp)
  810dd4:	108018e4 	muli	r2,r2,99
  810dd8:	1885883a 	add	r2,r3,r2
  810ddc:	1105883a 	add	r2,r2,r4
  810de0:	10801004 	addi	r2,r2,64
  810de4:	10800003 	ldbu	r2,0(r2)
  810de8:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  810dec:	e0ffff17 	ldw	r3,-4(fp)
  810df0:	e0bff917 	ldw	r2,-28(fp)
  810df4:	108018e4 	muli	r2,r2,99
  810df8:	1887883a 	add	r3,r3,r2
  810dfc:	e0bffa17 	ldw	r2,-24(fp)
  810e00:	1885883a 	add	r2,r3,r2
  810e04:	10800c04 	addi	r2,r2,48
  810e08:	10800003 	ldbu	r2,0(r2)
  810e0c:	10c03fcc 	andi	r3,r2,255
  810e10:	18c0201c 	xori	r3,r3,128
  810e14:	18ffe004 	addi	r3,r3,-128
  810e18:	e0bffe07 	ldb	r2,-8(fp)
  810e1c:	18802726 	beq	r3,r2,810ebc <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  810e20:	e0fff917 	ldw	r3,-28(fp)
  810e24:	d0a01904 	addi	r2,gp,-32668
  810e28:	1885883a 	add	r2,r3,r2
  810e2c:	10800003 	ldbu	r2,0(r2)
  810e30:	1007883a 	mov	r3,r2
  810e34:	e0bffa17 	ldw	r2,-24(fp)
  810e38:	1885883a 	add	r2,r3,r2
  810e3c:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  810e40:	e0fffe43 	ldbu	r3,-7(fp)
  810e44:	e0bfff17 	ldw	r2,-4(fp)
  810e48:	108008c3 	ldbu	r2,35(r2)
  810e4c:	10803fcc 	andi	r2,r2,255
  810e50:	1080201c 	xori	r2,r2,128
  810e54:	10bfe004 	addi	r2,r2,-128
  810e58:	18800a26 	beq	r3,r2,810e84 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  810e5c:	e0fffe43 	ldbu	r3,-7(fp)
  810e60:	00bfe004 	movi	r2,-128
  810e64:	1884b03a 	or	r2,r3,r2
  810e68:	10803fcc 	andi	r2,r2,255
  810e6c:	100b883a 	mov	r5,r2
  810e70:	e13fff17 	ldw	r4,-4(fp)
  810e74:	0810ab80 	call	810ab8 <lcd_write_command>
          sp->address = address;
  810e78:	e0fffe43 	ldbu	r3,-7(fp)
  810e7c:	e0bfff17 	ldw	r2,-4(fp)
  810e80:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  810e84:	e0bffe03 	ldbu	r2,-8(fp)
  810e88:	10803fcc 	andi	r2,r2,255
  810e8c:	100b883a 	mov	r5,r2
  810e90:	e13fff17 	ldw	r4,-4(fp)
  810e94:	0810b700 	call	810b70 <lcd_write_data>
        sp->line[y].visible[x] = c;
  810e98:	e0ffff17 	ldw	r3,-4(fp)
  810e9c:	e0bff917 	ldw	r2,-28(fp)
  810ea0:	108018e4 	muli	r2,r2,99
  810ea4:	1887883a 	add	r3,r3,r2
  810ea8:	e0bffa17 	ldw	r2,-24(fp)
  810eac:	1885883a 	add	r2,r3,r2
  810eb0:	10800c04 	addi	r2,r2,48
  810eb4:	e0fffe03 	ldbu	r3,-8(fp)
  810eb8:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  810ebc:	e0bffa17 	ldw	r2,-24(fp)
  810ec0:	10800044 	addi	r2,r2,1
  810ec4:	e0bffa15 	stw	r2,-24(fp)
  810ec8:	e0bffa17 	ldw	r2,-24(fp)
  810ecc:	10800410 	cmplti	r2,r2,16
  810ed0:	103fb71e 	bne	r2,zero,810db0 <__alt_mem_onchip_mem+0xff790db0>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810ed4:	e0bff917 	ldw	r2,-28(fp)
  810ed8:	10800044 	addi	r2,r2,1
  810edc:	e0bff915 	stw	r2,-28(fp)
  810ee0:	e0bff917 	ldw	r2,-28(fp)
  810ee4:	10800090 	cmplti	r2,r2,2
  810ee8:	103f961e 	bne	r2,zero,810d44 <__alt_mem_onchip_mem+0xff790d44>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  810eec:	0001883a 	nop
  810ef0:	e037883a 	mov	sp,fp
  810ef4:	dfc00117 	ldw	ra,4(sp)
  810ef8:	df000017 	ldw	fp,0(sp)
  810efc:	dec00204 	addi	sp,sp,8
  810f00:	f800283a 	ret

00810f04 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  810f04:	defffc04 	addi	sp,sp,-16
  810f08:	dfc00315 	stw	ra,12(sp)
  810f0c:	df000215 	stw	fp,8(sp)
  810f10:	df000204 	addi	fp,sp,8
  810f14:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810f18:	e03ffe15 	stw	zero,-8(fp)
  810f1c:	00001d06 	br	810f94 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  810f20:	e0bffe17 	ldw	r2,-8(fp)
  810f24:	00800f16 	blt	zero,r2,810f64 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  810f28:	e0bffe17 	ldw	r2,-8(fp)
  810f2c:	108018e4 	muli	r2,r2,99
  810f30:	10801004 	addi	r2,r2,64
  810f34:	e0ffff17 	ldw	r3,-4(fp)
  810f38:	1889883a 	add	r4,r3,r2
  810f3c:	e0bffe17 	ldw	r2,-8(fp)
  810f40:	10800044 	addi	r2,r2,1
  810f44:	108018e4 	muli	r2,r2,99
  810f48:	10801004 	addi	r2,r2,64
  810f4c:	e0ffff17 	ldw	r3,-4(fp)
  810f50:	1885883a 	add	r2,r3,r2
  810f54:	01801404 	movi	r6,80
  810f58:	100b883a 	mov	r5,r2
  810f5c:	080874c0 	call	80874c <memcpy>
  810f60:	00000906 	br	810f88 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  810f64:	e0bffe17 	ldw	r2,-8(fp)
  810f68:	108018e4 	muli	r2,r2,99
  810f6c:	10801004 	addi	r2,r2,64
  810f70:	e0ffff17 	ldw	r3,-4(fp)
  810f74:	1885883a 	add	r2,r3,r2
  810f78:	01801404 	movi	r6,80
  810f7c:	01400804 	movi	r5,32
  810f80:	1009883a 	mov	r4,r2
  810f84:	0802e440 	call	802e44 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810f88:	e0bffe17 	ldw	r2,-8(fp)
  810f8c:	10800044 	addi	r2,r2,1
  810f90:	e0bffe15 	stw	r2,-8(fp)
  810f94:	e0bffe17 	ldw	r2,-8(fp)
  810f98:	10800090 	cmplti	r2,r2,2
  810f9c:	103fe01e 	bne	r2,zero,810f20 <__alt_mem_onchip_mem+0xff790f20>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  810fa0:	e0bfff17 	ldw	r2,-4(fp)
  810fa4:	10800883 	ldbu	r2,34(r2)
  810fa8:	10bfffc4 	addi	r2,r2,-1
  810fac:	1007883a 	mov	r3,r2
  810fb0:	e0bfff17 	ldw	r2,-4(fp)
  810fb4:	10c00885 	stb	r3,34(r2)
}
  810fb8:	0001883a 	nop
  810fbc:	e037883a 	mov	sp,fp
  810fc0:	dfc00117 	ldw	ra,4(sp)
  810fc4:	df000017 	ldw	fp,0(sp)
  810fc8:	dec00204 	addi	sp,sp,8
  810fcc:	f800283a 	ret

00810fd0 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  810fd0:	defff904 	addi	sp,sp,-28
  810fd4:	dfc00615 	stw	ra,24(sp)
  810fd8:	df000515 	stw	fp,20(sp)
  810fdc:	df000504 	addi	fp,sp,20
  810fe0:	e13ffe15 	stw	r4,-8(fp)
  810fe4:	2805883a 	mov	r2,r5
  810fe8:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  810fec:	e03ffb15 	stw	zero,-20(fp)
  810ff0:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  810ff4:	e0bffe17 	ldw	r2,-8(fp)
  810ff8:	10800a03 	ldbu	r2,40(r2)
  810ffc:	10803fcc 	andi	r2,r2,255
  811000:	1080201c 	xori	r2,r2,128
  811004:	10bfe004 	addi	r2,r2,-128
  811008:	108016d8 	cmpnei	r2,r2,91
  81100c:	1000411e 	bne	r2,zero,811114 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  811010:	e0bffe17 	ldw	r2,-8(fp)
  811014:	10800a04 	addi	r2,r2,40
  811018:	10800044 	addi	r2,r2,1
  81101c:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  811020:	00000c06 	br	811054 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  811024:	e0bffb17 	ldw	r2,-20(fp)
  811028:	10c002a4 	muli	r3,r2,10
  81102c:	e0bffd17 	ldw	r2,-12(fp)
  811030:	11000044 	addi	r4,r2,1
  811034:	e13ffd15 	stw	r4,-12(fp)
  811038:	10800003 	ldbu	r2,0(r2)
  81103c:	10803fcc 	andi	r2,r2,255
  811040:	1080201c 	xori	r2,r2,128
  811044:	10bfe004 	addi	r2,r2,-128
  811048:	10bff404 	addi	r2,r2,-48
  81104c:	1885883a 	add	r2,r3,r2
  811050:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  811054:	d0e00c17 	ldw	r3,-32720(gp)
  811058:	e0bffd17 	ldw	r2,-12(fp)
  81105c:	10800003 	ldbu	r2,0(r2)
  811060:	10803fcc 	andi	r2,r2,255
  811064:	1080201c 	xori	r2,r2,128
  811068:	10bfe004 	addi	r2,r2,-128
  81106c:	10800044 	addi	r2,r2,1
  811070:	1885883a 	add	r2,r3,r2
  811074:	10800003 	ldbu	r2,0(r2)
  811078:	10803fcc 	andi	r2,r2,255
  81107c:	1080010c 	andi	r2,r2,4
  811080:	103fe81e 	bne	r2,zero,811024 <__alt_mem_onchip_mem+0xff791024>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  811084:	e0bffd17 	ldw	r2,-12(fp)
  811088:	10800003 	ldbu	r2,0(r2)
  81108c:	10803fcc 	andi	r2,r2,255
  811090:	1080201c 	xori	r2,r2,128
  811094:	10bfe004 	addi	r2,r2,-128
  811098:	10800ed8 	cmpnei	r2,r2,59
  81109c:	10001f1e 	bne	r2,zero,81111c <lcd_handle_escape+0x14c>
    {
      ptr++;
  8110a0:	e0bffd17 	ldw	r2,-12(fp)
  8110a4:	10800044 	addi	r2,r2,1
  8110a8:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  8110ac:	00000c06 	br	8110e0 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  8110b0:	e0bffc17 	ldw	r2,-16(fp)
  8110b4:	10c002a4 	muli	r3,r2,10
  8110b8:	e0bffd17 	ldw	r2,-12(fp)
  8110bc:	11000044 	addi	r4,r2,1
  8110c0:	e13ffd15 	stw	r4,-12(fp)
  8110c4:	10800003 	ldbu	r2,0(r2)
  8110c8:	10803fcc 	andi	r2,r2,255
  8110cc:	1080201c 	xori	r2,r2,128
  8110d0:	10bfe004 	addi	r2,r2,-128
  8110d4:	10bff404 	addi	r2,r2,-48
  8110d8:	1885883a 	add	r2,r3,r2
  8110dc:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  8110e0:	d0e00c17 	ldw	r3,-32720(gp)
  8110e4:	e0bffd17 	ldw	r2,-12(fp)
  8110e8:	10800003 	ldbu	r2,0(r2)
  8110ec:	10803fcc 	andi	r2,r2,255
  8110f0:	1080201c 	xori	r2,r2,128
  8110f4:	10bfe004 	addi	r2,r2,-128
  8110f8:	10800044 	addi	r2,r2,1
  8110fc:	1885883a 	add	r2,r3,r2
  811100:	10800003 	ldbu	r2,0(r2)
  811104:	10803fcc 	andi	r2,r2,255
  811108:	1080010c 	andi	r2,r2,4
  81110c:	103fe81e 	bne	r2,zero,8110b0 <__alt_mem_onchip_mem+0xff7910b0>
  811110:	00000206 	br	81111c <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  811114:	00bfffc4 	movi	r2,-1
  811118:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  81111c:	e0bfff07 	ldb	r2,-4(fp)
  811120:	10c012a0 	cmpeqi	r3,r2,74
  811124:	1800291e 	bne	r3,zero,8111cc <lcd_handle_escape+0x1fc>
  811128:	10c012c8 	cmpgei	r3,r2,75
  81112c:	1800031e 	bne	r3,zero,81113c <lcd_handle_escape+0x16c>
  811130:	10801220 	cmpeqi	r2,r2,72
  811134:	1000061e 	bne	r2,zero,811150 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  811138:	00004a06 	br	811264 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  81113c:	10c012e0 	cmpeqi	r3,r2,75
  811140:	1800281e 	bne	r3,zero,8111e4 <lcd_handle_escape+0x214>
  811144:	108019a0 	cmpeqi	r2,r2,102
  811148:	1000011e 	bne	r2,zero,811150 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  81114c:	00004506 	br	811264 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  811150:	e0bffc17 	ldw	r2,-16(fp)
  811154:	0080050e 	bge	zero,r2,81116c <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  811158:	e0bffc17 	ldw	r2,-16(fp)
  81115c:	10bfffc4 	addi	r2,r2,-1
  811160:	1007883a 	mov	r3,r2
  811164:	e0bffe17 	ldw	r2,-8(fp)
  811168:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  81116c:	e0bffb17 	ldw	r2,-20(fp)
  811170:	0080370e 	bge	zero,r2,811250 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  811174:	e0bffb17 	ldw	r2,-20(fp)
  811178:	10bfffc4 	addi	r2,r2,-1
  81117c:	1007883a 	mov	r3,r2
  811180:	e0bffe17 	ldw	r2,-8(fp)
  811184:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  811188:	e0bffe17 	ldw	r2,-8(fp)
  81118c:	10800883 	ldbu	r2,34(r2)
  811190:	10803fcc 	andi	r2,r2,255
  811194:	10800170 	cmpltui	r2,r2,5
  811198:	1000061e 	bne	r2,zero,8111b4 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  81119c:	e0bffe17 	ldw	r2,-8(fp)
  8111a0:	00c00104 	movi	r3,4
  8111a4:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  8111a8:	00000206 	br	8111b4 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  8111ac:	e13ffe17 	ldw	r4,-8(fp)
  8111b0:	0810f040 	call	810f04 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  8111b4:	e0bffe17 	ldw	r2,-8(fp)
  8111b8:	10800883 	ldbu	r2,34(r2)
  8111bc:	10803fcc 	andi	r2,r2,255
  8111c0:	108000e8 	cmpgeui	r2,r2,3
  8111c4:	103ff91e 	bne	r2,zero,8111ac <__alt_mem_onchip_mem+0xff7911ac>
        lcd_scroll_up(sp);
    }
    break;
  8111c8:	00002106 	br	811250 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  8111cc:	e0bffb17 	ldw	r2,-20(fp)
  8111d0:	10800098 	cmpnei	r2,r2,2
  8111d4:	1000201e 	bne	r2,zero,811258 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  8111d8:	e13ffe17 	ldw	r4,-8(fp)
  8111dc:	0810c480 	call	810c48 <lcd_clear_screen>
    break;
  8111e0:	00001d06 	br	811258 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  8111e4:	e0bffb17 	ldw	r2,-20(fp)
  8111e8:	00801d16 	blt	zero,r2,811260 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8111ec:	e0bffe17 	ldw	r2,-8(fp)
  8111f0:	10800843 	ldbu	r2,33(r2)
  8111f4:	10803fcc 	andi	r2,r2,255
  8111f8:	10801428 	cmpgeui	r2,r2,80
  8111fc:	1000181e 	bne	r2,zero,811260 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  811200:	e0bffe17 	ldw	r2,-8(fp)
  811204:	10800883 	ldbu	r2,34(r2)
  811208:	10803fcc 	andi	r2,r2,255
  81120c:	108018e4 	muli	r2,r2,99
  811210:	10801004 	addi	r2,r2,64
  811214:	e0fffe17 	ldw	r3,-8(fp)
  811218:	1887883a 	add	r3,r3,r2
  81121c:	e0bffe17 	ldw	r2,-8(fp)
  811220:	10800843 	ldbu	r2,33(r2)
  811224:	10803fcc 	andi	r2,r2,255
  811228:	1889883a 	add	r4,r3,r2
  81122c:	e0bffe17 	ldw	r2,-8(fp)
  811230:	10800843 	ldbu	r2,33(r2)
  811234:	10803fcc 	andi	r2,r2,255
  811238:	00c01404 	movi	r3,80
  81123c:	1885c83a 	sub	r2,r3,r2
  811240:	100d883a 	mov	r6,r2
  811244:	01400804 	movi	r5,32
  811248:	0802e440 	call	802e44 <memset>
    }
    break;
  81124c:	00000406 	br	811260 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  811250:	0001883a 	nop
  811254:	00000306 	br	811264 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  811258:	0001883a 	nop
  81125c:	00000106 	br	811264 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  811260:	0001883a 	nop
  }
}
  811264:	0001883a 	nop
  811268:	e037883a 	mov	sp,fp
  81126c:	dfc00117 	ldw	ra,4(sp)
  811270:	df000017 	ldw	fp,0(sp)
  811274:	dec00204 	addi	sp,sp,8
  811278:	f800283a 	ret

0081127c <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  81127c:	defff304 	addi	sp,sp,-52
  811280:	dfc00c15 	stw	ra,48(sp)
  811284:	df000b15 	stw	fp,44(sp)
  811288:	df000b04 	addi	fp,sp,44
  81128c:	e13ffc15 	stw	r4,-16(fp)
  811290:	e17ffd15 	stw	r5,-12(fp)
  811294:	e1bffe15 	stw	r6,-8(fp)
  811298:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  81129c:	e0bffe17 	ldw	r2,-8(fp)
  8112a0:	e0fffd17 	ldw	r3,-12(fp)
  8112a4:	1885883a 	add	r2,r3,r2
  8112a8:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  8112ac:	e0bffc17 	ldw	r2,-16(fp)
  8112b0:	00c00044 	movi	r3,1
  8112b4:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  8112b8:	00009906 	br	811520 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  8112bc:	e0bffd17 	ldw	r2,-12(fp)
  8112c0:	10800003 	ldbu	r2,0(r2)
  8112c4:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  8112c8:	e0bffc17 	ldw	r2,-16(fp)
  8112cc:	10800903 	ldbu	r2,36(r2)
  8112d0:	10803fcc 	andi	r2,r2,255
  8112d4:	1080201c 	xori	r2,r2,128
  8112d8:	10bfe004 	addi	r2,r2,-128
  8112dc:	10003716 	blt	r2,zero,8113bc <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  8112e0:	e0bffc17 	ldw	r2,-16(fp)
  8112e4:	10800903 	ldbu	r2,36(r2)
  8112e8:	10803fcc 	andi	r2,r2,255
  8112ec:	1080201c 	xori	r2,r2,128
  8112f0:	10bfe004 	addi	r2,r2,-128
  8112f4:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  8112f8:	e0bffa17 	ldw	r2,-24(fp)
  8112fc:	1000031e 	bne	r2,zero,81130c <altera_avalon_lcd_16207_write+0x90>
  811300:	e0bff907 	ldb	r2,-28(fp)
  811304:	108016d8 	cmpnei	r2,r2,91
  811308:	10000d1e 	bne	r2,zero,811340 <altera_avalon_lcd_16207_write+0xc4>
  81130c:	e0bffa17 	ldw	r2,-24(fp)
  811310:	10001826 	beq	r2,zero,811374 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  811314:	d0e00c17 	ldw	r3,-32720(gp)
  811318:	e0bff907 	ldb	r2,-28(fp)
  81131c:	10800044 	addi	r2,r2,1
  811320:	1885883a 	add	r2,r3,r2
  811324:	10800003 	ldbu	r2,0(r2)
  811328:	10803fcc 	andi	r2,r2,255
  81132c:	1080010c 	andi	r2,r2,4
  811330:	1000101e 	bne	r2,zero,811374 <altera_avalon_lcd_16207_write+0xf8>
  811334:	e0bff907 	ldb	r2,-28(fp)
  811338:	10800ee0 	cmpeqi	r2,r2,59
  81133c:	10000d1e 	bne	r2,zero,811374 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  811340:	e0fffc17 	ldw	r3,-16(fp)
  811344:	e0bffa17 	ldw	r2,-24(fp)
  811348:	1885883a 	add	r2,r3,r2
  81134c:	10800a04 	addi	r2,r2,40
  811350:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  811354:	e0bff907 	ldb	r2,-28(fp)
  811358:	100b883a 	mov	r5,r2
  81135c:	e13ffc17 	ldw	r4,-16(fp)
  811360:	0810fd00 	call	810fd0 <lcd_handle_escape>

        sp->esccount = -1;
  811364:	e0bffc17 	ldw	r2,-16(fp)
  811368:	00ffffc4 	movi	r3,-1
  81136c:	10c00905 	stb	r3,36(r2)
  811370:	00006806 	br	811514 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  811374:	e0bffc17 	ldw	r2,-16(fp)
  811378:	10800903 	ldbu	r2,36(r2)
  81137c:	10803fcc 	andi	r2,r2,255
  811380:	108001e8 	cmpgeui	r2,r2,7
  811384:	1000631e 	bne	r2,zero,811514 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  811388:	e0fffc17 	ldw	r3,-16(fp)
  81138c:	e0bffa17 	ldw	r2,-24(fp)
  811390:	1885883a 	add	r2,r3,r2
  811394:	10800a04 	addi	r2,r2,40
  811398:	e0fff903 	ldbu	r3,-28(fp)
  81139c:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  8113a0:	e0bffc17 	ldw	r2,-16(fp)
  8113a4:	10800903 	ldbu	r2,36(r2)
  8113a8:	10800044 	addi	r2,r2,1
  8113ac:	1007883a 	mov	r3,r2
  8113b0:	e0bffc17 	ldw	r2,-16(fp)
  8113b4:	10c00905 	stb	r3,36(r2)
  8113b8:	00005606 	br	811514 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  8113bc:	e0bff907 	ldb	r2,-28(fp)
  8113c0:	108006d8 	cmpnei	r2,r2,27
  8113c4:	1000031e 	bne	r2,zero,8113d4 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  8113c8:	e0bffc17 	ldw	r2,-16(fp)
  8113cc:	10000905 	stb	zero,36(r2)
  8113d0:	00005006 	br	811514 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  8113d4:	e0bff907 	ldb	r2,-28(fp)
  8113d8:	10800358 	cmpnei	r2,r2,13
  8113dc:	1000031e 	bne	r2,zero,8113ec <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  8113e0:	e0bffc17 	ldw	r2,-16(fp)
  8113e4:	10000845 	stb	zero,33(r2)
  8113e8:	00004a06 	br	811514 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  8113ec:	e0bff907 	ldb	r2,-28(fp)
  8113f0:	10800298 	cmpnei	r2,r2,10
  8113f4:	1000101e 	bne	r2,zero,811438 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  8113f8:	e0bffc17 	ldw	r2,-16(fp)
  8113fc:	10000845 	stb	zero,33(r2)
      sp->y++;
  811400:	e0bffc17 	ldw	r2,-16(fp)
  811404:	10800883 	ldbu	r2,34(r2)
  811408:	10800044 	addi	r2,r2,1
  81140c:	1007883a 	mov	r3,r2
  811410:	e0bffc17 	ldw	r2,-16(fp)
  811414:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  811418:	e0bffc17 	ldw	r2,-16(fp)
  81141c:	10800883 	ldbu	r2,34(r2)
  811420:	10803fcc 	andi	r2,r2,255
  811424:	108000f0 	cmpltui	r2,r2,3
  811428:	10003a1e 	bne	r2,zero,811514 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  81142c:	e13ffc17 	ldw	r4,-16(fp)
  811430:	0810f040 	call	810f04 <lcd_scroll_up>
  811434:	00003706 	br	811514 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  811438:	e0bff907 	ldb	r2,-28(fp)
  81143c:	10800218 	cmpnei	r2,r2,8
  811440:	10000b1e 	bne	r2,zero,811470 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  811444:	e0bffc17 	ldw	r2,-16(fp)
  811448:	10800843 	ldbu	r2,33(r2)
  81144c:	10803fcc 	andi	r2,r2,255
  811450:	10003026 	beq	r2,zero,811514 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  811454:	e0bffc17 	ldw	r2,-16(fp)
  811458:	10800843 	ldbu	r2,33(r2)
  81145c:	10bfffc4 	addi	r2,r2,-1
  811460:	1007883a 	mov	r3,r2
  811464:	e0bffc17 	ldw	r2,-16(fp)
  811468:	10c00845 	stb	r3,33(r2)
  81146c:	00002906 	br	811514 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  811470:	d0e00c17 	ldw	r3,-32720(gp)
  811474:	e0bff907 	ldb	r2,-28(fp)
  811478:	10800044 	addi	r2,r2,1
  81147c:	1885883a 	add	r2,r3,r2
  811480:	10800003 	ldbu	r2,0(r2)
  811484:	10803fcc 	andi	r2,r2,255
  811488:	1080201c 	xori	r2,r2,128
  81148c:	10bfe004 	addi	r2,r2,-128
  811490:	108025cc 	andi	r2,r2,151
  811494:	10001f26 	beq	r2,zero,811514 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  811498:	e0bffc17 	ldw	r2,-16(fp)
  81149c:	10800883 	ldbu	r2,34(r2)
  8114a0:	10803fcc 	andi	r2,r2,255
  8114a4:	108000b0 	cmpltui	r2,r2,2
  8114a8:	1000021e 	bne	r2,zero,8114b4 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  8114ac:	e13ffc17 	ldw	r4,-16(fp)
  8114b0:	0810f040 	call	810f04 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8114b4:	e0bffc17 	ldw	r2,-16(fp)
  8114b8:	10800843 	ldbu	r2,33(r2)
  8114bc:	10803fcc 	andi	r2,r2,255
  8114c0:	10801428 	cmpgeui	r2,r2,80
  8114c4:	10000d1e 	bne	r2,zero,8114fc <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  8114c8:	e0bffc17 	ldw	r2,-16(fp)
  8114cc:	10800883 	ldbu	r2,34(r2)
  8114d0:	10c03fcc 	andi	r3,r2,255
  8114d4:	e0bffc17 	ldw	r2,-16(fp)
  8114d8:	10800843 	ldbu	r2,33(r2)
  8114dc:	10803fcc 	andi	r2,r2,255
  8114e0:	e13ffc17 	ldw	r4,-16(fp)
  8114e4:	18c018e4 	muli	r3,r3,99
  8114e8:	20c7883a 	add	r3,r4,r3
  8114ec:	1885883a 	add	r2,r3,r2
  8114f0:	10801004 	addi	r2,r2,64
  8114f4:	e0fff903 	ldbu	r3,-28(fp)
  8114f8:	10c00005 	stb	r3,0(r2)

      sp->x++;
  8114fc:	e0bffc17 	ldw	r2,-16(fp)
  811500:	10800843 	ldbu	r2,33(r2)
  811504:	10800044 	addi	r2,r2,1
  811508:	1007883a 	mov	r3,r2
  81150c:	e0bffc17 	ldw	r2,-16(fp)
  811510:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  811514:	e0bffd17 	ldw	r2,-12(fp)
  811518:	10800044 	addi	r2,r2,1
  81151c:	e0bffd15 	stw	r2,-12(fp)
  811520:	e0fffd17 	ldw	r3,-12(fp)
  811524:	e0bff817 	ldw	r2,-32(fp)
  811528:	18bf6436 	bltu	r3,r2,8112bc <__alt_mem_onchip_mem+0xff7912bc>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  81152c:	00800404 	movi	r2,16
  811530:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811534:	e03ff515 	stw	zero,-44(fp)
  811538:	00003706 	br	811618 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  81153c:	00801404 	movi	r2,80
  811540:	e0bff715 	stw	r2,-36(fp)
  811544:	00001106 	br	81158c <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  811548:	e0bff717 	ldw	r2,-36(fp)
  81154c:	10bfffc4 	addi	r2,r2,-1
  811550:	e13ffc17 	ldw	r4,-16(fp)
  811554:	e0fff517 	ldw	r3,-44(fp)
  811558:	18c018e4 	muli	r3,r3,99
  81155c:	20c7883a 	add	r3,r4,r3
  811560:	1885883a 	add	r2,r3,r2
  811564:	10801004 	addi	r2,r2,64
  811568:	10800003 	ldbu	r2,0(r2)
  81156c:	10803fcc 	andi	r2,r2,255
  811570:	1080201c 	xori	r2,r2,128
  811574:	10bfe004 	addi	r2,r2,-128
  811578:	10800820 	cmpeqi	r2,r2,32
  81157c:	10000626 	beq	r2,zero,811598 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  811580:	e0bff717 	ldw	r2,-36(fp)
  811584:	10bfffc4 	addi	r2,r2,-1
  811588:	e0bff715 	stw	r2,-36(fp)
  81158c:	e0bff717 	ldw	r2,-36(fp)
  811590:	00bfed16 	blt	zero,r2,811548 <__alt_mem_onchip_mem+0xff791548>
  811594:	00000106 	br	81159c <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  811598:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  81159c:	e0bff717 	ldw	r2,-36(fp)
  8115a0:	10800448 	cmpgei	r2,r2,17
  8115a4:	1000031e 	bne	r2,zero,8115b4 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  8115a8:	00800404 	movi	r2,16
  8115ac:	e0bff715 	stw	r2,-36(fp)
  8115b0:	00000306 	br	8115c0 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  8115b4:	e0bff717 	ldw	r2,-36(fp)
  8115b8:	10800044 	addi	r2,r2,1
  8115bc:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  8115c0:	e0bff717 	ldw	r2,-36(fp)
  8115c4:	1009883a 	mov	r4,r2
  8115c8:	e0fffc17 	ldw	r3,-16(fp)
  8115cc:	e0bff517 	ldw	r2,-44(fp)
  8115d0:	108018e4 	muli	r2,r2,99
  8115d4:	1885883a 	add	r2,r3,r2
  8115d8:	10802444 	addi	r2,r2,145
  8115dc:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  8115e0:	e0fff617 	ldw	r3,-40(fp)
  8115e4:	e0bff717 	ldw	r2,-36(fp)
  8115e8:	1880020e 	bge	r3,r2,8115f4 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  8115ec:	e0bff717 	ldw	r2,-36(fp)
  8115f0:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  8115f4:	e0fffc17 	ldw	r3,-16(fp)
  8115f8:	e0bff517 	ldw	r2,-44(fp)
  8115fc:	108018e4 	muli	r2,r2,99
  811600:	1885883a 	add	r2,r3,r2
  811604:	10802484 	addi	r2,r2,146
  811608:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81160c:	e0bff517 	ldw	r2,-44(fp)
  811610:	10800044 	addi	r2,r2,1
  811614:	e0bff515 	stw	r2,-44(fp)
  811618:	e0bff517 	ldw	r2,-44(fp)
  81161c:	10800090 	cmplti	r2,r2,2
  811620:	103fc61e 	bne	r2,zero,81153c <__alt_mem_onchip_mem+0xff79153c>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  811624:	e0bff617 	ldw	r2,-40(fp)
  811628:	10800448 	cmpgei	r2,r2,17
  81162c:	1000031e 	bne	r2,zero,81163c <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  811630:	e0bffc17 	ldw	r2,-16(fp)
  811634:	10000985 	stb	zero,38(r2)
  811638:	00002e06 	br	8116f4 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  81163c:	e0bff617 	ldw	r2,-40(fp)
  811640:	1085883a 	add	r2,r2,r2
  811644:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  811648:	e0bff617 	ldw	r2,-40(fp)
  81164c:	1007883a 	mov	r3,r2
  811650:	e0bffc17 	ldw	r2,-16(fp)
  811654:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811658:	e03ff515 	stw	zero,-44(fp)
  81165c:	00002206 	br	8116e8 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  811660:	e0fffc17 	ldw	r3,-16(fp)
  811664:	e0bff517 	ldw	r2,-44(fp)
  811668:	108018e4 	muli	r2,r2,99
  81166c:	1885883a 	add	r2,r3,r2
  811670:	10802444 	addi	r2,r2,145
  811674:	10800003 	ldbu	r2,0(r2)
  811678:	10803fcc 	andi	r2,r2,255
  81167c:	1080201c 	xori	r2,r2,128
  811680:	10bfe004 	addi	r2,r2,-128
  811684:	10800450 	cmplti	r2,r2,17
  811688:	1000141e 	bne	r2,zero,8116dc <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  81168c:	e0fffc17 	ldw	r3,-16(fp)
  811690:	e0bff517 	ldw	r2,-44(fp)
  811694:	108018e4 	muli	r2,r2,99
  811698:	1885883a 	add	r2,r3,r2
  81169c:	10802444 	addi	r2,r2,145
  8116a0:	10800003 	ldbu	r2,0(r2)
  8116a4:	10803fcc 	andi	r2,r2,255
  8116a8:	1080201c 	xori	r2,r2,128
  8116ac:	10bfe004 	addi	r2,r2,-128
  8116b0:	1004923a 	slli	r2,r2,8
  8116b4:	e17ff617 	ldw	r5,-40(fp)
  8116b8:	1009883a 	mov	r4,r2
  8116bc:	080c7440 	call	80c744 <__divsi3>
  8116c0:	1009883a 	mov	r4,r2
  8116c4:	e0fffc17 	ldw	r3,-16(fp)
  8116c8:	e0bff517 	ldw	r2,-44(fp)
  8116cc:	108018e4 	muli	r2,r2,99
  8116d0:	1885883a 	add	r2,r3,r2
  8116d4:	10802484 	addi	r2,r2,146
  8116d8:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8116dc:	e0bff517 	ldw	r2,-44(fp)
  8116e0:	10800044 	addi	r2,r2,1
  8116e4:	e0bff515 	stw	r2,-44(fp)
  8116e8:	e0bff517 	ldw	r2,-44(fp)
  8116ec:	10800090 	cmplti	r2,r2,2
  8116f0:	103fdb1e 	bne	r2,zero,811660 <__alt_mem_onchip_mem+0xff791660>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  8116f4:	e0bffc17 	ldw	r2,-16(fp)
  8116f8:	10800943 	ldbu	r2,37(r2)
  8116fc:	10803fcc 	andi	r2,r2,255
  811700:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  811704:	e13ffc17 	ldw	r4,-16(fp)
  811708:	0810d180 	call	810d18 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  81170c:	e0bffc17 	ldw	r2,-16(fp)
  811710:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  811714:	e0bffc17 	ldw	r2,-16(fp)
  811718:	10800943 	ldbu	r2,37(r2)
  81171c:	10c03fcc 	andi	r3,r2,255
  811720:	e0bffb17 	ldw	r2,-20(fp)
  811724:	18800426 	beq	r3,r2,811738 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  811728:	e0bffc17 	ldw	r2,-16(fp)
  81172c:	00c00044 	movi	r3,1
  811730:	10c009c5 	stb	r3,39(r2)
  }
  811734:	003fef06 	br	8116f4 <__alt_mem_onchip_mem+0xff7916f4>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  811738:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  81173c:	e0bffe17 	ldw	r2,-8(fp)
}
  811740:	e037883a 	mov	sp,fp
  811744:	dfc00117 	ldw	ra,4(sp)
  811748:	df000017 	ldw	fp,0(sp)
  81174c:	dec00204 	addi	sp,sp,8
  811750:	f800283a 	ret

00811754 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  811754:	defffc04 	addi	sp,sp,-16
  811758:	dfc00315 	stw	ra,12(sp)
  81175c:	df000215 	stw	fp,8(sp)
  811760:	df000204 	addi	fp,sp,8
  811764:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  811768:	e0bfff17 	ldw	r2,-4(fp)
  81176c:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  811770:	e0bffe17 	ldw	r2,-8(fp)
  811774:	10800943 	ldbu	r2,37(r2)
  811778:	10803fcc 	andi	r2,r2,255
  81177c:	10c00044 	addi	r3,r2,1
  811780:	e0bffe17 	ldw	r2,-8(fp)
  811784:	10800983 	ldbu	r2,38(r2)
  811788:	10803fcc 	andi	r2,r2,255
  81178c:	18800316 	blt	r3,r2,81179c <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  811790:	e0bffe17 	ldw	r2,-8(fp)
  811794:	10000945 	stb	zero,37(r2)
  811798:	00000606 	br	8117b4 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  81179c:	e0bffe17 	ldw	r2,-8(fp)
  8117a0:	10800943 	ldbu	r2,37(r2)
  8117a4:	10800044 	addi	r2,r2,1
  8117a8:	1007883a 	mov	r3,r2
  8117ac:	e0bffe17 	ldw	r2,-8(fp)
  8117b0:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  8117b4:	e0bffe17 	ldw	r2,-8(fp)
  8117b8:	10800983 	ldbu	r2,38(r2)
  8117bc:	10803fcc 	andi	r2,r2,255
  8117c0:	10000826 	beq	r2,zero,8117e4 <alt_lcd_16207_timeout+0x90>
  8117c4:	e0bffe17 	ldw	r2,-8(fp)
  8117c8:	108009c3 	ldbu	r2,39(r2)
  8117cc:	10803fcc 	andi	r2,r2,255
  8117d0:	1080201c 	xori	r2,r2,128
  8117d4:	10bfe004 	addi	r2,r2,-128
  8117d8:	1000021e 	bne	r2,zero,8117e4 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  8117dc:	e13ffe17 	ldw	r4,-8(fp)
  8117e0:	0810d180 	call	810d18 <lcd_repaint_screen>

  return sp->period;
  8117e4:	e0bffe17 	ldw	r2,-8(fp)
  8117e8:	10800717 	ldw	r2,28(r2)
}
  8117ec:	e037883a 	mov	sp,fp
  8117f0:	dfc00117 	ldw	ra,4(sp)
  8117f4:	df000017 	ldw	fp,0(sp)
  8117f8:	dec00204 	addi	sp,sp,8
  8117fc:	f800283a 	ret

00811800 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  811800:	defffc04 	addi	sp,sp,-16
  811804:	dfc00315 	stw	ra,12(sp)
  811808:	df000215 	stw	fp,8(sp)
  81180c:	df000204 	addi	fp,sp,8
  811810:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  811814:	e0bfff17 	ldw	r2,-4(fp)
  811818:	10800017 	ldw	r2,0(r2)
  81181c:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  811820:	e0bfff17 	ldw	r2,-4(fp)
  811824:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  811828:	010ea604 	movi	r4,15000
  81182c:	0812b980 	call	812b98 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  811830:	e0bffe17 	ldw	r2,-8(fp)
  811834:	00c00c04 	movi	r3,48
  811838:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  81183c:	01040104 	movi	r4,4100
  811840:	0812b980 	call	812b98 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  811844:	e0bffe17 	ldw	r2,-8(fp)
  811848:	00c00c04 	movi	r3,48
  81184c:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  811850:	0100fa04 	movi	r4,1000
  811854:	0812b980 	call	812b98 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  811858:	e0bffe17 	ldw	r2,-8(fp)
  81185c:	00c00c04 	movi	r3,48
  811860:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  811864:	01400e04 	movi	r5,56
  811868:	e13fff17 	ldw	r4,-4(fp)
  81186c:	0810ab80 	call	810ab8 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  811870:	01400204 	movi	r5,8
  811874:	e13fff17 	ldw	r4,-4(fp)
  811878:	0810ab80 	call	810ab8 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  81187c:	e13fff17 	ldw	r4,-4(fp)
  811880:	0810c480 	call	810c48 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  811884:	01400184 	movi	r5,6
  811888:	e13fff17 	ldw	r4,-4(fp)
  81188c:	0810ab80 	call	810ab8 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  811890:	01400304 	movi	r5,12
  811894:	e13fff17 	ldw	r4,-4(fp)
  811898:	0810ab80 	call	810ab8 <lcd_write_command>

  sp->esccount = -1;
  81189c:	e0bfff17 	ldw	r2,-4(fp)
  8118a0:	00ffffc4 	movi	r3,-1
  8118a4:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  8118a8:	e0bfff17 	ldw	r2,-4(fp)
  8118ac:	10800a04 	addi	r2,r2,40
  8118b0:	01800204 	movi	r6,8
  8118b4:	000b883a 	mov	r5,zero
  8118b8:	1009883a 	mov	r4,r2
  8118bc:	0802e440 	call	802e44 <memset>

  sp->scrollpos = 0;
  8118c0:	e0bfff17 	ldw	r2,-4(fp)
  8118c4:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  8118c8:	e0bfff17 	ldw	r2,-4(fp)
  8118cc:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  8118d0:	e0bfff17 	ldw	r2,-4(fp)
  8118d4:	100009c5 	stb	zero,39(r2)
  8118d8:	d0a77017 	ldw	r2,-25152(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  8118dc:	01400284 	movi	r5,10
  8118e0:	1009883a 	mov	r4,r2
  8118e4:	080c83c0 	call	80c83c <__udivsi3>
  8118e8:	1007883a 	mov	r3,r2
  8118ec:	e0bfff17 	ldw	r2,-4(fp)
  8118f0:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  8118f4:	e0bfff17 	ldw	r2,-4(fp)
  8118f8:	10c00104 	addi	r3,r2,4
  8118fc:	e0bfff17 	ldw	r2,-4(fp)
  811900:	10800717 	ldw	r2,28(r2)
  811904:	e1ffff17 	ldw	r7,-4(fp)
  811908:	01802074 	movhi	r6,129
  81190c:	3185d504 	addi	r6,r6,5972
  811910:	100b883a 	mov	r5,r2
  811914:	1809883a 	mov	r4,r3
  811918:	080ef600 	call	80ef60 <alt_alarm_start>
}
  81191c:	0001883a 	nop
  811920:	e037883a 	mov	sp,fp
  811924:	dfc00117 	ldw	ra,4(sp)
  811928:	df000017 	ldw	fp,0(sp)
  81192c:	dec00204 	addi	sp,sp,8
  811930:	f800283a 	ret

00811934 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  811934:	defffa04 	addi	sp,sp,-24
  811938:	dfc00515 	stw	ra,20(sp)
  81193c:	df000415 	stw	fp,16(sp)
  811940:	df000404 	addi	fp,sp,16
  811944:	e13ffd15 	stw	r4,-12(fp)
  811948:	e17ffe15 	stw	r5,-8(fp)
  81194c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  811950:	e0bffd17 	ldw	r2,-12(fp)
  811954:	10800017 	ldw	r2,0(r2)
  811958:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  81195c:	e0bffc17 	ldw	r2,-16(fp)
  811960:	10c00a04 	addi	r3,r2,40
  811964:	e0bffd17 	ldw	r2,-12(fp)
  811968:	10800217 	ldw	r2,8(r2)
  81196c:	100f883a 	mov	r7,r2
  811970:	e1bfff17 	ldw	r6,-4(fp)
  811974:	e17ffe17 	ldw	r5,-8(fp)
  811978:	1809883a 	mov	r4,r3
  81197c:	081127c0 	call	81127c <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  811980:	e037883a 	mov	sp,fp
  811984:	dfc00117 	ldw	ra,4(sp)
  811988:	df000017 	ldw	fp,0(sp)
  81198c:	dec00204 	addi	sp,sp,8
  811990:	f800283a 	ret

00811994 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  811994:	defffa04 	addi	sp,sp,-24
  811998:	dfc00515 	stw	ra,20(sp)
  81199c:	df000415 	stw	fp,16(sp)
  8119a0:	df000404 	addi	fp,sp,16
  8119a4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8119a8:	0007883a 	mov	r3,zero
  8119ac:	e0bfff17 	ldw	r2,-4(fp)
  8119b0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8119b4:	e0bfff17 	ldw	r2,-4(fp)
  8119b8:	10800104 	addi	r2,r2,4
  8119bc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8119c0:	0005303a 	rdctl	r2,status
  8119c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8119c8:	e0fffd17 	ldw	r3,-12(fp)
  8119cc:	00bfff84 	movi	r2,-2
  8119d0:	1884703a 	and	r2,r3,r2
  8119d4:	1001703a 	wrctl	status,r2
  
  return context;
  8119d8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8119dc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  8119e0:	080fd0c0 	call	80fd0c <alt_tick>
  8119e4:	e0bffc17 	ldw	r2,-16(fp)
  8119e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8119ec:	e0bffe17 	ldw	r2,-8(fp)
  8119f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8119f4:	0001883a 	nop
  8119f8:	e037883a 	mov	sp,fp
  8119fc:	dfc00117 	ldw	ra,4(sp)
  811a00:	df000017 	ldw	fp,0(sp)
  811a04:	dec00204 	addi	sp,sp,8
  811a08:	f800283a 	ret

00811a0c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  811a0c:	defff804 	addi	sp,sp,-32
  811a10:	dfc00715 	stw	ra,28(sp)
  811a14:	df000615 	stw	fp,24(sp)
  811a18:	df000604 	addi	fp,sp,24
  811a1c:	e13ffc15 	stw	r4,-16(fp)
  811a20:	e17ffd15 	stw	r5,-12(fp)
  811a24:	e1bffe15 	stw	r6,-8(fp)
  811a28:	e1ffff15 	stw	r7,-4(fp)
  811a2c:	e0bfff17 	ldw	r2,-4(fp)
  811a30:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  811a34:	d0a77017 	ldw	r2,-25152(gp)
  811a38:	1000021e 	bne	r2,zero,811a44 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  811a3c:	e0bffb17 	ldw	r2,-20(fp)
  811a40:	d0a77015 	stw	r2,-25152(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  811a44:	e0bffc17 	ldw	r2,-16(fp)
  811a48:	10800104 	addi	r2,r2,4
  811a4c:	00c001c4 	movi	r3,7
  811a50:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  811a54:	d8000015 	stw	zero,0(sp)
  811a58:	e1fffc17 	ldw	r7,-16(fp)
  811a5c:	01802074 	movhi	r6,129
  811a60:	31866504 	addi	r6,r6,6548
  811a64:	e17ffe17 	ldw	r5,-8(fp)
  811a68:	e13ffd17 	ldw	r4,-12(fp)
  811a6c:	08127b80 	call	8127b8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  811a70:	0001883a 	nop
  811a74:	e037883a 	mov	sp,fp
  811a78:	dfc00117 	ldw	ra,4(sp)
  811a7c:	df000017 	ldw	fp,0(sp)
  811a80:	dec00204 	addi	sp,sp,8
  811a84:	f800283a 	ret

00811a88 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  811a88:	defffa04 	addi	sp,sp,-24
  811a8c:	dfc00515 	stw	ra,20(sp)
  811a90:	df000415 	stw	fp,16(sp)
  811a94:	df000404 	addi	fp,sp,16
  811a98:	e13ffd15 	stw	r4,-12(fp)
  811a9c:	e17ffe15 	stw	r5,-8(fp)
  811aa0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  811aa4:	e0bffd17 	ldw	r2,-12(fp)
  811aa8:	10800017 	ldw	r2,0(r2)
  811aac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  811ab0:	e0bffc17 	ldw	r2,-16(fp)
  811ab4:	10c00a04 	addi	r3,r2,40
  811ab8:	e0bffd17 	ldw	r2,-12(fp)
  811abc:	10800217 	ldw	r2,8(r2)
  811ac0:	100f883a 	mov	r7,r2
  811ac4:	e1bfff17 	ldw	r6,-4(fp)
  811ac8:	e17ffe17 	ldw	r5,-8(fp)
  811acc:	1809883a 	mov	r4,r3
  811ad0:	0811f9c0 	call	811f9c <altera_avalon_uart_read>
      fd->fd_flags);
}
  811ad4:	e037883a 	mov	sp,fp
  811ad8:	dfc00117 	ldw	ra,4(sp)
  811adc:	df000017 	ldw	fp,0(sp)
  811ae0:	dec00204 	addi	sp,sp,8
  811ae4:	f800283a 	ret

00811ae8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  811ae8:	defffa04 	addi	sp,sp,-24
  811aec:	dfc00515 	stw	ra,20(sp)
  811af0:	df000415 	stw	fp,16(sp)
  811af4:	df000404 	addi	fp,sp,16
  811af8:	e13ffd15 	stw	r4,-12(fp)
  811afc:	e17ffe15 	stw	r5,-8(fp)
  811b00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  811b04:	e0bffd17 	ldw	r2,-12(fp)
  811b08:	10800017 	ldw	r2,0(r2)
  811b0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  811b10:	e0bffc17 	ldw	r2,-16(fp)
  811b14:	10c00a04 	addi	r3,r2,40
  811b18:	e0bffd17 	ldw	r2,-12(fp)
  811b1c:	10800217 	ldw	r2,8(r2)
  811b20:	100f883a 	mov	r7,r2
  811b24:	e1bfff17 	ldw	r6,-4(fp)
  811b28:	e17ffe17 	ldw	r5,-8(fp)
  811b2c:	1809883a 	mov	r4,r3
  811b30:	08121b40 	call	8121b4 <altera_avalon_uart_write>
      fd->fd_flags);
}
  811b34:	e037883a 	mov	sp,fp
  811b38:	dfc00117 	ldw	ra,4(sp)
  811b3c:	df000017 	ldw	fp,0(sp)
  811b40:	dec00204 	addi	sp,sp,8
  811b44:	f800283a 	ret

00811b48 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  811b48:	defffc04 	addi	sp,sp,-16
  811b4c:	dfc00315 	stw	ra,12(sp)
  811b50:	df000215 	stw	fp,8(sp)
  811b54:	df000204 	addi	fp,sp,8
  811b58:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  811b5c:	e0bfff17 	ldw	r2,-4(fp)
  811b60:	10800017 	ldw	r2,0(r2)
  811b64:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  811b68:	e0bffe17 	ldw	r2,-8(fp)
  811b6c:	10c00a04 	addi	r3,r2,40
  811b70:	e0bfff17 	ldw	r2,-4(fp)
  811b74:	10800217 	ldw	r2,8(r2)
  811b78:	100b883a 	mov	r5,r2
  811b7c:	1809883a 	mov	r4,r3
  811b80:	0811f0c0 	call	811f0c <altera_avalon_uart_close>
}
  811b84:	e037883a 	mov	sp,fp
  811b88:	dfc00117 	ldw	ra,4(sp)
  811b8c:	df000017 	ldw	fp,0(sp)
  811b90:	dec00204 	addi	sp,sp,8
  811b94:	f800283a 	ret

00811b98 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  811b98:	defff804 	addi	sp,sp,-32
  811b9c:	dfc00715 	stw	ra,28(sp)
  811ba0:	df000615 	stw	fp,24(sp)
  811ba4:	df000604 	addi	fp,sp,24
  811ba8:	e13ffd15 	stw	r4,-12(fp)
  811bac:	e17ffe15 	stw	r5,-8(fp)
  811bb0:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  811bb4:	e0bffd17 	ldw	r2,-12(fp)
  811bb8:	10800017 	ldw	r2,0(r2)
  811bbc:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  811bc0:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  811bc4:	1000041e 	bne	r2,zero,811bd8 <altera_avalon_uart_init+0x40>
  811bc8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  811bcc:	1000021e 	bne	r2,zero,811bd8 <altera_avalon_uart_init+0x40>
  811bd0:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  811bd4:	10000226 	beq	r2,zero,811be0 <altera_avalon_uart_init+0x48>
  811bd8:	00800044 	movi	r2,1
  811bdc:	00000106 	br	811be4 <altera_avalon_uart_init+0x4c>
  811be0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  811be4:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  811be8:	e0bffc17 	ldw	r2,-16(fp)
  811bec:	10000f1e 	bne	r2,zero,811c2c <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  811bf0:	e0bffd17 	ldw	r2,-12(fp)
  811bf4:	00c32004 	movi	r3,3200
  811bf8:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  811bfc:	e0bffb17 	ldw	r2,-20(fp)
  811c00:	10800304 	addi	r2,r2,12
  811c04:	e0fffd17 	ldw	r3,-12(fp)
  811c08:	18c00117 	ldw	r3,4(r3)
  811c0c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  811c10:	d8000015 	stw	zero,0(sp)
  811c14:	e1fffd17 	ldw	r7,-12(fp)
  811c18:	01802074 	movhi	r6,129
  811c1c:	31871104 	addi	r6,r6,7236
  811c20:	e17fff17 	ldw	r5,-4(fp)
  811c24:	e13ffe17 	ldw	r4,-8(fp)
  811c28:	08127b80 	call	8127b8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  811c2c:	0001883a 	nop
  811c30:	e037883a 	mov	sp,fp
  811c34:	dfc00117 	ldw	ra,4(sp)
  811c38:	df000017 	ldw	fp,0(sp)
  811c3c:	dec00204 	addi	sp,sp,8
  811c40:	f800283a 	ret

00811c44 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  811c44:	defffa04 	addi	sp,sp,-24
  811c48:	dfc00515 	stw	ra,20(sp)
  811c4c:	df000415 	stw	fp,16(sp)
  811c50:	df000404 	addi	fp,sp,16
  811c54:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  811c58:	e0bfff17 	ldw	r2,-4(fp)
  811c5c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  811c60:	e0bffc17 	ldw	r2,-16(fp)
  811c64:	10800017 	ldw	r2,0(r2)
  811c68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  811c6c:	e0bffd17 	ldw	r2,-12(fp)
  811c70:	10800204 	addi	r2,r2,8
  811c74:	10800037 	ldwio	r2,0(r2)
  811c78:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  811c7c:	e0bffd17 	ldw	r2,-12(fp)
  811c80:	10800204 	addi	r2,r2,8
  811c84:	0007883a 	mov	r3,zero
  811c88:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  811c8c:	e0bffd17 	ldw	r2,-12(fp)
  811c90:	10800204 	addi	r2,r2,8
  811c94:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  811c98:	e0bffe17 	ldw	r2,-8(fp)
  811c9c:	1080200c 	andi	r2,r2,128
  811ca0:	10000326 	beq	r2,zero,811cb0 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  811ca4:	e17ffe17 	ldw	r5,-8(fp)
  811ca8:	e13ffc17 	ldw	r4,-16(fp)
  811cac:	0811ce00 	call	811ce0 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  811cb0:	e0bffe17 	ldw	r2,-8(fp)
  811cb4:	1081100c 	andi	r2,r2,1088
  811cb8:	10000326 	beq	r2,zero,811cc8 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  811cbc:	e17ffe17 	ldw	r5,-8(fp)
  811cc0:	e13ffc17 	ldw	r4,-16(fp)
  811cc4:	0811dc40 	call	811dc4 <altera_avalon_uart_txirq>
  }
  

}
  811cc8:	0001883a 	nop
  811ccc:	e037883a 	mov	sp,fp
  811cd0:	dfc00117 	ldw	ra,4(sp)
  811cd4:	df000017 	ldw	fp,0(sp)
  811cd8:	dec00204 	addi	sp,sp,8
  811cdc:	f800283a 	ret

00811ce0 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  811ce0:	defffc04 	addi	sp,sp,-16
  811ce4:	df000315 	stw	fp,12(sp)
  811ce8:	df000304 	addi	fp,sp,12
  811cec:	e13ffe15 	stw	r4,-8(fp)
  811cf0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  811cf4:	e0bfff17 	ldw	r2,-4(fp)
  811cf8:	108000cc 	andi	r2,r2,3
  811cfc:	10002c1e 	bne	r2,zero,811db0 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  811d00:	e0bffe17 	ldw	r2,-8(fp)
  811d04:	10800317 	ldw	r2,12(r2)
  811d08:	e0bffe17 	ldw	r2,-8(fp)
  811d0c:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  811d10:	e0bffe17 	ldw	r2,-8(fp)
  811d14:	10800317 	ldw	r2,12(r2)
  811d18:	10800044 	addi	r2,r2,1
  811d1c:	10800fcc 	andi	r2,r2,63
  811d20:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  811d24:	e0bffe17 	ldw	r2,-8(fp)
  811d28:	10800317 	ldw	r2,12(r2)
  811d2c:	e0fffe17 	ldw	r3,-8(fp)
  811d30:	18c00017 	ldw	r3,0(r3)
  811d34:	18c00037 	ldwio	r3,0(r3)
  811d38:	1809883a 	mov	r4,r3
  811d3c:	e0fffe17 	ldw	r3,-8(fp)
  811d40:	1885883a 	add	r2,r3,r2
  811d44:	10800704 	addi	r2,r2,28
  811d48:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  811d4c:	e0bffe17 	ldw	r2,-8(fp)
  811d50:	e0fffd17 	ldw	r3,-12(fp)
  811d54:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  811d58:	e0bffe17 	ldw	r2,-8(fp)
  811d5c:	10800317 	ldw	r2,12(r2)
  811d60:	10800044 	addi	r2,r2,1
  811d64:	10800fcc 	andi	r2,r2,63
  811d68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  811d6c:	e0bffe17 	ldw	r2,-8(fp)
  811d70:	10c00217 	ldw	r3,8(r2)
  811d74:	e0bffd17 	ldw	r2,-12(fp)
  811d78:	18800e1e 	bne	r3,r2,811db4 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  811d7c:	e0bffe17 	ldw	r2,-8(fp)
  811d80:	10c00117 	ldw	r3,4(r2)
  811d84:	00bfdfc4 	movi	r2,-129
  811d88:	1886703a 	and	r3,r3,r2
  811d8c:	e0bffe17 	ldw	r2,-8(fp)
  811d90:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  811d94:	e0bffe17 	ldw	r2,-8(fp)
  811d98:	10800017 	ldw	r2,0(r2)
  811d9c:	10800304 	addi	r2,r2,12
  811da0:	e0fffe17 	ldw	r3,-8(fp)
  811da4:	18c00117 	ldw	r3,4(r3)
  811da8:	10c00035 	stwio	r3,0(r2)
  811dac:	00000106 	br	811db4 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  811db0:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  811db4:	e037883a 	mov	sp,fp
  811db8:	df000017 	ldw	fp,0(sp)
  811dbc:	dec00104 	addi	sp,sp,4
  811dc0:	f800283a 	ret

00811dc4 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  811dc4:	defffb04 	addi	sp,sp,-20
  811dc8:	df000415 	stw	fp,16(sp)
  811dcc:	df000404 	addi	fp,sp,16
  811dd0:	e13ffc15 	stw	r4,-16(fp)
  811dd4:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  811dd8:	e0bffc17 	ldw	r2,-16(fp)
  811ddc:	10c00417 	ldw	r3,16(r2)
  811de0:	e0bffc17 	ldw	r2,-16(fp)
  811de4:	10800517 	ldw	r2,20(r2)
  811de8:	18803226 	beq	r3,r2,811eb4 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  811dec:	e0bffc17 	ldw	r2,-16(fp)
  811df0:	10800617 	ldw	r2,24(r2)
  811df4:	1080008c 	andi	r2,r2,2
  811df8:	10000326 	beq	r2,zero,811e08 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  811dfc:	e0bffd17 	ldw	r2,-12(fp)
  811e00:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  811e04:	10001d26 	beq	r2,zero,811e7c <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  811e08:	e0bffc17 	ldw	r2,-16(fp)
  811e0c:	10800417 	ldw	r2,16(r2)
  811e10:	e0bffc17 	ldw	r2,-16(fp)
  811e14:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  811e18:	e0bffc17 	ldw	r2,-16(fp)
  811e1c:	10800017 	ldw	r2,0(r2)
  811e20:	10800104 	addi	r2,r2,4
  811e24:	e0fffc17 	ldw	r3,-16(fp)
  811e28:	18c00417 	ldw	r3,16(r3)
  811e2c:	e13ffc17 	ldw	r4,-16(fp)
  811e30:	20c7883a 	add	r3,r4,r3
  811e34:	18c01704 	addi	r3,r3,92
  811e38:	18c00003 	ldbu	r3,0(r3)
  811e3c:	18c03fcc 	andi	r3,r3,255
  811e40:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  811e44:	e0bffc17 	ldw	r2,-16(fp)
  811e48:	10800417 	ldw	r2,16(r2)
  811e4c:	10800044 	addi	r2,r2,1
  811e50:	e0fffc17 	ldw	r3,-16(fp)
  811e54:	18800415 	stw	r2,16(r3)
  811e58:	10c00fcc 	andi	r3,r2,63
  811e5c:	e0bffc17 	ldw	r2,-16(fp)
  811e60:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  811e64:	e0bffc17 	ldw	r2,-16(fp)
  811e68:	10800117 	ldw	r2,4(r2)
  811e6c:	10c01014 	ori	r3,r2,64
  811e70:	e0bffc17 	ldw	r2,-16(fp)
  811e74:	10c00115 	stw	r3,4(r2)
  811e78:	00000e06 	br	811eb4 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  811e7c:	e0bffc17 	ldw	r2,-16(fp)
  811e80:	10800017 	ldw	r2,0(r2)
  811e84:	10800204 	addi	r2,r2,8
  811e88:	10800037 	ldwio	r2,0(r2)
  811e8c:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  811e90:	e0bffd17 	ldw	r2,-12(fp)
  811e94:	1082000c 	andi	r2,r2,2048
  811e98:	1000061e 	bne	r2,zero,811eb4 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  811e9c:	e0bffc17 	ldw	r2,-16(fp)
  811ea0:	10c00117 	ldw	r3,4(r2)
  811ea4:	00bfefc4 	movi	r2,-65
  811ea8:	1886703a 	and	r3,r3,r2
  811eac:	e0bffc17 	ldw	r2,-16(fp)
  811eb0:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  811eb4:	e0bffc17 	ldw	r2,-16(fp)
  811eb8:	10c00417 	ldw	r3,16(r2)
  811ebc:	e0bffc17 	ldw	r2,-16(fp)
  811ec0:	10800517 	ldw	r2,20(r2)
  811ec4:	1880061e 	bne	r3,r2,811ee0 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  811ec8:	e0bffc17 	ldw	r2,-16(fp)
  811ecc:	10c00117 	ldw	r3,4(r2)
  811ed0:	00beefc4 	movi	r2,-1089
  811ed4:	1886703a 	and	r3,r3,r2
  811ed8:	e0bffc17 	ldw	r2,-16(fp)
  811edc:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811ee0:	e0bffc17 	ldw	r2,-16(fp)
  811ee4:	10800017 	ldw	r2,0(r2)
  811ee8:	10800304 	addi	r2,r2,12
  811eec:	e0fffc17 	ldw	r3,-16(fp)
  811ef0:	18c00117 	ldw	r3,4(r3)
  811ef4:	10c00035 	stwio	r3,0(r2)
}
  811ef8:	0001883a 	nop
  811efc:	e037883a 	mov	sp,fp
  811f00:	df000017 	ldw	fp,0(sp)
  811f04:	dec00104 	addi	sp,sp,4
  811f08:	f800283a 	ret

00811f0c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  811f0c:	defffd04 	addi	sp,sp,-12
  811f10:	df000215 	stw	fp,8(sp)
  811f14:	df000204 	addi	fp,sp,8
  811f18:	e13ffe15 	stw	r4,-8(fp)
  811f1c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  811f20:	00000506 	br	811f38 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  811f24:	e0bfff17 	ldw	r2,-4(fp)
  811f28:	1090000c 	andi	r2,r2,16384
  811f2c:	10000226 	beq	r2,zero,811f38 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  811f30:	00bffd44 	movi	r2,-11
  811f34:	00000606 	br	811f50 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  811f38:	e0bffe17 	ldw	r2,-8(fp)
  811f3c:	10c00417 	ldw	r3,16(r2)
  811f40:	e0bffe17 	ldw	r2,-8(fp)
  811f44:	10800517 	ldw	r2,20(r2)
  811f48:	18bff61e 	bne	r3,r2,811f24 <__alt_mem_onchip_mem+0xff791f24>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  811f4c:	0005883a 	mov	r2,zero
}
  811f50:	e037883a 	mov	sp,fp
  811f54:	df000017 	ldw	fp,0(sp)
  811f58:	dec00104 	addi	sp,sp,4
  811f5c:	f800283a 	ret

00811f60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811f60:	defffe04 	addi	sp,sp,-8
  811f64:	dfc00115 	stw	ra,4(sp)
  811f68:	df000015 	stw	fp,0(sp)
  811f6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811f70:	d0a01417 	ldw	r2,-32688(gp)
  811f74:	10000326 	beq	r2,zero,811f84 <alt_get_errno+0x24>
  811f78:	d0a01417 	ldw	r2,-32688(gp)
  811f7c:	103ee83a 	callr	r2
  811f80:	00000106 	br	811f88 <alt_get_errno+0x28>
  811f84:	d0a76504 	addi	r2,gp,-25196
}
  811f88:	e037883a 	mov	sp,fp
  811f8c:	dfc00117 	ldw	ra,4(sp)
  811f90:	df000017 	ldw	fp,0(sp)
  811f94:	dec00204 	addi	sp,sp,8
  811f98:	f800283a 	ret

00811f9c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  811f9c:	defff204 	addi	sp,sp,-56
  811fa0:	dfc00d15 	stw	ra,52(sp)
  811fa4:	df000c15 	stw	fp,48(sp)
  811fa8:	df000c04 	addi	fp,sp,48
  811fac:	e13ffc15 	stw	r4,-16(fp)
  811fb0:	e17ffd15 	stw	r5,-12(fp)
  811fb4:	e1bffe15 	stw	r6,-8(fp)
  811fb8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  811fbc:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  811fc0:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  811fc4:	e0bfff17 	ldw	r2,-4(fp)
  811fc8:	1090000c 	andi	r2,r2,16384
  811fcc:	1005003a 	cmpeq	r2,r2,zero
  811fd0:	10803fcc 	andi	r2,r2,255
  811fd4:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  811fd8:	00001306 	br	812028 <altera_avalon_uart_read+0x8c>
    {
      count++;
  811fdc:	e0bff517 	ldw	r2,-44(fp)
  811fe0:	10800044 	addi	r2,r2,1
  811fe4:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  811fe8:	e0bffd17 	ldw	r2,-12(fp)
  811fec:	10c00044 	addi	r3,r2,1
  811ff0:	e0fffd15 	stw	r3,-12(fp)
  811ff4:	e0fffc17 	ldw	r3,-16(fp)
  811ff8:	18c00217 	ldw	r3,8(r3)
  811ffc:	e13ffc17 	ldw	r4,-16(fp)
  812000:	20c7883a 	add	r3,r4,r3
  812004:	18c00704 	addi	r3,r3,28
  812008:	18c00003 	ldbu	r3,0(r3)
  81200c:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  812010:	e0bffc17 	ldw	r2,-16(fp)
  812014:	10800217 	ldw	r2,8(r2)
  812018:	10800044 	addi	r2,r2,1
  81201c:	10c00fcc 	andi	r3,r2,63
  812020:	e0bffc17 	ldw	r2,-16(fp)
  812024:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  812028:	e0fff517 	ldw	r3,-44(fp)
  81202c:	e0bffe17 	ldw	r2,-8(fp)
  812030:	1880050e 	bge	r3,r2,812048 <altera_avalon_uart_read+0xac>
  812034:	e0bffc17 	ldw	r2,-16(fp)
  812038:	10c00217 	ldw	r3,8(r2)
  81203c:	e0bffc17 	ldw	r2,-16(fp)
  812040:	10800317 	ldw	r2,12(r2)
  812044:	18bfe51e 	bne	r3,r2,811fdc <__alt_mem_onchip_mem+0xff791fdc>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  812048:	e0bff517 	ldw	r2,-44(fp)
  81204c:	1000251e 	bne	r2,zero,8120e4 <altera_avalon_uart_read+0x148>
  812050:	e0bffc17 	ldw	r2,-16(fp)
  812054:	10c00217 	ldw	r3,8(r2)
  812058:	e0bffc17 	ldw	r2,-16(fp)
  81205c:	10800317 	ldw	r2,12(r2)
  812060:	1880201e 	bne	r3,r2,8120e4 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  812064:	e0bff617 	ldw	r2,-40(fp)
  812068:	1000071e 	bne	r2,zero,812088 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  81206c:	0811f600 	call	811f60 <alt_get_errno>
  812070:	1007883a 	mov	r3,r2
  812074:	008002c4 	movi	r2,11
  812078:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  81207c:	00800044 	movi	r2,1
  812080:	e0bff405 	stb	r2,-48(fp)
        break;
  812084:	00001b06 	br	8120f4 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812088:	0005303a 	rdctl	r2,status
  81208c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812090:	e0fff917 	ldw	r3,-28(fp)
  812094:	00bfff84 	movi	r2,-2
  812098:	1884703a 	and	r2,r3,r2
  81209c:	1001703a 	wrctl	status,r2
  
  return context;
  8120a0:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  8120a4:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8120a8:	e0bffc17 	ldw	r2,-16(fp)
  8120ac:	10800117 	ldw	r2,4(r2)
  8120b0:	10c02014 	ori	r3,r2,128
  8120b4:	e0bffc17 	ldw	r2,-16(fp)
  8120b8:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8120bc:	e0bffc17 	ldw	r2,-16(fp)
  8120c0:	10800017 	ldw	r2,0(r2)
  8120c4:	10800304 	addi	r2,r2,12
  8120c8:	e0fffc17 	ldw	r3,-16(fp)
  8120cc:	18c00117 	ldw	r3,4(r3)
  8120d0:	10c00035 	stwio	r3,0(r2)
  8120d4:	e0bff817 	ldw	r2,-32(fp)
  8120d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8120dc:	e0bffa17 	ldw	r2,-24(fp)
  8120e0:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  8120e4:	e0bff517 	ldw	r2,-44(fp)
  8120e8:	1000021e 	bne	r2,zero,8120f4 <altera_avalon_uart_read+0x158>
  8120ec:	e0bffe17 	ldw	r2,-8(fp)
  8120f0:	103fcd1e 	bne	r2,zero,812028 <__alt_mem_onchip_mem+0xff792028>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8120f4:	0005303a 	rdctl	r2,status
  8120f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8120fc:	e0fffb17 	ldw	r3,-20(fp)
  812100:	00bfff84 	movi	r2,-2
  812104:	1884703a 	and	r2,r3,r2
  812108:	1001703a 	wrctl	status,r2
  
  return context;
  81210c:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  812110:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  812114:	e0bffc17 	ldw	r2,-16(fp)
  812118:	10800117 	ldw	r2,4(r2)
  81211c:	10c02014 	ori	r3,r2,128
  812120:	e0bffc17 	ldw	r2,-16(fp)
  812124:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812128:	e0bffc17 	ldw	r2,-16(fp)
  81212c:	10800017 	ldw	r2,0(r2)
  812130:	10800304 	addi	r2,r2,12
  812134:	e0fffc17 	ldw	r3,-16(fp)
  812138:	18c00117 	ldw	r3,4(r3)
  81213c:	10c00035 	stwio	r3,0(r2)
  812140:	e0bff817 	ldw	r2,-32(fp)
  812144:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812148:	e0bff717 	ldw	r2,-36(fp)
  81214c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  812150:	e0bff403 	ldbu	r2,-48(fp)
  812154:	10000226 	beq	r2,zero,812160 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  812158:	00bffd44 	movi	r2,-11
  81215c:	00000106 	br	812164 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  812160:	e0bff517 	ldw	r2,-44(fp)
  }
}
  812164:	e037883a 	mov	sp,fp
  812168:	dfc00117 	ldw	ra,4(sp)
  81216c:	df000017 	ldw	fp,0(sp)
  812170:	dec00204 	addi	sp,sp,8
  812174:	f800283a 	ret

00812178 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812178:	defffe04 	addi	sp,sp,-8
  81217c:	dfc00115 	stw	ra,4(sp)
  812180:	df000015 	stw	fp,0(sp)
  812184:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812188:	d0a01417 	ldw	r2,-32688(gp)
  81218c:	10000326 	beq	r2,zero,81219c <alt_get_errno+0x24>
  812190:	d0a01417 	ldw	r2,-32688(gp)
  812194:	103ee83a 	callr	r2
  812198:	00000106 	br	8121a0 <alt_get_errno+0x28>
  81219c:	d0a76504 	addi	r2,gp,-25196
}
  8121a0:	e037883a 	mov	sp,fp
  8121a4:	dfc00117 	ldw	ra,4(sp)
  8121a8:	df000017 	ldw	fp,0(sp)
  8121ac:	dec00204 	addi	sp,sp,8
  8121b0:	f800283a 	ret

008121b4 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  8121b4:	defff204 	addi	sp,sp,-56
  8121b8:	dfc00d15 	stw	ra,52(sp)
  8121bc:	df000c15 	stw	fp,48(sp)
  8121c0:	df000c04 	addi	fp,sp,48
  8121c4:	e13ffc15 	stw	r4,-16(fp)
  8121c8:	e17ffd15 	stw	r5,-12(fp)
  8121cc:	e1bffe15 	stw	r6,-8(fp)
  8121d0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  8121d4:	e0bffe17 	ldw	r2,-8(fp)
  8121d8:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  8121dc:	e0bfff17 	ldw	r2,-4(fp)
  8121e0:	1090000c 	andi	r2,r2,16384
  8121e4:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8121e8:	00003c06 	br	8122dc <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8121ec:	e0bffc17 	ldw	r2,-16(fp)
  8121f0:	10800517 	ldw	r2,20(r2)
  8121f4:	10800044 	addi	r2,r2,1
  8121f8:	10800fcc 	andi	r2,r2,63
  8121fc:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  812200:	e0bffc17 	ldw	r2,-16(fp)
  812204:	10c00417 	ldw	r3,16(r2)
  812208:	e0bff717 	ldw	r2,-36(fp)
  81220c:	1880221e 	bne	r3,r2,812298 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  812210:	e0bff517 	ldw	r2,-44(fp)
  812214:	10000526 	beq	r2,zero,81222c <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  812218:	08121780 	call	812178 <alt_get_errno>
  81221c:	1007883a 	mov	r3,r2
  812220:	008002c4 	movi	r2,11
  812224:	18800015 	stw	r2,0(r3)
        break;
  812228:	00002e06 	br	8122e4 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81222c:	0005303a 	rdctl	r2,status
  812230:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812234:	e0fff917 	ldw	r3,-28(fp)
  812238:	00bfff84 	movi	r2,-2
  81223c:	1884703a 	and	r2,r3,r2
  812240:	1001703a 	wrctl	status,r2
  
  return context;
  812244:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  812248:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  81224c:	e0bffc17 	ldw	r2,-16(fp)
  812250:	10800117 	ldw	r2,4(r2)
  812254:	10c11014 	ori	r3,r2,1088
  812258:	e0bffc17 	ldw	r2,-16(fp)
  81225c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812260:	e0bffc17 	ldw	r2,-16(fp)
  812264:	10800017 	ldw	r2,0(r2)
  812268:	10800304 	addi	r2,r2,12
  81226c:	e0fffc17 	ldw	r3,-16(fp)
  812270:	18c00117 	ldw	r3,4(r3)
  812274:	10c00035 	stwio	r3,0(r2)
  812278:	e0bff817 	ldw	r2,-32(fp)
  81227c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812280:	e0bff617 	ldw	r2,-40(fp)
  812284:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  812288:	e0bffc17 	ldw	r2,-16(fp)
  81228c:	10c00417 	ldw	r3,16(r2)
  812290:	e0bff717 	ldw	r2,-36(fp)
  812294:	18bffc26 	beq	r3,r2,812288 <__alt_mem_onchip_mem+0xff792288>
      }
    }

    count--;
  812298:	e0bff417 	ldw	r2,-48(fp)
  81229c:	10bfffc4 	addi	r2,r2,-1
  8122a0:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  8122a4:	e0bffc17 	ldw	r2,-16(fp)
  8122a8:	10c00517 	ldw	r3,20(r2)
  8122ac:	e0bffd17 	ldw	r2,-12(fp)
  8122b0:	11000044 	addi	r4,r2,1
  8122b4:	e13ffd15 	stw	r4,-12(fp)
  8122b8:	10800003 	ldbu	r2,0(r2)
  8122bc:	1009883a 	mov	r4,r2
  8122c0:	e0bffc17 	ldw	r2,-16(fp)
  8122c4:	10c5883a 	add	r2,r2,r3
  8122c8:	10801704 	addi	r2,r2,92
  8122cc:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  8122d0:	e0bffc17 	ldw	r2,-16(fp)
  8122d4:	e0fff717 	ldw	r3,-36(fp)
  8122d8:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8122dc:	e0bff417 	ldw	r2,-48(fp)
  8122e0:	103fc21e 	bne	r2,zero,8121ec <__alt_mem_onchip_mem+0xff7921ec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8122e4:	0005303a 	rdctl	r2,status
  8122e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8122ec:	e0fffb17 	ldw	r3,-20(fp)
  8122f0:	00bfff84 	movi	r2,-2
  8122f4:	1884703a 	and	r2,r3,r2
  8122f8:	1001703a 	wrctl	status,r2
  
  return context;
  8122fc:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  812300:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  812304:	e0bffc17 	ldw	r2,-16(fp)
  812308:	10800117 	ldw	r2,4(r2)
  81230c:	10c11014 	ori	r3,r2,1088
  812310:	e0bffc17 	ldw	r2,-16(fp)
  812314:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812318:	e0bffc17 	ldw	r2,-16(fp)
  81231c:	10800017 	ldw	r2,0(r2)
  812320:	10800304 	addi	r2,r2,12
  812324:	e0fffc17 	ldw	r3,-16(fp)
  812328:	18c00117 	ldw	r3,4(r3)
  81232c:	10c00035 	stwio	r3,0(r2)
  812330:	e0bff817 	ldw	r2,-32(fp)
  812334:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812338:	e0bffa17 	ldw	r2,-24(fp)
  81233c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  812340:	e0fffe17 	ldw	r3,-8(fp)
  812344:	e0bff417 	ldw	r2,-48(fp)
  812348:	1885c83a 	sub	r2,r3,r2
}
  81234c:	e037883a 	mov	sp,fp
  812350:	dfc00117 	ldw	ra,4(sp)
  812354:	df000017 	ldw	fp,0(sp)
  812358:	dec00204 	addi	sp,sp,8
  81235c:	f800283a 	ret

00812360 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  812360:	defffe04 	addi	sp,sp,-8
  812364:	df000115 	stw	fp,4(sp)
  812368:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81236c:	e03fff15 	stw	zero,-4(fp)
  812370:	00000506 	br	812388 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  812374:	e0bfff17 	ldw	r2,-4(fp)
  812378:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81237c:	e0bfff17 	ldw	r2,-4(fp)
  812380:	10800804 	addi	r2,r2,32
  812384:	e0bfff15 	stw	r2,-4(fp)
  812388:	e0bfff17 	ldw	r2,-4(fp)
  81238c:	10820030 	cmpltui	r2,r2,2048
  812390:	103ff81e 	bne	r2,zero,812374 <__alt_mem_onchip_mem+0xff792374>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  812394:	0001883a 	nop
  812398:	e037883a 	mov	sp,fp
  81239c:	df000017 	ldw	fp,0(sp)
  8123a0:	dec00104 	addi	sp,sp,4
  8123a4:	f800283a 	ret

008123a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8123a8:	defffe04 	addi	sp,sp,-8
  8123ac:	dfc00115 	stw	ra,4(sp)
  8123b0:	df000015 	stw	fp,0(sp)
  8123b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8123b8:	d0a01417 	ldw	r2,-32688(gp)
  8123bc:	10000326 	beq	r2,zero,8123cc <alt_get_errno+0x24>
  8123c0:	d0a01417 	ldw	r2,-32688(gp)
  8123c4:	103ee83a 	callr	r2
  8123c8:	00000106 	br	8123d0 <alt_get_errno+0x28>
  8123cc:	d0a76504 	addi	r2,gp,-25196
}
  8123d0:	e037883a 	mov	sp,fp
  8123d4:	dfc00117 	ldw	ra,4(sp)
  8123d8:	df000017 	ldw	fp,0(sp)
  8123dc:	dec00204 	addi	sp,sp,8
  8123e0:	f800283a 	ret

008123e4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8123e4:	defffa04 	addi	sp,sp,-24
  8123e8:	dfc00515 	stw	ra,20(sp)
  8123ec:	df000415 	stw	fp,16(sp)
  8123f0:	df000404 	addi	fp,sp,16
  8123f4:	e13ffe15 	stw	r4,-8(fp)
  8123f8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8123fc:	e0bffe17 	ldw	r2,-8(fp)
  812400:	10000326 	beq	r2,zero,812410 <alt_dev_llist_insert+0x2c>
  812404:	e0bffe17 	ldw	r2,-8(fp)
  812408:	10800217 	ldw	r2,8(r2)
  81240c:	1000061e 	bne	r2,zero,812428 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  812410:	08123a80 	call	8123a8 <alt_get_errno>
  812414:	1007883a 	mov	r3,r2
  812418:	00800584 	movi	r2,22
  81241c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  812420:	00bffa84 	movi	r2,-22
  812424:	00001306 	br	812474 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  812428:	e0bffe17 	ldw	r2,-8(fp)
  81242c:	e0ffff17 	ldw	r3,-4(fp)
  812430:	e0fffc15 	stw	r3,-16(fp)
  812434:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  812438:	e0bffd17 	ldw	r2,-12(fp)
  81243c:	e0fffc17 	ldw	r3,-16(fp)
  812440:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  812444:	e0bffc17 	ldw	r2,-16(fp)
  812448:	10c00017 	ldw	r3,0(r2)
  81244c:	e0bffd17 	ldw	r2,-12(fp)
  812450:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  812454:	e0bffc17 	ldw	r2,-16(fp)
  812458:	10800017 	ldw	r2,0(r2)
  81245c:	e0fffd17 	ldw	r3,-12(fp)
  812460:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  812464:	e0bffc17 	ldw	r2,-16(fp)
  812468:	e0fffd17 	ldw	r3,-12(fp)
  81246c:	10c00015 	stw	r3,0(r2)

  return 0;  
  812470:	0005883a 	mov	r2,zero
}
  812474:	e037883a 	mov	sp,fp
  812478:	dfc00117 	ldw	ra,4(sp)
  81247c:	df000017 	ldw	fp,0(sp)
  812480:	dec00204 	addi	sp,sp,8
  812484:	f800283a 	ret

00812488 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  812488:	defffd04 	addi	sp,sp,-12
  81248c:	dfc00215 	stw	ra,8(sp)
  812490:	df000115 	stw	fp,4(sp)
  812494:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812498:	00802074 	movhi	r2,129
  81249c:	108c8004 	addi	r2,r2,12800
  8124a0:	e0bfff15 	stw	r2,-4(fp)
  8124a4:	00000606 	br	8124c0 <_do_ctors+0x38>
        (*ctor) (); 
  8124a8:	e0bfff17 	ldw	r2,-4(fp)
  8124ac:	10800017 	ldw	r2,0(r2)
  8124b0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8124b4:	e0bfff17 	ldw	r2,-4(fp)
  8124b8:	10bfff04 	addi	r2,r2,-4
  8124bc:	e0bfff15 	stw	r2,-4(fp)
  8124c0:	e0ffff17 	ldw	r3,-4(fp)
  8124c4:	00802074 	movhi	r2,129
  8124c8:	108c8104 	addi	r2,r2,12804
  8124cc:	18bff62e 	bgeu	r3,r2,8124a8 <__alt_mem_onchip_mem+0xff7924a8>
        (*ctor) (); 
}
  8124d0:	0001883a 	nop
  8124d4:	e037883a 	mov	sp,fp
  8124d8:	dfc00117 	ldw	ra,4(sp)
  8124dc:	df000017 	ldw	fp,0(sp)
  8124e0:	dec00204 	addi	sp,sp,8
  8124e4:	f800283a 	ret

008124e8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8124e8:	defffd04 	addi	sp,sp,-12
  8124ec:	dfc00215 	stw	ra,8(sp)
  8124f0:	df000115 	stw	fp,4(sp)
  8124f4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8124f8:	00802074 	movhi	r2,129
  8124fc:	108c8004 	addi	r2,r2,12800
  812500:	e0bfff15 	stw	r2,-4(fp)
  812504:	00000606 	br	812520 <_do_dtors+0x38>
        (*dtor) (); 
  812508:	e0bfff17 	ldw	r2,-4(fp)
  81250c:	10800017 	ldw	r2,0(r2)
  812510:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  812514:	e0bfff17 	ldw	r2,-4(fp)
  812518:	10bfff04 	addi	r2,r2,-4
  81251c:	e0bfff15 	stw	r2,-4(fp)
  812520:	e0ffff17 	ldw	r3,-4(fp)
  812524:	00802074 	movhi	r2,129
  812528:	108c8104 	addi	r2,r2,12804
  81252c:	18bff62e 	bgeu	r3,r2,812508 <__alt_mem_onchip_mem+0xff792508>
        (*dtor) (); 
}
  812530:	0001883a 	nop
  812534:	e037883a 	mov	sp,fp
  812538:	dfc00117 	ldw	ra,4(sp)
  81253c:	df000017 	ldw	fp,0(sp)
  812540:	dec00204 	addi	sp,sp,8
  812544:	f800283a 	ret

00812548 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  812548:	defffa04 	addi	sp,sp,-24
  81254c:	dfc00515 	stw	ra,20(sp)
  812550:	df000415 	stw	fp,16(sp)
  812554:	df000404 	addi	fp,sp,16
  812558:	e13ffe15 	stw	r4,-8(fp)
  81255c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  812560:	e0bfff17 	ldw	r2,-4(fp)
  812564:	10800017 	ldw	r2,0(r2)
  812568:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81256c:	e13ffe17 	ldw	r4,-8(fp)
  812570:	080a1000 	call	80a100 <strlen>
  812574:	10800044 	addi	r2,r2,1
  812578:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81257c:	00000d06 	br	8125b4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  812580:	e0bffc17 	ldw	r2,-16(fp)
  812584:	10800217 	ldw	r2,8(r2)
  812588:	e0fffd17 	ldw	r3,-12(fp)
  81258c:	180d883a 	mov	r6,r3
  812590:	e17ffe17 	ldw	r5,-8(fp)
  812594:	1009883a 	mov	r4,r2
  812598:	0812ebc0 	call	812ebc <memcmp>
  81259c:	1000021e 	bne	r2,zero,8125a8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8125a0:	e0bffc17 	ldw	r2,-16(fp)
  8125a4:	00000706 	br	8125c4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8125a8:	e0bffc17 	ldw	r2,-16(fp)
  8125ac:	10800017 	ldw	r2,0(r2)
  8125b0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8125b4:	e0fffc17 	ldw	r3,-16(fp)
  8125b8:	e0bfff17 	ldw	r2,-4(fp)
  8125bc:	18bff01e 	bne	r3,r2,812580 <__alt_mem_onchip_mem+0xff792580>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8125c0:	0005883a 	mov	r2,zero
}
  8125c4:	e037883a 	mov	sp,fp
  8125c8:	dfc00117 	ldw	ra,4(sp)
  8125cc:	df000017 	ldw	fp,0(sp)
  8125d0:	dec00204 	addi	sp,sp,8
  8125d4:	f800283a 	ret

008125d8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8125d8:	defffb04 	addi	sp,sp,-20
  8125dc:	dfc00415 	stw	ra,16(sp)
  8125e0:	df000315 	stw	fp,12(sp)
  8125e4:	df000304 	addi	fp,sp,12
  8125e8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8125ec:	d0a00f17 	ldw	r2,-32708(gp)
  8125f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8125f4:	00003106 	br	8126bc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  8125f8:	e0bffd17 	ldw	r2,-12(fp)
  8125fc:	10800217 	ldw	r2,8(r2)
  812600:	1009883a 	mov	r4,r2
  812604:	080a1000 	call	80a100 <strlen>
  812608:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  81260c:	e0bffd17 	ldw	r2,-12(fp)
  812610:	10c00217 	ldw	r3,8(r2)
  812614:	e0bffe17 	ldw	r2,-8(fp)
  812618:	10bfffc4 	addi	r2,r2,-1
  81261c:	1885883a 	add	r2,r3,r2
  812620:	10800003 	ldbu	r2,0(r2)
  812624:	10803fcc 	andi	r2,r2,255
  812628:	1080201c 	xori	r2,r2,128
  81262c:	10bfe004 	addi	r2,r2,-128
  812630:	10800bd8 	cmpnei	r2,r2,47
  812634:	1000031e 	bne	r2,zero,812644 <alt_find_file+0x6c>
    {
      len -= 1;
  812638:	e0bffe17 	ldw	r2,-8(fp)
  81263c:	10bfffc4 	addi	r2,r2,-1
  812640:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  812644:	e0bffe17 	ldw	r2,-8(fp)
  812648:	e0ffff17 	ldw	r3,-4(fp)
  81264c:	1885883a 	add	r2,r3,r2
  812650:	10800003 	ldbu	r2,0(r2)
  812654:	10803fcc 	andi	r2,r2,255
  812658:	1080201c 	xori	r2,r2,128
  81265c:	10bfe004 	addi	r2,r2,-128
  812660:	10800be0 	cmpeqi	r2,r2,47
  812664:	1000081e 	bne	r2,zero,812688 <alt_find_file+0xb0>
  812668:	e0bffe17 	ldw	r2,-8(fp)
  81266c:	e0ffff17 	ldw	r3,-4(fp)
  812670:	1885883a 	add	r2,r3,r2
  812674:	10800003 	ldbu	r2,0(r2)
  812678:	10803fcc 	andi	r2,r2,255
  81267c:	1080201c 	xori	r2,r2,128
  812680:	10bfe004 	addi	r2,r2,-128
  812684:	10000a1e 	bne	r2,zero,8126b0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  812688:	e0bffd17 	ldw	r2,-12(fp)
  81268c:	10800217 	ldw	r2,8(r2)
  812690:	e0fffe17 	ldw	r3,-8(fp)
  812694:	180d883a 	mov	r6,r3
  812698:	e17fff17 	ldw	r5,-4(fp)
  81269c:	1009883a 	mov	r4,r2
  8126a0:	0812ebc0 	call	812ebc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8126a4:	1000021e 	bne	r2,zero,8126b0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8126a8:	e0bffd17 	ldw	r2,-12(fp)
  8126ac:	00000706 	br	8126cc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  8126b0:	e0bffd17 	ldw	r2,-12(fp)
  8126b4:	10800017 	ldw	r2,0(r2)
  8126b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8126bc:	e0fffd17 	ldw	r3,-12(fp)
  8126c0:	d0a00f04 	addi	r2,gp,-32708
  8126c4:	18bfcc1e 	bne	r3,r2,8125f8 <__alt_mem_onchip_mem+0xff7925f8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8126c8:	0005883a 	mov	r2,zero
}
  8126cc:	e037883a 	mov	sp,fp
  8126d0:	dfc00117 	ldw	ra,4(sp)
  8126d4:	df000017 	ldw	fp,0(sp)
  8126d8:	dec00204 	addi	sp,sp,8
  8126dc:	f800283a 	ret

008126e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8126e0:	defffc04 	addi	sp,sp,-16
  8126e4:	df000315 	stw	fp,12(sp)
  8126e8:	df000304 	addi	fp,sp,12
  8126ec:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8126f0:	00bffa04 	movi	r2,-24
  8126f4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8126f8:	e03ffd15 	stw	zero,-12(fp)
  8126fc:	00001906 	br	812764 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  812700:	00802074 	movhi	r2,129
  812704:	10907e04 	addi	r2,r2,16888
  812708:	e0fffd17 	ldw	r3,-12(fp)
  81270c:	18c00324 	muli	r3,r3,12
  812710:	10c5883a 	add	r2,r2,r3
  812714:	10800017 	ldw	r2,0(r2)
  812718:	10000f1e 	bne	r2,zero,812758 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  81271c:	00802074 	movhi	r2,129
  812720:	10907e04 	addi	r2,r2,16888
  812724:	e0fffd17 	ldw	r3,-12(fp)
  812728:	18c00324 	muli	r3,r3,12
  81272c:	10c5883a 	add	r2,r2,r3
  812730:	e0ffff17 	ldw	r3,-4(fp)
  812734:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  812738:	d0e01317 	ldw	r3,-32692(gp)
  81273c:	e0bffd17 	ldw	r2,-12(fp)
  812740:	1880020e 	bge	r3,r2,81274c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  812744:	e0bffd17 	ldw	r2,-12(fp)
  812748:	d0a01315 	stw	r2,-32692(gp)
      }
      rc = i;
  81274c:	e0bffd17 	ldw	r2,-12(fp)
  812750:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  812754:	00000606 	br	812770 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  812758:	e0bffd17 	ldw	r2,-12(fp)
  81275c:	10800044 	addi	r2,r2,1
  812760:	e0bffd15 	stw	r2,-12(fp)
  812764:	e0bffd17 	ldw	r2,-12(fp)
  812768:	10800810 	cmplti	r2,r2,32
  81276c:	103fe41e 	bne	r2,zero,812700 <__alt_mem_onchip_mem+0xff792700>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  812770:	e0bffe17 	ldw	r2,-8(fp)
}
  812774:	e037883a 	mov	sp,fp
  812778:	df000017 	ldw	fp,0(sp)
  81277c:	dec00104 	addi	sp,sp,4
  812780:	f800283a 	ret

00812784 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  812784:	defffe04 	addi	sp,sp,-8
  812788:	dfc00115 	stw	ra,4(sp)
  81278c:	df000015 	stw	fp,0(sp)
  812790:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  812794:	01440004 	movi	r5,4096
  812798:	0009883a 	mov	r4,zero
  81279c:	0812d440 	call	812d44 <alt_icache_flush>
#endif
}
  8127a0:	0001883a 	nop
  8127a4:	e037883a 	mov	sp,fp
  8127a8:	dfc00117 	ldw	ra,4(sp)
  8127ac:	df000017 	ldw	fp,0(sp)
  8127b0:	dec00204 	addi	sp,sp,8
  8127b4:	f800283a 	ret

008127b8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8127b8:	defff904 	addi	sp,sp,-28
  8127bc:	dfc00615 	stw	ra,24(sp)
  8127c0:	df000515 	stw	fp,20(sp)
  8127c4:	df000504 	addi	fp,sp,20
  8127c8:	e13ffc15 	stw	r4,-16(fp)
  8127cc:	e17ffd15 	stw	r5,-12(fp)
  8127d0:	e1bffe15 	stw	r6,-8(fp)
  8127d4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  8127d8:	e0800217 	ldw	r2,8(fp)
  8127dc:	d8800015 	stw	r2,0(sp)
  8127e0:	e1ffff17 	ldw	r7,-4(fp)
  8127e4:	e1bffe17 	ldw	r6,-8(fp)
  8127e8:	e17ffd17 	ldw	r5,-12(fp)
  8127ec:	e13ffc17 	ldw	r4,-16(fp)
  8127f0:	08129680 	call	812968 <alt_iic_isr_register>
}  
  8127f4:	e037883a 	mov	sp,fp
  8127f8:	dfc00117 	ldw	ra,4(sp)
  8127fc:	df000017 	ldw	fp,0(sp)
  812800:	dec00204 	addi	sp,sp,8
  812804:	f800283a 	ret

00812808 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  812808:	defff904 	addi	sp,sp,-28
  81280c:	df000615 	stw	fp,24(sp)
  812810:	df000604 	addi	fp,sp,24
  812814:	e13ffe15 	stw	r4,-8(fp)
  812818:	e17fff15 	stw	r5,-4(fp)
  81281c:	e0bfff17 	ldw	r2,-4(fp)
  812820:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812824:	0005303a 	rdctl	r2,status
  812828:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81282c:	e0fffb17 	ldw	r3,-20(fp)
  812830:	00bfff84 	movi	r2,-2
  812834:	1884703a 	and	r2,r3,r2
  812838:	1001703a 	wrctl	status,r2
  
  return context;
  81283c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  812840:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  812844:	00c00044 	movi	r3,1
  812848:	e0bffa17 	ldw	r2,-24(fp)
  81284c:	1884983a 	sll	r2,r3,r2
  812850:	1007883a 	mov	r3,r2
  812854:	d0a76c17 	ldw	r2,-25168(gp)
  812858:	1884b03a 	or	r2,r3,r2
  81285c:	d0a76c15 	stw	r2,-25168(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  812860:	d0a76c17 	ldw	r2,-25168(gp)
  812864:	100170fa 	wrctl	ienable,r2
  812868:	e0bffc17 	ldw	r2,-16(fp)
  81286c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812870:	e0bffd17 	ldw	r2,-12(fp)
  812874:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  812878:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  81287c:	0001883a 	nop
}
  812880:	e037883a 	mov	sp,fp
  812884:	df000017 	ldw	fp,0(sp)
  812888:	dec00104 	addi	sp,sp,4
  81288c:	f800283a 	ret

00812890 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  812890:	defff904 	addi	sp,sp,-28
  812894:	df000615 	stw	fp,24(sp)
  812898:	df000604 	addi	fp,sp,24
  81289c:	e13ffe15 	stw	r4,-8(fp)
  8128a0:	e17fff15 	stw	r5,-4(fp)
  8128a4:	e0bfff17 	ldw	r2,-4(fp)
  8128a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8128ac:	0005303a 	rdctl	r2,status
  8128b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8128b4:	e0fffb17 	ldw	r3,-20(fp)
  8128b8:	00bfff84 	movi	r2,-2
  8128bc:	1884703a 	and	r2,r3,r2
  8128c0:	1001703a 	wrctl	status,r2
  
  return context;
  8128c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8128c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  8128cc:	00c00044 	movi	r3,1
  8128d0:	e0bffa17 	ldw	r2,-24(fp)
  8128d4:	1884983a 	sll	r2,r3,r2
  8128d8:	0084303a 	nor	r2,zero,r2
  8128dc:	1007883a 	mov	r3,r2
  8128e0:	d0a76c17 	ldw	r2,-25168(gp)
  8128e4:	1884703a 	and	r2,r3,r2
  8128e8:	d0a76c15 	stw	r2,-25168(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8128ec:	d0a76c17 	ldw	r2,-25168(gp)
  8128f0:	100170fa 	wrctl	ienable,r2
  8128f4:	e0bffc17 	ldw	r2,-16(fp)
  8128f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8128fc:	e0bffd17 	ldw	r2,-12(fp)
  812900:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  812904:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  812908:	0001883a 	nop
}
  81290c:	e037883a 	mov	sp,fp
  812910:	df000017 	ldw	fp,0(sp)
  812914:	dec00104 	addi	sp,sp,4
  812918:	f800283a 	ret

0081291c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  81291c:	defffc04 	addi	sp,sp,-16
  812920:	df000315 	stw	fp,12(sp)
  812924:	df000304 	addi	fp,sp,12
  812928:	e13ffe15 	stw	r4,-8(fp)
  81292c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  812930:	000530fa 	rdctl	r2,ienable
  812934:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  812938:	00c00044 	movi	r3,1
  81293c:	e0bfff17 	ldw	r2,-4(fp)
  812940:	1884983a 	sll	r2,r3,r2
  812944:	1007883a 	mov	r3,r2
  812948:	e0bffd17 	ldw	r2,-12(fp)
  81294c:	1884703a 	and	r2,r3,r2
  812950:	1004c03a 	cmpne	r2,r2,zero
  812954:	10803fcc 	andi	r2,r2,255
}
  812958:	e037883a 	mov	sp,fp
  81295c:	df000017 	ldw	fp,0(sp)
  812960:	dec00104 	addi	sp,sp,4
  812964:	f800283a 	ret

00812968 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  812968:	defff504 	addi	sp,sp,-44
  81296c:	dfc00a15 	stw	ra,40(sp)
  812970:	df000915 	stw	fp,36(sp)
  812974:	df000904 	addi	fp,sp,36
  812978:	e13ffc15 	stw	r4,-16(fp)
  81297c:	e17ffd15 	stw	r5,-12(fp)
  812980:	e1bffe15 	stw	r6,-8(fp)
  812984:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  812988:	00bffa84 	movi	r2,-22
  81298c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  812990:	e0bffd17 	ldw	r2,-12(fp)
  812994:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  812998:	e0bff817 	ldw	r2,-32(fp)
  81299c:	10800808 	cmpgei	r2,r2,32
  8129a0:	1000271e 	bne	r2,zero,812a40 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8129a4:	0005303a 	rdctl	r2,status
  8129a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8129ac:	e0fffb17 	ldw	r3,-20(fp)
  8129b0:	00bfff84 	movi	r2,-2
  8129b4:	1884703a 	and	r2,r3,r2
  8129b8:	1001703a 	wrctl	status,r2
  
  return context;
  8129bc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  8129c0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  8129c4:	00802074 	movhi	r2,129
  8129c8:	109d0b04 	addi	r2,r2,29740
  8129cc:	e0fff817 	ldw	r3,-32(fp)
  8129d0:	180690fa 	slli	r3,r3,3
  8129d4:	10c5883a 	add	r2,r2,r3
  8129d8:	e0fffe17 	ldw	r3,-8(fp)
  8129dc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  8129e0:	00802074 	movhi	r2,129
  8129e4:	109d0b04 	addi	r2,r2,29740
  8129e8:	e0fff817 	ldw	r3,-32(fp)
  8129ec:	180690fa 	slli	r3,r3,3
  8129f0:	10c5883a 	add	r2,r2,r3
  8129f4:	10800104 	addi	r2,r2,4
  8129f8:	e0ffff17 	ldw	r3,-4(fp)
  8129fc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  812a00:	e0bffe17 	ldw	r2,-8(fp)
  812a04:	10000526 	beq	r2,zero,812a1c <alt_iic_isr_register+0xb4>
  812a08:	e0bff817 	ldw	r2,-32(fp)
  812a0c:	100b883a 	mov	r5,r2
  812a10:	e13ffc17 	ldw	r4,-16(fp)
  812a14:	08128080 	call	812808 <alt_ic_irq_enable>
  812a18:	00000406 	br	812a2c <alt_iic_isr_register+0xc4>
  812a1c:	e0bff817 	ldw	r2,-32(fp)
  812a20:	100b883a 	mov	r5,r2
  812a24:	e13ffc17 	ldw	r4,-16(fp)
  812a28:	08128900 	call	812890 <alt_ic_irq_disable>
  812a2c:	e0bff715 	stw	r2,-36(fp)
  812a30:	e0bffa17 	ldw	r2,-24(fp)
  812a34:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812a38:	e0bff917 	ldw	r2,-28(fp)
  812a3c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  812a40:	e0bff717 	ldw	r2,-36(fp)
}
  812a44:	e037883a 	mov	sp,fp
  812a48:	dfc00117 	ldw	ra,4(sp)
  812a4c:	df000017 	ldw	fp,0(sp)
  812a50:	dec00204 	addi	sp,sp,8
  812a54:	f800283a 	ret

00812a58 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  812a58:	defff904 	addi	sp,sp,-28
  812a5c:	dfc00615 	stw	ra,24(sp)
  812a60:	df000515 	stw	fp,20(sp)
  812a64:	df000504 	addi	fp,sp,20
  812a68:	e13ffc15 	stw	r4,-16(fp)
  812a6c:	e17ffd15 	stw	r5,-12(fp)
  812a70:	e1bffe15 	stw	r6,-8(fp)
  812a74:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  812a78:	e1bfff17 	ldw	r6,-4(fp)
  812a7c:	e17ffe17 	ldw	r5,-8(fp)
  812a80:	e13ffd17 	ldw	r4,-12(fp)
  812a84:	080f8d00 	call	80f8d0 <open>
  812a88:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  812a8c:	e0bffb17 	ldw	r2,-20(fp)
  812a90:	10001c16 	blt	r2,zero,812b04 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  812a94:	00802074 	movhi	r2,129
  812a98:	10907e04 	addi	r2,r2,16888
  812a9c:	e0fffb17 	ldw	r3,-20(fp)
  812aa0:	18c00324 	muli	r3,r3,12
  812aa4:	10c5883a 	add	r2,r2,r3
  812aa8:	10c00017 	ldw	r3,0(r2)
  812aac:	e0bffc17 	ldw	r2,-16(fp)
  812ab0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  812ab4:	00802074 	movhi	r2,129
  812ab8:	10907e04 	addi	r2,r2,16888
  812abc:	e0fffb17 	ldw	r3,-20(fp)
  812ac0:	18c00324 	muli	r3,r3,12
  812ac4:	10c5883a 	add	r2,r2,r3
  812ac8:	10800104 	addi	r2,r2,4
  812acc:	10c00017 	ldw	r3,0(r2)
  812ad0:	e0bffc17 	ldw	r2,-16(fp)
  812ad4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  812ad8:	00802074 	movhi	r2,129
  812adc:	10907e04 	addi	r2,r2,16888
  812ae0:	e0fffb17 	ldw	r3,-20(fp)
  812ae4:	18c00324 	muli	r3,r3,12
  812ae8:	10c5883a 	add	r2,r2,r3
  812aec:	10800204 	addi	r2,r2,8
  812af0:	10c00017 	ldw	r3,0(r2)
  812af4:	e0bffc17 	ldw	r2,-16(fp)
  812af8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  812afc:	e13ffb17 	ldw	r4,-20(fp)
  812b00:	080fb5c0 	call	80fb5c <alt_release_fd>
  }
} 
  812b04:	0001883a 	nop
  812b08:	e037883a 	mov	sp,fp
  812b0c:	dfc00117 	ldw	ra,4(sp)
  812b10:	df000017 	ldw	fp,0(sp)
  812b14:	dec00204 	addi	sp,sp,8
  812b18:	f800283a 	ret

00812b1c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  812b1c:	defffb04 	addi	sp,sp,-20
  812b20:	dfc00415 	stw	ra,16(sp)
  812b24:	df000315 	stw	fp,12(sp)
  812b28:	df000304 	addi	fp,sp,12
  812b2c:	e13ffd15 	stw	r4,-12(fp)
  812b30:	e17ffe15 	stw	r5,-8(fp)
  812b34:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  812b38:	01c07fc4 	movi	r7,511
  812b3c:	01800044 	movi	r6,1
  812b40:	e17ffd17 	ldw	r5,-12(fp)
  812b44:	01002074 	movhi	r4,129
  812b48:	21108104 	addi	r4,r4,16900
  812b4c:	0812a580 	call	812a58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  812b50:	01c07fc4 	movi	r7,511
  812b54:	000d883a 	mov	r6,zero
  812b58:	e17ffe17 	ldw	r5,-8(fp)
  812b5c:	01002074 	movhi	r4,129
  812b60:	21107e04 	addi	r4,r4,16888
  812b64:	0812a580 	call	812a58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  812b68:	01c07fc4 	movi	r7,511
  812b6c:	01800044 	movi	r6,1
  812b70:	e17fff17 	ldw	r5,-4(fp)
  812b74:	01002074 	movhi	r4,129
  812b78:	21108404 	addi	r4,r4,16912
  812b7c:	0812a580 	call	812a58 <alt_open_fd>
}  
  812b80:	0001883a 	nop
  812b84:	e037883a 	mov	sp,fp
  812b88:	dfc00117 	ldw	ra,4(sp)
  812b8c:	df000017 	ldw	fp,0(sp)
  812b90:	dec00204 	addi	sp,sp,8
  812b94:	f800283a 	ret

00812b98 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  812b98:	defffd04 	addi	sp,sp,-12
  812b9c:	dfc00215 	stw	ra,8(sp)
  812ba0:	df000115 	stw	fp,4(sp)
  812ba4:	df000104 	addi	fp,sp,4
  812ba8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  812bac:	e13fff17 	ldw	r4,-4(fp)
  812bb0:	0812bec0 	call	812bec <alt_busy_sleep>
}
  812bb4:	e037883a 	mov	sp,fp
  812bb8:	dfc00117 	ldw	ra,4(sp)
  812bbc:	df000017 	ldw	fp,0(sp)
  812bc0:	dec00204 	addi	sp,sp,8
  812bc4:	f800283a 	ret

00812bc8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  812bc8:	deffff04 	addi	sp,sp,-4
  812bcc:	df000015 	stw	fp,0(sp)
  812bd0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  812bd4:	000170fa 	wrctl	ienable,zero
}
  812bd8:	0001883a 	nop
  812bdc:	e037883a 	mov	sp,fp
  812be0:	df000017 	ldw	fp,0(sp)
  812be4:	dec00104 	addi	sp,sp,4
  812be8:	f800283a 	ret

00812bec <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  812bec:	defffa04 	addi	sp,sp,-24
  812bf0:	dfc00515 	stw	ra,20(sp)
  812bf4:	df000415 	stw	fp,16(sp)
  812bf8:	df000404 	addi	fp,sp,16
  812bfc:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  812c00:	008000c4 	movi	r2,3
  812c04:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  812c08:	e0fffd17 	ldw	r3,-12(fp)
  812c0c:	008003f4 	movhi	r2,15
  812c10:	10909004 	addi	r2,r2,16960
  812c14:	1885383a 	mul	r2,r3,r2
  812c18:	100b883a 	mov	r5,r2
  812c1c:	0100bef4 	movhi	r4,763
  812c20:	213c2004 	addi	r4,r4,-3968
  812c24:	080c83c0 	call	80c83c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  812c28:	100b883a 	mov	r5,r2
  812c2c:	01200034 	movhi	r4,32768
  812c30:	213fffc4 	addi	r4,r4,-1
  812c34:	080c83c0 	call	80c83c <__udivsi3>
  812c38:	100b883a 	mov	r5,r2
  812c3c:	e13fff17 	ldw	r4,-4(fp)
  812c40:	080c83c0 	call	80c83c <__udivsi3>
  812c44:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  812c48:	e0bffe17 	ldw	r2,-8(fp)
  812c4c:	10002a26 	beq	r2,zero,812cf8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  812c50:	e03ffc15 	stw	zero,-16(fp)
  812c54:	00001706 	br	812cb4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  812c58:	00a00034 	movhi	r2,32768
  812c5c:	10bfffc4 	addi	r2,r2,-1
  812c60:	10bfffc4 	addi	r2,r2,-1
  812c64:	103ffe1e 	bne	r2,zero,812c60 <__alt_mem_onchip_mem+0xff792c60>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  812c68:	e0fffd17 	ldw	r3,-12(fp)
  812c6c:	008003f4 	movhi	r2,15
  812c70:	10909004 	addi	r2,r2,16960
  812c74:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  812c78:	100b883a 	mov	r5,r2
  812c7c:	0100bef4 	movhi	r4,763
  812c80:	213c2004 	addi	r4,r4,-3968
  812c84:	080c83c0 	call	80c83c <__udivsi3>
  812c88:	100b883a 	mov	r5,r2
  812c8c:	01200034 	movhi	r4,32768
  812c90:	213fffc4 	addi	r4,r4,-1
  812c94:	080c83c0 	call	80c83c <__udivsi3>
  812c98:	1007883a 	mov	r3,r2
  812c9c:	e0bfff17 	ldw	r2,-4(fp)
  812ca0:	10c5c83a 	sub	r2,r2,r3
  812ca4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  812ca8:	e0bffc17 	ldw	r2,-16(fp)
  812cac:	10800044 	addi	r2,r2,1
  812cb0:	e0bffc15 	stw	r2,-16(fp)
  812cb4:	e0fffc17 	ldw	r3,-16(fp)
  812cb8:	e0bffe17 	ldw	r2,-8(fp)
  812cbc:	18bfe616 	blt	r3,r2,812c58 <__alt_mem_onchip_mem+0xff792c58>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  812cc0:	e0fffd17 	ldw	r3,-12(fp)
  812cc4:	008003f4 	movhi	r2,15
  812cc8:	10909004 	addi	r2,r2,16960
  812ccc:	1885383a 	mul	r2,r3,r2
  812cd0:	100b883a 	mov	r5,r2
  812cd4:	0100bef4 	movhi	r4,763
  812cd8:	213c2004 	addi	r4,r4,-3968
  812cdc:	080c83c0 	call	80c83c <__udivsi3>
  812ce0:	1007883a 	mov	r3,r2
  812ce4:	e0bfff17 	ldw	r2,-4(fp)
  812ce8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  812cec:	10bfffc4 	addi	r2,r2,-1
  812cf0:	103ffe1e 	bne	r2,zero,812cec <__alt_mem_onchip_mem+0xff792cec>
  812cf4:	00000d06 	br	812d2c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  812cf8:	e0fffd17 	ldw	r3,-12(fp)
  812cfc:	008003f4 	movhi	r2,15
  812d00:	10909004 	addi	r2,r2,16960
  812d04:	1885383a 	mul	r2,r3,r2
  812d08:	100b883a 	mov	r5,r2
  812d0c:	0100bef4 	movhi	r4,763
  812d10:	213c2004 	addi	r4,r4,-3968
  812d14:	080c83c0 	call	80c83c <__udivsi3>
  812d18:	1007883a 	mov	r3,r2
  812d1c:	e0bfff17 	ldw	r2,-4(fp)
  812d20:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  812d24:	10bfffc4 	addi	r2,r2,-1
  812d28:	00bffe16 	blt	zero,r2,812d24 <__alt_mem_onchip_mem+0xff792d24>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  812d2c:	0005883a 	mov	r2,zero
}
  812d30:	e037883a 	mov	sp,fp
  812d34:	dfc00117 	ldw	ra,4(sp)
  812d38:	df000017 	ldw	fp,0(sp)
  812d3c:	dec00204 	addi	sp,sp,8
  812d40:	f800283a 	ret

00812d44 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  812d44:	defffb04 	addi	sp,sp,-20
  812d48:	df000415 	stw	fp,16(sp)
  812d4c:	df000404 	addi	fp,sp,16
  812d50:	e13ffe15 	stw	r4,-8(fp)
  812d54:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  812d58:	e0bfff17 	ldw	r2,-4(fp)
  812d5c:	10840070 	cmpltui	r2,r2,4097
  812d60:	1000021e 	bne	r2,zero,812d6c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  812d64:	00840004 	movi	r2,4096
  812d68:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  812d6c:	e0fffe17 	ldw	r3,-8(fp)
  812d70:	e0bfff17 	ldw	r2,-4(fp)
  812d74:	1885883a 	add	r2,r3,r2
  812d78:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  812d7c:	e0bffe17 	ldw	r2,-8(fp)
  812d80:	e0bffc15 	stw	r2,-16(fp)
  812d84:	00000506 	br	812d9c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  812d88:	e0bffc17 	ldw	r2,-16(fp)
  812d8c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  812d90:	e0bffc17 	ldw	r2,-16(fp)
  812d94:	10800804 	addi	r2,r2,32
  812d98:	e0bffc15 	stw	r2,-16(fp)
  812d9c:	e0fffc17 	ldw	r3,-16(fp)
  812da0:	e0bffd17 	ldw	r2,-12(fp)
  812da4:	18bff836 	bltu	r3,r2,812d88 <__alt_mem_onchip_mem+0xff792d88>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  812da8:	e0bffe17 	ldw	r2,-8(fp)
  812dac:	108007cc 	andi	r2,r2,31
  812db0:	10000226 	beq	r2,zero,812dbc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  812db4:	e0bffc17 	ldw	r2,-16(fp)
  812db8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  812dbc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  812dc0:	0001883a 	nop
  812dc4:	e037883a 	mov	sp,fp
  812dc8:	df000017 	ldw	fp,0(sp)
  812dcc:	dec00104 	addi	sp,sp,4
  812dd0:	f800283a 	ret

00812dd4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  812dd4:	defffe04 	addi	sp,sp,-8
  812dd8:	df000115 	stw	fp,4(sp)
  812ddc:	df000104 	addi	fp,sp,4
  812de0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  812de4:	e0bfff17 	ldw	r2,-4(fp)
  812de8:	10bffe84 	addi	r2,r2,-6
  812dec:	10c00428 	cmpgeui	r3,r2,16
  812df0:	18001a1e 	bne	r3,zero,812e5c <alt_exception_cause_generated_bad_addr+0x88>
  812df4:	100690ba 	slli	r3,r2,2
  812df8:	00802074 	movhi	r2,129
  812dfc:	108b8304 	addi	r2,r2,11788
  812e00:	1885883a 	add	r2,r3,r2
  812e04:	10800017 	ldw	r2,0(r2)
  812e08:	1000683a 	jmp	r2
  812e0c:	00812e4c 	andi	r2,zero,1209
  812e10:	00812e4c 	andi	r2,zero,1209
  812e14:	00812e5c 	xori	r2,zero,1209
  812e18:	00812e5c 	xori	r2,zero,1209
  812e1c:	00812e5c 	xori	r2,zero,1209
  812e20:	00812e4c 	andi	r2,zero,1209
  812e24:	00812e54 	movui	r2,1209
  812e28:	00812e5c 	xori	r2,zero,1209
  812e2c:	00812e4c 	andi	r2,zero,1209
  812e30:	00812e4c 	andi	r2,zero,1209
  812e34:	00812e5c 	xori	r2,zero,1209
  812e38:	00812e4c 	andi	r2,zero,1209
  812e3c:	00812e54 	movui	r2,1209
  812e40:	00812e5c 	xori	r2,zero,1209
  812e44:	00812e5c 	xori	r2,zero,1209
  812e48:	00812e4c 	andi	r2,zero,1209
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  812e4c:	00800044 	movi	r2,1
  812e50:	00000306 	br	812e60 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  812e54:	0005883a 	mov	r2,zero
  812e58:	00000106 	br	812e60 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  812e5c:	0005883a 	mov	r2,zero
  }
}
  812e60:	e037883a 	mov	sp,fp
  812e64:	df000017 	ldw	fp,0(sp)
  812e68:	dec00104 	addi	sp,sp,4
  812e6c:	f800283a 	ret

00812e70 <atexit>:
  812e70:	200b883a 	mov	r5,r4
  812e74:	000f883a 	mov	r7,zero
  812e78:	000d883a 	mov	r6,zero
  812e7c:	0009883a 	mov	r4,zero
  812e80:	0812f381 	jmpi	812f38 <__register_exitproc>

00812e84 <exit>:
  812e84:	defffe04 	addi	sp,sp,-8
  812e88:	000b883a 	mov	r5,zero
  812e8c:	dc000015 	stw	r16,0(sp)
  812e90:	dfc00115 	stw	ra,4(sp)
  812e94:	2021883a 	mov	r16,r4
  812e98:	08130500 	call	813050 <__call_exitprocs>
  812e9c:	00802074 	movhi	r2,129
  812ea0:	10957704 	addi	r2,r2,21980
  812ea4:	11000017 	ldw	r4,0(r2)
  812ea8:	20800f17 	ldw	r2,60(r4)
  812eac:	10000126 	beq	r2,zero,812eb4 <exit+0x30>
  812eb0:	103ee83a 	callr	r2
  812eb4:	8009883a 	mov	r4,r16
  812eb8:	08131d00 	call	8131d0 <_exit>

00812ebc <memcmp>:
  812ebc:	01c000c4 	movi	r7,3
  812ec0:	3980192e 	bgeu	r7,r6,812f28 <memcmp+0x6c>
  812ec4:	2144b03a 	or	r2,r4,r5
  812ec8:	11c4703a 	and	r2,r2,r7
  812ecc:	10000f26 	beq	r2,zero,812f0c <memcmp+0x50>
  812ed0:	20800003 	ldbu	r2,0(r4)
  812ed4:	28c00003 	ldbu	r3,0(r5)
  812ed8:	10c0151e 	bne	r2,r3,812f30 <memcmp+0x74>
  812edc:	31bfff84 	addi	r6,r6,-2
  812ee0:	01ffffc4 	movi	r7,-1
  812ee4:	00000406 	br	812ef8 <memcmp+0x3c>
  812ee8:	20800003 	ldbu	r2,0(r4)
  812eec:	28c00003 	ldbu	r3,0(r5)
  812ef0:	31bfffc4 	addi	r6,r6,-1
  812ef4:	10c00e1e 	bne	r2,r3,812f30 <memcmp+0x74>
  812ef8:	21000044 	addi	r4,r4,1
  812efc:	29400044 	addi	r5,r5,1
  812f00:	31fff91e 	bne	r6,r7,812ee8 <__alt_mem_onchip_mem+0xff792ee8>
  812f04:	0005883a 	mov	r2,zero
  812f08:	f800283a 	ret
  812f0c:	20c00017 	ldw	r3,0(r4)
  812f10:	28800017 	ldw	r2,0(r5)
  812f14:	18bfee1e 	bne	r3,r2,812ed0 <__alt_mem_onchip_mem+0xff792ed0>
  812f18:	31bfff04 	addi	r6,r6,-4
  812f1c:	21000104 	addi	r4,r4,4
  812f20:	29400104 	addi	r5,r5,4
  812f24:	39bff936 	bltu	r7,r6,812f0c <__alt_mem_onchip_mem+0xff792f0c>
  812f28:	303fe91e 	bne	r6,zero,812ed0 <__alt_mem_onchip_mem+0xff792ed0>
  812f2c:	003ff506 	br	812f04 <__alt_mem_onchip_mem+0xff792f04>
  812f30:	10c5c83a 	sub	r2,r2,r3
  812f34:	f800283a 	ret

00812f38 <__register_exitproc>:
  812f38:	defffa04 	addi	sp,sp,-24
  812f3c:	dc000315 	stw	r16,12(sp)
  812f40:	04002074 	movhi	r16,129
  812f44:	84157704 	addi	r16,r16,21980
  812f48:	80c00017 	ldw	r3,0(r16)
  812f4c:	dc400415 	stw	r17,16(sp)
  812f50:	dfc00515 	stw	ra,20(sp)
  812f54:	18805217 	ldw	r2,328(r3)
  812f58:	2023883a 	mov	r17,r4
  812f5c:	10003726 	beq	r2,zero,81303c <__register_exitproc+0x104>
  812f60:	10c00117 	ldw	r3,4(r2)
  812f64:	010007c4 	movi	r4,31
  812f68:	20c00e16 	blt	r4,r3,812fa4 <__register_exitproc+0x6c>
  812f6c:	1a000044 	addi	r8,r3,1
  812f70:	8800221e 	bne	r17,zero,812ffc <__register_exitproc+0xc4>
  812f74:	18c00084 	addi	r3,r3,2
  812f78:	18c7883a 	add	r3,r3,r3
  812f7c:	18c7883a 	add	r3,r3,r3
  812f80:	12000115 	stw	r8,4(r2)
  812f84:	10c7883a 	add	r3,r2,r3
  812f88:	19400015 	stw	r5,0(r3)
  812f8c:	0005883a 	mov	r2,zero
  812f90:	dfc00517 	ldw	ra,20(sp)
  812f94:	dc400417 	ldw	r17,16(sp)
  812f98:	dc000317 	ldw	r16,12(sp)
  812f9c:	dec00604 	addi	sp,sp,24
  812fa0:	f800283a 	ret
  812fa4:	00802034 	movhi	r2,128
  812fa8:	10898404 	addi	r2,r2,9744
  812fac:	10002626 	beq	r2,zero,813048 <__register_exitproc+0x110>
  812fb0:	01006404 	movi	r4,400
  812fb4:	d9400015 	stw	r5,0(sp)
  812fb8:	d9800115 	stw	r6,4(sp)
  812fbc:	d9c00215 	stw	r7,8(sp)
  812fc0:	08026100 	call	802610 <malloc>
  812fc4:	d9400017 	ldw	r5,0(sp)
  812fc8:	d9800117 	ldw	r6,4(sp)
  812fcc:	d9c00217 	ldw	r7,8(sp)
  812fd0:	10001d26 	beq	r2,zero,813048 <__register_exitproc+0x110>
  812fd4:	81000017 	ldw	r4,0(r16)
  812fd8:	10000115 	stw	zero,4(r2)
  812fdc:	02000044 	movi	r8,1
  812fe0:	22405217 	ldw	r9,328(r4)
  812fe4:	0007883a 	mov	r3,zero
  812fe8:	12400015 	stw	r9,0(r2)
  812fec:	20805215 	stw	r2,328(r4)
  812ff0:	10006215 	stw	zero,392(r2)
  812ff4:	10006315 	stw	zero,396(r2)
  812ff8:	883fde26 	beq	r17,zero,812f74 <__alt_mem_onchip_mem+0xff792f74>
  812ffc:	18c9883a 	add	r4,r3,r3
  813000:	2109883a 	add	r4,r4,r4
  813004:	1109883a 	add	r4,r2,r4
  813008:	21802215 	stw	r6,136(r4)
  81300c:	01800044 	movi	r6,1
  813010:	12406217 	ldw	r9,392(r2)
  813014:	30cc983a 	sll	r6,r6,r3
  813018:	4992b03a 	or	r9,r9,r6
  81301c:	12406215 	stw	r9,392(r2)
  813020:	21c04215 	stw	r7,264(r4)
  813024:	01000084 	movi	r4,2
  813028:	893fd21e 	bne	r17,r4,812f74 <__alt_mem_onchip_mem+0xff792f74>
  81302c:	11006317 	ldw	r4,396(r2)
  813030:	218cb03a 	or	r6,r4,r6
  813034:	11806315 	stw	r6,396(r2)
  813038:	003fce06 	br	812f74 <__alt_mem_onchip_mem+0xff792f74>
  81303c:	18805304 	addi	r2,r3,332
  813040:	18805215 	stw	r2,328(r3)
  813044:	003fc606 	br	812f60 <__alt_mem_onchip_mem+0xff792f60>
  813048:	00bfffc4 	movi	r2,-1
  81304c:	003fd006 	br	812f90 <__alt_mem_onchip_mem+0xff792f90>

00813050 <__call_exitprocs>:
  813050:	defff504 	addi	sp,sp,-44
  813054:	df000915 	stw	fp,36(sp)
  813058:	dd400615 	stw	r21,24(sp)
  81305c:	dc800315 	stw	r18,12(sp)
  813060:	dfc00a15 	stw	ra,40(sp)
  813064:	ddc00815 	stw	r23,32(sp)
  813068:	dd800715 	stw	r22,28(sp)
  81306c:	dd000515 	stw	r20,20(sp)
  813070:	dcc00415 	stw	r19,16(sp)
  813074:	dc400215 	stw	r17,8(sp)
  813078:	dc000115 	stw	r16,4(sp)
  81307c:	d9000015 	stw	r4,0(sp)
  813080:	2839883a 	mov	fp,r5
  813084:	04800044 	movi	r18,1
  813088:	057fffc4 	movi	r21,-1
  81308c:	00802074 	movhi	r2,129
  813090:	10957704 	addi	r2,r2,21980
  813094:	12000017 	ldw	r8,0(r2)
  813098:	45005217 	ldw	r20,328(r8)
  81309c:	44c05204 	addi	r19,r8,328
  8130a0:	a0001c26 	beq	r20,zero,813114 <__call_exitprocs+0xc4>
  8130a4:	a0800117 	ldw	r2,4(r20)
  8130a8:	15ffffc4 	addi	r23,r2,-1
  8130ac:	b8000d16 	blt	r23,zero,8130e4 <__call_exitprocs+0x94>
  8130b0:	14000044 	addi	r16,r2,1
  8130b4:	8421883a 	add	r16,r16,r16
  8130b8:	8421883a 	add	r16,r16,r16
  8130bc:	84402004 	addi	r17,r16,128
  8130c0:	a463883a 	add	r17,r20,r17
  8130c4:	a421883a 	add	r16,r20,r16
  8130c8:	e0001e26 	beq	fp,zero,813144 <__call_exitprocs+0xf4>
  8130cc:	80804017 	ldw	r2,256(r16)
  8130d0:	e0801c26 	beq	fp,r2,813144 <__call_exitprocs+0xf4>
  8130d4:	bdffffc4 	addi	r23,r23,-1
  8130d8:	843fff04 	addi	r16,r16,-4
  8130dc:	8c7fff04 	addi	r17,r17,-4
  8130e0:	bd7ff91e 	bne	r23,r21,8130c8 <__alt_mem_onchip_mem+0xff7930c8>
  8130e4:	00802034 	movhi	r2,128
  8130e8:	10898904 	addi	r2,r2,9764
  8130ec:	10000926 	beq	r2,zero,813114 <__call_exitprocs+0xc4>
  8130f0:	a0800117 	ldw	r2,4(r20)
  8130f4:	1000301e 	bne	r2,zero,8131b8 <__call_exitprocs+0x168>
  8130f8:	a0800017 	ldw	r2,0(r20)
  8130fc:	10003226 	beq	r2,zero,8131c8 <__call_exitprocs+0x178>
  813100:	a009883a 	mov	r4,r20
  813104:	98800015 	stw	r2,0(r19)
  813108:	08026240 	call	802624 <free>
  81310c:	9d000017 	ldw	r20,0(r19)
  813110:	a03fe41e 	bne	r20,zero,8130a4 <__alt_mem_onchip_mem+0xff7930a4>
  813114:	dfc00a17 	ldw	ra,40(sp)
  813118:	df000917 	ldw	fp,36(sp)
  81311c:	ddc00817 	ldw	r23,32(sp)
  813120:	dd800717 	ldw	r22,28(sp)
  813124:	dd400617 	ldw	r21,24(sp)
  813128:	dd000517 	ldw	r20,20(sp)
  81312c:	dcc00417 	ldw	r19,16(sp)
  813130:	dc800317 	ldw	r18,12(sp)
  813134:	dc400217 	ldw	r17,8(sp)
  813138:	dc000117 	ldw	r16,4(sp)
  81313c:	dec00b04 	addi	sp,sp,44
  813140:	f800283a 	ret
  813144:	a0800117 	ldw	r2,4(r20)
  813148:	80c00017 	ldw	r3,0(r16)
  81314c:	10bfffc4 	addi	r2,r2,-1
  813150:	15c01426 	beq	r2,r23,8131a4 <__call_exitprocs+0x154>
  813154:	80000015 	stw	zero,0(r16)
  813158:	183fde26 	beq	r3,zero,8130d4 <__alt_mem_onchip_mem+0xff7930d4>
  81315c:	95c8983a 	sll	r4,r18,r23
  813160:	a0806217 	ldw	r2,392(r20)
  813164:	a5800117 	ldw	r22,4(r20)
  813168:	2084703a 	and	r2,r4,r2
  81316c:	10000b26 	beq	r2,zero,81319c <__call_exitprocs+0x14c>
  813170:	a0806317 	ldw	r2,396(r20)
  813174:	2088703a 	and	r4,r4,r2
  813178:	20000c1e 	bne	r4,zero,8131ac <__call_exitprocs+0x15c>
  81317c:	89400017 	ldw	r5,0(r17)
  813180:	d9000017 	ldw	r4,0(sp)
  813184:	183ee83a 	callr	r3
  813188:	a0800117 	ldw	r2,4(r20)
  81318c:	15bfbf1e 	bne	r2,r22,81308c <__alt_mem_onchip_mem+0xff79308c>
  813190:	98800017 	ldw	r2,0(r19)
  813194:	153fcf26 	beq	r2,r20,8130d4 <__alt_mem_onchip_mem+0xff7930d4>
  813198:	003fbc06 	br	81308c <__alt_mem_onchip_mem+0xff79308c>
  81319c:	183ee83a 	callr	r3
  8131a0:	003ff906 	br	813188 <__alt_mem_onchip_mem+0xff793188>
  8131a4:	a5c00115 	stw	r23,4(r20)
  8131a8:	003feb06 	br	813158 <__alt_mem_onchip_mem+0xff793158>
  8131ac:	89000017 	ldw	r4,0(r17)
  8131b0:	183ee83a 	callr	r3
  8131b4:	003ff406 	br	813188 <__alt_mem_onchip_mem+0xff793188>
  8131b8:	a0800017 	ldw	r2,0(r20)
  8131bc:	a027883a 	mov	r19,r20
  8131c0:	1029883a 	mov	r20,r2
  8131c4:	003fb606 	br	8130a0 <__alt_mem_onchip_mem+0xff7930a0>
  8131c8:	0005883a 	mov	r2,zero
  8131cc:	003ffb06 	br	8131bc <__alt_mem_onchip_mem+0xff7931bc>

008131d0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8131d0:	defffd04 	addi	sp,sp,-12
  8131d4:	df000215 	stw	fp,8(sp)
  8131d8:	df000204 	addi	fp,sp,8
  8131dc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  8131e0:	0001883a 	nop
  8131e4:	e0bfff17 	ldw	r2,-4(fp)
  8131e8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  8131ec:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8131f0:	10000226 	beq	r2,zero,8131fc <_exit+0x2c>
    ALT_SIM_FAIL();
  8131f4:	002af070 	cmpltui	zero,zero,43969
  8131f8:	00000106 	br	813200 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  8131fc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  813200:	003fff06 	br	813200 <__alt_mem_onchip_mem+0xff793200>
