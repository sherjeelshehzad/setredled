
Traffic_Light_Controller.elf:     file format elf32-littlenios2
Traffic_Light_Controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000127d8 memsz 0x000127d8 flags r-x
    LOAD off    0x000137f8 vaddr 0x008127f8 paddr 0x008144d8 align 2**12
         filesz 0x00001ce0 memsz 0x00001ce0 flags rw-
    LOAD off    0x000161b8 vaddr 0x008161b8 paddr 0x008161b8 align 2**12
         filesz 0x00000000 memsz 0x000001ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011fb0  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000604  008121f4  008121f4  000131f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ce0  008127f8  008144d8  000137f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001ac  008161b8  008161b8  000161b8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00816364  00816364  000154d8  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01080000  01080000  000154d8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000154d8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000010d0  00000000  00000000  00015500  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00029eaa  00000000  00000000  000165d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000aab6  00000000  00000000  0004047a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d132  00000000  00000000  0004af30  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000278c  00000000  00000000  00058064  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000042e6  00000000  00000000  0005a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000181f8  00000000  00000000  0005ead6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00076cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001988  00000000  00000000  00076d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007c1b9  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007c1bc  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007c1bf  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007c1c0  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007c1c1  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007c1c5  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007c1c9  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0007c1cd  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0007c1d6  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0007c1df  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  0007c1e8  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000059  00000000  00000000  0007c1f4  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006b318  00000000  00000000  0007c24d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
008121f4 l    d  .rodata	00000000 .rodata
008127f8 l    d  .rwdata	00000000 .rwdata
008161b8 l    d  .bss	00000000 .bss
00816364 l    d  .sdram	00000000 .sdram
01080000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Traffic_Light_Controller_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 impure.c
008127f8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 refill.c
00802020 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
008122b2 l     O .rodata	00000010 zeroes.4404
008045b4 l     F .text	000000bc __sbprintf
008122c2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00804878 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008063a8 l     F .text	00000008 __fp_unlock
008063bc l     F .text	0000019c __sinit.part.1
00806558 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00813044 l     O .rwdata	00000020 lc_ctype_charset
00813024 l     O .rwdata	00000020 lc_message_charset
00813064 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
008122f0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
008083b0 l     F .text	000000fc __sprint_r.part.0
00812424 l     O .rodata	00000010 blanks.4348
00812414 l     O .rodata	00000010 zeroes.4349
0080993c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080e07c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080e188 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080e1b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080e420 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080e500 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080e5ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0080e7c0 l     F .text	0000003c alt_get_errno
0080e7fc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0080ea14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008144c4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080ee04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080ef38 l     F .text	00000034 alt_dev_reg
00813244 l     O .rwdata	00001060 jtag_uart
008142a4 l     O .rwdata	00000120 lcd
008143c4 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080f264 l     F .text	0000020c altera_avalon_jtag_uart_irq
0080f470 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
008144d0 l     O .rwdata	00000004 colstart
0080faa8 l     F .text	000000b8 lcd_write_command
0080fb60 l     F .text	000000d8 lcd_write_data
0080fc38 l     F .text	000000d0 lcd_clear_screen
0080fd08 l     F .text	000001ec lcd_repaint_screen
0080fef4 l     F .text	000000cc lcd_scroll_up
0080ffc0 l     F .text	000002ac lcd_handle_escape
00810744 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00810984 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00810c34 l     F .text	0000009c altera_avalon_uart_irq
00810cd0 l     F .text	000000e4 altera_avalon_uart_rxirq
00810db4 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00810f50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00811168 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00811398 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00811a48 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00812677 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00816220 g     O .bss	00000004 alt_instruction_exception_handler
00807ff0 g     F .text	00000074 _mprec_log10
008005e8 g     F .text	00000080 lcd_set_mode
008080dc g     F .text	0000008c __any_on
00806db0 g     F .text	00000054 _isatty_r
008122fc g     O .rodata	00000028 __mprec_tinytens
008161d8 g     O .bss	00000004 current_state4
0080e6fc g     F .text	0000007c alt_main
00816264 g     O .bss	00000100 alt_irq
00806ee0 g     F .text	00000060 _lseek_r
008144d8 g       *ABS*	00000000 __flash_rwdata_start
00806748 g     F .text	000000ac __sflags
0080ca7c g     F .text	00000088 .hidden __eqdf2
008161e4 g     O .bss	00000004 pedEW
00816364 g       *ABS*	00000000 __alt_heap_start
00801fe4 g     F .text	0000003c printf
0080aa9c g     F .text	0000009c _wcrtomb_r
0080233c g     F .text	0000005c __sseek
008066f8 g     F .text	00000010 __sinit
0080a944 g     F .text	00000140 __swbuf_r
008161c4 g     O .bss	00000004 previous_state1
008161e8 g     O .bss	00000004 lcd
00806e04 g     F .text	0000007c _setlocale_r
00806560 g     F .text	00000068 __sfmoreglue
0080e79c g     F .text	00000024 __malloc_unlock
0080a284 g     F .text	0000015c memmove
008066e0 g     F .text	00000018 _cleanup
0080716c g     F .text	000000a8 _Balloc
0080cb04 g     F .text	000000dc .hidden __gtdf2
00811bb8 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00801408 g     F .text	0000005c _fstat_r
008161ec g     O .bss	00000004 errno
0081448c g     O .rwdata	00000004 mode_display
008022b8 g     F .text	00000008 __seofread
00816210 g     O .bss	00000004 alt_argv
0081c488 g       *ABS*	00000000 _gp
00811b88 g     F .text	00000030 usleep
008130c4 g     O .rwdata	00000180 alt_fd_list
00811538 g     F .text	00000090 alt_find_dev
00807024 g     F .text	00000148 memcpy
00800320 g     F .text	0000023c pedestrian_tlc_timer_isr
008063b0 g     F .text	0000000c _cleanup_r
0080dd68 g     F .text	000000dc .hidden __floatsidf
00811b0c g     F .text	0000007c alt_io_redirect
0080cbe0 g     F .text	000000f4 .hidden __ltdf2
008161e0 g     O .bss	00000004 pedNS
008121f4 g       *ABS*	00000000 __DTOR_END__
00811dc4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
008081c8 g     F .text	00000074 __fpclassifyd
00807f4c g     F .text	000000a4 __ratio
00809920 g     F .text	0000001c __vfiprintf_internal
00800854 g     F .text	00000284 pedestrian_tlc
0080f668 g     F .text	0000021c altera_avalon_jtag_uart_read
00801fb4 g     F .text	00000030 _printf_r
0080b82c g     F .text	00000064 .hidden __udivsi3
0080e45c g     F .text	000000a4 isatty
0081234c g     O .rodata	000000c8 __mprec_tens
00806e80 g     F .text	0000000c __locale_charset
00811d34 g     F .text	00000090 alt_icache_flush
008161f8 g     O .bss	00000004 __malloc_top_pad
008144a0 g     O .rwdata	00000004 __mb_cur_max
00806eb0 g     F .text	0000000c _localeconv_r
00809dc8 g     F .text	000004bc __sfvwrite_r
00807578 g     F .text	0000003c __i2b
00814488 g     O .rwdata	00000004 current_mode
00802210 g     F .text	00000054 _sbrk_r
00800ad8 g     F .text	00000020 configurable_tlc
00808168 g     F .text	00000060 _read_r
008144b8 g     O .rwdata	00000004 alt_max_fd
00809abc g     F .text	000000f0 _fclose_r
00806378 g     F .text	00000030 fflush
008161f4 g     O .bss	00000004 __malloc_max_sbrked_mem
0080e2a0 g     F .text	00000180 alt_irq_register
0080b8e8 g     F .text	000008ac .hidden __adddf3
00807cf4 g     F .text	0000010c __b2d
0080b1fc g     F .text	00000538 .hidden __umoddi3
0080e628 g     F .text	000000d4 lseek
00814490 g     O .rwdata	00000004 _global_impure_ptr
0080a3e0 g     F .text	00000564 _realloc_r
00816364 g       *ABS*	00000000 __bss_end
00811958 g     F .text	000000f0 alt_iic_isr_register
0080ecfc g     F .text	00000108 alt_tick
0080ac84 g     F .text	00000578 .hidden __udivdi3
00809d24 g     F .text	00000024 _fputwc_r
00812324 g     O .rodata	00000028 __mprec_bigtens
0080735c g     F .text	00000104 __s2b
0080de44 g     F .text	000000a8 .hidden __floatunsidf
00807a34 g     F .text	00000060 __mcmp
00810b88 g     F .text	000000ac altera_avalon_uart_init
00806718 g     F .text	00000018 __fp_lock_all
0081190c g     F .text	0000004c alt_ic_irq_enabled
0080ec60 g     F .text	0000009c alt_alarm_stop
00800af8 g     F .text	00000020 camera_tlc
00816208 g     O .bss	00000004 alt_irq_active
00800fa8 g     F .text	00000444 _fseeko_r
01080000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
0081309c g     O .rwdata	00000028 alt_dev_null
0081624c g     O .bss	00000018 timer_simple
00811350 g     F .text	00000048 alt_dcache_flush_all
00807460 g     F .text	00000068 __hi0bits
0080dce8 g     F .text	00000080 .hidden __fixdfsi
008144d8 g       *ABS*	00000000 __ram_rwdata_end
008144b0 g     O .rwdata	00000008 alt_dev_list
0080ee40 g     F .text	000000f8 write
008127f8 g       *ABS*	00000000 __ram_rodata_end
0080e1f0 g     F .text	000000b0 fstat
00800f64 g     F .text	00000024 fprintf
0080cbe0 g     F .text	000000f4 .hidden __ledf2
008077ac g     F .text	00000140 __pow5mult
008084c4 g     F .text	0000145c ___vfiprintf_internal_r
00816204 g     O .bss	00000004 __nlocale_changed
0080b890 g     F .text	00000058 .hidden __umodsi3
00816364 g       *ABS*	00000000 end
0081026c g     F .text	000004d8 altera_avalon_lcd_16207_write
008013ec g     F .text	0000001c fseeko
008111a4 g     F .text	000001ac altera_avalon_uart_write
00800f8c g     F .text	0000001c fseek
0080f1a4 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
008121f4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008109fc g     F .text	0000007c alt_avalon_timer_sc_init
00810ad8 g     F .text	00000060 altera_avalon_uart_write_fd
0080deec g     F .text	00000064 .hidden __clzsi2
00810b38 g     F .text	00000050 altera_avalon_uart_close_fd
0080f884 g     F .text	00000224 altera_avalon_jtag_uart_write
00806708 g     F .text	00000004 __sfp_lock_acquire
00806f40 g     F .text	000000e4 memchr
008023a0 g     F .text	000021f8 ___vfprintf_internal_r
00806918 g     F .text	00000310 _free_r
00806e8c g     F .text	00000010 __locale_mb_cur_max
00812040 g     F .text	00000180 __call_exitprocs
008161d4 g     O .bss	00000004 previous_state3
00816200 g     O .bss	00000004 __mlocale_changed
00814498 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00816218 g     O .bss	00000004 _alt_tick_rate
008078ec g     F .text	00000148 __lshift
0081621c g     O .bss	00000004 _alt_nticks
0080ea50 g     F .text	000000fc read
0080efa4 g     F .text	0000009c alt_sys_init
00801f54 g     F .text	00000060 _open_r
00811f28 g     F .text	00000118 __register_exitproc
008075b4 g     F .text	000001f8 __multiply
0080f510 g     F .text	00000068 altera_avalon_jtag_uart_close
008127f8 g       *ABS*	00000000 __ram_rwdata_start
008121f4 g       *ABS*	00000000 __ram_rodata_start
00816224 g     O .bss	00000028 __malloc_current_mallinfo
00807e00 g     F .text	0000014c __d2b
008161c8 g     O .bss	00000004 current_state2
0080f040 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
008116d0 g     F .text	000000a4 alt_get_fd
00811bdc g     F .text	00000158 alt_busy_sleep
00804824 g     F .text	00000054 _close_r
00811eac g     F .text	0000007c memcmp
0080f100 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00816364 g       *ABS*	00000000 __alt_stack_base
0080f150 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
008046d0 g     F .text	00000154 __swsetup_r
0080c194 g     F .text	000008e8 .hidden __divdf3
008065c8 g     F .text	00000118 __sfp
00808064 g     F .text	00000078 __copybits
00812c1c g     O .rwdata	00000408 __malloc_av_
00806714 g     F .text	00000004 __sinit_lock_release
0080ccd4 g     F .text	00000718 .hidden __muldf3
00802264 g     F .text	00000054 __sread
008115c8 g     F .text	00000108 alt_find_file
008113d4 g     F .text	000000a4 alt_dev_llist_insert
0080e778 g     F .text	00000024 __malloc_lock
00800f3c g     F .text	00000028 _fprintf_r
0080ebb0 g     F .text	000000b0 sbrk
0080631c g     F .text	0000005c _fflush_r
008099f8 g     F .text	000000c4 _calloc_r
00800f24 g     F .text	00000018 fopen
008161b8 g       *ABS*	00000000 __bss_start
00801e2c g     F .text	00000128 memset
00800b18 g     F .text	00000318 main
00816214 g     O .bss	00000004 alt_envp
008161f0 g     O .bss	00000004 __malloc_max_total_mem
0080f0a0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080aa84 g     F .text	00000018 __swbuf
008107f0 g     F .text	00000134 altera_avalon_lcd_16207_init
00802398 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00809bac g     F .text	00000014 fclose
00804a78 g     F .text	00001688 _dtoa_r
00801620 g     F .text	0000080c _malloc_r
008161b8 g     O .bss	00000004 timer_has_started
0080abf8 g     F .text	00000030 __ascii_wctomb
008144bc g     O .rwdata	00000004 alt_errno
00806c28 g     F .text	000000c4 _fwalk
008161d0 g     O .bss	00000004 current_state3
0080b734 g     F .text	00000084 .hidden __divsi3
008067f4 g     F .text	00000124 _malloc_trim_r
008121f4 g       *ABS*	00000000 __CTOR_END__
0080823c g     F .text	000000dc strcmp
008121f4 g       *ABS*	00000000 __flash_rodata_start
008121f4 g       *ABS*	00000000 __DTOR_LIST__
008161bc g     O .bss	00000004 mode_request
0080ca7c g     F .text	00000088 .hidden __nedf2
0080ef6c g     F .text	00000038 alt_irq_init
0080eb4c g     F .text	00000064 alt_release_fd
00812434 g     O .rodata	00000100 .hidden __clz_tab
008161fc g     O .bss	00000004 _PathLocale
00811e60 g     F .text	00000014 atexit
00804670 g     F .text	00000060 _write_r
00806ebc g     F .text	00000018 setlocale
00814494 g     O .rwdata	00000004 _impure_ptr
0081620c g     O .bss	00000004 alt_argc
00806100 g     F .text	0000021c __sflush_r
008114d8 g     F .text	00000060 _do_dtors
00806ea8 g     F .text	00000008 __locale_cjk_lang
00800f88 g     F .text	00000004 _fseek_r
0080203c g     F .text	000001d4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00807c90 g     F .text	00000064 __ulp
00806730 g     F .text	00000018 __fp_unlock_all
00810924 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
008144a8 g     O .rwdata	00000008 alt_fs_list
008161dc g     O .bss	00000004 previous_state4
00800020 g       *ABS*	00000000 __ram_exceptions_start
00806ed4 g     F .text	0000000c localeconv
008117a8 g     F .text	00000050 alt_ic_isr_register
008144d8 g       *ABS*	00000000 _edata
00810a78 g     F .text	00000060 altera_avalon_uart_read_fd
00816364 g       *ABS*	00000000 _end
00800290 g     F .text	00000090 simple_tlc_timer_isr
00809bc0 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
0080f578 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00811880 g     F .text	0000008c alt_ic_irq_disable
008022c0 g     F .text	0000007c __swrite
0081449c g     O .rwdata	00000004 __malloc_trim_threshold
00806e9c g     F .text	0000000c __locale_msgcharset
00811e74 g     F .text	00000038 exit
00806cec g     F .text	000000c4 _fwalk_reent
00807a94 g     F .text	000001fc __mdiff
00800668 g     F .text	000001ec simple_tlc
0080b7b8 g     F .text	00000074 .hidden __modsi3
008144d4 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080670c g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00812576 g     O .rodata	00000101 _ctype_
00810efc g     F .text	00000054 altera_avalon_uart_close
00800e30 g     F .text	000000f4 _fopen_r
008121c0 g     F .text	00000034 _exit
0080df50 g     F .text	0000012c alt_alarm_start
00801464 g     F .text	000001bc __smakebuf_r
00808318 g     F .text	00000098 strlen
0080e8c0 g     F .text	00000154 open
0080cb04 g     F .text	000000dc .hidden __gedf2
008161c0 g     O .bss	00000004 current_state1
008144a4 g     O .rwdata	00000004 __wctomb
008084ac g     F .text	00000018 __sprint_r
00811774 g     F .text	00000034 alt_icache_flush_all
0080055c g     F .text	0000008c pedestrian_button_interrupt
008144c0 g     O .rwdata	00000004 alt_priority_mask
008117f8 g     F .text	00000088 alt_ic_irq_enable
00804598 g     F .text	0000001c __vfprintf_internal
00810f8c g     F .text	000001dc altera_avalon_uart_read
0080ac28 g     F .text	0000005c _wctomb_r
008161cc g     O .bss	00000004 previous_state2
0080d3ec g     F .text	000008fc .hidden __subdf3
008074c8 g     F .text	000000b0 __lo0bits
008144c8 g     O .rwdata	00000008 alt_alarm_list
00811478 g     F .text	00000060 _do_ctors
0080ab38 g     F .text	000000c0 wcrtomb
0080e0b8 g     F .text	000000d0 close
0080e568 g     F .text	00000084 alt_load
00809d48 g     F .text	00000080 fputwc
00806710 g     F .text	00000004 __sinit_lock_acquire
0080723c g     F .text	00000120 __multadd
00807214 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff780004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	10989904 	addi	r2,r2,25188
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10989904 	addi	r2,r2,25188
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff78012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff780120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a76617 	ldw	r2,-25192(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a76617 	ldw	r2,-25192(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff780248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6b12214 	ori	gp,gp,50312
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10986e14 	ori	r2,r2,25016

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18d8d914 	ori	r3,r3,25444

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff780278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080e5680 	call	80e568 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080e6fc0 	call	80e6fc <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff78028c>

00800290 <simple_tlc_timer_isr>:
volatile int pedNS = 0;
volatile int pedEW = 0;



alt_u32 simple_tlc_timer_isr(void* context){
  800290:	defffd04 	addi	sp,sp,-12
  800294:	dfc00215 	stw	ra,8(sp)
  800298:	df000115 	stw	fp,4(sp)
  80029c:	df000104 	addi	fp,sp,4
  8002a0:	e13fff15 	stw	r4,-4(fp)
		//enum simple_state *something = (enum simple_state*) context;
		//if there is a pending mode request and we are in a safe state, do not run any output logic and kill the timer
		if (mode_request != current_mode){
  8002a4:	d0e74d17 	ldw	r3,-25292(gp)
  8002a8:	d0a00017 	ldw	r2,-32768(gp)
  8002ac:	18800726 	beq	r3,r2,8002cc <simple_tlc_timer_isr+0x3c>
			if ((current_state1 == rr1_1) || (current_state1 == rr2_1))
  8002b0:	d0a74e17 	ldw	r2,-25288(gp)
  8002b4:	10000326 	beq	r2,zero,8002c4 <simple_tlc_timer_isr+0x34>
  8002b8:	d0a74e17 	ldw	r2,-25288(gp)
  8002bc:	108000d8 	cmpnei	r2,r2,3
  8002c0:	1000021e 	bne	r2,zero,8002cc <simple_tlc_timer_isr+0x3c>
				return 0;
  8002c4:	0005883a 	mov	r2,zero
  8002c8:	00001006 	br	80030c <simple_tlc_timer_isr+0x7c>
		}

		previous_state1 = current_state1; //save previous state for output transition logic
  8002cc:	d0a74e17 	ldw	r2,-25288(gp)
  8002d0:	d0a74f15 	stw	r2,-25284(gp)
		current_state1++; //move to the next state
  8002d4:	d0a74e17 	ldw	r2,-25288(gp)
  8002d8:	10800044 	addi	r2,r2,1
  8002dc:	d0a74e15 	stw	r2,-25288(gp)
		if (current_state1 == buffer_1) //if at final state, loop back to initial state using a buffer state
  8002e0:	d0a74e17 	ldw	r2,-25288(gp)
  8002e4:	10800198 	cmpnei	r2,r2,6
  8002e8:	1000011e 	bne	r2,zero,8002f0 <simple_tlc_timer_isr+0x60>
			current_state1 = rr1_1;
  8002ec:	d0274e15 	stw	zero,-25288(gp)
		printf("current state simple_timer %d\n", current_state1);
  8002f0:	d0a74e17 	ldw	r2,-25288(gp)
  8002f4:	100b883a 	mov	r5,r2
  8002f8:	01002074 	movhi	r4,129
  8002fc:	21087d04 	addi	r4,r4,8692
  800300:	0801fe40 	call	801fe4 <printf>
		timer_has_started = 0; //reset timer_started flag
  800304:	d0274c15 	stw	zero,-25296(gp)
	return 0;
  800308:	0005883a 	mov	r2,zero
}
  80030c:	e037883a 	mov	sp,fp
  800310:	dfc00117 	ldw	ra,4(sp)
  800314:	df000017 	ldw	fp,0(sp)
  800318:	dec00204 	addi	sp,sp,8
  80031c:	f800283a 	ret

00800320 <pedestrian_tlc_timer_isr>:

alt_u32 pedestrian_tlc_timer_isr(void* context){
  800320:	defffd04 	addi	sp,sp,-12
  800324:	dfc00215 	stw	ra,8(sp)
  800328:	df000115 	stw	fp,4(sp)
  80032c:	df000104 	addi	fp,sp,4
  800330:	e13fff15 	stw	r4,-4(fp)
		//enum simple_state *something = (enum simple_state*) context;

		//if there is a pending mode request and we are in a safe state, do not run any output logic and kill the timer
		if (mode_request != current_mode){
  800334:	d0e74d17 	ldw	r3,-25292(gp)
  800338:	d0a00017 	ldw	r2,-32768(gp)
  80033c:	18800726 	beq	r3,r2,80035c <pedestrian_tlc_timer_isr+0x3c>
			if ((current_state2 == rr1_2) || (current_state2 == rr2_2))
  800340:	d0a75017 	ldw	r2,-25280(gp)
  800344:	10000326 	beq	r2,zero,800354 <pedestrian_tlc_timer_isr+0x34>
  800348:	d0a75017 	ldw	r2,-25280(gp)
  80034c:	10800118 	cmpnei	r2,r2,4
  800350:	1000021e 	bne	r2,zero,80035c <pedestrian_tlc_timer_isr+0x3c>
				return 0;
  800354:	0005883a 	mov	r2,zero
  800358:	00007b06 	br	800548 <pedestrian_tlc_timer_isr+0x228>
		}

		previous_state2 = current_state2; //save previous state for output transition logic
  80035c:	d0a75017 	ldw	r2,-25280(gp)
  800360:	d0a75115 	stw	r2,-25276(gp)
		if (pedNS){
  800364:	d0a75617 	ldw	r2,-25256(gp)
  800368:	10001826 	beq	r2,zero,8003cc <pedestrian_tlc_timer_isr+0xac>
			//we are at state RED-RED (1), handle NS pedestrians
			if (current_state2 == rr1_2)
  80036c:	d0a75017 	ldw	r2,-25280(gp)
  800370:	1000041e 	bne	r2,zero,800384 <pedestrian_tlc_timer_isr+0x64>
				current_state2 += 2;
  800374:	d0a75017 	ldw	r2,-25280(gp)
  800378:	10800084 	addi	r2,r2,2
  80037c:	d0a75015 	stw	r2,-25280(gp)
  800380:	00005d06 	br	8004f8 <pedestrian_tlc_timer_isr+0x1d8>
			//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
			else if (current_state2 == gr_2)
  800384:	d0a75017 	ldw	r2,-25280(gp)
  800388:	10800058 	cmpnei	r2,r2,1
  80038c:	1000041e 	bne	r2,zero,8003a0 <pedestrian_tlc_timer_isr+0x80>
				current_state2 += 2;
  800390:	d0a75017 	ldw	r2,-25280(gp)
  800394:	10800084 	addi	r2,r2,2
  800398:	d0a75015 	stw	r2,-25280(gp)
  80039c:	00005606 	br	8004f8 <pedestrian_tlc_timer_isr+0x1d8>
			//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
			else if (current_state2 == rg_2)
  8003a0:	d0a75017 	ldw	r2,-25280(gp)
  8003a4:	10800158 	cmpnei	r2,r2,5
  8003a8:	1000041e 	bne	r2,zero,8003bc <pedestrian_tlc_timer_isr+0x9c>
				current_state2 += 2;
  8003ac:	d0a75017 	ldw	r2,-25280(gp)
  8003b0:	10800084 	addi	r2,r2,2
  8003b4:	d0a75015 	stw	r2,-25280(gp)
  8003b8:	00004f06 	br	8004f8 <pedestrian_tlc_timer_isr+0x1d8>
			else
				current_state2++;
  8003bc:	d0a75017 	ldw	r2,-25280(gp)
  8003c0:	10800044 	addi	r2,r2,1
  8003c4:	d0a75015 	stw	r2,-25280(gp)
  8003c8:	00004b06 	br	8004f8 <pedestrian_tlc_timer_isr+0x1d8>
		}
		else if (pedEW){
  8003cc:	d0a75717 	ldw	r2,-25252(gp)
  8003d0:	10001926 	beq	r2,zero,800438 <pedestrian_tlc_timer_isr+0x118>
			//we are at state RED-RED (2), handle EW pedestrians
			if (current_state2 == rr2_2)
  8003d4:	d0a75017 	ldw	r2,-25280(gp)
  8003d8:	10800118 	cmpnei	r2,r2,4
  8003dc:	1000041e 	bne	r2,zero,8003f0 <pedestrian_tlc_timer_isr+0xd0>
				current_state2 += 2;
  8003e0:	d0a75017 	ldw	r2,-25280(gp)
  8003e4:	10800084 	addi	r2,r2,2
  8003e8:	d0a75015 	stw	r2,-25280(gp)
  8003ec:	00004206 	br	8004f8 <pedestrian_tlc_timer_isr+0x1d8>
			//we are at state RED-GREEN, too late to handle EW pedestrians so skip past PED state
			else if (current_state2 == rg_2)
  8003f0:	d0a75017 	ldw	r2,-25280(gp)
  8003f4:	10800158 	cmpnei	r2,r2,5
  8003f8:	1000041e 	bne	r2,zero,80040c <pedestrian_tlc_timer_isr+0xec>
				current_state2 += 2;
  8003fc:	d0a75017 	ldw	r2,-25280(gp)
  800400:	10800084 	addi	r2,r2,2
  800404:	d0a75015 	stw	r2,-25280(gp)
  800408:	00003b06 	br	8004f8 <pedestrian_tlc_timer_isr+0x1d8>
			//we are at state GREEN-RED, cannot handle EW pedestrians here so skip past PED state
			else if (current_state2 == gr_2)
  80040c:	d0a75017 	ldw	r2,-25280(gp)
  800410:	10800058 	cmpnei	r2,r2,1
  800414:	1000041e 	bne	r2,zero,800428 <pedestrian_tlc_timer_isr+0x108>
				current_state2 += 2;
  800418:	d0a75017 	ldw	r2,-25280(gp)
  80041c:	10800084 	addi	r2,r2,2
  800420:	d0a75015 	stw	r2,-25280(gp)
  800424:	00003406 	br	8004f8 <pedestrian_tlc_timer_isr+0x1d8>
			else
				current_state2++;
  800428:	d0a75017 	ldw	r2,-25280(gp)
  80042c:	10800044 	addi	r2,r2,1
  800430:	d0a75015 	stw	r2,-25280(gp)
  800434:	00003006 	br	8004f8 <pedestrian_tlc_timer_isr+0x1d8>
		}
		else if ((pedEW) && (pedNS)){
  800438:	d0a75717 	ldw	r2,-25252(gp)
  80043c:	10001d26 	beq	r2,zero,8004b4 <pedestrian_tlc_timer_isr+0x194>
  800440:	d0a75617 	ldw	r2,-25256(gp)
  800444:	10001b26 	beq	r2,zero,8004b4 <pedestrian_tlc_timer_isr+0x194>
			//handle pedestrians at either of the RED-RED states because
			if ((current_state2 == rr1_2) || (current_state2 == rr2_2))
  800448:	d0a75017 	ldw	r2,-25280(gp)
  80044c:	10000326 	beq	r2,zero,80045c <pedestrian_tlc_timer_isr+0x13c>
  800450:	d0a75017 	ldw	r2,-25280(gp)
  800454:	10800118 	cmpnei	r2,r2,4
  800458:	1000041e 	bne	r2,zero,80046c <pedestrian_tlc_timer_isr+0x14c>
				current_state2 += 2;
  80045c:	d0a75017 	ldw	r2,-25280(gp)
  800460:	10800084 	addi	r2,r2,2
  800464:	d0a75015 	stw	r2,-25280(gp)
			else
				current_state2++;
		}
		else if ((pedEW) && (pedNS)){
			//handle pedestrians at either of the RED-RED states because
			if ((current_state2 == rr1_2) || (current_state2 == rr2_2))
  800468:	00002306 	br	8004f8 <pedestrian_tlc_timer_isr+0x1d8>
				current_state2 += 2;
			//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
			else if (current_state2 == gr_2)
  80046c:	d0a75017 	ldw	r2,-25280(gp)
  800470:	10800058 	cmpnei	r2,r2,1
  800474:	1000041e 	bne	r2,zero,800488 <pedestrian_tlc_timer_isr+0x168>
				current_state2 += 2;
  800478:	d0a75017 	ldw	r2,-25280(gp)
  80047c:	10800084 	addi	r2,r2,2
  800480:	d0a75015 	stw	r2,-25280(gp)
			else
				current_state2++;
		}
		else if ((pedEW) && (pedNS)){
			//handle pedestrians at either of the RED-RED states because
			if ((current_state2 == rr1_2) || (current_state2 == rr2_2))
  800484:	00001c06 	br	8004f8 <pedestrian_tlc_timer_isr+0x1d8>
				current_state2 += 2;
			//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
			else if (current_state2 == gr_2)
				current_state2 += 2;
			//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
			else if (current_state2 == rg_2)
  800488:	d0a75017 	ldw	r2,-25280(gp)
  80048c:	10800158 	cmpnei	r2,r2,5
  800490:	1000041e 	bne	r2,zero,8004a4 <pedestrian_tlc_timer_isr+0x184>
				current_state2 += 2;
  800494:	d0a75017 	ldw	r2,-25280(gp)
  800498:	10800084 	addi	r2,r2,2
  80049c:	d0a75015 	stw	r2,-25280(gp)
			else
				current_state2++;
		}
		else if ((pedEW) && (pedNS)){
			//handle pedestrians at either of the RED-RED states because
			if ((current_state2 == rr1_2) || (current_state2 == rr2_2))
  8004a0:	00001506 	br	8004f8 <pedestrian_tlc_timer_isr+0x1d8>
				current_state2 += 2;
			//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
			else if (current_state2 == rg_2)
				current_state2 += 2;
			else
				current_state2++;
  8004a4:	d0a75017 	ldw	r2,-25280(gp)
  8004a8:	10800044 	addi	r2,r2,1
  8004ac:	d0a75015 	stw	r2,-25280(gp)
			else
				current_state2++;
		}
		else if ((pedEW) && (pedNS)){
			//handle pedestrians at either of the RED-RED states because
			if ((current_state2 == rr1_2) || (current_state2 == rr2_2))
  8004b0:	00001106 	br	8004f8 <pedestrian_tlc_timer_isr+0x1d8>
				current_state2 += 2;
			else
				current_state2++;
		}
		//if no PED interrupt flags, skip past PED states from GREEN-RED and RED-GREEN
		else if (current_state2 == gr_2)
  8004b4:	d0a75017 	ldw	r2,-25280(gp)
  8004b8:	10800058 	cmpnei	r2,r2,1
  8004bc:	1000041e 	bne	r2,zero,8004d0 <pedestrian_tlc_timer_isr+0x1b0>
			current_state2 += 2;
  8004c0:	d0a75017 	ldw	r2,-25280(gp)
  8004c4:	10800084 	addi	r2,r2,2
  8004c8:	d0a75015 	stw	r2,-25280(gp)
  8004cc:	00000a06 	br	8004f8 <pedestrian_tlc_timer_isr+0x1d8>
		else if (current_state2 == rg_2)
  8004d0:	d0a75017 	ldw	r2,-25280(gp)
  8004d4:	10800158 	cmpnei	r2,r2,5
  8004d8:	1000041e 	bne	r2,zero,8004ec <pedestrian_tlc_timer_isr+0x1cc>
			current_state2 += 2;
  8004dc:	d0a75017 	ldw	r2,-25280(gp)
  8004e0:	10800084 	addi	r2,r2,2
  8004e4:	d0a75015 	stw	r2,-25280(gp)
  8004e8:	00000306 	br	8004f8 <pedestrian_tlc_timer_isr+0x1d8>
		else
			current_state2++; //move to the next state if no
  8004ec:	d0a75017 	ldw	r2,-25280(gp)
  8004f0:	10800044 	addi	r2,r2,1
  8004f4:	d0a75015 	stw	r2,-25280(gp)

		//reset the NS/EW pedestrian button interrupt flag when we have changed state (NS/EWHandled = 1)
		if (previous_state2 == grp1_2)
  8004f8:	d0a75117 	ldw	r2,-25276(gp)
  8004fc:	10800098 	cmpnei	r2,r2,2
  800500:	1000021e 	bne	r2,zero,80050c <pedestrian_tlc_timer_isr+0x1ec>
			pedNS = 0;
  800504:	d0275615 	stw	zero,-25256(gp)
  800508:	00000406 	br	80051c <pedestrian_tlc_timer_isr+0x1fc>
		else if (previous_state2 == rgp2_2)
  80050c:	d0a75117 	ldw	r2,-25276(gp)
  800510:	10800198 	cmpnei	r2,r2,6
  800514:	1000011e 	bne	r2,zero,80051c <pedestrian_tlc_timer_isr+0x1fc>
			pedEW = 0;
  800518:	d0275715 	stw	zero,-25252(gp)

		if (current_state2 == buffer_2) //if at final state, loop back to initial state using buffer state
  80051c:	d0a75017 	ldw	r2,-25280(gp)
  800520:	10800218 	cmpnei	r2,r2,8
  800524:	1000011e 	bne	r2,zero,80052c <pedestrian_tlc_timer_isr+0x20c>
			current_state2 = rr1_2;
  800528:	d0275015 	stw	zero,-25280(gp)
		printf("current state ped_timer %d\n", current_state2);
  80052c:	d0a75017 	ldw	r2,-25280(gp)
  800530:	100b883a 	mov	r5,r2
  800534:	01002074 	movhi	r4,129
  800538:	21088504 	addi	r4,r4,8724
  80053c:	0801fe40 	call	801fe4 <printf>

		timer_has_started = 0; //reset timer_started flag
  800540:	d0274c15 	stw	zero,-25296(gp)
	return 0;
  800544:	0005883a 	mov	r2,zero
}
  800548:	e037883a 	mov	sp,fp
  80054c:	dfc00117 	ldw	ra,4(sp)
  800550:	df000017 	ldw	fp,0(sp)
  800554:	dec00204 	addi	sp,sp,8
  800558:	f800283a 	ret

0080055c <pedestrian_button_interrupt>:

void pedestrian_button_interrupt(void* context, alt_u32 id) {
  80055c:	defffb04 	addi	sp,sp,-20
  800560:	dfc00415 	stw	ra,16(sp)
  800564:	df000315 	stw	fp,12(sp)
  800568:	df000304 	addi	fp,sp,12
  80056c:	e13ffe15 	stw	r4,-8(fp)
  800570:	e17fff15 	stw	r5,-4(fp)
	unsigned int uiButtonsValue = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
  800574:	00804434 	movhi	r2,272
  800578:	10842804 	addi	r2,r2,4256
  80057c:	10800037 	ldwio	r2,0(r2)
  800580:	e0bffd15 	stw	r2,-12(fp)
	//unsigned int *somethingelse = (unsigned int*) context;

	if (!(uiButtonsValue & 1<<0)) {
  800584:	e0bffd17 	ldw	r2,-12(fp)
  800588:	1080004c 	andi	r2,r2,1
  80058c:	1000031e 	bne	r2,zero,80059c <pedestrian_button_interrupt+0x40>
		pedNS = 1;
  800590:	00800044 	movi	r2,1
  800594:	d0a75615 	stw	r2,-25256(gp)
  800598:	00000906 	br	8005c0 <pedestrian_button_interrupt+0x64>
	}
	else if (!(uiButtonsValue & 1<<1)) {
  80059c:	e0bffd17 	ldw	r2,-12(fp)
  8005a0:	1080008c 	andi	r2,r2,2
  8005a4:	1000031e 	bne	r2,zero,8005b4 <pedestrian_button_interrupt+0x58>
		pedEW = 1;
  8005a8:	00800044 	movi	r2,1
  8005ac:	d0a75715 	stw	r2,-25252(gp)
  8005b0:	00000306 	br	8005c0 <pedestrian_button_interrupt+0x64>
	}
	else {
		printf("Didn't work");
  8005b4:	01002074 	movhi	r4,129
  8005b8:	21088c04 	addi	r4,r4,8752
  8005bc:	0801fe40 	call	801fe4 <printf>
	}
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
  8005c0:	0007883a 	mov	r3,zero
  8005c4:	00804434 	movhi	r2,272
  8005c8:	10842b04 	addi	r2,r2,4268
  8005cc:	10c00035 	stwio	r3,0(r2)
}
  8005d0:	0001883a 	nop
  8005d4:	e037883a 	mov	sp,fp
  8005d8:	dfc00117 	ldw	ra,4(sp)
  8005dc:	df000017 	ldw	fp,0(sp)
  8005e0:	dec00204 	addi	sp,sp,8
  8005e4:	f800283a 	ret

008005e8 <lcd_set_mode>:

//LCD writing function, pass in the current mode
int lcd_set_mode(int mode){
  8005e8:	defffd04 	addi	sp,sp,-12
  8005ec:	dfc00215 	stw	ra,8(sp)
  8005f0:	df000115 	stw	fp,4(sp)
  8005f4:	df000104 	addi	fp,sp,4
  8005f8:	e13fff15 	stw	r4,-4(fp)
	if (mode != mode_display) {
  8005fc:	d0a00117 	ldw	r2,-32764(gp)
  800600:	e0ffff17 	ldw	r3,-4(fp)
  800604:	18801226 	beq	r3,r2,800650 <lcd_set_mode+0x68>
		if(lcd != NULL){
  800608:	d0a75817 	ldw	r2,-25248(gp)
  80060c:	10001026 	beq	r2,zero,800650 <lcd_set_mode+0x68>
			#define ESC 27
			#define CLEAR_LCD_STRING "[2J"
			fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
  800610:	d0a75817 	ldw	r2,-25248(gp)
  800614:	01c02074 	movhi	r7,129
  800618:	39c88f04 	addi	r7,r7,8764
  80061c:	018006c4 	movi	r6,27
  800620:	01402074 	movhi	r5,129
  800624:	29489004 	addi	r5,r5,8768
  800628:	1009883a 	mov	r4,r2
  80062c:	0800f640 	call	800f64 <fprintf>
			fprintf(lcd, "CURRENT MODE: %d\n", mode);
  800630:	d0a75817 	ldw	r2,-25248(gp)
  800634:	e1bfff17 	ldw	r6,-4(fp)
  800638:	01402074 	movhi	r5,129
  80063c:	29489204 	addi	r5,r5,8776
  800640:	1009883a 	mov	r4,r2
  800644:	0800f640 	call	800f64 <fprintf>
			mode_display = mode; //set mode display state to prevent LCD flickering
  800648:	e0bfff17 	ldw	r2,-4(fp)
  80064c:	d0a00115 	stw	r2,-32764(gp)
		}
	}
	return 0;
  800650:	0005883a 	mov	r2,zero
}
  800654:	e037883a 	mov	sp,fp
  800658:	dfc00117 	ldw	ra,4(sp)
  80065c:	df000017 	ldw	fp,0(sp)
  800660:	dec00204 	addi	sp,sp,8
  800664:	f800283a 	ret

00800668 <simple_tlc>:

// Mode 1
// Simple controller with automatic lights
int simple_tlc(){
  800668:	defffd04 	addi	sp,sp,-12
  80066c:	dfc00215 	stw	ra,8(sp)
  800670:	df000115 	stw	fp,4(sp)
  800674:	df000104 	addi	fp,sp,4
	void* timerContext = 0;
  800678:	e03fff15 	stw	zero,-4(fp)
	//loop through all states, starting timer on current state and setting outputs
	if (current_state1 == rr1_1){
  80067c:	d0a74e17 	ldw	r2,-25288(gp)
  800680:	1000101e 	bne	r2,zero,8006c4 <simple_tlc+0x5c>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100100); //turn RED-RED on
  800684:	00c00904 	movi	r3,36
  800688:	00804434 	movhi	r2,272
  80068c:	10841c04 	addi	r2,r2,4208
  800690:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800694:	d0a74c17 	ldw	r2,-25296(gp)
  800698:	1000681e 	bne	r2,zero,80083c <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, 500, simple_tlc_timer_isr, timerContext);
  80069c:	e1ffff17 	ldw	r7,-4(fp)
  8006a0:	01802034 	movhi	r6,128
  8006a4:	3180a404 	addi	r6,r6,656
  8006a8:	01407d04 	movi	r5,500
  8006ac:	01002074 	movhi	r4,129
  8006b0:	21189304 	addi	r4,r4,25164
  8006b4:	080df500 	call	80df50 <alt_alarm_start>
			timer_has_started = 1;
  8006b8:	00800044 	movi	r2,1
  8006bc:	d0a74c15 	stw	r2,-25296(gp)
  8006c0:	00005e06 	br	80083c <simple_tlc+0x1d4>
		}
	}
	else if (current_state1 == gr_1){
  8006c4:	d0a74e17 	ldw	r2,-25288(gp)
  8006c8:	10800058 	cmpnei	r2,r2,1
  8006cc:	1000101e 	bne	r2,zero,800710 <simple_tlc+0xa8>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100001); //turn GREEN-RED on
  8006d0:	00c00844 	movi	r3,33
  8006d4:	00804434 	movhi	r2,272
  8006d8:	10841c04 	addi	r2,r2,4208
  8006dc:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  8006e0:	d0a74c17 	ldw	r2,-25296(gp)
  8006e4:	1000551e 	bne	r2,zero,80083c <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, 6000, simple_tlc_timer_isr, timerContext);
  8006e8:	e1ffff17 	ldw	r7,-4(fp)
  8006ec:	01802034 	movhi	r6,128
  8006f0:	3180a404 	addi	r6,r6,656
  8006f4:	0145dc04 	movi	r5,6000
  8006f8:	01002074 	movhi	r4,129
  8006fc:	21189304 	addi	r4,r4,25164
  800700:	080df500 	call	80df50 <alt_alarm_start>
			timer_has_started = 1;
  800704:	00800044 	movi	r2,1
  800708:	d0a74c15 	stw	r2,-25296(gp)
  80070c:	00004b06 	br	80083c <simple_tlc+0x1d4>
		}
	}
	else if (current_state1 == yr_1){
  800710:	d0a74e17 	ldw	r2,-25288(gp)
  800714:	10800098 	cmpnei	r2,r2,2
  800718:	1000101e 	bne	r2,zero,80075c <simple_tlc+0xf4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100010); //turn YELLOW-RED on
  80071c:	00c00884 	movi	r3,34
  800720:	00804434 	movhi	r2,272
  800724:	10841c04 	addi	r2,r2,4208
  800728:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  80072c:	d0a74c17 	ldw	r2,-25296(gp)
  800730:	1000421e 	bne	r2,zero,80083c <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, 2000, simple_tlc_timer_isr, timerContext);
  800734:	e1ffff17 	ldw	r7,-4(fp)
  800738:	01802034 	movhi	r6,128
  80073c:	3180a404 	addi	r6,r6,656
  800740:	0141f404 	movi	r5,2000
  800744:	01002074 	movhi	r4,129
  800748:	21189304 	addi	r4,r4,25164
  80074c:	080df500 	call	80df50 <alt_alarm_start>
			timer_has_started = 1;
  800750:	00800044 	movi	r2,1
  800754:	d0a74c15 	stw	r2,-25296(gp)
  800758:	00003806 	br	80083c <simple_tlc+0x1d4>
		}
	}
	else if (current_state1 == rr2_1){
  80075c:	d0a74e17 	ldw	r2,-25288(gp)
  800760:	108000d8 	cmpnei	r2,r2,3
  800764:	1000101e 	bne	r2,zero,8007a8 <simple_tlc+0x140>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100100); //turn RED-RED on
  800768:	00c00904 	movi	r3,36
  80076c:	00804434 	movhi	r2,272
  800770:	10841c04 	addi	r2,r2,4208
  800774:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800778:	d0a74c17 	ldw	r2,-25296(gp)
  80077c:	10002f1e 	bne	r2,zero,80083c <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, 500, simple_tlc_timer_isr, timerContext);
  800780:	e1ffff17 	ldw	r7,-4(fp)
  800784:	01802034 	movhi	r6,128
  800788:	3180a404 	addi	r6,r6,656
  80078c:	01407d04 	movi	r5,500
  800790:	01002074 	movhi	r4,129
  800794:	21189304 	addi	r4,r4,25164
  800798:	080df500 	call	80df50 <alt_alarm_start>
			timer_has_started = 1;
  80079c:	00800044 	movi	r2,1
  8007a0:	d0a74c15 	stw	r2,-25296(gp)
  8007a4:	00002506 	br	80083c <simple_tlc+0x1d4>
		}
	}
	else if (current_state1 == rg_1){
  8007a8:	d0a74e17 	ldw	r2,-25288(gp)
  8007ac:	10800118 	cmpnei	r2,r2,4
  8007b0:	1000101e 	bne	r2,zero,8007f4 <simple_tlc+0x18c>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b001100); //turn RED-GREEN on
  8007b4:	00c00304 	movi	r3,12
  8007b8:	00804434 	movhi	r2,272
  8007bc:	10841c04 	addi	r2,r2,4208
  8007c0:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  8007c4:	d0a74c17 	ldw	r2,-25296(gp)
  8007c8:	10001c1e 	bne	r2,zero,80083c <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, 6000, simple_tlc_timer_isr, timerContext);
  8007cc:	e1ffff17 	ldw	r7,-4(fp)
  8007d0:	01802034 	movhi	r6,128
  8007d4:	3180a404 	addi	r6,r6,656
  8007d8:	0145dc04 	movi	r5,6000
  8007dc:	01002074 	movhi	r4,129
  8007e0:	21189304 	addi	r4,r4,25164
  8007e4:	080df500 	call	80df50 <alt_alarm_start>
			timer_has_started = 1;
  8007e8:	00800044 	movi	r2,1
  8007ec:	d0a74c15 	stw	r2,-25296(gp)
  8007f0:	00001206 	br	80083c <simple_tlc+0x1d4>
		}
	}
	else if (current_state1 == ry_1){
  8007f4:	d0a74e17 	ldw	r2,-25288(gp)
  8007f8:	10800158 	cmpnei	r2,r2,5
  8007fc:	10000f1e 	bne	r2,zero,80083c <simple_tlc+0x1d4>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b010100); //turn RED-YELLOW on
  800800:	00c00504 	movi	r3,20
  800804:	00804434 	movhi	r2,272
  800808:	10841c04 	addi	r2,r2,4208
  80080c:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800810:	d0a74c17 	ldw	r2,-25296(gp)
  800814:	1000091e 	bne	r2,zero,80083c <simple_tlc+0x1d4>
			alt_alarm_start(&timer_simple, 2000, simple_tlc_timer_isr, timerContext);
  800818:	e1ffff17 	ldw	r7,-4(fp)
  80081c:	01802034 	movhi	r6,128
  800820:	3180a404 	addi	r6,r6,656
  800824:	0141f404 	movi	r5,2000
  800828:	01002074 	movhi	r4,129
  80082c:	21189304 	addi	r4,r4,25164
  800830:	080df500 	call	80df50 <alt_alarm_start>
			timer_has_started = 1;
  800834:	00800044 	movi	r2,1
  800838:	d0a74c15 	stw	r2,-25296(gp)
		}
	}
	return 0;
  80083c:	0005883a 	mov	r2,zero
}
  800840:	e037883a 	mov	sp,fp
  800844:	dfc00117 	ldw	ra,4(sp)
  800848:	df000017 	ldw	fp,0(sp)
  80084c:	dec00204 	addi	sp,sp,8
  800850:	f800283a 	ret

00800854 <pedestrian_tlc>:

// Mode 2
int pedestrian_tlc() {
  800854:	defffd04 	addi	sp,sp,-12
  800858:	dfc00215 	stw	ra,8(sp)
  80085c:	df000115 	stw	fp,4(sp)
  800860:	df000104 	addi	fp,sp,4
	void* timerContext = 0;
  800864:	e03fff15 	stw	zero,-4(fp)
	//loop through all states, starting timer on current state and setting outputs
	if (current_state2 == rr1_2){
  800868:	d0a75017 	ldw	r2,-25280(gp)
  80086c:	1000101e 	bne	r2,zero,8008b0 <pedestrian_tlc+0x5c>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
  800870:	00c00904 	movi	r3,36
  800874:	00804434 	movhi	r2,272
  800878:	10841c04 	addi	r2,r2,4208
  80087c:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800880:	d0a74c17 	ldw	r2,-25296(gp)
  800884:	10008e1e 	bne	r2,zero,800ac0 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, 500, pedestrian_tlc_timer_isr, timerContext);
  800888:	e1ffff17 	ldw	r7,-4(fp)
  80088c:	01802034 	movhi	r6,128
  800890:	3180c804 	addi	r6,r6,800
  800894:	01407d04 	movi	r5,500
  800898:	01002074 	movhi	r4,129
  80089c:	21189304 	addi	r4,r4,25164
  8008a0:	080df500 	call	80df50 <alt_alarm_start>
			timer_has_started = 1;
  8008a4:	00800044 	movi	r2,1
  8008a8:	d0a74c15 	stw	r2,-25296(gp)
  8008ac:	00008406 	br	800ac0 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == gr_2){
  8008b0:	d0a75017 	ldw	r2,-25280(gp)
  8008b4:	10800058 	cmpnei	r2,r2,1
  8008b8:	1000101e 	bne	r2,zero,8008fc <pedestrian_tlc+0xa8>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100001); //turn GREEN-RED on
  8008bc:	00c00844 	movi	r3,33
  8008c0:	00804434 	movhi	r2,272
  8008c4:	10841c04 	addi	r2,r2,4208
  8008c8:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  8008cc:	d0a74c17 	ldw	r2,-25296(gp)
  8008d0:	10007b1e 	bne	r2,zero,800ac0 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, 6000, pedestrian_tlc_timer_isr, timerContext);
  8008d4:	e1ffff17 	ldw	r7,-4(fp)
  8008d8:	01802034 	movhi	r6,128
  8008dc:	3180c804 	addi	r6,r6,800
  8008e0:	0145dc04 	movi	r5,6000
  8008e4:	01002074 	movhi	r4,129
  8008e8:	21189304 	addi	r4,r4,25164
  8008ec:	080df500 	call	80df50 <alt_alarm_start>
			timer_has_started = 1;
  8008f0:	00800044 	movi	r2,1
  8008f4:	d0a74c15 	stw	r2,-25296(gp)
  8008f8:	00007106 	br	800ac0 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == grp1_2){
  8008fc:	d0a75017 	ldw	r2,-25280(gp)
  800900:	10800098 	cmpnei	r2,r2,2
  800904:	1000101e 	bne	r2,zero,800948 <pedestrian_tlc+0xf4>
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b01100001); //turn GREEN-RED and PEDNS on
  800908:	00c01844 	movi	r3,97
  80090c:	00804434 	movhi	r2,272
  800910:	10841c04 	addi	r2,r2,4208
  800914:	10c00035 	stwio	r3,0(r2)
			if (!(timer_has_started)){
  800918:	d0a74c17 	ldw	r2,-25296(gp)
  80091c:	1000681e 	bne	r2,zero,800ac0 <pedestrian_tlc+0x26c>
				alt_alarm_start(&timer_simple, 6000, pedestrian_tlc_timer_isr, timerContext);
  800920:	e1ffff17 	ldw	r7,-4(fp)
  800924:	01802034 	movhi	r6,128
  800928:	3180c804 	addi	r6,r6,800
  80092c:	0145dc04 	movi	r5,6000
  800930:	01002074 	movhi	r4,129
  800934:	21189304 	addi	r4,r4,25164
  800938:	080df500 	call	80df50 <alt_alarm_start>
				timer_has_started = 1;
  80093c:	00800044 	movi	r2,1
  800940:	d0a74c15 	stw	r2,-25296(gp)
  800944:	00005e06 	br	800ac0 <pedestrian_tlc+0x26c>
			}
	}
	else if (current_state2 == yr_2){
  800948:	d0a75017 	ldw	r2,-25280(gp)
  80094c:	108000d8 	cmpnei	r2,r2,3
  800950:	1000101e 	bne	r2,zero,800994 <pedestrian_tlc+0x140>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100010); //turn YELLOW-RED on
  800954:	00c00884 	movi	r3,34
  800958:	00804434 	movhi	r2,272
  80095c:	10841c04 	addi	r2,r2,4208
  800960:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800964:	d0a74c17 	ldw	r2,-25296(gp)
  800968:	1000551e 	bne	r2,zero,800ac0 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, 2000, pedestrian_tlc_timer_isr, timerContext);
  80096c:	e1ffff17 	ldw	r7,-4(fp)
  800970:	01802034 	movhi	r6,128
  800974:	3180c804 	addi	r6,r6,800
  800978:	0141f404 	movi	r5,2000
  80097c:	01002074 	movhi	r4,129
  800980:	21189304 	addi	r4,r4,25164
  800984:	080df500 	call	80df50 <alt_alarm_start>
			timer_has_started = 1;
  800988:	00800044 	movi	r2,1
  80098c:	d0a74c15 	stw	r2,-25296(gp)
  800990:	00004b06 	br	800ac0 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == rr2_2){
  800994:	d0a75017 	ldw	r2,-25280(gp)
  800998:	10800118 	cmpnei	r2,r2,4
  80099c:	1000101e 	bne	r2,zero,8009e0 <pedestrian_tlc+0x18c>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
  8009a0:	00c00904 	movi	r3,36
  8009a4:	00804434 	movhi	r2,272
  8009a8:	10841c04 	addi	r2,r2,4208
  8009ac:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  8009b0:	d0a74c17 	ldw	r2,-25296(gp)
  8009b4:	1000421e 	bne	r2,zero,800ac0 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, 500, pedestrian_tlc_timer_isr, timerContext);
  8009b8:	e1ffff17 	ldw	r7,-4(fp)
  8009bc:	01802034 	movhi	r6,128
  8009c0:	3180c804 	addi	r6,r6,800
  8009c4:	01407d04 	movi	r5,500
  8009c8:	01002074 	movhi	r4,129
  8009cc:	21189304 	addi	r4,r4,25164
  8009d0:	080df500 	call	80df50 <alt_alarm_start>
			timer_has_started = 1;
  8009d4:	00800044 	movi	r2,1
  8009d8:	d0a74c15 	stw	r2,-25296(gp)
  8009dc:	00003806 	br	800ac0 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == rg_2){
  8009e0:	d0a75017 	ldw	r2,-25280(gp)
  8009e4:	10800158 	cmpnei	r2,r2,5
  8009e8:	1000101e 	bne	r2,zero,800a2c <pedestrian_tlc+0x1d8>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00001100); //turn RED-GREEN on
  8009ec:	00c00304 	movi	r3,12
  8009f0:	00804434 	movhi	r2,272
  8009f4:	10841c04 	addi	r2,r2,4208
  8009f8:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  8009fc:	d0a74c17 	ldw	r2,-25296(gp)
  800a00:	10002f1e 	bne	r2,zero,800ac0 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, 6000, pedestrian_tlc_timer_isr, timerContext);
  800a04:	e1ffff17 	ldw	r7,-4(fp)
  800a08:	01802034 	movhi	r6,128
  800a0c:	3180c804 	addi	r6,r6,800
  800a10:	0145dc04 	movi	r5,6000
  800a14:	01002074 	movhi	r4,129
  800a18:	21189304 	addi	r4,r4,25164
  800a1c:	080df500 	call	80df50 <alt_alarm_start>
			timer_has_started = 1;
  800a20:	00800044 	movi	r2,1
  800a24:	d0a74c15 	stw	r2,-25296(gp)
  800a28:	00002506 	br	800ac0 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == rgp2_2){
  800a2c:	d0a75017 	ldw	r2,-25280(gp)
  800a30:	10800198 	cmpnei	r2,r2,6
  800a34:	1000101e 	bne	r2,zero,800a78 <pedestrian_tlc+0x224>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b10001100); //turn RED-GREEN and PEDEW on
  800a38:	00c02304 	movi	r3,140
  800a3c:	00804434 	movhi	r2,272
  800a40:	10841c04 	addi	r2,r2,4208
  800a44:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800a48:	d0a74c17 	ldw	r2,-25296(gp)
  800a4c:	10001c1e 	bne	r2,zero,800ac0 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, 6000, pedestrian_tlc_timer_isr, timerContext);
  800a50:	e1ffff17 	ldw	r7,-4(fp)
  800a54:	01802034 	movhi	r6,128
  800a58:	3180c804 	addi	r6,r6,800
  800a5c:	0145dc04 	movi	r5,6000
  800a60:	01002074 	movhi	r4,129
  800a64:	21189304 	addi	r4,r4,25164
  800a68:	080df500 	call	80df50 <alt_alarm_start>
			timer_has_started = 1;
  800a6c:	00800044 	movi	r2,1
  800a70:	d0a74c15 	stw	r2,-25296(gp)
  800a74:	00001206 	br	800ac0 <pedestrian_tlc+0x26c>
		}
	}
	else if (current_state2 == ry_2){
  800a78:	d0a75017 	ldw	r2,-25280(gp)
  800a7c:	108001d8 	cmpnei	r2,r2,7
  800a80:	10000f1e 	bne	r2,zero,800ac0 <pedestrian_tlc+0x26c>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00010100); //turn RED-YELLOW on
  800a84:	00c00504 	movi	r3,20
  800a88:	00804434 	movhi	r2,272
  800a8c:	10841c04 	addi	r2,r2,4208
  800a90:	10c00035 	stwio	r3,0(r2)
		if (!(timer_has_started)){
  800a94:	d0a74c17 	ldw	r2,-25296(gp)
  800a98:	1000091e 	bne	r2,zero,800ac0 <pedestrian_tlc+0x26c>
			alt_alarm_start(&timer_simple, 2000, pedestrian_tlc_timer_isr, timerContext);
  800a9c:	e1ffff17 	ldw	r7,-4(fp)
  800aa0:	01802034 	movhi	r6,128
  800aa4:	3180c804 	addi	r6,r6,800
  800aa8:	0141f404 	movi	r5,2000
  800aac:	01002074 	movhi	r4,129
  800ab0:	21189304 	addi	r4,r4,25164
  800ab4:	080df500 	call	80df50 <alt_alarm_start>
			timer_has_started = 1;
  800ab8:	00800044 	movi	r2,1
  800abc:	d0a74c15 	stw	r2,-25296(gp)
		}
	}

	return 0;
  800ac0:	0005883a 	mov	r2,zero
}
  800ac4:	e037883a 	mov	sp,fp
  800ac8:	dfc00117 	ldw	ra,4(sp)
  800acc:	df000017 	ldw	fp,0(sp)
  800ad0:	dec00204 	addi	sp,sp,8
  800ad4:	f800283a 	ret

00800ad8 <configurable_tlc>:

// Mode 3
int configurable_tlc(){}
  800ad8:	deffff04 	addi	sp,sp,-4
  800adc:	df000015 	stw	fp,0(sp)
  800ae0:	d839883a 	mov	fp,sp
  800ae4:	0001883a 	nop
  800ae8:	e037883a 	mov	sp,fp
  800aec:	df000017 	ldw	fp,0(sp)
  800af0:	dec00104 	addi	sp,sp,4
  800af4:	f800283a 	ret

00800af8 <camera_tlc>:
int camera_tlc(){}
  800af8:	deffff04 	addi	sp,sp,-4
  800afc:	df000015 	stw	fp,0(sp)
  800b00:	d839883a 	mov	fp,sp
  800b04:	0001883a 	nop
  800b08:	e037883a 	mov	sp,fp
  800b0c:	df000017 	ldw	fp,0(sp)
  800b10:	dec00104 	addi	sp,sp,4
  800b14:	f800283a 	ret

00800b18 <main>:
		printf("Didn't work");
	}
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
}*/

int main() {
  800b18:	defffc04 	addi	sp,sp,-16
  800b1c:	dfc00315 	stw	ra,12(sp)
  800b20:	df000215 	stw	fp,8(sp)
  800b24:	df000204 	addi	fp,sp,8
	unsigned int switch_value = 0;
  800b28:	e03ffe15 	stw	zero,-8(fp)
	void* context_going_to_be_passed = 0;
  800b2c:	e03fff15 	stw	zero,-4(fp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
  800b30:	0007883a 	mov	r3,zero
  800b34:	00804434 	movhi	r2,272
  800b38:	10842b04 	addi	r2,r2,4268
  800b3c:	10c00035 	stwio	r3,0(r2)
	//enable interrupts for all buttons
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0x3);
  800b40:	00c000c4 	movi	r3,3
  800b44:	00804434 	movhi	r2,272
  800b48:	10842a04 	addi	r2,r2,4264
  800b4c:	10c00035 	stwio	r3,0(r2)
	//register the button interrupt ISR
	alt_irq_register(BUTTONS_IRQ, context_going_to_be_passed, pedestrian_button_interrupt);
  800b50:	01802034 	movhi	r6,128
  800b54:	31815704 	addi	r6,r6,1372
  800b58:	e17fff17 	ldw	r5,-4(fp)
  800b5c:	01000104 	movi	r4,4
  800b60:	080e2a00 	call	80e2a0 <alt_irq_register>
	//turn on the LCD
	lcd = fopen(LCD_NAME, "w");
  800b64:	01402074 	movhi	r5,129
  800b68:	29489704 	addi	r5,r5,8796
  800b6c:	01002074 	movhi	r4,129
  800b70:	21089804 	addi	r4,r4,8800
  800b74:	0800f240 	call	800f24 <fopen>
  800b78:	d0a75815 	stw	r2,-25248(gp)

	while(1) {
		//read switch value and bitmask to check specific switches (descending priority)
		switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  800b7c:	00804434 	movhi	r2,272
  800b80:	10842404 	addi	r2,r2,4240
  800b84:	10800037 	ldwio	r2,0(r2)
  800b88:	e0bffe15 	stw	r2,-8(fp)
		//set mode request depending on switch configuration
		//priority encoded (descending order, i.e. mode 4 is highest and mode 1 is lowest)
		if ((1<<3 & switch_value)) {
  800b8c:	e0bffe17 	ldw	r2,-8(fp)
  800b90:	1080020c 	andi	r2,r2,8
  800b94:	10000326 	beq	r2,zero,800ba4 <main+0x8c>
			mode_request = 4;
  800b98:	00800104 	movi	r2,4
  800b9c:	d0a74d15 	stw	r2,-25292(gp)
  800ba0:	00001306 	br	800bf0 <main+0xd8>
		}
		else if ((1<<2 & switch_value)) {
  800ba4:	e0bffe17 	ldw	r2,-8(fp)
  800ba8:	1080010c 	andi	r2,r2,4
  800bac:	10000326 	beq	r2,zero,800bbc <main+0xa4>
			mode_request = 3;
  800bb0:	008000c4 	movi	r2,3
  800bb4:	d0a74d15 	stw	r2,-25292(gp)
  800bb8:	00000d06 	br	800bf0 <main+0xd8>
		}
		else if ((1<<1 & switch_value)) {
  800bbc:	e0bffe17 	ldw	r2,-8(fp)
  800bc0:	1080008c 	andi	r2,r2,2
  800bc4:	10000326 	beq	r2,zero,800bd4 <main+0xbc>
			mode_request = 2;
  800bc8:	00800084 	movi	r2,2
  800bcc:	d0a74d15 	stw	r2,-25292(gp)
  800bd0:	00000706 	br	800bf0 <main+0xd8>
		}
		else if ((1<<0 & switch_value)) {
  800bd4:	e0bffe17 	ldw	r2,-8(fp)
  800bd8:	1080004c 	andi	r2,r2,1
  800bdc:	10000326 	beq	r2,zero,800bec <main+0xd4>
			mode_request = 1;
  800be0:	00800044 	movi	r2,1
  800be4:	d0a74d15 	stw	r2,-25292(gp)
  800be8:	00000106 	br	800bf0 <main+0xd8>
		}
		else
			mode_request = 0;
  800bec:	d0274d15 	stw	zero,-25292(gp)

		//if there is a new mode request:
		//check if we are at a safe state (corresponding to the mode we are in)
		//if safe, then change mode (and make sure to reset all states and interrupt flags)
		if (current_mode != mode_request) {
  800bf0:	d0e00017 	ldw	r3,-32768(gp)
  800bf4:	d0a74d17 	ldw	r2,-25292(gp)
  800bf8:	18806926 	beq	r3,r2,800da0 <main+0x288>
			switch(current_mode){
  800bfc:	d0a00017 	ldw	r2,-32768(gp)
  800c00:	10c000a0 	cmpeqi	r3,r2,2
  800c04:	18001c1e 	bne	r3,zero,800c78 <main+0x160>
  800c08:	10c000c8 	cmpgei	r3,r2,3
  800c0c:	1800031e 	bne	r3,zero,800c1c <main+0x104>
  800c10:	10800060 	cmpeqi	r2,r2,1
  800c14:	1000061e 	bne	r2,zero,800c30 <main+0x118>
  800c18:	00004d06 	br	800d50 <main+0x238>
  800c1c:	10c000e0 	cmpeqi	r3,r2,3
  800c20:	1800271e 	bne	r3,zero,800cc0 <main+0x1a8>
  800c24:	10800120 	cmpeqi	r2,r2,4
  800c28:	1000371e 	bne	r2,zero,800d08 <main+0x1f0>
  800c2c:	00004806 	br	800d50 <main+0x238>
			case 1:
				if ((current_state1 == rr1_1) || (current_state1 == rr2_1)){
  800c30:	d0a74e17 	ldw	r2,-25288(gp)
  800c34:	10000326 	beq	r2,zero,800c44 <main+0x12c>
  800c38:	d0a74e17 	ldw	r2,-25288(gp)
  800c3c:	108000d8 	cmpnei	r2,r2,3
  800c40:	1000501e 	bne	r2,zero,800d84 <main+0x26c>
					current_mode = mode_request;
  800c44:	d0a74d17 	ldw	r2,-25292(gp)
  800c48:	d0a00015 	stw	r2,-32768(gp)
					current_state1 = 0;
  800c4c:	d0274e15 	stw	zero,-25288(gp)
					current_state2 = 0;
  800c50:	d0275015 	stw	zero,-25280(gp)
					current_state3 = 0;
  800c54:	d0275215 	stw	zero,-25272(gp)
					current_state4 = 0;
  800c58:	d0275415 	stw	zero,-25264(gp)
					previous_state1 = 0;
  800c5c:	d0274f15 	stw	zero,-25284(gp)
					previous_state2 = 0;
  800c60:	d0275115 	stw	zero,-25276(gp)
					previous_state3 = 0;
  800c64:	d0275315 	stw	zero,-25268(gp)
					previous_state4 = 0;
  800c68:	d0275515 	stw	zero,-25260(gp)
					pedNS = 0;
  800c6c:	d0275615 	stw	zero,-25256(gp)
					pedEW = 0;
  800c70:	d0275715 	stw	zero,-25252(gp)
				}
				break;
  800c74:	00004306 	br	800d84 <main+0x26c>
			case 2:
				if ((current_state2 == rr1_2) || (current_state2 == rr2_2)){
  800c78:	d0a75017 	ldw	r2,-25280(gp)
  800c7c:	10000326 	beq	r2,zero,800c8c <main+0x174>
  800c80:	d0a75017 	ldw	r2,-25280(gp)
  800c84:	10800118 	cmpnei	r2,r2,4
  800c88:	1000401e 	bne	r2,zero,800d8c <main+0x274>
					current_mode = mode_request;
  800c8c:	d0a74d17 	ldw	r2,-25292(gp)
  800c90:	d0a00015 	stw	r2,-32768(gp)
					current_state1 = 0;
  800c94:	d0274e15 	stw	zero,-25288(gp)
					current_state2 = 0;
  800c98:	d0275015 	stw	zero,-25280(gp)
					current_state3 = 0;
  800c9c:	d0275215 	stw	zero,-25272(gp)
					current_state4 = 0;
  800ca0:	d0275415 	stw	zero,-25264(gp)
					previous_state1 = 0;
  800ca4:	d0274f15 	stw	zero,-25284(gp)
					previous_state2 = 0;
  800ca8:	d0275115 	stw	zero,-25276(gp)
					previous_state3 = 0;
  800cac:	d0275315 	stw	zero,-25268(gp)
					previous_state4 = 0;
  800cb0:	d0275515 	stw	zero,-25260(gp)
					pedNS = 0;
  800cb4:	d0275615 	stw	zero,-25256(gp)
					pedEW = 0;
  800cb8:	d0275715 	stw	zero,-25252(gp)
				}
				break;
  800cbc:	00003306 	br	800d8c <main+0x274>
			case 3:
				if ((current_state3 == rr1_3) || (current_state3 == rr2_3)){
  800cc0:	d0a75217 	ldw	r2,-25272(gp)
  800cc4:	10000326 	beq	r2,zero,800cd4 <main+0x1bc>
  800cc8:	d0a75217 	ldw	r2,-25272(gp)
  800ccc:	10800118 	cmpnei	r2,r2,4
  800cd0:	1000301e 	bne	r2,zero,800d94 <main+0x27c>
					current_mode = mode_request;
  800cd4:	d0a74d17 	ldw	r2,-25292(gp)
  800cd8:	d0a00015 	stw	r2,-32768(gp)
					current_state1 = 0;
  800cdc:	d0274e15 	stw	zero,-25288(gp)
					current_state2 = 0;
  800ce0:	d0275015 	stw	zero,-25280(gp)
					current_state3 = 0;
  800ce4:	d0275215 	stw	zero,-25272(gp)
					current_state4 = 0;
  800ce8:	d0275415 	stw	zero,-25264(gp)
					previous_state1 = 0;
  800cec:	d0274f15 	stw	zero,-25284(gp)
					previous_state2 = 0;
  800cf0:	d0275115 	stw	zero,-25276(gp)
					previous_state3 = 0;
  800cf4:	d0275315 	stw	zero,-25268(gp)
					previous_state4 = 0;
  800cf8:	d0275515 	stw	zero,-25260(gp)
					pedNS = 0;
  800cfc:	d0275615 	stw	zero,-25256(gp)
					pedEW = 0;
  800d00:	d0275715 	stw	zero,-25252(gp)
				}
				break;
  800d04:	00002306 	br	800d94 <main+0x27c>
			case 4:
				if ((current_state4 == rr1_4) || (current_state4 == rr2_4)){
  800d08:	d0a75417 	ldw	r2,-25264(gp)
  800d0c:	10000326 	beq	r2,zero,800d1c <main+0x204>
  800d10:	d0a75417 	ldw	r2,-25264(gp)
  800d14:	10800118 	cmpnei	r2,r2,4
  800d18:	1000201e 	bne	r2,zero,800d9c <main+0x284>
					current_mode = mode_request;
  800d1c:	d0a74d17 	ldw	r2,-25292(gp)
  800d20:	d0a00015 	stw	r2,-32768(gp)
					current_state1 = 0;
  800d24:	d0274e15 	stw	zero,-25288(gp)
					current_state2 = 0;
  800d28:	d0275015 	stw	zero,-25280(gp)
					current_state3 = 0;
  800d2c:	d0275215 	stw	zero,-25272(gp)
					current_state4 = 0;
  800d30:	d0275415 	stw	zero,-25264(gp)
					previous_state1 = 0;
  800d34:	d0274f15 	stw	zero,-25284(gp)
					previous_state2 = 0;
  800d38:	d0275115 	stw	zero,-25276(gp)
					previous_state3 = 0;
  800d3c:	d0275315 	stw	zero,-25268(gp)
					previous_state4 = 0;
  800d40:	d0275515 	stw	zero,-25260(gp)
					pedNS = 0;
  800d44:	d0275615 	stw	zero,-25256(gp)
					pedEW = 0;
  800d48:	d0275715 	stw	zero,-25252(gp)
				}
				break;
  800d4c:	00001306 	br	800d9c <main+0x284>
			default: //starting state
				current_mode = mode_request;
  800d50:	d0a74d17 	ldw	r2,-25292(gp)
  800d54:	d0a00015 	stw	r2,-32768(gp)
				current_state1 = 0;
  800d58:	d0274e15 	stw	zero,-25288(gp)
				current_state2 = 0;
  800d5c:	d0275015 	stw	zero,-25280(gp)
				current_state3 = 0;
  800d60:	d0275215 	stw	zero,-25272(gp)
				current_state4 = 0;
  800d64:	d0275415 	stw	zero,-25264(gp)
				previous_state1 = 0;
  800d68:	d0274f15 	stw	zero,-25284(gp)
				previous_state2 = 0;
  800d6c:	d0275115 	stw	zero,-25276(gp)
				previous_state3 = 0;
  800d70:	d0275315 	stw	zero,-25268(gp)
				previous_state4 = 0;
  800d74:	d0275515 	stw	zero,-25260(gp)
				pedNS = 0;
  800d78:	d0275615 	stw	zero,-25256(gp)
				pedEW = 0;
  800d7c:	d0275715 	stw	zero,-25252(gp)
  800d80:	00000706 	br	800da0 <main+0x288>
					previous_state3 = 0;
					previous_state4 = 0;
					pedNS = 0;
					pedEW = 0;
				}
				break;
  800d84:	0001883a 	nop
  800d88:	00000506 	br	800da0 <main+0x288>
					previous_state3 = 0;
					previous_state4 = 0;
					pedNS = 0;
					pedEW = 0;
				}
				break;
  800d8c:	0001883a 	nop
  800d90:	00000306 	br	800da0 <main+0x288>
					previous_state3 = 0;
					previous_state4 = 0;
					pedNS = 0;
					pedEW = 0;
				}
				break;
  800d94:	0001883a 	nop
  800d98:	00000106 	br	800da0 <main+0x288>
					previous_state3 = 0;
					previous_state4 = 0;
					pedNS = 0;
					pedEW = 0;
				}
				break;
  800d9c:	0001883a 	nop
				pedEW = 0;
			}
		}


		switch(current_mode){
  800da0:	d0a00017 	ldw	r2,-32768(gp)
  800da4:	10c000a0 	cmpeqi	r3,r2,2
  800da8:	18000e1e 	bne	r3,zero,800de4 <main+0x2cc>
  800dac:	10c000c8 	cmpgei	r3,r2,3
  800db0:	1800031e 	bne	r3,zero,800dc0 <main+0x2a8>
  800db4:	10800060 	cmpeqi	r2,r2,1
  800db8:	1000061e 	bne	r2,zero,800dd4 <main+0x2bc>
  800dbc:	00001506 	br	800e14 <main+0x2fc>
  800dc0:	10c000e0 	cmpeqi	r3,r2,3
  800dc4:	18000b1e 	bne	r3,zero,800df4 <main+0x2dc>
  800dc8:	10800120 	cmpeqi	r2,r2,4
  800dcc:	10000d1e 	bne	r2,zero,800e04 <main+0x2ec>
  800dd0:	00001006 	br	800e14 <main+0x2fc>
		case 1:
			simple_tlc();
  800dd4:	08006680 	call	800668 <simple_tlc>
			lcd_set_mode(1);
  800dd8:	01000044 	movi	r4,1
  800ddc:	08005e80 	call	8005e8 <lcd_set_mode>
			break;
  800de0:	00001206 	br	800e2c <main+0x314>
		case 2:
			pedestrian_tlc();
  800de4:	08008540 	call	800854 <pedestrian_tlc>
			lcd_set_mode(2);
  800de8:	01000084 	movi	r4,2
  800dec:	08005e80 	call	8005e8 <lcd_set_mode>
			break;
  800df0:	00000e06 	br	800e2c <main+0x314>
		case 3:
			configurable_tlc();
  800df4:	0800ad80 	call	800ad8 <configurable_tlc>
			lcd_set_mode(3);
  800df8:	010000c4 	movi	r4,3
  800dfc:	08005e80 	call	8005e8 <lcd_set_mode>
			break;
  800e00:	00000a06 	br	800e2c <main+0x314>
		case 4:
			camera_tlc();
  800e04:	0800af80 	call	800af8 <camera_tlc>
			lcd_set_mode(4);
  800e08:	01000104 	movi	r4,4
  800e0c:	08005e80 	call	8005e8 <lcd_set_mode>
			break;
  800e10:	00000606 	br	800e2c <main+0x314>
		default:
			lcd_set_mode(0);
  800e14:	0009883a 	mov	r4,zero
  800e18:	08005e80 	call	8005e8 <lcd_set_mode>
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b111111); //all LEDeez on
  800e1c:	00c00fc4 	movi	r3,63
  800e20:	00804434 	movhi	r2,272
  800e24:	10841c04 	addi	r2,r2,4208
  800e28:	10c00035 	stwio	r3,0(r2)
		}
	}
  800e2c:	003f5306 	br	800b7c <__alt_mem_onchip_mem+0xff780b7c>

00800e30 <_fopen_r>:
  800e30:	defffa04 	addi	sp,sp,-24
  800e34:	3005883a 	mov	r2,r6
  800e38:	dcc00415 	stw	r19,16(sp)
  800e3c:	d80d883a 	mov	r6,sp
  800e40:	2827883a 	mov	r19,r5
  800e44:	100b883a 	mov	r5,r2
  800e48:	dc800315 	stw	r18,12(sp)
  800e4c:	dfc00515 	stw	ra,20(sp)
  800e50:	dc400215 	stw	r17,8(sp)
  800e54:	dc000115 	stw	r16,4(sp)
  800e58:	2025883a 	mov	r18,r4
  800e5c:	08067480 	call	806748 <__sflags>
  800e60:	10002726 	beq	r2,zero,800f00 <_fopen_r+0xd0>
  800e64:	9009883a 	mov	r4,r18
  800e68:	1023883a 	mov	r17,r2
  800e6c:	08065c80 	call	8065c8 <__sfp>
  800e70:	1021883a 	mov	r16,r2
  800e74:	10002226 	beq	r2,zero,800f00 <_fopen_r+0xd0>
  800e78:	d9800017 	ldw	r6,0(sp)
  800e7c:	01c06d84 	movi	r7,438
  800e80:	980b883a 	mov	r5,r19
  800e84:	9009883a 	mov	r4,r18
  800e88:	0801f540 	call	801f54 <_open_r>
  800e8c:	10001916 	blt	r2,zero,800ef4 <_fopen_r+0xc4>
  800e90:	8080038d 	sth	r2,14(r16)
  800e94:	00802034 	movhi	r2,128
  800e98:	10889904 	addi	r2,r2,8804
  800e9c:	80800815 	stw	r2,32(r16)
  800ea0:	00802034 	movhi	r2,128
  800ea4:	1088b004 	addi	r2,r2,8896
  800ea8:	80800915 	stw	r2,36(r16)
  800eac:	00802034 	movhi	r2,128
  800eb0:	1088cf04 	addi	r2,r2,9020
  800eb4:	80800a15 	stw	r2,40(r16)
  800eb8:	00802034 	movhi	r2,128
  800ebc:	1088e604 	addi	r2,r2,9112
  800ec0:	8440030d 	sth	r17,12(r16)
  800ec4:	84000715 	stw	r16,28(r16)
  800ec8:	80800b15 	stw	r2,44(r16)
  800ecc:	8c40400c 	andi	r17,r17,256
  800ed0:	88000d1e 	bne	r17,zero,800f08 <_fopen_r+0xd8>
  800ed4:	8005883a 	mov	r2,r16
  800ed8:	dfc00517 	ldw	ra,20(sp)
  800edc:	dcc00417 	ldw	r19,16(sp)
  800ee0:	dc800317 	ldw	r18,12(sp)
  800ee4:	dc400217 	ldw	r17,8(sp)
  800ee8:	dc000117 	ldw	r16,4(sp)
  800eec:	dec00604 	addi	sp,sp,24
  800ef0:	f800283a 	ret
  800ef4:	08067080 	call	806708 <__sfp_lock_acquire>
  800ef8:	8000030d 	sth	zero,12(r16)
  800efc:	080670c0 	call	80670c <__sfp_lock_release>
  800f00:	0005883a 	mov	r2,zero
  800f04:	003ff406 	br	800ed8 <__alt_mem_onchip_mem+0xff780ed8>
  800f08:	01c00084 	movi	r7,2
  800f0c:	000d883a 	mov	r6,zero
  800f10:	800b883a 	mov	r5,r16
  800f14:	9009883a 	mov	r4,r18
  800f18:	0800f880 	call	800f88 <_fseek_r>
  800f1c:	8005883a 	mov	r2,r16
  800f20:	003fed06 	br	800ed8 <__alt_mem_onchip_mem+0xff780ed8>

00800f24 <fopen>:
  800f24:	00802074 	movhi	r2,129
  800f28:	10912504 	addi	r2,r2,17556
  800f2c:	280d883a 	mov	r6,r5
  800f30:	200b883a 	mov	r5,r4
  800f34:	11000017 	ldw	r4,0(r2)
  800f38:	0800e301 	jmpi	800e30 <_fopen_r>

00800f3c <_fprintf_r>:
  800f3c:	defffe04 	addi	sp,sp,-8
  800f40:	2809883a 	mov	r4,r5
  800f44:	300b883a 	mov	r5,r6
  800f48:	dfc00015 	stw	ra,0(sp)
  800f4c:	d9c00115 	stw	r7,4(sp)
  800f50:	d9800104 	addi	r6,sp,4
  800f54:	08045980 	call	804598 <__vfprintf_internal>
  800f58:	dfc00017 	ldw	ra,0(sp)
  800f5c:	dec00204 	addi	sp,sp,8
  800f60:	f800283a 	ret

00800f64 <fprintf>:
  800f64:	defffd04 	addi	sp,sp,-12
  800f68:	dfc00015 	stw	ra,0(sp)
  800f6c:	d9800115 	stw	r6,4(sp)
  800f70:	d9c00215 	stw	r7,8(sp)
  800f74:	d9800104 	addi	r6,sp,4
  800f78:	08045980 	call	804598 <__vfprintf_internal>
  800f7c:	dfc00017 	ldw	ra,0(sp)
  800f80:	dec00304 	addi	sp,sp,12
  800f84:	f800283a 	ret

00800f88 <_fseek_r>:
  800f88:	0800fa81 	jmpi	800fa8 <_fseeko_r>

00800f8c <fseek>:
  800f8c:	00802074 	movhi	r2,129
  800f90:	10912504 	addi	r2,r2,17556
  800f94:	300f883a 	mov	r7,r6
  800f98:	280d883a 	mov	r6,r5
  800f9c:	200b883a 	mov	r5,r4
  800fa0:	11000017 	ldw	r4,0(r2)
  800fa4:	0800fa81 	jmpi	800fa8 <_fseeko_r>

00800fa8 <_fseeko_r>:
  800fa8:	deffe804 	addi	sp,sp,-96
  800fac:	dd401415 	stw	r21,80(sp)
  800fb0:	dc801115 	stw	r18,68(sp)
  800fb4:	dc401015 	stw	r17,64(sp)
  800fb8:	dc000f15 	stw	r16,60(sp)
  800fbc:	dfc01715 	stw	ra,92(sp)
  800fc0:	ddc01615 	stw	r23,88(sp)
  800fc4:	dd801515 	stw	r22,84(sp)
  800fc8:	dd001315 	stw	r20,76(sp)
  800fcc:	dcc01215 	stw	r19,72(sp)
  800fd0:	2023883a 	mov	r17,r4
  800fd4:	2821883a 	mov	r16,r5
  800fd8:	302b883a 	mov	r21,r6
  800fdc:	3825883a 	mov	r18,r7
  800fe0:	20000226 	beq	r4,zero,800fec <_fseeko_r+0x44>
  800fe4:	20800e17 	ldw	r2,56(r4)
  800fe8:	10005a26 	beq	r2,zero,801154 <_fseeko_r+0x1ac>
  800fec:	8080030b 	ldhu	r2,12(r16)
  800ff0:	00c04204 	movi	r3,264
  800ff4:	1080420c 	andi	r2,r2,264
  800ff8:	10c05b26 	beq	r2,r3,801168 <_fseeko_r+0x1c0>
  800ffc:	85000a17 	ldw	r20,40(r16)
  801000:	a000f626 	beq	r20,zero,8013dc <_fseeko_r+0x434>
  801004:	00800044 	movi	r2,1
  801008:	90803e26 	beq	r18,r2,801104 <_fseeko_r+0x15c>
  80100c:	00800084 	movi	r2,2
  801010:	90801026 	beq	r18,r2,801054 <_fseeko_r+0xac>
  801014:	90000f26 	beq	r18,zero,801054 <_fseeko_r+0xac>
  801018:	00800584 	movi	r2,22
  80101c:	88800015 	stw	r2,0(r17)
  801020:	04ffffc4 	movi	r19,-1
  801024:	9805883a 	mov	r2,r19
  801028:	dfc01717 	ldw	ra,92(sp)
  80102c:	ddc01617 	ldw	r23,88(sp)
  801030:	dd801517 	ldw	r22,84(sp)
  801034:	dd401417 	ldw	r21,80(sp)
  801038:	dd001317 	ldw	r20,76(sp)
  80103c:	dcc01217 	ldw	r19,72(sp)
  801040:	dc801117 	ldw	r18,68(sp)
  801044:	dc401017 	ldw	r17,64(sp)
  801048:	dc000f17 	ldw	r16,60(sp)
  80104c:	dec01804 	addi	sp,sp,96
  801050:	f800283a 	ret
  801054:	80800417 	ldw	r2,16(r16)
  801058:	002f883a 	mov	r23,zero
  80105c:	0027883a 	mov	r19,zero
  801060:	1000cb26 	beq	r2,zero,801390 <_fseeko_r+0x3e8>
  801064:	8080030b 	ldhu	r2,12(r16)
  801068:	10c2068c 	andi	r3,r2,2074
  80106c:	1800071e 	bne	r3,zero,80108c <_fseeko_r+0xe4>
  801070:	10c1000c 	andi	r3,r2,1024
  801074:	1800451e 	bne	r3,zero,80118c <_fseeko_r+0x1e4>
  801078:	00c02034 	movhi	r3,128
  80107c:	18c8cf04 	addi	r3,r3,9020
  801080:	a0c0b726 	beq	r20,r3,801360 <_fseeko_r+0x3b8>
  801084:	10820014 	ori	r2,r2,2048
  801088:	8080030d 	sth	r2,12(r16)
  80108c:	800b883a 	mov	r5,r16
  801090:	8809883a 	mov	r4,r17
  801094:	080631c0 	call	80631c <_fflush_r>
  801098:	1027883a 	mov	r19,r2
  80109c:	103fe01e 	bne	r2,zero,801020 <__alt_mem_onchip_mem+0xff781020>
  8010a0:	81400717 	ldw	r5,28(r16)
  8010a4:	900f883a 	mov	r7,r18
  8010a8:	a80d883a 	mov	r6,r21
  8010ac:	8809883a 	mov	r4,r17
  8010b0:	a03ee83a 	callr	r20
  8010b4:	00ffffc4 	movi	r3,-1
  8010b8:	10ffd926 	beq	r2,r3,801020 <__alt_mem_onchip_mem+0xff781020>
  8010bc:	81400c17 	ldw	r5,48(r16)
  8010c0:	28000526 	beq	r5,zero,8010d8 <_fseeko_r+0x130>
  8010c4:	80801004 	addi	r2,r16,64
  8010c8:	28800226 	beq	r5,r2,8010d4 <_fseeko_r+0x12c>
  8010cc:	8809883a 	mov	r4,r17
  8010d0:	08069180 	call	806918 <_free_r>
  8010d4:	80000c15 	stw	zero,48(r16)
  8010d8:	8080030b 	ldhu	r2,12(r16)
  8010dc:	80c00417 	ldw	r3,16(r16)
  8010e0:	80000115 	stw	zero,4(r16)
  8010e4:	10bdf7cc 	andi	r2,r2,63455
  8010e8:	80c00015 	stw	r3,0(r16)
  8010ec:	8080030d 	sth	r2,12(r16)
  8010f0:	01800204 	movi	r6,8
  8010f4:	000b883a 	mov	r5,zero
  8010f8:	81001704 	addi	r4,r16,92
  8010fc:	0801e2c0 	call	801e2c <memset>
  801100:	003fc806 	br	801024 <__alt_mem_onchip_mem+0xff781024>
  801104:	800b883a 	mov	r5,r16
  801108:	8809883a 	mov	r4,r17
  80110c:	080631c0 	call	80631c <_fflush_r>
  801110:	8080030b 	ldhu	r2,12(r16)
  801114:	10c4000c 	andi	r3,r2,4096
  801118:	18008726 	beq	r3,zero,801338 <_fseeko_r+0x390>
  80111c:	84c01417 	ldw	r19,80(r16)
  801120:	10c0010c 	andi	r3,r2,4
  801124:	1800431e 	bne	r3,zero,801234 <_fseeko_r+0x28c>
  801128:	1080020c 	andi	r2,r2,8
  80112c:	10008026 	beq	r2,zero,801330 <_fseeko_r+0x388>
  801130:	80c00017 	ldw	r3,0(r16)
  801134:	80800417 	ldw	r2,16(r16)
  801138:	18000226 	beq	r3,zero,801144 <_fseeko_r+0x19c>
  80113c:	1887c83a 	sub	r3,r3,r2
  801140:	98e7883a 	add	r19,r19,r3
  801144:	aceb883a 	add	r21,r21,r19
  801148:	05c00044 	movi	r23,1
  80114c:	0025883a 	mov	r18,zero
  801150:	003fc306 	br	801060 <__alt_mem_onchip_mem+0xff781060>
  801154:	08066f80 	call	8066f8 <__sinit>
  801158:	8080030b 	ldhu	r2,12(r16)
  80115c:	00c04204 	movi	r3,264
  801160:	1080420c 	andi	r2,r2,264
  801164:	10ffa51e 	bne	r2,r3,800ffc <__alt_mem_onchip_mem+0xff780ffc>
  801168:	800b883a 	mov	r5,r16
  80116c:	8809883a 	mov	r4,r17
  801170:	080631c0 	call	80631c <_fflush_r>
  801174:	003fa106 	br	800ffc <__alt_mem_onchip_mem+0xff780ffc>
  801178:	8080030b 	ldhu	r2,12(r16)
  80117c:	00c10004 	movi	r3,1024
  801180:	80c01315 	stw	r3,76(r16)
  801184:	10c4b03a 	or	r2,r2,r3
  801188:	8080030d 	sth	r2,12(r16)
  80118c:	9000311e 	bne	r18,zero,801254 <_fseeko_r+0x2ac>
  801190:	a82d883a 	mov	r22,r21
  801194:	b800371e 	bne	r23,zero,801274 <_fseeko_r+0x2cc>
  801198:	8080030b 	ldhu	r2,12(r16)
  80119c:	1084000c 	andi	r2,r2,4096
  8011a0:	10007f26 	beq	r2,zero,8013a0 <_fseeko_r+0x3f8>
  8011a4:	80801417 	ldw	r2,80(r16)
  8011a8:	81800117 	ldw	r6,4(r16)
  8011ac:	81400c17 	ldw	r5,48(r16)
  8011b0:	11a7c83a 	sub	r19,r2,r6
  8011b4:	28008226 	beq	r5,zero,8013c0 <_fseeko_r+0x418>
  8011b8:	81c00f17 	ldw	r7,60(r16)
  8011bc:	99e7c83a 	sub	r19,r19,r7
  8011c0:	81000e17 	ldw	r4,56(r16)
  8011c4:	80800417 	ldw	r2,16(r16)
  8011c8:	99a7883a 	add	r19,r19,r6
  8011cc:	2087c83a 	sub	r3,r4,r2
  8011d0:	98e7c83a 	sub	r19,r19,r3
  8011d4:	38c7883a 	add	r3,r7,r3
  8011d8:	b4c02b16 	blt	r22,r19,801288 <_fseeko_r+0x2e0>
  8011dc:	98c9883a 	add	r4,r19,r3
  8011e0:	b100292e 	bgeu	r22,r4,801288 <_fseeko_r+0x2e0>
  8011e4:	b4e7c83a 	sub	r19,r22,r19
  8011e8:	14c5883a 	add	r2,r2,r19
  8011ec:	1ce7c83a 	sub	r19,r3,r19
  8011f0:	80800015 	stw	r2,0(r16)
  8011f4:	84c00115 	stw	r19,4(r16)
  8011f8:	28000526 	beq	r5,zero,801210 <_fseeko_r+0x268>
  8011fc:	80801004 	addi	r2,r16,64
  801200:	28800226 	beq	r5,r2,80120c <_fseeko_r+0x264>
  801204:	8809883a 	mov	r4,r17
  801208:	08069180 	call	806918 <_free_r>
  80120c:	80000c15 	stw	zero,48(r16)
  801210:	8080030b 	ldhu	r2,12(r16)
  801214:	01800204 	movi	r6,8
  801218:	000b883a 	mov	r5,zero
  80121c:	10bff7cc 	andi	r2,r2,65503
  801220:	8080030d 	sth	r2,12(r16)
  801224:	81001704 	addi	r4,r16,92
  801228:	0801e2c0 	call	801e2c <memset>
  80122c:	0027883a 	mov	r19,zero
  801230:	003f7c06 	br	801024 <__alt_mem_onchip_mem+0xff781024>
  801234:	80c00117 	ldw	r3,4(r16)
  801238:	80800c17 	ldw	r2,48(r16)
  80123c:	98e7c83a 	sub	r19,r19,r3
  801240:	10003b26 	beq	r2,zero,801330 <_fseeko_r+0x388>
  801244:	80c00f17 	ldw	r3,60(r16)
  801248:	80800417 	ldw	r2,16(r16)
  80124c:	98e7c83a 	sub	r19,r19,r3
  801250:	003fbc06 	br	801144 <__alt_mem_onchip_mem+0xff781144>
  801254:	8140038f 	ldh	r5,14(r16)
  801258:	d80d883a 	mov	r6,sp
  80125c:	8809883a 	mov	r4,r17
  801260:	08014080 	call	801408 <_fstat_r>
  801264:	103f891e 	bne	r2,zero,80108c <__alt_mem_onchip_mem+0xff78108c>
  801268:	dd800417 	ldw	r22,16(sp)
  80126c:	adad883a 	add	r22,r21,r22
  801270:	b83fc926 	beq	r23,zero,801198 <__alt_mem_onchip_mem+0xff781198>
  801274:	81400c17 	ldw	r5,48(r16)
  801278:	81800117 	ldw	r6,4(r16)
  80127c:	28005026 	beq	r5,zero,8013c0 <_fseeko_r+0x418>
  801280:	81c00f17 	ldw	r7,60(r16)
  801284:	003fce06 	br	8011c0 <__alt_mem_onchip_mem+0xff7811c0>
  801288:	84c01317 	ldw	r19,76(r16)
  80128c:	81400717 	ldw	r5,28(r16)
  801290:	000f883a 	mov	r7,zero
  801294:	04e7c83a 	sub	r19,zero,r19
  801298:	9da6703a 	and	r19,r19,r22
  80129c:	980d883a 	mov	r6,r19
  8012a0:	8809883a 	mov	r4,r17
  8012a4:	a03ee83a 	callr	r20
  8012a8:	00ffffc4 	movi	r3,-1
  8012ac:	10ff7726 	beq	r2,r3,80108c <__alt_mem_onchip_mem+0xff78108c>
  8012b0:	80800417 	ldw	r2,16(r16)
  8012b4:	81400c17 	ldw	r5,48(r16)
  8012b8:	80000115 	stw	zero,4(r16)
  8012bc:	80800015 	stw	r2,0(r16)
  8012c0:	28000526 	beq	r5,zero,8012d8 <_fseeko_r+0x330>
  8012c4:	80801004 	addi	r2,r16,64
  8012c8:	28800226 	beq	r5,r2,8012d4 <_fseeko_r+0x32c>
  8012cc:	8809883a 	mov	r4,r17
  8012d0:	08069180 	call	806918 <_free_r>
  8012d4:	80000c15 	stw	zero,48(r16)
  8012d8:	8080030b 	ldhu	r2,12(r16)
  8012dc:	b4e7c83a 	sub	r19,r22,r19
  8012e0:	10bff7cc 	andi	r2,r2,65503
  8012e4:	8080030d 	sth	r2,12(r16)
  8012e8:	98000b26 	beq	r19,zero,801318 <_fseeko_r+0x370>
  8012ec:	800b883a 	mov	r5,r16
  8012f0:	8809883a 	mov	r4,r17
  8012f4:	080203c0 	call	80203c <__srefill_r>
  8012f8:	103f641e 	bne	r2,zero,80108c <__alt_mem_onchip_mem+0xff78108c>
  8012fc:	80800117 	ldw	r2,4(r16)
  801300:	14ff6236 	bltu	r2,r19,80108c <__alt_mem_onchip_mem+0xff78108c>
  801304:	80c00017 	ldw	r3,0(r16)
  801308:	14c5c83a 	sub	r2,r2,r19
  80130c:	80800115 	stw	r2,4(r16)
  801310:	1ce7883a 	add	r19,r3,r19
  801314:	84c00015 	stw	r19,0(r16)
  801318:	01800204 	movi	r6,8
  80131c:	000b883a 	mov	r5,zero
  801320:	81001704 	addi	r4,r16,92
  801324:	0801e2c0 	call	801e2c <memset>
  801328:	0027883a 	mov	r19,zero
  80132c:	003f3d06 	br	801024 <__alt_mem_onchip_mem+0xff781024>
  801330:	80800417 	ldw	r2,16(r16)
  801334:	003f8306 	br	801144 <__alt_mem_onchip_mem+0xff781144>
  801338:	81400717 	ldw	r5,28(r16)
  80133c:	900f883a 	mov	r7,r18
  801340:	000d883a 	mov	r6,zero
  801344:	8809883a 	mov	r4,r17
  801348:	a03ee83a 	callr	r20
  80134c:	1027883a 	mov	r19,r2
  801350:	00bfffc4 	movi	r2,-1
  801354:	98bf3226 	beq	r19,r2,801020 <__alt_mem_onchip_mem+0xff781020>
  801358:	8080030b 	ldhu	r2,12(r16)
  80135c:	003f7006 	br	801120 <__alt_mem_onchip_mem+0xff781120>
  801360:	8140038f 	ldh	r5,14(r16)
  801364:	283f4716 	blt	r5,zero,801084 <__alt_mem_onchip_mem+0xff781084>
  801368:	d80d883a 	mov	r6,sp
  80136c:	8809883a 	mov	r4,r17
  801370:	08014080 	call	801408 <_fstat_r>
  801374:	1000041e 	bne	r2,zero,801388 <_fseeko_r+0x3e0>
  801378:	d8800117 	ldw	r2,4(sp)
  80137c:	00e00014 	movui	r3,32768
  801380:	10bc000c 	andi	r2,r2,61440
  801384:	10ff7c26 	beq	r2,r3,801178 <__alt_mem_onchip_mem+0xff781178>
  801388:	8080030b 	ldhu	r2,12(r16)
  80138c:	003f3d06 	br	801084 <__alt_mem_onchip_mem+0xff781084>
  801390:	800b883a 	mov	r5,r16
  801394:	8809883a 	mov	r4,r17
  801398:	08014640 	call	801464 <__smakebuf_r>
  80139c:	003f3106 	br	801064 <__alt_mem_onchip_mem+0xff781064>
  8013a0:	81400717 	ldw	r5,28(r16)
  8013a4:	01c00044 	movi	r7,1
  8013a8:	000d883a 	mov	r6,zero
  8013ac:	8809883a 	mov	r4,r17
  8013b0:	a03ee83a 	callr	r20
  8013b4:	00ffffc4 	movi	r3,-1
  8013b8:	10ff7b1e 	bne	r2,r3,8011a8 <__alt_mem_onchip_mem+0xff7811a8>
  8013bc:	003f3306 	br	80108c <__alt_mem_onchip_mem+0xff78108c>
  8013c0:	80c00017 	ldw	r3,0(r16)
  8013c4:	80800417 	ldw	r2,16(r16)
  8013c8:	000b883a 	mov	r5,zero
  8013cc:	1887c83a 	sub	r3,r3,r2
  8013d0:	98e7c83a 	sub	r19,r19,r3
  8013d4:	30c7883a 	add	r3,r6,r3
  8013d8:	003f7f06 	br	8011d8 <__alt_mem_onchip_mem+0xff7811d8>
  8013dc:	00800744 	movi	r2,29
  8013e0:	88800015 	stw	r2,0(r17)
  8013e4:	04ffffc4 	movi	r19,-1
  8013e8:	003f0e06 	br	801024 <__alt_mem_onchip_mem+0xff781024>

008013ec <fseeko>:
  8013ec:	00802074 	movhi	r2,129
  8013f0:	10912504 	addi	r2,r2,17556
  8013f4:	300f883a 	mov	r7,r6
  8013f8:	280d883a 	mov	r6,r5
  8013fc:	200b883a 	mov	r5,r4
  801400:	11000017 	ldw	r4,0(r2)
  801404:	0800fa81 	jmpi	800fa8 <_fseeko_r>

00801408 <_fstat_r>:
  801408:	defffd04 	addi	sp,sp,-12
  80140c:	2805883a 	mov	r2,r5
  801410:	dc000015 	stw	r16,0(sp)
  801414:	04002074 	movhi	r16,129
  801418:	dc400115 	stw	r17,4(sp)
  80141c:	84187b04 	addi	r16,r16,25068
  801420:	2023883a 	mov	r17,r4
  801424:	300b883a 	mov	r5,r6
  801428:	1009883a 	mov	r4,r2
  80142c:	dfc00215 	stw	ra,8(sp)
  801430:	80000015 	stw	zero,0(r16)
  801434:	080e1f00 	call	80e1f0 <fstat>
  801438:	00ffffc4 	movi	r3,-1
  80143c:	10c00526 	beq	r2,r3,801454 <_fstat_r+0x4c>
  801440:	dfc00217 	ldw	ra,8(sp)
  801444:	dc400117 	ldw	r17,4(sp)
  801448:	dc000017 	ldw	r16,0(sp)
  80144c:	dec00304 	addi	sp,sp,12
  801450:	f800283a 	ret
  801454:	80c00017 	ldw	r3,0(r16)
  801458:	183ff926 	beq	r3,zero,801440 <__alt_mem_onchip_mem+0xff781440>
  80145c:	88c00015 	stw	r3,0(r17)
  801460:	003ff706 	br	801440 <__alt_mem_onchip_mem+0xff781440>

00801464 <__smakebuf_r>:
  801464:	2880030b 	ldhu	r2,12(r5)
  801468:	10c0008c 	andi	r3,r2,2
  80146c:	1800411e 	bne	r3,zero,801574 <__smakebuf_r+0x110>
  801470:	deffec04 	addi	sp,sp,-80
  801474:	dc000f15 	stw	r16,60(sp)
  801478:	2821883a 	mov	r16,r5
  80147c:	2940038f 	ldh	r5,14(r5)
  801480:	dc401015 	stw	r17,64(sp)
  801484:	dfc01315 	stw	ra,76(sp)
  801488:	dcc01215 	stw	r19,72(sp)
  80148c:	dc801115 	stw	r18,68(sp)
  801490:	2023883a 	mov	r17,r4
  801494:	28001c16 	blt	r5,zero,801508 <__smakebuf_r+0xa4>
  801498:	d80d883a 	mov	r6,sp
  80149c:	08014080 	call	801408 <_fstat_r>
  8014a0:	10001816 	blt	r2,zero,801504 <__smakebuf_r+0xa0>
  8014a4:	d8800117 	ldw	r2,4(sp)
  8014a8:	00e00014 	movui	r3,32768
  8014ac:	10bc000c 	andi	r2,r2,61440
  8014b0:	14c80020 	cmpeqi	r19,r2,8192
  8014b4:	10c03726 	beq	r2,r3,801594 <__smakebuf_r+0x130>
  8014b8:	80c0030b 	ldhu	r3,12(r16)
  8014bc:	18c20014 	ori	r3,r3,2048
  8014c0:	80c0030d 	sth	r3,12(r16)
  8014c4:	00c80004 	movi	r3,8192
  8014c8:	10c0521e 	bne	r2,r3,801614 <__smakebuf_r+0x1b0>
  8014cc:	8140038f 	ldh	r5,14(r16)
  8014d0:	8809883a 	mov	r4,r17
  8014d4:	0806db00 	call	806db0 <_isatty_r>
  8014d8:	10004c26 	beq	r2,zero,80160c <__smakebuf_r+0x1a8>
  8014dc:	8080030b 	ldhu	r2,12(r16)
  8014e0:	80c010c4 	addi	r3,r16,67
  8014e4:	80c00015 	stw	r3,0(r16)
  8014e8:	10800054 	ori	r2,r2,1
  8014ec:	8080030d 	sth	r2,12(r16)
  8014f0:	00800044 	movi	r2,1
  8014f4:	80c00415 	stw	r3,16(r16)
  8014f8:	80800515 	stw	r2,20(r16)
  8014fc:	04810004 	movi	r18,1024
  801500:	00000706 	br	801520 <__smakebuf_r+0xbc>
  801504:	8080030b 	ldhu	r2,12(r16)
  801508:	10c0200c 	andi	r3,r2,128
  80150c:	18001f1e 	bne	r3,zero,80158c <__smakebuf_r+0x128>
  801510:	04810004 	movi	r18,1024
  801514:	10820014 	ori	r2,r2,2048
  801518:	8080030d 	sth	r2,12(r16)
  80151c:	0027883a 	mov	r19,zero
  801520:	900b883a 	mov	r5,r18
  801524:	8809883a 	mov	r4,r17
  801528:	08016200 	call	801620 <_malloc_r>
  80152c:	10002c26 	beq	r2,zero,8015e0 <__smakebuf_r+0x17c>
  801530:	80c0030b 	ldhu	r3,12(r16)
  801534:	01002034 	movhi	r4,128
  801538:	2118ec04 	addi	r4,r4,25520
  80153c:	89000f15 	stw	r4,60(r17)
  801540:	18c02014 	ori	r3,r3,128
  801544:	80c0030d 	sth	r3,12(r16)
  801548:	80800015 	stw	r2,0(r16)
  80154c:	80800415 	stw	r2,16(r16)
  801550:	84800515 	stw	r18,20(r16)
  801554:	98001a1e 	bne	r19,zero,8015c0 <__smakebuf_r+0x15c>
  801558:	dfc01317 	ldw	ra,76(sp)
  80155c:	dcc01217 	ldw	r19,72(sp)
  801560:	dc801117 	ldw	r18,68(sp)
  801564:	dc401017 	ldw	r17,64(sp)
  801568:	dc000f17 	ldw	r16,60(sp)
  80156c:	dec01404 	addi	sp,sp,80
  801570:	f800283a 	ret
  801574:	288010c4 	addi	r2,r5,67
  801578:	28800015 	stw	r2,0(r5)
  80157c:	28800415 	stw	r2,16(r5)
  801580:	00800044 	movi	r2,1
  801584:	28800515 	stw	r2,20(r5)
  801588:	f800283a 	ret
  80158c:	04801004 	movi	r18,64
  801590:	003fe006 	br	801514 <__alt_mem_onchip_mem+0xff781514>
  801594:	81000a17 	ldw	r4,40(r16)
  801598:	00c02034 	movhi	r3,128
  80159c:	18c8cf04 	addi	r3,r3,9020
  8015a0:	20ffc51e 	bne	r4,r3,8014b8 <__alt_mem_onchip_mem+0xff7814b8>
  8015a4:	8080030b 	ldhu	r2,12(r16)
  8015a8:	04810004 	movi	r18,1024
  8015ac:	84801315 	stw	r18,76(r16)
  8015b0:	1484b03a 	or	r2,r2,r18
  8015b4:	8080030d 	sth	r2,12(r16)
  8015b8:	0027883a 	mov	r19,zero
  8015bc:	003fd806 	br	801520 <__alt_mem_onchip_mem+0xff781520>
  8015c0:	8140038f 	ldh	r5,14(r16)
  8015c4:	8809883a 	mov	r4,r17
  8015c8:	0806db00 	call	806db0 <_isatty_r>
  8015cc:	103fe226 	beq	r2,zero,801558 <__alt_mem_onchip_mem+0xff781558>
  8015d0:	8080030b 	ldhu	r2,12(r16)
  8015d4:	10800054 	ori	r2,r2,1
  8015d8:	8080030d 	sth	r2,12(r16)
  8015dc:	003fde06 	br	801558 <__alt_mem_onchip_mem+0xff781558>
  8015e0:	8080030b 	ldhu	r2,12(r16)
  8015e4:	10c0800c 	andi	r3,r2,512
  8015e8:	183fdb1e 	bne	r3,zero,801558 <__alt_mem_onchip_mem+0xff781558>
  8015ec:	10800094 	ori	r2,r2,2
  8015f0:	80c010c4 	addi	r3,r16,67
  8015f4:	8080030d 	sth	r2,12(r16)
  8015f8:	00800044 	movi	r2,1
  8015fc:	80c00015 	stw	r3,0(r16)
  801600:	80c00415 	stw	r3,16(r16)
  801604:	80800515 	stw	r2,20(r16)
  801608:	003fd306 	br	801558 <__alt_mem_onchip_mem+0xff781558>
  80160c:	04810004 	movi	r18,1024
  801610:	003fc306 	br	801520 <__alt_mem_onchip_mem+0xff781520>
  801614:	0027883a 	mov	r19,zero
  801618:	04810004 	movi	r18,1024
  80161c:	003fc006 	br	801520 <__alt_mem_onchip_mem+0xff781520>

00801620 <_malloc_r>:
  801620:	defff504 	addi	sp,sp,-44
  801624:	dc800315 	stw	r18,12(sp)
  801628:	dfc00a15 	stw	ra,40(sp)
  80162c:	df000915 	stw	fp,36(sp)
  801630:	ddc00815 	stw	r23,32(sp)
  801634:	dd800715 	stw	r22,28(sp)
  801638:	dd400615 	stw	r21,24(sp)
  80163c:	dd000515 	stw	r20,20(sp)
  801640:	dcc00415 	stw	r19,16(sp)
  801644:	dc400215 	stw	r17,8(sp)
  801648:	dc000115 	stw	r16,4(sp)
  80164c:	288002c4 	addi	r2,r5,11
  801650:	00c00584 	movi	r3,22
  801654:	2025883a 	mov	r18,r4
  801658:	18807f2e 	bgeu	r3,r2,801858 <_malloc_r+0x238>
  80165c:	047ffe04 	movi	r17,-8
  801660:	1462703a 	and	r17,r2,r17
  801664:	8800a316 	blt	r17,zero,8018f4 <_malloc_r+0x2d4>
  801668:	8940a236 	bltu	r17,r5,8018f4 <_malloc_r+0x2d4>
  80166c:	080e7780 	call	80e778 <__malloc_lock>
  801670:	00807dc4 	movi	r2,503
  801674:	1441e92e 	bgeu	r2,r17,801e1c <_malloc_r+0x7fc>
  801678:	8804d27a 	srli	r2,r17,9
  80167c:	1000a126 	beq	r2,zero,801904 <_malloc_r+0x2e4>
  801680:	00c00104 	movi	r3,4
  801684:	18811e36 	bltu	r3,r2,801b00 <_malloc_r+0x4e0>
  801688:	8804d1ba 	srli	r2,r17,6
  80168c:	12000e44 	addi	r8,r2,57
  801690:	11c00e04 	addi	r7,r2,56
  801694:	4209883a 	add	r4,r8,r8
  801698:	04c02074 	movhi	r19,129
  80169c:	2109883a 	add	r4,r4,r4
  8016a0:	9ccb0704 	addi	r19,r19,11292
  8016a4:	2109883a 	add	r4,r4,r4
  8016a8:	9909883a 	add	r4,r19,r4
  8016ac:	24000117 	ldw	r16,4(r4)
  8016b0:	213ffe04 	addi	r4,r4,-8
  8016b4:	24009726 	beq	r4,r16,801914 <_malloc_r+0x2f4>
  8016b8:	80800117 	ldw	r2,4(r16)
  8016bc:	01bfff04 	movi	r6,-4
  8016c0:	014003c4 	movi	r5,15
  8016c4:	1184703a 	and	r2,r2,r6
  8016c8:	1447c83a 	sub	r3,r2,r17
  8016cc:	28c00716 	blt	r5,r3,8016ec <_malloc_r+0xcc>
  8016d0:	1800920e 	bge	r3,zero,80191c <_malloc_r+0x2fc>
  8016d4:	84000317 	ldw	r16,12(r16)
  8016d8:	24008e26 	beq	r4,r16,801914 <_malloc_r+0x2f4>
  8016dc:	80800117 	ldw	r2,4(r16)
  8016e0:	1184703a 	and	r2,r2,r6
  8016e4:	1447c83a 	sub	r3,r2,r17
  8016e8:	28fff90e 	bge	r5,r3,8016d0 <__alt_mem_onchip_mem+0xff7816d0>
  8016ec:	3809883a 	mov	r4,r7
  8016f0:	01802074 	movhi	r6,129
  8016f4:	9c000417 	ldw	r16,16(r19)
  8016f8:	318b0704 	addi	r6,r6,11292
  8016fc:	32000204 	addi	r8,r6,8
  801700:	82013426 	beq	r16,r8,801bd4 <_malloc_r+0x5b4>
  801704:	80c00117 	ldw	r3,4(r16)
  801708:	00bfff04 	movi	r2,-4
  80170c:	188e703a 	and	r7,r3,r2
  801710:	3c45c83a 	sub	r2,r7,r17
  801714:	00c003c4 	movi	r3,15
  801718:	18811f16 	blt	r3,r2,801b98 <_malloc_r+0x578>
  80171c:	32000515 	stw	r8,20(r6)
  801720:	32000415 	stw	r8,16(r6)
  801724:	10007f0e 	bge	r2,zero,801924 <_malloc_r+0x304>
  801728:	00807fc4 	movi	r2,511
  80172c:	11c0fd36 	bltu	r2,r7,801b24 <_malloc_r+0x504>
  801730:	3806d0fa 	srli	r3,r7,3
  801734:	01c00044 	movi	r7,1
  801738:	30800117 	ldw	r2,4(r6)
  80173c:	19400044 	addi	r5,r3,1
  801740:	294b883a 	add	r5,r5,r5
  801744:	1807d0ba 	srai	r3,r3,2
  801748:	294b883a 	add	r5,r5,r5
  80174c:	294b883a 	add	r5,r5,r5
  801750:	298b883a 	add	r5,r5,r6
  801754:	38c6983a 	sll	r3,r7,r3
  801758:	29c00017 	ldw	r7,0(r5)
  80175c:	2a7ffe04 	addi	r9,r5,-8
  801760:	1886b03a 	or	r3,r3,r2
  801764:	82400315 	stw	r9,12(r16)
  801768:	81c00215 	stw	r7,8(r16)
  80176c:	30c00115 	stw	r3,4(r6)
  801770:	2c000015 	stw	r16,0(r5)
  801774:	3c000315 	stw	r16,12(r7)
  801778:	2005d0ba 	srai	r2,r4,2
  80177c:	01400044 	movi	r5,1
  801780:	288a983a 	sll	r5,r5,r2
  801784:	19406f36 	bltu	r3,r5,801944 <_malloc_r+0x324>
  801788:	28c4703a 	and	r2,r5,r3
  80178c:	10000a1e 	bne	r2,zero,8017b8 <_malloc_r+0x198>
  801790:	00bfff04 	movi	r2,-4
  801794:	294b883a 	add	r5,r5,r5
  801798:	2088703a 	and	r4,r4,r2
  80179c:	28c4703a 	and	r2,r5,r3
  8017a0:	21000104 	addi	r4,r4,4
  8017a4:	1000041e 	bne	r2,zero,8017b8 <_malloc_r+0x198>
  8017a8:	294b883a 	add	r5,r5,r5
  8017ac:	28c4703a 	and	r2,r5,r3
  8017b0:	21000104 	addi	r4,r4,4
  8017b4:	103ffc26 	beq	r2,zero,8017a8 <__alt_mem_onchip_mem+0xff7817a8>
  8017b8:	02bfff04 	movi	r10,-4
  8017bc:	024003c4 	movi	r9,15
  8017c0:	21800044 	addi	r6,r4,1
  8017c4:	318d883a 	add	r6,r6,r6
  8017c8:	318d883a 	add	r6,r6,r6
  8017cc:	318d883a 	add	r6,r6,r6
  8017d0:	998d883a 	add	r6,r19,r6
  8017d4:	333ffe04 	addi	r12,r6,-8
  8017d8:	2017883a 	mov	r11,r4
  8017dc:	31800104 	addi	r6,r6,4
  8017e0:	34000017 	ldw	r16,0(r6)
  8017e4:	31fffd04 	addi	r7,r6,-12
  8017e8:	81c0041e 	bne	r16,r7,8017fc <_malloc_r+0x1dc>
  8017ec:	0000fb06 	br	801bdc <_malloc_r+0x5bc>
  8017f0:	1801030e 	bge	r3,zero,801c00 <_malloc_r+0x5e0>
  8017f4:	84000317 	ldw	r16,12(r16)
  8017f8:	81c0f826 	beq	r16,r7,801bdc <_malloc_r+0x5bc>
  8017fc:	80800117 	ldw	r2,4(r16)
  801800:	1284703a 	and	r2,r2,r10
  801804:	1447c83a 	sub	r3,r2,r17
  801808:	48fff90e 	bge	r9,r3,8017f0 <__alt_mem_onchip_mem+0xff7817f0>
  80180c:	80800317 	ldw	r2,12(r16)
  801810:	81000217 	ldw	r4,8(r16)
  801814:	89400054 	ori	r5,r17,1
  801818:	81400115 	stw	r5,4(r16)
  80181c:	20800315 	stw	r2,12(r4)
  801820:	11000215 	stw	r4,8(r2)
  801824:	8463883a 	add	r17,r16,r17
  801828:	9c400515 	stw	r17,20(r19)
  80182c:	9c400415 	stw	r17,16(r19)
  801830:	18800054 	ori	r2,r3,1
  801834:	88800115 	stw	r2,4(r17)
  801838:	8a000315 	stw	r8,12(r17)
  80183c:	8a000215 	stw	r8,8(r17)
  801840:	88e3883a 	add	r17,r17,r3
  801844:	88c00015 	stw	r3,0(r17)
  801848:	9009883a 	mov	r4,r18
  80184c:	080e79c0 	call	80e79c <__malloc_unlock>
  801850:	80800204 	addi	r2,r16,8
  801854:	00001b06 	br	8018c4 <_malloc_r+0x2a4>
  801858:	04400404 	movi	r17,16
  80185c:	89402536 	bltu	r17,r5,8018f4 <_malloc_r+0x2d4>
  801860:	080e7780 	call	80e778 <__malloc_lock>
  801864:	00800184 	movi	r2,6
  801868:	01000084 	movi	r4,2
  80186c:	04c02074 	movhi	r19,129
  801870:	1085883a 	add	r2,r2,r2
  801874:	9ccb0704 	addi	r19,r19,11292
  801878:	1085883a 	add	r2,r2,r2
  80187c:	9885883a 	add	r2,r19,r2
  801880:	14000117 	ldw	r16,4(r2)
  801884:	10fffe04 	addi	r3,r2,-8
  801888:	80c0d926 	beq	r16,r3,801bf0 <_malloc_r+0x5d0>
  80188c:	80c00117 	ldw	r3,4(r16)
  801890:	81000317 	ldw	r4,12(r16)
  801894:	00bfff04 	movi	r2,-4
  801898:	1884703a 	and	r2,r3,r2
  80189c:	81400217 	ldw	r5,8(r16)
  8018a0:	8085883a 	add	r2,r16,r2
  8018a4:	10c00117 	ldw	r3,4(r2)
  8018a8:	29000315 	stw	r4,12(r5)
  8018ac:	21400215 	stw	r5,8(r4)
  8018b0:	18c00054 	ori	r3,r3,1
  8018b4:	10c00115 	stw	r3,4(r2)
  8018b8:	9009883a 	mov	r4,r18
  8018bc:	080e79c0 	call	80e79c <__malloc_unlock>
  8018c0:	80800204 	addi	r2,r16,8
  8018c4:	dfc00a17 	ldw	ra,40(sp)
  8018c8:	df000917 	ldw	fp,36(sp)
  8018cc:	ddc00817 	ldw	r23,32(sp)
  8018d0:	dd800717 	ldw	r22,28(sp)
  8018d4:	dd400617 	ldw	r21,24(sp)
  8018d8:	dd000517 	ldw	r20,20(sp)
  8018dc:	dcc00417 	ldw	r19,16(sp)
  8018e0:	dc800317 	ldw	r18,12(sp)
  8018e4:	dc400217 	ldw	r17,8(sp)
  8018e8:	dc000117 	ldw	r16,4(sp)
  8018ec:	dec00b04 	addi	sp,sp,44
  8018f0:	f800283a 	ret
  8018f4:	00800304 	movi	r2,12
  8018f8:	90800015 	stw	r2,0(r18)
  8018fc:	0005883a 	mov	r2,zero
  801900:	003ff006 	br	8018c4 <__alt_mem_onchip_mem+0xff7818c4>
  801904:	01002004 	movi	r4,128
  801908:	02001004 	movi	r8,64
  80190c:	01c00fc4 	movi	r7,63
  801910:	003f6106 	br	801698 <__alt_mem_onchip_mem+0xff781698>
  801914:	4009883a 	mov	r4,r8
  801918:	003f7506 	br	8016f0 <__alt_mem_onchip_mem+0xff7816f0>
  80191c:	81000317 	ldw	r4,12(r16)
  801920:	003fde06 	br	80189c <__alt_mem_onchip_mem+0xff78189c>
  801924:	81c5883a 	add	r2,r16,r7
  801928:	11400117 	ldw	r5,4(r2)
  80192c:	9009883a 	mov	r4,r18
  801930:	29400054 	ori	r5,r5,1
  801934:	11400115 	stw	r5,4(r2)
  801938:	080e79c0 	call	80e79c <__malloc_unlock>
  80193c:	80800204 	addi	r2,r16,8
  801940:	003fe006 	br	8018c4 <__alt_mem_onchip_mem+0xff7818c4>
  801944:	9c000217 	ldw	r16,8(r19)
  801948:	00bfff04 	movi	r2,-4
  80194c:	85800117 	ldw	r22,4(r16)
  801950:	b0ac703a 	and	r22,r22,r2
  801954:	b4400336 	bltu	r22,r17,801964 <_malloc_r+0x344>
  801958:	b445c83a 	sub	r2,r22,r17
  80195c:	00c003c4 	movi	r3,15
  801960:	18805d16 	blt	r3,r2,801ad8 <_malloc_r+0x4b8>
  801964:	05c02074 	movhi	r23,129
  801968:	00802074 	movhi	r2,129
  80196c:	10987e04 	addi	r2,r2,25080
  801970:	bdd12604 	addi	r23,r23,17560
  801974:	15400017 	ldw	r21,0(r2)
  801978:	b8c00017 	ldw	r3,0(r23)
  80197c:	00bfffc4 	movi	r2,-1
  801980:	858d883a 	add	r6,r16,r22
  801984:	8d6b883a 	add	r21,r17,r21
  801988:	1880ea26 	beq	r3,r2,801d34 <_malloc_r+0x714>
  80198c:	ad4403c4 	addi	r21,r21,4111
  801990:	00bc0004 	movi	r2,-4096
  801994:	a8aa703a 	and	r21,r21,r2
  801998:	a80b883a 	mov	r5,r21
  80199c:	9009883a 	mov	r4,r18
  8019a0:	d9800015 	stw	r6,0(sp)
  8019a4:	08022100 	call	802210 <_sbrk_r>
  8019a8:	1029883a 	mov	r20,r2
  8019ac:	00bfffc4 	movi	r2,-1
  8019b0:	d9800017 	ldw	r6,0(sp)
  8019b4:	a080e826 	beq	r20,r2,801d58 <_malloc_r+0x738>
  8019b8:	a180a636 	bltu	r20,r6,801c54 <_malloc_r+0x634>
  8019bc:	07002074 	movhi	fp,129
  8019c0:	e7188904 	addi	fp,fp,25124
  8019c4:	e0800017 	ldw	r2,0(fp)
  8019c8:	a887883a 	add	r3,r21,r2
  8019cc:	e0c00015 	stw	r3,0(fp)
  8019d0:	3500e626 	beq	r6,r20,801d6c <_malloc_r+0x74c>
  8019d4:	b9000017 	ldw	r4,0(r23)
  8019d8:	00bfffc4 	movi	r2,-1
  8019dc:	2080ee26 	beq	r4,r2,801d98 <_malloc_r+0x778>
  8019e0:	a185c83a 	sub	r2,r20,r6
  8019e4:	10c5883a 	add	r2,r2,r3
  8019e8:	e0800015 	stw	r2,0(fp)
  8019ec:	a0c001cc 	andi	r3,r20,7
  8019f0:	1800bc26 	beq	r3,zero,801ce4 <_malloc_r+0x6c4>
  8019f4:	a0e9c83a 	sub	r20,r20,r3
  8019f8:	00840204 	movi	r2,4104
  8019fc:	a5000204 	addi	r20,r20,8
  801a00:	10c7c83a 	sub	r3,r2,r3
  801a04:	a545883a 	add	r2,r20,r21
  801a08:	1083ffcc 	andi	r2,r2,4095
  801a0c:	18abc83a 	sub	r21,r3,r2
  801a10:	a80b883a 	mov	r5,r21
  801a14:	9009883a 	mov	r4,r18
  801a18:	08022100 	call	802210 <_sbrk_r>
  801a1c:	00ffffc4 	movi	r3,-1
  801a20:	10c0e126 	beq	r2,r3,801da8 <_malloc_r+0x788>
  801a24:	1505c83a 	sub	r2,r2,r20
  801a28:	1545883a 	add	r2,r2,r21
  801a2c:	10800054 	ori	r2,r2,1
  801a30:	e0c00017 	ldw	r3,0(fp)
  801a34:	9d000215 	stw	r20,8(r19)
  801a38:	a0800115 	stw	r2,4(r20)
  801a3c:	a8c7883a 	add	r3,r21,r3
  801a40:	e0c00015 	stw	r3,0(fp)
  801a44:	84c00e26 	beq	r16,r19,801a80 <_malloc_r+0x460>
  801a48:	018003c4 	movi	r6,15
  801a4c:	3580a72e 	bgeu	r6,r22,801cec <_malloc_r+0x6cc>
  801a50:	81400117 	ldw	r5,4(r16)
  801a54:	013ffe04 	movi	r4,-8
  801a58:	b0bffd04 	addi	r2,r22,-12
  801a5c:	1104703a 	and	r2,r2,r4
  801a60:	2900004c 	andi	r4,r5,1
  801a64:	2088b03a 	or	r4,r4,r2
  801a68:	81000115 	stw	r4,4(r16)
  801a6c:	01400144 	movi	r5,5
  801a70:	8089883a 	add	r4,r16,r2
  801a74:	21400115 	stw	r5,4(r4)
  801a78:	21400215 	stw	r5,8(r4)
  801a7c:	3080cd36 	bltu	r6,r2,801db4 <_malloc_r+0x794>
  801a80:	00802074 	movhi	r2,129
  801a84:	10987d04 	addi	r2,r2,25076
  801a88:	11000017 	ldw	r4,0(r2)
  801a8c:	20c0012e 	bgeu	r4,r3,801a94 <_malloc_r+0x474>
  801a90:	10c00015 	stw	r3,0(r2)
  801a94:	00802074 	movhi	r2,129
  801a98:	10987c04 	addi	r2,r2,25072
  801a9c:	11000017 	ldw	r4,0(r2)
  801aa0:	9c000217 	ldw	r16,8(r19)
  801aa4:	20c0012e 	bgeu	r4,r3,801aac <_malloc_r+0x48c>
  801aa8:	10c00015 	stw	r3,0(r2)
  801aac:	80c00117 	ldw	r3,4(r16)
  801ab0:	00bfff04 	movi	r2,-4
  801ab4:	1886703a 	and	r3,r3,r2
  801ab8:	1c45c83a 	sub	r2,r3,r17
  801abc:	1c400236 	bltu	r3,r17,801ac8 <_malloc_r+0x4a8>
  801ac0:	00c003c4 	movi	r3,15
  801ac4:	18800416 	blt	r3,r2,801ad8 <_malloc_r+0x4b8>
  801ac8:	9009883a 	mov	r4,r18
  801acc:	080e79c0 	call	80e79c <__malloc_unlock>
  801ad0:	0005883a 	mov	r2,zero
  801ad4:	003f7b06 	br	8018c4 <__alt_mem_onchip_mem+0xff7818c4>
  801ad8:	88c00054 	ori	r3,r17,1
  801adc:	80c00115 	stw	r3,4(r16)
  801ae0:	8463883a 	add	r17,r16,r17
  801ae4:	10800054 	ori	r2,r2,1
  801ae8:	9c400215 	stw	r17,8(r19)
  801aec:	88800115 	stw	r2,4(r17)
  801af0:	9009883a 	mov	r4,r18
  801af4:	080e79c0 	call	80e79c <__malloc_unlock>
  801af8:	80800204 	addi	r2,r16,8
  801afc:	003f7106 	br	8018c4 <__alt_mem_onchip_mem+0xff7818c4>
  801b00:	00c00504 	movi	r3,20
  801b04:	18804a2e 	bgeu	r3,r2,801c30 <_malloc_r+0x610>
  801b08:	00c01504 	movi	r3,84
  801b0c:	18806e36 	bltu	r3,r2,801cc8 <_malloc_r+0x6a8>
  801b10:	8804d33a 	srli	r2,r17,12
  801b14:	12001bc4 	addi	r8,r2,111
  801b18:	11c01b84 	addi	r7,r2,110
  801b1c:	4209883a 	add	r4,r8,r8
  801b20:	003edd06 	br	801698 <__alt_mem_onchip_mem+0xff781698>
  801b24:	3804d27a 	srli	r2,r7,9
  801b28:	00c00104 	movi	r3,4
  801b2c:	1880442e 	bgeu	r3,r2,801c40 <_malloc_r+0x620>
  801b30:	00c00504 	movi	r3,20
  801b34:	18808136 	bltu	r3,r2,801d3c <_malloc_r+0x71c>
  801b38:	11401704 	addi	r5,r2,92
  801b3c:	10c016c4 	addi	r3,r2,91
  801b40:	294b883a 	add	r5,r5,r5
  801b44:	294b883a 	add	r5,r5,r5
  801b48:	294b883a 	add	r5,r5,r5
  801b4c:	994b883a 	add	r5,r19,r5
  801b50:	28800017 	ldw	r2,0(r5)
  801b54:	01802074 	movhi	r6,129
  801b58:	297ffe04 	addi	r5,r5,-8
  801b5c:	318b0704 	addi	r6,r6,11292
  801b60:	28806526 	beq	r5,r2,801cf8 <_malloc_r+0x6d8>
  801b64:	01bfff04 	movi	r6,-4
  801b68:	10c00117 	ldw	r3,4(r2)
  801b6c:	1986703a 	and	r3,r3,r6
  801b70:	38c0022e 	bgeu	r7,r3,801b7c <_malloc_r+0x55c>
  801b74:	10800217 	ldw	r2,8(r2)
  801b78:	28bffb1e 	bne	r5,r2,801b68 <__alt_mem_onchip_mem+0xff781b68>
  801b7c:	11400317 	ldw	r5,12(r2)
  801b80:	98c00117 	ldw	r3,4(r19)
  801b84:	81400315 	stw	r5,12(r16)
  801b88:	80800215 	stw	r2,8(r16)
  801b8c:	2c000215 	stw	r16,8(r5)
  801b90:	14000315 	stw	r16,12(r2)
  801b94:	003ef806 	br	801778 <__alt_mem_onchip_mem+0xff781778>
  801b98:	88c00054 	ori	r3,r17,1
  801b9c:	80c00115 	stw	r3,4(r16)
  801ba0:	8463883a 	add	r17,r16,r17
  801ba4:	34400515 	stw	r17,20(r6)
  801ba8:	34400415 	stw	r17,16(r6)
  801bac:	10c00054 	ori	r3,r2,1
  801bb0:	8a000315 	stw	r8,12(r17)
  801bb4:	8a000215 	stw	r8,8(r17)
  801bb8:	88c00115 	stw	r3,4(r17)
  801bbc:	88a3883a 	add	r17,r17,r2
  801bc0:	88800015 	stw	r2,0(r17)
  801bc4:	9009883a 	mov	r4,r18
  801bc8:	080e79c0 	call	80e79c <__malloc_unlock>
  801bcc:	80800204 	addi	r2,r16,8
  801bd0:	003f3c06 	br	8018c4 <__alt_mem_onchip_mem+0xff7818c4>
  801bd4:	30c00117 	ldw	r3,4(r6)
  801bd8:	003ee706 	br	801778 <__alt_mem_onchip_mem+0xff781778>
  801bdc:	5ac00044 	addi	r11,r11,1
  801be0:	588000cc 	andi	r2,r11,3
  801be4:	31800204 	addi	r6,r6,8
  801be8:	103efd1e 	bne	r2,zero,8017e0 <__alt_mem_onchip_mem+0xff7817e0>
  801bec:	00002406 	br	801c80 <_malloc_r+0x660>
  801bf0:	14000317 	ldw	r16,12(r2)
  801bf4:	143f251e 	bne	r2,r16,80188c <__alt_mem_onchip_mem+0xff78188c>
  801bf8:	21000084 	addi	r4,r4,2
  801bfc:	003ebc06 	br	8016f0 <__alt_mem_onchip_mem+0xff7816f0>
  801c00:	8085883a 	add	r2,r16,r2
  801c04:	10c00117 	ldw	r3,4(r2)
  801c08:	81000317 	ldw	r4,12(r16)
  801c0c:	81400217 	ldw	r5,8(r16)
  801c10:	18c00054 	ori	r3,r3,1
  801c14:	10c00115 	stw	r3,4(r2)
  801c18:	29000315 	stw	r4,12(r5)
  801c1c:	21400215 	stw	r5,8(r4)
  801c20:	9009883a 	mov	r4,r18
  801c24:	080e79c0 	call	80e79c <__malloc_unlock>
  801c28:	80800204 	addi	r2,r16,8
  801c2c:	003f2506 	br	8018c4 <__alt_mem_onchip_mem+0xff7818c4>
  801c30:	12001704 	addi	r8,r2,92
  801c34:	11c016c4 	addi	r7,r2,91
  801c38:	4209883a 	add	r4,r8,r8
  801c3c:	003e9606 	br	801698 <__alt_mem_onchip_mem+0xff781698>
  801c40:	3804d1ba 	srli	r2,r7,6
  801c44:	11400e44 	addi	r5,r2,57
  801c48:	10c00e04 	addi	r3,r2,56
  801c4c:	294b883a 	add	r5,r5,r5
  801c50:	003fbc06 	br	801b44 <__alt_mem_onchip_mem+0xff781b44>
  801c54:	84ff5926 	beq	r16,r19,8019bc <__alt_mem_onchip_mem+0xff7819bc>
  801c58:	00802074 	movhi	r2,129
  801c5c:	108b0704 	addi	r2,r2,11292
  801c60:	14000217 	ldw	r16,8(r2)
  801c64:	00bfff04 	movi	r2,-4
  801c68:	80c00117 	ldw	r3,4(r16)
  801c6c:	1886703a 	and	r3,r3,r2
  801c70:	003f9106 	br	801ab8 <__alt_mem_onchip_mem+0xff781ab8>
  801c74:	60800217 	ldw	r2,8(r12)
  801c78:	213fffc4 	addi	r4,r4,-1
  801c7c:	1300651e 	bne	r2,r12,801e14 <_malloc_r+0x7f4>
  801c80:	208000cc 	andi	r2,r4,3
  801c84:	633ffe04 	addi	r12,r12,-8
  801c88:	103ffa1e 	bne	r2,zero,801c74 <__alt_mem_onchip_mem+0xff781c74>
  801c8c:	98800117 	ldw	r2,4(r19)
  801c90:	0146303a 	nor	r3,zero,r5
  801c94:	1884703a 	and	r2,r3,r2
  801c98:	98800115 	stw	r2,4(r19)
  801c9c:	294b883a 	add	r5,r5,r5
  801ca0:	117f2836 	bltu	r2,r5,801944 <__alt_mem_onchip_mem+0xff781944>
  801ca4:	283f2726 	beq	r5,zero,801944 <__alt_mem_onchip_mem+0xff781944>
  801ca8:	2886703a 	and	r3,r5,r2
  801cac:	5809883a 	mov	r4,r11
  801cb0:	183ec31e 	bne	r3,zero,8017c0 <__alt_mem_onchip_mem+0xff7817c0>
  801cb4:	294b883a 	add	r5,r5,r5
  801cb8:	2886703a 	and	r3,r5,r2
  801cbc:	21000104 	addi	r4,r4,4
  801cc0:	183ffc26 	beq	r3,zero,801cb4 <__alt_mem_onchip_mem+0xff781cb4>
  801cc4:	003ebe06 	br	8017c0 <__alt_mem_onchip_mem+0xff7817c0>
  801cc8:	00c05504 	movi	r3,340
  801ccc:	18801236 	bltu	r3,r2,801d18 <_malloc_r+0x6f8>
  801cd0:	8804d3fa 	srli	r2,r17,15
  801cd4:	12001e04 	addi	r8,r2,120
  801cd8:	11c01dc4 	addi	r7,r2,119
  801cdc:	4209883a 	add	r4,r8,r8
  801ce0:	003e6d06 	br	801698 <__alt_mem_onchip_mem+0xff781698>
  801ce4:	00c40004 	movi	r3,4096
  801ce8:	003f4606 	br	801a04 <__alt_mem_onchip_mem+0xff781a04>
  801cec:	00800044 	movi	r2,1
  801cf0:	a0800115 	stw	r2,4(r20)
  801cf4:	003f7406 	br	801ac8 <__alt_mem_onchip_mem+0xff781ac8>
  801cf8:	1805d0ba 	srai	r2,r3,2
  801cfc:	01c00044 	movi	r7,1
  801d00:	30c00117 	ldw	r3,4(r6)
  801d04:	388e983a 	sll	r7,r7,r2
  801d08:	2805883a 	mov	r2,r5
  801d0c:	38c6b03a 	or	r3,r7,r3
  801d10:	30c00115 	stw	r3,4(r6)
  801d14:	003f9b06 	br	801b84 <__alt_mem_onchip_mem+0xff781b84>
  801d18:	00c15504 	movi	r3,1364
  801d1c:	18801a36 	bltu	r3,r2,801d88 <_malloc_r+0x768>
  801d20:	8804d4ba 	srli	r2,r17,18
  801d24:	12001f44 	addi	r8,r2,125
  801d28:	11c01f04 	addi	r7,r2,124
  801d2c:	4209883a 	add	r4,r8,r8
  801d30:	003e5906 	br	801698 <__alt_mem_onchip_mem+0xff781698>
  801d34:	ad400404 	addi	r21,r21,16
  801d38:	003f1706 	br	801998 <__alt_mem_onchip_mem+0xff781998>
  801d3c:	00c01504 	movi	r3,84
  801d40:	18802336 	bltu	r3,r2,801dd0 <_malloc_r+0x7b0>
  801d44:	3804d33a 	srli	r2,r7,12
  801d48:	11401bc4 	addi	r5,r2,111
  801d4c:	10c01b84 	addi	r3,r2,110
  801d50:	294b883a 	add	r5,r5,r5
  801d54:	003f7b06 	br	801b44 <__alt_mem_onchip_mem+0xff781b44>
  801d58:	9c000217 	ldw	r16,8(r19)
  801d5c:	00bfff04 	movi	r2,-4
  801d60:	80c00117 	ldw	r3,4(r16)
  801d64:	1886703a 	and	r3,r3,r2
  801d68:	003f5306 	br	801ab8 <__alt_mem_onchip_mem+0xff781ab8>
  801d6c:	3083ffcc 	andi	r2,r6,4095
  801d70:	103f181e 	bne	r2,zero,8019d4 <__alt_mem_onchip_mem+0xff7819d4>
  801d74:	99000217 	ldw	r4,8(r19)
  801d78:	b545883a 	add	r2,r22,r21
  801d7c:	10800054 	ori	r2,r2,1
  801d80:	20800115 	stw	r2,4(r4)
  801d84:	003f3e06 	br	801a80 <__alt_mem_onchip_mem+0xff781a80>
  801d88:	01003f84 	movi	r4,254
  801d8c:	02001fc4 	movi	r8,127
  801d90:	01c01f84 	movi	r7,126
  801d94:	003e4006 	br	801698 <__alt_mem_onchip_mem+0xff781698>
  801d98:	00802074 	movhi	r2,129
  801d9c:	10912604 	addi	r2,r2,17560
  801da0:	15000015 	stw	r20,0(r2)
  801da4:	003f1106 	br	8019ec <__alt_mem_onchip_mem+0xff7819ec>
  801da8:	00800044 	movi	r2,1
  801dac:	002b883a 	mov	r21,zero
  801db0:	003f1f06 	br	801a30 <__alt_mem_onchip_mem+0xff781a30>
  801db4:	81400204 	addi	r5,r16,8
  801db8:	9009883a 	mov	r4,r18
  801dbc:	08069180 	call	806918 <_free_r>
  801dc0:	00802074 	movhi	r2,129
  801dc4:	10988904 	addi	r2,r2,25124
  801dc8:	10c00017 	ldw	r3,0(r2)
  801dcc:	003f2c06 	br	801a80 <__alt_mem_onchip_mem+0xff781a80>
  801dd0:	00c05504 	movi	r3,340
  801dd4:	18800536 	bltu	r3,r2,801dec <_malloc_r+0x7cc>
  801dd8:	3804d3fa 	srli	r2,r7,15
  801ddc:	11401e04 	addi	r5,r2,120
  801de0:	10c01dc4 	addi	r3,r2,119
  801de4:	294b883a 	add	r5,r5,r5
  801de8:	003f5606 	br	801b44 <__alt_mem_onchip_mem+0xff781b44>
  801dec:	00c15504 	movi	r3,1364
  801df0:	18800536 	bltu	r3,r2,801e08 <_malloc_r+0x7e8>
  801df4:	3804d4ba 	srli	r2,r7,18
  801df8:	11401f44 	addi	r5,r2,125
  801dfc:	10c01f04 	addi	r3,r2,124
  801e00:	294b883a 	add	r5,r5,r5
  801e04:	003f4f06 	br	801b44 <__alt_mem_onchip_mem+0xff781b44>
  801e08:	01403f84 	movi	r5,254
  801e0c:	00c01f84 	movi	r3,126
  801e10:	003f4c06 	br	801b44 <__alt_mem_onchip_mem+0xff781b44>
  801e14:	98800117 	ldw	r2,4(r19)
  801e18:	003fa006 	br	801c9c <__alt_mem_onchip_mem+0xff781c9c>
  801e1c:	8808d0fa 	srli	r4,r17,3
  801e20:	20800044 	addi	r2,r4,1
  801e24:	1085883a 	add	r2,r2,r2
  801e28:	003e9006 	br	80186c <__alt_mem_onchip_mem+0xff78186c>

00801e2c <memset>:
  801e2c:	20c000cc 	andi	r3,r4,3
  801e30:	2005883a 	mov	r2,r4
  801e34:	18004426 	beq	r3,zero,801f48 <memset+0x11c>
  801e38:	31ffffc4 	addi	r7,r6,-1
  801e3c:	30004026 	beq	r6,zero,801f40 <memset+0x114>
  801e40:	2813883a 	mov	r9,r5
  801e44:	200d883a 	mov	r6,r4
  801e48:	2007883a 	mov	r3,r4
  801e4c:	00000406 	br	801e60 <memset+0x34>
  801e50:	3a3fffc4 	addi	r8,r7,-1
  801e54:	31800044 	addi	r6,r6,1
  801e58:	38003926 	beq	r7,zero,801f40 <memset+0x114>
  801e5c:	400f883a 	mov	r7,r8
  801e60:	18c00044 	addi	r3,r3,1
  801e64:	32400005 	stb	r9,0(r6)
  801e68:	1a0000cc 	andi	r8,r3,3
  801e6c:	403ff81e 	bne	r8,zero,801e50 <__alt_mem_onchip_mem+0xff781e50>
  801e70:	010000c4 	movi	r4,3
  801e74:	21c02d2e 	bgeu	r4,r7,801f2c <memset+0x100>
  801e78:	29003fcc 	andi	r4,r5,255
  801e7c:	200c923a 	slli	r6,r4,8
  801e80:	3108b03a 	or	r4,r6,r4
  801e84:	200c943a 	slli	r6,r4,16
  801e88:	218cb03a 	or	r6,r4,r6
  801e8c:	010003c4 	movi	r4,15
  801e90:	21c0182e 	bgeu	r4,r7,801ef4 <memset+0xc8>
  801e94:	3b3ffc04 	addi	r12,r7,-16
  801e98:	6018d13a 	srli	r12,r12,4
  801e9c:	1a000104 	addi	r8,r3,4
  801ea0:	1ac00204 	addi	r11,r3,8
  801ea4:	6008913a 	slli	r4,r12,4
  801ea8:	1a800304 	addi	r10,r3,12
  801eac:	1813883a 	mov	r9,r3
  801eb0:	21000504 	addi	r4,r4,20
  801eb4:	1909883a 	add	r4,r3,r4
  801eb8:	49800015 	stw	r6,0(r9)
  801ebc:	41800015 	stw	r6,0(r8)
  801ec0:	59800015 	stw	r6,0(r11)
  801ec4:	51800015 	stw	r6,0(r10)
  801ec8:	42000404 	addi	r8,r8,16
  801ecc:	4a400404 	addi	r9,r9,16
  801ed0:	5ac00404 	addi	r11,r11,16
  801ed4:	52800404 	addi	r10,r10,16
  801ed8:	413ff71e 	bne	r8,r4,801eb8 <__alt_mem_onchip_mem+0xff781eb8>
  801edc:	63000044 	addi	r12,r12,1
  801ee0:	6018913a 	slli	r12,r12,4
  801ee4:	39c003cc 	andi	r7,r7,15
  801ee8:	010000c4 	movi	r4,3
  801eec:	1b07883a 	add	r3,r3,r12
  801ef0:	21c00e2e 	bgeu	r4,r7,801f2c <memset+0x100>
  801ef4:	1813883a 	mov	r9,r3
  801ef8:	3811883a 	mov	r8,r7
  801efc:	010000c4 	movi	r4,3
  801f00:	49800015 	stw	r6,0(r9)
  801f04:	423fff04 	addi	r8,r8,-4
  801f08:	4a400104 	addi	r9,r9,4
  801f0c:	223ffc36 	bltu	r4,r8,801f00 <__alt_mem_onchip_mem+0xff781f00>
  801f10:	393fff04 	addi	r4,r7,-4
  801f14:	2008d0ba 	srli	r4,r4,2
  801f18:	39c000cc 	andi	r7,r7,3
  801f1c:	21000044 	addi	r4,r4,1
  801f20:	2109883a 	add	r4,r4,r4
  801f24:	2109883a 	add	r4,r4,r4
  801f28:	1907883a 	add	r3,r3,r4
  801f2c:	38000526 	beq	r7,zero,801f44 <memset+0x118>
  801f30:	19cf883a 	add	r7,r3,r7
  801f34:	19400005 	stb	r5,0(r3)
  801f38:	18c00044 	addi	r3,r3,1
  801f3c:	38fffd1e 	bne	r7,r3,801f34 <__alt_mem_onchip_mem+0xff781f34>
  801f40:	f800283a 	ret
  801f44:	f800283a 	ret
  801f48:	2007883a 	mov	r3,r4
  801f4c:	300f883a 	mov	r7,r6
  801f50:	003fc706 	br	801e70 <__alt_mem_onchip_mem+0xff781e70>

00801f54 <_open_r>:
  801f54:	defffd04 	addi	sp,sp,-12
  801f58:	2805883a 	mov	r2,r5
  801f5c:	dc000015 	stw	r16,0(sp)
  801f60:	04002074 	movhi	r16,129
  801f64:	dc400115 	stw	r17,4(sp)
  801f68:	300b883a 	mov	r5,r6
  801f6c:	84187b04 	addi	r16,r16,25068
  801f70:	2023883a 	mov	r17,r4
  801f74:	380d883a 	mov	r6,r7
  801f78:	1009883a 	mov	r4,r2
  801f7c:	dfc00215 	stw	ra,8(sp)
  801f80:	80000015 	stw	zero,0(r16)
  801f84:	080e8c00 	call	80e8c0 <open>
  801f88:	00ffffc4 	movi	r3,-1
  801f8c:	10c00526 	beq	r2,r3,801fa4 <_open_r+0x50>
  801f90:	dfc00217 	ldw	ra,8(sp)
  801f94:	dc400117 	ldw	r17,4(sp)
  801f98:	dc000017 	ldw	r16,0(sp)
  801f9c:	dec00304 	addi	sp,sp,12
  801fa0:	f800283a 	ret
  801fa4:	80c00017 	ldw	r3,0(r16)
  801fa8:	183ff926 	beq	r3,zero,801f90 <__alt_mem_onchip_mem+0xff781f90>
  801fac:	88c00015 	stw	r3,0(r17)
  801fb0:	003ff706 	br	801f90 <__alt_mem_onchip_mem+0xff781f90>

00801fb4 <_printf_r>:
  801fb4:	defffd04 	addi	sp,sp,-12
  801fb8:	2805883a 	mov	r2,r5
  801fbc:	dfc00015 	stw	ra,0(sp)
  801fc0:	d9800115 	stw	r6,4(sp)
  801fc4:	d9c00215 	stw	r7,8(sp)
  801fc8:	21400217 	ldw	r5,8(r4)
  801fcc:	d9c00104 	addi	r7,sp,4
  801fd0:	100d883a 	mov	r6,r2
  801fd4:	08023a00 	call	8023a0 <___vfprintf_internal_r>
  801fd8:	dfc00017 	ldw	ra,0(sp)
  801fdc:	dec00304 	addi	sp,sp,12
  801fe0:	f800283a 	ret

00801fe4 <printf>:
  801fe4:	defffc04 	addi	sp,sp,-16
  801fe8:	dfc00015 	stw	ra,0(sp)
  801fec:	d9400115 	stw	r5,4(sp)
  801ff0:	d9800215 	stw	r6,8(sp)
  801ff4:	d9c00315 	stw	r7,12(sp)
  801ff8:	00802074 	movhi	r2,129
  801ffc:	10912504 	addi	r2,r2,17556
  802000:	10800017 	ldw	r2,0(r2)
  802004:	200b883a 	mov	r5,r4
  802008:	d9800104 	addi	r6,sp,4
  80200c:	11000217 	ldw	r4,8(r2)
  802010:	08045980 	call	804598 <__vfprintf_internal>
  802014:	dfc00017 	ldw	ra,0(sp)
  802018:	dec00404 	addi	sp,sp,16
  80201c:	f800283a 	ret

00802020 <lflush>:
  802020:	2080030b 	ldhu	r2,12(r4)
  802024:	00c00244 	movi	r3,9
  802028:	1080024c 	andi	r2,r2,9
  80202c:	10c00226 	beq	r2,r3,802038 <lflush+0x18>
  802030:	0005883a 	mov	r2,zero
  802034:	f800283a 	ret
  802038:	08063781 	jmpi	806378 <fflush>

0080203c <__srefill_r>:
  80203c:	defffc04 	addi	sp,sp,-16
  802040:	dc400115 	stw	r17,4(sp)
  802044:	dc000015 	stw	r16,0(sp)
  802048:	dfc00315 	stw	ra,12(sp)
  80204c:	dc800215 	stw	r18,8(sp)
  802050:	2023883a 	mov	r17,r4
  802054:	2821883a 	mov	r16,r5
  802058:	20000226 	beq	r4,zero,802064 <__srefill_r+0x28>
  80205c:	20800e17 	ldw	r2,56(r4)
  802060:	10003c26 	beq	r2,zero,802154 <__srefill_r+0x118>
  802064:	80c0030b 	ldhu	r3,12(r16)
  802068:	1908000c 	andi	r4,r3,8192
  80206c:	1805883a 	mov	r2,r3
  802070:	2000071e 	bne	r4,zero,802090 <__srefill_r+0x54>
  802074:	81001917 	ldw	r4,100(r16)
  802078:	18880014 	ori	r2,r3,8192
  80207c:	00f7ffc4 	movi	r3,-8193
  802080:	20c8703a 	and	r4,r4,r3
  802084:	8080030d 	sth	r2,12(r16)
  802088:	1007883a 	mov	r3,r2
  80208c:	81001915 	stw	r4,100(r16)
  802090:	80000115 	stw	zero,4(r16)
  802094:	1100080c 	andi	r4,r2,32
  802098:	2000571e 	bne	r4,zero,8021f8 <__srefill_r+0x1bc>
  80209c:	1100010c 	andi	r4,r2,4
  8020a0:	20001f26 	beq	r4,zero,802120 <__srefill_r+0xe4>
  8020a4:	81400c17 	ldw	r5,48(r16)
  8020a8:	28000826 	beq	r5,zero,8020cc <__srefill_r+0x90>
  8020ac:	80801004 	addi	r2,r16,64
  8020b0:	28800226 	beq	r5,r2,8020bc <__srefill_r+0x80>
  8020b4:	8809883a 	mov	r4,r17
  8020b8:	08069180 	call	806918 <_free_r>
  8020bc:	80800f17 	ldw	r2,60(r16)
  8020c0:	80000c15 	stw	zero,48(r16)
  8020c4:	80800115 	stw	r2,4(r16)
  8020c8:	1000391e 	bne	r2,zero,8021b0 <__srefill_r+0x174>
  8020cc:	80800417 	ldw	r2,16(r16)
  8020d0:	10004b26 	beq	r2,zero,802200 <__srefill_r+0x1c4>
  8020d4:	8480030b 	ldhu	r18,12(r16)
  8020d8:	908000cc 	andi	r2,r18,3
  8020dc:	10001f1e 	bne	r2,zero,80215c <__srefill_r+0x120>
  8020e0:	81800417 	ldw	r6,16(r16)
  8020e4:	80800817 	ldw	r2,32(r16)
  8020e8:	81c00517 	ldw	r7,20(r16)
  8020ec:	81400717 	ldw	r5,28(r16)
  8020f0:	81800015 	stw	r6,0(r16)
  8020f4:	8809883a 	mov	r4,r17
  8020f8:	103ee83a 	callr	r2
  8020fc:	80800115 	stw	r2,4(r16)
  802100:	00800e0e 	bge	zero,r2,80213c <__srefill_r+0x100>
  802104:	0005883a 	mov	r2,zero
  802108:	dfc00317 	ldw	ra,12(sp)
  80210c:	dc800217 	ldw	r18,8(sp)
  802110:	dc400117 	ldw	r17,4(sp)
  802114:	dc000017 	ldw	r16,0(sp)
  802118:	dec00404 	addi	sp,sp,16
  80211c:	f800283a 	ret
  802120:	1100040c 	andi	r4,r2,16
  802124:	20003026 	beq	r4,zero,8021e8 <__srefill_r+0x1ac>
  802128:	1080020c 	andi	r2,r2,8
  80212c:	1000241e 	bne	r2,zero,8021c0 <__srefill_r+0x184>
  802130:	18c00114 	ori	r3,r3,4
  802134:	80c0030d 	sth	r3,12(r16)
  802138:	003fe406 	br	8020cc <__alt_mem_onchip_mem+0xff7820cc>
  80213c:	80c0030b 	ldhu	r3,12(r16)
  802140:	1000161e 	bne	r2,zero,80219c <__srefill_r+0x160>
  802144:	18c00814 	ori	r3,r3,32
  802148:	00bfffc4 	movi	r2,-1
  80214c:	80c0030d 	sth	r3,12(r16)
  802150:	003fed06 	br	802108 <__alt_mem_onchip_mem+0xff782108>
  802154:	08066f80 	call	8066f8 <__sinit>
  802158:	003fc206 	br	802064 <__alt_mem_onchip_mem+0xff782064>
  80215c:	00802074 	movhi	r2,129
  802160:	10912404 	addi	r2,r2,17552
  802164:	11000017 	ldw	r4,0(r2)
  802168:	01402034 	movhi	r5,128
  80216c:	00800044 	movi	r2,1
  802170:	29480804 	addi	r5,r5,8224
  802174:	8080030d 	sth	r2,12(r16)
  802178:	0806c280 	call	806c28 <_fwalk>
  80217c:	00800244 	movi	r2,9
  802180:	8480030d 	sth	r18,12(r16)
  802184:	9480024c 	andi	r18,r18,9
  802188:	90bfd51e 	bne	r18,r2,8020e0 <__alt_mem_onchip_mem+0xff7820e0>
  80218c:	800b883a 	mov	r5,r16
  802190:	8809883a 	mov	r4,r17
  802194:	08061000 	call	806100 <__sflush_r>
  802198:	003fd106 	br	8020e0 <__alt_mem_onchip_mem+0xff7820e0>
  80219c:	18c01014 	ori	r3,r3,64
  8021a0:	80000115 	stw	zero,4(r16)
  8021a4:	00bfffc4 	movi	r2,-1
  8021a8:	80c0030d 	sth	r3,12(r16)
  8021ac:	003fd606 	br	802108 <__alt_mem_onchip_mem+0xff782108>
  8021b0:	80c00e17 	ldw	r3,56(r16)
  8021b4:	0005883a 	mov	r2,zero
  8021b8:	80c00015 	stw	r3,0(r16)
  8021bc:	003fd206 	br	802108 <__alt_mem_onchip_mem+0xff782108>
  8021c0:	800b883a 	mov	r5,r16
  8021c4:	8809883a 	mov	r4,r17
  8021c8:	080631c0 	call	80631c <_fflush_r>
  8021cc:	10000a1e 	bne	r2,zero,8021f8 <__srefill_r+0x1bc>
  8021d0:	8080030b 	ldhu	r2,12(r16)
  8021d4:	00fffdc4 	movi	r3,-9
  8021d8:	80000215 	stw	zero,8(r16)
  8021dc:	1886703a 	and	r3,r3,r2
  8021e0:	80000615 	stw	zero,24(r16)
  8021e4:	003fd206 	br	802130 <__alt_mem_onchip_mem+0xff782130>
  8021e8:	00800244 	movi	r2,9
  8021ec:	88800015 	stw	r2,0(r17)
  8021f0:	18c01014 	ori	r3,r3,64
  8021f4:	80c0030d 	sth	r3,12(r16)
  8021f8:	00bfffc4 	movi	r2,-1
  8021fc:	003fc206 	br	802108 <__alt_mem_onchip_mem+0xff782108>
  802200:	800b883a 	mov	r5,r16
  802204:	8809883a 	mov	r4,r17
  802208:	08014640 	call	801464 <__smakebuf_r>
  80220c:	003fb106 	br	8020d4 <__alt_mem_onchip_mem+0xff7820d4>

00802210 <_sbrk_r>:
  802210:	defffd04 	addi	sp,sp,-12
  802214:	dc000015 	stw	r16,0(sp)
  802218:	04002074 	movhi	r16,129
  80221c:	dc400115 	stw	r17,4(sp)
  802220:	84187b04 	addi	r16,r16,25068
  802224:	2023883a 	mov	r17,r4
  802228:	2809883a 	mov	r4,r5
  80222c:	dfc00215 	stw	ra,8(sp)
  802230:	80000015 	stw	zero,0(r16)
  802234:	080ebb00 	call	80ebb0 <sbrk>
  802238:	00ffffc4 	movi	r3,-1
  80223c:	10c00526 	beq	r2,r3,802254 <_sbrk_r+0x44>
  802240:	dfc00217 	ldw	ra,8(sp)
  802244:	dc400117 	ldw	r17,4(sp)
  802248:	dc000017 	ldw	r16,0(sp)
  80224c:	dec00304 	addi	sp,sp,12
  802250:	f800283a 	ret
  802254:	80c00017 	ldw	r3,0(r16)
  802258:	183ff926 	beq	r3,zero,802240 <__alt_mem_onchip_mem+0xff782240>
  80225c:	88c00015 	stw	r3,0(r17)
  802260:	003ff706 	br	802240 <__alt_mem_onchip_mem+0xff782240>

00802264 <__sread>:
  802264:	defffe04 	addi	sp,sp,-8
  802268:	dc000015 	stw	r16,0(sp)
  80226c:	2821883a 	mov	r16,r5
  802270:	2940038f 	ldh	r5,14(r5)
  802274:	dfc00115 	stw	ra,4(sp)
  802278:	08081680 	call	808168 <_read_r>
  80227c:	10000716 	blt	r2,zero,80229c <__sread+0x38>
  802280:	80c01417 	ldw	r3,80(r16)
  802284:	1887883a 	add	r3,r3,r2
  802288:	80c01415 	stw	r3,80(r16)
  80228c:	dfc00117 	ldw	ra,4(sp)
  802290:	dc000017 	ldw	r16,0(sp)
  802294:	dec00204 	addi	sp,sp,8
  802298:	f800283a 	ret
  80229c:	80c0030b 	ldhu	r3,12(r16)
  8022a0:	18fbffcc 	andi	r3,r3,61439
  8022a4:	80c0030d 	sth	r3,12(r16)
  8022a8:	dfc00117 	ldw	ra,4(sp)
  8022ac:	dc000017 	ldw	r16,0(sp)
  8022b0:	dec00204 	addi	sp,sp,8
  8022b4:	f800283a 	ret

008022b8 <__seofread>:
  8022b8:	0005883a 	mov	r2,zero
  8022bc:	f800283a 	ret

008022c0 <__swrite>:
  8022c0:	2880030b 	ldhu	r2,12(r5)
  8022c4:	defffb04 	addi	sp,sp,-20
  8022c8:	dcc00315 	stw	r19,12(sp)
  8022cc:	dc800215 	stw	r18,8(sp)
  8022d0:	dc400115 	stw	r17,4(sp)
  8022d4:	dc000015 	stw	r16,0(sp)
  8022d8:	dfc00415 	stw	ra,16(sp)
  8022dc:	10c0400c 	andi	r3,r2,256
  8022e0:	2821883a 	mov	r16,r5
  8022e4:	2023883a 	mov	r17,r4
  8022e8:	3025883a 	mov	r18,r6
  8022ec:	3827883a 	mov	r19,r7
  8022f0:	18000526 	beq	r3,zero,802308 <__swrite+0x48>
  8022f4:	2940038f 	ldh	r5,14(r5)
  8022f8:	01c00084 	movi	r7,2
  8022fc:	000d883a 	mov	r6,zero
  802300:	0806ee00 	call	806ee0 <_lseek_r>
  802304:	8080030b 	ldhu	r2,12(r16)
  802308:	8140038f 	ldh	r5,14(r16)
  80230c:	10bbffcc 	andi	r2,r2,61439
  802310:	980f883a 	mov	r7,r19
  802314:	900d883a 	mov	r6,r18
  802318:	8809883a 	mov	r4,r17
  80231c:	8080030d 	sth	r2,12(r16)
  802320:	dfc00417 	ldw	ra,16(sp)
  802324:	dcc00317 	ldw	r19,12(sp)
  802328:	dc800217 	ldw	r18,8(sp)
  80232c:	dc400117 	ldw	r17,4(sp)
  802330:	dc000017 	ldw	r16,0(sp)
  802334:	dec00504 	addi	sp,sp,20
  802338:	08046701 	jmpi	804670 <_write_r>

0080233c <__sseek>:
  80233c:	defffe04 	addi	sp,sp,-8
  802340:	dc000015 	stw	r16,0(sp)
  802344:	2821883a 	mov	r16,r5
  802348:	2940038f 	ldh	r5,14(r5)
  80234c:	dfc00115 	stw	ra,4(sp)
  802350:	0806ee00 	call	806ee0 <_lseek_r>
  802354:	00ffffc4 	movi	r3,-1
  802358:	10c00826 	beq	r2,r3,80237c <__sseek+0x40>
  80235c:	80c0030b 	ldhu	r3,12(r16)
  802360:	80801415 	stw	r2,80(r16)
  802364:	18c40014 	ori	r3,r3,4096
  802368:	80c0030d 	sth	r3,12(r16)
  80236c:	dfc00117 	ldw	ra,4(sp)
  802370:	dc000017 	ldw	r16,0(sp)
  802374:	dec00204 	addi	sp,sp,8
  802378:	f800283a 	ret
  80237c:	80c0030b 	ldhu	r3,12(r16)
  802380:	18fbffcc 	andi	r3,r3,61439
  802384:	80c0030d 	sth	r3,12(r16)
  802388:	dfc00117 	ldw	ra,4(sp)
  80238c:	dc000017 	ldw	r16,0(sp)
  802390:	dec00204 	addi	sp,sp,8
  802394:	f800283a 	ret

00802398 <__sclose>:
  802398:	2940038f 	ldh	r5,14(r5)
  80239c:	08048241 	jmpi	804824 <_close_r>

008023a0 <___vfprintf_internal_r>:
  8023a0:	deffb804 	addi	sp,sp,-288
  8023a4:	dfc04715 	stw	ra,284(sp)
  8023a8:	ddc04515 	stw	r23,276(sp)
  8023ac:	dd404315 	stw	r21,268(sp)
  8023b0:	d9002c15 	stw	r4,176(sp)
  8023b4:	282f883a 	mov	r23,r5
  8023b8:	302b883a 	mov	r21,r6
  8023bc:	d9c02d15 	stw	r7,180(sp)
  8023c0:	df004615 	stw	fp,280(sp)
  8023c4:	dd804415 	stw	r22,272(sp)
  8023c8:	dd004215 	stw	r20,264(sp)
  8023cc:	dcc04115 	stw	r19,260(sp)
  8023d0:	dc804015 	stw	r18,256(sp)
  8023d4:	dc403f15 	stw	r17,252(sp)
  8023d8:	dc003e15 	stw	r16,248(sp)
  8023dc:	0806eb00 	call	806eb0 <_localeconv_r>
  8023e0:	10800017 	ldw	r2,0(r2)
  8023e4:	1009883a 	mov	r4,r2
  8023e8:	d8803415 	stw	r2,208(sp)
  8023ec:	08083180 	call	808318 <strlen>
  8023f0:	d8803715 	stw	r2,220(sp)
  8023f4:	d8802c17 	ldw	r2,176(sp)
  8023f8:	10000226 	beq	r2,zero,802404 <___vfprintf_internal_r+0x64>
  8023fc:	10800e17 	ldw	r2,56(r2)
  802400:	1000f926 	beq	r2,zero,8027e8 <___vfprintf_internal_r+0x448>
  802404:	b880030b 	ldhu	r2,12(r23)
  802408:	10c8000c 	andi	r3,r2,8192
  80240c:	1800061e 	bne	r3,zero,802428 <___vfprintf_internal_r+0x88>
  802410:	b9001917 	ldw	r4,100(r23)
  802414:	00f7ffc4 	movi	r3,-8193
  802418:	10880014 	ori	r2,r2,8192
  80241c:	20c6703a 	and	r3,r4,r3
  802420:	b880030d 	sth	r2,12(r23)
  802424:	b8c01915 	stw	r3,100(r23)
  802428:	10c0020c 	andi	r3,r2,8
  80242c:	1800c126 	beq	r3,zero,802734 <___vfprintf_internal_r+0x394>
  802430:	b8c00417 	ldw	r3,16(r23)
  802434:	1800bf26 	beq	r3,zero,802734 <___vfprintf_internal_r+0x394>
  802438:	1080068c 	andi	r2,r2,26
  80243c:	00c00284 	movi	r3,10
  802440:	10c0c426 	beq	r2,r3,802754 <___vfprintf_internal_r+0x3b4>
  802444:	d8c00404 	addi	r3,sp,16
  802448:	05002074 	movhi	r20,129
  80244c:	d9001e04 	addi	r4,sp,120
  802450:	a508ac84 	addi	r20,r20,8882
  802454:	d8c01e15 	stw	r3,120(sp)
  802458:	d8002015 	stw	zero,128(sp)
  80245c:	d8001f15 	stw	zero,124(sp)
  802460:	d8003315 	stw	zero,204(sp)
  802464:	d8003615 	stw	zero,216(sp)
  802468:	d8003815 	stw	zero,224(sp)
  80246c:	1811883a 	mov	r8,r3
  802470:	d8003915 	stw	zero,228(sp)
  802474:	d8003a15 	stw	zero,232(sp)
  802478:	d8002f15 	stw	zero,188(sp)
  80247c:	d9002815 	stw	r4,160(sp)
  802480:	a8800007 	ldb	r2,0(r21)
  802484:	10027b26 	beq	r2,zero,802e74 <___vfprintf_internal_r+0xad4>
  802488:	00c00944 	movi	r3,37
  80248c:	a821883a 	mov	r16,r21
  802490:	10c0021e 	bne	r2,r3,80249c <___vfprintf_internal_r+0xfc>
  802494:	00001406 	br	8024e8 <___vfprintf_internal_r+0x148>
  802498:	10c00326 	beq	r2,r3,8024a8 <___vfprintf_internal_r+0x108>
  80249c:	84000044 	addi	r16,r16,1
  8024a0:	80800007 	ldb	r2,0(r16)
  8024a4:	103ffc1e 	bne	r2,zero,802498 <__alt_mem_onchip_mem+0xff782498>
  8024a8:	8563c83a 	sub	r17,r16,r21
  8024ac:	88000e26 	beq	r17,zero,8024e8 <___vfprintf_internal_r+0x148>
  8024b0:	d8c02017 	ldw	r3,128(sp)
  8024b4:	d8801f17 	ldw	r2,124(sp)
  8024b8:	45400015 	stw	r21,0(r8)
  8024bc:	1c47883a 	add	r3,r3,r17
  8024c0:	10800044 	addi	r2,r2,1
  8024c4:	d8c02015 	stw	r3,128(sp)
  8024c8:	44400115 	stw	r17,4(r8)
  8024cc:	d8801f15 	stw	r2,124(sp)
  8024d0:	00c001c4 	movi	r3,7
  8024d4:	1880a716 	blt	r3,r2,802774 <___vfprintf_internal_r+0x3d4>
  8024d8:	42000204 	addi	r8,r8,8
  8024dc:	d9402f17 	ldw	r5,188(sp)
  8024e0:	2c4b883a 	add	r5,r5,r17
  8024e4:	d9402f15 	stw	r5,188(sp)
  8024e8:	80800007 	ldb	r2,0(r16)
  8024ec:	1000a826 	beq	r2,zero,802790 <___vfprintf_internal_r+0x3f0>
  8024f0:	84400047 	ldb	r17,1(r16)
  8024f4:	00bfffc4 	movi	r2,-1
  8024f8:	85400044 	addi	r21,r16,1
  8024fc:	d8002785 	stb	zero,158(sp)
  802500:	0007883a 	mov	r3,zero
  802504:	000f883a 	mov	r7,zero
  802508:	d8802915 	stw	r2,164(sp)
  80250c:	d8003115 	stw	zero,196(sp)
  802510:	0025883a 	mov	r18,zero
  802514:	01401604 	movi	r5,88
  802518:	01800244 	movi	r6,9
  80251c:	02800a84 	movi	r10,42
  802520:	02401b04 	movi	r9,108
  802524:	ad400044 	addi	r21,r21,1
  802528:	88bff804 	addi	r2,r17,-32
  80252c:	28830436 	bltu	r5,r2,803140 <___vfprintf_internal_r+0xda0>
  802530:	100490ba 	slli	r2,r2,2
  802534:	01002034 	movhi	r4,128
  802538:	21095204 	addi	r4,r4,9544
  80253c:	1105883a 	add	r2,r2,r4
  802540:	10800017 	ldw	r2,0(r2)
  802544:	1000683a 	jmp	r2
  802548:	00803060 	cmpeqi	r2,zero,193
  80254c:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802550:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802554:	00803080 	call	80308 <__alt_mem_sdram-0x77fcf8>
  802558:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  80255c:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802560:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802564:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802568:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  80256c:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802570:	008027f4 	movhi	r2,159
  802574:	00802f9c 	xori	r2,zero,190
  802578:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  80257c:	008026bc 	xorhi	r2,zero,154
  802580:	0080281c 	xori	r2,zero,160
  802584:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802588:	0080285c 	xori	r2,zero,161
  80258c:	00802868 	cmpgeui	r2,zero,161
  802590:	00802868 	cmpgeui	r2,zero,161
  802594:	00802868 	cmpgeui	r2,zero,161
  802598:	00802868 	cmpgeui	r2,zero,161
  80259c:	00802868 	cmpgeui	r2,zero,161
  8025a0:	00802868 	cmpgeui	r2,zero,161
  8025a4:	00802868 	cmpgeui	r2,zero,161
  8025a8:	00802868 	cmpgeui	r2,zero,161
  8025ac:	00802868 	cmpgeui	r2,zero,161
  8025b0:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  8025b4:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  8025b8:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  8025bc:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  8025c0:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  8025c4:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  8025c8:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  8025cc:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  8025d0:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  8025d4:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  8025d8:	0080289c 	xori	r2,zero,162
  8025dc:	00802958 	cmpnei	r2,zero,165
  8025e0:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  8025e4:	00802958 	cmpnei	r2,zero,165
  8025e8:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  8025ec:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  8025f0:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  8025f4:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  8025f8:	008029f8 	rdprs	r2,zero,167
  8025fc:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802600:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802604:	00802a04 	movi	r2,168
  802608:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  80260c:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802610:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802614:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802618:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  80261c:	00802e7c 	xorhi	r2,zero,185
  802620:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802624:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802628:	00802edc 	xori	r2,zero,187
  80262c:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802630:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802634:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802638:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  80263c:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802640:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802644:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802648:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  80264c:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802650:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802654:	008030ec 	andhi	r2,zero,195
  802658:	0080308c 	andi	r2,zero,194
  80265c:	00802958 	cmpnei	r2,zero,165
  802660:	00802958 	cmpnei	r2,zero,165
  802664:	00802958 	cmpnei	r2,zero,165
  802668:	0080309c 	xori	r2,zero,194
  80266c:	0080308c 	andi	r2,zero,194
  802670:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802674:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802678:	008030a8 	cmpgeui	r2,zero,194
  80267c:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802680:	008030b8 	rdprs	r2,zero,194
  802684:	00802f8c 	andi	r2,zero,190
  802688:	008026c8 	cmpgei	r2,zero,155
  80268c:	00802fac 	andhi	r2,zero,190
  802690:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  802694:	00802fb8 	rdprs	r2,zero,190
  802698:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  80269c:	00803014 	movui	r2,192
  8026a0:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  8026a4:	00803140 	call	80314 <__alt_mem_sdram-0x77fcec>
  8026a8:	00803024 	muli	r2,zero,192
  8026ac:	d9003117 	ldw	r4,196(sp)
  8026b0:	d8802d15 	stw	r2,180(sp)
  8026b4:	0109c83a 	sub	r4,zero,r4
  8026b8:	d9003115 	stw	r4,196(sp)
  8026bc:	94800114 	ori	r18,r18,4
  8026c0:	ac400007 	ldb	r17,0(r21)
  8026c4:	003f9706 	br	802524 <__alt_mem_onchip_mem+0xff782524>
  8026c8:	00800c04 	movi	r2,48
  8026cc:	d9002d17 	ldw	r4,180(sp)
  8026d0:	d9402917 	ldw	r5,164(sp)
  8026d4:	d8802705 	stb	r2,156(sp)
  8026d8:	00801e04 	movi	r2,120
  8026dc:	d8802745 	stb	r2,157(sp)
  8026e0:	d8002785 	stb	zero,158(sp)
  8026e4:	20c00104 	addi	r3,r4,4
  8026e8:	24c00017 	ldw	r19,0(r4)
  8026ec:	002d883a 	mov	r22,zero
  8026f0:	90800094 	ori	r2,r18,2
  8026f4:	28029a16 	blt	r5,zero,803160 <___vfprintf_internal_r+0xdc0>
  8026f8:	00bfdfc4 	movi	r2,-129
  8026fc:	90a4703a 	and	r18,r18,r2
  802700:	d8c02d15 	stw	r3,180(sp)
  802704:	94800094 	ori	r18,r18,2
  802708:	9802871e 	bne	r19,zero,803128 <___vfprintf_internal_r+0xd88>
  80270c:	00802074 	movhi	r2,129
  802710:	1088a504 	addi	r2,r2,8852
  802714:	d8803915 	stw	r2,228(sp)
  802718:	04401e04 	movi	r17,120
  80271c:	d8802917 	ldw	r2,164(sp)
  802720:	0039883a 	mov	fp,zero
  802724:	1001e926 	beq	r2,zero,802ecc <___vfprintf_internal_r+0xb2c>
  802728:	0027883a 	mov	r19,zero
  80272c:	002d883a 	mov	r22,zero
  802730:	00020506 	br	802f48 <___vfprintf_internal_r+0xba8>
  802734:	d9002c17 	ldw	r4,176(sp)
  802738:	b80b883a 	mov	r5,r23
  80273c:	08046d00 	call	8046d0 <__swsetup_r>
  802740:	1005ac1e 	bne	r2,zero,803df4 <___vfprintf_internal_r+0x1a54>
  802744:	b880030b 	ldhu	r2,12(r23)
  802748:	00c00284 	movi	r3,10
  80274c:	1080068c 	andi	r2,r2,26
  802750:	10ff3c1e 	bne	r2,r3,802444 <__alt_mem_onchip_mem+0xff782444>
  802754:	b880038f 	ldh	r2,14(r23)
  802758:	103f3a16 	blt	r2,zero,802444 <__alt_mem_onchip_mem+0xff782444>
  80275c:	d9c02d17 	ldw	r7,180(sp)
  802760:	d9002c17 	ldw	r4,176(sp)
  802764:	a80d883a 	mov	r6,r21
  802768:	b80b883a 	mov	r5,r23
  80276c:	08045b40 	call	8045b4 <__sbprintf>
  802770:	00001106 	br	8027b8 <___vfprintf_internal_r+0x418>
  802774:	d9002c17 	ldw	r4,176(sp)
  802778:	d9801e04 	addi	r6,sp,120
  80277c:	b80b883a 	mov	r5,r23
  802780:	08084ac0 	call	8084ac <__sprint_r>
  802784:	1000081e 	bne	r2,zero,8027a8 <___vfprintf_internal_r+0x408>
  802788:	da000404 	addi	r8,sp,16
  80278c:	003f5306 	br	8024dc <__alt_mem_onchip_mem+0xff7824dc>
  802790:	d8802017 	ldw	r2,128(sp)
  802794:	10000426 	beq	r2,zero,8027a8 <___vfprintf_internal_r+0x408>
  802798:	d9002c17 	ldw	r4,176(sp)
  80279c:	d9801e04 	addi	r6,sp,120
  8027a0:	b80b883a 	mov	r5,r23
  8027a4:	08084ac0 	call	8084ac <__sprint_r>
  8027a8:	b880030b 	ldhu	r2,12(r23)
  8027ac:	1080100c 	andi	r2,r2,64
  8027b0:	1005901e 	bne	r2,zero,803df4 <___vfprintf_internal_r+0x1a54>
  8027b4:	d8802f17 	ldw	r2,188(sp)
  8027b8:	dfc04717 	ldw	ra,284(sp)
  8027bc:	df004617 	ldw	fp,280(sp)
  8027c0:	ddc04517 	ldw	r23,276(sp)
  8027c4:	dd804417 	ldw	r22,272(sp)
  8027c8:	dd404317 	ldw	r21,268(sp)
  8027cc:	dd004217 	ldw	r20,264(sp)
  8027d0:	dcc04117 	ldw	r19,260(sp)
  8027d4:	dc804017 	ldw	r18,256(sp)
  8027d8:	dc403f17 	ldw	r17,252(sp)
  8027dc:	dc003e17 	ldw	r16,248(sp)
  8027e0:	dec04804 	addi	sp,sp,288
  8027e4:	f800283a 	ret
  8027e8:	d9002c17 	ldw	r4,176(sp)
  8027ec:	08066f80 	call	8066f8 <__sinit>
  8027f0:	003f0406 	br	802404 <__alt_mem_onchip_mem+0xff782404>
  8027f4:	d8802d17 	ldw	r2,180(sp)
  8027f8:	d9002d17 	ldw	r4,180(sp)
  8027fc:	10800017 	ldw	r2,0(r2)
  802800:	d8803115 	stw	r2,196(sp)
  802804:	20800104 	addi	r2,r4,4
  802808:	d9003117 	ldw	r4,196(sp)
  80280c:	203fa716 	blt	r4,zero,8026ac <__alt_mem_onchip_mem+0xff7826ac>
  802810:	d8802d15 	stw	r2,180(sp)
  802814:	ac400007 	ldb	r17,0(r21)
  802818:	003f4206 	br	802524 <__alt_mem_onchip_mem+0xff782524>
  80281c:	ac400007 	ldb	r17,0(r21)
  802820:	aac00044 	addi	r11,r21,1
  802824:	8a872826 	beq	r17,r10,8044c8 <___vfprintf_internal_r+0x2128>
  802828:	88bff404 	addi	r2,r17,-48
  80282c:	0009883a 	mov	r4,zero
  802830:	30867d36 	bltu	r6,r2,804228 <___vfprintf_internal_r+0x1e88>
  802834:	5c400007 	ldb	r17,0(r11)
  802838:	210002a4 	muli	r4,r4,10
  80283c:	5d400044 	addi	r21,r11,1
  802840:	a817883a 	mov	r11,r21
  802844:	2089883a 	add	r4,r4,r2
  802848:	88bff404 	addi	r2,r17,-48
  80284c:	30bff92e 	bgeu	r6,r2,802834 <__alt_mem_onchip_mem+0xff782834>
  802850:	2005c916 	blt	r4,zero,803f78 <___vfprintf_internal_r+0x1bd8>
  802854:	d9002915 	stw	r4,164(sp)
  802858:	003f3306 	br	802528 <__alt_mem_onchip_mem+0xff782528>
  80285c:	94802014 	ori	r18,r18,128
  802860:	ac400007 	ldb	r17,0(r21)
  802864:	003f2f06 	br	802524 <__alt_mem_onchip_mem+0xff782524>
  802868:	a809883a 	mov	r4,r21
  80286c:	d8003115 	stw	zero,196(sp)
  802870:	88bff404 	addi	r2,r17,-48
  802874:	0017883a 	mov	r11,zero
  802878:	24400007 	ldb	r17,0(r4)
  80287c:	5ac002a4 	muli	r11,r11,10
  802880:	ad400044 	addi	r21,r21,1
  802884:	a809883a 	mov	r4,r21
  802888:	12d7883a 	add	r11,r2,r11
  80288c:	88bff404 	addi	r2,r17,-48
  802890:	30bff92e 	bgeu	r6,r2,802878 <__alt_mem_onchip_mem+0xff782878>
  802894:	dac03115 	stw	r11,196(sp)
  802898:	003f2306 	br	802528 <__alt_mem_onchip_mem+0xff782528>
  80289c:	18c03fcc 	andi	r3,r3,255
  8028a0:	18072b1e 	bne	r3,zero,804550 <___vfprintf_internal_r+0x21b0>
  8028a4:	94800414 	ori	r18,r18,16
  8028a8:	9080080c 	andi	r2,r18,32
  8028ac:	10037b26 	beq	r2,zero,80369c <___vfprintf_internal_r+0x12fc>
  8028b0:	d9402d17 	ldw	r5,180(sp)
  8028b4:	28800117 	ldw	r2,4(r5)
  8028b8:	2cc00017 	ldw	r19,0(r5)
  8028bc:	29400204 	addi	r5,r5,8
  8028c0:	d9402d15 	stw	r5,180(sp)
  8028c4:	102d883a 	mov	r22,r2
  8028c8:	10044b16 	blt	r2,zero,8039f8 <___vfprintf_internal_r+0x1658>
  8028cc:	d9402917 	ldw	r5,164(sp)
  8028d0:	df002783 	ldbu	fp,158(sp)
  8028d4:	2803bc16 	blt	r5,zero,8037c8 <___vfprintf_internal_r+0x1428>
  8028d8:	00ffdfc4 	movi	r3,-129
  8028dc:	9d84b03a 	or	r2,r19,r22
  8028e0:	90e4703a 	and	r18,r18,r3
  8028e4:	10017726 	beq	r2,zero,802ec4 <___vfprintf_internal_r+0xb24>
  8028e8:	b0038326 	beq	r22,zero,8036f8 <___vfprintf_internal_r+0x1358>
  8028ec:	dc402a15 	stw	r17,168(sp)
  8028f0:	dc001e04 	addi	r16,sp,120
  8028f4:	b023883a 	mov	r17,r22
  8028f8:	402d883a 	mov	r22,r8
  8028fc:	9809883a 	mov	r4,r19
  802900:	880b883a 	mov	r5,r17
  802904:	01800284 	movi	r6,10
  802908:	000f883a 	mov	r7,zero
  80290c:	080b1fc0 	call	80b1fc <__umoddi3>
  802910:	10800c04 	addi	r2,r2,48
  802914:	843fffc4 	addi	r16,r16,-1
  802918:	9809883a 	mov	r4,r19
  80291c:	880b883a 	mov	r5,r17
  802920:	80800005 	stb	r2,0(r16)
  802924:	01800284 	movi	r6,10
  802928:	000f883a 	mov	r7,zero
  80292c:	080ac840 	call	80ac84 <__udivdi3>
  802930:	1027883a 	mov	r19,r2
  802934:	10c4b03a 	or	r2,r2,r3
  802938:	1823883a 	mov	r17,r3
  80293c:	103fef1e 	bne	r2,zero,8028fc <__alt_mem_onchip_mem+0xff7828fc>
  802940:	d8c02817 	ldw	r3,160(sp)
  802944:	dc402a17 	ldw	r17,168(sp)
  802948:	b011883a 	mov	r8,r22
  80294c:	1c07c83a 	sub	r3,r3,r16
  802950:	d8c02e15 	stw	r3,184(sp)
  802954:	00005906 	br	802abc <___vfprintf_internal_r+0x71c>
  802958:	18c03fcc 	andi	r3,r3,255
  80295c:	1806fa1e 	bne	r3,zero,804548 <___vfprintf_internal_r+0x21a8>
  802960:	9080020c 	andi	r2,r18,8
  802964:	10048a26 	beq	r2,zero,803b90 <___vfprintf_internal_r+0x17f0>
  802968:	d8c02d17 	ldw	r3,180(sp)
  80296c:	d9002d17 	ldw	r4,180(sp)
  802970:	d9402d17 	ldw	r5,180(sp)
  802974:	18c00017 	ldw	r3,0(r3)
  802978:	21000117 	ldw	r4,4(r4)
  80297c:	29400204 	addi	r5,r5,8
  802980:	d8c03615 	stw	r3,216(sp)
  802984:	d9003815 	stw	r4,224(sp)
  802988:	d9402d15 	stw	r5,180(sp)
  80298c:	d9003617 	ldw	r4,216(sp)
  802990:	d9403817 	ldw	r5,224(sp)
  802994:	da003d15 	stw	r8,244(sp)
  802998:	04000044 	movi	r16,1
  80299c:	08081c80 	call	8081c8 <__fpclassifyd>
  8029a0:	da003d17 	ldw	r8,244(sp)
  8029a4:	14041f1e 	bne	r2,r16,803a24 <___vfprintf_internal_r+0x1684>
  8029a8:	d9003617 	ldw	r4,216(sp)
  8029ac:	d9403817 	ldw	r5,224(sp)
  8029b0:	000d883a 	mov	r6,zero
  8029b4:	000f883a 	mov	r7,zero
  8029b8:	080cbe00 	call	80cbe0 <__ledf2>
  8029bc:	da003d17 	ldw	r8,244(sp)
  8029c0:	1005be16 	blt	r2,zero,8040bc <___vfprintf_internal_r+0x1d1c>
  8029c4:	df002783 	ldbu	fp,158(sp)
  8029c8:	008011c4 	movi	r2,71
  8029cc:	1445330e 	bge	r2,r17,803e9c <___vfprintf_internal_r+0x1afc>
  8029d0:	04002074 	movhi	r16,129
  8029d4:	84089d04 	addi	r16,r16,8820
  8029d8:	00c000c4 	movi	r3,3
  8029dc:	00bfdfc4 	movi	r2,-129
  8029e0:	d8c02a15 	stw	r3,168(sp)
  8029e4:	90a4703a 	and	r18,r18,r2
  8029e8:	d8c02e15 	stw	r3,184(sp)
  8029ec:	d8002915 	stw	zero,164(sp)
  8029f0:	d8003215 	stw	zero,200(sp)
  8029f4:	00003706 	br	802ad4 <___vfprintf_internal_r+0x734>
  8029f8:	94800214 	ori	r18,r18,8
  8029fc:	ac400007 	ldb	r17,0(r21)
  802a00:	003ec806 	br	802524 <__alt_mem_onchip_mem+0xff782524>
  802a04:	18c03fcc 	andi	r3,r3,255
  802a08:	1806db1e 	bne	r3,zero,804578 <___vfprintf_internal_r+0x21d8>
  802a0c:	94800414 	ori	r18,r18,16
  802a10:	9080080c 	andi	r2,r18,32
  802a14:	1002d826 	beq	r2,zero,803578 <___vfprintf_internal_r+0x11d8>
  802a18:	d9402d17 	ldw	r5,180(sp)
  802a1c:	d8c02917 	ldw	r3,164(sp)
  802a20:	d8002785 	stb	zero,158(sp)
  802a24:	28800204 	addi	r2,r5,8
  802a28:	2cc00017 	ldw	r19,0(r5)
  802a2c:	2d800117 	ldw	r22,4(r5)
  802a30:	18048f16 	blt	r3,zero,803c70 <___vfprintf_internal_r+0x18d0>
  802a34:	013fdfc4 	movi	r4,-129
  802a38:	9d86b03a 	or	r3,r19,r22
  802a3c:	d8802d15 	stw	r2,180(sp)
  802a40:	9124703a 	and	r18,r18,r4
  802a44:	1802d91e 	bne	r3,zero,8035ac <___vfprintf_internal_r+0x120c>
  802a48:	d8c02917 	ldw	r3,164(sp)
  802a4c:	0039883a 	mov	fp,zero
  802a50:	1805c326 	beq	r3,zero,804160 <___vfprintf_internal_r+0x1dc0>
  802a54:	0027883a 	mov	r19,zero
  802a58:	002d883a 	mov	r22,zero
  802a5c:	dc001e04 	addi	r16,sp,120
  802a60:	9806d0fa 	srli	r3,r19,3
  802a64:	b008977a 	slli	r4,r22,29
  802a68:	b02cd0fa 	srli	r22,r22,3
  802a6c:	9cc001cc 	andi	r19,r19,7
  802a70:	98800c04 	addi	r2,r19,48
  802a74:	843fffc4 	addi	r16,r16,-1
  802a78:	20e6b03a 	or	r19,r4,r3
  802a7c:	80800005 	stb	r2,0(r16)
  802a80:	9d86b03a 	or	r3,r19,r22
  802a84:	183ff61e 	bne	r3,zero,802a60 <__alt_mem_onchip_mem+0xff782a60>
  802a88:	90c0004c 	andi	r3,r18,1
  802a8c:	18013b26 	beq	r3,zero,802f7c <___vfprintf_internal_r+0xbdc>
  802a90:	10803fcc 	andi	r2,r2,255
  802a94:	1080201c 	xori	r2,r2,128
  802a98:	10bfe004 	addi	r2,r2,-128
  802a9c:	00c00c04 	movi	r3,48
  802aa0:	10c13626 	beq	r2,r3,802f7c <___vfprintf_internal_r+0xbdc>
  802aa4:	80ffffc5 	stb	r3,-1(r16)
  802aa8:	d8c02817 	ldw	r3,160(sp)
  802aac:	80bfffc4 	addi	r2,r16,-1
  802ab0:	1021883a 	mov	r16,r2
  802ab4:	1887c83a 	sub	r3,r3,r2
  802ab8:	d8c02e15 	stw	r3,184(sp)
  802abc:	d8802e17 	ldw	r2,184(sp)
  802ac0:	d9002917 	ldw	r4,164(sp)
  802ac4:	1100010e 	bge	r2,r4,802acc <___vfprintf_internal_r+0x72c>
  802ac8:	2005883a 	mov	r2,r4
  802acc:	d8802a15 	stw	r2,168(sp)
  802ad0:	d8003215 	stw	zero,200(sp)
  802ad4:	e7003fcc 	andi	fp,fp,255
  802ad8:	e700201c 	xori	fp,fp,128
  802adc:	e73fe004 	addi	fp,fp,-128
  802ae0:	e0000326 	beq	fp,zero,802af0 <___vfprintf_internal_r+0x750>
  802ae4:	d8c02a17 	ldw	r3,168(sp)
  802ae8:	18c00044 	addi	r3,r3,1
  802aec:	d8c02a15 	stw	r3,168(sp)
  802af0:	90c0008c 	andi	r3,r18,2
  802af4:	d8c02b15 	stw	r3,172(sp)
  802af8:	18000326 	beq	r3,zero,802b08 <___vfprintf_internal_r+0x768>
  802afc:	d8c02a17 	ldw	r3,168(sp)
  802b00:	18c00084 	addi	r3,r3,2
  802b04:	d8c02a15 	stw	r3,168(sp)
  802b08:	90c0210c 	andi	r3,r18,132
  802b0c:	d8c03015 	stw	r3,192(sp)
  802b10:	1801a31e 	bne	r3,zero,8031a0 <___vfprintf_internal_r+0xe00>
  802b14:	d9003117 	ldw	r4,196(sp)
  802b18:	d8c02a17 	ldw	r3,168(sp)
  802b1c:	20e7c83a 	sub	r19,r4,r3
  802b20:	04c19f0e 	bge	zero,r19,8031a0 <___vfprintf_internal_r+0xe00>
  802b24:	02400404 	movi	r9,16
  802b28:	d8c02017 	ldw	r3,128(sp)
  802b2c:	d8801f17 	ldw	r2,124(sp)
  802b30:	4cc50d0e 	bge	r9,r19,803f68 <___vfprintf_internal_r+0x1bc8>
  802b34:	01402074 	movhi	r5,129
  802b38:	2948b084 	addi	r5,r5,8898
  802b3c:	dc403b15 	stw	r17,236(sp)
  802b40:	d9403515 	stw	r5,212(sp)
  802b44:	9823883a 	mov	r17,r19
  802b48:	482d883a 	mov	r22,r9
  802b4c:	9027883a 	mov	r19,r18
  802b50:	070001c4 	movi	fp,7
  802b54:	8025883a 	mov	r18,r16
  802b58:	dc002c17 	ldw	r16,176(sp)
  802b5c:	00000306 	br	802b6c <___vfprintf_internal_r+0x7cc>
  802b60:	8c7ffc04 	addi	r17,r17,-16
  802b64:	42000204 	addi	r8,r8,8
  802b68:	b440130e 	bge	r22,r17,802bb8 <___vfprintf_internal_r+0x818>
  802b6c:	01002074 	movhi	r4,129
  802b70:	18c00404 	addi	r3,r3,16
  802b74:	10800044 	addi	r2,r2,1
  802b78:	2108b084 	addi	r4,r4,8898
  802b7c:	41000015 	stw	r4,0(r8)
  802b80:	45800115 	stw	r22,4(r8)
  802b84:	d8c02015 	stw	r3,128(sp)
  802b88:	d8801f15 	stw	r2,124(sp)
  802b8c:	e0bff40e 	bge	fp,r2,802b60 <__alt_mem_onchip_mem+0xff782b60>
  802b90:	d9801e04 	addi	r6,sp,120
  802b94:	b80b883a 	mov	r5,r23
  802b98:	8009883a 	mov	r4,r16
  802b9c:	08084ac0 	call	8084ac <__sprint_r>
  802ba0:	103f011e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  802ba4:	8c7ffc04 	addi	r17,r17,-16
  802ba8:	d8c02017 	ldw	r3,128(sp)
  802bac:	d8801f17 	ldw	r2,124(sp)
  802bb0:	da000404 	addi	r8,sp,16
  802bb4:	b47fed16 	blt	r22,r17,802b6c <__alt_mem_onchip_mem+0xff782b6c>
  802bb8:	9021883a 	mov	r16,r18
  802bbc:	9825883a 	mov	r18,r19
  802bc0:	8827883a 	mov	r19,r17
  802bc4:	dc403b17 	ldw	r17,236(sp)
  802bc8:	d9403517 	ldw	r5,212(sp)
  802bcc:	98c7883a 	add	r3,r19,r3
  802bd0:	10800044 	addi	r2,r2,1
  802bd4:	41400015 	stw	r5,0(r8)
  802bd8:	44c00115 	stw	r19,4(r8)
  802bdc:	d8c02015 	stw	r3,128(sp)
  802be0:	d8801f15 	stw	r2,124(sp)
  802be4:	010001c4 	movi	r4,7
  802be8:	2082a316 	blt	r4,r2,803678 <___vfprintf_internal_r+0x12d8>
  802bec:	df002787 	ldb	fp,158(sp)
  802bf0:	42000204 	addi	r8,r8,8
  802bf4:	e0000c26 	beq	fp,zero,802c28 <___vfprintf_internal_r+0x888>
  802bf8:	d8801f17 	ldw	r2,124(sp)
  802bfc:	d9002784 	addi	r4,sp,158
  802c00:	18c00044 	addi	r3,r3,1
  802c04:	10800044 	addi	r2,r2,1
  802c08:	41000015 	stw	r4,0(r8)
  802c0c:	01000044 	movi	r4,1
  802c10:	41000115 	stw	r4,4(r8)
  802c14:	d8c02015 	stw	r3,128(sp)
  802c18:	d8801f15 	stw	r2,124(sp)
  802c1c:	010001c4 	movi	r4,7
  802c20:	20823c16 	blt	r4,r2,803514 <___vfprintf_internal_r+0x1174>
  802c24:	42000204 	addi	r8,r8,8
  802c28:	d8802b17 	ldw	r2,172(sp)
  802c2c:	10000c26 	beq	r2,zero,802c60 <___vfprintf_internal_r+0x8c0>
  802c30:	d8801f17 	ldw	r2,124(sp)
  802c34:	d9002704 	addi	r4,sp,156
  802c38:	18c00084 	addi	r3,r3,2
  802c3c:	10800044 	addi	r2,r2,1
  802c40:	41000015 	stw	r4,0(r8)
  802c44:	01000084 	movi	r4,2
  802c48:	41000115 	stw	r4,4(r8)
  802c4c:	d8c02015 	stw	r3,128(sp)
  802c50:	d8801f15 	stw	r2,124(sp)
  802c54:	010001c4 	movi	r4,7
  802c58:	20823616 	blt	r4,r2,803534 <___vfprintf_internal_r+0x1194>
  802c5c:	42000204 	addi	r8,r8,8
  802c60:	d9003017 	ldw	r4,192(sp)
  802c64:	00802004 	movi	r2,128
  802c68:	20819926 	beq	r4,r2,8032d0 <___vfprintf_internal_r+0xf30>
  802c6c:	d9402917 	ldw	r5,164(sp)
  802c70:	d8802e17 	ldw	r2,184(sp)
  802c74:	28adc83a 	sub	r22,r5,r2
  802c78:	0580310e 	bge	zero,r22,802d40 <___vfprintf_internal_r+0x9a0>
  802c7c:	07000404 	movi	fp,16
  802c80:	d8801f17 	ldw	r2,124(sp)
  802c84:	e584140e 	bge	fp,r22,803cd8 <___vfprintf_internal_r+0x1938>
  802c88:	01402074 	movhi	r5,129
  802c8c:	2948ac84 	addi	r5,r5,8882
  802c90:	dc402915 	stw	r17,164(sp)
  802c94:	d9402b15 	stw	r5,172(sp)
  802c98:	b023883a 	mov	r17,r22
  802c9c:	04c001c4 	movi	r19,7
  802ca0:	a82d883a 	mov	r22,r21
  802ca4:	902b883a 	mov	r21,r18
  802ca8:	8025883a 	mov	r18,r16
  802cac:	dc002c17 	ldw	r16,176(sp)
  802cb0:	00000306 	br	802cc0 <___vfprintf_internal_r+0x920>
  802cb4:	8c7ffc04 	addi	r17,r17,-16
  802cb8:	42000204 	addi	r8,r8,8
  802cbc:	e440110e 	bge	fp,r17,802d04 <___vfprintf_internal_r+0x964>
  802cc0:	18c00404 	addi	r3,r3,16
  802cc4:	10800044 	addi	r2,r2,1
  802cc8:	45000015 	stw	r20,0(r8)
  802ccc:	47000115 	stw	fp,4(r8)
  802cd0:	d8c02015 	stw	r3,128(sp)
  802cd4:	d8801f15 	stw	r2,124(sp)
  802cd8:	98bff60e 	bge	r19,r2,802cb4 <__alt_mem_onchip_mem+0xff782cb4>
  802cdc:	d9801e04 	addi	r6,sp,120
  802ce0:	b80b883a 	mov	r5,r23
  802ce4:	8009883a 	mov	r4,r16
  802ce8:	08084ac0 	call	8084ac <__sprint_r>
  802cec:	103eae1e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  802cf0:	8c7ffc04 	addi	r17,r17,-16
  802cf4:	d8c02017 	ldw	r3,128(sp)
  802cf8:	d8801f17 	ldw	r2,124(sp)
  802cfc:	da000404 	addi	r8,sp,16
  802d00:	e47fef16 	blt	fp,r17,802cc0 <__alt_mem_onchip_mem+0xff782cc0>
  802d04:	9021883a 	mov	r16,r18
  802d08:	a825883a 	mov	r18,r21
  802d0c:	b02b883a 	mov	r21,r22
  802d10:	882d883a 	mov	r22,r17
  802d14:	dc402917 	ldw	r17,164(sp)
  802d18:	d9002b17 	ldw	r4,172(sp)
  802d1c:	1d87883a 	add	r3,r3,r22
  802d20:	10800044 	addi	r2,r2,1
  802d24:	41000015 	stw	r4,0(r8)
  802d28:	45800115 	stw	r22,4(r8)
  802d2c:	d8c02015 	stw	r3,128(sp)
  802d30:	d8801f15 	stw	r2,124(sp)
  802d34:	010001c4 	movi	r4,7
  802d38:	2081ee16 	blt	r4,r2,8034f4 <___vfprintf_internal_r+0x1154>
  802d3c:	42000204 	addi	r8,r8,8
  802d40:	9080400c 	andi	r2,r18,256
  802d44:	1001181e 	bne	r2,zero,8031a8 <___vfprintf_internal_r+0xe08>
  802d48:	d9402e17 	ldw	r5,184(sp)
  802d4c:	d8801f17 	ldw	r2,124(sp)
  802d50:	44000015 	stw	r16,0(r8)
  802d54:	1947883a 	add	r3,r3,r5
  802d58:	10800044 	addi	r2,r2,1
  802d5c:	41400115 	stw	r5,4(r8)
  802d60:	d8c02015 	stw	r3,128(sp)
  802d64:	d8801f15 	stw	r2,124(sp)
  802d68:	010001c4 	movi	r4,7
  802d6c:	2081d316 	blt	r4,r2,8034bc <___vfprintf_internal_r+0x111c>
  802d70:	42000204 	addi	r8,r8,8
  802d74:	9480010c 	andi	r18,r18,4
  802d78:	90003226 	beq	r18,zero,802e44 <___vfprintf_internal_r+0xaa4>
  802d7c:	d9403117 	ldw	r5,196(sp)
  802d80:	d8802a17 	ldw	r2,168(sp)
  802d84:	28a1c83a 	sub	r16,r5,r2
  802d88:	04002e0e 	bge	zero,r16,802e44 <___vfprintf_internal_r+0xaa4>
  802d8c:	04400404 	movi	r17,16
  802d90:	d8801f17 	ldw	r2,124(sp)
  802d94:	8c04a20e 	bge	r17,r16,804020 <___vfprintf_internal_r+0x1c80>
  802d98:	01402074 	movhi	r5,129
  802d9c:	2948b084 	addi	r5,r5,8898
  802da0:	d9403515 	stw	r5,212(sp)
  802da4:	048001c4 	movi	r18,7
  802da8:	dcc02c17 	ldw	r19,176(sp)
  802dac:	00000306 	br	802dbc <___vfprintf_internal_r+0xa1c>
  802db0:	843ffc04 	addi	r16,r16,-16
  802db4:	42000204 	addi	r8,r8,8
  802db8:	8c00130e 	bge	r17,r16,802e08 <___vfprintf_internal_r+0xa68>
  802dbc:	01002074 	movhi	r4,129
  802dc0:	18c00404 	addi	r3,r3,16
  802dc4:	10800044 	addi	r2,r2,1
  802dc8:	2108b084 	addi	r4,r4,8898
  802dcc:	41000015 	stw	r4,0(r8)
  802dd0:	44400115 	stw	r17,4(r8)
  802dd4:	d8c02015 	stw	r3,128(sp)
  802dd8:	d8801f15 	stw	r2,124(sp)
  802ddc:	90bff40e 	bge	r18,r2,802db0 <__alt_mem_onchip_mem+0xff782db0>
  802de0:	d9801e04 	addi	r6,sp,120
  802de4:	b80b883a 	mov	r5,r23
  802de8:	9809883a 	mov	r4,r19
  802dec:	08084ac0 	call	8084ac <__sprint_r>
  802df0:	103e6d1e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  802df4:	843ffc04 	addi	r16,r16,-16
  802df8:	d8c02017 	ldw	r3,128(sp)
  802dfc:	d8801f17 	ldw	r2,124(sp)
  802e00:	da000404 	addi	r8,sp,16
  802e04:	8c3fed16 	blt	r17,r16,802dbc <__alt_mem_onchip_mem+0xff782dbc>
  802e08:	d9403517 	ldw	r5,212(sp)
  802e0c:	1c07883a 	add	r3,r3,r16
  802e10:	10800044 	addi	r2,r2,1
  802e14:	41400015 	stw	r5,0(r8)
  802e18:	44000115 	stw	r16,4(r8)
  802e1c:	d8c02015 	stw	r3,128(sp)
  802e20:	d8801f15 	stw	r2,124(sp)
  802e24:	010001c4 	movi	r4,7
  802e28:	2080060e 	bge	r4,r2,802e44 <___vfprintf_internal_r+0xaa4>
  802e2c:	d9002c17 	ldw	r4,176(sp)
  802e30:	d9801e04 	addi	r6,sp,120
  802e34:	b80b883a 	mov	r5,r23
  802e38:	08084ac0 	call	8084ac <__sprint_r>
  802e3c:	103e5a1e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  802e40:	d8c02017 	ldw	r3,128(sp)
  802e44:	d8803117 	ldw	r2,196(sp)
  802e48:	d9002a17 	ldw	r4,168(sp)
  802e4c:	1100010e 	bge	r2,r4,802e54 <___vfprintf_internal_r+0xab4>
  802e50:	2005883a 	mov	r2,r4
  802e54:	d9402f17 	ldw	r5,188(sp)
  802e58:	288b883a 	add	r5,r5,r2
  802e5c:	d9402f15 	stw	r5,188(sp)
  802e60:	18019e1e 	bne	r3,zero,8034dc <___vfprintf_internal_r+0x113c>
  802e64:	a8800007 	ldb	r2,0(r21)
  802e68:	d8001f15 	stw	zero,124(sp)
  802e6c:	da000404 	addi	r8,sp,16
  802e70:	103d851e 	bne	r2,zero,802488 <__alt_mem_onchip_mem+0xff782488>
  802e74:	a821883a 	mov	r16,r21
  802e78:	003d9b06 	br	8024e8 <__alt_mem_onchip_mem+0xff7824e8>
  802e7c:	18c03fcc 	andi	r3,r3,255
  802e80:	1805c11e 	bne	r3,zero,804588 <___vfprintf_internal_r+0x21e8>
  802e84:	94800414 	ori	r18,r18,16
  802e88:	9080080c 	andi	r2,r18,32
  802e8c:	10020c26 	beq	r2,zero,8036c0 <___vfprintf_internal_r+0x1320>
  802e90:	d8802d17 	ldw	r2,180(sp)
  802e94:	d9002917 	ldw	r4,164(sp)
  802e98:	d8002785 	stb	zero,158(sp)
  802e9c:	10c00204 	addi	r3,r2,8
  802ea0:	14c00017 	ldw	r19,0(r2)
  802ea4:	15800117 	ldw	r22,4(r2)
  802ea8:	20040f16 	blt	r4,zero,803ee8 <___vfprintf_internal_r+0x1b48>
  802eac:	013fdfc4 	movi	r4,-129
  802eb0:	9d84b03a 	or	r2,r19,r22
  802eb4:	d8c02d15 	stw	r3,180(sp)
  802eb8:	9124703a 	and	r18,r18,r4
  802ebc:	0039883a 	mov	fp,zero
  802ec0:	103e891e 	bne	r2,zero,8028e8 <__alt_mem_onchip_mem+0xff7828e8>
  802ec4:	d9002917 	ldw	r4,164(sp)
  802ec8:	2002c11e 	bne	r4,zero,8039d0 <___vfprintf_internal_r+0x1630>
  802ecc:	d8002915 	stw	zero,164(sp)
  802ed0:	d8002e15 	stw	zero,184(sp)
  802ed4:	dc001e04 	addi	r16,sp,120
  802ed8:	003ef806 	br	802abc <__alt_mem_onchip_mem+0xff782abc>
  802edc:	18c03fcc 	andi	r3,r3,255
  802ee0:	18059d1e 	bne	r3,zero,804558 <___vfprintf_internal_r+0x21b8>
  802ee4:	01402074 	movhi	r5,129
  802ee8:	2948a004 	addi	r5,r5,8832
  802eec:	d9403915 	stw	r5,228(sp)
  802ef0:	9080080c 	andi	r2,r18,32
  802ef4:	10005226 	beq	r2,zero,803040 <___vfprintf_internal_r+0xca0>
  802ef8:	d8802d17 	ldw	r2,180(sp)
  802efc:	14c00017 	ldw	r19,0(r2)
  802f00:	15800117 	ldw	r22,4(r2)
  802f04:	10800204 	addi	r2,r2,8
  802f08:	d8802d15 	stw	r2,180(sp)
  802f0c:	9080004c 	andi	r2,r18,1
  802f10:	10019026 	beq	r2,zero,803554 <___vfprintf_internal_r+0x11b4>
  802f14:	9d84b03a 	or	r2,r19,r22
  802f18:	10036926 	beq	r2,zero,803cc0 <___vfprintf_internal_r+0x1920>
  802f1c:	d8c02917 	ldw	r3,164(sp)
  802f20:	00800c04 	movi	r2,48
  802f24:	d8802705 	stb	r2,156(sp)
  802f28:	dc402745 	stb	r17,157(sp)
  802f2c:	d8002785 	stb	zero,158(sp)
  802f30:	90800094 	ori	r2,r18,2
  802f34:	18045d16 	blt	r3,zero,8040ac <___vfprintf_internal_r+0x1d0c>
  802f38:	00bfdfc4 	movi	r2,-129
  802f3c:	90a4703a 	and	r18,r18,r2
  802f40:	94800094 	ori	r18,r18,2
  802f44:	0039883a 	mov	fp,zero
  802f48:	d9003917 	ldw	r4,228(sp)
  802f4c:	dc001e04 	addi	r16,sp,120
  802f50:	988003cc 	andi	r2,r19,15
  802f54:	b006973a 	slli	r3,r22,28
  802f58:	2085883a 	add	r2,r4,r2
  802f5c:	9826d13a 	srli	r19,r19,4
  802f60:	10800003 	ldbu	r2,0(r2)
  802f64:	b02cd13a 	srli	r22,r22,4
  802f68:	843fffc4 	addi	r16,r16,-1
  802f6c:	1ce6b03a 	or	r19,r3,r19
  802f70:	80800005 	stb	r2,0(r16)
  802f74:	9d84b03a 	or	r2,r19,r22
  802f78:	103ff51e 	bne	r2,zero,802f50 <__alt_mem_onchip_mem+0xff782f50>
  802f7c:	d8c02817 	ldw	r3,160(sp)
  802f80:	1c07c83a 	sub	r3,r3,r16
  802f84:	d8c02e15 	stw	r3,184(sp)
  802f88:	003ecc06 	br	802abc <__alt_mem_onchip_mem+0xff782abc>
  802f8c:	18c03fcc 	andi	r3,r3,255
  802f90:	183e9f26 	beq	r3,zero,802a10 <__alt_mem_onchip_mem+0xff782a10>
  802f94:	d9c02785 	stb	r7,158(sp)
  802f98:	003e9d06 	br	802a10 <__alt_mem_onchip_mem+0xff782a10>
  802f9c:	00c00044 	movi	r3,1
  802fa0:	01c00ac4 	movi	r7,43
  802fa4:	ac400007 	ldb	r17,0(r21)
  802fa8:	003d5e06 	br	802524 <__alt_mem_onchip_mem+0xff782524>
  802fac:	94800814 	ori	r18,r18,32
  802fb0:	ac400007 	ldb	r17,0(r21)
  802fb4:	003d5b06 	br	802524 <__alt_mem_onchip_mem+0xff782524>
  802fb8:	d8c02d17 	ldw	r3,180(sp)
  802fbc:	d8002785 	stb	zero,158(sp)
  802fc0:	1c000017 	ldw	r16,0(r3)
  802fc4:	1cc00104 	addi	r19,r3,4
  802fc8:	80041926 	beq	r16,zero,804030 <___vfprintf_internal_r+0x1c90>
  802fcc:	d9002917 	ldw	r4,164(sp)
  802fd0:	2003d016 	blt	r4,zero,803f14 <___vfprintf_internal_r+0x1b74>
  802fd4:	200d883a 	mov	r6,r4
  802fd8:	000b883a 	mov	r5,zero
  802fdc:	8009883a 	mov	r4,r16
  802fe0:	da003d15 	stw	r8,244(sp)
  802fe4:	0806f400 	call	806f40 <memchr>
  802fe8:	da003d17 	ldw	r8,244(sp)
  802fec:	10045426 	beq	r2,zero,804140 <___vfprintf_internal_r+0x1da0>
  802ff0:	1405c83a 	sub	r2,r2,r16
  802ff4:	d8802e15 	stw	r2,184(sp)
  802ff8:	1003cc16 	blt	r2,zero,803f2c <___vfprintf_internal_r+0x1b8c>
  802ffc:	df002783 	ldbu	fp,158(sp)
  803000:	d8802a15 	stw	r2,168(sp)
  803004:	dcc02d15 	stw	r19,180(sp)
  803008:	d8002915 	stw	zero,164(sp)
  80300c:	d8003215 	stw	zero,200(sp)
  803010:	003eb006 	br	802ad4 <__alt_mem_onchip_mem+0xff782ad4>
  803014:	18c03fcc 	andi	r3,r3,255
  803018:	183f9b26 	beq	r3,zero,802e88 <__alt_mem_onchip_mem+0xff782e88>
  80301c:	d9c02785 	stb	r7,158(sp)
  803020:	003f9906 	br	802e88 <__alt_mem_onchip_mem+0xff782e88>
  803024:	18c03fcc 	andi	r3,r3,255
  803028:	1805551e 	bne	r3,zero,804580 <___vfprintf_internal_r+0x21e0>
  80302c:	01402074 	movhi	r5,129
  803030:	2948a504 	addi	r5,r5,8852
  803034:	d9403915 	stw	r5,228(sp)
  803038:	9080080c 	andi	r2,r18,32
  80303c:	103fae1e 	bne	r2,zero,802ef8 <__alt_mem_onchip_mem+0xff782ef8>
  803040:	9080040c 	andi	r2,r18,16
  803044:	1002de26 	beq	r2,zero,803bc0 <___vfprintf_internal_r+0x1820>
  803048:	d8c02d17 	ldw	r3,180(sp)
  80304c:	002d883a 	mov	r22,zero
  803050:	1cc00017 	ldw	r19,0(r3)
  803054:	18c00104 	addi	r3,r3,4
  803058:	d8c02d15 	stw	r3,180(sp)
  80305c:	003fab06 	br	802f0c <__alt_mem_onchip_mem+0xff782f0c>
  803060:	38803fcc 	andi	r2,r7,255
  803064:	1080201c 	xori	r2,r2,128
  803068:	10bfe004 	addi	r2,r2,-128
  80306c:	1002d21e 	bne	r2,zero,803bb8 <___vfprintf_internal_r+0x1818>
  803070:	00c00044 	movi	r3,1
  803074:	01c00804 	movi	r7,32
  803078:	ac400007 	ldb	r17,0(r21)
  80307c:	003d2906 	br	802524 <__alt_mem_onchip_mem+0xff782524>
  803080:	94800054 	ori	r18,r18,1
  803084:	ac400007 	ldb	r17,0(r21)
  803088:	003d2606 	br	802524 <__alt_mem_onchip_mem+0xff782524>
  80308c:	18c03fcc 	andi	r3,r3,255
  803090:	183e0526 	beq	r3,zero,8028a8 <__alt_mem_onchip_mem+0xff7828a8>
  803094:	d9c02785 	stb	r7,158(sp)
  803098:	003e0306 	br	8028a8 <__alt_mem_onchip_mem+0xff7828a8>
  80309c:	94801014 	ori	r18,r18,64
  8030a0:	ac400007 	ldb	r17,0(r21)
  8030a4:	003d1f06 	br	802524 <__alt_mem_onchip_mem+0xff782524>
  8030a8:	ac400007 	ldb	r17,0(r21)
  8030ac:	8a438726 	beq	r17,r9,803ecc <___vfprintf_internal_r+0x1b2c>
  8030b0:	94800414 	ori	r18,r18,16
  8030b4:	003d1b06 	br	802524 <__alt_mem_onchip_mem+0xff782524>
  8030b8:	18c03fcc 	andi	r3,r3,255
  8030bc:	1805341e 	bne	r3,zero,804590 <___vfprintf_internal_r+0x21f0>
  8030c0:	9080080c 	andi	r2,r18,32
  8030c4:	1002cd26 	beq	r2,zero,803bfc <___vfprintf_internal_r+0x185c>
  8030c8:	d9402d17 	ldw	r5,180(sp)
  8030cc:	d9002f17 	ldw	r4,188(sp)
  8030d0:	28800017 	ldw	r2,0(r5)
  8030d4:	2007d7fa 	srai	r3,r4,31
  8030d8:	29400104 	addi	r5,r5,4
  8030dc:	d9402d15 	stw	r5,180(sp)
  8030e0:	11000015 	stw	r4,0(r2)
  8030e4:	10c00115 	stw	r3,4(r2)
  8030e8:	003ce506 	br	802480 <__alt_mem_onchip_mem+0xff782480>
  8030ec:	d8c02d17 	ldw	r3,180(sp)
  8030f0:	d9002d17 	ldw	r4,180(sp)
  8030f4:	d8002785 	stb	zero,158(sp)
  8030f8:	18800017 	ldw	r2,0(r3)
  8030fc:	21000104 	addi	r4,r4,4
  803100:	00c00044 	movi	r3,1
  803104:	d8c02a15 	stw	r3,168(sp)
  803108:	d8801405 	stb	r2,80(sp)
  80310c:	d9002d15 	stw	r4,180(sp)
  803110:	d8c02e15 	stw	r3,184(sp)
  803114:	d8002915 	stw	zero,164(sp)
  803118:	d8003215 	stw	zero,200(sp)
  80311c:	dc001404 	addi	r16,sp,80
  803120:	0039883a 	mov	fp,zero
  803124:	003e7206 	br	802af0 <__alt_mem_onchip_mem+0xff782af0>
  803128:	01002074 	movhi	r4,129
  80312c:	2108a504 	addi	r4,r4,8852
  803130:	0039883a 	mov	fp,zero
  803134:	d9003915 	stw	r4,228(sp)
  803138:	04401e04 	movi	r17,120
  80313c:	003f8206 	br	802f48 <__alt_mem_onchip_mem+0xff782f48>
  803140:	18c03fcc 	andi	r3,r3,255
  803144:	1805061e 	bne	r3,zero,804560 <___vfprintf_internal_r+0x21c0>
  803148:	883d9126 	beq	r17,zero,802790 <__alt_mem_onchip_mem+0xff782790>
  80314c:	00c00044 	movi	r3,1
  803150:	d8c02a15 	stw	r3,168(sp)
  803154:	dc401405 	stb	r17,80(sp)
  803158:	d8002785 	stb	zero,158(sp)
  80315c:	003fec06 	br	803110 <__alt_mem_onchip_mem+0xff783110>
  803160:	01402074 	movhi	r5,129
  803164:	2948a504 	addi	r5,r5,8852
  803168:	d9403915 	stw	r5,228(sp)
  80316c:	d8c02d15 	stw	r3,180(sp)
  803170:	1025883a 	mov	r18,r2
  803174:	04401e04 	movi	r17,120
  803178:	9d84b03a 	or	r2,r19,r22
  80317c:	1000fc1e 	bne	r2,zero,803570 <___vfprintf_internal_r+0x11d0>
  803180:	0039883a 	mov	fp,zero
  803184:	00800084 	movi	r2,2
  803188:	10803fcc 	andi	r2,r2,255
  80318c:	00c00044 	movi	r3,1
  803190:	10c20f26 	beq	r2,r3,8039d0 <___vfprintf_internal_r+0x1630>
  803194:	00c00084 	movi	r3,2
  803198:	10fd6326 	beq	r2,r3,802728 <__alt_mem_onchip_mem+0xff782728>
  80319c:	003e2d06 	br	802a54 <__alt_mem_onchip_mem+0xff782a54>
  8031a0:	d8c02017 	ldw	r3,128(sp)
  8031a4:	003e9306 	br	802bf4 <__alt_mem_onchip_mem+0xff782bf4>
  8031a8:	00801944 	movi	r2,101
  8031ac:	14407e0e 	bge	r2,r17,8033a8 <___vfprintf_internal_r+0x1008>
  8031b0:	d9003617 	ldw	r4,216(sp)
  8031b4:	d9403817 	ldw	r5,224(sp)
  8031b8:	000d883a 	mov	r6,zero
  8031bc:	000f883a 	mov	r7,zero
  8031c0:	d8c03c15 	stw	r3,240(sp)
  8031c4:	da003d15 	stw	r8,244(sp)
  8031c8:	080ca7c0 	call	80ca7c <__eqdf2>
  8031cc:	d8c03c17 	ldw	r3,240(sp)
  8031d0:	da003d17 	ldw	r8,244(sp)
  8031d4:	1000f71e 	bne	r2,zero,8035b4 <___vfprintf_internal_r+0x1214>
  8031d8:	d8801f17 	ldw	r2,124(sp)
  8031dc:	01002074 	movhi	r4,129
  8031e0:	2108ac04 	addi	r4,r4,8880
  8031e4:	18c00044 	addi	r3,r3,1
  8031e8:	10800044 	addi	r2,r2,1
  8031ec:	41000015 	stw	r4,0(r8)
  8031f0:	01000044 	movi	r4,1
  8031f4:	41000115 	stw	r4,4(r8)
  8031f8:	d8c02015 	stw	r3,128(sp)
  8031fc:	d8801f15 	stw	r2,124(sp)
  803200:	010001c4 	movi	r4,7
  803204:	2082b816 	blt	r4,r2,803ce8 <___vfprintf_internal_r+0x1948>
  803208:	42000204 	addi	r8,r8,8
  80320c:	d8802617 	ldw	r2,152(sp)
  803210:	d9403317 	ldw	r5,204(sp)
  803214:	11400216 	blt	r2,r5,803220 <___vfprintf_internal_r+0xe80>
  803218:	9080004c 	andi	r2,r18,1
  80321c:	103ed526 	beq	r2,zero,802d74 <__alt_mem_onchip_mem+0xff782d74>
  803220:	d8803717 	ldw	r2,220(sp)
  803224:	d9003417 	ldw	r4,208(sp)
  803228:	d9403717 	ldw	r5,220(sp)
  80322c:	1887883a 	add	r3,r3,r2
  803230:	d8801f17 	ldw	r2,124(sp)
  803234:	41000015 	stw	r4,0(r8)
  803238:	41400115 	stw	r5,4(r8)
  80323c:	10800044 	addi	r2,r2,1
  803240:	d8c02015 	stw	r3,128(sp)
  803244:	d8801f15 	stw	r2,124(sp)
  803248:	010001c4 	movi	r4,7
  80324c:	20832916 	blt	r4,r2,803ef4 <___vfprintf_internal_r+0x1b54>
  803250:	42000204 	addi	r8,r8,8
  803254:	d8803317 	ldw	r2,204(sp)
  803258:	143fffc4 	addi	r16,r2,-1
  80325c:	043ec50e 	bge	zero,r16,802d74 <__alt_mem_onchip_mem+0xff782d74>
  803260:	04400404 	movi	r17,16
  803264:	d8801f17 	ldw	r2,124(sp)
  803268:	8c00880e 	bge	r17,r16,80348c <___vfprintf_internal_r+0x10ec>
  80326c:	01402074 	movhi	r5,129
  803270:	2948ac84 	addi	r5,r5,8882
  803274:	d9402b15 	stw	r5,172(sp)
  803278:	058001c4 	movi	r22,7
  80327c:	dcc02c17 	ldw	r19,176(sp)
  803280:	00000306 	br	803290 <___vfprintf_internal_r+0xef0>
  803284:	42000204 	addi	r8,r8,8
  803288:	843ffc04 	addi	r16,r16,-16
  80328c:	8c00820e 	bge	r17,r16,803498 <___vfprintf_internal_r+0x10f8>
  803290:	18c00404 	addi	r3,r3,16
  803294:	10800044 	addi	r2,r2,1
  803298:	45000015 	stw	r20,0(r8)
  80329c:	44400115 	stw	r17,4(r8)
  8032a0:	d8c02015 	stw	r3,128(sp)
  8032a4:	d8801f15 	stw	r2,124(sp)
  8032a8:	b0bff60e 	bge	r22,r2,803284 <__alt_mem_onchip_mem+0xff783284>
  8032ac:	d9801e04 	addi	r6,sp,120
  8032b0:	b80b883a 	mov	r5,r23
  8032b4:	9809883a 	mov	r4,r19
  8032b8:	08084ac0 	call	8084ac <__sprint_r>
  8032bc:	103d3a1e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  8032c0:	d8c02017 	ldw	r3,128(sp)
  8032c4:	d8801f17 	ldw	r2,124(sp)
  8032c8:	da000404 	addi	r8,sp,16
  8032cc:	003fee06 	br	803288 <__alt_mem_onchip_mem+0xff783288>
  8032d0:	d9403117 	ldw	r5,196(sp)
  8032d4:	d8802a17 	ldw	r2,168(sp)
  8032d8:	28adc83a 	sub	r22,r5,r2
  8032dc:	05be630e 	bge	zero,r22,802c6c <__alt_mem_onchip_mem+0xff782c6c>
  8032e0:	07000404 	movi	fp,16
  8032e4:	d8801f17 	ldw	r2,124(sp)
  8032e8:	e5838f0e 	bge	fp,r22,804128 <___vfprintf_internal_r+0x1d88>
  8032ec:	01402074 	movhi	r5,129
  8032f0:	2948ac84 	addi	r5,r5,8882
  8032f4:	dc403015 	stw	r17,192(sp)
  8032f8:	d9402b15 	stw	r5,172(sp)
  8032fc:	b023883a 	mov	r17,r22
  803300:	04c001c4 	movi	r19,7
  803304:	a82d883a 	mov	r22,r21
  803308:	902b883a 	mov	r21,r18
  80330c:	8025883a 	mov	r18,r16
  803310:	dc002c17 	ldw	r16,176(sp)
  803314:	00000306 	br	803324 <___vfprintf_internal_r+0xf84>
  803318:	8c7ffc04 	addi	r17,r17,-16
  80331c:	42000204 	addi	r8,r8,8
  803320:	e440110e 	bge	fp,r17,803368 <___vfprintf_internal_r+0xfc8>
  803324:	18c00404 	addi	r3,r3,16
  803328:	10800044 	addi	r2,r2,1
  80332c:	45000015 	stw	r20,0(r8)
  803330:	47000115 	stw	fp,4(r8)
  803334:	d8c02015 	stw	r3,128(sp)
  803338:	d8801f15 	stw	r2,124(sp)
  80333c:	98bff60e 	bge	r19,r2,803318 <__alt_mem_onchip_mem+0xff783318>
  803340:	d9801e04 	addi	r6,sp,120
  803344:	b80b883a 	mov	r5,r23
  803348:	8009883a 	mov	r4,r16
  80334c:	08084ac0 	call	8084ac <__sprint_r>
  803350:	103d151e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  803354:	8c7ffc04 	addi	r17,r17,-16
  803358:	d8c02017 	ldw	r3,128(sp)
  80335c:	d8801f17 	ldw	r2,124(sp)
  803360:	da000404 	addi	r8,sp,16
  803364:	e47fef16 	blt	fp,r17,803324 <__alt_mem_onchip_mem+0xff783324>
  803368:	9021883a 	mov	r16,r18
  80336c:	a825883a 	mov	r18,r21
  803370:	b02b883a 	mov	r21,r22
  803374:	882d883a 	mov	r22,r17
  803378:	dc403017 	ldw	r17,192(sp)
  80337c:	d9002b17 	ldw	r4,172(sp)
  803380:	1d87883a 	add	r3,r3,r22
  803384:	10800044 	addi	r2,r2,1
  803388:	41000015 	stw	r4,0(r8)
  80338c:	45800115 	stw	r22,4(r8)
  803390:	d8c02015 	stw	r3,128(sp)
  803394:	d8801f15 	stw	r2,124(sp)
  803398:	010001c4 	movi	r4,7
  80339c:	20818e16 	blt	r4,r2,8039d8 <___vfprintf_internal_r+0x1638>
  8033a0:	42000204 	addi	r8,r8,8
  8033a4:	003e3106 	br	802c6c <__alt_mem_onchip_mem+0xff782c6c>
  8033a8:	d9403317 	ldw	r5,204(sp)
  8033ac:	00800044 	movi	r2,1
  8033b0:	18c00044 	addi	r3,r3,1
  8033b4:	1141530e 	bge	r2,r5,803904 <___vfprintf_internal_r+0x1564>
  8033b8:	dc401f17 	ldw	r17,124(sp)
  8033bc:	00800044 	movi	r2,1
  8033c0:	40800115 	stw	r2,4(r8)
  8033c4:	8c400044 	addi	r17,r17,1
  8033c8:	44000015 	stw	r16,0(r8)
  8033cc:	d8c02015 	stw	r3,128(sp)
  8033d0:	dc401f15 	stw	r17,124(sp)
  8033d4:	008001c4 	movi	r2,7
  8033d8:	14416b16 	blt	r2,r17,803988 <___vfprintf_internal_r+0x15e8>
  8033dc:	42000204 	addi	r8,r8,8
  8033e0:	d8803717 	ldw	r2,220(sp)
  8033e4:	d9003417 	ldw	r4,208(sp)
  8033e8:	8c400044 	addi	r17,r17,1
  8033ec:	10c7883a 	add	r3,r2,r3
  8033f0:	40800115 	stw	r2,4(r8)
  8033f4:	41000015 	stw	r4,0(r8)
  8033f8:	d8c02015 	stw	r3,128(sp)
  8033fc:	dc401f15 	stw	r17,124(sp)
  803400:	008001c4 	movi	r2,7
  803404:	14416916 	blt	r2,r17,8039ac <___vfprintf_internal_r+0x160c>
  803408:	45800204 	addi	r22,r8,8
  80340c:	d9003617 	ldw	r4,216(sp)
  803410:	d9403817 	ldw	r5,224(sp)
  803414:	000d883a 	mov	r6,zero
  803418:	000f883a 	mov	r7,zero
  80341c:	d8c03c15 	stw	r3,240(sp)
  803420:	080ca7c0 	call	80ca7c <__eqdf2>
  803424:	d8c03c17 	ldw	r3,240(sp)
  803428:	1000bc26 	beq	r2,zero,80371c <___vfprintf_internal_r+0x137c>
  80342c:	d9403317 	ldw	r5,204(sp)
  803430:	84000044 	addi	r16,r16,1
  803434:	8c400044 	addi	r17,r17,1
  803438:	28bfffc4 	addi	r2,r5,-1
  80343c:	1887883a 	add	r3,r3,r2
  803440:	b0800115 	stw	r2,4(r22)
  803444:	b4000015 	stw	r16,0(r22)
  803448:	d8c02015 	stw	r3,128(sp)
  80344c:	dc401f15 	stw	r17,124(sp)
  803450:	008001c4 	movi	r2,7
  803454:	14414316 	blt	r2,r17,803964 <___vfprintf_internal_r+0x15c4>
  803458:	b5800204 	addi	r22,r22,8
  80345c:	d9003a17 	ldw	r4,232(sp)
  803460:	df0022c4 	addi	fp,sp,139
  803464:	8c400044 	addi	r17,r17,1
  803468:	20c7883a 	add	r3,r4,r3
  80346c:	b7000015 	stw	fp,0(r22)
  803470:	b1000115 	stw	r4,4(r22)
  803474:	d8c02015 	stw	r3,128(sp)
  803478:	dc401f15 	stw	r17,124(sp)
  80347c:	008001c4 	movi	r2,7
  803480:	14400e16 	blt	r2,r17,8034bc <___vfprintf_internal_r+0x111c>
  803484:	b2000204 	addi	r8,r22,8
  803488:	003e3a06 	br	802d74 <__alt_mem_onchip_mem+0xff782d74>
  80348c:	01002074 	movhi	r4,129
  803490:	2108ac84 	addi	r4,r4,8882
  803494:	d9002b15 	stw	r4,172(sp)
  803498:	d9002b17 	ldw	r4,172(sp)
  80349c:	1c07883a 	add	r3,r3,r16
  8034a0:	44000115 	stw	r16,4(r8)
  8034a4:	41000015 	stw	r4,0(r8)
  8034a8:	10800044 	addi	r2,r2,1
  8034ac:	d8c02015 	stw	r3,128(sp)
  8034b0:	d8801f15 	stw	r2,124(sp)
  8034b4:	010001c4 	movi	r4,7
  8034b8:	20be2d0e 	bge	r4,r2,802d70 <__alt_mem_onchip_mem+0xff782d70>
  8034bc:	d9002c17 	ldw	r4,176(sp)
  8034c0:	d9801e04 	addi	r6,sp,120
  8034c4:	b80b883a 	mov	r5,r23
  8034c8:	08084ac0 	call	8084ac <__sprint_r>
  8034cc:	103cb61e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  8034d0:	d8c02017 	ldw	r3,128(sp)
  8034d4:	da000404 	addi	r8,sp,16
  8034d8:	003e2606 	br	802d74 <__alt_mem_onchip_mem+0xff782d74>
  8034dc:	d9002c17 	ldw	r4,176(sp)
  8034e0:	d9801e04 	addi	r6,sp,120
  8034e4:	b80b883a 	mov	r5,r23
  8034e8:	08084ac0 	call	8084ac <__sprint_r>
  8034ec:	103e5d26 	beq	r2,zero,802e64 <__alt_mem_onchip_mem+0xff782e64>
  8034f0:	003cad06 	br	8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  8034f4:	d9002c17 	ldw	r4,176(sp)
  8034f8:	d9801e04 	addi	r6,sp,120
  8034fc:	b80b883a 	mov	r5,r23
  803500:	08084ac0 	call	8084ac <__sprint_r>
  803504:	103ca81e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  803508:	d8c02017 	ldw	r3,128(sp)
  80350c:	da000404 	addi	r8,sp,16
  803510:	003e0b06 	br	802d40 <__alt_mem_onchip_mem+0xff782d40>
  803514:	d9002c17 	ldw	r4,176(sp)
  803518:	d9801e04 	addi	r6,sp,120
  80351c:	b80b883a 	mov	r5,r23
  803520:	08084ac0 	call	8084ac <__sprint_r>
  803524:	103ca01e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  803528:	d8c02017 	ldw	r3,128(sp)
  80352c:	da000404 	addi	r8,sp,16
  803530:	003dbd06 	br	802c28 <__alt_mem_onchip_mem+0xff782c28>
  803534:	d9002c17 	ldw	r4,176(sp)
  803538:	d9801e04 	addi	r6,sp,120
  80353c:	b80b883a 	mov	r5,r23
  803540:	08084ac0 	call	8084ac <__sprint_r>
  803544:	103c981e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  803548:	d8c02017 	ldw	r3,128(sp)
  80354c:	da000404 	addi	r8,sp,16
  803550:	003dc306 	br	802c60 <__alt_mem_onchip_mem+0xff782c60>
  803554:	d8802917 	ldw	r2,164(sp)
  803558:	d8002785 	stb	zero,158(sp)
  80355c:	103f0616 	blt	r2,zero,803178 <__alt_mem_onchip_mem+0xff783178>
  803560:	00ffdfc4 	movi	r3,-129
  803564:	9d84b03a 	or	r2,r19,r22
  803568:	90e4703a 	and	r18,r18,r3
  80356c:	103c6b26 	beq	r2,zero,80271c <__alt_mem_onchip_mem+0xff78271c>
  803570:	0039883a 	mov	fp,zero
  803574:	003e7406 	br	802f48 <__alt_mem_onchip_mem+0xff782f48>
  803578:	9080040c 	andi	r2,r18,16
  80357c:	1001b326 	beq	r2,zero,803c4c <___vfprintf_internal_r+0x18ac>
  803580:	d9002d17 	ldw	r4,180(sp)
  803584:	d9402917 	ldw	r5,164(sp)
  803588:	d8002785 	stb	zero,158(sp)
  80358c:	20800104 	addi	r2,r4,4
  803590:	24c00017 	ldw	r19,0(r4)
  803594:	002d883a 	mov	r22,zero
  803598:	2801b516 	blt	r5,zero,803c70 <___vfprintf_internal_r+0x18d0>
  80359c:	00ffdfc4 	movi	r3,-129
  8035a0:	d8802d15 	stw	r2,180(sp)
  8035a4:	90e4703a 	and	r18,r18,r3
  8035a8:	983d2726 	beq	r19,zero,802a48 <__alt_mem_onchip_mem+0xff782a48>
  8035ac:	0039883a 	mov	fp,zero
  8035b0:	003d2a06 	br	802a5c <__alt_mem_onchip_mem+0xff782a5c>
  8035b4:	dc402617 	ldw	r17,152(sp)
  8035b8:	0441d30e 	bge	zero,r17,803d08 <___vfprintf_internal_r+0x1968>
  8035bc:	dc403217 	ldw	r17,200(sp)
  8035c0:	d8803317 	ldw	r2,204(sp)
  8035c4:	1440010e 	bge	r2,r17,8035cc <___vfprintf_internal_r+0x122c>
  8035c8:	1023883a 	mov	r17,r2
  8035cc:	04400a0e 	bge	zero,r17,8035f8 <___vfprintf_internal_r+0x1258>
  8035d0:	d8801f17 	ldw	r2,124(sp)
  8035d4:	1c47883a 	add	r3,r3,r17
  8035d8:	44000015 	stw	r16,0(r8)
  8035dc:	10800044 	addi	r2,r2,1
  8035e0:	44400115 	stw	r17,4(r8)
  8035e4:	d8c02015 	stw	r3,128(sp)
  8035e8:	d8801f15 	stw	r2,124(sp)
  8035ec:	010001c4 	movi	r4,7
  8035f0:	20826516 	blt	r4,r2,803f88 <___vfprintf_internal_r+0x1be8>
  8035f4:	42000204 	addi	r8,r8,8
  8035f8:	88026116 	blt	r17,zero,803f80 <___vfprintf_internal_r+0x1be0>
  8035fc:	d9003217 	ldw	r4,200(sp)
  803600:	2463c83a 	sub	r17,r4,r17
  803604:	04407b0e 	bge	zero,r17,8037f4 <___vfprintf_internal_r+0x1454>
  803608:	05800404 	movi	r22,16
  80360c:	d8801f17 	ldw	r2,124(sp)
  803610:	b4419d0e 	bge	r22,r17,803c88 <___vfprintf_internal_r+0x18e8>
  803614:	01002074 	movhi	r4,129
  803618:	2108ac84 	addi	r4,r4,8882
  80361c:	d9002b15 	stw	r4,172(sp)
  803620:	070001c4 	movi	fp,7
  803624:	dcc02c17 	ldw	r19,176(sp)
  803628:	00000306 	br	803638 <___vfprintf_internal_r+0x1298>
  80362c:	42000204 	addi	r8,r8,8
  803630:	8c7ffc04 	addi	r17,r17,-16
  803634:	b441970e 	bge	r22,r17,803c94 <___vfprintf_internal_r+0x18f4>
  803638:	18c00404 	addi	r3,r3,16
  80363c:	10800044 	addi	r2,r2,1
  803640:	45000015 	stw	r20,0(r8)
  803644:	45800115 	stw	r22,4(r8)
  803648:	d8c02015 	stw	r3,128(sp)
  80364c:	d8801f15 	stw	r2,124(sp)
  803650:	e0bff60e 	bge	fp,r2,80362c <__alt_mem_onchip_mem+0xff78362c>
  803654:	d9801e04 	addi	r6,sp,120
  803658:	b80b883a 	mov	r5,r23
  80365c:	9809883a 	mov	r4,r19
  803660:	08084ac0 	call	8084ac <__sprint_r>
  803664:	103c501e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  803668:	d8c02017 	ldw	r3,128(sp)
  80366c:	d8801f17 	ldw	r2,124(sp)
  803670:	da000404 	addi	r8,sp,16
  803674:	003fee06 	br	803630 <__alt_mem_onchip_mem+0xff783630>
  803678:	d9002c17 	ldw	r4,176(sp)
  80367c:	d9801e04 	addi	r6,sp,120
  803680:	b80b883a 	mov	r5,r23
  803684:	08084ac0 	call	8084ac <__sprint_r>
  803688:	103c471e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  80368c:	d8c02017 	ldw	r3,128(sp)
  803690:	df002787 	ldb	fp,158(sp)
  803694:	da000404 	addi	r8,sp,16
  803698:	003d5606 	br	802bf4 <__alt_mem_onchip_mem+0xff782bf4>
  80369c:	9080040c 	andi	r2,r18,16
  8036a0:	10016126 	beq	r2,zero,803c28 <___vfprintf_internal_r+0x1888>
  8036a4:	d8802d17 	ldw	r2,180(sp)
  8036a8:	14c00017 	ldw	r19,0(r2)
  8036ac:	10800104 	addi	r2,r2,4
  8036b0:	d8802d15 	stw	r2,180(sp)
  8036b4:	982dd7fa 	srai	r22,r19,31
  8036b8:	b005883a 	mov	r2,r22
  8036bc:	003c8206 	br	8028c8 <__alt_mem_onchip_mem+0xff7828c8>
  8036c0:	9080040c 	andi	r2,r18,16
  8036c4:	10003526 	beq	r2,zero,80379c <___vfprintf_internal_r+0x13fc>
  8036c8:	d9402d17 	ldw	r5,180(sp)
  8036cc:	d8c02917 	ldw	r3,164(sp)
  8036d0:	d8002785 	stb	zero,158(sp)
  8036d4:	28800104 	addi	r2,r5,4
  8036d8:	2cc00017 	ldw	r19,0(r5)
  8036dc:	002d883a 	mov	r22,zero
  8036e0:	18003716 	blt	r3,zero,8037c0 <___vfprintf_internal_r+0x1420>
  8036e4:	00ffdfc4 	movi	r3,-129
  8036e8:	d8802d15 	stw	r2,180(sp)
  8036ec:	90e4703a 	and	r18,r18,r3
  8036f0:	0039883a 	mov	fp,zero
  8036f4:	983df326 	beq	r19,zero,802ec4 <__alt_mem_onchip_mem+0xff782ec4>
  8036f8:	00800244 	movi	r2,9
  8036fc:	14fc7b36 	bltu	r2,r19,8028ec <__alt_mem_onchip_mem+0xff7828ec>
  803700:	d8c02817 	ldw	r3,160(sp)
  803704:	dc001dc4 	addi	r16,sp,119
  803708:	9cc00c04 	addi	r19,r19,48
  80370c:	1c07c83a 	sub	r3,r3,r16
  803710:	dcc01dc5 	stb	r19,119(sp)
  803714:	d8c02e15 	stw	r3,184(sp)
  803718:	003ce806 	br	802abc <__alt_mem_onchip_mem+0xff782abc>
  80371c:	d8803317 	ldw	r2,204(sp)
  803720:	143fffc4 	addi	r16,r2,-1
  803724:	043f4d0e 	bge	zero,r16,80345c <__alt_mem_onchip_mem+0xff78345c>
  803728:	07000404 	movi	fp,16
  80372c:	e400810e 	bge	fp,r16,803934 <___vfprintf_internal_r+0x1594>
  803730:	01402074 	movhi	r5,129
  803734:	2948ac84 	addi	r5,r5,8882
  803738:	d9402b15 	stw	r5,172(sp)
  80373c:	01c001c4 	movi	r7,7
  803740:	dcc02c17 	ldw	r19,176(sp)
  803744:	00000306 	br	803754 <___vfprintf_internal_r+0x13b4>
  803748:	b5800204 	addi	r22,r22,8
  80374c:	843ffc04 	addi	r16,r16,-16
  803750:	e4007b0e 	bge	fp,r16,803940 <___vfprintf_internal_r+0x15a0>
  803754:	18c00404 	addi	r3,r3,16
  803758:	8c400044 	addi	r17,r17,1
  80375c:	b5000015 	stw	r20,0(r22)
  803760:	b7000115 	stw	fp,4(r22)
  803764:	d8c02015 	stw	r3,128(sp)
  803768:	dc401f15 	stw	r17,124(sp)
  80376c:	3c7ff60e 	bge	r7,r17,803748 <__alt_mem_onchip_mem+0xff783748>
  803770:	d9801e04 	addi	r6,sp,120
  803774:	b80b883a 	mov	r5,r23
  803778:	9809883a 	mov	r4,r19
  80377c:	d9c03c15 	stw	r7,240(sp)
  803780:	08084ac0 	call	8084ac <__sprint_r>
  803784:	d9c03c17 	ldw	r7,240(sp)
  803788:	103c071e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  80378c:	d8c02017 	ldw	r3,128(sp)
  803790:	dc401f17 	ldw	r17,124(sp)
  803794:	dd800404 	addi	r22,sp,16
  803798:	003fec06 	br	80374c <__alt_mem_onchip_mem+0xff78374c>
  80379c:	9080100c 	andi	r2,r18,64
  8037a0:	d8002785 	stb	zero,158(sp)
  8037a4:	10010e26 	beq	r2,zero,803be0 <___vfprintf_internal_r+0x1840>
  8037a8:	d9002d17 	ldw	r4,180(sp)
  8037ac:	d9402917 	ldw	r5,164(sp)
  8037b0:	002d883a 	mov	r22,zero
  8037b4:	20800104 	addi	r2,r4,4
  8037b8:	24c0000b 	ldhu	r19,0(r4)
  8037bc:	283fc90e 	bge	r5,zero,8036e4 <__alt_mem_onchip_mem+0xff7836e4>
  8037c0:	d8802d15 	stw	r2,180(sp)
  8037c4:	0039883a 	mov	fp,zero
  8037c8:	9d84b03a 	or	r2,r19,r22
  8037cc:	103c461e 	bne	r2,zero,8028e8 <__alt_mem_onchip_mem+0xff7828e8>
  8037d0:	00800044 	movi	r2,1
  8037d4:	003e6c06 	br	803188 <__alt_mem_onchip_mem+0xff783188>
  8037d8:	d9002c17 	ldw	r4,176(sp)
  8037dc:	d9801e04 	addi	r6,sp,120
  8037e0:	b80b883a 	mov	r5,r23
  8037e4:	08084ac0 	call	8084ac <__sprint_r>
  8037e8:	103bef1e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  8037ec:	d8c02017 	ldw	r3,128(sp)
  8037f0:	da000404 	addi	r8,sp,16
  8037f4:	d9003217 	ldw	r4,200(sp)
  8037f8:	d8802617 	ldw	r2,152(sp)
  8037fc:	d9403317 	ldw	r5,204(sp)
  803800:	8123883a 	add	r17,r16,r4
  803804:	11400216 	blt	r2,r5,803810 <___vfprintf_internal_r+0x1470>
  803808:	9100004c 	andi	r4,r18,1
  80380c:	20000d26 	beq	r4,zero,803844 <___vfprintf_internal_r+0x14a4>
  803810:	d9003717 	ldw	r4,220(sp)
  803814:	d9403417 	ldw	r5,208(sp)
  803818:	1907883a 	add	r3,r3,r4
  80381c:	d9001f17 	ldw	r4,124(sp)
  803820:	41400015 	stw	r5,0(r8)
  803824:	d9403717 	ldw	r5,220(sp)
  803828:	21000044 	addi	r4,r4,1
  80382c:	d8c02015 	stw	r3,128(sp)
  803830:	41400115 	stw	r5,4(r8)
  803834:	d9001f15 	stw	r4,124(sp)
  803838:	014001c4 	movi	r5,7
  80383c:	2901e816 	blt	r5,r4,803fe0 <___vfprintf_internal_r+0x1c40>
  803840:	42000204 	addi	r8,r8,8
  803844:	d9003317 	ldw	r4,204(sp)
  803848:	8121883a 	add	r16,r16,r4
  80384c:	2085c83a 	sub	r2,r4,r2
  803850:	8461c83a 	sub	r16,r16,r17
  803854:	1400010e 	bge	r2,r16,80385c <___vfprintf_internal_r+0x14bc>
  803858:	1021883a 	mov	r16,r2
  80385c:	04000a0e 	bge	zero,r16,803888 <___vfprintf_internal_r+0x14e8>
  803860:	d9001f17 	ldw	r4,124(sp)
  803864:	1c07883a 	add	r3,r3,r16
  803868:	44400015 	stw	r17,0(r8)
  80386c:	21000044 	addi	r4,r4,1
  803870:	44000115 	stw	r16,4(r8)
  803874:	d8c02015 	stw	r3,128(sp)
  803878:	d9001f15 	stw	r4,124(sp)
  80387c:	014001c4 	movi	r5,7
  803880:	2901fb16 	blt	r5,r4,804070 <___vfprintf_internal_r+0x1cd0>
  803884:	42000204 	addi	r8,r8,8
  803888:	8001f716 	blt	r16,zero,804068 <___vfprintf_internal_r+0x1cc8>
  80388c:	1421c83a 	sub	r16,r2,r16
  803890:	043d380e 	bge	zero,r16,802d74 <__alt_mem_onchip_mem+0xff782d74>
  803894:	04400404 	movi	r17,16
  803898:	d8801f17 	ldw	r2,124(sp)
  80389c:	8c3efb0e 	bge	r17,r16,80348c <__alt_mem_onchip_mem+0xff78348c>
  8038a0:	01402074 	movhi	r5,129
  8038a4:	2948ac84 	addi	r5,r5,8882
  8038a8:	d9402b15 	stw	r5,172(sp)
  8038ac:	058001c4 	movi	r22,7
  8038b0:	dcc02c17 	ldw	r19,176(sp)
  8038b4:	00000306 	br	8038c4 <___vfprintf_internal_r+0x1524>
  8038b8:	42000204 	addi	r8,r8,8
  8038bc:	843ffc04 	addi	r16,r16,-16
  8038c0:	8c3ef50e 	bge	r17,r16,803498 <__alt_mem_onchip_mem+0xff783498>
  8038c4:	18c00404 	addi	r3,r3,16
  8038c8:	10800044 	addi	r2,r2,1
  8038cc:	45000015 	stw	r20,0(r8)
  8038d0:	44400115 	stw	r17,4(r8)
  8038d4:	d8c02015 	stw	r3,128(sp)
  8038d8:	d8801f15 	stw	r2,124(sp)
  8038dc:	b0bff60e 	bge	r22,r2,8038b8 <__alt_mem_onchip_mem+0xff7838b8>
  8038e0:	d9801e04 	addi	r6,sp,120
  8038e4:	b80b883a 	mov	r5,r23
  8038e8:	9809883a 	mov	r4,r19
  8038ec:	08084ac0 	call	8084ac <__sprint_r>
  8038f0:	103bad1e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  8038f4:	d8c02017 	ldw	r3,128(sp)
  8038f8:	d8801f17 	ldw	r2,124(sp)
  8038fc:	da000404 	addi	r8,sp,16
  803900:	003fee06 	br	8038bc <__alt_mem_onchip_mem+0xff7838bc>
  803904:	9088703a 	and	r4,r18,r2
  803908:	203eab1e 	bne	r4,zero,8033b8 <__alt_mem_onchip_mem+0xff7833b8>
  80390c:	dc401f17 	ldw	r17,124(sp)
  803910:	40800115 	stw	r2,4(r8)
  803914:	44000015 	stw	r16,0(r8)
  803918:	8c400044 	addi	r17,r17,1
  80391c:	d8c02015 	stw	r3,128(sp)
  803920:	dc401f15 	stw	r17,124(sp)
  803924:	008001c4 	movi	r2,7
  803928:	14400e16 	blt	r2,r17,803964 <___vfprintf_internal_r+0x15c4>
  80392c:	45800204 	addi	r22,r8,8
  803930:	003eca06 	br	80345c <__alt_mem_onchip_mem+0xff78345c>
  803934:	01002074 	movhi	r4,129
  803938:	2108ac84 	addi	r4,r4,8882
  80393c:	d9002b15 	stw	r4,172(sp)
  803940:	d8802b17 	ldw	r2,172(sp)
  803944:	1c07883a 	add	r3,r3,r16
  803948:	8c400044 	addi	r17,r17,1
  80394c:	b0800015 	stw	r2,0(r22)
  803950:	b4000115 	stw	r16,4(r22)
  803954:	d8c02015 	stw	r3,128(sp)
  803958:	dc401f15 	stw	r17,124(sp)
  80395c:	008001c4 	movi	r2,7
  803960:	147ebd0e 	bge	r2,r17,803458 <__alt_mem_onchip_mem+0xff783458>
  803964:	d9002c17 	ldw	r4,176(sp)
  803968:	d9801e04 	addi	r6,sp,120
  80396c:	b80b883a 	mov	r5,r23
  803970:	08084ac0 	call	8084ac <__sprint_r>
  803974:	103b8c1e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  803978:	d8c02017 	ldw	r3,128(sp)
  80397c:	dc401f17 	ldw	r17,124(sp)
  803980:	dd800404 	addi	r22,sp,16
  803984:	003eb506 	br	80345c <__alt_mem_onchip_mem+0xff78345c>
  803988:	d9002c17 	ldw	r4,176(sp)
  80398c:	d9801e04 	addi	r6,sp,120
  803990:	b80b883a 	mov	r5,r23
  803994:	08084ac0 	call	8084ac <__sprint_r>
  803998:	103b831e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  80399c:	d8c02017 	ldw	r3,128(sp)
  8039a0:	dc401f17 	ldw	r17,124(sp)
  8039a4:	da000404 	addi	r8,sp,16
  8039a8:	003e8d06 	br	8033e0 <__alt_mem_onchip_mem+0xff7833e0>
  8039ac:	d9002c17 	ldw	r4,176(sp)
  8039b0:	d9801e04 	addi	r6,sp,120
  8039b4:	b80b883a 	mov	r5,r23
  8039b8:	08084ac0 	call	8084ac <__sprint_r>
  8039bc:	103b7a1e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  8039c0:	d8c02017 	ldw	r3,128(sp)
  8039c4:	dc401f17 	ldw	r17,124(sp)
  8039c8:	dd800404 	addi	r22,sp,16
  8039cc:	003e8f06 	br	80340c <__alt_mem_onchip_mem+0xff78340c>
  8039d0:	0027883a 	mov	r19,zero
  8039d4:	003f4a06 	br	803700 <__alt_mem_onchip_mem+0xff783700>
  8039d8:	d9002c17 	ldw	r4,176(sp)
  8039dc:	d9801e04 	addi	r6,sp,120
  8039e0:	b80b883a 	mov	r5,r23
  8039e4:	08084ac0 	call	8084ac <__sprint_r>
  8039e8:	103b6f1e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  8039ec:	d8c02017 	ldw	r3,128(sp)
  8039f0:	da000404 	addi	r8,sp,16
  8039f4:	003c9d06 	br	802c6c <__alt_mem_onchip_mem+0xff782c6c>
  8039f8:	04e7c83a 	sub	r19,zero,r19
  8039fc:	9804c03a 	cmpne	r2,r19,zero
  803a00:	05adc83a 	sub	r22,zero,r22
  803a04:	b0adc83a 	sub	r22,r22,r2
  803a08:	d8802917 	ldw	r2,164(sp)
  803a0c:	07000b44 	movi	fp,45
  803a10:	df002785 	stb	fp,158(sp)
  803a14:	10017b16 	blt	r2,zero,804004 <___vfprintf_internal_r+0x1c64>
  803a18:	00bfdfc4 	movi	r2,-129
  803a1c:	90a4703a 	and	r18,r18,r2
  803a20:	003bb106 	br	8028e8 <__alt_mem_onchip_mem+0xff7828e8>
  803a24:	d9003617 	ldw	r4,216(sp)
  803a28:	d9403817 	ldw	r5,224(sp)
  803a2c:	da003d15 	stw	r8,244(sp)
  803a30:	08081c80 	call	8081c8 <__fpclassifyd>
  803a34:	da003d17 	ldw	r8,244(sp)
  803a38:	1000f026 	beq	r2,zero,803dfc <___vfprintf_internal_r+0x1a5c>
  803a3c:	d9002917 	ldw	r4,164(sp)
  803a40:	05bff7c4 	movi	r22,-33
  803a44:	00bfffc4 	movi	r2,-1
  803a48:	8dac703a 	and	r22,r17,r22
  803a4c:	20820026 	beq	r4,r2,804250 <___vfprintf_internal_r+0x1eb0>
  803a50:	008011c4 	movi	r2,71
  803a54:	b081f726 	beq	r22,r2,804234 <___vfprintf_internal_r+0x1e94>
  803a58:	d9003817 	ldw	r4,224(sp)
  803a5c:	90c04014 	ori	r3,r18,256
  803a60:	d8c02b15 	stw	r3,172(sp)
  803a64:	20021516 	blt	r4,zero,8042bc <___vfprintf_internal_r+0x1f1c>
  803a68:	dcc03817 	ldw	r19,224(sp)
  803a6c:	d8002a05 	stb	zero,168(sp)
  803a70:	00801984 	movi	r2,102
  803a74:	8881f926 	beq	r17,r2,80425c <___vfprintf_internal_r+0x1ebc>
  803a78:	00801184 	movi	r2,70
  803a7c:	88821c26 	beq	r17,r2,8042f0 <___vfprintf_internal_r+0x1f50>
  803a80:	00801144 	movi	r2,69
  803a84:	b081ef26 	beq	r22,r2,804244 <___vfprintf_internal_r+0x1ea4>
  803a88:	d8c02917 	ldw	r3,164(sp)
  803a8c:	d8802104 	addi	r2,sp,132
  803a90:	d8800315 	stw	r2,12(sp)
  803a94:	d9403617 	ldw	r5,216(sp)
  803a98:	d8802504 	addi	r2,sp,148
  803a9c:	d9002c17 	ldw	r4,176(sp)
  803aa0:	d8800215 	stw	r2,8(sp)
  803aa4:	d8802604 	addi	r2,sp,152
  803aa8:	d8c00015 	stw	r3,0(sp)
  803aac:	d8800115 	stw	r2,4(sp)
  803ab0:	01c00084 	movi	r7,2
  803ab4:	980d883a 	mov	r6,r19
  803ab8:	d8c03c15 	stw	r3,240(sp)
  803abc:	da003d15 	stw	r8,244(sp)
  803ac0:	0804a780 	call	804a78 <_dtoa_r>
  803ac4:	1021883a 	mov	r16,r2
  803ac8:	008019c4 	movi	r2,103
  803acc:	d8c03c17 	ldw	r3,240(sp)
  803ad0:	da003d17 	ldw	r8,244(sp)
  803ad4:	88817126 	beq	r17,r2,80409c <___vfprintf_internal_r+0x1cfc>
  803ad8:	008011c4 	movi	r2,71
  803adc:	88829226 	beq	r17,r2,804528 <___vfprintf_internal_r+0x2188>
  803ae0:	80f9883a 	add	fp,r16,r3
  803ae4:	d9003617 	ldw	r4,216(sp)
  803ae8:	000d883a 	mov	r6,zero
  803aec:	000f883a 	mov	r7,zero
  803af0:	980b883a 	mov	r5,r19
  803af4:	da003d15 	stw	r8,244(sp)
  803af8:	080ca7c0 	call	80ca7c <__eqdf2>
  803afc:	da003d17 	ldw	r8,244(sp)
  803b00:	10018d26 	beq	r2,zero,804138 <___vfprintf_internal_r+0x1d98>
  803b04:	d8802117 	ldw	r2,132(sp)
  803b08:	1700062e 	bgeu	r2,fp,803b24 <___vfprintf_internal_r+0x1784>
  803b0c:	01000c04 	movi	r4,48
  803b10:	10c00044 	addi	r3,r2,1
  803b14:	d8c02115 	stw	r3,132(sp)
  803b18:	11000005 	stb	r4,0(r2)
  803b1c:	d8802117 	ldw	r2,132(sp)
  803b20:	173ffb36 	bltu	r2,fp,803b10 <__alt_mem_onchip_mem+0xff783b10>
  803b24:	1405c83a 	sub	r2,r2,r16
  803b28:	d8803315 	stw	r2,204(sp)
  803b2c:	008011c4 	movi	r2,71
  803b30:	b0817626 	beq	r22,r2,80410c <___vfprintf_internal_r+0x1d6c>
  803b34:	00801944 	movi	r2,101
  803b38:	1442810e 	bge	r2,r17,804540 <___vfprintf_internal_r+0x21a0>
  803b3c:	d8c02617 	ldw	r3,152(sp)
  803b40:	00801984 	movi	r2,102
  803b44:	d8c03215 	stw	r3,200(sp)
  803b48:	8881fe26 	beq	r17,r2,804344 <___vfprintf_internal_r+0x1fa4>
  803b4c:	d8c03217 	ldw	r3,200(sp)
  803b50:	d9003317 	ldw	r4,204(sp)
  803b54:	1901dd16 	blt	r3,r4,8042cc <___vfprintf_internal_r+0x1f2c>
  803b58:	9480004c 	andi	r18,r18,1
  803b5c:	90022b1e 	bne	r18,zero,80440c <___vfprintf_internal_r+0x206c>
  803b60:	1805883a 	mov	r2,r3
  803b64:	18028016 	blt	r3,zero,804568 <___vfprintf_internal_r+0x21c8>
  803b68:	d8c03217 	ldw	r3,200(sp)
  803b6c:	044019c4 	movi	r17,103
  803b70:	d8c02e15 	stw	r3,184(sp)
  803b74:	df002a07 	ldb	fp,168(sp)
  803b78:	e001531e 	bne	fp,zero,8040c8 <___vfprintf_internal_r+0x1d28>
  803b7c:	df002783 	ldbu	fp,158(sp)
  803b80:	d8802a15 	stw	r2,168(sp)
  803b84:	dc802b17 	ldw	r18,172(sp)
  803b88:	d8002915 	stw	zero,164(sp)
  803b8c:	003bd106 	br	802ad4 <__alt_mem_onchip_mem+0xff782ad4>
  803b90:	d8802d17 	ldw	r2,180(sp)
  803b94:	d8c02d17 	ldw	r3,180(sp)
  803b98:	d9002d17 	ldw	r4,180(sp)
  803b9c:	10800017 	ldw	r2,0(r2)
  803ba0:	18c00117 	ldw	r3,4(r3)
  803ba4:	21000204 	addi	r4,r4,8
  803ba8:	d8803615 	stw	r2,216(sp)
  803bac:	d8c03815 	stw	r3,224(sp)
  803bb0:	d9002d15 	stw	r4,180(sp)
  803bb4:	003b7506 	br	80298c <__alt_mem_onchip_mem+0xff78298c>
  803bb8:	ac400007 	ldb	r17,0(r21)
  803bbc:	003a5906 	br	802524 <__alt_mem_onchip_mem+0xff782524>
  803bc0:	9080100c 	andi	r2,r18,64
  803bc4:	1000a826 	beq	r2,zero,803e68 <___vfprintf_internal_r+0x1ac8>
  803bc8:	d9002d17 	ldw	r4,180(sp)
  803bcc:	002d883a 	mov	r22,zero
  803bd0:	24c0000b 	ldhu	r19,0(r4)
  803bd4:	21000104 	addi	r4,r4,4
  803bd8:	d9002d15 	stw	r4,180(sp)
  803bdc:	003ccb06 	br	802f0c <__alt_mem_onchip_mem+0xff782f0c>
  803be0:	d8c02d17 	ldw	r3,180(sp)
  803be4:	d9002917 	ldw	r4,164(sp)
  803be8:	002d883a 	mov	r22,zero
  803bec:	18800104 	addi	r2,r3,4
  803bf0:	1cc00017 	ldw	r19,0(r3)
  803bf4:	203ebb0e 	bge	r4,zero,8036e4 <__alt_mem_onchip_mem+0xff7836e4>
  803bf8:	003ef106 	br	8037c0 <__alt_mem_onchip_mem+0xff7837c0>
  803bfc:	9080040c 	andi	r2,r18,16
  803c00:	1000921e 	bne	r2,zero,803e4c <___vfprintf_internal_r+0x1aac>
  803c04:	9480100c 	andi	r18,r18,64
  803c08:	90013926 	beq	r18,zero,8040f0 <___vfprintf_internal_r+0x1d50>
  803c0c:	d9002d17 	ldw	r4,180(sp)
  803c10:	d9402f17 	ldw	r5,188(sp)
  803c14:	20800017 	ldw	r2,0(r4)
  803c18:	21000104 	addi	r4,r4,4
  803c1c:	d9002d15 	stw	r4,180(sp)
  803c20:	1140000d 	sth	r5,0(r2)
  803c24:	003a1606 	br	802480 <__alt_mem_onchip_mem+0xff782480>
  803c28:	9080100c 	andi	r2,r18,64
  803c2c:	10008026 	beq	r2,zero,803e30 <___vfprintf_internal_r+0x1a90>
  803c30:	d8c02d17 	ldw	r3,180(sp)
  803c34:	1cc0000f 	ldh	r19,0(r3)
  803c38:	18c00104 	addi	r3,r3,4
  803c3c:	d8c02d15 	stw	r3,180(sp)
  803c40:	982dd7fa 	srai	r22,r19,31
  803c44:	b005883a 	mov	r2,r22
  803c48:	003b1f06 	br	8028c8 <__alt_mem_onchip_mem+0xff7828c8>
  803c4c:	9080100c 	andi	r2,r18,64
  803c50:	d8002785 	stb	zero,158(sp)
  803c54:	10008a1e 	bne	r2,zero,803e80 <___vfprintf_internal_r+0x1ae0>
  803c58:	d9402d17 	ldw	r5,180(sp)
  803c5c:	d8c02917 	ldw	r3,164(sp)
  803c60:	002d883a 	mov	r22,zero
  803c64:	28800104 	addi	r2,r5,4
  803c68:	2cc00017 	ldw	r19,0(r5)
  803c6c:	183e4b0e 	bge	r3,zero,80359c <__alt_mem_onchip_mem+0xff78359c>
  803c70:	9d86b03a 	or	r3,r19,r22
  803c74:	d8802d15 	stw	r2,180(sp)
  803c78:	183e4c1e 	bne	r3,zero,8035ac <__alt_mem_onchip_mem+0xff7835ac>
  803c7c:	0039883a 	mov	fp,zero
  803c80:	0005883a 	mov	r2,zero
  803c84:	003d4006 	br	803188 <__alt_mem_onchip_mem+0xff783188>
  803c88:	01402074 	movhi	r5,129
  803c8c:	2948ac84 	addi	r5,r5,8882
  803c90:	d9402b15 	stw	r5,172(sp)
  803c94:	d9402b17 	ldw	r5,172(sp)
  803c98:	1c47883a 	add	r3,r3,r17
  803c9c:	10800044 	addi	r2,r2,1
  803ca0:	41400015 	stw	r5,0(r8)
  803ca4:	44400115 	stw	r17,4(r8)
  803ca8:	d8c02015 	stw	r3,128(sp)
  803cac:	d8801f15 	stw	r2,124(sp)
  803cb0:	010001c4 	movi	r4,7
  803cb4:	20bec816 	blt	r4,r2,8037d8 <__alt_mem_onchip_mem+0xff7837d8>
  803cb8:	42000204 	addi	r8,r8,8
  803cbc:	003ecd06 	br	8037f4 <__alt_mem_onchip_mem+0xff7837f4>
  803cc0:	d9002917 	ldw	r4,164(sp)
  803cc4:	d8002785 	stb	zero,158(sp)
  803cc8:	203d2d16 	blt	r4,zero,803180 <__alt_mem_onchip_mem+0xff783180>
  803ccc:	00bfdfc4 	movi	r2,-129
  803cd0:	90a4703a 	and	r18,r18,r2
  803cd4:	003a9106 	br	80271c <__alt_mem_onchip_mem+0xff78271c>
  803cd8:	01002074 	movhi	r4,129
  803cdc:	2108ac84 	addi	r4,r4,8882
  803ce0:	d9002b15 	stw	r4,172(sp)
  803ce4:	003c0c06 	br	802d18 <__alt_mem_onchip_mem+0xff782d18>
  803ce8:	d9002c17 	ldw	r4,176(sp)
  803cec:	d9801e04 	addi	r6,sp,120
  803cf0:	b80b883a 	mov	r5,r23
  803cf4:	08084ac0 	call	8084ac <__sprint_r>
  803cf8:	103aab1e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  803cfc:	d8c02017 	ldw	r3,128(sp)
  803d00:	da000404 	addi	r8,sp,16
  803d04:	003d4106 	br	80320c <__alt_mem_onchip_mem+0xff78320c>
  803d08:	d8801f17 	ldw	r2,124(sp)
  803d0c:	01402074 	movhi	r5,129
  803d10:	01000044 	movi	r4,1
  803d14:	18c00044 	addi	r3,r3,1
  803d18:	10800044 	addi	r2,r2,1
  803d1c:	2948ac04 	addi	r5,r5,8880
  803d20:	41000115 	stw	r4,4(r8)
  803d24:	41400015 	stw	r5,0(r8)
  803d28:	d8c02015 	stw	r3,128(sp)
  803d2c:	d8801f15 	stw	r2,124(sp)
  803d30:	010001c4 	movi	r4,7
  803d34:	20805c16 	blt	r4,r2,803ea8 <___vfprintf_internal_r+0x1b08>
  803d38:	42000204 	addi	r8,r8,8
  803d3c:	8800041e 	bne	r17,zero,803d50 <___vfprintf_internal_r+0x19b0>
  803d40:	d8803317 	ldw	r2,204(sp)
  803d44:	1000021e 	bne	r2,zero,803d50 <___vfprintf_internal_r+0x19b0>
  803d48:	9080004c 	andi	r2,r18,1
  803d4c:	103c0926 	beq	r2,zero,802d74 <__alt_mem_onchip_mem+0xff782d74>
  803d50:	d9003717 	ldw	r4,220(sp)
  803d54:	d8801f17 	ldw	r2,124(sp)
  803d58:	d9403417 	ldw	r5,208(sp)
  803d5c:	20c7883a 	add	r3,r4,r3
  803d60:	10800044 	addi	r2,r2,1
  803d64:	41000115 	stw	r4,4(r8)
  803d68:	41400015 	stw	r5,0(r8)
  803d6c:	d8c02015 	stw	r3,128(sp)
  803d70:	d8801f15 	stw	r2,124(sp)
  803d74:	010001c4 	movi	r4,7
  803d78:	20812116 	blt	r4,r2,804200 <___vfprintf_internal_r+0x1e60>
  803d7c:	42000204 	addi	r8,r8,8
  803d80:	0463c83a 	sub	r17,zero,r17
  803d84:	0440730e 	bge	zero,r17,803f54 <___vfprintf_internal_r+0x1bb4>
  803d88:	05800404 	movi	r22,16
  803d8c:	b440860e 	bge	r22,r17,803fa8 <___vfprintf_internal_r+0x1c08>
  803d90:	01402074 	movhi	r5,129
  803d94:	2948ac84 	addi	r5,r5,8882
  803d98:	d9402b15 	stw	r5,172(sp)
  803d9c:	070001c4 	movi	fp,7
  803da0:	dcc02c17 	ldw	r19,176(sp)
  803da4:	00000306 	br	803db4 <___vfprintf_internal_r+0x1a14>
  803da8:	42000204 	addi	r8,r8,8
  803dac:	8c7ffc04 	addi	r17,r17,-16
  803db0:	b440800e 	bge	r22,r17,803fb4 <___vfprintf_internal_r+0x1c14>
  803db4:	18c00404 	addi	r3,r3,16
  803db8:	10800044 	addi	r2,r2,1
  803dbc:	45000015 	stw	r20,0(r8)
  803dc0:	45800115 	stw	r22,4(r8)
  803dc4:	d8c02015 	stw	r3,128(sp)
  803dc8:	d8801f15 	stw	r2,124(sp)
  803dcc:	e0bff60e 	bge	fp,r2,803da8 <__alt_mem_onchip_mem+0xff783da8>
  803dd0:	d9801e04 	addi	r6,sp,120
  803dd4:	b80b883a 	mov	r5,r23
  803dd8:	9809883a 	mov	r4,r19
  803ddc:	08084ac0 	call	8084ac <__sprint_r>
  803de0:	103a711e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  803de4:	d8c02017 	ldw	r3,128(sp)
  803de8:	d8801f17 	ldw	r2,124(sp)
  803dec:	da000404 	addi	r8,sp,16
  803df0:	003fee06 	br	803dac <__alt_mem_onchip_mem+0xff783dac>
  803df4:	00bfffc4 	movi	r2,-1
  803df8:	003a6f06 	br	8027b8 <__alt_mem_onchip_mem+0xff7827b8>
  803dfc:	008011c4 	movi	r2,71
  803e00:	1440b816 	blt	r2,r17,8040e4 <___vfprintf_internal_r+0x1d44>
  803e04:	04002074 	movhi	r16,129
  803e08:	84089e04 	addi	r16,r16,8824
  803e0c:	00c000c4 	movi	r3,3
  803e10:	00bfdfc4 	movi	r2,-129
  803e14:	d8c02a15 	stw	r3,168(sp)
  803e18:	90a4703a 	and	r18,r18,r2
  803e1c:	df002783 	ldbu	fp,158(sp)
  803e20:	d8c02e15 	stw	r3,184(sp)
  803e24:	d8002915 	stw	zero,164(sp)
  803e28:	d8003215 	stw	zero,200(sp)
  803e2c:	003b2906 	br	802ad4 <__alt_mem_onchip_mem+0xff782ad4>
  803e30:	d9002d17 	ldw	r4,180(sp)
  803e34:	24c00017 	ldw	r19,0(r4)
  803e38:	21000104 	addi	r4,r4,4
  803e3c:	d9002d15 	stw	r4,180(sp)
  803e40:	982dd7fa 	srai	r22,r19,31
  803e44:	b005883a 	mov	r2,r22
  803e48:	003a9f06 	br	8028c8 <__alt_mem_onchip_mem+0xff7828c8>
  803e4c:	d9402d17 	ldw	r5,180(sp)
  803e50:	d8c02f17 	ldw	r3,188(sp)
  803e54:	28800017 	ldw	r2,0(r5)
  803e58:	29400104 	addi	r5,r5,4
  803e5c:	d9402d15 	stw	r5,180(sp)
  803e60:	10c00015 	stw	r3,0(r2)
  803e64:	00398606 	br	802480 <__alt_mem_onchip_mem+0xff782480>
  803e68:	d9402d17 	ldw	r5,180(sp)
  803e6c:	002d883a 	mov	r22,zero
  803e70:	2cc00017 	ldw	r19,0(r5)
  803e74:	29400104 	addi	r5,r5,4
  803e78:	d9402d15 	stw	r5,180(sp)
  803e7c:	003c2306 	br	802f0c <__alt_mem_onchip_mem+0xff782f0c>
  803e80:	d8c02d17 	ldw	r3,180(sp)
  803e84:	d9002917 	ldw	r4,164(sp)
  803e88:	002d883a 	mov	r22,zero
  803e8c:	18800104 	addi	r2,r3,4
  803e90:	1cc0000b 	ldhu	r19,0(r3)
  803e94:	203dc10e 	bge	r4,zero,80359c <__alt_mem_onchip_mem+0xff78359c>
  803e98:	003f7506 	br	803c70 <__alt_mem_onchip_mem+0xff783c70>
  803e9c:	04002074 	movhi	r16,129
  803ea0:	84089c04 	addi	r16,r16,8816
  803ea4:	003acc06 	br	8029d8 <__alt_mem_onchip_mem+0xff7829d8>
  803ea8:	d9002c17 	ldw	r4,176(sp)
  803eac:	d9801e04 	addi	r6,sp,120
  803eb0:	b80b883a 	mov	r5,r23
  803eb4:	08084ac0 	call	8084ac <__sprint_r>
  803eb8:	103a3b1e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  803ebc:	dc402617 	ldw	r17,152(sp)
  803ec0:	d8c02017 	ldw	r3,128(sp)
  803ec4:	da000404 	addi	r8,sp,16
  803ec8:	003f9c06 	br	803d3c <__alt_mem_onchip_mem+0xff783d3c>
  803ecc:	ac400043 	ldbu	r17,1(r21)
  803ed0:	94800814 	ori	r18,r18,32
  803ed4:	ad400044 	addi	r21,r21,1
  803ed8:	8c403fcc 	andi	r17,r17,255
  803edc:	8c40201c 	xori	r17,r17,128
  803ee0:	8c7fe004 	addi	r17,r17,-128
  803ee4:	00398f06 	br	802524 <__alt_mem_onchip_mem+0xff782524>
  803ee8:	d8c02d15 	stw	r3,180(sp)
  803eec:	0039883a 	mov	fp,zero
  803ef0:	003e3506 	br	8037c8 <__alt_mem_onchip_mem+0xff7837c8>
  803ef4:	d9002c17 	ldw	r4,176(sp)
  803ef8:	d9801e04 	addi	r6,sp,120
  803efc:	b80b883a 	mov	r5,r23
  803f00:	08084ac0 	call	8084ac <__sprint_r>
  803f04:	103a281e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  803f08:	d8c02017 	ldw	r3,128(sp)
  803f0c:	da000404 	addi	r8,sp,16
  803f10:	003cd006 	br	803254 <__alt_mem_onchip_mem+0xff783254>
  803f14:	8009883a 	mov	r4,r16
  803f18:	da003d15 	stw	r8,244(sp)
  803f1c:	08083180 	call	808318 <strlen>
  803f20:	d8802e15 	stw	r2,184(sp)
  803f24:	da003d17 	ldw	r8,244(sp)
  803f28:	103c340e 	bge	r2,zero,802ffc <__alt_mem_onchip_mem+0xff782ffc>
  803f2c:	0005883a 	mov	r2,zero
  803f30:	003c3206 	br	802ffc <__alt_mem_onchip_mem+0xff782ffc>
  803f34:	d9002c17 	ldw	r4,176(sp)
  803f38:	d9801e04 	addi	r6,sp,120
  803f3c:	b80b883a 	mov	r5,r23
  803f40:	08084ac0 	call	8084ac <__sprint_r>
  803f44:	103a181e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  803f48:	d8c02017 	ldw	r3,128(sp)
  803f4c:	d8801f17 	ldw	r2,124(sp)
  803f50:	da000404 	addi	r8,sp,16
  803f54:	d9403317 	ldw	r5,204(sp)
  803f58:	10800044 	addi	r2,r2,1
  803f5c:	44000015 	stw	r16,0(r8)
  803f60:	28c7883a 	add	r3,r5,r3
  803f64:	003b7d06 	br	802d5c <__alt_mem_onchip_mem+0xff782d5c>
  803f68:	01002074 	movhi	r4,129
  803f6c:	2108b084 	addi	r4,r4,8898
  803f70:	d9003515 	stw	r4,212(sp)
  803f74:	003b1406 	br	802bc8 <__alt_mem_onchip_mem+0xff782bc8>
  803f78:	013fffc4 	movi	r4,-1
  803f7c:	003a3506 	br	802854 <__alt_mem_onchip_mem+0xff782854>
  803f80:	0023883a 	mov	r17,zero
  803f84:	003d9d06 	br	8035fc <__alt_mem_onchip_mem+0xff7835fc>
  803f88:	d9002c17 	ldw	r4,176(sp)
  803f8c:	d9801e04 	addi	r6,sp,120
  803f90:	b80b883a 	mov	r5,r23
  803f94:	08084ac0 	call	8084ac <__sprint_r>
  803f98:	103a031e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  803f9c:	d8c02017 	ldw	r3,128(sp)
  803fa0:	da000404 	addi	r8,sp,16
  803fa4:	003d9406 	br	8035f8 <__alt_mem_onchip_mem+0xff7835f8>
  803fa8:	01002074 	movhi	r4,129
  803fac:	2108ac84 	addi	r4,r4,8882
  803fb0:	d9002b15 	stw	r4,172(sp)
  803fb4:	d9002b17 	ldw	r4,172(sp)
  803fb8:	1c47883a 	add	r3,r3,r17
  803fbc:	10800044 	addi	r2,r2,1
  803fc0:	41000015 	stw	r4,0(r8)
  803fc4:	44400115 	stw	r17,4(r8)
  803fc8:	d8c02015 	stw	r3,128(sp)
  803fcc:	d8801f15 	stw	r2,124(sp)
  803fd0:	010001c4 	movi	r4,7
  803fd4:	20bfd716 	blt	r4,r2,803f34 <__alt_mem_onchip_mem+0xff783f34>
  803fd8:	42000204 	addi	r8,r8,8
  803fdc:	003fdd06 	br	803f54 <__alt_mem_onchip_mem+0xff783f54>
  803fe0:	d9002c17 	ldw	r4,176(sp)
  803fe4:	d9801e04 	addi	r6,sp,120
  803fe8:	b80b883a 	mov	r5,r23
  803fec:	08084ac0 	call	8084ac <__sprint_r>
  803ff0:	1039ed1e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  803ff4:	d8802617 	ldw	r2,152(sp)
  803ff8:	d8c02017 	ldw	r3,128(sp)
  803ffc:	da000404 	addi	r8,sp,16
  804000:	003e1006 	br	803844 <__alt_mem_onchip_mem+0xff783844>
  804004:	00800044 	movi	r2,1
  804008:	10803fcc 	andi	r2,r2,255
  80400c:	00c00044 	movi	r3,1
  804010:	10fa3526 	beq	r2,r3,8028e8 <__alt_mem_onchip_mem+0xff7828e8>
  804014:	00c00084 	movi	r3,2
  804018:	10fbcb26 	beq	r2,r3,802f48 <__alt_mem_onchip_mem+0xff782f48>
  80401c:	003a8f06 	br	802a5c <__alt_mem_onchip_mem+0xff782a5c>
  804020:	01002074 	movhi	r4,129
  804024:	2108b084 	addi	r4,r4,8898
  804028:	d9003515 	stw	r4,212(sp)
  80402c:	003b7606 	br	802e08 <__alt_mem_onchip_mem+0xff782e08>
  804030:	d8802917 	ldw	r2,164(sp)
  804034:	00c00184 	movi	r3,6
  804038:	1880012e 	bgeu	r3,r2,804040 <___vfprintf_internal_r+0x1ca0>
  80403c:	1805883a 	mov	r2,r3
  804040:	d8802e15 	stw	r2,184(sp)
  804044:	1000ef16 	blt	r2,zero,804404 <___vfprintf_internal_r+0x2064>
  804048:	04002074 	movhi	r16,129
  80404c:	d8802a15 	stw	r2,168(sp)
  804050:	dcc02d15 	stw	r19,180(sp)
  804054:	d8002915 	stw	zero,164(sp)
  804058:	d8003215 	stw	zero,200(sp)
  80405c:	8408aa04 	addi	r16,r16,8872
  804060:	0039883a 	mov	fp,zero
  804064:	003aa206 	br	802af0 <__alt_mem_onchip_mem+0xff782af0>
  804068:	0021883a 	mov	r16,zero
  80406c:	003e0706 	br	80388c <__alt_mem_onchip_mem+0xff78388c>
  804070:	d9002c17 	ldw	r4,176(sp)
  804074:	d9801e04 	addi	r6,sp,120
  804078:	b80b883a 	mov	r5,r23
  80407c:	08084ac0 	call	8084ac <__sprint_r>
  804080:	1039c91e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  804084:	d8802617 	ldw	r2,152(sp)
  804088:	d9403317 	ldw	r5,204(sp)
  80408c:	d8c02017 	ldw	r3,128(sp)
  804090:	da000404 	addi	r8,sp,16
  804094:	2885c83a 	sub	r2,r5,r2
  804098:	003dfb06 	br	803888 <__alt_mem_onchip_mem+0xff783888>
  80409c:	9080004c 	andi	r2,r18,1
  8040a0:	103e8f1e 	bne	r2,zero,803ae0 <__alt_mem_onchip_mem+0xff783ae0>
  8040a4:	d8802117 	ldw	r2,132(sp)
  8040a8:	003e9e06 	br	803b24 <__alt_mem_onchip_mem+0xff783b24>
  8040ac:	1025883a 	mov	r18,r2
  8040b0:	0039883a 	mov	fp,zero
  8040b4:	00800084 	movi	r2,2
  8040b8:	003fd306 	br	804008 <__alt_mem_onchip_mem+0xff784008>
  8040bc:	07000b44 	movi	fp,45
  8040c0:	df002785 	stb	fp,158(sp)
  8040c4:	003a4006 	br	8029c8 <__alt_mem_onchip_mem+0xff7829c8>
  8040c8:	00c00b44 	movi	r3,45
  8040cc:	d8c02785 	stb	r3,158(sp)
  8040d0:	d8802a15 	stw	r2,168(sp)
  8040d4:	dc802b17 	ldw	r18,172(sp)
  8040d8:	d8002915 	stw	zero,164(sp)
  8040dc:	07000b44 	movi	fp,45
  8040e0:	003a8006 	br	802ae4 <__alt_mem_onchip_mem+0xff782ae4>
  8040e4:	04002074 	movhi	r16,129
  8040e8:	84089f04 	addi	r16,r16,8828
  8040ec:	003f4706 	br	803e0c <__alt_mem_onchip_mem+0xff783e0c>
  8040f0:	d8c02d17 	ldw	r3,180(sp)
  8040f4:	d9002f17 	ldw	r4,188(sp)
  8040f8:	18800017 	ldw	r2,0(r3)
  8040fc:	18c00104 	addi	r3,r3,4
  804100:	d8c02d15 	stw	r3,180(sp)
  804104:	11000015 	stw	r4,0(r2)
  804108:	0038dd06 	br	802480 <__alt_mem_onchip_mem+0xff782480>
  80410c:	dd802617 	ldw	r22,152(sp)
  804110:	00bfff44 	movi	r2,-3
  804114:	b0801c16 	blt	r22,r2,804188 <___vfprintf_internal_r+0x1de8>
  804118:	d9402917 	ldw	r5,164(sp)
  80411c:	2d801a16 	blt	r5,r22,804188 <___vfprintf_internal_r+0x1de8>
  804120:	dd803215 	stw	r22,200(sp)
  804124:	003e8906 	br	803b4c <__alt_mem_onchip_mem+0xff783b4c>
  804128:	01002074 	movhi	r4,129
  80412c:	2108ac84 	addi	r4,r4,8882
  804130:	d9002b15 	stw	r4,172(sp)
  804134:	003c9106 	br	80337c <__alt_mem_onchip_mem+0xff78337c>
  804138:	e005883a 	mov	r2,fp
  80413c:	003e7906 	br	803b24 <__alt_mem_onchip_mem+0xff783b24>
  804140:	d9402917 	ldw	r5,164(sp)
  804144:	df002783 	ldbu	fp,158(sp)
  804148:	dcc02d15 	stw	r19,180(sp)
  80414c:	d9402a15 	stw	r5,168(sp)
  804150:	d9402e15 	stw	r5,184(sp)
  804154:	d8002915 	stw	zero,164(sp)
  804158:	d8003215 	stw	zero,200(sp)
  80415c:	003a5d06 	br	802ad4 <__alt_mem_onchip_mem+0xff782ad4>
  804160:	9080004c 	andi	r2,r18,1
  804164:	0039883a 	mov	fp,zero
  804168:	10000426 	beq	r2,zero,80417c <___vfprintf_internal_r+0x1ddc>
  80416c:	00800c04 	movi	r2,48
  804170:	dc001dc4 	addi	r16,sp,119
  804174:	d8801dc5 	stb	r2,119(sp)
  804178:	003b8006 	br	802f7c <__alt_mem_onchip_mem+0xff782f7c>
  80417c:	d8002e15 	stw	zero,184(sp)
  804180:	dc001e04 	addi	r16,sp,120
  804184:	003a4d06 	br	802abc <__alt_mem_onchip_mem+0xff782abc>
  804188:	8c7fff84 	addi	r17,r17,-2
  80418c:	b5bfffc4 	addi	r22,r22,-1
  804190:	dd802615 	stw	r22,152(sp)
  804194:	dc4022c5 	stb	r17,139(sp)
  804198:	b000bf16 	blt	r22,zero,804498 <___vfprintf_internal_r+0x20f8>
  80419c:	00800ac4 	movi	r2,43
  8041a0:	d8802305 	stb	r2,140(sp)
  8041a4:	00800244 	movi	r2,9
  8041a8:	15807016 	blt	r2,r22,80436c <___vfprintf_internal_r+0x1fcc>
  8041ac:	00800c04 	movi	r2,48
  8041b0:	b5800c04 	addi	r22,r22,48
  8041b4:	d8802345 	stb	r2,141(sp)
  8041b8:	dd802385 	stb	r22,142(sp)
  8041bc:	d88023c4 	addi	r2,sp,143
  8041c0:	df0022c4 	addi	fp,sp,139
  8041c4:	d8c03317 	ldw	r3,204(sp)
  8041c8:	1739c83a 	sub	fp,r2,fp
  8041cc:	d9003317 	ldw	r4,204(sp)
  8041d0:	e0c7883a 	add	r3,fp,r3
  8041d4:	df003a15 	stw	fp,232(sp)
  8041d8:	d8c02e15 	stw	r3,184(sp)
  8041dc:	00800044 	movi	r2,1
  8041e0:	1100b30e 	bge	r2,r4,8044b0 <___vfprintf_internal_r+0x2110>
  8041e4:	d8c02e17 	ldw	r3,184(sp)
  8041e8:	18c00044 	addi	r3,r3,1
  8041ec:	d8c02e15 	stw	r3,184(sp)
  8041f0:	1805883a 	mov	r2,r3
  8041f4:	1800ac16 	blt	r3,zero,8044a8 <___vfprintf_internal_r+0x2108>
  8041f8:	d8003215 	stw	zero,200(sp)
  8041fc:	003e5d06 	br	803b74 <__alt_mem_onchip_mem+0xff783b74>
  804200:	d9002c17 	ldw	r4,176(sp)
  804204:	d9801e04 	addi	r6,sp,120
  804208:	b80b883a 	mov	r5,r23
  80420c:	08084ac0 	call	8084ac <__sprint_r>
  804210:	1039651e 	bne	r2,zero,8027a8 <__alt_mem_onchip_mem+0xff7827a8>
  804214:	dc402617 	ldw	r17,152(sp)
  804218:	d8c02017 	ldw	r3,128(sp)
  80421c:	d8801f17 	ldw	r2,124(sp)
  804220:	da000404 	addi	r8,sp,16
  804224:	003ed606 	br	803d80 <__alt_mem_onchip_mem+0xff783d80>
  804228:	582b883a 	mov	r21,r11
  80422c:	d8002915 	stw	zero,164(sp)
  804230:	0038bd06 	br	802528 <__alt_mem_onchip_mem+0xff782528>
  804234:	d8802917 	ldw	r2,164(sp)
  804238:	103e071e 	bne	r2,zero,803a58 <__alt_mem_onchip_mem+0xff783a58>
  80423c:	dc002915 	stw	r16,164(sp)
  804240:	003e0506 	br	803a58 <__alt_mem_onchip_mem+0xff783a58>
  804244:	d9002917 	ldw	r4,164(sp)
  804248:	20c00044 	addi	r3,r4,1
  80424c:	003e0f06 	br	803a8c <__alt_mem_onchip_mem+0xff783a8c>
  804250:	01400184 	movi	r5,6
  804254:	d9402915 	stw	r5,164(sp)
  804258:	003dff06 	br	803a58 <__alt_mem_onchip_mem+0xff783a58>
  80425c:	d8802104 	addi	r2,sp,132
  804260:	d8800315 	stw	r2,12(sp)
  804264:	d8802504 	addi	r2,sp,148
  804268:	d8800215 	stw	r2,8(sp)
  80426c:	d8802604 	addi	r2,sp,152
  804270:	d8800115 	stw	r2,4(sp)
  804274:	d8802917 	ldw	r2,164(sp)
  804278:	d9403617 	ldw	r5,216(sp)
  80427c:	d9002c17 	ldw	r4,176(sp)
  804280:	d8800015 	stw	r2,0(sp)
  804284:	01c000c4 	movi	r7,3
  804288:	980d883a 	mov	r6,r19
  80428c:	da003d15 	stw	r8,244(sp)
  804290:	0804a780 	call	804a78 <_dtoa_r>
  804294:	d8c02917 	ldw	r3,164(sp)
  804298:	da003d17 	ldw	r8,244(sp)
  80429c:	1021883a 	mov	r16,r2
  8042a0:	10f9883a 	add	fp,r2,r3
  8042a4:	81000007 	ldb	r4,0(r16)
  8042a8:	00800c04 	movi	r2,48
  8042ac:	20805e26 	beq	r4,r2,804428 <___vfprintf_internal_r+0x2088>
  8042b0:	d8c02617 	ldw	r3,152(sp)
  8042b4:	e0f9883a 	add	fp,fp,r3
  8042b8:	003e0a06 	br	803ae4 <__alt_mem_onchip_mem+0xff783ae4>
  8042bc:	00c00b44 	movi	r3,45
  8042c0:	24e0003c 	xorhi	r19,r4,32768
  8042c4:	d8c02a05 	stb	r3,168(sp)
  8042c8:	003de906 	br	803a70 <__alt_mem_onchip_mem+0xff783a70>
  8042cc:	d8c03217 	ldw	r3,200(sp)
  8042d0:	00c07a0e 	bge	zero,r3,8044bc <___vfprintf_internal_r+0x211c>
  8042d4:	00800044 	movi	r2,1
  8042d8:	d9003317 	ldw	r4,204(sp)
  8042dc:	1105883a 	add	r2,r2,r4
  8042e0:	d8802e15 	stw	r2,184(sp)
  8042e4:	10004e16 	blt	r2,zero,804420 <___vfprintf_internal_r+0x2080>
  8042e8:	044019c4 	movi	r17,103
  8042ec:	003e2106 	br	803b74 <__alt_mem_onchip_mem+0xff783b74>
  8042f0:	d9002917 	ldw	r4,164(sp)
  8042f4:	d8802104 	addi	r2,sp,132
  8042f8:	d8800315 	stw	r2,12(sp)
  8042fc:	d9000015 	stw	r4,0(sp)
  804300:	d8802504 	addi	r2,sp,148
  804304:	d9403617 	ldw	r5,216(sp)
  804308:	d9002c17 	ldw	r4,176(sp)
  80430c:	d8800215 	stw	r2,8(sp)
  804310:	d8802604 	addi	r2,sp,152
  804314:	d8800115 	stw	r2,4(sp)
  804318:	01c000c4 	movi	r7,3
  80431c:	980d883a 	mov	r6,r19
  804320:	da003d15 	stw	r8,244(sp)
  804324:	0804a780 	call	804a78 <_dtoa_r>
  804328:	d8c02917 	ldw	r3,164(sp)
  80432c:	da003d17 	ldw	r8,244(sp)
  804330:	1021883a 	mov	r16,r2
  804334:	00801184 	movi	r2,70
  804338:	80f9883a 	add	fp,r16,r3
  80433c:	88bfd926 	beq	r17,r2,8042a4 <__alt_mem_onchip_mem+0xff7842a4>
  804340:	003de806 	br	803ae4 <__alt_mem_onchip_mem+0xff783ae4>
  804344:	d9002917 	ldw	r4,164(sp)
  804348:	00c04d0e 	bge	zero,r3,804480 <___vfprintf_internal_r+0x20e0>
  80434c:	2000441e 	bne	r4,zero,804460 <___vfprintf_internal_r+0x20c0>
  804350:	9480004c 	andi	r18,r18,1
  804354:	9000421e 	bne	r18,zero,804460 <___vfprintf_internal_r+0x20c0>
  804358:	1805883a 	mov	r2,r3
  80435c:	18007016 	blt	r3,zero,804520 <___vfprintf_internal_r+0x2180>
  804360:	d8c03217 	ldw	r3,200(sp)
  804364:	d8c02e15 	stw	r3,184(sp)
  804368:	003e0206 	br	803b74 <__alt_mem_onchip_mem+0xff783b74>
  80436c:	df0022c4 	addi	fp,sp,139
  804370:	dc002915 	stw	r16,164(sp)
  804374:	4027883a 	mov	r19,r8
  804378:	e021883a 	mov	r16,fp
  80437c:	b009883a 	mov	r4,r22
  804380:	01400284 	movi	r5,10
  804384:	080b7b80 	call	80b7b8 <__modsi3>
  804388:	10800c04 	addi	r2,r2,48
  80438c:	843fffc4 	addi	r16,r16,-1
  804390:	b009883a 	mov	r4,r22
  804394:	01400284 	movi	r5,10
  804398:	80800005 	stb	r2,0(r16)
  80439c:	080b7340 	call	80b734 <__divsi3>
  8043a0:	102d883a 	mov	r22,r2
  8043a4:	00800244 	movi	r2,9
  8043a8:	15bff416 	blt	r2,r22,80437c <__alt_mem_onchip_mem+0xff78437c>
  8043ac:	9811883a 	mov	r8,r19
  8043b0:	b0800c04 	addi	r2,r22,48
  8043b4:	8027883a 	mov	r19,r16
  8043b8:	997fffc4 	addi	r5,r19,-1
  8043bc:	98bfffc5 	stb	r2,-1(r19)
  8043c0:	dc002917 	ldw	r16,164(sp)
  8043c4:	2f006a2e 	bgeu	r5,fp,804570 <___vfprintf_internal_r+0x21d0>
  8043c8:	d9c02384 	addi	r7,sp,142
  8043cc:	3ccfc83a 	sub	r7,r7,r19
  8043d0:	d9002344 	addi	r4,sp,141
  8043d4:	e1cf883a 	add	r7,fp,r7
  8043d8:	00000106 	br	8043e0 <___vfprintf_internal_r+0x2040>
  8043dc:	28800003 	ldbu	r2,0(r5)
  8043e0:	20800005 	stb	r2,0(r4)
  8043e4:	21000044 	addi	r4,r4,1
  8043e8:	29400044 	addi	r5,r5,1
  8043ec:	393ffb1e 	bne	r7,r4,8043dc <__alt_mem_onchip_mem+0xff7843dc>
  8043f0:	d8802304 	addi	r2,sp,140
  8043f4:	14c5c83a 	sub	r2,r2,r19
  8043f8:	d8c02344 	addi	r3,sp,141
  8043fc:	1885883a 	add	r2,r3,r2
  804400:	003f7006 	br	8041c4 <__alt_mem_onchip_mem+0xff7841c4>
  804404:	0005883a 	mov	r2,zero
  804408:	003f0f06 	br	804048 <__alt_mem_onchip_mem+0xff784048>
  80440c:	d8c03217 	ldw	r3,200(sp)
  804410:	18c00044 	addi	r3,r3,1
  804414:	d8c02e15 	stw	r3,184(sp)
  804418:	1805883a 	mov	r2,r3
  80441c:	183fb20e 	bge	r3,zero,8042e8 <__alt_mem_onchip_mem+0xff7842e8>
  804420:	0005883a 	mov	r2,zero
  804424:	003fb006 	br	8042e8 <__alt_mem_onchip_mem+0xff7842e8>
  804428:	d9003617 	ldw	r4,216(sp)
  80442c:	000d883a 	mov	r6,zero
  804430:	000f883a 	mov	r7,zero
  804434:	980b883a 	mov	r5,r19
  804438:	d8c03c15 	stw	r3,240(sp)
  80443c:	da003d15 	stw	r8,244(sp)
  804440:	080ca7c0 	call	80ca7c <__eqdf2>
  804444:	d8c03c17 	ldw	r3,240(sp)
  804448:	da003d17 	ldw	r8,244(sp)
  80444c:	103f9826 	beq	r2,zero,8042b0 <__alt_mem_onchip_mem+0xff7842b0>
  804450:	00800044 	movi	r2,1
  804454:	10c7c83a 	sub	r3,r2,r3
  804458:	d8c02615 	stw	r3,152(sp)
  80445c:	003f9506 	br	8042b4 <__alt_mem_onchip_mem+0xff7842b4>
  804460:	d9002917 	ldw	r4,164(sp)
  804464:	d8c03217 	ldw	r3,200(sp)
  804468:	20800044 	addi	r2,r4,1
  80446c:	1885883a 	add	r2,r3,r2
  804470:	d8802e15 	stw	r2,184(sp)
  804474:	103dbf0e 	bge	r2,zero,803b74 <__alt_mem_onchip_mem+0xff783b74>
  804478:	0005883a 	mov	r2,zero
  80447c:	003dbd06 	br	803b74 <__alt_mem_onchip_mem+0xff783b74>
  804480:	2000211e 	bne	r4,zero,804508 <___vfprintf_internal_r+0x2168>
  804484:	9480004c 	andi	r18,r18,1
  804488:	90001f1e 	bne	r18,zero,804508 <___vfprintf_internal_r+0x2168>
  80448c:	00800044 	movi	r2,1
  804490:	d8802e15 	stw	r2,184(sp)
  804494:	003db706 	br	803b74 <__alt_mem_onchip_mem+0xff783b74>
  804498:	00800b44 	movi	r2,45
  80449c:	05adc83a 	sub	r22,zero,r22
  8044a0:	d8802305 	stb	r2,140(sp)
  8044a4:	003f3f06 	br	8041a4 <__alt_mem_onchip_mem+0xff7841a4>
  8044a8:	0005883a 	mov	r2,zero
  8044ac:	003f5206 	br	8041f8 <__alt_mem_onchip_mem+0xff7841f8>
  8044b0:	90a4703a 	and	r18,r18,r2
  8044b4:	903f4e26 	beq	r18,zero,8041f0 <__alt_mem_onchip_mem+0xff7841f0>
  8044b8:	003f4a06 	br	8041e4 <__alt_mem_onchip_mem+0xff7841e4>
  8044bc:	00800084 	movi	r2,2
  8044c0:	10c5c83a 	sub	r2,r2,r3
  8044c4:	003f8406 	br	8042d8 <__alt_mem_onchip_mem+0xff7842d8>
  8044c8:	d8802d17 	ldw	r2,180(sp)
  8044cc:	d9002d17 	ldw	r4,180(sp)
  8044d0:	ac400043 	ldbu	r17,1(r21)
  8044d4:	10800017 	ldw	r2,0(r2)
  8044d8:	582b883a 	mov	r21,r11
  8044dc:	d8802915 	stw	r2,164(sp)
  8044e0:	20800104 	addi	r2,r4,4
  8044e4:	d9002917 	ldw	r4,164(sp)
  8044e8:	d8802d15 	stw	r2,180(sp)
  8044ec:	203e7a0e 	bge	r4,zero,803ed8 <__alt_mem_onchip_mem+0xff783ed8>
  8044f0:	8c403fcc 	andi	r17,r17,255
  8044f4:	00bfffc4 	movi	r2,-1
  8044f8:	8c40201c 	xori	r17,r17,128
  8044fc:	d8802915 	stw	r2,164(sp)
  804500:	8c7fe004 	addi	r17,r17,-128
  804504:	00380706 	br	802524 <__alt_mem_onchip_mem+0xff782524>
  804508:	d8c02917 	ldw	r3,164(sp)
  80450c:	18c00084 	addi	r3,r3,2
  804510:	d8c02e15 	stw	r3,184(sp)
  804514:	1805883a 	mov	r2,r3
  804518:	183d960e 	bge	r3,zero,803b74 <__alt_mem_onchip_mem+0xff783b74>
  80451c:	003fd606 	br	804478 <__alt_mem_onchip_mem+0xff784478>
  804520:	0005883a 	mov	r2,zero
  804524:	003f8e06 	br	804360 <__alt_mem_onchip_mem+0xff784360>
  804528:	9080004c 	andi	r2,r18,1
  80452c:	103f811e 	bne	r2,zero,804334 <__alt_mem_onchip_mem+0xff784334>
  804530:	d8802117 	ldw	r2,132(sp)
  804534:	1405c83a 	sub	r2,r2,r16
  804538:	d8803315 	stw	r2,204(sp)
  80453c:	b47ef326 	beq	r22,r17,80410c <__alt_mem_onchip_mem+0xff78410c>
  804540:	dd802617 	ldw	r22,152(sp)
  804544:	003f1106 	br	80418c <__alt_mem_onchip_mem+0xff78418c>
  804548:	d9c02785 	stb	r7,158(sp)
  80454c:	00390406 	br	802960 <__alt_mem_onchip_mem+0xff782960>
  804550:	d9c02785 	stb	r7,158(sp)
  804554:	0038d306 	br	8028a4 <__alt_mem_onchip_mem+0xff7828a4>
  804558:	d9c02785 	stb	r7,158(sp)
  80455c:	003a6106 	br	802ee4 <__alt_mem_onchip_mem+0xff782ee4>
  804560:	d9c02785 	stb	r7,158(sp)
  804564:	003af806 	br	803148 <__alt_mem_onchip_mem+0xff783148>
  804568:	0005883a 	mov	r2,zero
  80456c:	003d7e06 	br	803b68 <__alt_mem_onchip_mem+0xff783b68>
  804570:	d8802344 	addi	r2,sp,141
  804574:	003f1306 	br	8041c4 <__alt_mem_onchip_mem+0xff7841c4>
  804578:	d9c02785 	stb	r7,158(sp)
  80457c:	00392306 	br	802a0c <__alt_mem_onchip_mem+0xff782a0c>
  804580:	d9c02785 	stb	r7,158(sp)
  804584:	003aa906 	br	80302c <__alt_mem_onchip_mem+0xff78302c>
  804588:	d9c02785 	stb	r7,158(sp)
  80458c:	003a3d06 	br	802e84 <__alt_mem_onchip_mem+0xff782e84>
  804590:	d9c02785 	stb	r7,158(sp)
  804594:	003aca06 	br	8030c0 <__alt_mem_onchip_mem+0xff7830c0>

00804598 <__vfprintf_internal>:
  804598:	00802074 	movhi	r2,129
  80459c:	10912504 	addi	r2,r2,17556
  8045a0:	300f883a 	mov	r7,r6
  8045a4:	280d883a 	mov	r6,r5
  8045a8:	200b883a 	mov	r5,r4
  8045ac:	11000017 	ldw	r4,0(r2)
  8045b0:	08023a01 	jmpi	8023a0 <___vfprintf_internal_r>

008045b4 <__sbprintf>:
  8045b4:	2880030b 	ldhu	r2,12(r5)
  8045b8:	2ac01917 	ldw	r11,100(r5)
  8045bc:	2a80038b 	ldhu	r10,14(r5)
  8045c0:	2a400717 	ldw	r9,28(r5)
  8045c4:	2a000917 	ldw	r8,36(r5)
  8045c8:	defee204 	addi	sp,sp,-1144
  8045cc:	00c10004 	movi	r3,1024
  8045d0:	dc011a15 	stw	r16,1128(sp)
  8045d4:	10bfff4c 	andi	r2,r2,65533
  8045d8:	2821883a 	mov	r16,r5
  8045dc:	d8cb883a 	add	r5,sp,r3
  8045e0:	dc811c15 	stw	r18,1136(sp)
  8045e4:	dc411b15 	stw	r17,1132(sp)
  8045e8:	dfc11d15 	stw	ra,1140(sp)
  8045ec:	2025883a 	mov	r18,r4
  8045f0:	d881030d 	sth	r2,1036(sp)
  8045f4:	dac11915 	stw	r11,1124(sp)
  8045f8:	da81038d 	sth	r10,1038(sp)
  8045fc:	da410715 	stw	r9,1052(sp)
  804600:	da010915 	stw	r8,1060(sp)
  804604:	dec10015 	stw	sp,1024(sp)
  804608:	dec10415 	stw	sp,1040(sp)
  80460c:	d8c10215 	stw	r3,1032(sp)
  804610:	d8c10515 	stw	r3,1044(sp)
  804614:	d8010615 	stw	zero,1048(sp)
  804618:	08023a00 	call	8023a0 <___vfprintf_internal_r>
  80461c:	1023883a 	mov	r17,r2
  804620:	10000416 	blt	r2,zero,804634 <__sbprintf+0x80>
  804624:	d9410004 	addi	r5,sp,1024
  804628:	9009883a 	mov	r4,r18
  80462c:	080631c0 	call	80631c <_fflush_r>
  804630:	10000d1e 	bne	r2,zero,804668 <__sbprintf+0xb4>
  804634:	d881030b 	ldhu	r2,1036(sp)
  804638:	1080100c 	andi	r2,r2,64
  80463c:	10000326 	beq	r2,zero,80464c <__sbprintf+0x98>
  804640:	8080030b 	ldhu	r2,12(r16)
  804644:	10801014 	ori	r2,r2,64
  804648:	8080030d 	sth	r2,12(r16)
  80464c:	8805883a 	mov	r2,r17
  804650:	dfc11d17 	ldw	ra,1140(sp)
  804654:	dc811c17 	ldw	r18,1136(sp)
  804658:	dc411b17 	ldw	r17,1132(sp)
  80465c:	dc011a17 	ldw	r16,1128(sp)
  804660:	dec11e04 	addi	sp,sp,1144
  804664:	f800283a 	ret
  804668:	047fffc4 	movi	r17,-1
  80466c:	003ff106 	br	804634 <__alt_mem_onchip_mem+0xff784634>

00804670 <_write_r>:
  804670:	defffd04 	addi	sp,sp,-12
  804674:	2805883a 	mov	r2,r5
  804678:	dc000015 	stw	r16,0(sp)
  80467c:	04002074 	movhi	r16,129
  804680:	dc400115 	stw	r17,4(sp)
  804684:	300b883a 	mov	r5,r6
  804688:	84187b04 	addi	r16,r16,25068
  80468c:	2023883a 	mov	r17,r4
  804690:	380d883a 	mov	r6,r7
  804694:	1009883a 	mov	r4,r2
  804698:	dfc00215 	stw	ra,8(sp)
  80469c:	80000015 	stw	zero,0(r16)
  8046a0:	080ee400 	call	80ee40 <write>
  8046a4:	00ffffc4 	movi	r3,-1
  8046a8:	10c00526 	beq	r2,r3,8046c0 <_write_r+0x50>
  8046ac:	dfc00217 	ldw	ra,8(sp)
  8046b0:	dc400117 	ldw	r17,4(sp)
  8046b4:	dc000017 	ldw	r16,0(sp)
  8046b8:	dec00304 	addi	sp,sp,12
  8046bc:	f800283a 	ret
  8046c0:	80c00017 	ldw	r3,0(r16)
  8046c4:	183ff926 	beq	r3,zero,8046ac <__alt_mem_onchip_mem+0xff7846ac>
  8046c8:	88c00015 	stw	r3,0(r17)
  8046cc:	003ff706 	br	8046ac <__alt_mem_onchip_mem+0xff7846ac>

008046d0 <__swsetup_r>:
  8046d0:	00802074 	movhi	r2,129
  8046d4:	defffd04 	addi	sp,sp,-12
  8046d8:	10912504 	addi	r2,r2,17556
  8046dc:	dc400115 	stw	r17,4(sp)
  8046e0:	2023883a 	mov	r17,r4
  8046e4:	11000017 	ldw	r4,0(r2)
  8046e8:	dc000015 	stw	r16,0(sp)
  8046ec:	dfc00215 	stw	ra,8(sp)
  8046f0:	2821883a 	mov	r16,r5
  8046f4:	20000226 	beq	r4,zero,804700 <__swsetup_r+0x30>
  8046f8:	20800e17 	ldw	r2,56(r4)
  8046fc:	10003126 	beq	r2,zero,8047c4 <__swsetup_r+0xf4>
  804700:	8080030b 	ldhu	r2,12(r16)
  804704:	10c0020c 	andi	r3,r2,8
  804708:	1009883a 	mov	r4,r2
  80470c:	18000f26 	beq	r3,zero,80474c <__swsetup_r+0x7c>
  804710:	80c00417 	ldw	r3,16(r16)
  804714:	18001526 	beq	r3,zero,80476c <__swsetup_r+0x9c>
  804718:	1100004c 	andi	r4,r2,1
  80471c:	20001c1e 	bne	r4,zero,804790 <__swsetup_r+0xc0>
  804720:	1080008c 	andi	r2,r2,2
  804724:	1000291e 	bne	r2,zero,8047cc <__swsetup_r+0xfc>
  804728:	80800517 	ldw	r2,20(r16)
  80472c:	80800215 	stw	r2,8(r16)
  804730:	18001c26 	beq	r3,zero,8047a4 <__swsetup_r+0xd4>
  804734:	0005883a 	mov	r2,zero
  804738:	dfc00217 	ldw	ra,8(sp)
  80473c:	dc400117 	ldw	r17,4(sp)
  804740:	dc000017 	ldw	r16,0(sp)
  804744:	dec00304 	addi	sp,sp,12
  804748:	f800283a 	ret
  80474c:	2080040c 	andi	r2,r4,16
  804750:	10002e26 	beq	r2,zero,80480c <__swsetup_r+0x13c>
  804754:	2080010c 	andi	r2,r4,4
  804758:	10001e1e 	bne	r2,zero,8047d4 <__swsetup_r+0x104>
  80475c:	80c00417 	ldw	r3,16(r16)
  804760:	20800214 	ori	r2,r4,8
  804764:	8080030d 	sth	r2,12(r16)
  804768:	183feb1e 	bne	r3,zero,804718 <__alt_mem_onchip_mem+0xff784718>
  80476c:	1100a00c 	andi	r4,r2,640
  804770:	01408004 	movi	r5,512
  804774:	217fe826 	beq	r4,r5,804718 <__alt_mem_onchip_mem+0xff784718>
  804778:	800b883a 	mov	r5,r16
  80477c:	8809883a 	mov	r4,r17
  804780:	08014640 	call	801464 <__smakebuf_r>
  804784:	8080030b 	ldhu	r2,12(r16)
  804788:	80c00417 	ldw	r3,16(r16)
  80478c:	003fe206 	br	804718 <__alt_mem_onchip_mem+0xff784718>
  804790:	80800517 	ldw	r2,20(r16)
  804794:	80000215 	stw	zero,8(r16)
  804798:	0085c83a 	sub	r2,zero,r2
  80479c:	80800615 	stw	r2,24(r16)
  8047a0:	183fe41e 	bne	r3,zero,804734 <__alt_mem_onchip_mem+0xff784734>
  8047a4:	80c0030b 	ldhu	r3,12(r16)
  8047a8:	0005883a 	mov	r2,zero
  8047ac:	1900200c 	andi	r4,r3,128
  8047b0:	203fe126 	beq	r4,zero,804738 <__alt_mem_onchip_mem+0xff784738>
  8047b4:	18c01014 	ori	r3,r3,64
  8047b8:	80c0030d 	sth	r3,12(r16)
  8047bc:	00bfffc4 	movi	r2,-1
  8047c0:	003fdd06 	br	804738 <__alt_mem_onchip_mem+0xff784738>
  8047c4:	08066f80 	call	8066f8 <__sinit>
  8047c8:	003fcd06 	br	804700 <__alt_mem_onchip_mem+0xff784700>
  8047cc:	0005883a 	mov	r2,zero
  8047d0:	003fd606 	br	80472c <__alt_mem_onchip_mem+0xff78472c>
  8047d4:	81400c17 	ldw	r5,48(r16)
  8047d8:	28000626 	beq	r5,zero,8047f4 <__swsetup_r+0x124>
  8047dc:	80801004 	addi	r2,r16,64
  8047e0:	28800326 	beq	r5,r2,8047f0 <__swsetup_r+0x120>
  8047e4:	8809883a 	mov	r4,r17
  8047e8:	08069180 	call	806918 <_free_r>
  8047ec:	8100030b 	ldhu	r4,12(r16)
  8047f0:	80000c15 	stw	zero,48(r16)
  8047f4:	80c00417 	ldw	r3,16(r16)
  8047f8:	00bff6c4 	movi	r2,-37
  8047fc:	1108703a 	and	r4,r2,r4
  804800:	80000115 	stw	zero,4(r16)
  804804:	80c00015 	stw	r3,0(r16)
  804808:	003fd506 	br	804760 <__alt_mem_onchip_mem+0xff784760>
  80480c:	00800244 	movi	r2,9
  804810:	88800015 	stw	r2,0(r17)
  804814:	20801014 	ori	r2,r4,64
  804818:	8080030d 	sth	r2,12(r16)
  80481c:	00bfffc4 	movi	r2,-1
  804820:	003fc506 	br	804738 <__alt_mem_onchip_mem+0xff784738>

00804824 <_close_r>:
  804824:	defffd04 	addi	sp,sp,-12
  804828:	dc000015 	stw	r16,0(sp)
  80482c:	04002074 	movhi	r16,129
  804830:	dc400115 	stw	r17,4(sp)
  804834:	84187b04 	addi	r16,r16,25068
  804838:	2023883a 	mov	r17,r4
  80483c:	2809883a 	mov	r4,r5
  804840:	dfc00215 	stw	ra,8(sp)
  804844:	80000015 	stw	zero,0(r16)
  804848:	080e0b80 	call	80e0b8 <close>
  80484c:	00ffffc4 	movi	r3,-1
  804850:	10c00526 	beq	r2,r3,804868 <_close_r+0x44>
  804854:	dfc00217 	ldw	ra,8(sp)
  804858:	dc400117 	ldw	r17,4(sp)
  80485c:	dc000017 	ldw	r16,0(sp)
  804860:	dec00304 	addi	sp,sp,12
  804864:	f800283a 	ret
  804868:	80c00017 	ldw	r3,0(r16)
  80486c:	183ff926 	beq	r3,zero,804854 <__alt_mem_onchip_mem+0xff784854>
  804870:	88c00015 	stw	r3,0(r17)
  804874:	003ff706 	br	804854 <__alt_mem_onchip_mem+0xff784854>

00804878 <quorem>:
  804878:	defff704 	addi	sp,sp,-36
  80487c:	dc800215 	stw	r18,8(sp)
  804880:	20800417 	ldw	r2,16(r4)
  804884:	2c800417 	ldw	r18,16(r5)
  804888:	dfc00815 	stw	ra,32(sp)
  80488c:	ddc00715 	stw	r23,28(sp)
  804890:	dd800615 	stw	r22,24(sp)
  804894:	dd400515 	stw	r21,20(sp)
  804898:	dd000415 	stw	r20,16(sp)
  80489c:	dcc00315 	stw	r19,12(sp)
  8048a0:	dc400115 	stw	r17,4(sp)
  8048a4:	dc000015 	stw	r16,0(sp)
  8048a8:	14807116 	blt	r2,r18,804a70 <quorem+0x1f8>
  8048ac:	94bfffc4 	addi	r18,r18,-1
  8048b0:	94ad883a 	add	r22,r18,r18
  8048b4:	b5ad883a 	add	r22,r22,r22
  8048b8:	2c400504 	addi	r17,r5,20
  8048bc:	8da9883a 	add	r20,r17,r22
  8048c0:	25400504 	addi	r21,r4,20
  8048c4:	282f883a 	mov	r23,r5
  8048c8:	adad883a 	add	r22,r21,r22
  8048cc:	a1400017 	ldw	r5,0(r20)
  8048d0:	2021883a 	mov	r16,r4
  8048d4:	b1000017 	ldw	r4,0(r22)
  8048d8:	29400044 	addi	r5,r5,1
  8048dc:	080b82c0 	call	80b82c <__udivsi3>
  8048e0:	1027883a 	mov	r19,r2
  8048e4:	10002c26 	beq	r2,zero,804998 <quorem+0x120>
  8048e8:	a813883a 	mov	r9,r21
  8048ec:	880b883a 	mov	r5,r17
  8048f0:	0009883a 	mov	r4,zero
  8048f4:	000d883a 	mov	r6,zero
  8048f8:	2a000017 	ldw	r8,0(r5)
  8048fc:	49c00017 	ldw	r7,0(r9)
  804900:	29400104 	addi	r5,r5,4
  804904:	40bfffcc 	andi	r2,r8,65535
  804908:	14c5383a 	mul	r2,r2,r19
  80490c:	4010d43a 	srli	r8,r8,16
  804910:	38ffffcc 	andi	r3,r7,65535
  804914:	1105883a 	add	r2,r2,r4
  804918:	1008d43a 	srli	r4,r2,16
  80491c:	44d1383a 	mul	r8,r8,r19
  804920:	198d883a 	add	r6,r3,r6
  804924:	10ffffcc 	andi	r3,r2,65535
  804928:	30c7c83a 	sub	r3,r6,r3
  80492c:	380ed43a 	srli	r7,r7,16
  804930:	4105883a 	add	r2,r8,r4
  804934:	180dd43a 	srai	r6,r3,16
  804938:	113fffcc 	andi	r4,r2,65535
  80493c:	390fc83a 	sub	r7,r7,r4
  804940:	398d883a 	add	r6,r7,r6
  804944:	300e943a 	slli	r7,r6,16
  804948:	18ffffcc 	andi	r3,r3,65535
  80494c:	1008d43a 	srli	r4,r2,16
  804950:	38ceb03a 	or	r7,r7,r3
  804954:	49c00015 	stw	r7,0(r9)
  804958:	300dd43a 	srai	r6,r6,16
  80495c:	4a400104 	addi	r9,r9,4
  804960:	a17fe52e 	bgeu	r20,r5,8048f8 <__alt_mem_onchip_mem+0xff7848f8>
  804964:	b0800017 	ldw	r2,0(r22)
  804968:	10000b1e 	bne	r2,zero,804998 <quorem+0x120>
  80496c:	b0bfff04 	addi	r2,r22,-4
  804970:	a880082e 	bgeu	r21,r2,804994 <quorem+0x11c>
  804974:	b0ffff17 	ldw	r3,-4(r22)
  804978:	18000326 	beq	r3,zero,804988 <quorem+0x110>
  80497c:	00000506 	br	804994 <quorem+0x11c>
  804980:	10c00017 	ldw	r3,0(r2)
  804984:	1800031e 	bne	r3,zero,804994 <quorem+0x11c>
  804988:	10bfff04 	addi	r2,r2,-4
  80498c:	94bfffc4 	addi	r18,r18,-1
  804990:	a8bffb36 	bltu	r21,r2,804980 <__alt_mem_onchip_mem+0xff784980>
  804994:	84800415 	stw	r18,16(r16)
  804998:	b80b883a 	mov	r5,r23
  80499c:	8009883a 	mov	r4,r16
  8049a0:	0807a340 	call	807a34 <__mcmp>
  8049a4:	10002616 	blt	r2,zero,804a40 <quorem+0x1c8>
  8049a8:	9cc00044 	addi	r19,r19,1
  8049ac:	a805883a 	mov	r2,r21
  8049b0:	000b883a 	mov	r5,zero
  8049b4:	11000017 	ldw	r4,0(r2)
  8049b8:	89800017 	ldw	r6,0(r17)
  8049bc:	10800104 	addi	r2,r2,4
  8049c0:	20ffffcc 	andi	r3,r4,65535
  8049c4:	194b883a 	add	r5,r3,r5
  8049c8:	30ffffcc 	andi	r3,r6,65535
  8049cc:	28c7c83a 	sub	r3,r5,r3
  8049d0:	300cd43a 	srli	r6,r6,16
  8049d4:	2008d43a 	srli	r4,r4,16
  8049d8:	180bd43a 	srai	r5,r3,16
  8049dc:	18ffffcc 	andi	r3,r3,65535
  8049e0:	2189c83a 	sub	r4,r4,r6
  8049e4:	2149883a 	add	r4,r4,r5
  8049e8:	200c943a 	slli	r6,r4,16
  8049ec:	8c400104 	addi	r17,r17,4
  8049f0:	200bd43a 	srai	r5,r4,16
  8049f4:	30c6b03a 	or	r3,r6,r3
  8049f8:	10ffff15 	stw	r3,-4(r2)
  8049fc:	a47fed2e 	bgeu	r20,r17,8049b4 <__alt_mem_onchip_mem+0xff7849b4>
  804a00:	9485883a 	add	r2,r18,r18
  804a04:	1085883a 	add	r2,r2,r2
  804a08:	a887883a 	add	r3,r21,r2
  804a0c:	18800017 	ldw	r2,0(r3)
  804a10:	10000b1e 	bne	r2,zero,804a40 <quorem+0x1c8>
  804a14:	18bfff04 	addi	r2,r3,-4
  804a18:	a880082e 	bgeu	r21,r2,804a3c <quorem+0x1c4>
  804a1c:	18ffff17 	ldw	r3,-4(r3)
  804a20:	18000326 	beq	r3,zero,804a30 <quorem+0x1b8>
  804a24:	00000506 	br	804a3c <quorem+0x1c4>
  804a28:	10c00017 	ldw	r3,0(r2)
  804a2c:	1800031e 	bne	r3,zero,804a3c <quorem+0x1c4>
  804a30:	10bfff04 	addi	r2,r2,-4
  804a34:	94bfffc4 	addi	r18,r18,-1
  804a38:	a8bffb36 	bltu	r21,r2,804a28 <__alt_mem_onchip_mem+0xff784a28>
  804a3c:	84800415 	stw	r18,16(r16)
  804a40:	9805883a 	mov	r2,r19
  804a44:	dfc00817 	ldw	ra,32(sp)
  804a48:	ddc00717 	ldw	r23,28(sp)
  804a4c:	dd800617 	ldw	r22,24(sp)
  804a50:	dd400517 	ldw	r21,20(sp)
  804a54:	dd000417 	ldw	r20,16(sp)
  804a58:	dcc00317 	ldw	r19,12(sp)
  804a5c:	dc800217 	ldw	r18,8(sp)
  804a60:	dc400117 	ldw	r17,4(sp)
  804a64:	dc000017 	ldw	r16,0(sp)
  804a68:	dec00904 	addi	sp,sp,36
  804a6c:	f800283a 	ret
  804a70:	0005883a 	mov	r2,zero
  804a74:	003ff306 	br	804a44 <__alt_mem_onchip_mem+0xff784a44>

00804a78 <_dtoa_r>:
  804a78:	20801017 	ldw	r2,64(r4)
  804a7c:	deffde04 	addi	sp,sp,-136
  804a80:	df002015 	stw	fp,128(sp)
  804a84:	dcc01b15 	stw	r19,108(sp)
  804a88:	dc801a15 	stw	r18,104(sp)
  804a8c:	dc401915 	stw	r17,100(sp)
  804a90:	dc001815 	stw	r16,96(sp)
  804a94:	dfc02115 	stw	ra,132(sp)
  804a98:	ddc01f15 	stw	r23,124(sp)
  804a9c:	dd801e15 	stw	r22,120(sp)
  804aa0:	dd401d15 	stw	r21,116(sp)
  804aa4:	dd001c15 	stw	r20,112(sp)
  804aa8:	d9c00315 	stw	r7,12(sp)
  804aac:	2039883a 	mov	fp,r4
  804ab0:	3023883a 	mov	r17,r6
  804ab4:	2825883a 	mov	r18,r5
  804ab8:	dc002417 	ldw	r16,144(sp)
  804abc:	3027883a 	mov	r19,r6
  804ac0:	10000826 	beq	r2,zero,804ae4 <_dtoa_r+0x6c>
  804ac4:	21801117 	ldw	r6,68(r4)
  804ac8:	00c00044 	movi	r3,1
  804acc:	100b883a 	mov	r5,r2
  804ad0:	1986983a 	sll	r3,r3,r6
  804ad4:	11800115 	stw	r6,4(r2)
  804ad8:	10c00215 	stw	r3,8(r2)
  804adc:	08072140 	call	807214 <_Bfree>
  804ae0:	e0001015 	stw	zero,64(fp)
  804ae4:	88002e16 	blt	r17,zero,804ba0 <_dtoa_r+0x128>
  804ae8:	80000015 	stw	zero,0(r16)
  804aec:	889ffc2c 	andhi	r2,r17,32752
  804af0:	00dffc34 	movhi	r3,32752
  804af4:	10c01c26 	beq	r2,r3,804b68 <_dtoa_r+0xf0>
  804af8:	000d883a 	mov	r6,zero
  804afc:	000f883a 	mov	r7,zero
  804b00:	9009883a 	mov	r4,r18
  804b04:	980b883a 	mov	r5,r19
  804b08:	080ca7c0 	call	80ca7c <__eqdf2>
  804b0c:	10002b1e 	bne	r2,zero,804bbc <_dtoa_r+0x144>
  804b10:	d9c02317 	ldw	r7,140(sp)
  804b14:	00800044 	movi	r2,1
  804b18:	38800015 	stw	r2,0(r7)
  804b1c:	d8802517 	ldw	r2,148(sp)
  804b20:	10019e26 	beq	r2,zero,80519c <_dtoa_r+0x724>
  804b24:	d8c02517 	ldw	r3,148(sp)
  804b28:	00802074 	movhi	r2,129
  804b2c:	1088ac44 	addi	r2,r2,8881
  804b30:	18800015 	stw	r2,0(r3)
  804b34:	10bfffc4 	addi	r2,r2,-1
  804b38:	dfc02117 	ldw	ra,132(sp)
  804b3c:	df002017 	ldw	fp,128(sp)
  804b40:	ddc01f17 	ldw	r23,124(sp)
  804b44:	dd801e17 	ldw	r22,120(sp)
  804b48:	dd401d17 	ldw	r21,116(sp)
  804b4c:	dd001c17 	ldw	r20,112(sp)
  804b50:	dcc01b17 	ldw	r19,108(sp)
  804b54:	dc801a17 	ldw	r18,104(sp)
  804b58:	dc401917 	ldw	r17,100(sp)
  804b5c:	dc001817 	ldw	r16,96(sp)
  804b60:	dec02204 	addi	sp,sp,136
  804b64:	f800283a 	ret
  804b68:	d8c02317 	ldw	r3,140(sp)
  804b6c:	0089c3c4 	movi	r2,9999
  804b70:	18800015 	stw	r2,0(r3)
  804b74:	90017726 	beq	r18,zero,805154 <_dtoa_r+0x6dc>
  804b78:	00802074 	movhi	r2,129
  804b7c:	1088b804 	addi	r2,r2,8928
  804b80:	d9002517 	ldw	r4,148(sp)
  804b84:	203fec26 	beq	r4,zero,804b38 <__alt_mem_onchip_mem+0xff784b38>
  804b88:	10c000c7 	ldb	r3,3(r2)
  804b8c:	1801781e 	bne	r3,zero,805170 <_dtoa_r+0x6f8>
  804b90:	10c000c4 	addi	r3,r2,3
  804b94:	d9802517 	ldw	r6,148(sp)
  804b98:	30c00015 	stw	r3,0(r6)
  804b9c:	003fe606 	br	804b38 <__alt_mem_onchip_mem+0xff784b38>
  804ba0:	04e00034 	movhi	r19,32768
  804ba4:	9cffffc4 	addi	r19,r19,-1
  804ba8:	00800044 	movi	r2,1
  804bac:	8ce6703a 	and	r19,r17,r19
  804bb0:	80800015 	stw	r2,0(r16)
  804bb4:	9823883a 	mov	r17,r19
  804bb8:	003fcc06 	br	804aec <__alt_mem_onchip_mem+0xff784aec>
  804bbc:	d8800204 	addi	r2,sp,8
  804bc0:	d8800015 	stw	r2,0(sp)
  804bc4:	d9c00104 	addi	r7,sp,4
  804bc8:	900b883a 	mov	r5,r18
  804bcc:	980d883a 	mov	r6,r19
  804bd0:	e009883a 	mov	r4,fp
  804bd4:	8820d53a 	srli	r16,r17,20
  804bd8:	0807e000 	call	807e00 <__d2b>
  804bdc:	d8800915 	stw	r2,36(sp)
  804be0:	8001651e 	bne	r16,zero,805178 <_dtoa_r+0x700>
  804be4:	dd800217 	ldw	r22,8(sp)
  804be8:	dc000117 	ldw	r16,4(sp)
  804bec:	00800804 	movi	r2,32
  804bf0:	b421883a 	add	r16,r22,r16
  804bf4:	80c10c84 	addi	r3,r16,1074
  804bf8:	10c2d10e 	bge	r2,r3,805740 <_dtoa_r+0xcc8>
  804bfc:	00801004 	movi	r2,64
  804c00:	81010484 	addi	r4,r16,1042
  804c04:	10c7c83a 	sub	r3,r2,r3
  804c08:	9108d83a 	srl	r4,r18,r4
  804c0c:	88e2983a 	sll	r17,r17,r3
  804c10:	2448b03a 	or	r4,r4,r17
  804c14:	080de440 	call	80de44 <__floatunsidf>
  804c18:	017f8434 	movhi	r5,65040
  804c1c:	01800044 	movi	r6,1
  804c20:	1009883a 	mov	r4,r2
  804c24:	194b883a 	add	r5,r3,r5
  804c28:	843fffc4 	addi	r16,r16,-1
  804c2c:	d9801115 	stw	r6,68(sp)
  804c30:	000d883a 	mov	r6,zero
  804c34:	01cffe34 	movhi	r7,16376
  804c38:	080d3ec0 	call	80d3ec <__subdf3>
  804c3c:	0198dbf4 	movhi	r6,25455
  804c40:	01cff4f4 	movhi	r7,16339
  804c44:	3190d844 	addi	r6,r6,17249
  804c48:	39e1e9c4 	addi	r7,r7,-30809
  804c4c:	1009883a 	mov	r4,r2
  804c50:	180b883a 	mov	r5,r3
  804c54:	080ccd40 	call	80ccd4 <__muldf3>
  804c58:	01a2d874 	movhi	r6,35681
  804c5c:	01cff1f4 	movhi	r7,16327
  804c60:	31b22cc4 	addi	r6,r6,-14157
  804c64:	39e28a04 	addi	r7,r7,-30168
  804c68:	180b883a 	mov	r5,r3
  804c6c:	1009883a 	mov	r4,r2
  804c70:	080b8e80 	call	80b8e8 <__adddf3>
  804c74:	8009883a 	mov	r4,r16
  804c78:	1029883a 	mov	r20,r2
  804c7c:	1823883a 	mov	r17,r3
  804c80:	080dd680 	call	80dd68 <__floatsidf>
  804c84:	019427f4 	movhi	r6,20639
  804c88:	01cff4f4 	movhi	r7,16339
  804c8c:	319e7ec4 	addi	r6,r6,31227
  804c90:	39d104c4 	addi	r7,r7,17427
  804c94:	1009883a 	mov	r4,r2
  804c98:	180b883a 	mov	r5,r3
  804c9c:	080ccd40 	call	80ccd4 <__muldf3>
  804ca0:	100d883a 	mov	r6,r2
  804ca4:	180f883a 	mov	r7,r3
  804ca8:	a009883a 	mov	r4,r20
  804cac:	880b883a 	mov	r5,r17
  804cb0:	080b8e80 	call	80b8e8 <__adddf3>
  804cb4:	1009883a 	mov	r4,r2
  804cb8:	180b883a 	mov	r5,r3
  804cbc:	1029883a 	mov	r20,r2
  804cc0:	1823883a 	mov	r17,r3
  804cc4:	080dce80 	call	80dce8 <__fixdfsi>
  804cc8:	000d883a 	mov	r6,zero
  804ccc:	000f883a 	mov	r7,zero
  804cd0:	a009883a 	mov	r4,r20
  804cd4:	880b883a 	mov	r5,r17
  804cd8:	d8800515 	stw	r2,20(sp)
  804cdc:	080cbe00 	call	80cbe0 <__ledf2>
  804ce0:	10028716 	blt	r2,zero,805700 <_dtoa_r+0xc88>
  804ce4:	d8c00517 	ldw	r3,20(sp)
  804ce8:	00800584 	movi	r2,22
  804cec:	10c27536 	bltu	r2,r3,8056c4 <_dtoa_r+0xc4c>
  804cf0:	180490fa 	slli	r2,r3,3
  804cf4:	00c02074 	movhi	r3,129
  804cf8:	18c8d304 	addi	r3,r3,9036
  804cfc:	1885883a 	add	r2,r3,r2
  804d00:	11000017 	ldw	r4,0(r2)
  804d04:	11400117 	ldw	r5,4(r2)
  804d08:	900d883a 	mov	r6,r18
  804d0c:	980f883a 	mov	r7,r19
  804d10:	080cb040 	call	80cb04 <__gedf2>
  804d14:	00828d0e 	bge	zero,r2,80574c <_dtoa_r+0xcd4>
  804d18:	d9000517 	ldw	r4,20(sp)
  804d1c:	d8000e15 	stw	zero,56(sp)
  804d20:	213fffc4 	addi	r4,r4,-1
  804d24:	d9000515 	stw	r4,20(sp)
  804d28:	b42dc83a 	sub	r22,r22,r16
  804d2c:	b5bfffc4 	addi	r22,r22,-1
  804d30:	b0026f16 	blt	r22,zero,8056f0 <_dtoa_r+0xc78>
  804d34:	d8000815 	stw	zero,32(sp)
  804d38:	d9c00517 	ldw	r7,20(sp)
  804d3c:	38026416 	blt	r7,zero,8056d0 <_dtoa_r+0xc58>
  804d40:	b1ed883a 	add	r22,r22,r7
  804d44:	d9c00d15 	stw	r7,52(sp)
  804d48:	d8000a15 	stw	zero,40(sp)
  804d4c:	d9800317 	ldw	r6,12(sp)
  804d50:	00800244 	movi	r2,9
  804d54:	11811436 	bltu	r2,r6,8051a8 <_dtoa_r+0x730>
  804d58:	00800144 	movi	r2,5
  804d5c:	1184e10e 	bge	r2,r6,8060e4 <_dtoa_r+0x166c>
  804d60:	31bfff04 	addi	r6,r6,-4
  804d64:	d9800315 	stw	r6,12(sp)
  804d68:	0023883a 	mov	r17,zero
  804d6c:	d9800317 	ldw	r6,12(sp)
  804d70:	008000c4 	movi	r2,3
  804d74:	30836726 	beq	r6,r2,805b14 <_dtoa_r+0x109c>
  804d78:	1183410e 	bge	r2,r6,805a80 <_dtoa_r+0x1008>
  804d7c:	d9c00317 	ldw	r7,12(sp)
  804d80:	00800104 	movi	r2,4
  804d84:	38827c26 	beq	r7,r2,805778 <_dtoa_r+0xd00>
  804d88:	00800144 	movi	r2,5
  804d8c:	3884c41e 	bne	r7,r2,8060a0 <_dtoa_r+0x1628>
  804d90:	00800044 	movi	r2,1
  804d94:	d8800b15 	stw	r2,44(sp)
  804d98:	d8c00517 	ldw	r3,20(sp)
  804d9c:	d9002217 	ldw	r4,136(sp)
  804da0:	1907883a 	add	r3,r3,r4
  804da4:	19800044 	addi	r6,r3,1
  804da8:	d8c00c15 	stw	r3,48(sp)
  804dac:	d9800615 	stw	r6,24(sp)
  804db0:	0183a40e 	bge	zero,r6,805c44 <_dtoa_r+0x11cc>
  804db4:	d9800617 	ldw	r6,24(sp)
  804db8:	3021883a 	mov	r16,r6
  804dbc:	e0001115 	stw	zero,68(fp)
  804dc0:	008005c4 	movi	r2,23
  804dc4:	1184c92e 	bgeu	r2,r6,8060ec <_dtoa_r+0x1674>
  804dc8:	00c00044 	movi	r3,1
  804dcc:	00800104 	movi	r2,4
  804dd0:	1085883a 	add	r2,r2,r2
  804dd4:	11000504 	addi	r4,r2,20
  804dd8:	180b883a 	mov	r5,r3
  804ddc:	18c00044 	addi	r3,r3,1
  804de0:	313ffb2e 	bgeu	r6,r4,804dd0 <__alt_mem_onchip_mem+0xff784dd0>
  804de4:	e1401115 	stw	r5,68(fp)
  804de8:	e009883a 	mov	r4,fp
  804dec:	080716c0 	call	80716c <_Balloc>
  804df0:	d8800715 	stw	r2,28(sp)
  804df4:	e0801015 	stw	r2,64(fp)
  804df8:	00800384 	movi	r2,14
  804dfc:	1400f736 	bltu	r2,r16,8051dc <_dtoa_r+0x764>
  804e00:	8800f626 	beq	r17,zero,8051dc <_dtoa_r+0x764>
  804e04:	d9c00517 	ldw	r7,20(sp)
  804e08:	01c39a0e 	bge	zero,r7,805c74 <_dtoa_r+0x11fc>
  804e0c:	388003cc 	andi	r2,r7,15
  804e10:	100490fa 	slli	r2,r2,3
  804e14:	382bd13a 	srai	r21,r7,4
  804e18:	00c02074 	movhi	r3,129
  804e1c:	18c8d304 	addi	r3,r3,9036
  804e20:	1885883a 	add	r2,r3,r2
  804e24:	a8c0040c 	andi	r3,r21,16
  804e28:	12400017 	ldw	r9,0(r2)
  804e2c:	12000117 	ldw	r8,4(r2)
  804e30:	18037926 	beq	r3,zero,805c18 <_dtoa_r+0x11a0>
  804e34:	00802074 	movhi	r2,129
  804e38:	1088c904 	addi	r2,r2,8996
  804e3c:	11800817 	ldw	r6,32(r2)
  804e40:	11c00917 	ldw	r7,36(r2)
  804e44:	9009883a 	mov	r4,r18
  804e48:	980b883a 	mov	r5,r19
  804e4c:	da001715 	stw	r8,92(sp)
  804e50:	da401615 	stw	r9,88(sp)
  804e54:	080c1940 	call	80c194 <__divdf3>
  804e58:	da001717 	ldw	r8,92(sp)
  804e5c:	da401617 	ldw	r9,88(sp)
  804e60:	ad4003cc 	andi	r21,r21,15
  804e64:	040000c4 	movi	r16,3
  804e68:	1023883a 	mov	r17,r2
  804e6c:	1829883a 	mov	r20,r3
  804e70:	a8001126 	beq	r21,zero,804eb8 <_dtoa_r+0x440>
  804e74:	05c02074 	movhi	r23,129
  804e78:	bdc8c904 	addi	r23,r23,8996
  804e7c:	4805883a 	mov	r2,r9
  804e80:	4007883a 	mov	r3,r8
  804e84:	a980004c 	andi	r6,r21,1
  804e88:	1009883a 	mov	r4,r2
  804e8c:	a82bd07a 	srai	r21,r21,1
  804e90:	180b883a 	mov	r5,r3
  804e94:	30000426 	beq	r6,zero,804ea8 <_dtoa_r+0x430>
  804e98:	b9800017 	ldw	r6,0(r23)
  804e9c:	b9c00117 	ldw	r7,4(r23)
  804ea0:	84000044 	addi	r16,r16,1
  804ea4:	080ccd40 	call	80ccd4 <__muldf3>
  804ea8:	bdc00204 	addi	r23,r23,8
  804eac:	a83ff51e 	bne	r21,zero,804e84 <__alt_mem_onchip_mem+0xff784e84>
  804eb0:	1013883a 	mov	r9,r2
  804eb4:	1811883a 	mov	r8,r3
  804eb8:	480d883a 	mov	r6,r9
  804ebc:	400f883a 	mov	r7,r8
  804ec0:	8809883a 	mov	r4,r17
  804ec4:	a00b883a 	mov	r5,r20
  804ec8:	080c1940 	call	80c194 <__divdf3>
  804ecc:	d8800f15 	stw	r2,60(sp)
  804ed0:	d8c01015 	stw	r3,64(sp)
  804ed4:	d8c00e17 	ldw	r3,56(sp)
  804ed8:	18000626 	beq	r3,zero,804ef4 <_dtoa_r+0x47c>
  804edc:	d9000f17 	ldw	r4,60(sp)
  804ee0:	d9401017 	ldw	r5,64(sp)
  804ee4:	000d883a 	mov	r6,zero
  804ee8:	01cffc34 	movhi	r7,16368
  804eec:	080cbe00 	call	80cbe0 <__ledf2>
  804ef0:	10040b16 	blt	r2,zero,805f20 <_dtoa_r+0x14a8>
  804ef4:	8009883a 	mov	r4,r16
  804ef8:	080dd680 	call	80dd68 <__floatsidf>
  804efc:	d9800f17 	ldw	r6,60(sp)
  804f00:	d9c01017 	ldw	r7,64(sp)
  804f04:	1009883a 	mov	r4,r2
  804f08:	180b883a 	mov	r5,r3
  804f0c:	080ccd40 	call	80ccd4 <__muldf3>
  804f10:	000d883a 	mov	r6,zero
  804f14:	01d00734 	movhi	r7,16412
  804f18:	1009883a 	mov	r4,r2
  804f1c:	180b883a 	mov	r5,r3
  804f20:	080b8e80 	call	80b8e8 <__adddf3>
  804f24:	1021883a 	mov	r16,r2
  804f28:	d8800617 	ldw	r2,24(sp)
  804f2c:	047f3034 	movhi	r17,64704
  804f30:	1c63883a 	add	r17,r3,r17
  804f34:	10031826 	beq	r2,zero,805b98 <_dtoa_r+0x1120>
  804f38:	d8c00517 	ldw	r3,20(sp)
  804f3c:	db000617 	ldw	r12,24(sp)
  804f40:	d8c01315 	stw	r3,76(sp)
  804f44:	d9000b17 	ldw	r4,44(sp)
  804f48:	20038f26 	beq	r4,zero,805d88 <_dtoa_r+0x1310>
  804f4c:	60bfffc4 	addi	r2,r12,-1
  804f50:	100490fa 	slli	r2,r2,3
  804f54:	00c02074 	movhi	r3,129
  804f58:	18c8d304 	addi	r3,r3,9036
  804f5c:	1885883a 	add	r2,r3,r2
  804f60:	11800017 	ldw	r6,0(r2)
  804f64:	11c00117 	ldw	r7,4(r2)
  804f68:	d8800717 	ldw	r2,28(sp)
  804f6c:	0009883a 	mov	r4,zero
  804f70:	014ff834 	movhi	r5,16352
  804f74:	db001615 	stw	r12,88(sp)
  804f78:	15c00044 	addi	r23,r2,1
  804f7c:	080c1940 	call	80c194 <__divdf3>
  804f80:	800d883a 	mov	r6,r16
  804f84:	880f883a 	mov	r7,r17
  804f88:	1009883a 	mov	r4,r2
  804f8c:	180b883a 	mov	r5,r3
  804f90:	080d3ec0 	call	80d3ec <__subdf3>
  804f94:	d9401017 	ldw	r5,64(sp)
  804f98:	d9000f17 	ldw	r4,60(sp)
  804f9c:	102b883a 	mov	r21,r2
  804fa0:	d8c01215 	stw	r3,72(sp)
  804fa4:	080dce80 	call	80dce8 <__fixdfsi>
  804fa8:	1009883a 	mov	r4,r2
  804fac:	1029883a 	mov	r20,r2
  804fb0:	080dd680 	call	80dd68 <__floatsidf>
  804fb4:	d9000f17 	ldw	r4,60(sp)
  804fb8:	d9401017 	ldw	r5,64(sp)
  804fbc:	100d883a 	mov	r6,r2
  804fc0:	180f883a 	mov	r7,r3
  804fc4:	080d3ec0 	call	80d3ec <__subdf3>
  804fc8:	1823883a 	mov	r17,r3
  804fcc:	d8c00717 	ldw	r3,28(sp)
  804fd0:	d9401217 	ldw	r5,72(sp)
  804fd4:	a2000c04 	addi	r8,r20,48
  804fd8:	1021883a 	mov	r16,r2
  804fdc:	1a000005 	stb	r8,0(r3)
  804fe0:	800d883a 	mov	r6,r16
  804fe4:	880f883a 	mov	r7,r17
  804fe8:	a809883a 	mov	r4,r21
  804fec:	4029883a 	mov	r20,r8
  804ff0:	080cb040 	call	80cb04 <__gedf2>
  804ff4:	00841d16 	blt	zero,r2,80606c <_dtoa_r+0x15f4>
  804ff8:	800d883a 	mov	r6,r16
  804ffc:	880f883a 	mov	r7,r17
  805000:	0009883a 	mov	r4,zero
  805004:	014ffc34 	movhi	r5,16368
  805008:	080d3ec0 	call	80d3ec <__subdf3>
  80500c:	d9401217 	ldw	r5,72(sp)
  805010:	100d883a 	mov	r6,r2
  805014:	180f883a 	mov	r7,r3
  805018:	a809883a 	mov	r4,r21
  80501c:	080cb040 	call	80cb04 <__gedf2>
  805020:	db001617 	ldw	r12,88(sp)
  805024:	00840e16 	blt	zero,r2,806060 <_dtoa_r+0x15e8>
  805028:	00800044 	movi	r2,1
  80502c:	13006b0e 	bge	r2,r12,8051dc <_dtoa_r+0x764>
  805030:	d9000717 	ldw	r4,28(sp)
  805034:	dd800f15 	stw	r22,60(sp)
  805038:	dcc01015 	stw	r19,64(sp)
  80503c:	2319883a 	add	r12,r4,r12
  805040:	dcc01217 	ldw	r19,72(sp)
  805044:	602d883a 	mov	r22,r12
  805048:	dc801215 	stw	r18,72(sp)
  80504c:	b825883a 	mov	r18,r23
  805050:	00000906 	br	805078 <_dtoa_r+0x600>
  805054:	080d3ec0 	call	80d3ec <__subdf3>
  805058:	a80d883a 	mov	r6,r21
  80505c:	980f883a 	mov	r7,r19
  805060:	1009883a 	mov	r4,r2
  805064:	180b883a 	mov	r5,r3
  805068:	080cbe00 	call	80cbe0 <__ledf2>
  80506c:	1003e816 	blt	r2,zero,806010 <_dtoa_r+0x1598>
  805070:	b825883a 	mov	r18,r23
  805074:	bd83e926 	beq	r23,r22,80601c <_dtoa_r+0x15a4>
  805078:	a809883a 	mov	r4,r21
  80507c:	980b883a 	mov	r5,r19
  805080:	000d883a 	mov	r6,zero
  805084:	01d00934 	movhi	r7,16420
  805088:	080ccd40 	call	80ccd4 <__muldf3>
  80508c:	000d883a 	mov	r6,zero
  805090:	01d00934 	movhi	r7,16420
  805094:	8009883a 	mov	r4,r16
  805098:	880b883a 	mov	r5,r17
  80509c:	102b883a 	mov	r21,r2
  8050a0:	1827883a 	mov	r19,r3
  8050a4:	080ccd40 	call	80ccd4 <__muldf3>
  8050a8:	180b883a 	mov	r5,r3
  8050ac:	1009883a 	mov	r4,r2
  8050b0:	1821883a 	mov	r16,r3
  8050b4:	1023883a 	mov	r17,r2
  8050b8:	080dce80 	call	80dce8 <__fixdfsi>
  8050bc:	1009883a 	mov	r4,r2
  8050c0:	1029883a 	mov	r20,r2
  8050c4:	080dd680 	call	80dd68 <__floatsidf>
  8050c8:	8809883a 	mov	r4,r17
  8050cc:	800b883a 	mov	r5,r16
  8050d0:	100d883a 	mov	r6,r2
  8050d4:	180f883a 	mov	r7,r3
  8050d8:	080d3ec0 	call	80d3ec <__subdf3>
  8050dc:	a5000c04 	addi	r20,r20,48
  8050e0:	a80d883a 	mov	r6,r21
  8050e4:	980f883a 	mov	r7,r19
  8050e8:	1009883a 	mov	r4,r2
  8050ec:	180b883a 	mov	r5,r3
  8050f0:	95000005 	stb	r20,0(r18)
  8050f4:	1021883a 	mov	r16,r2
  8050f8:	1823883a 	mov	r17,r3
  8050fc:	080cbe00 	call	80cbe0 <__ledf2>
  805100:	bdc00044 	addi	r23,r23,1
  805104:	800d883a 	mov	r6,r16
  805108:	880f883a 	mov	r7,r17
  80510c:	0009883a 	mov	r4,zero
  805110:	014ffc34 	movhi	r5,16368
  805114:	103fcf0e 	bge	r2,zero,805054 <__alt_mem_onchip_mem+0xff785054>
  805118:	d8c01317 	ldw	r3,76(sp)
  80511c:	d8c00515 	stw	r3,20(sp)
  805120:	d9400917 	ldw	r5,36(sp)
  805124:	e009883a 	mov	r4,fp
  805128:	08072140 	call	807214 <_Bfree>
  80512c:	d9000517 	ldw	r4,20(sp)
  805130:	d9802317 	ldw	r6,140(sp)
  805134:	d9c02517 	ldw	r7,148(sp)
  805138:	b8000005 	stb	zero,0(r23)
  80513c:	20800044 	addi	r2,r4,1
  805140:	30800015 	stw	r2,0(r6)
  805144:	3802aa26 	beq	r7,zero,805bf0 <_dtoa_r+0x1178>
  805148:	3dc00015 	stw	r23,0(r7)
  80514c:	d8800717 	ldw	r2,28(sp)
  805150:	003e7906 	br	804b38 <__alt_mem_onchip_mem+0xff784b38>
  805154:	00800434 	movhi	r2,16
  805158:	10bfffc4 	addi	r2,r2,-1
  80515c:	88a2703a 	and	r17,r17,r2
  805160:	883e851e 	bne	r17,zero,804b78 <__alt_mem_onchip_mem+0xff784b78>
  805164:	00802074 	movhi	r2,129
  805168:	1088b504 	addi	r2,r2,8916
  80516c:	003e8406 	br	804b80 <__alt_mem_onchip_mem+0xff784b80>
  805170:	10c00204 	addi	r3,r2,8
  805174:	003e8706 	br	804b94 <__alt_mem_onchip_mem+0xff784b94>
  805178:	01400434 	movhi	r5,16
  80517c:	297fffc4 	addi	r5,r5,-1
  805180:	994a703a 	and	r5,r19,r5
  805184:	9009883a 	mov	r4,r18
  805188:	843f0044 	addi	r16,r16,-1023
  80518c:	294ffc34 	orhi	r5,r5,16368
  805190:	dd800217 	ldw	r22,8(sp)
  805194:	d8001115 	stw	zero,68(sp)
  805198:	003ea506 	br	804c30 <__alt_mem_onchip_mem+0xff784c30>
  80519c:	00802074 	movhi	r2,129
  8051a0:	1088ac04 	addi	r2,r2,8880
  8051a4:	003e6406 	br	804b38 <__alt_mem_onchip_mem+0xff784b38>
  8051a8:	e0001115 	stw	zero,68(fp)
  8051ac:	000b883a 	mov	r5,zero
  8051b0:	e009883a 	mov	r4,fp
  8051b4:	080716c0 	call	80716c <_Balloc>
  8051b8:	01bfffc4 	movi	r6,-1
  8051bc:	01c00044 	movi	r7,1
  8051c0:	d8800715 	stw	r2,28(sp)
  8051c4:	d9800c15 	stw	r6,48(sp)
  8051c8:	e0801015 	stw	r2,64(fp)
  8051cc:	d8000315 	stw	zero,12(sp)
  8051d0:	d9c00b15 	stw	r7,44(sp)
  8051d4:	d9800615 	stw	r6,24(sp)
  8051d8:	d8002215 	stw	zero,136(sp)
  8051dc:	d8800117 	ldw	r2,4(sp)
  8051e0:	10008916 	blt	r2,zero,805408 <_dtoa_r+0x990>
  8051e4:	d9000517 	ldw	r4,20(sp)
  8051e8:	00c00384 	movi	r3,14
  8051ec:	19008616 	blt	r3,r4,805408 <_dtoa_r+0x990>
  8051f0:	200490fa 	slli	r2,r4,3
  8051f4:	00c02074 	movhi	r3,129
  8051f8:	d9802217 	ldw	r6,136(sp)
  8051fc:	18c8d304 	addi	r3,r3,9036
  805200:	1885883a 	add	r2,r3,r2
  805204:	14000017 	ldw	r16,0(r2)
  805208:	14400117 	ldw	r17,4(r2)
  80520c:	30016316 	blt	r6,zero,80579c <_dtoa_r+0xd24>
  805210:	800d883a 	mov	r6,r16
  805214:	880f883a 	mov	r7,r17
  805218:	9009883a 	mov	r4,r18
  80521c:	980b883a 	mov	r5,r19
  805220:	080c1940 	call	80c194 <__divdf3>
  805224:	180b883a 	mov	r5,r3
  805228:	1009883a 	mov	r4,r2
  80522c:	080dce80 	call	80dce8 <__fixdfsi>
  805230:	1009883a 	mov	r4,r2
  805234:	102b883a 	mov	r21,r2
  805238:	080dd680 	call	80dd68 <__floatsidf>
  80523c:	800d883a 	mov	r6,r16
  805240:	880f883a 	mov	r7,r17
  805244:	1009883a 	mov	r4,r2
  805248:	180b883a 	mov	r5,r3
  80524c:	080ccd40 	call	80ccd4 <__muldf3>
  805250:	100d883a 	mov	r6,r2
  805254:	180f883a 	mov	r7,r3
  805258:	9009883a 	mov	r4,r18
  80525c:	980b883a 	mov	r5,r19
  805260:	080d3ec0 	call	80d3ec <__subdf3>
  805264:	d9c00717 	ldw	r7,28(sp)
  805268:	1009883a 	mov	r4,r2
  80526c:	a8800c04 	addi	r2,r21,48
  805270:	38800005 	stb	r2,0(r7)
  805274:	3dc00044 	addi	r23,r7,1
  805278:	d9c00617 	ldw	r7,24(sp)
  80527c:	01800044 	movi	r6,1
  805280:	180b883a 	mov	r5,r3
  805284:	2005883a 	mov	r2,r4
  805288:	39803826 	beq	r7,r6,80536c <_dtoa_r+0x8f4>
  80528c:	000d883a 	mov	r6,zero
  805290:	01d00934 	movhi	r7,16420
  805294:	080ccd40 	call	80ccd4 <__muldf3>
  805298:	000d883a 	mov	r6,zero
  80529c:	000f883a 	mov	r7,zero
  8052a0:	1009883a 	mov	r4,r2
  8052a4:	180b883a 	mov	r5,r3
  8052a8:	1025883a 	mov	r18,r2
  8052ac:	1827883a 	mov	r19,r3
  8052b0:	080ca7c0 	call	80ca7c <__eqdf2>
  8052b4:	103f9a26 	beq	r2,zero,805120 <__alt_mem_onchip_mem+0xff785120>
  8052b8:	d9c00617 	ldw	r7,24(sp)
  8052bc:	d8c00717 	ldw	r3,28(sp)
  8052c0:	b829883a 	mov	r20,r23
  8052c4:	38bfffc4 	addi	r2,r7,-1
  8052c8:	18ad883a 	add	r22,r3,r2
  8052cc:	00000a06 	br	8052f8 <_dtoa_r+0x880>
  8052d0:	080ccd40 	call	80ccd4 <__muldf3>
  8052d4:	000d883a 	mov	r6,zero
  8052d8:	000f883a 	mov	r7,zero
  8052dc:	1009883a 	mov	r4,r2
  8052e0:	180b883a 	mov	r5,r3
  8052e4:	1025883a 	mov	r18,r2
  8052e8:	1827883a 	mov	r19,r3
  8052ec:	b829883a 	mov	r20,r23
  8052f0:	080ca7c0 	call	80ca7c <__eqdf2>
  8052f4:	103f8a26 	beq	r2,zero,805120 <__alt_mem_onchip_mem+0xff785120>
  8052f8:	800d883a 	mov	r6,r16
  8052fc:	880f883a 	mov	r7,r17
  805300:	9009883a 	mov	r4,r18
  805304:	980b883a 	mov	r5,r19
  805308:	080c1940 	call	80c194 <__divdf3>
  80530c:	180b883a 	mov	r5,r3
  805310:	1009883a 	mov	r4,r2
  805314:	080dce80 	call	80dce8 <__fixdfsi>
  805318:	1009883a 	mov	r4,r2
  80531c:	102b883a 	mov	r21,r2
  805320:	080dd680 	call	80dd68 <__floatsidf>
  805324:	800d883a 	mov	r6,r16
  805328:	880f883a 	mov	r7,r17
  80532c:	1009883a 	mov	r4,r2
  805330:	180b883a 	mov	r5,r3
  805334:	080ccd40 	call	80ccd4 <__muldf3>
  805338:	100d883a 	mov	r6,r2
  80533c:	180f883a 	mov	r7,r3
  805340:	9009883a 	mov	r4,r18
  805344:	980b883a 	mov	r5,r19
  805348:	080d3ec0 	call	80d3ec <__subdf3>
  80534c:	aa000c04 	addi	r8,r21,48
  805350:	a2000005 	stb	r8,0(r20)
  805354:	000d883a 	mov	r6,zero
  805358:	01d00934 	movhi	r7,16420
  80535c:	1009883a 	mov	r4,r2
  805360:	180b883a 	mov	r5,r3
  805364:	a5c00044 	addi	r23,r20,1
  805368:	b53fd91e 	bne	r22,r20,8052d0 <__alt_mem_onchip_mem+0xff7852d0>
  80536c:	100d883a 	mov	r6,r2
  805370:	180f883a 	mov	r7,r3
  805374:	1009883a 	mov	r4,r2
  805378:	180b883a 	mov	r5,r3
  80537c:	080b8e80 	call	80b8e8 <__adddf3>
  805380:	100d883a 	mov	r6,r2
  805384:	180f883a 	mov	r7,r3
  805388:	8009883a 	mov	r4,r16
  80538c:	880b883a 	mov	r5,r17
  805390:	1027883a 	mov	r19,r2
  805394:	1825883a 	mov	r18,r3
  805398:	080cbe00 	call	80cbe0 <__ledf2>
  80539c:	10000816 	blt	r2,zero,8053c0 <_dtoa_r+0x948>
  8053a0:	980d883a 	mov	r6,r19
  8053a4:	900f883a 	mov	r7,r18
  8053a8:	8009883a 	mov	r4,r16
  8053ac:	880b883a 	mov	r5,r17
  8053b0:	080ca7c0 	call	80ca7c <__eqdf2>
  8053b4:	103f5a1e 	bne	r2,zero,805120 <__alt_mem_onchip_mem+0xff785120>
  8053b8:	ad40004c 	andi	r21,r21,1
  8053bc:	a83f5826 	beq	r21,zero,805120 <__alt_mem_onchip_mem+0xff785120>
  8053c0:	bd3fffc3 	ldbu	r20,-1(r23)
  8053c4:	b8bfffc4 	addi	r2,r23,-1
  8053c8:	1007883a 	mov	r3,r2
  8053cc:	01400e44 	movi	r5,57
  8053d0:	d9800717 	ldw	r6,28(sp)
  8053d4:	00000506 	br	8053ec <_dtoa_r+0x974>
  8053d8:	18ffffc4 	addi	r3,r3,-1
  8053dc:	11824726 	beq	r2,r6,805cfc <_dtoa_r+0x1284>
  8053e0:	1d000003 	ldbu	r20,0(r3)
  8053e4:	102f883a 	mov	r23,r2
  8053e8:	10bfffc4 	addi	r2,r2,-1
  8053ec:	a1003fcc 	andi	r4,r20,255
  8053f0:	2100201c 	xori	r4,r4,128
  8053f4:	213fe004 	addi	r4,r4,-128
  8053f8:	217ff726 	beq	r4,r5,8053d8 <__alt_mem_onchip_mem+0xff7853d8>
  8053fc:	a2000044 	addi	r8,r20,1
  805400:	12000005 	stb	r8,0(r2)
  805404:	003f4606 	br	805120 <__alt_mem_onchip_mem+0xff785120>
  805408:	d9000b17 	ldw	r4,44(sp)
  80540c:	2000c826 	beq	r4,zero,805730 <_dtoa_r+0xcb8>
  805410:	d9800317 	ldw	r6,12(sp)
  805414:	00c00044 	movi	r3,1
  805418:	1980f90e 	bge	r3,r6,805800 <_dtoa_r+0xd88>
  80541c:	d8800617 	ldw	r2,24(sp)
  805420:	d8c00a17 	ldw	r3,40(sp)
  805424:	157fffc4 	addi	r21,r2,-1
  805428:	1d41f316 	blt	r3,r21,805bf8 <_dtoa_r+0x1180>
  80542c:	1d6bc83a 	sub	r21,r3,r21
  805430:	d9c00617 	ldw	r7,24(sp)
  805434:	3802aa16 	blt	r7,zero,805ee0 <_dtoa_r+0x1468>
  805438:	dd000817 	ldw	r20,32(sp)
  80543c:	d8800617 	ldw	r2,24(sp)
  805440:	d8c00817 	ldw	r3,32(sp)
  805444:	01400044 	movi	r5,1
  805448:	e009883a 	mov	r4,fp
  80544c:	1887883a 	add	r3,r3,r2
  805450:	d8c00815 	stw	r3,32(sp)
  805454:	b0ad883a 	add	r22,r22,r2
  805458:	08075780 	call	807578 <__i2b>
  80545c:	1023883a 	mov	r17,r2
  805460:	a0000826 	beq	r20,zero,805484 <_dtoa_r+0xa0c>
  805464:	0580070e 	bge	zero,r22,805484 <_dtoa_r+0xa0c>
  805468:	a005883a 	mov	r2,r20
  80546c:	b500b916 	blt	r22,r20,805754 <_dtoa_r+0xcdc>
  805470:	d9000817 	ldw	r4,32(sp)
  805474:	a0a9c83a 	sub	r20,r20,r2
  805478:	b0adc83a 	sub	r22,r22,r2
  80547c:	2089c83a 	sub	r4,r4,r2
  805480:	d9000815 	stw	r4,32(sp)
  805484:	d9800a17 	ldw	r6,40(sp)
  805488:	0181810e 	bge	zero,r6,805a90 <_dtoa_r+0x1018>
  80548c:	d9c00b17 	ldw	r7,44(sp)
  805490:	3800b326 	beq	r7,zero,805760 <_dtoa_r+0xce8>
  805494:	a800b226 	beq	r21,zero,805760 <_dtoa_r+0xce8>
  805498:	880b883a 	mov	r5,r17
  80549c:	a80d883a 	mov	r6,r21
  8054a0:	e009883a 	mov	r4,fp
  8054a4:	08077ac0 	call	8077ac <__pow5mult>
  8054a8:	d9800917 	ldw	r6,36(sp)
  8054ac:	100b883a 	mov	r5,r2
  8054b0:	e009883a 	mov	r4,fp
  8054b4:	1023883a 	mov	r17,r2
  8054b8:	08075b40 	call	8075b4 <__multiply>
  8054bc:	1021883a 	mov	r16,r2
  8054c0:	d8800a17 	ldw	r2,40(sp)
  8054c4:	d9400917 	ldw	r5,36(sp)
  8054c8:	e009883a 	mov	r4,fp
  8054cc:	1545c83a 	sub	r2,r2,r21
  8054d0:	d8800a15 	stw	r2,40(sp)
  8054d4:	08072140 	call	807214 <_Bfree>
  8054d8:	d8c00a17 	ldw	r3,40(sp)
  8054dc:	18009f1e 	bne	r3,zero,80575c <_dtoa_r+0xce4>
  8054e0:	05c00044 	movi	r23,1
  8054e4:	e009883a 	mov	r4,fp
  8054e8:	b80b883a 	mov	r5,r23
  8054ec:	08075780 	call	807578 <__i2b>
  8054f0:	d9000d17 	ldw	r4,52(sp)
  8054f4:	102b883a 	mov	r21,r2
  8054f8:	2000ce26 	beq	r4,zero,805834 <_dtoa_r+0xdbc>
  8054fc:	200d883a 	mov	r6,r4
  805500:	100b883a 	mov	r5,r2
  805504:	e009883a 	mov	r4,fp
  805508:	08077ac0 	call	8077ac <__pow5mult>
  80550c:	d9800317 	ldw	r6,12(sp)
  805510:	102b883a 	mov	r21,r2
  805514:	b981810e 	bge	r23,r6,805b1c <_dtoa_r+0x10a4>
  805518:	0027883a 	mov	r19,zero
  80551c:	a8800417 	ldw	r2,16(r21)
  805520:	05c00804 	movi	r23,32
  805524:	10800104 	addi	r2,r2,4
  805528:	1085883a 	add	r2,r2,r2
  80552c:	1085883a 	add	r2,r2,r2
  805530:	a885883a 	add	r2,r21,r2
  805534:	11000017 	ldw	r4,0(r2)
  805538:	08074600 	call	807460 <__hi0bits>
  80553c:	b885c83a 	sub	r2,r23,r2
  805540:	1585883a 	add	r2,r2,r22
  805544:	108007cc 	andi	r2,r2,31
  805548:	1000b326 	beq	r2,zero,805818 <_dtoa_r+0xda0>
  80554c:	00c00804 	movi	r3,32
  805550:	1887c83a 	sub	r3,r3,r2
  805554:	01000104 	movi	r4,4
  805558:	20c2cd0e 	bge	r4,r3,806090 <_dtoa_r+0x1618>
  80555c:	00c00704 	movi	r3,28
  805560:	1885c83a 	sub	r2,r3,r2
  805564:	d8c00817 	ldw	r3,32(sp)
  805568:	a0a9883a 	add	r20,r20,r2
  80556c:	b0ad883a 	add	r22,r22,r2
  805570:	1887883a 	add	r3,r3,r2
  805574:	d8c00815 	stw	r3,32(sp)
  805578:	d9800817 	ldw	r6,32(sp)
  80557c:	0180040e 	bge	zero,r6,805590 <_dtoa_r+0xb18>
  805580:	800b883a 	mov	r5,r16
  805584:	e009883a 	mov	r4,fp
  805588:	08078ec0 	call	8078ec <__lshift>
  80558c:	1021883a 	mov	r16,r2
  805590:	0580050e 	bge	zero,r22,8055a8 <_dtoa_r+0xb30>
  805594:	a80b883a 	mov	r5,r21
  805598:	b00d883a 	mov	r6,r22
  80559c:	e009883a 	mov	r4,fp
  8055a0:	08078ec0 	call	8078ec <__lshift>
  8055a4:	102b883a 	mov	r21,r2
  8055a8:	d9c00e17 	ldw	r7,56(sp)
  8055ac:	3801211e 	bne	r7,zero,805a34 <_dtoa_r+0xfbc>
  8055b0:	d9800617 	ldw	r6,24(sp)
  8055b4:	0181380e 	bge	zero,r6,805a98 <_dtoa_r+0x1020>
  8055b8:	d8c00b17 	ldw	r3,44(sp)
  8055bc:	1800ab1e 	bne	r3,zero,80586c <_dtoa_r+0xdf4>
  8055c0:	dc800717 	ldw	r18,28(sp)
  8055c4:	dcc00617 	ldw	r19,24(sp)
  8055c8:	9029883a 	mov	r20,r18
  8055cc:	00000206 	br	8055d8 <_dtoa_r+0xb60>
  8055d0:	080723c0 	call	80723c <__multadd>
  8055d4:	1021883a 	mov	r16,r2
  8055d8:	a80b883a 	mov	r5,r21
  8055dc:	8009883a 	mov	r4,r16
  8055e0:	08048780 	call	804878 <quorem>
  8055e4:	10800c04 	addi	r2,r2,48
  8055e8:	90800005 	stb	r2,0(r18)
  8055ec:	94800044 	addi	r18,r18,1
  8055f0:	9507c83a 	sub	r3,r18,r20
  8055f4:	000f883a 	mov	r7,zero
  8055f8:	01800284 	movi	r6,10
  8055fc:	800b883a 	mov	r5,r16
  805600:	e009883a 	mov	r4,fp
  805604:	1cfff216 	blt	r3,r19,8055d0 <__alt_mem_onchip_mem+0xff7855d0>
  805608:	1011883a 	mov	r8,r2
  80560c:	d8800617 	ldw	r2,24(sp)
  805610:	0082370e 	bge	zero,r2,805ef0 <_dtoa_r+0x1478>
  805614:	d9000717 	ldw	r4,28(sp)
  805618:	0025883a 	mov	r18,zero
  80561c:	20af883a 	add	r23,r4,r2
  805620:	01800044 	movi	r6,1
  805624:	800b883a 	mov	r5,r16
  805628:	e009883a 	mov	r4,fp
  80562c:	da001715 	stw	r8,92(sp)
  805630:	08078ec0 	call	8078ec <__lshift>
  805634:	a80b883a 	mov	r5,r21
  805638:	1009883a 	mov	r4,r2
  80563c:	d8800915 	stw	r2,36(sp)
  805640:	0807a340 	call	807a34 <__mcmp>
  805644:	da001717 	ldw	r8,92(sp)
  805648:	0081800e 	bge	zero,r2,805c4c <_dtoa_r+0x11d4>
  80564c:	b93fffc3 	ldbu	r4,-1(r23)
  805650:	b8bfffc4 	addi	r2,r23,-1
  805654:	1007883a 	mov	r3,r2
  805658:	01800e44 	movi	r6,57
  80565c:	d9c00717 	ldw	r7,28(sp)
  805660:	00000506 	br	805678 <_dtoa_r+0xc00>
  805664:	18ffffc4 	addi	r3,r3,-1
  805668:	11c12326 	beq	r2,r7,805af8 <_dtoa_r+0x1080>
  80566c:	19000003 	ldbu	r4,0(r3)
  805670:	102f883a 	mov	r23,r2
  805674:	10bfffc4 	addi	r2,r2,-1
  805678:	21403fcc 	andi	r5,r4,255
  80567c:	2940201c 	xori	r5,r5,128
  805680:	297fe004 	addi	r5,r5,-128
  805684:	29bff726 	beq	r5,r6,805664 <__alt_mem_onchip_mem+0xff785664>
  805688:	21000044 	addi	r4,r4,1
  80568c:	11000005 	stb	r4,0(r2)
  805690:	a80b883a 	mov	r5,r21
  805694:	e009883a 	mov	r4,fp
  805698:	08072140 	call	807214 <_Bfree>
  80569c:	883ea026 	beq	r17,zero,805120 <__alt_mem_onchip_mem+0xff785120>
  8056a0:	90000426 	beq	r18,zero,8056b4 <_dtoa_r+0xc3c>
  8056a4:	94400326 	beq	r18,r17,8056b4 <_dtoa_r+0xc3c>
  8056a8:	900b883a 	mov	r5,r18
  8056ac:	e009883a 	mov	r4,fp
  8056b0:	08072140 	call	807214 <_Bfree>
  8056b4:	880b883a 	mov	r5,r17
  8056b8:	e009883a 	mov	r4,fp
  8056bc:	08072140 	call	807214 <_Bfree>
  8056c0:	003e9706 	br	805120 <__alt_mem_onchip_mem+0xff785120>
  8056c4:	01800044 	movi	r6,1
  8056c8:	d9800e15 	stw	r6,56(sp)
  8056cc:	003d9606 	br	804d28 <__alt_mem_onchip_mem+0xff784d28>
  8056d0:	d8800817 	ldw	r2,32(sp)
  8056d4:	d8c00517 	ldw	r3,20(sp)
  8056d8:	d8000d15 	stw	zero,52(sp)
  8056dc:	10c5c83a 	sub	r2,r2,r3
  8056e0:	00c9c83a 	sub	r4,zero,r3
  8056e4:	d8800815 	stw	r2,32(sp)
  8056e8:	d9000a15 	stw	r4,40(sp)
  8056ec:	003d9706 	br	804d4c <__alt_mem_onchip_mem+0xff784d4c>
  8056f0:	05adc83a 	sub	r22,zero,r22
  8056f4:	dd800815 	stw	r22,32(sp)
  8056f8:	002d883a 	mov	r22,zero
  8056fc:	003d8e06 	br	804d38 <__alt_mem_onchip_mem+0xff784d38>
  805700:	d9000517 	ldw	r4,20(sp)
  805704:	080dd680 	call	80dd68 <__floatsidf>
  805708:	100d883a 	mov	r6,r2
  80570c:	180f883a 	mov	r7,r3
  805710:	a009883a 	mov	r4,r20
  805714:	880b883a 	mov	r5,r17
  805718:	080ca7c0 	call	80ca7c <__eqdf2>
  80571c:	103d7126 	beq	r2,zero,804ce4 <__alt_mem_onchip_mem+0xff784ce4>
  805720:	d9c00517 	ldw	r7,20(sp)
  805724:	39ffffc4 	addi	r7,r7,-1
  805728:	d9c00515 	stw	r7,20(sp)
  80572c:	003d6d06 	br	804ce4 <__alt_mem_onchip_mem+0xff784ce4>
  805730:	dd400a17 	ldw	r21,40(sp)
  805734:	dd000817 	ldw	r20,32(sp)
  805738:	0023883a 	mov	r17,zero
  80573c:	003f4806 	br	805460 <__alt_mem_onchip_mem+0xff785460>
  805740:	10e3c83a 	sub	r17,r2,r3
  805744:	9448983a 	sll	r4,r18,r17
  805748:	003d3206 	br	804c14 <__alt_mem_onchip_mem+0xff784c14>
  80574c:	d8000e15 	stw	zero,56(sp)
  805750:	003d7506 	br	804d28 <__alt_mem_onchip_mem+0xff784d28>
  805754:	b005883a 	mov	r2,r22
  805758:	003f4506 	br	805470 <__alt_mem_onchip_mem+0xff785470>
  80575c:	dc000915 	stw	r16,36(sp)
  805760:	d9800a17 	ldw	r6,40(sp)
  805764:	d9400917 	ldw	r5,36(sp)
  805768:	e009883a 	mov	r4,fp
  80576c:	08077ac0 	call	8077ac <__pow5mult>
  805770:	1021883a 	mov	r16,r2
  805774:	003f5a06 	br	8054e0 <__alt_mem_onchip_mem+0xff7854e0>
  805778:	01c00044 	movi	r7,1
  80577c:	d9c00b15 	stw	r7,44(sp)
  805780:	d8802217 	ldw	r2,136(sp)
  805784:	0081280e 	bge	zero,r2,805c28 <_dtoa_r+0x11b0>
  805788:	100d883a 	mov	r6,r2
  80578c:	1021883a 	mov	r16,r2
  805790:	d8800c15 	stw	r2,48(sp)
  805794:	d8800615 	stw	r2,24(sp)
  805798:	003d8806 	br	804dbc <__alt_mem_onchip_mem+0xff784dbc>
  80579c:	d8800617 	ldw	r2,24(sp)
  8057a0:	00be9b16 	blt	zero,r2,805210 <__alt_mem_onchip_mem+0xff785210>
  8057a4:	10010f1e 	bne	r2,zero,805be4 <_dtoa_r+0x116c>
  8057a8:	880b883a 	mov	r5,r17
  8057ac:	000d883a 	mov	r6,zero
  8057b0:	01d00534 	movhi	r7,16404
  8057b4:	8009883a 	mov	r4,r16
  8057b8:	080ccd40 	call	80ccd4 <__muldf3>
  8057bc:	900d883a 	mov	r6,r18
  8057c0:	980f883a 	mov	r7,r19
  8057c4:	1009883a 	mov	r4,r2
  8057c8:	180b883a 	mov	r5,r3
  8057cc:	080cb040 	call	80cb04 <__gedf2>
  8057d0:	002b883a 	mov	r21,zero
  8057d4:	0023883a 	mov	r17,zero
  8057d8:	1000bf16 	blt	r2,zero,805ad8 <_dtoa_r+0x1060>
  8057dc:	d9802217 	ldw	r6,136(sp)
  8057e0:	ddc00717 	ldw	r23,28(sp)
  8057e4:	018c303a 	nor	r6,zero,r6
  8057e8:	d9800515 	stw	r6,20(sp)
  8057ec:	a80b883a 	mov	r5,r21
  8057f0:	e009883a 	mov	r4,fp
  8057f4:	08072140 	call	807214 <_Bfree>
  8057f8:	883e4926 	beq	r17,zero,805120 <__alt_mem_onchip_mem+0xff785120>
  8057fc:	003fad06 	br	8056b4 <__alt_mem_onchip_mem+0xff7856b4>
  805800:	d9c01117 	ldw	r7,68(sp)
  805804:	3801bc26 	beq	r7,zero,805ef8 <_dtoa_r+0x1480>
  805808:	10810cc4 	addi	r2,r2,1075
  80580c:	dd400a17 	ldw	r21,40(sp)
  805810:	dd000817 	ldw	r20,32(sp)
  805814:	003f0a06 	br	805440 <__alt_mem_onchip_mem+0xff785440>
  805818:	00800704 	movi	r2,28
  80581c:	d9000817 	ldw	r4,32(sp)
  805820:	a0a9883a 	add	r20,r20,r2
  805824:	b0ad883a 	add	r22,r22,r2
  805828:	2089883a 	add	r4,r4,r2
  80582c:	d9000815 	stw	r4,32(sp)
  805830:	003f5106 	br	805578 <__alt_mem_onchip_mem+0xff785578>
  805834:	d8c00317 	ldw	r3,12(sp)
  805838:	b8c1fc0e 	bge	r23,r3,80602c <_dtoa_r+0x15b4>
  80583c:	0027883a 	mov	r19,zero
  805840:	b805883a 	mov	r2,r23
  805844:	003f3e06 	br	805540 <__alt_mem_onchip_mem+0xff785540>
  805848:	880b883a 	mov	r5,r17
  80584c:	e009883a 	mov	r4,fp
  805850:	000f883a 	mov	r7,zero
  805854:	01800284 	movi	r6,10
  805858:	080723c0 	call	80723c <__multadd>
  80585c:	d9000c17 	ldw	r4,48(sp)
  805860:	1023883a 	mov	r17,r2
  805864:	0102040e 	bge	zero,r4,806078 <_dtoa_r+0x1600>
  805868:	d9000615 	stw	r4,24(sp)
  80586c:	0500050e 	bge	zero,r20,805884 <_dtoa_r+0xe0c>
  805870:	880b883a 	mov	r5,r17
  805874:	a00d883a 	mov	r6,r20
  805878:	e009883a 	mov	r4,fp
  80587c:	08078ec0 	call	8078ec <__lshift>
  805880:	1023883a 	mov	r17,r2
  805884:	9801241e 	bne	r19,zero,805d18 <_dtoa_r+0x12a0>
  805888:	8829883a 	mov	r20,r17
  80588c:	d9000617 	ldw	r4,24(sp)
  805890:	dcc00717 	ldw	r19,28(sp)
  805894:	9480004c 	andi	r18,r18,1
  805898:	20bfffc4 	addi	r2,r4,-1
  80589c:	9885883a 	add	r2,r19,r2
  8058a0:	d8800415 	stw	r2,16(sp)
  8058a4:	dc800615 	stw	r18,24(sp)
  8058a8:	a80b883a 	mov	r5,r21
  8058ac:	8009883a 	mov	r4,r16
  8058b0:	08048780 	call	804878 <quorem>
  8058b4:	880b883a 	mov	r5,r17
  8058b8:	8009883a 	mov	r4,r16
  8058bc:	102f883a 	mov	r23,r2
  8058c0:	0807a340 	call	807a34 <__mcmp>
  8058c4:	a80b883a 	mov	r5,r21
  8058c8:	a00d883a 	mov	r6,r20
  8058cc:	e009883a 	mov	r4,fp
  8058d0:	102d883a 	mov	r22,r2
  8058d4:	0807a940 	call	807a94 <__mdiff>
  8058d8:	1007883a 	mov	r3,r2
  8058dc:	10800317 	ldw	r2,12(r2)
  8058e0:	bc800c04 	addi	r18,r23,48
  8058e4:	180b883a 	mov	r5,r3
  8058e8:	10004e1e 	bne	r2,zero,805a24 <_dtoa_r+0xfac>
  8058ec:	8009883a 	mov	r4,r16
  8058f0:	d8c01615 	stw	r3,88(sp)
  8058f4:	0807a340 	call	807a34 <__mcmp>
  8058f8:	d8c01617 	ldw	r3,88(sp)
  8058fc:	e009883a 	mov	r4,fp
  805900:	d8801615 	stw	r2,88(sp)
  805904:	180b883a 	mov	r5,r3
  805908:	08072140 	call	807214 <_Bfree>
  80590c:	d8801617 	ldw	r2,88(sp)
  805910:	1000041e 	bne	r2,zero,805924 <_dtoa_r+0xeac>
  805914:	d9800317 	ldw	r6,12(sp)
  805918:	3000021e 	bne	r6,zero,805924 <_dtoa_r+0xeac>
  80591c:	d8c00617 	ldw	r3,24(sp)
  805920:	18003726 	beq	r3,zero,805a00 <_dtoa_r+0xf88>
  805924:	b0002016 	blt	r22,zero,8059a8 <_dtoa_r+0xf30>
  805928:	b000041e 	bne	r22,zero,80593c <_dtoa_r+0xec4>
  80592c:	d9000317 	ldw	r4,12(sp)
  805930:	2000021e 	bne	r4,zero,80593c <_dtoa_r+0xec4>
  805934:	d8c00617 	ldw	r3,24(sp)
  805938:	18001b26 	beq	r3,zero,8059a8 <_dtoa_r+0xf30>
  80593c:	00810716 	blt	zero,r2,805d5c <_dtoa_r+0x12e4>
  805940:	d8c00417 	ldw	r3,16(sp)
  805944:	9d800044 	addi	r22,r19,1
  805948:	9c800005 	stb	r18,0(r19)
  80594c:	b02f883a 	mov	r23,r22
  805950:	98c10626 	beq	r19,r3,805d6c <_dtoa_r+0x12f4>
  805954:	800b883a 	mov	r5,r16
  805958:	000f883a 	mov	r7,zero
  80595c:	01800284 	movi	r6,10
  805960:	e009883a 	mov	r4,fp
  805964:	080723c0 	call	80723c <__multadd>
  805968:	1021883a 	mov	r16,r2
  80596c:	000f883a 	mov	r7,zero
  805970:	01800284 	movi	r6,10
  805974:	880b883a 	mov	r5,r17
  805978:	e009883a 	mov	r4,fp
  80597c:	8d002526 	beq	r17,r20,805a14 <_dtoa_r+0xf9c>
  805980:	080723c0 	call	80723c <__multadd>
  805984:	a00b883a 	mov	r5,r20
  805988:	000f883a 	mov	r7,zero
  80598c:	01800284 	movi	r6,10
  805990:	e009883a 	mov	r4,fp
  805994:	1023883a 	mov	r17,r2
  805998:	080723c0 	call	80723c <__multadd>
  80599c:	1029883a 	mov	r20,r2
  8059a0:	b027883a 	mov	r19,r22
  8059a4:	003fc006 	br	8058a8 <__alt_mem_onchip_mem+0xff7858a8>
  8059a8:	9011883a 	mov	r8,r18
  8059ac:	00800e0e 	bge	zero,r2,8059e8 <_dtoa_r+0xf70>
  8059b0:	800b883a 	mov	r5,r16
  8059b4:	01800044 	movi	r6,1
  8059b8:	e009883a 	mov	r4,fp
  8059bc:	da001715 	stw	r8,92(sp)
  8059c0:	08078ec0 	call	8078ec <__lshift>
  8059c4:	a80b883a 	mov	r5,r21
  8059c8:	1009883a 	mov	r4,r2
  8059cc:	1021883a 	mov	r16,r2
  8059d0:	0807a340 	call	807a34 <__mcmp>
  8059d4:	da001717 	ldw	r8,92(sp)
  8059d8:	0081960e 	bge	zero,r2,806034 <_dtoa_r+0x15bc>
  8059dc:	00800e44 	movi	r2,57
  8059e0:	40817026 	beq	r8,r2,805fa4 <_dtoa_r+0x152c>
  8059e4:	ba000c44 	addi	r8,r23,49
  8059e8:	8825883a 	mov	r18,r17
  8059ec:	9dc00044 	addi	r23,r19,1
  8059f0:	9a000005 	stb	r8,0(r19)
  8059f4:	a023883a 	mov	r17,r20
  8059f8:	dc000915 	stw	r16,36(sp)
  8059fc:	003f2406 	br	805690 <__alt_mem_onchip_mem+0xff785690>
  805a00:	00800e44 	movi	r2,57
  805a04:	9011883a 	mov	r8,r18
  805a08:	90816626 	beq	r18,r2,805fa4 <_dtoa_r+0x152c>
  805a0c:	05bff516 	blt	zero,r22,8059e4 <__alt_mem_onchip_mem+0xff7859e4>
  805a10:	003ff506 	br	8059e8 <__alt_mem_onchip_mem+0xff7859e8>
  805a14:	080723c0 	call	80723c <__multadd>
  805a18:	1023883a 	mov	r17,r2
  805a1c:	1029883a 	mov	r20,r2
  805a20:	003fdf06 	br	8059a0 <__alt_mem_onchip_mem+0xff7859a0>
  805a24:	e009883a 	mov	r4,fp
  805a28:	08072140 	call	807214 <_Bfree>
  805a2c:	00800044 	movi	r2,1
  805a30:	003fbc06 	br	805924 <__alt_mem_onchip_mem+0xff785924>
  805a34:	a80b883a 	mov	r5,r21
  805a38:	8009883a 	mov	r4,r16
  805a3c:	0807a340 	call	807a34 <__mcmp>
  805a40:	103edb0e 	bge	r2,zero,8055b0 <__alt_mem_onchip_mem+0xff7855b0>
  805a44:	800b883a 	mov	r5,r16
  805a48:	000f883a 	mov	r7,zero
  805a4c:	01800284 	movi	r6,10
  805a50:	e009883a 	mov	r4,fp
  805a54:	080723c0 	call	80723c <__multadd>
  805a58:	1021883a 	mov	r16,r2
  805a5c:	d8800517 	ldw	r2,20(sp)
  805a60:	d8c00b17 	ldw	r3,44(sp)
  805a64:	10bfffc4 	addi	r2,r2,-1
  805a68:	d8800515 	stw	r2,20(sp)
  805a6c:	183f761e 	bne	r3,zero,805848 <__alt_mem_onchip_mem+0xff785848>
  805a70:	d9000c17 	ldw	r4,48(sp)
  805a74:	0101730e 	bge	zero,r4,806044 <_dtoa_r+0x15cc>
  805a78:	d9000615 	stw	r4,24(sp)
  805a7c:	003ed006 	br	8055c0 <__alt_mem_onchip_mem+0xff7855c0>
  805a80:	00800084 	movi	r2,2
  805a84:	3081861e 	bne	r6,r2,8060a0 <_dtoa_r+0x1628>
  805a88:	d8000b15 	stw	zero,44(sp)
  805a8c:	003f3c06 	br	805780 <__alt_mem_onchip_mem+0xff785780>
  805a90:	dc000917 	ldw	r16,36(sp)
  805a94:	003e9206 	br	8054e0 <__alt_mem_onchip_mem+0xff7854e0>
  805a98:	d9c00317 	ldw	r7,12(sp)
  805a9c:	00800084 	movi	r2,2
  805aa0:	11fec50e 	bge	r2,r7,8055b8 <__alt_mem_onchip_mem+0xff7855b8>
  805aa4:	d9000617 	ldw	r4,24(sp)
  805aa8:	20013c1e 	bne	r4,zero,805f9c <_dtoa_r+0x1524>
  805aac:	a80b883a 	mov	r5,r21
  805ab0:	000f883a 	mov	r7,zero
  805ab4:	01800144 	movi	r6,5
  805ab8:	e009883a 	mov	r4,fp
  805abc:	080723c0 	call	80723c <__multadd>
  805ac0:	100b883a 	mov	r5,r2
  805ac4:	8009883a 	mov	r4,r16
  805ac8:	102b883a 	mov	r21,r2
  805acc:	0807a340 	call	807a34 <__mcmp>
  805ad0:	dc000915 	stw	r16,36(sp)
  805ad4:	00bf410e 	bge	zero,r2,8057dc <__alt_mem_onchip_mem+0xff7857dc>
  805ad8:	d9c00717 	ldw	r7,28(sp)
  805adc:	00800c44 	movi	r2,49
  805ae0:	38800005 	stb	r2,0(r7)
  805ae4:	d8800517 	ldw	r2,20(sp)
  805ae8:	3dc00044 	addi	r23,r7,1
  805aec:	10800044 	addi	r2,r2,1
  805af0:	d8800515 	stw	r2,20(sp)
  805af4:	003f3d06 	br	8057ec <__alt_mem_onchip_mem+0xff7857ec>
  805af8:	d9800517 	ldw	r6,20(sp)
  805afc:	d9c00717 	ldw	r7,28(sp)
  805b00:	00800c44 	movi	r2,49
  805b04:	31800044 	addi	r6,r6,1
  805b08:	d9800515 	stw	r6,20(sp)
  805b0c:	38800005 	stb	r2,0(r7)
  805b10:	003edf06 	br	805690 <__alt_mem_onchip_mem+0xff785690>
  805b14:	d8000b15 	stw	zero,44(sp)
  805b18:	003c9f06 	br	804d98 <__alt_mem_onchip_mem+0xff784d98>
  805b1c:	903e7e1e 	bne	r18,zero,805518 <__alt_mem_onchip_mem+0xff785518>
  805b20:	00800434 	movhi	r2,16
  805b24:	10bfffc4 	addi	r2,r2,-1
  805b28:	9884703a 	and	r2,r19,r2
  805b2c:	1000ea1e 	bne	r2,zero,805ed8 <_dtoa_r+0x1460>
  805b30:	9cdffc2c 	andhi	r19,r19,32752
  805b34:	9800e826 	beq	r19,zero,805ed8 <_dtoa_r+0x1460>
  805b38:	d9c00817 	ldw	r7,32(sp)
  805b3c:	b5800044 	addi	r22,r22,1
  805b40:	04c00044 	movi	r19,1
  805b44:	39c00044 	addi	r7,r7,1
  805b48:	d9c00815 	stw	r7,32(sp)
  805b4c:	d8800d17 	ldw	r2,52(sp)
  805b50:	103e721e 	bne	r2,zero,80551c <__alt_mem_onchip_mem+0xff78551c>
  805b54:	00800044 	movi	r2,1
  805b58:	003e7906 	br	805540 <__alt_mem_onchip_mem+0xff785540>
  805b5c:	8009883a 	mov	r4,r16
  805b60:	080dd680 	call	80dd68 <__floatsidf>
  805b64:	d9800f17 	ldw	r6,60(sp)
  805b68:	d9c01017 	ldw	r7,64(sp)
  805b6c:	1009883a 	mov	r4,r2
  805b70:	180b883a 	mov	r5,r3
  805b74:	080ccd40 	call	80ccd4 <__muldf3>
  805b78:	000d883a 	mov	r6,zero
  805b7c:	01d00734 	movhi	r7,16412
  805b80:	1009883a 	mov	r4,r2
  805b84:	180b883a 	mov	r5,r3
  805b88:	080b8e80 	call	80b8e8 <__adddf3>
  805b8c:	047f3034 	movhi	r17,64704
  805b90:	1021883a 	mov	r16,r2
  805b94:	1c63883a 	add	r17,r3,r17
  805b98:	d9000f17 	ldw	r4,60(sp)
  805b9c:	d9401017 	ldw	r5,64(sp)
  805ba0:	000d883a 	mov	r6,zero
  805ba4:	01d00534 	movhi	r7,16404
  805ba8:	080d3ec0 	call	80d3ec <__subdf3>
  805bac:	800d883a 	mov	r6,r16
  805bb0:	880f883a 	mov	r7,r17
  805bb4:	1009883a 	mov	r4,r2
  805bb8:	180b883a 	mov	r5,r3
  805bbc:	102b883a 	mov	r21,r2
  805bc0:	1829883a 	mov	r20,r3
  805bc4:	080cb040 	call	80cb04 <__gedf2>
  805bc8:	00806c16 	blt	zero,r2,805d7c <_dtoa_r+0x1304>
  805bcc:	89e0003c 	xorhi	r7,r17,32768
  805bd0:	800d883a 	mov	r6,r16
  805bd4:	a809883a 	mov	r4,r21
  805bd8:	a00b883a 	mov	r5,r20
  805bdc:	080cbe00 	call	80cbe0 <__ledf2>
  805be0:	103d7e0e 	bge	r2,zero,8051dc <__alt_mem_onchip_mem+0xff7851dc>
  805be4:	002b883a 	mov	r21,zero
  805be8:	0023883a 	mov	r17,zero
  805bec:	003efb06 	br	8057dc <__alt_mem_onchip_mem+0xff7857dc>
  805bf0:	d8800717 	ldw	r2,28(sp)
  805bf4:	003bd006 	br	804b38 <__alt_mem_onchip_mem+0xff784b38>
  805bf8:	d9000a17 	ldw	r4,40(sp)
  805bfc:	d9800d17 	ldw	r6,52(sp)
  805c00:	dd400a15 	stw	r21,40(sp)
  805c04:	a905c83a 	sub	r2,r21,r4
  805c08:	308d883a 	add	r6,r6,r2
  805c0c:	d9800d15 	stw	r6,52(sp)
  805c10:	002b883a 	mov	r21,zero
  805c14:	003e0606 	br	805430 <__alt_mem_onchip_mem+0xff785430>
  805c18:	9023883a 	mov	r17,r18
  805c1c:	9829883a 	mov	r20,r19
  805c20:	04000084 	movi	r16,2
  805c24:	003c9206 	br	804e70 <__alt_mem_onchip_mem+0xff784e70>
  805c28:	04000044 	movi	r16,1
  805c2c:	dc000c15 	stw	r16,48(sp)
  805c30:	dc000615 	stw	r16,24(sp)
  805c34:	dc002215 	stw	r16,136(sp)
  805c38:	e0001115 	stw	zero,68(fp)
  805c3c:	000b883a 	mov	r5,zero
  805c40:	003c6906 	br	804de8 <__alt_mem_onchip_mem+0xff784de8>
  805c44:	3021883a 	mov	r16,r6
  805c48:	003ffb06 	br	805c38 <__alt_mem_onchip_mem+0xff785c38>
  805c4c:	1000021e 	bne	r2,zero,805c58 <_dtoa_r+0x11e0>
  805c50:	4200004c 	andi	r8,r8,1
  805c54:	403e7d1e 	bne	r8,zero,80564c <__alt_mem_onchip_mem+0xff78564c>
  805c58:	01000c04 	movi	r4,48
  805c5c:	00000106 	br	805c64 <_dtoa_r+0x11ec>
  805c60:	102f883a 	mov	r23,r2
  805c64:	b8bfffc4 	addi	r2,r23,-1
  805c68:	10c00007 	ldb	r3,0(r2)
  805c6c:	193ffc26 	beq	r3,r4,805c60 <__alt_mem_onchip_mem+0xff785c60>
  805c70:	003e8706 	br	805690 <__alt_mem_onchip_mem+0xff785690>
  805c74:	d8800517 	ldw	r2,20(sp)
  805c78:	00a3c83a 	sub	r17,zero,r2
  805c7c:	8800a426 	beq	r17,zero,805f10 <_dtoa_r+0x1498>
  805c80:	888003cc 	andi	r2,r17,15
  805c84:	100490fa 	slli	r2,r2,3
  805c88:	00c02074 	movhi	r3,129
  805c8c:	18c8d304 	addi	r3,r3,9036
  805c90:	1885883a 	add	r2,r3,r2
  805c94:	11800017 	ldw	r6,0(r2)
  805c98:	11c00117 	ldw	r7,4(r2)
  805c9c:	9009883a 	mov	r4,r18
  805ca0:	980b883a 	mov	r5,r19
  805ca4:	8823d13a 	srai	r17,r17,4
  805ca8:	080ccd40 	call	80ccd4 <__muldf3>
  805cac:	d8800f15 	stw	r2,60(sp)
  805cb0:	d8c01015 	stw	r3,64(sp)
  805cb4:	8800e826 	beq	r17,zero,806058 <_dtoa_r+0x15e0>
  805cb8:	05002074 	movhi	r20,129
  805cbc:	a508c904 	addi	r20,r20,8996
  805cc0:	04000084 	movi	r16,2
  805cc4:	8980004c 	andi	r6,r17,1
  805cc8:	1009883a 	mov	r4,r2
  805ccc:	8823d07a 	srai	r17,r17,1
  805cd0:	180b883a 	mov	r5,r3
  805cd4:	30000426 	beq	r6,zero,805ce8 <_dtoa_r+0x1270>
  805cd8:	a1800017 	ldw	r6,0(r20)
  805cdc:	a1c00117 	ldw	r7,4(r20)
  805ce0:	84000044 	addi	r16,r16,1
  805ce4:	080ccd40 	call	80ccd4 <__muldf3>
  805ce8:	a5000204 	addi	r20,r20,8
  805cec:	883ff51e 	bne	r17,zero,805cc4 <__alt_mem_onchip_mem+0xff785cc4>
  805cf0:	d8800f15 	stw	r2,60(sp)
  805cf4:	d8c01015 	stw	r3,64(sp)
  805cf8:	003c7606 	br	804ed4 <__alt_mem_onchip_mem+0xff784ed4>
  805cfc:	00c00c04 	movi	r3,48
  805d00:	10c00005 	stb	r3,0(r2)
  805d04:	d8c00517 	ldw	r3,20(sp)
  805d08:	bd3fffc3 	ldbu	r20,-1(r23)
  805d0c:	18c00044 	addi	r3,r3,1
  805d10:	d8c00515 	stw	r3,20(sp)
  805d14:	003db906 	br	8053fc <__alt_mem_onchip_mem+0xff7853fc>
  805d18:	89400117 	ldw	r5,4(r17)
  805d1c:	e009883a 	mov	r4,fp
  805d20:	080716c0 	call	80716c <_Balloc>
  805d24:	89800417 	ldw	r6,16(r17)
  805d28:	89400304 	addi	r5,r17,12
  805d2c:	11000304 	addi	r4,r2,12
  805d30:	31800084 	addi	r6,r6,2
  805d34:	318d883a 	add	r6,r6,r6
  805d38:	318d883a 	add	r6,r6,r6
  805d3c:	1027883a 	mov	r19,r2
  805d40:	08070240 	call	807024 <memcpy>
  805d44:	01800044 	movi	r6,1
  805d48:	980b883a 	mov	r5,r19
  805d4c:	e009883a 	mov	r4,fp
  805d50:	08078ec0 	call	8078ec <__lshift>
  805d54:	1029883a 	mov	r20,r2
  805d58:	003ecc06 	br	80588c <__alt_mem_onchip_mem+0xff78588c>
  805d5c:	00800e44 	movi	r2,57
  805d60:	90809026 	beq	r18,r2,805fa4 <_dtoa_r+0x152c>
  805d64:	92000044 	addi	r8,r18,1
  805d68:	003f1f06 	br	8059e8 <__alt_mem_onchip_mem+0xff7859e8>
  805d6c:	9011883a 	mov	r8,r18
  805d70:	8825883a 	mov	r18,r17
  805d74:	a023883a 	mov	r17,r20
  805d78:	003e2906 	br	805620 <__alt_mem_onchip_mem+0xff785620>
  805d7c:	002b883a 	mov	r21,zero
  805d80:	0023883a 	mov	r17,zero
  805d84:	003f5406 	br	805ad8 <__alt_mem_onchip_mem+0xff785ad8>
  805d88:	61bfffc4 	addi	r6,r12,-1
  805d8c:	300490fa 	slli	r2,r6,3
  805d90:	00c02074 	movhi	r3,129
  805d94:	18c8d304 	addi	r3,r3,9036
  805d98:	1885883a 	add	r2,r3,r2
  805d9c:	11000017 	ldw	r4,0(r2)
  805da0:	11400117 	ldw	r5,4(r2)
  805da4:	d8800717 	ldw	r2,28(sp)
  805da8:	880f883a 	mov	r7,r17
  805dac:	d9801215 	stw	r6,72(sp)
  805db0:	800d883a 	mov	r6,r16
  805db4:	db001615 	stw	r12,88(sp)
  805db8:	15c00044 	addi	r23,r2,1
  805dbc:	080ccd40 	call	80ccd4 <__muldf3>
  805dc0:	d9401017 	ldw	r5,64(sp)
  805dc4:	d9000f17 	ldw	r4,60(sp)
  805dc8:	d8c01515 	stw	r3,84(sp)
  805dcc:	d8801415 	stw	r2,80(sp)
  805dd0:	080dce80 	call	80dce8 <__fixdfsi>
  805dd4:	1009883a 	mov	r4,r2
  805dd8:	1021883a 	mov	r16,r2
  805ddc:	080dd680 	call	80dd68 <__floatsidf>
  805de0:	d9000f17 	ldw	r4,60(sp)
  805de4:	d9401017 	ldw	r5,64(sp)
  805de8:	100d883a 	mov	r6,r2
  805dec:	180f883a 	mov	r7,r3
  805df0:	080d3ec0 	call	80d3ec <__subdf3>
  805df4:	1829883a 	mov	r20,r3
  805df8:	d8c00717 	ldw	r3,28(sp)
  805dfc:	84000c04 	addi	r16,r16,48
  805e00:	1023883a 	mov	r17,r2
  805e04:	1c000005 	stb	r16,0(r3)
  805e08:	db001617 	ldw	r12,88(sp)
  805e0c:	00800044 	movi	r2,1
  805e10:	60802226 	beq	r12,r2,805e9c <_dtoa_r+0x1424>
  805e14:	d9c00717 	ldw	r7,28(sp)
  805e18:	8805883a 	mov	r2,r17
  805e1c:	b82b883a 	mov	r21,r23
  805e20:	3b19883a 	add	r12,r7,r12
  805e24:	6023883a 	mov	r17,r12
  805e28:	a007883a 	mov	r3,r20
  805e2c:	dc800f15 	stw	r18,60(sp)
  805e30:	000d883a 	mov	r6,zero
  805e34:	01d00934 	movhi	r7,16420
  805e38:	1009883a 	mov	r4,r2
  805e3c:	180b883a 	mov	r5,r3
  805e40:	080ccd40 	call	80ccd4 <__muldf3>
  805e44:	180b883a 	mov	r5,r3
  805e48:	1009883a 	mov	r4,r2
  805e4c:	1829883a 	mov	r20,r3
  805e50:	1025883a 	mov	r18,r2
  805e54:	080dce80 	call	80dce8 <__fixdfsi>
  805e58:	1009883a 	mov	r4,r2
  805e5c:	1021883a 	mov	r16,r2
  805e60:	080dd680 	call	80dd68 <__floatsidf>
  805e64:	100d883a 	mov	r6,r2
  805e68:	180f883a 	mov	r7,r3
  805e6c:	9009883a 	mov	r4,r18
  805e70:	a00b883a 	mov	r5,r20
  805e74:	84000c04 	addi	r16,r16,48
  805e78:	080d3ec0 	call	80d3ec <__subdf3>
  805e7c:	ad400044 	addi	r21,r21,1
  805e80:	ac3fffc5 	stb	r16,-1(r21)
  805e84:	ac7fea1e 	bne	r21,r17,805e30 <__alt_mem_onchip_mem+0xff785e30>
  805e88:	1023883a 	mov	r17,r2
  805e8c:	d8801217 	ldw	r2,72(sp)
  805e90:	dc800f17 	ldw	r18,60(sp)
  805e94:	1829883a 	mov	r20,r3
  805e98:	b8af883a 	add	r23,r23,r2
  805e9c:	d9001417 	ldw	r4,80(sp)
  805ea0:	d9401517 	ldw	r5,84(sp)
  805ea4:	000d883a 	mov	r6,zero
  805ea8:	01cff834 	movhi	r7,16352
  805eac:	080b8e80 	call	80b8e8 <__adddf3>
  805eb0:	880d883a 	mov	r6,r17
  805eb4:	a00f883a 	mov	r7,r20
  805eb8:	1009883a 	mov	r4,r2
  805ebc:	180b883a 	mov	r5,r3
  805ec0:	080cbe00 	call	80cbe0 <__ledf2>
  805ec4:	10003e0e 	bge	r2,zero,805fc0 <_dtoa_r+0x1548>
  805ec8:	d9001317 	ldw	r4,76(sp)
  805ecc:	bd3fffc3 	ldbu	r20,-1(r23)
  805ed0:	d9000515 	stw	r4,20(sp)
  805ed4:	003d3b06 	br	8053c4 <__alt_mem_onchip_mem+0xff7853c4>
  805ed8:	0027883a 	mov	r19,zero
  805edc:	003f1b06 	br	805b4c <__alt_mem_onchip_mem+0xff785b4c>
  805ee0:	d8800817 	ldw	r2,32(sp)
  805ee4:	11e9c83a 	sub	r20,r2,r7
  805ee8:	0005883a 	mov	r2,zero
  805eec:	003d5406 	br	805440 <__alt_mem_onchip_mem+0xff785440>
  805ef0:	00800044 	movi	r2,1
  805ef4:	003dc706 	br	805614 <__alt_mem_onchip_mem+0xff785614>
  805ef8:	d8c00217 	ldw	r3,8(sp)
  805efc:	00800d84 	movi	r2,54
  805f00:	dd400a17 	ldw	r21,40(sp)
  805f04:	10c5c83a 	sub	r2,r2,r3
  805f08:	dd000817 	ldw	r20,32(sp)
  805f0c:	003d4c06 	br	805440 <__alt_mem_onchip_mem+0xff785440>
  805f10:	dc800f15 	stw	r18,60(sp)
  805f14:	dcc01015 	stw	r19,64(sp)
  805f18:	04000084 	movi	r16,2
  805f1c:	003bed06 	br	804ed4 <__alt_mem_onchip_mem+0xff784ed4>
  805f20:	d9000617 	ldw	r4,24(sp)
  805f24:	203f0d26 	beq	r4,zero,805b5c <__alt_mem_onchip_mem+0xff785b5c>
  805f28:	d9800c17 	ldw	r6,48(sp)
  805f2c:	01bcab0e 	bge	zero,r6,8051dc <__alt_mem_onchip_mem+0xff7851dc>
  805f30:	d9401017 	ldw	r5,64(sp)
  805f34:	d9000f17 	ldw	r4,60(sp)
  805f38:	000d883a 	mov	r6,zero
  805f3c:	01d00934 	movhi	r7,16420
  805f40:	080ccd40 	call	80ccd4 <__muldf3>
  805f44:	81000044 	addi	r4,r16,1
  805f48:	d8800f15 	stw	r2,60(sp)
  805f4c:	d8c01015 	stw	r3,64(sp)
  805f50:	080dd680 	call	80dd68 <__floatsidf>
  805f54:	d9800f17 	ldw	r6,60(sp)
  805f58:	d9c01017 	ldw	r7,64(sp)
  805f5c:	1009883a 	mov	r4,r2
  805f60:	180b883a 	mov	r5,r3
  805f64:	080ccd40 	call	80ccd4 <__muldf3>
  805f68:	01d00734 	movhi	r7,16412
  805f6c:	000d883a 	mov	r6,zero
  805f70:	1009883a 	mov	r4,r2
  805f74:	180b883a 	mov	r5,r3
  805f78:	080b8e80 	call	80b8e8 <__adddf3>
  805f7c:	d9c00517 	ldw	r7,20(sp)
  805f80:	047f3034 	movhi	r17,64704
  805f84:	1021883a 	mov	r16,r2
  805f88:	39ffffc4 	addi	r7,r7,-1
  805f8c:	d9c01315 	stw	r7,76(sp)
  805f90:	1c63883a 	add	r17,r3,r17
  805f94:	db000c17 	ldw	r12,48(sp)
  805f98:	003bea06 	br	804f44 <__alt_mem_onchip_mem+0xff784f44>
  805f9c:	dc000915 	stw	r16,36(sp)
  805fa0:	003e0e06 	br	8057dc <__alt_mem_onchip_mem+0xff7857dc>
  805fa4:	01000e44 	movi	r4,57
  805fa8:	8825883a 	mov	r18,r17
  805fac:	9dc00044 	addi	r23,r19,1
  805fb0:	99000005 	stb	r4,0(r19)
  805fb4:	a023883a 	mov	r17,r20
  805fb8:	dc000915 	stw	r16,36(sp)
  805fbc:	003da406 	br	805650 <__alt_mem_onchip_mem+0xff785650>
  805fc0:	d9801417 	ldw	r6,80(sp)
  805fc4:	d9c01517 	ldw	r7,84(sp)
  805fc8:	0009883a 	mov	r4,zero
  805fcc:	014ff834 	movhi	r5,16352
  805fd0:	080d3ec0 	call	80d3ec <__subdf3>
  805fd4:	880d883a 	mov	r6,r17
  805fd8:	a00f883a 	mov	r7,r20
  805fdc:	1009883a 	mov	r4,r2
  805fe0:	180b883a 	mov	r5,r3
  805fe4:	080cb040 	call	80cb04 <__gedf2>
  805fe8:	00bc7c0e 	bge	zero,r2,8051dc <__alt_mem_onchip_mem+0xff7851dc>
  805fec:	01000c04 	movi	r4,48
  805ff0:	00000106 	br	805ff8 <_dtoa_r+0x1580>
  805ff4:	102f883a 	mov	r23,r2
  805ff8:	b8bfffc4 	addi	r2,r23,-1
  805ffc:	10c00007 	ldb	r3,0(r2)
  806000:	193ffc26 	beq	r3,r4,805ff4 <__alt_mem_onchip_mem+0xff785ff4>
  806004:	d9801317 	ldw	r6,76(sp)
  806008:	d9800515 	stw	r6,20(sp)
  80600c:	003c4406 	br	805120 <__alt_mem_onchip_mem+0xff785120>
  806010:	d9801317 	ldw	r6,76(sp)
  806014:	d9800515 	stw	r6,20(sp)
  806018:	003cea06 	br	8053c4 <__alt_mem_onchip_mem+0xff7853c4>
  80601c:	dd800f17 	ldw	r22,60(sp)
  806020:	dcc01017 	ldw	r19,64(sp)
  806024:	dc801217 	ldw	r18,72(sp)
  806028:	003c6c06 	br	8051dc <__alt_mem_onchip_mem+0xff7851dc>
  80602c:	903e031e 	bne	r18,zero,80583c <__alt_mem_onchip_mem+0xff78583c>
  806030:	003ebb06 	br	805b20 <__alt_mem_onchip_mem+0xff785b20>
  806034:	103e6c1e 	bne	r2,zero,8059e8 <__alt_mem_onchip_mem+0xff7859e8>
  806038:	4080004c 	andi	r2,r8,1
  80603c:	103e6a26 	beq	r2,zero,8059e8 <__alt_mem_onchip_mem+0xff7859e8>
  806040:	003e6606 	br	8059dc <__alt_mem_onchip_mem+0xff7859dc>
  806044:	d8c00317 	ldw	r3,12(sp)
  806048:	00800084 	movi	r2,2
  80604c:	10c02916 	blt	r2,r3,8060f4 <_dtoa_r+0x167c>
  806050:	d9000c17 	ldw	r4,48(sp)
  806054:	003e8806 	br	805a78 <__alt_mem_onchip_mem+0xff785a78>
  806058:	04000084 	movi	r16,2
  80605c:	003b9d06 	br	804ed4 <__alt_mem_onchip_mem+0xff784ed4>
  806060:	d9001317 	ldw	r4,76(sp)
  806064:	d9000515 	stw	r4,20(sp)
  806068:	003cd606 	br	8053c4 <__alt_mem_onchip_mem+0xff7853c4>
  80606c:	d8801317 	ldw	r2,76(sp)
  806070:	d8800515 	stw	r2,20(sp)
  806074:	003c2a06 	br	805120 <__alt_mem_onchip_mem+0xff785120>
  806078:	d9800317 	ldw	r6,12(sp)
  80607c:	00800084 	movi	r2,2
  806080:	11801516 	blt	r2,r6,8060d8 <_dtoa_r+0x1660>
  806084:	d9c00c17 	ldw	r7,48(sp)
  806088:	d9c00615 	stw	r7,24(sp)
  80608c:	003df706 	br	80586c <__alt_mem_onchip_mem+0xff78586c>
  806090:	193d3926 	beq	r3,r4,805578 <__alt_mem_onchip_mem+0xff785578>
  806094:	00c00f04 	movi	r3,60
  806098:	1885c83a 	sub	r2,r3,r2
  80609c:	003ddf06 	br	80581c <__alt_mem_onchip_mem+0xff78581c>
  8060a0:	e009883a 	mov	r4,fp
  8060a4:	e0001115 	stw	zero,68(fp)
  8060a8:	000b883a 	mov	r5,zero
  8060ac:	080716c0 	call	80716c <_Balloc>
  8060b0:	d8800715 	stw	r2,28(sp)
  8060b4:	d8c00717 	ldw	r3,28(sp)
  8060b8:	00bfffc4 	movi	r2,-1
  8060bc:	01000044 	movi	r4,1
  8060c0:	d8800c15 	stw	r2,48(sp)
  8060c4:	e0c01015 	stw	r3,64(fp)
  8060c8:	d9000b15 	stw	r4,44(sp)
  8060cc:	d8800615 	stw	r2,24(sp)
  8060d0:	d8002215 	stw	zero,136(sp)
  8060d4:	003c4106 	br	8051dc <__alt_mem_onchip_mem+0xff7851dc>
  8060d8:	d8c00c17 	ldw	r3,48(sp)
  8060dc:	d8c00615 	stw	r3,24(sp)
  8060e0:	003e7006 	br	805aa4 <__alt_mem_onchip_mem+0xff785aa4>
  8060e4:	04400044 	movi	r17,1
  8060e8:	003b2006 	br	804d6c <__alt_mem_onchip_mem+0xff784d6c>
  8060ec:	000b883a 	mov	r5,zero
  8060f0:	003b3d06 	br	804de8 <__alt_mem_onchip_mem+0xff784de8>
  8060f4:	d8800c17 	ldw	r2,48(sp)
  8060f8:	d8800615 	stw	r2,24(sp)
  8060fc:	003e6906 	br	805aa4 <__alt_mem_onchip_mem+0xff785aa4>

00806100 <__sflush_r>:
  806100:	2880030b 	ldhu	r2,12(r5)
  806104:	defffb04 	addi	sp,sp,-20
  806108:	dcc00315 	stw	r19,12(sp)
  80610c:	dc400115 	stw	r17,4(sp)
  806110:	dfc00415 	stw	ra,16(sp)
  806114:	dc800215 	stw	r18,8(sp)
  806118:	dc000015 	stw	r16,0(sp)
  80611c:	10c0020c 	andi	r3,r2,8
  806120:	2823883a 	mov	r17,r5
  806124:	2027883a 	mov	r19,r4
  806128:	1800311e 	bne	r3,zero,8061f0 <__sflush_r+0xf0>
  80612c:	28c00117 	ldw	r3,4(r5)
  806130:	10820014 	ori	r2,r2,2048
  806134:	2880030d 	sth	r2,12(r5)
  806138:	00c04b0e 	bge	zero,r3,806268 <__sflush_r+0x168>
  80613c:	8a000a17 	ldw	r8,40(r17)
  806140:	40002326 	beq	r8,zero,8061d0 <__sflush_r+0xd0>
  806144:	9c000017 	ldw	r16,0(r19)
  806148:	10c4000c 	andi	r3,r2,4096
  80614c:	98000015 	stw	zero,0(r19)
  806150:	18004826 	beq	r3,zero,806274 <__sflush_r+0x174>
  806154:	89801417 	ldw	r6,80(r17)
  806158:	10c0010c 	andi	r3,r2,4
  80615c:	18000626 	beq	r3,zero,806178 <__sflush_r+0x78>
  806160:	88c00117 	ldw	r3,4(r17)
  806164:	88800c17 	ldw	r2,48(r17)
  806168:	30cdc83a 	sub	r6,r6,r3
  80616c:	10000226 	beq	r2,zero,806178 <__sflush_r+0x78>
  806170:	88800f17 	ldw	r2,60(r17)
  806174:	308dc83a 	sub	r6,r6,r2
  806178:	89400717 	ldw	r5,28(r17)
  80617c:	000f883a 	mov	r7,zero
  806180:	9809883a 	mov	r4,r19
  806184:	403ee83a 	callr	r8
  806188:	00ffffc4 	movi	r3,-1
  80618c:	10c04426 	beq	r2,r3,8062a0 <__sflush_r+0x1a0>
  806190:	88c0030b 	ldhu	r3,12(r17)
  806194:	89000417 	ldw	r4,16(r17)
  806198:	88000115 	stw	zero,4(r17)
  80619c:	197dffcc 	andi	r5,r3,63487
  8061a0:	8940030d 	sth	r5,12(r17)
  8061a4:	89000015 	stw	r4,0(r17)
  8061a8:	18c4000c 	andi	r3,r3,4096
  8061ac:	18002c1e 	bne	r3,zero,806260 <__sflush_r+0x160>
  8061b0:	89400c17 	ldw	r5,48(r17)
  8061b4:	9c000015 	stw	r16,0(r19)
  8061b8:	28000526 	beq	r5,zero,8061d0 <__sflush_r+0xd0>
  8061bc:	88801004 	addi	r2,r17,64
  8061c0:	28800226 	beq	r5,r2,8061cc <__sflush_r+0xcc>
  8061c4:	9809883a 	mov	r4,r19
  8061c8:	08069180 	call	806918 <_free_r>
  8061cc:	88000c15 	stw	zero,48(r17)
  8061d0:	0005883a 	mov	r2,zero
  8061d4:	dfc00417 	ldw	ra,16(sp)
  8061d8:	dcc00317 	ldw	r19,12(sp)
  8061dc:	dc800217 	ldw	r18,8(sp)
  8061e0:	dc400117 	ldw	r17,4(sp)
  8061e4:	dc000017 	ldw	r16,0(sp)
  8061e8:	dec00504 	addi	sp,sp,20
  8061ec:	f800283a 	ret
  8061f0:	2c800417 	ldw	r18,16(r5)
  8061f4:	903ff626 	beq	r18,zero,8061d0 <__alt_mem_onchip_mem+0xff7861d0>
  8061f8:	2c000017 	ldw	r16,0(r5)
  8061fc:	108000cc 	andi	r2,r2,3
  806200:	2c800015 	stw	r18,0(r5)
  806204:	84a1c83a 	sub	r16,r16,r18
  806208:	1000131e 	bne	r2,zero,806258 <__sflush_r+0x158>
  80620c:	28800517 	ldw	r2,20(r5)
  806210:	88800215 	stw	r2,8(r17)
  806214:	04000316 	blt	zero,r16,806224 <__sflush_r+0x124>
  806218:	003fed06 	br	8061d0 <__alt_mem_onchip_mem+0xff7861d0>
  80621c:	90a5883a 	add	r18,r18,r2
  806220:	043feb0e 	bge	zero,r16,8061d0 <__alt_mem_onchip_mem+0xff7861d0>
  806224:	88800917 	ldw	r2,36(r17)
  806228:	89400717 	ldw	r5,28(r17)
  80622c:	800f883a 	mov	r7,r16
  806230:	900d883a 	mov	r6,r18
  806234:	9809883a 	mov	r4,r19
  806238:	103ee83a 	callr	r2
  80623c:	80a1c83a 	sub	r16,r16,r2
  806240:	00bff616 	blt	zero,r2,80621c <__alt_mem_onchip_mem+0xff78621c>
  806244:	88c0030b 	ldhu	r3,12(r17)
  806248:	00bfffc4 	movi	r2,-1
  80624c:	18c01014 	ori	r3,r3,64
  806250:	88c0030d 	sth	r3,12(r17)
  806254:	003fdf06 	br	8061d4 <__alt_mem_onchip_mem+0xff7861d4>
  806258:	0005883a 	mov	r2,zero
  80625c:	003fec06 	br	806210 <__alt_mem_onchip_mem+0xff786210>
  806260:	88801415 	stw	r2,80(r17)
  806264:	003fd206 	br	8061b0 <__alt_mem_onchip_mem+0xff7861b0>
  806268:	28c00f17 	ldw	r3,60(r5)
  80626c:	00ffb316 	blt	zero,r3,80613c <__alt_mem_onchip_mem+0xff78613c>
  806270:	003fd706 	br	8061d0 <__alt_mem_onchip_mem+0xff7861d0>
  806274:	89400717 	ldw	r5,28(r17)
  806278:	000d883a 	mov	r6,zero
  80627c:	01c00044 	movi	r7,1
  806280:	9809883a 	mov	r4,r19
  806284:	403ee83a 	callr	r8
  806288:	100d883a 	mov	r6,r2
  80628c:	00bfffc4 	movi	r2,-1
  806290:	30801426 	beq	r6,r2,8062e4 <__sflush_r+0x1e4>
  806294:	8880030b 	ldhu	r2,12(r17)
  806298:	8a000a17 	ldw	r8,40(r17)
  80629c:	003fae06 	br	806158 <__alt_mem_onchip_mem+0xff786158>
  8062a0:	98c00017 	ldw	r3,0(r19)
  8062a4:	183fba26 	beq	r3,zero,806190 <__alt_mem_onchip_mem+0xff786190>
  8062a8:	01000744 	movi	r4,29
  8062ac:	19000626 	beq	r3,r4,8062c8 <__sflush_r+0x1c8>
  8062b0:	01000584 	movi	r4,22
  8062b4:	19000426 	beq	r3,r4,8062c8 <__sflush_r+0x1c8>
  8062b8:	88c0030b 	ldhu	r3,12(r17)
  8062bc:	18c01014 	ori	r3,r3,64
  8062c0:	88c0030d 	sth	r3,12(r17)
  8062c4:	003fc306 	br	8061d4 <__alt_mem_onchip_mem+0xff7861d4>
  8062c8:	8880030b 	ldhu	r2,12(r17)
  8062cc:	88c00417 	ldw	r3,16(r17)
  8062d0:	88000115 	stw	zero,4(r17)
  8062d4:	10bdffcc 	andi	r2,r2,63487
  8062d8:	8880030d 	sth	r2,12(r17)
  8062dc:	88c00015 	stw	r3,0(r17)
  8062e0:	003fb306 	br	8061b0 <__alt_mem_onchip_mem+0xff7861b0>
  8062e4:	98800017 	ldw	r2,0(r19)
  8062e8:	103fea26 	beq	r2,zero,806294 <__alt_mem_onchip_mem+0xff786294>
  8062ec:	00c00744 	movi	r3,29
  8062f0:	10c00226 	beq	r2,r3,8062fc <__sflush_r+0x1fc>
  8062f4:	00c00584 	movi	r3,22
  8062f8:	10c0031e 	bne	r2,r3,806308 <__sflush_r+0x208>
  8062fc:	9c000015 	stw	r16,0(r19)
  806300:	0005883a 	mov	r2,zero
  806304:	003fb306 	br	8061d4 <__alt_mem_onchip_mem+0xff7861d4>
  806308:	88c0030b 	ldhu	r3,12(r17)
  80630c:	3005883a 	mov	r2,r6
  806310:	18c01014 	ori	r3,r3,64
  806314:	88c0030d 	sth	r3,12(r17)
  806318:	003fae06 	br	8061d4 <__alt_mem_onchip_mem+0xff7861d4>

0080631c <_fflush_r>:
  80631c:	defffd04 	addi	sp,sp,-12
  806320:	dc000115 	stw	r16,4(sp)
  806324:	dfc00215 	stw	ra,8(sp)
  806328:	2021883a 	mov	r16,r4
  80632c:	20000226 	beq	r4,zero,806338 <_fflush_r+0x1c>
  806330:	20800e17 	ldw	r2,56(r4)
  806334:	10000c26 	beq	r2,zero,806368 <_fflush_r+0x4c>
  806338:	2880030f 	ldh	r2,12(r5)
  80633c:	1000051e 	bne	r2,zero,806354 <_fflush_r+0x38>
  806340:	0005883a 	mov	r2,zero
  806344:	dfc00217 	ldw	ra,8(sp)
  806348:	dc000117 	ldw	r16,4(sp)
  80634c:	dec00304 	addi	sp,sp,12
  806350:	f800283a 	ret
  806354:	8009883a 	mov	r4,r16
  806358:	dfc00217 	ldw	ra,8(sp)
  80635c:	dc000117 	ldw	r16,4(sp)
  806360:	dec00304 	addi	sp,sp,12
  806364:	08061001 	jmpi	806100 <__sflush_r>
  806368:	d9400015 	stw	r5,0(sp)
  80636c:	08066f80 	call	8066f8 <__sinit>
  806370:	d9400017 	ldw	r5,0(sp)
  806374:	003ff006 	br	806338 <__alt_mem_onchip_mem+0xff786338>

00806378 <fflush>:
  806378:	20000526 	beq	r4,zero,806390 <fflush+0x18>
  80637c:	00802074 	movhi	r2,129
  806380:	10912504 	addi	r2,r2,17556
  806384:	200b883a 	mov	r5,r4
  806388:	11000017 	ldw	r4,0(r2)
  80638c:	080631c1 	jmpi	80631c <_fflush_r>
  806390:	00802074 	movhi	r2,129
  806394:	10912404 	addi	r2,r2,17552
  806398:	11000017 	ldw	r4,0(r2)
  80639c:	01402034 	movhi	r5,128
  8063a0:	2958c704 	addi	r5,r5,25372
  8063a4:	0806cec1 	jmpi	806cec <_fwalk_reent>

008063a8 <__fp_unlock>:
  8063a8:	0005883a 	mov	r2,zero
  8063ac:	f800283a 	ret

008063b0 <_cleanup_r>:
  8063b0:	01402074 	movhi	r5,129
  8063b4:	2966af04 	addi	r5,r5,-25924
  8063b8:	0806cec1 	jmpi	806cec <_fwalk_reent>

008063bc <__sinit.part.1>:
  8063bc:	defff704 	addi	sp,sp,-36
  8063c0:	00c02034 	movhi	r3,128
  8063c4:	dfc00815 	stw	ra,32(sp)
  8063c8:	ddc00715 	stw	r23,28(sp)
  8063cc:	dd800615 	stw	r22,24(sp)
  8063d0:	dd400515 	stw	r21,20(sp)
  8063d4:	dd000415 	stw	r20,16(sp)
  8063d8:	dcc00315 	stw	r19,12(sp)
  8063dc:	dc800215 	stw	r18,8(sp)
  8063e0:	dc400115 	stw	r17,4(sp)
  8063e4:	dc000015 	stw	r16,0(sp)
  8063e8:	18d8ec04 	addi	r3,r3,25520
  8063ec:	24000117 	ldw	r16,4(r4)
  8063f0:	20c00f15 	stw	r3,60(r4)
  8063f4:	2080bb04 	addi	r2,r4,748
  8063f8:	00c000c4 	movi	r3,3
  8063fc:	20c0b915 	stw	r3,740(r4)
  806400:	2080ba15 	stw	r2,744(r4)
  806404:	2000b815 	stw	zero,736(r4)
  806408:	05c00204 	movi	r23,8
  80640c:	00800104 	movi	r2,4
  806410:	2025883a 	mov	r18,r4
  806414:	b80d883a 	mov	r6,r23
  806418:	81001704 	addi	r4,r16,92
  80641c:	000b883a 	mov	r5,zero
  806420:	80000015 	stw	zero,0(r16)
  806424:	80000115 	stw	zero,4(r16)
  806428:	80000215 	stw	zero,8(r16)
  80642c:	8080030d 	sth	r2,12(r16)
  806430:	80001915 	stw	zero,100(r16)
  806434:	8000038d 	sth	zero,14(r16)
  806438:	80000415 	stw	zero,16(r16)
  80643c:	80000515 	stw	zero,20(r16)
  806440:	80000615 	stw	zero,24(r16)
  806444:	0801e2c0 	call	801e2c <memset>
  806448:	05802034 	movhi	r22,128
  80644c:	94400217 	ldw	r17,8(r18)
  806450:	05402034 	movhi	r21,128
  806454:	05002034 	movhi	r20,128
  806458:	04c02034 	movhi	r19,128
  80645c:	b5889904 	addi	r22,r22,8804
  806460:	ad48b004 	addi	r21,r21,8896
  806464:	a508cf04 	addi	r20,r20,9020
  806468:	9cc8e604 	addi	r19,r19,9112
  80646c:	85800815 	stw	r22,32(r16)
  806470:	85400915 	stw	r21,36(r16)
  806474:	85000a15 	stw	r20,40(r16)
  806478:	84c00b15 	stw	r19,44(r16)
  80647c:	84000715 	stw	r16,28(r16)
  806480:	00800284 	movi	r2,10
  806484:	8880030d 	sth	r2,12(r17)
  806488:	00800044 	movi	r2,1
  80648c:	b80d883a 	mov	r6,r23
  806490:	89001704 	addi	r4,r17,92
  806494:	000b883a 	mov	r5,zero
  806498:	88000015 	stw	zero,0(r17)
  80649c:	88000115 	stw	zero,4(r17)
  8064a0:	88000215 	stw	zero,8(r17)
  8064a4:	88001915 	stw	zero,100(r17)
  8064a8:	8880038d 	sth	r2,14(r17)
  8064ac:	88000415 	stw	zero,16(r17)
  8064b0:	88000515 	stw	zero,20(r17)
  8064b4:	88000615 	stw	zero,24(r17)
  8064b8:	0801e2c0 	call	801e2c <memset>
  8064bc:	94000317 	ldw	r16,12(r18)
  8064c0:	00800484 	movi	r2,18
  8064c4:	8c400715 	stw	r17,28(r17)
  8064c8:	8d800815 	stw	r22,32(r17)
  8064cc:	8d400915 	stw	r21,36(r17)
  8064d0:	8d000a15 	stw	r20,40(r17)
  8064d4:	8cc00b15 	stw	r19,44(r17)
  8064d8:	8080030d 	sth	r2,12(r16)
  8064dc:	00800084 	movi	r2,2
  8064e0:	80000015 	stw	zero,0(r16)
  8064e4:	80000115 	stw	zero,4(r16)
  8064e8:	80000215 	stw	zero,8(r16)
  8064ec:	80001915 	stw	zero,100(r16)
  8064f0:	8080038d 	sth	r2,14(r16)
  8064f4:	80000415 	stw	zero,16(r16)
  8064f8:	80000515 	stw	zero,20(r16)
  8064fc:	80000615 	stw	zero,24(r16)
  806500:	b80d883a 	mov	r6,r23
  806504:	000b883a 	mov	r5,zero
  806508:	81001704 	addi	r4,r16,92
  80650c:	0801e2c0 	call	801e2c <memset>
  806510:	00800044 	movi	r2,1
  806514:	84000715 	stw	r16,28(r16)
  806518:	85800815 	stw	r22,32(r16)
  80651c:	85400915 	stw	r21,36(r16)
  806520:	85000a15 	stw	r20,40(r16)
  806524:	84c00b15 	stw	r19,44(r16)
  806528:	90800e15 	stw	r2,56(r18)
  80652c:	dfc00817 	ldw	ra,32(sp)
  806530:	ddc00717 	ldw	r23,28(sp)
  806534:	dd800617 	ldw	r22,24(sp)
  806538:	dd400517 	ldw	r21,20(sp)
  80653c:	dd000417 	ldw	r20,16(sp)
  806540:	dcc00317 	ldw	r19,12(sp)
  806544:	dc800217 	ldw	r18,8(sp)
  806548:	dc400117 	ldw	r17,4(sp)
  80654c:	dc000017 	ldw	r16,0(sp)
  806550:	dec00904 	addi	sp,sp,36
  806554:	f800283a 	ret

00806558 <__fp_lock>:
  806558:	0005883a 	mov	r2,zero
  80655c:	f800283a 	ret

00806560 <__sfmoreglue>:
  806560:	defffc04 	addi	sp,sp,-16
  806564:	dc400115 	stw	r17,4(sp)
  806568:	2c7fffc4 	addi	r17,r5,-1
  80656c:	8c401a24 	muli	r17,r17,104
  806570:	dc800215 	stw	r18,8(sp)
  806574:	2825883a 	mov	r18,r5
  806578:	89401d04 	addi	r5,r17,116
  80657c:	dc000015 	stw	r16,0(sp)
  806580:	dfc00315 	stw	ra,12(sp)
  806584:	08016200 	call	801620 <_malloc_r>
  806588:	1021883a 	mov	r16,r2
  80658c:	10000726 	beq	r2,zero,8065ac <__sfmoreglue+0x4c>
  806590:	11000304 	addi	r4,r2,12
  806594:	10000015 	stw	zero,0(r2)
  806598:	14800115 	stw	r18,4(r2)
  80659c:	11000215 	stw	r4,8(r2)
  8065a0:	89801a04 	addi	r6,r17,104
  8065a4:	000b883a 	mov	r5,zero
  8065a8:	0801e2c0 	call	801e2c <memset>
  8065ac:	8005883a 	mov	r2,r16
  8065b0:	dfc00317 	ldw	ra,12(sp)
  8065b4:	dc800217 	ldw	r18,8(sp)
  8065b8:	dc400117 	ldw	r17,4(sp)
  8065bc:	dc000017 	ldw	r16,0(sp)
  8065c0:	dec00404 	addi	sp,sp,16
  8065c4:	f800283a 	ret

008065c8 <__sfp>:
  8065c8:	defffb04 	addi	sp,sp,-20
  8065cc:	dc000015 	stw	r16,0(sp)
  8065d0:	04002074 	movhi	r16,129
  8065d4:	84112404 	addi	r16,r16,17552
  8065d8:	dcc00315 	stw	r19,12(sp)
  8065dc:	2027883a 	mov	r19,r4
  8065e0:	81000017 	ldw	r4,0(r16)
  8065e4:	dfc00415 	stw	ra,16(sp)
  8065e8:	dc800215 	stw	r18,8(sp)
  8065ec:	20800e17 	ldw	r2,56(r4)
  8065f0:	dc400115 	stw	r17,4(sp)
  8065f4:	1000021e 	bne	r2,zero,806600 <__sfp+0x38>
  8065f8:	08063bc0 	call	8063bc <__sinit.part.1>
  8065fc:	81000017 	ldw	r4,0(r16)
  806600:	2480b804 	addi	r18,r4,736
  806604:	047fffc4 	movi	r17,-1
  806608:	91000117 	ldw	r4,4(r18)
  80660c:	94000217 	ldw	r16,8(r18)
  806610:	213fffc4 	addi	r4,r4,-1
  806614:	20000a16 	blt	r4,zero,806640 <__sfp+0x78>
  806618:	8080030f 	ldh	r2,12(r16)
  80661c:	10000c26 	beq	r2,zero,806650 <__sfp+0x88>
  806620:	80c01d04 	addi	r3,r16,116
  806624:	00000206 	br	806630 <__sfp+0x68>
  806628:	18bfe60f 	ldh	r2,-104(r3)
  80662c:	10000826 	beq	r2,zero,806650 <__sfp+0x88>
  806630:	213fffc4 	addi	r4,r4,-1
  806634:	1c3ffd04 	addi	r16,r3,-12
  806638:	18c01a04 	addi	r3,r3,104
  80663c:	247ffa1e 	bne	r4,r17,806628 <__alt_mem_onchip_mem+0xff786628>
  806640:	90800017 	ldw	r2,0(r18)
  806644:	10001d26 	beq	r2,zero,8066bc <__sfp+0xf4>
  806648:	1025883a 	mov	r18,r2
  80664c:	003fee06 	br	806608 <__alt_mem_onchip_mem+0xff786608>
  806650:	00bfffc4 	movi	r2,-1
  806654:	8080038d 	sth	r2,14(r16)
  806658:	00800044 	movi	r2,1
  80665c:	8080030d 	sth	r2,12(r16)
  806660:	80001915 	stw	zero,100(r16)
  806664:	80000015 	stw	zero,0(r16)
  806668:	80000215 	stw	zero,8(r16)
  80666c:	80000115 	stw	zero,4(r16)
  806670:	80000415 	stw	zero,16(r16)
  806674:	80000515 	stw	zero,20(r16)
  806678:	80000615 	stw	zero,24(r16)
  80667c:	01800204 	movi	r6,8
  806680:	000b883a 	mov	r5,zero
  806684:	81001704 	addi	r4,r16,92
  806688:	0801e2c0 	call	801e2c <memset>
  80668c:	8005883a 	mov	r2,r16
  806690:	80000c15 	stw	zero,48(r16)
  806694:	80000d15 	stw	zero,52(r16)
  806698:	80001115 	stw	zero,68(r16)
  80669c:	80001215 	stw	zero,72(r16)
  8066a0:	dfc00417 	ldw	ra,16(sp)
  8066a4:	dcc00317 	ldw	r19,12(sp)
  8066a8:	dc800217 	ldw	r18,8(sp)
  8066ac:	dc400117 	ldw	r17,4(sp)
  8066b0:	dc000017 	ldw	r16,0(sp)
  8066b4:	dec00504 	addi	sp,sp,20
  8066b8:	f800283a 	ret
  8066bc:	01400104 	movi	r5,4
  8066c0:	9809883a 	mov	r4,r19
  8066c4:	08065600 	call	806560 <__sfmoreglue>
  8066c8:	90800015 	stw	r2,0(r18)
  8066cc:	103fde1e 	bne	r2,zero,806648 <__alt_mem_onchip_mem+0xff786648>
  8066d0:	00800304 	movi	r2,12
  8066d4:	98800015 	stw	r2,0(r19)
  8066d8:	0005883a 	mov	r2,zero
  8066dc:	003ff006 	br	8066a0 <__alt_mem_onchip_mem+0xff7866a0>

008066e0 <_cleanup>:
  8066e0:	00802074 	movhi	r2,129
  8066e4:	10912404 	addi	r2,r2,17552
  8066e8:	11000017 	ldw	r4,0(r2)
  8066ec:	01402074 	movhi	r5,129
  8066f0:	2966af04 	addi	r5,r5,-25924
  8066f4:	0806cec1 	jmpi	806cec <_fwalk_reent>

008066f8 <__sinit>:
  8066f8:	20800e17 	ldw	r2,56(r4)
  8066fc:	10000126 	beq	r2,zero,806704 <__sinit+0xc>
  806700:	f800283a 	ret
  806704:	08063bc1 	jmpi	8063bc <__sinit.part.1>

00806708 <__sfp_lock_acquire>:
  806708:	f800283a 	ret

0080670c <__sfp_lock_release>:
  80670c:	f800283a 	ret

00806710 <__sinit_lock_acquire>:
  806710:	f800283a 	ret

00806714 <__sinit_lock_release>:
  806714:	f800283a 	ret

00806718 <__fp_lock_all>:
  806718:	00802074 	movhi	r2,129
  80671c:	10912504 	addi	r2,r2,17556
  806720:	11000017 	ldw	r4,0(r2)
  806724:	01402034 	movhi	r5,128
  806728:	29595604 	addi	r5,r5,25944
  80672c:	0806c281 	jmpi	806c28 <_fwalk>

00806730 <__fp_unlock_all>:
  806730:	00802074 	movhi	r2,129
  806734:	10912504 	addi	r2,r2,17556
  806738:	11000017 	ldw	r4,0(r2)
  80673c:	01402034 	movhi	r5,128
  806740:	2958ea04 	addi	r5,r5,25512
  806744:	0806c281 	jmpi	806c28 <_fwalk>

00806748 <__sflags>:
  806748:	28800007 	ldb	r2,0(r5)
  80674c:	00c01c84 	movi	r3,114
  806750:	10c02426 	beq	r2,r3,8067e4 <__sflags+0x9c>
  806754:	00c01dc4 	movi	r3,119
  806758:	10c01e26 	beq	r2,r3,8067d4 <__sflags+0x8c>
  80675c:	00c01844 	movi	r3,97
  806760:	10c00426 	beq	r2,r3,806774 <__sflags+0x2c>
  806764:	00800584 	movi	r2,22
  806768:	20800015 	stw	r2,0(r4)
  80676c:	0005883a 	mov	r2,zero
  806770:	f800283a 	ret
  806774:	02c08204 	movi	r11,520
  806778:	01000044 	movi	r4,1
  80677c:	00804204 	movi	r2,264
  806780:	01c00ac4 	movi	r7,43
  806784:	02bff8c4 	movi	r10,-29
  806788:	027fff04 	movi	r9,-4
  80678c:	02001e04 	movi	r8,120
  806790:	29400044 	addi	r5,r5,1
  806794:	28c00007 	ldb	r3,0(r5)
  806798:	18000626 	beq	r3,zero,8067b4 <__sflags+0x6c>
  80679c:	19c00826 	beq	r3,r7,8067c0 <__sflags+0x78>
  8067a0:	1a3ffb1e 	bne	r3,r8,806790 <__alt_mem_onchip_mem+0xff786790>
  8067a4:	29400044 	addi	r5,r5,1
  8067a8:	28c00007 	ldb	r3,0(r5)
  8067ac:	21020014 	ori	r4,r4,2048
  8067b0:	183ffa1e 	bne	r3,zero,80679c <__alt_mem_onchip_mem+0xff78679c>
  8067b4:	22c8b03a 	or	r4,r4,r11
  8067b8:	31000015 	stw	r4,0(r6)
  8067bc:	f800283a 	ret
  8067c0:	1284703a 	and	r2,r2,r10
  8067c4:	2248703a 	and	r4,r4,r9
  8067c8:	10800414 	ori	r2,r2,16
  8067cc:	21000094 	ori	r4,r4,2
  8067d0:	003fef06 	br	806790 <__alt_mem_onchip_mem+0xff786790>
  8067d4:	02c18004 	movi	r11,1536
  8067d8:	01000044 	movi	r4,1
  8067dc:	00800204 	movi	r2,8
  8067e0:	003fe706 	br	806780 <__alt_mem_onchip_mem+0xff786780>
  8067e4:	0017883a 	mov	r11,zero
  8067e8:	0009883a 	mov	r4,zero
  8067ec:	00800104 	movi	r2,4
  8067f0:	003fe306 	br	806780 <__alt_mem_onchip_mem+0xff786780>

008067f4 <_malloc_trim_r>:
  8067f4:	defffb04 	addi	sp,sp,-20
  8067f8:	dcc00315 	stw	r19,12(sp)
  8067fc:	04c02074 	movhi	r19,129
  806800:	dc800215 	stw	r18,8(sp)
  806804:	dc400115 	stw	r17,4(sp)
  806808:	dc000015 	stw	r16,0(sp)
  80680c:	dfc00415 	stw	ra,16(sp)
  806810:	2821883a 	mov	r16,r5
  806814:	9ccb0704 	addi	r19,r19,11292
  806818:	2025883a 	mov	r18,r4
  80681c:	080e7780 	call	80e778 <__malloc_lock>
  806820:	98800217 	ldw	r2,8(r19)
  806824:	14400117 	ldw	r17,4(r2)
  806828:	00bfff04 	movi	r2,-4
  80682c:	88a2703a 	and	r17,r17,r2
  806830:	8c21c83a 	sub	r16,r17,r16
  806834:	8403fbc4 	addi	r16,r16,4079
  806838:	8020d33a 	srli	r16,r16,12
  80683c:	0083ffc4 	movi	r2,4095
  806840:	843fffc4 	addi	r16,r16,-1
  806844:	8020933a 	slli	r16,r16,12
  806848:	1400060e 	bge	r2,r16,806864 <_malloc_trim_r+0x70>
  80684c:	000b883a 	mov	r5,zero
  806850:	9009883a 	mov	r4,r18
  806854:	08022100 	call	802210 <_sbrk_r>
  806858:	98c00217 	ldw	r3,8(r19)
  80685c:	1c47883a 	add	r3,r3,r17
  806860:	10c00a26 	beq	r2,r3,80688c <_malloc_trim_r+0x98>
  806864:	9009883a 	mov	r4,r18
  806868:	080e79c0 	call	80e79c <__malloc_unlock>
  80686c:	0005883a 	mov	r2,zero
  806870:	dfc00417 	ldw	ra,16(sp)
  806874:	dcc00317 	ldw	r19,12(sp)
  806878:	dc800217 	ldw	r18,8(sp)
  80687c:	dc400117 	ldw	r17,4(sp)
  806880:	dc000017 	ldw	r16,0(sp)
  806884:	dec00504 	addi	sp,sp,20
  806888:	f800283a 	ret
  80688c:	040bc83a 	sub	r5,zero,r16
  806890:	9009883a 	mov	r4,r18
  806894:	08022100 	call	802210 <_sbrk_r>
  806898:	00ffffc4 	movi	r3,-1
  80689c:	10c00d26 	beq	r2,r3,8068d4 <_malloc_trim_r+0xe0>
  8068a0:	00c02074 	movhi	r3,129
  8068a4:	18d88904 	addi	r3,r3,25124
  8068a8:	18800017 	ldw	r2,0(r3)
  8068ac:	99000217 	ldw	r4,8(r19)
  8068b0:	8c23c83a 	sub	r17,r17,r16
  8068b4:	8c400054 	ori	r17,r17,1
  8068b8:	1421c83a 	sub	r16,r2,r16
  8068bc:	24400115 	stw	r17,4(r4)
  8068c0:	9009883a 	mov	r4,r18
  8068c4:	1c000015 	stw	r16,0(r3)
  8068c8:	080e79c0 	call	80e79c <__malloc_unlock>
  8068cc:	00800044 	movi	r2,1
  8068d0:	003fe706 	br	806870 <__alt_mem_onchip_mem+0xff786870>
  8068d4:	000b883a 	mov	r5,zero
  8068d8:	9009883a 	mov	r4,r18
  8068dc:	08022100 	call	802210 <_sbrk_r>
  8068e0:	99000217 	ldw	r4,8(r19)
  8068e4:	014003c4 	movi	r5,15
  8068e8:	1107c83a 	sub	r3,r2,r4
  8068ec:	28ffdd0e 	bge	r5,r3,806864 <__alt_mem_onchip_mem+0xff786864>
  8068f0:	01402074 	movhi	r5,129
  8068f4:	29512604 	addi	r5,r5,17560
  8068f8:	29400017 	ldw	r5,0(r5)
  8068fc:	18c00054 	ori	r3,r3,1
  806900:	20c00115 	stw	r3,4(r4)
  806904:	00c02074 	movhi	r3,129
  806908:	1145c83a 	sub	r2,r2,r5
  80690c:	18d88904 	addi	r3,r3,25124
  806910:	18800015 	stw	r2,0(r3)
  806914:	003fd306 	br	806864 <__alt_mem_onchip_mem+0xff786864>

00806918 <_free_r>:
  806918:	28004126 	beq	r5,zero,806a20 <_free_r+0x108>
  80691c:	defffd04 	addi	sp,sp,-12
  806920:	dc400115 	stw	r17,4(sp)
  806924:	dc000015 	stw	r16,0(sp)
  806928:	2023883a 	mov	r17,r4
  80692c:	2821883a 	mov	r16,r5
  806930:	dfc00215 	stw	ra,8(sp)
  806934:	080e7780 	call	80e778 <__malloc_lock>
  806938:	81ffff17 	ldw	r7,-4(r16)
  80693c:	00bfff84 	movi	r2,-2
  806940:	01002074 	movhi	r4,129
  806944:	81bffe04 	addi	r6,r16,-8
  806948:	3884703a 	and	r2,r7,r2
  80694c:	210b0704 	addi	r4,r4,11292
  806950:	308b883a 	add	r5,r6,r2
  806954:	2a400117 	ldw	r9,4(r5)
  806958:	22000217 	ldw	r8,8(r4)
  80695c:	00ffff04 	movi	r3,-4
  806960:	48c6703a 	and	r3,r9,r3
  806964:	2a005726 	beq	r5,r8,806ac4 <_free_r+0x1ac>
  806968:	28c00115 	stw	r3,4(r5)
  80696c:	39c0004c 	andi	r7,r7,1
  806970:	3800091e 	bne	r7,zero,806998 <_free_r+0x80>
  806974:	823ffe17 	ldw	r8,-8(r16)
  806978:	22400204 	addi	r9,r4,8
  80697c:	320dc83a 	sub	r6,r6,r8
  806980:	31c00217 	ldw	r7,8(r6)
  806984:	1205883a 	add	r2,r2,r8
  806988:	3a406526 	beq	r7,r9,806b20 <_free_r+0x208>
  80698c:	32000317 	ldw	r8,12(r6)
  806990:	3a000315 	stw	r8,12(r7)
  806994:	41c00215 	stw	r7,8(r8)
  806998:	28cf883a 	add	r7,r5,r3
  80699c:	39c00117 	ldw	r7,4(r7)
  8069a0:	39c0004c 	andi	r7,r7,1
  8069a4:	38003a26 	beq	r7,zero,806a90 <_free_r+0x178>
  8069a8:	10c00054 	ori	r3,r2,1
  8069ac:	30c00115 	stw	r3,4(r6)
  8069b0:	3087883a 	add	r3,r6,r2
  8069b4:	18800015 	stw	r2,0(r3)
  8069b8:	00c07fc4 	movi	r3,511
  8069bc:	18801936 	bltu	r3,r2,806a24 <_free_r+0x10c>
  8069c0:	1004d0fa 	srli	r2,r2,3
  8069c4:	01c00044 	movi	r7,1
  8069c8:	21400117 	ldw	r5,4(r4)
  8069cc:	10c00044 	addi	r3,r2,1
  8069d0:	18c7883a 	add	r3,r3,r3
  8069d4:	1005d0ba 	srai	r2,r2,2
  8069d8:	18c7883a 	add	r3,r3,r3
  8069dc:	18c7883a 	add	r3,r3,r3
  8069e0:	1907883a 	add	r3,r3,r4
  8069e4:	3884983a 	sll	r2,r7,r2
  8069e8:	19c00017 	ldw	r7,0(r3)
  8069ec:	1a3ffe04 	addi	r8,r3,-8
  8069f0:	1144b03a 	or	r2,r2,r5
  8069f4:	32000315 	stw	r8,12(r6)
  8069f8:	31c00215 	stw	r7,8(r6)
  8069fc:	20800115 	stw	r2,4(r4)
  806a00:	19800015 	stw	r6,0(r3)
  806a04:	39800315 	stw	r6,12(r7)
  806a08:	8809883a 	mov	r4,r17
  806a0c:	dfc00217 	ldw	ra,8(sp)
  806a10:	dc400117 	ldw	r17,4(sp)
  806a14:	dc000017 	ldw	r16,0(sp)
  806a18:	dec00304 	addi	sp,sp,12
  806a1c:	080e79c1 	jmpi	80e79c <__malloc_unlock>
  806a20:	f800283a 	ret
  806a24:	100ad27a 	srli	r5,r2,9
  806a28:	00c00104 	movi	r3,4
  806a2c:	19404a36 	bltu	r3,r5,806b58 <_free_r+0x240>
  806a30:	100ad1ba 	srli	r5,r2,6
  806a34:	28c00e44 	addi	r3,r5,57
  806a38:	18c7883a 	add	r3,r3,r3
  806a3c:	29400e04 	addi	r5,r5,56
  806a40:	18c7883a 	add	r3,r3,r3
  806a44:	18c7883a 	add	r3,r3,r3
  806a48:	1909883a 	add	r4,r3,r4
  806a4c:	20c00017 	ldw	r3,0(r4)
  806a50:	01c02074 	movhi	r7,129
  806a54:	213ffe04 	addi	r4,r4,-8
  806a58:	39cb0704 	addi	r7,r7,11292
  806a5c:	20c04426 	beq	r4,r3,806b70 <_free_r+0x258>
  806a60:	01ffff04 	movi	r7,-4
  806a64:	19400117 	ldw	r5,4(r3)
  806a68:	29ca703a 	and	r5,r5,r7
  806a6c:	1140022e 	bgeu	r2,r5,806a78 <_free_r+0x160>
  806a70:	18c00217 	ldw	r3,8(r3)
  806a74:	20fffb1e 	bne	r4,r3,806a64 <__alt_mem_onchip_mem+0xff786a64>
  806a78:	19000317 	ldw	r4,12(r3)
  806a7c:	31000315 	stw	r4,12(r6)
  806a80:	30c00215 	stw	r3,8(r6)
  806a84:	21800215 	stw	r6,8(r4)
  806a88:	19800315 	stw	r6,12(r3)
  806a8c:	003fde06 	br	806a08 <__alt_mem_onchip_mem+0xff786a08>
  806a90:	29c00217 	ldw	r7,8(r5)
  806a94:	10c5883a 	add	r2,r2,r3
  806a98:	00c02074 	movhi	r3,129
  806a9c:	18cb0904 	addi	r3,r3,11300
  806aa0:	38c03b26 	beq	r7,r3,806b90 <_free_r+0x278>
  806aa4:	2a000317 	ldw	r8,12(r5)
  806aa8:	11400054 	ori	r5,r2,1
  806aac:	3087883a 	add	r3,r6,r2
  806ab0:	3a000315 	stw	r8,12(r7)
  806ab4:	41c00215 	stw	r7,8(r8)
  806ab8:	31400115 	stw	r5,4(r6)
  806abc:	18800015 	stw	r2,0(r3)
  806ac0:	003fbd06 	br	8069b8 <__alt_mem_onchip_mem+0xff7869b8>
  806ac4:	39c0004c 	andi	r7,r7,1
  806ac8:	10c5883a 	add	r2,r2,r3
  806acc:	3800071e 	bne	r7,zero,806aec <_free_r+0x1d4>
  806ad0:	81fffe17 	ldw	r7,-8(r16)
  806ad4:	31cdc83a 	sub	r6,r6,r7
  806ad8:	30c00317 	ldw	r3,12(r6)
  806adc:	31400217 	ldw	r5,8(r6)
  806ae0:	11c5883a 	add	r2,r2,r7
  806ae4:	28c00315 	stw	r3,12(r5)
  806ae8:	19400215 	stw	r5,8(r3)
  806aec:	10c00054 	ori	r3,r2,1
  806af0:	30c00115 	stw	r3,4(r6)
  806af4:	00c02074 	movhi	r3,129
  806af8:	18d12704 	addi	r3,r3,17564
  806afc:	18c00017 	ldw	r3,0(r3)
  806b00:	21800215 	stw	r6,8(r4)
  806b04:	10ffc036 	bltu	r2,r3,806a08 <__alt_mem_onchip_mem+0xff786a08>
  806b08:	00802074 	movhi	r2,129
  806b0c:	10987e04 	addi	r2,r2,25080
  806b10:	11400017 	ldw	r5,0(r2)
  806b14:	8809883a 	mov	r4,r17
  806b18:	08067f40 	call	8067f4 <_malloc_trim_r>
  806b1c:	003fba06 	br	806a08 <__alt_mem_onchip_mem+0xff786a08>
  806b20:	28c9883a 	add	r4,r5,r3
  806b24:	21000117 	ldw	r4,4(r4)
  806b28:	2100004c 	andi	r4,r4,1
  806b2c:	2000391e 	bne	r4,zero,806c14 <_free_r+0x2fc>
  806b30:	29c00217 	ldw	r7,8(r5)
  806b34:	29000317 	ldw	r4,12(r5)
  806b38:	1885883a 	add	r2,r3,r2
  806b3c:	10c00054 	ori	r3,r2,1
  806b40:	39000315 	stw	r4,12(r7)
  806b44:	21c00215 	stw	r7,8(r4)
  806b48:	30c00115 	stw	r3,4(r6)
  806b4c:	308d883a 	add	r6,r6,r2
  806b50:	30800015 	stw	r2,0(r6)
  806b54:	003fac06 	br	806a08 <__alt_mem_onchip_mem+0xff786a08>
  806b58:	00c00504 	movi	r3,20
  806b5c:	19401536 	bltu	r3,r5,806bb4 <_free_r+0x29c>
  806b60:	28c01704 	addi	r3,r5,92
  806b64:	18c7883a 	add	r3,r3,r3
  806b68:	294016c4 	addi	r5,r5,91
  806b6c:	003fb406 	br	806a40 <__alt_mem_onchip_mem+0xff786a40>
  806b70:	280bd0ba 	srai	r5,r5,2
  806b74:	00c00044 	movi	r3,1
  806b78:	38800117 	ldw	r2,4(r7)
  806b7c:	194a983a 	sll	r5,r3,r5
  806b80:	2007883a 	mov	r3,r4
  806b84:	2884b03a 	or	r2,r5,r2
  806b88:	38800115 	stw	r2,4(r7)
  806b8c:	003fbb06 	br	806a7c <__alt_mem_onchip_mem+0xff786a7c>
  806b90:	21800515 	stw	r6,20(r4)
  806b94:	21800415 	stw	r6,16(r4)
  806b98:	10c00054 	ori	r3,r2,1
  806b9c:	31c00315 	stw	r7,12(r6)
  806ba0:	31c00215 	stw	r7,8(r6)
  806ba4:	30c00115 	stw	r3,4(r6)
  806ba8:	308d883a 	add	r6,r6,r2
  806bac:	30800015 	stw	r2,0(r6)
  806bb0:	003f9506 	br	806a08 <__alt_mem_onchip_mem+0xff786a08>
  806bb4:	00c01504 	movi	r3,84
  806bb8:	19400536 	bltu	r3,r5,806bd0 <_free_r+0x2b8>
  806bbc:	100ad33a 	srli	r5,r2,12
  806bc0:	28c01bc4 	addi	r3,r5,111
  806bc4:	18c7883a 	add	r3,r3,r3
  806bc8:	29401b84 	addi	r5,r5,110
  806bcc:	003f9c06 	br	806a40 <__alt_mem_onchip_mem+0xff786a40>
  806bd0:	00c05504 	movi	r3,340
  806bd4:	19400536 	bltu	r3,r5,806bec <_free_r+0x2d4>
  806bd8:	100ad3fa 	srli	r5,r2,15
  806bdc:	28c01e04 	addi	r3,r5,120
  806be0:	18c7883a 	add	r3,r3,r3
  806be4:	29401dc4 	addi	r5,r5,119
  806be8:	003f9506 	br	806a40 <__alt_mem_onchip_mem+0xff786a40>
  806bec:	00c15504 	movi	r3,1364
  806bf0:	19400536 	bltu	r3,r5,806c08 <_free_r+0x2f0>
  806bf4:	100ad4ba 	srli	r5,r2,18
  806bf8:	28c01f44 	addi	r3,r5,125
  806bfc:	18c7883a 	add	r3,r3,r3
  806c00:	29401f04 	addi	r5,r5,124
  806c04:	003f8e06 	br	806a40 <__alt_mem_onchip_mem+0xff786a40>
  806c08:	00c03f84 	movi	r3,254
  806c0c:	01401f84 	movi	r5,126
  806c10:	003f8b06 	br	806a40 <__alt_mem_onchip_mem+0xff786a40>
  806c14:	10c00054 	ori	r3,r2,1
  806c18:	30c00115 	stw	r3,4(r6)
  806c1c:	308d883a 	add	r6,r6,r2
  806c20:	30800015 	stw	r2,0(r6)
  806c24:	003f7806 	br	806a08 <__alt_mem_onchip_mem+0xff786a08>

00806c28 <_fwalk>:
  806c28:	defff704 	addi	sp,sp,-36
  806c2c:	dd000415 	stw	r20,16(sp)
  806c30:	dfc00815 	stw	ra,32(sp)
  806c34:	ddc00715 	stw	r23,28(sp)
  806c38:	dd800615 	stw	r22,24(sp)
  806c3c:	dd400515 	stw	r21,20(sp)
  806c40:	dcc00315 	stw	r19,12(sp)
  806c44:	dc800215 	stw	r18,8(sp)
  806c48:	dc400115 	stw	r17,4(sp)
  806c4c:	dc000015 	stw	r16,0(sp)
  806c50:	2500b804 	addi	r20,r4,736
  806c54:	a0002326 	beq	r20,zero,806ce4 <_fwalk+0xbc>
  806c58:	282b883a 	mov	r21,r5
  806c5c:	002f883a 	mov	r23,zero
  806c60:	05800044 	movi	r22,1
  806c64:	04ffffc4 	movi	r19,-1
  806c68:	a4400117 	ldw	r17,4(r20)
  806c6c:	a4800217 	ldw	r18,8(r20)
  806c70:	8c7fffc4 	addi	r17,r17,-1
  806c74:	88000d16 	blt	r17,zero,806cac <_fwalk+0x84>
  806c78:	94000304 	addi	r16,r18,12
  806c7c:	94800384 	addi	r18,r18,14
  806c80:	8080000b 	ldhu	r2,0(r16)
  806c84:	8c7fffc4 	addi	r17,r17,-1
  806c88:	813ffd04 	addi	r4,r16,-12
  806c8c:	b080042e 	bgeu	r22,r2,806ca0 <_fwalk+0x78>
  806c90:	9080000f 	ldh	r2,0(r18)
  806c94:	14c00226 	beq	r2,r19,806ca0 <_fwalk+0x78>
  806c98:	a83ee83a 	callr	r21
  806c9c:	b8aeb03a 	or	r23,r23,r2
  806ca0:	84001a04 	addi	r16,r16,104
  806ca4:	94801a04 	addi	r18,r18,104
  806ca8:	8cfff51e 	bne	r17,r19,806c80 <__alt_mem_onchip_mem+0xff786c80>
  806cac:	a5000017 	ldw	r20,0(r20)
  806cb0:	a03fed1e 	bne	r20,zero,806c68 <__alt_mem_onchip_mem+0xff786c68>
  806cb4:	b805883a 	mov	r2,r23
  806cb8:	dfc00817 	ldw	ra,32(sp)
  806cbc:	ddc00717 	ldw	r23,28(sp)
  806cc0:	dd800617 	ldw	r22,24(sp)
  806cc4:	dd400517 	ldw	r21,20(sp)
  806cc8:	dd000417 	ldw	r20,16(sp)
  806ccc:	dcc00317 	ldw	r19,12(sp)
  806cd0:	dc800217 	ldw	r18,8(sp)
  806cd4:	dc400117 	ldw	r17,4(sp)
  806cd8:	dc000017 	ldw	r16,0(sp)
  806cdc:	dec00904 	addi	sp,sp,36
  806ce0:	f800283a 	ret
  806ce4:	002f883a 	mov	r23,zero
  806ce8:	003ff206 	br	806cb4 <__alt_mem_onchip_mem+0xff786cb4>

00806cec <_fwalk_reent>:
  806cec:	defff704 	addi	sp,sp,-36
  806cf0:	dd000415 	stw	r20,16(sp)
  806cf4:	dfc00815 	stw	ra,32(sp)
  806cf8:	ddc00715 	stw	r23,28(sp)
  806cfc:	dd800615 	stw	r22,24(sp)
  806d00:	dd400515 	stw	r21,20(sp)
  806d04:	dcc00315 	stw	r19,12(sp)
  806d08:	dc800215 	stw	r18,8(sp)
  806d0c:	dc400115 	stw	r17,4(sp)
  806d10:	dc000015 	stw	r16,0(sp)
  806d14:	2500b804 	addi	r20,r4,736
  806d18:	a0002326 	beq	r20,zero,806da8 <_fwalk_reent+0xbc>
  806d1c:	282b883a 	mov	r21,r5
  806d20:	2027883a 	mov	r19,r4
  806d24:	002f883a 	mov	r23,zero
  806d28:	05800044 	movi	r22,1
  806d2c:	04bfffc4 	movi	r18,-1
  806d30:	a4400117 	ldw	r17,4(r20)
  806d34:	a4000217 	ldw	r16,8(r20)
  806d38:	8c7fffc4 	addi	r17,r17,-1
  806d3c:	88000c16 	blt	r17,zero,806d70 <_fwalk_reent+0x84>
  806d40:	84000304 	addi	r16,r16,12
  806d44:	8080000b 	ldhu	r2,0(r16)
  806d48:	8c7fffc4 	addi	r17,r17,-1
  806d4c:	817ffd04 	addi	r5,r16,-12
  806d50:	b080052e 	bgeu	r22,r2,806d68 <_fwalk_reent+0x7c>
  806d54:	8080008f 	ldh	r2,2(r16)
  806d58:	9809883a 	mov	r4,r19
  806d5c:	14800226 	beq	r2,r18,806d68 <_fwalk_reent+0x7c>
  806d60:	a83ee83a 	callr	r21
  806d64:	b8aeb03a 	or	r23,r23,r2
  806d68:	84001a04 	addi	r16,r16,104
  806d6c:	8cbff51e 	bne	r17,r18,806d44 <__alt_mem_onchip_mem+0xff786d44>
  806d70:	a5000017 	ldw	r20,0(r20)
  806d74:	a03fee1e 	bne	r20,zero,806d30 <__alt_mem_onchip_mem+0xff786d30>
  806d78:	b805883a 	mov	r2,r23
  806d7c:	dfc00817 	ldw	ra,32(sp)
  806d80:	ddc00717 	ldw	r23,28(sp)
  806d84:	dd800617 	ldw	r22,24(sp)
  806d88:	dd400517 	ldw	r21,20(sp)
  806d8c:	dd000417 	ldw	r20,16(sp)
  806d90:	dcc00317 	ldw	r19,12(sp)
  806d94:	dc800217 	ldw	r18,8(sp)
  806d98:	dc400117 	ldw	r17,4(sp)
  806d9c:	dc000017 	ldw	r16,0(sp)
  806da0:	dec00904 	addi	sp,sp,36
  806da4:	f800283a 	ret
  806da8:	002f883a 	mov	r23,zero
  806dac:	003ff206 	br	806d78 <__alt_mem_onchip_mem+0xff786d78>

00806db0 <_isatty_r>:
  806db0:	defffd04 	addi	sp,sp,-12
  806db4:	dc000015 	stw	r16,0(sp)
  806db8:	04002074 	movhi	r16,129
  806dbc:	dc400115 	stw	r17,4(sp)
  806dc0:	84187b04 	addi	r16,r16,25068
  806dc4:	2023883a 	mov	r17,r4
  806dc8:	2809883a 	mov	r4,r5
  806dcc:	dfc00215 	stw	ra,8(sp)
  806dd0:	80000015 	stw	zero,0(r16)
  806dd4:	080e45c0 	call	80e45c <isatty>
  806dd8:	00ffffc4 	movi	r3,-1
  806ddc:	10c00526 	beq	r2,r3,806df4 <_isatty_r+0x44>
  806de0:	dfc00217 	ldw	ra,8(sp)
  806de4:	dc400117 	ldw	r17,4(sp)
  806de8:	dc000017 	ldw	r16,0(sp)
  806dec:	dec00304 	addi	sp,sp,12
  806df0:	f800283a 	ret
  806df4:	80c00017 	ldw	r3,0(r16)
  806df8:	183ff926 	beq	r3,zero,806de0 <__alt_mem_onchip_mem+0xff786de0>
  806dfc:	88c00015 	stw	r3,0(r17)
  806e00:	003ff706 	br	806de0 <__alt_mem_onchip_mem+0xff786de0>

00806e04 <_setlocale_r>:
  806e04:	30001b26 	beq	r6,zero,806e74 <_setlocale_r+0x70>
  806e08:	01402074 	movhi	r5,129
  806e0c:	defffe04 	addi	sp,sp,-8
  806e10:	2948b904 	addi	r5,r5,8932
  806e14:	3009883a 	mov	r4,r6
  806e18:	dc000015 	stw	r16,0(sp)
  806e1c:	dfc00115 	stw	ra,4(sp)
  806e20:	3021883a 	mov	r16,r6
  806e24:	080823c0 	call	80823c <strcmp>
  806e28:	1000061e 	bne	r2,zero,806e44 <_setlocale_r+0x40>
  806e2c:	00802074 	movhi	r2,129
  806e30:	10889b04 	addi	r2,r2,8812
  806e34:	dfc00117 	ldw	ra,4(sp)
  806e38:	dc000017 	ldw	r16,0(sp)
  806e3c:	dec00204 	addi	sp,sp,8
  806e40:	f800283a 	ret
  806e44:	01402074 	movhi	r5,129
  806e48:	29489b04 	addi	r5,r5,8812
  806e4c:	8009883a 	mov	r4,r16
  806e50:	080823c0 	call	80823c <strcmp>
  806e54:	103ff526 	beq	r2,zero,806e2c <__alt_mem_onchip_mem+0xff786e2c>
  806e58:	01402074 	movhi	r5,129
  806e5c:	2948a404 	addi	r5,r5,8848
  806e60:	8009883a 	mov	r4,r16
  806e64:	080823c0 	call	80823c <strcmp>
  806e68:	103ff026 	beq	r2,zero,806e2c <__alt_mem_onchip_mem+0xff786e2c>
  806e6c:	0005883a 	mov	r2,zero
  806e70:	003ff006 	br	806e34 <__alt_mem_onchip_mem+0xff786e34>
  806e74:	00802074 	movhi	r2,129
  806e78:	10889b04 	addi	r2,r2,8812
  806e7c:	f800283a 	ret

00806e80 <__locale_charset>:
  806e80:	00802074 	movhi	r2,129
  806e84:	108c1104 	addi	r2,r2,12356
  806e88:	f800283a 	ret

00806e8c <__locale_mb_cur_max>:
  806e8c:	00802074 	movhi	r2,129
  806e90:	10912804 	addi	r2,r2,17568
  806e94:	10800017 	ldw	r2,0(r2)
  806e98:	f800283a 	ret

00806e9c <__locale_msgcharset>:
  806e9c:	00802074 	movhi	r2,129
  806ea0:	108c0904 	addi	r2,r2,12324
  806ea4:	f800283a 	ret

00806ea8 <__locale_cjk_lang>:
  806ea8:	0005883a 	mov	r2,zero
  806eac:	f800283a 	ret

00806eb0 <_localeconv_r>:
  806eb0:	00802074 	movhi	r2,129
  806eb4:	108c1904 	addi	r2,r2,12388
  806eb8:	f800283a 	ret

00806ebc <setlocale>:
  806ebc:	00802074 	movhi	r2,129
  806ec0:	10912504 	addi	r2,r2,17556
  806ec4:	280d883a 	mov	r6,r5
  806ec8:	200b883a 	mov	r5,r4
  806ecc:	11000017 	ldw	r4,0(r2)
  806ed0:	0806e041 	jmpi	806e04 <_setlocale_r>

00806ed4 <localeconv>:
  806ed4:	00802074 	movhi	r2,129
  806ed8:	108c1904 	addi	r2,r2,12388
  806edc:	f800283a 	ret

00806ee0 <_lseek_r>:
  806ee0:	defffd04 	addi	sp,sp,-12
  806ee4:	2805883a 	mov	r2,r5
  806ee8:	dc000015 	stw	r16,0(sp)
  806eec:	04002074 	movhi	r16,129
  806ef0:	dc400115 	stw	r17,4(sp)
  806ef4:	300b883a 	mov	r5,r6
  806ef8:	84187b04 	addi	r16,r16,25068
  806efc:	2023883a 	mov	r17,r4
  806f00:	380d883a 	mov	r6,r7
  806f04:	1009883a 	mov	r4,r2
  806f08:	dfc00215 	stw	ra,8(sp)
  806f0c:	80000015 	stw	zero,0(r16)
  806f10:	080e6280 	call	80e628 <lseek>
  806f14:	00ffffc4 	movi	r3,-1
  806f18:	10c00526 	beq	r2,r3,806f30 <_lseek_r+0x50>
  806f1c:	dfc00217 	ldw	ra,8(sp)
  806f20:	dc400117 	ldw	r17,4(sp)
  806f24:	dc000017 	ldw	r16,0(sp)
  806f28:	dec00304 	addi	sp,sp,12
  806f2c:	f800283a 	ret
  806f30:	80c00017 	ldw	r3,0(r16)
  806f34:	183ff926 	beq	r3,zero,806f1c <__alt_mem_onchip_mem+0xff786f1c>
  806f38:	88c00015 	stw	r3,0(r17)
  806f3c:	003ff706 	br	806f1c <__alt_mem_onchip_mem+0xff786f1c>

00806f40 <memchr>:
  806f40:	208000cc 	andi	r2,r4,3
  806f44:	280f883a 	mov	r7,r5
  806f48:	10003426 	beq	r2,zero,80701c <memchr+0xdc>
  806f4c:	30bfffc4 	addi	r2,r6,-1
  806f50:	30001a26 	beq	r6,zero,806fbc <memchr+0x7c>
  806f54:	20c00003 	ldbu	r3,0(r4)
  806f58:	29803fcc 	andi	r6,r5,255
  806f5c:	30c0051e 	bne	r6,r3,806f74 <memchr+0x34>
  806f60:	00001806 	br	806fc4 <memchr+0x84>
  806f64:	10001526 	beq	r2,zero,806fbc <memchr+0x7c>
  806f68:	20c00003 	ldbu	r3,0(r4)
  806f6c:	10bfffc4 	addi	r2,r2,-1
  806f70:	30c01426 	beq	r6,r3,806fc4 <memchr+0x84>
  806f74:	21000044 	addi	r4,r4,1
  806f78:	20c000cc 	andi	r3,r4,3
  806f7c:	183ff91e 	bne	r3,zero,806f64 <__alt_mem_onchip_mem+0xff786f64>
  806f80:	020000c4 	movi	r8,3
  806f84:	40801136 	bltu	r8,r2,806fcc <memchr+0x8c>
  806f88:	10000c26 	beq	r2,zero,806fbc <memchr+0x7c>
  806f8c:	20c00003 	ldbu	r3,0(r4)
  806f90:	29403fcc 	andi	r5,r5,255
  806f94:	28c00b26 	beq	r5,r3,806fc4 <memchr+0x84>
  806f98:	20c00044 	addi	r3,r4,1
  806f9c:	39803fcc 	andi	r6,r7,255
  806fa0:	2089883a 	add	r4,r4,r2
  806fa4:	00000306 	br	806fb4 <memchr+0x74>
  806fa8:	18c00044 	addi	r3,r3,1
  806fac:	197fffc3 	ldbu	r5,-1(r3)
  806fb0:	31400526 	beq	r6,r5,806fc8 <memchr+0x88>
  806fb4:	1805883a 	mov	r2,r3
  806fb8:	20fffb1e 	bne	r4,r3,806fa8 <__alt_mem_onchip_mem+0xff786fa8>
  806fbc:	0005883a 	mov	r2,zero
  806fc0:	f800283a 	ret
  806fc4:	2005883a 	mov	r2,r4
  806fc8:	f800283a 	ret
  806fcc:	28c03fcc 	andi	r3,r5,255
  806fd0:	1812923a 	slli	r9,r3,8
  806fd4:	02ffbff4 	movhi	r11,65279
  806fd8:	02a02074 	movhi	r10,32897
  806fdc:	48d2b03a 	or	r9,r9,r3
  806fe0:	4806943a 	slli	r3,r9,16
  806fe4:	5affbfc4 	addi	r11,r11,-257
  806fe8:	52a02004 	addi	r10,r10,-32640
  806fec:	48d2b03a 	or	r9,r9,r3
  806ff0:	20c00017 	ldw	r3,0(r4)
  806ff4:	48c6f03a 	xor	r3,r9,r3
  806ff8:	1acd883a 	add	r6,r3,r11
  806ffc:	00c6303a 	nor	r3,zero,r3
  807000:	30c6703a 	and	r3,r6,r3
  807004:	1a86703a 	and	r3,r3,r10
  807008:	183fe01e 	bne	r3,zero,806f8c <__alt_mem_onchip_mem+0xff786f8c>
  80700c:	10bfff04 	addi	r2,r2,-4
  807010:	21000104 	addi	r4,r4,4
  807014:	40bff636 	bltu	r8,r2,806ff0 <__alt_mem_onchip_mem+0xff786ff0>
  807018:	003fdb06 	br	806f88 <__alt_mem_onchip_mem+0xff786f88>
  80701c:	3005883a 	mov	r2,r6
  807020:	003fd706 	br	806f80 <__alt_mem_onchip_mem+0xff786f80>

00807024 <memcpy>:
  807024:	defffd04 	addi	sp,sp,-12
  807028:	dfc00215 	stw	ra,8(sp)
  80702c:	dc400115 	stw	r17,4(sp)
  807030:	dc000015 	stw	r16,0(sp)
  807034:	00c003c4 	movi	r3,15
  807038:	2005883a 	mov	r2,r4
  80703c:	1980452e 	bgeu	r3,r6,807154 <memcpy+0x130>
  807040:	2906b03a 	or	r3,r5,r4
  807044:	18c000cc 	andi	r3,r3,3
  807048:	1800441e 	bne	r3,zero,80715c <memcpy+0x138>
  80704c:	347ffc04 	addi	r17,r6,-16
  807050:	8822d13a 	srli	r17,r17,4
  807054:	28c00104 	addi	r3,r5,4
  807058:	23400104 	addi	r13,r4,4
  80705c:	8820913a 	slli	r16,r17,4
  807060:	2b000204 	addi	r12,r5,8
  807064:	22c00204 	addi	r11,r4,8
  807068:	84000504 	addi	r16,r16,20
  80706c:	2a800304 	addi	r10,r5,12
  807070:	22400304 	addi	r9,r4,12
  807074:	2c21883a 	add	r16,r5,r16
  807078:	2811883a 	mov	r8,r5
  80707c:	200f883a 	mov	r7,r4
  807080:	41000017 	ldw	r4,0(r8)
  807084:	1fc00017 	ldw	ra,0(r3)
  807088:	63c00017 	ldw	r15,0(r12)
  80708c:	39000015 	stw	r4,0(r7)
  807090:	53800017 	ldw	r14,0(r10)
  807094:	6fc00015 	stw	ra,0(r13)
  807098:	5bc00015 	stw	r15,0(r11)
  80709c:	4b800015 	stw	r14,0(r9)
  8070a0:	18c00404 	addi	r3,r3,16
  8070a4:	39c00404 	addi	r7,r7,16
  8070a8:	42000404 	addi	r8,r8,16
  8070ac:	6b400404 	addi	r13,r13,16
  8070b0:	63000404 	addi	r12,r12,16
  8070b4:	5ac00404 	addi	r11,r11,16
  8070b8:	52800404 	addi	r10,r10,16
  8070bc:	4a400404 	addi	r9,r9,16
  8070c0:	1c3fef1e 	bne	r3,r16,807080 <__alt_mem_onchip_mem+0xff787080>
  8070c4:	89c00044 	addi	r7,r17,1
  8070c8:	380e913a 	slli	r7,r7,4
  8070cc:	310003cc 	andi	r4,r6,15
  8070d0:	02c000c4 	movi	r11,3
  8070d4:	11c7883a 	add	r3,r2,r7
  8070d8:	29cb883a 	add	r5,r5,r7
  8070dc:	5900212e 	bgeu	r11,r4,807164 <memcpy+0x140>
  8070e0:	1813883a 	mov	r9,r3
  8070e4:	2811883a 	mov	r8,r5
  8070e8:	200f883a 	mov	r7,r4
  8070ec:	42800017 	ldw	r10,0(r8)
  8070f0:	4a400104 	addi	r9,r9,4
  8070f4:	39ffff04 	addi	r7,r7,-4
  8070f8:	4abfff15 	stw	r10,-4(r9)
  8070fc:	42000104 	addi	r8,r8,4
  807100:	59fffa36 	bltu	r11,r7,8070ec <__alt_mem_onchip_mem+0xff7870ec>
  807104:	213fff04 	addi	r4,r4,-4
  807108:	2008d0ba 	srli	r4,r4,2
  80710c:	318000cc 	andi	r6,r6,3
  807110:	21000044 	addi	r4,r4,1
  807114:	2109883a 	add	r4,r4,r4
  807118:	2109883a 	add	r4,r4,r4
  80711c:	1907883a 	add	r3,r3,r4
  807120:	290b883a 	add	r5,r5,r4
  807124:	30000626 	beq	r6,zero,807140 <memcpy+0x11c>
  807128:	198d883a 	add	r6,r3,r6
  80712c:	29c00003 	ldbu	r7,0(r5)
  807130:	18c00044 	addi	r3,r3,1
  807134:	29400044 	addi	r5,r5,1
  807138:	19ffffc5 	stb	r7,-1(r3)
  80713c:	19bffb1e 	bne	r3,r6,80712c <__alt_mem_onchip_mem+0xff78712c>
  807140:	dfc00217 	ldw	ra,8(sp)
  807144:	dc400117 	ldw	r17,4(sp)
  807148:	dc000017 	ldw	r16,0(sp)
  80714c:	dec00304 	addi	sp,sp,12
  807150:	f800283a 	ret
  807154:	2007883a 	mov	r3,r4
  807158:	003ff206 	br	807124 <__alt_mem_onchip_mem+0xff787124>
  80715c:	2007883a 	mov	r3,r4
  807160:	003ff106 	br	807128 <__alt_mem_onchip_mem+0xff787128>
  807164:	200d883a 	mov	r6,r4
  807168:	003fee06 	br	807124 <__alt_mem_onchip_mem+0xff787124>

0080716c <_Balloc>:
  80716c:	20801317 	ldw	r2,76(r4)
  807170:	defffc04 	addi	sp,sp,-16
  807174:	dc400115 	stw	r17,4(sp)
  807178:	dc000015 	stw	r16,0(sp)
  80717c:	dfc00315 	stw	ra,12(sp)
  807180:	dc800215 	stw	r18,8(sp)
  807184:	2023883a 	mov	r17,r4
  807188:	2821883a 	mov	r16,r5
  80718c:	10000f26 	beq	r2,zero,8071cc <_Balloc+0x60>
  807190:	8407883a 	add	r3,r16,r16
  807194:	18c7883a 	add	r3,r3,r3
  807198:	10c7883a 	add	r3,r2,r3
  80719c:	18800017 	ldw	r2,0(r3)
  8071a0:	10001126 	beq	r2,zero,8071e8 <_Balloc+0x7c>
  8071a4:	11000017 	ldw	r4,0(r2)
  8071a8:	19000015 	stw	r4,0(r3)
  8071ac:	10000415 	stw	zero,16(r2)
  8071b0:	10000315 	stw	zero,12(r2)
  8071b4:	dfc00317 	ldw	ra,12(sp)
  8071b8:	dc800217 	ldw	r18,8(sp)
  8071bc:	dc400117 	ldw	r17,4(sp)
  8071c0:	dc000017 	ldw	r16,0(sp)
  8071c4:	dec00404 	addi	sp,sp,16
  8071c8:	f800283a 	ret
  8071cc:	01800844 	movi	r6,33
  8071d0:	01400104 	movi	r5,4
  8071d4:	08099f80 	call	8099f8 <_calloc_r>
  8071d8:	88801315 	stw	r2,76(r17)
  8071dc:	103fec1e 	bne	r2,zero,807190 <__alt_mem_onchip_mem+0xff787190>
  8071e0:	0005883a 	mov	r2,zero
  8071e4:	003ff306 	br	8071b4 <__alt_mem_onchip_mem+0xff7871b4>
  8071e8:	01400044 	movi	r5,1
  8071ec:	2c24983a 	sll	r18,r5,r16
  8071f0:	8809883a 	mov	r4,r17
  8071f4:	91800144 	addi	r6,r18,5
  8071f8:	318d883a 	add	r6,r6,r6
  8071fc:	318d883a 	add	r6,r6,r6
  807200:	08099f80 	call	8099f8 <_calloc_r>
  807204:	103ff626 	beq	r2,zero,8071e0 <__alt_mem_onchip_mem+0xff7871e0>
  807208:	14000115 	stw	r16,4(r2)
  80720c:	14800215 	stw	r18,8(r2)
  807210:	003fe606 	br	8071ac <__alt_mem_onchip_mem+0xff7871ac>

00807214 <_Bfree>:
  807214:	28000826 	beq	r5,zero,807238 <_Bfree+0x24>
  807218:	28c00117 	ldw	r3,4(r5)
  80721c:	20801317 	ldw	r2,76(r4)
  807220:	18c7883a 	add	r3,r3,r3
  807224:	18c7883a 	add	r3,r3,r3
  807228:	10c5883a 	add	r2,r2,r3
  80722c:	10c00017 	ldw	r3,0(r2)
  807230:	28c00015 	stw	r3,0(r5)
  807234:	11400015 	stw	r5,0(r2)
  807238:	f800283a 	ret

0080723c <__multadd>:
  80723c:	defffa04 	addi	sp,sp,-24
  807240:	dc800315 	stw	r18,12(sp)
  807244:	dc400215 	stw	r17,8(sp)
  807248:	dc000115 	stw	r16,4(sp)
  80724c:	2823883a 	mov	r17,r5
  807250:	2c000417 	ldw	r16,16(r5)
  807254:	dfc00515 	stw	ra,20(sp)
  807258:	dcc00415 	stw	r19,16(sp)
  80725c:	2025883a 	mov	r18,r4
  807260:	29400504 	addi	r5,r5,20
  807264:	0011883a 	mov	r8,zero
  807268:	28c00017 	ldw	r3,0(r5)
  80726c:	29400104 	addi	r5,r5,4
  807270:	42000044 	addi	r8,r8,1
  807274:	18bfffcc 	andi	r2,r3,65535
  807278:	1185383a 	mul	r2,r2,r6
  80727c:	1806d43a 	srli	r3,r3,16
  807280:	11cf883a 	add	r7,r2,r7
  807284:	3808d43a 	srli	r4,r7,16
  807288:	1987383a 	mul	r3,r3,r6
  80728c:	38bfffcc 	andi	r2,r7,65535
  807290:	1907883a 	add	r3,r3,r4
  807294:	1808943a 	slli	r4,r3,16
  807298:	180ed43a 	srli	r7,r3,16
  80729c:	2085883a 	add	r2,r4,r2
  8072a0:	28bfff15 	stw	r2,-4(r5)
  8072a4:	443ff016 	blt	r8,r16,807268 <__alt_mem_onchip_mem+0xff787268>
  8072a8:	38000926 	beq	r7,zero,8072d0 <__multadd+0x94>
  8072ac:	88800217 	ldw	r2,8(r17)
  8072b0:	80800f0e 	bge	r16,r2,8072f0 <__multadd+0xb4>
  8072b4:	80800144 	addi	r2,r16,5
  8072b8:	1085883a 	add	r2,r2,r2
  8072bc:	1085883a 	add	r2,r2,r2
  8072c0:	8885883a 	add	r2,r17,r2
  8072c4:	11c00015 	stw	r7,0(r2)
  8072c8:	84000044 	addi	r16,r16,1
  8072cc:	8c000415 	stw	r16,16(r17)
  8072d0:	8805883a 	mov	r2,r17
  8072d4:	dfc00517 	ldw	ra,20(sp)
  8072d8:	dcc00417 	ldw	r19,16(sp)
  8072dc:	dc800317 	ldw	r18,12(sp)
  8072e0:	dc400217 	ldw	r17,8(sp)
  8072e4:	dc000117 	ldw	r16,4(sp)
  8072e8:	dec00604 	addi	sp,sp,24
  8072ec:	f800283a 	ret
  8072f0:	89400117 	ldw	r5,4(r17)
  8072f4:	9009883a 	mov	r4,r18
  8072f8:	d9c00015 	stw	r7,0(sp)
  8072fc:	29400044 	addi	r5,r5,1
  807300:	080716c0 	call	80716c <_Balloc>
  807304:	89800417 	ldw	r6,16(r17)
  807308:	89400304 	addi	r5,r17,12
  80730c:	11000304 	addi	r4,r2,12
  807310:	31800084 	addi	r6,r6,2
  807314:	318d883a 	add	r6,r6,r6
  807318:	318d883a 	add	r6,r6,r6
  80731c:	1027883a 	mov	r19,r2
  807320:	08070240 	call	807024 <memcpy>
  807324:	d9c00017 	ldw	r7,0(sp)
  807328:	88000a26 	beq	r17,zero,807354 <__multadd+0x118>
  80732c:	88c00117 	ldw	r3,4(r17)
  807330:	90801317 	ldw	r2,76(r18)
  807334:	18c7883a 	add	r3,r3,r3
  807338:	18c7883a 	add	r3,r3,r3
  80733c:	10c5883a 	add	r2,r2,r3
  807340:	10c00017 	ldw	r3,0(r2)
  807344:	88c00015 	stw	r3,0(r17)
  807348:	14400015 	stw	r17,0(r2)
  80734c:	9823883a 	mov	r17,r19
  807350:	003fd806 	br	8072b4 <__alt_mem_onchip_mem+0xff7872b4>
  807354:	9823883a 	mov	r17,r19
  807358:	003fd606 	br	8072b4 <__alt_mem_onchip_mem+0xff7872b4>

0080735c <__s2b>:
  80735c:	defff904 	addi	sp,sp,-28
  807360:	dc400115 	stw	r17,4(sp)
  807364:	dc000015 	stw	r16,0(sp)
  807368:	2023883a 	mov	r17,r4
  80736c:	2821883a 	mov	r16,r5
  807370:	39000204 	addi	r4,r7,8
  807374:	01400244 	movi	r5,9
  807378:	dcc00315 	stw	r19,12(sp)
  80737c:	dc800215 	stw	r18,8(sp)
  807380:	dfc00615 	stw	ra,24(sp)
  807384:	dd400515 	stw	r21,20(sp)
  807388:	dd000415 	stw	r20,16(sp)
  80738c:	3825883a 	mov	r18,r7
  807390:	3027883a 	mov	r19,r6
  807394:	080b7340 	call	80b734 <__divsi3>
  807398:	00c00044 	movi	r3,1
  80739c:	000b883a 	mov	r5,zero
  8073a0:	1880030e 	bge	r3,r2,8073b0 <__s2b+0x54>
  8073a4:	18c7883a 	add	r3,r3,r3
  8073a8:	29400044 	addi	r5,r5,1
  8073ac:	18bffd16 	blt	r3,r2,8073a4 <__alt_mem_onchip_mem+0xff7873a4>
  8073b0:	8809883a 	mov	r4,r17
  8073b4:	080716c0 	call	80716c <_Balloc>
  8073b8:	d8c00717 	ldw	r3,28(sp)
  8073bc:	10c00515 	stw	r3,20(r2)
  8073c0:	00c00044 	movi	r3,1
  8073c4:	10c00415 	stw	r3,16(r2)
  8073c8:	00c00244 	movi	r3,9
  8073cc:	1cc0210e 	bge	r3,r19,807454 <__s2b+0xf8>
  8073d0:	80eb883a 	add	r21,r16,r3
  8073d4:	a829883a 	mov	r20,r21
  8073d8:	84e1883a 	add	r16,r16,r19
  8073dc:	a1c00007 	ldb	r7,0(r20)
  8073e0:	01800284 	movi	r6,10
  8073e4:	a5000044 	addi	r20,r20,1
  8073e8:	100b883a 	mov	r5,r2
  8073ec:	39fff404 	addi	r7,r7,-48
  8073f0:	8809883a 	mov	r4,r17
  8073f4:	080723c0 	call	80723c <__multadd>
  8073f8:	a43ff81e 	bne	r20,r16,8073dc <__alt_mem_onchip_mem+0xff7873dc>
  8073fc:	ace1883a 	add	r16,r21,r19
  807400:	843ffe04 	addi	r16,r16,-8
  807404:	9c800a0e 	bge	r19,r18,807430 <__s2b+0xd4>
  807408:	94e5c83a 	sub	r18,r18,r19
  80740c:	84a5883a 	add	r18,r16,r18
  807410:	81c00007 	ldb	r7,0(r16)
  807414:	01800284 	movi	r6,10
  807418:	84000044 	addi	r16,r16,1
  80741c:	100b883a 	mov	r5,r2
  807420:	39fff404 	addi	r7,r7,-48
  807424:	8809883a 	mov	r4,r17
  807428:	080723c0 	call	80723c <__multadd>
  80742c:	84bff81e 	bne	r16,r18,807410 <__alt_mem_onchip_mem+0xff787410>
  807430:	dfc00617 	ldw	ra,24(sp)
  807434:	dd400517 	ldw	r21,20(sp)
  807438:	dd000417 	ldw	r20,16(sp)
  80743c:	dcc00317 	ldw	r19,12(sp)
  807440:	dc800217 	ldw	r18,8(sp)
  807444:	dc400117 	ldw	r17,4(sp)
  807448:	dc000017 	ldw	r16,0(sp)
  80744c:	dec00704 	addi	sp,sp,28
  807450:	f800283a 	ret
  807454:	84000284 	addi	r16,r16,10
  807458:	1827883a 	mov	r19,r3
  80745c:	003fe906 	br	807404 <__alt_mem_onchip_mem+0xff787404>

00807460 <__hi0bits>:
  807460:	20bfffec 	andhi	r2,r4,65535
  807464:	1000141e 	bne	r2,zero,8074b8 <__hi0bits+0x58>
  807468:	2008943a 	slli	r4,r4,16
  80746c:	00800404 	movi	r2,16
  807470:	20ffc02c 	andhi	r3,r4,65280
  807474:	1800021e 	bne	r3,zero,807480 <__hi0bits+0x20>
  807478:	2008923a 	slli	r4,r4,8
  80747c:	10800204 	addi	r2,r2,8
  807480:	20fc002c 	andhi	r3,r4,61440
  807484:	1800021e 	bne	r3,zero,807490 <__hi0bits+0x30>
  807488:	2008913a 	slli	r4,r4,4
  80748c:	10800104 	addi	r2,r2,4
  807490:	20f0002c 	andhi	r3,r4,49152
  807494:	1800031e 	bne	r3,zero,8074a4 <__hi0bits+0x44>
  807498:	2109883a 	add	r4,r4,r4
  80749c:	10800084 	addi	r2,r2,2
  8074a0:	2109883a 	add	r4,r4,r4
  8074a4:	20000316 	blt	r4,zero,8074b4 <__hi0bits+0x54>
  8074a8:	2110002c 	andhi	r4,r4,16384
  8074ac:	2000041e 	bne	r4,zero,8074c0 <__hi0bits+0x60>
  8074b0:	00800804 	movi	r2,32
  8074b4:	f800283a 	ret
  8074b8:	0005883a 	mov	r2,zero
  8074bc:	003fec06 	br	807470 <__alt_mem_onchip_mem+0xff787470>
  8074c0:	10800044 	addi	r2,r2,1
  8074c4:	f800283a 	ret

008074c8 <__lo0bits>:
  8074c8:	20c00017 	ldw	r3,0(r4)
  8074cc:	188001cc 	andi	r2,r3,7
  8074d0:	10000826 	beq	r2,zero,8074f4 <__lo0bits+0x2c>
  8074d4:	1880004c 	andi	r2,r3,1
  8074d8:	1000211e 	bne	r2,zero,807560 <__lo0bits+0x98>
  8074dc:	1880008c 	andi	r2,r3,2
  8074e0:	1000211e 	bne	r2,zero,807568 <__lo0bits+0xa0>
  8074e4:	1806d0ba 	srli	r3,r3,2
  8074e8:	00800084 	movi	r2,2
  8074ec:	20c00015 	stw	r3,0(r4)
  8074f0:	f800283a 	ret
  8074f4:	18bfffcc 	andi	r2,r3,65535
  8074f8:	10001326 	beq	r2,zero,807548 <__lo0bits+0x80>
  8074fc:	0005883a 	mov	r2,zero
  807500:	19403fcc 	andi	r5,r3,255
  807504:	2800021e 	bne	r5,zero,807510 <__lo0bits+0x48>
  807508:	1806d23a 	srli	r3,r3,8
  80750c:	10800204 	addi	r2,r2,8
  807510:	194003cc 	andi	r5,r3,15
  807514:	2800021e 	bne	r5,zero,807520 <__lo0bits+0x58>
  807518:	1806d13a 	srli	r3,r3,4
  80751c:	10800104 	addi	r2,r2,4
  807520:	194000cc 	andi	r5,r3,3
  807524:	2800021e 	bne	r5,zero,807530 <__lo0bits+0x68>
  807528:	1806d0ba 	srli	r3,r3,2
  80752c:	10800084 	addi	r2,r2,2
  807530:	1940004c 	andi	r5,r3,1
  807534:	2800081e 	bne	r5,zero,807558 <__lo0bits+0x90>
  807538:	1806d07a 	srli	r3,r3,1
  80753c:	1800051e 	bne	r3,zero,807554 <__lo0bits+0x8c>
  807540:	00800804 	movi	r2,32
  807544:	f800283a 	ret
  807548:	1806d43a 	srli	r3,r3,16
  80754c:	00800404 	movi	r2,16
  807550:	003feb06 	br	807500 <__alt_mem_onchip_mem+0xff787500>
  807554:	10800044 	addi	r2,r2,1
  807558:	20c00015 	stw	r3,0(r4)
  80755c:	f800283a 	ret
  807560:	0005883a 	mov	r2,zero
  807564:	f800283a 	ret
  807568:	1806d07a 	srli	r3,r3,1
  80756c:	00800044 	movi	r2,1
  807570:	20c00015 	stw	r3,0(r4)
  807574:	f800283a 	ret

00807578 <__i2b>:
  807578:	defffd04 	addi	sp,sp,-12
  80757c:	dc000015 	stw	r16,0(sp)
  807580:	04000044 	movi	r16,1
  807584:	dc400115 	stw	r17,4(sp)
  807588:	2823883a 	mov	r17,r5
  80758c:	800b883a 	mov	r5,r16
  807590:	dfc00215 	stw	ra,8(sp)
  807594:	080716c0 	call	80716c <_Balloc>
  807598:	14400515 	stw	r17,20(r2)
  80759c:	14000415 	stw	r16,16(r2)
  8075a0:	dfc00217 	ldw	ra,8(sp)
  8075a4:	dc400117 	ldw	r17,4(sp)
  8075a8:	dc000017 	ldw	r16,0(sp)
  8075ac:	dec00304 	addi	sp,sp,12
  8075b0:	f800283a 	ret

008075b4 <__multiply>:
  8075b4:	defffa04 	addi	sp,sp,-24
  8075b8:	dcc00315 	stw	r19,12(sp)
  8075bc:	dc800215 	stw	r18,8(sp)
  8075c0:	34c00417 	ldw	r19,16(r6)
  8075c4:	2c800417 	ldw	r18,16(r5)
  8075c8:	dd000415 	stw	r20,16(sp)
  8075cc:	dc400115 	stw	r17,4(sp)
  8075d0:	dfc00515 	stw	ra,20(sp)
  8075d4:	dc000015 	stw	r16,0(sp)
  8075d8:	2829883a 	mov	r20,r5
  8075dc:	3023883a 	mov	r17,r6
  8075e0:	94c0050e 	bge	r18,r19,8075f8 <__multiply+0x44>
  8075e4:	9007883a 	mov	r3,r18
  8075e8:	3029883a 	mov	r20,r6
  8075ec:	9825883a 	mov	r18,r19
  8075f0:	2823883a 	mov	r17,r5
  8075f4:	1827883a 	mov	r19,r3
  8075f8:	a0800217 	ldw	r2,8(r20)
  8075fc:	94e1883a 	add	r16,r18,r19
  807600:	a1400117 	ldw	r5,4(r20)
  807604:	1400010e 	bge	r2,r16,80760c <__multiply+0x58>
  807608:	29400044 	addi	r5,r5,1
  80760c:	080716c0 	call	80716c <_Balloc>
  807610:	8415883a 	add	r10,r16,r16
  807614:	12c00504 	addi	r11,r2,20
  807618:	5295883a 	add	r10,r10,r10
  80761c:	5a95883a 	add	r10,r11,r10
  807620:	5807883a 	mov	r3,r11
  807624:	5a80032e 	bgeu	r11,r10,807634 <__multiply+0x80>
  807628:	18000015 	stw	zero,0(r3)
  80762c:	18c00104 	addi	r3,r3,4
  807630:	1abffd36 	bltu	r3,r10,807628 <__alt_mem_onchip_mem+0xff787628>
  807634:	9ce7883a 	add	r19,r19,r19
  807638:	94a5883a 	add	r18,r18,r18
  80763c:	89800504 	addi	r6,r17,20
  807640:	9ce7883a 	add	r19,r19,r19
  807644:	a3400504 	addi	r13,r20,20
  807648:	94a5883a 	add	r18,r18,r18
  80764c:	34d9883a 	add	r12,r6,r19
  807650:	6c93883a 	add	r9,r13,r18
  807654:	3300422e 	bgeu	r6,r12,807760 <__multiply+0x1ac>
  807658:	37c00017 	ldw	ra,0(r6)
  80765c:	fbffffcc 	andi	r15,ra,65535
  807660:	78001b26 	beq	r15,zero,8076d0 <__multiply+0x11c>
  807664:	5811883a 	mov	r8,r11
  807668:	681d883a 	mov	r14,r13
  80766c:	000f883a 	mov	r7,zero
  807670:	71000017 	ldw	r4,0(r14)
  807674:	40c00017 	ldw	r3,0(r8)
  807678:	73800104 	addi	r14,r14,4
  80767c:	217fffcc 	andi	r5,r4,65535
  807680:	2bcb383a 	mul	r5,r5,r15
  807684:	2008d43a 	srli	r4,r4,16
  807688:	1c7fffcc 	andi	r17,r3,65535
  80768c:	2c4b883a 	add	r5,r5,r17
  807690:	29cb883a 	add	r5,r5,r7
  807694:	23c9383a 	mul	r4,r4,r15
  807698:	1806d43a 	srli	r3,r3,16
  80769c:	280ed43a 	srli	r7,r5,16
  8076a0:	297fffcc 	andi	r5,r5,65535
  8076a4:	20c7883a 	add	r3,r4,r3
  8076a8:	19c7883a 	add	r3,r3,r7
  8076ac:	1808943a 	slli	r4,r3,16
  8076b0:	4023883a 	mov	r17,r8
  8076b4:	180ed43a 	srli	r7,r3,16
  8076b8:	214ab03a 	or	r5,r4,r5
  8076bc:	41400015 	stw	r5,0(r8)
  8076c0:	42000104 	addi	r8,r8,4
  8076c4:	727fea36 	bltu	r14,r9,807670 <__alt_mem_onchip_mem+0xff787670>
  8076c8:	89c00115 	stw	r7,4(r17)
  8076cc:	37c00017 	ldw	ra,0(r6)
  8076d0:	f83ed43a 	srli	ra,ra,16
  8076d4:	f8001f26 	beq	ra,zero,807754 <__multiply+0x1a0>
  8076d8:	58c00017 	ldw	r3,0(r11)
  8076dc:	681d883a 	mov	r14,r13
  8076e0:	581f883a 	mov	r15,r11
  8076e4:	1811883a 	mov	r8,r3
  8076e8:	5825883a 	mov	r18,r11
  8076ec:	000f883a 	mov	r7,zero
  8076f0:	00000106 	br	8076f8 <__multiply+0x144>
  8076f4:	8825883a 	mov	r18,r17
  8076f8:	7140000b 	ldhu	r5,0(r14)
  8076fc:	4010d43a 	srli	r8,r8,16
  807700:	193fffcc 	andi	r4,r3,65535
  807704:	2fcb383a 	mul	r5,r5,ra
  807708:	7bc00104 	addi	r15,r15,4
  80770c:	73800104 	addi	r14,r14,4
  807710:	2a0b883a 	add	r5,r5,r8
  807714:	29cb883a 	add	r5,r5,r7
  807718:	2806943a 	slli	r3,r5,16
  80771c:	94400104 	addi	r17,r18,4
  807720:	280ad43a 	srli	r5,r5,16
  807724:	1908b03a 	or	r4,r3,r4
  807728:	793fff15 	stw	r4,-4(r15)
  80772c:	70ffff17 	ldw	r3,-4(r14)
  807730:	8a000017 	ldw	r8,0(r17)
  807734:	1806d43a 	srli	r3,r3,16
  807738:	413fffcc 	andi	r4,r8,65535
  80773c:	1fc7383a 	mul	r3,r3,ra
  807740:	1907883a 	add	r3,r3,r4
  807744:	1947883a 	add	r3,r3,r5
  807748:	180ed43a 	srli	r7,r3,16
  80774c:	727fe936 	bltu	r14,r9,8076f4 <__alt_mem_onchip_mem+0xff7876f4>
  807750:	90c00115 	stw	r3,4(r18)
  807754:	31800104 	addi	r6,r6,4
  807758:	5ac00104 	addi	r11,r11,4
  80775c:	333fbe36 	bltu	r6,r12,807658 <__alt_mem_onchip_mem+0xff787658>
  807760:	0400090e 	bge	zero,r16,807788 <__multiply+0x1d4>
  807764:	50ffff17 	ldw	r3,-4(r10)
  807768:	52bfff04 	addi	r10,r10,-4
  80776c:	18000326 	beq	r3,zero,80777c <__multiply+0x1c8>
  807770:	00000506 	br	807788 <__multiply+0x1d4>
  807774:	50c00017 	ldw	r3,0(r10)
  807778:	1800031e 	bne	r3,zero,807788 <__multiply+0x1d4>
  80777c:	843fffc4 	addi	r16,r16,-1
  807780:	52bfff04 	addi	r10,r10,-4
  807784:	803ffb1e 	bne	r16,zero,807774 <__alt_mem_onchip_mem+0xff787774>
  807788:	14000415 	stw	r16,16(r2)
  80778c:	dfc00517 	ldw	ra,20(sp)
  807790:	dd000417 	ldw	r20,16(sp)
  807794:	dcc00317 	ldw	r19,12(sp)
  807798:	dc800217 	ldw	r18,8(sp)
  80779c:	dc400117 	ldw	r17,4(sp)
  8077a0:	dc000017 	ldw	r16,0(sp)
  8077a4:	dec00604 	addi	sp,sp,24
  8077a8:	f800283a 	ret

008077ac <__pow5mult>:
  8077ac:	defffa04 	addi	sp,sp,-24
  8077b0:	dcc00315 	stw	r19,12(sp)
  8077b4:	dc000015 	stw	r16,0(sp)
  8077b8:	dfc00515 	stw	ra,20(sp)
  8077bc:	dd000415 	stw	r20,16(sp)
  8077c0:	dc800215 	stw	r18,8(sp)
  8077c4:	dc400115 	stw	r17,4(sp)
  8077c8:	308000cc 	andi	r2,r6,3
  8077cc:	3021883a 	mov	r16,r6
  8077d0:	2027883a 	mov	r19,r4
  8077d4:	10002f1e 	bne	r2,zero,807894 <__pow5mult+0xe8>
  8077d8:	2825883a 	mov	r18,r5
  8077dc:	8021d0ba 	srai	r16,r16,2
  8077e0:	80001a26 	beq	r16,zero,80784c <__pow5mult+0xa0>
  8077e4:	9c401217 	ldw	r17,72(r19)
  8077e8:	8800061e 	bne	r17,zero,807804 <__pow5mult+0x58>
  8077ec:	00003406 	br	8078c0 <__pow5mult+0x114>
  8077f0:	8021d07a 	srai	r16,r16,1
  8077f4:	80001526 	beq	r16,zero,80784c <__pow5mult+0xa0>
  8077f8:	88800017 	ldw	r2,0(r17)
  8077fc:	10001c26 	beq	r2,zero,807870 <__pow5mult+0xc4>
  807800:	1023883a 	mov	r17,r2
  807804:	8080004c 	andi	r2,r16,1
  807808:	103ff926 	beq	r2,zero,8077f0 <__alt_mem_onchip_mem+0xff7877f0>
  80780c:	880d883a 	mov	r6,r17
  807810:	900b883a 	mov	r5,r18
  807814:	9809883a 	mov	r4,r19
  807818:	08075b40 	call	8075b4 <__multiply>
  80781c:	90001b26 	beq	r18,zero,80788c <__pow5mult+0xe0>
  807820:	91000117 	ldw	r4,4(r18)
  807824:	98c01317 	ldw	r3,76(r19)
  807828:	8021d07a 	srai	r16,r16,1
  80782c:	2109883a 	add	r4,r4,r4
  807830:	2109883a 	add	r4,r4,r4
  807834:	1907883a 	add	r3,r3,r4
  807838:	19000017 	ldw	r4,0(r3)
  80783c:	91000015 	stw	r4,0(r18)
  807840:	1c800015 	stw	r18,0(r3)
  807844:	1025883a 	mov	r18,r2
  807848:	803feb1e 	bne	r16,zero,8077f8 <__alt_mem_onchip_mem+0xff7877f8>
  80784c:	9005883a 	mov	r2,r18
  807850:	dfc00517 	ldw	ra,20(sp)
  807854:	dd000417 	ldw	r20,16(sp)
  807858:	dcc00317 	ldw	r19,12(sp)
  80785c:	dc800217 	ldw	r18,8(sp)
  807860:	dc400117 	ldw	r17,4(sp)
  807864:	dc000017 	ldw	r16,0(sp)
  807868:	dec00604 	addi	sp,sp,24
  80786c:	f800283a 	ret
  807870:	880d883a 	mov	r6,r17
  807874:	880b883a 	mov	r5,r17
  807878:	9809883a 	mov	r4,r19
  80787c:	08075b40 	call	8075b4 <__multiply>
  807880:	88800015 	stw	r2,0(r17)
  807884:	10000015 	stw	zero,0(r2)
  807888:	003fdd06 	br	807800 <__alt_mem_onchip_mem+0xff787800>
  80788c:	1025883a 	mov	r18,r2
  807890:	003fd706 	br	8077f0 <__alt_mem_onchip_mem+0xff7877f0>
  807894:	10bfffc4 	addi	r2,r2,-1
  807898:	1085883a 	add	r2,r2,r2
  80789c:	00c02074 	movhi	r3,129
  8078a0:	18c8bc04 	addi	r3,r3,8944
  8078a4:	1085883a 	add	r2,r2,r2
  8078a8:	1885883a 	add	r2,r3,r2
  8078ac:	11800017 	ldw	r6,0(r2)
  8078b0:	000f883a 	mov	r7,zero
  8078b4:	080723c0 	call	80723c <__multadd>
  8078b8:	1025883a 	mov	r18,r2
  8078bc:	003fc706 	br	8077dc <__alt_mem_onchip_mem+0xff7877dc>
  8078c0:	05000044 	movi	r20,1
  8078c4:	a00b883a 	mov	r5,r20
  8078c8:	9809883a 	mov	r4,r19
  8078cc:	080716c0 	call	80716c <_Balloc>
  8078d0:	1023883a 	mov	r17,r2
  8078d4:	00809c44 	movi	r2,625
  8078d8:	88800515 	stw	r2,20(r17)
  8078dc:	8d000415 	stw	r20,16(r17)
  8078e0:	9c401215 	stw	r17,72(r19)
  8078e4:	88000015 	stw	zero,0(r17)
  8078e8:	003fc606 	br	807804 <__alt_mem_onchip_mem+0xff787804>

008078ec <__lshift>:
  8078ec:	defff904 	addi	sp,sp,-28
  8078f0:	dd400515 	stw	r21,20(sp)
  8078f4:	dcc00315 	stw	r19,12(sp)
  8078f8:	302bd17a 	srai	r21,r6,5
  8078fc:	2cc00417 	ldw	r19,16(r5)
  807900:	28800217 	ldw	r2,8(r5)
  807904:	dd000415 	stw	r20,16(sp)
  807908:	ace7883a 	add	r19,r21,r19
  80790c:	dc800215 	stw	r18,8(sp)
  807910:	dc400115 	stw	r17,4(sp)
  807914:	dc000015 	stw	r16,0(sp)
  807918:	dfc00615 	stw	ra,24(sp)
  80791c:	9c000044 	addi	r16,r19,1
  807920:	2823883a 	mov	r17,r5
  807924:	3029883a 	mov	r20,r6
  807928:	2025883a 	mov	r18,r4
  80792c:	29400117 	ldw	r5,4(r5)
  807930:	1400030e 	bge	r2,r16,807940 <__lshift+0x54>
  807934:	1085883a 	add	r2,r2,r2
  807938:	29400044 	addi	r5,r5,1
  80793c:	143ffd16 	blt	r2,r16,807934 <__alt_mem_onchip_mem+0xff787934>
  807940:	9009883a 	mov	r4,r18
  807944:	080716c0 	call	80716c <_Balloc>
  807948:	10c00504 	addi	r3,r2,20
  80794c:	0540070e 	bge	zero,r21,80796c <__lshift+0x80>
  807950:	ad6b883a 	add	r21,r21,r21
  807954:	ad6b883a 	add	r21,r21,r21
  807958:	1809883a 	mov	r4,r3
  80795c:	1d47883a 	add	r3,r3,r21
  807960:	20000015 	stw	zero,0(r4)
  807964:	21000104 	addi	r4,r4,4
  807968:	193ffd1e 	bne	r3,r4,807960 <__alt_mem_onchip_mem+0xff787960>
  80796c:	8a000417 	ldw	r8,16(r17)
  807970:	89000504 	addi	r4,r17,20
  807974:	a18007cc 	andi	r6,r20,31
  807978:	4211883a 	add	r8,r8,r8
  80797c:	4211883a 	add	r8,r8,r8
  807980:	2211883a 	add	r8,r4,r8
  807984:	30002326 	beq	r6,zero,807a14 <__lshift+0x128>
  807988:	02400804 	movi	r9,32
  80798c:	4993c83a 	sub	r9,r9,r6
  807990:	000b883a 	mov	r5,zero
  807994:	21c00017 	ldw	r7,0(r4)
  807998:	1815883a 	mov	r10,r3
  80799c:	18c00104 	addi	r3,r3,4
  8079a0:	398e983a 	sll	r7,r7,r6
  8079a4:	21000104 	addi	r4,r4,4
  8079a8:	394ab03a 	or	r5,r7,r5
  8079ac:	197fff15 	stw	r5,-4(r3)
  8079b0:	217fff17 	ldw	r5,-4(r4)
  8079b4:	2a4ad83a 	srl	r5,r5,r9
  8079b8:	223ff636 	bltu	r4,r8,807994 <__alt_mem_onchip_mem+0xff787994>
  8079bc:	51400115 	stw	r5,4(r10)
  8079c0:	28001a1e 	bne	r5,zero,807a2c <__lshift+0x140>
  8079c4:	843fffc4 	addi	r16,r16,-1
  8079c8:	14000415 	stw	r16,16(r2)
  8079cc:	88000826 	beq	r17,zero,8079f0 <__lshift+0x104>
  8079d0:	89000117 	ldw	r4,4(r17)
  8079d4:	90c01317 	ldw	r3,76(r18)
  8079d8:	2109883a 	add	r4,r4,r4
  8079dc:	2109883a 	add	r4,r4,r4
  8079e0:	1907883a 	add	r3,r3,r4
  8079e4:	19000017 	ldw	r4,0(r3)
  8079e8:	89000015 	stw	r4,0(r17)
  8079ec:	1c400015 	stw	r17,0(r3)
  8079f0:	dfc00617 	ldw	ra,24(sp)
  8079f4:	dd400517 	ldw	r21,20(sp)
  8079f8:	dd000417 	ldw	r20,16(sp)
  8079fc:	dcc00317 	ldw	r19,12(sp)
  807a00:	dc800217 	ldw	r18,8(sp)
  807a04:	dc400117 	ldw	r17,4(sp)
  807a08:	dc000017 	ldw	r16,0(sp)
  807a0c:	dec00704 	addi	sp,sp,28
  807a10:	f800283a 	ret
  807a14:	21400017 	ldw	r5,0(r4)
  807a18:	18c00104 	addi	r3,r3,4
  807a1c:	21000104 	addi	r4,r4,4
  807a20:	197fff15 	stw	r5,-4(r3)
  807a24:	223ffb36 	bltu	r4,r8,807a14 <__alt_mem_onchip_mem+0xff787a14>
  807a28:	003fe606 	br	8079c4 <__alt_mem_onchip_mem+0xff7879c4>
  807a2c:	9c000084 	addi	r16,r19,2
  807a30:	003fe406 	br	8079c4 <__alt_mem_onchip_mem+0xff7879c4>

00807a34 <__mcmp>:
  807a34:	20800417 	ldw	r2,16(r4)
  807a38:	28c00417 	ldw	r3,16(r5)
  807a3c:	10c5c83a 	sub	r2,r2,r3
  807a40:	1000111e 	bne	r2,zero,807a88 <__mcmp+0x54>
  807a44:	18c7883a 	add	r3,r3,r3
  807a48:	18c7883a 	add	r3,r3,r3
  807a4c:	21000504 	addi	r4,r4,20
  807a50:	29400504 	addi	r5,r5,20
  807a54:	20c5883a 	add	r2,r4,r3
  807a58:	28cb883a 	add	r5,r5,r3
  807a5c:	00000106 	br	807a64 <__mcmp+0x30>
  807a60:	20800a2e 	bgeu	r4,r2,807a8c <__mcmp+0x58>
  807a64:	10bfff04 	addi	r2,r2,-4
  807a68:	297fff04 	addi	r5,r5,-4
  807a6c:	11800017 	ldw	r6,0(r2)
  807a70:	28c00017 	ldw	r3,0(r5)
  807a74:	30fffa26 	beq	r6,r3,807a60 <__alt_mem_onchip_mem+0xff787a60>
  807a78:	30c00236 	bltu	r6,r3,807a84 <__mcmp+0x50>
  807a7c:	00800044 	movi	r2,1
  807a80:	f800283a 	ret
  807a84:	00bfffc4 	movi	r2,-1
  807a88:	f800283a 	ret
  807a8c:	0005883a 	mov	r2,zero
  807a90:	f800283a 	ret

00807a94 <__mdiff>:
  807a94:	28c00417 	ldw	r3,16(r5)
  807a98:	30800417 	ldw	r2,16(r6)
  807a9c:	defffa04 	addi	sp,sp,-24
  807aa0:	dcc00315 	stw	r19,12(sp)
  807aa4:	dc800215 	stw	r18,8(sp)
  807aa8:	dfc00515 	stw	ra,20(sp)
  807aac:	dd000415 	stw	r20,16(sp)
  807ab0:	dc400115 	stw	r17,4(sp)
  807ab4:	dc000015 	stw	r16,0(sp)
  807ab8:	1887c83a 	sub	r3,r3,r2
  807abc:	2825883a 	mov	r18,r5
  807ac0:	3027883a 	mov	r19,r6
  807ac4:	1800141e 	bne	r3,zero,807b18 <__mdiff+0x84>
  807ac8:	1085883a 	add	r2,r2,r2
  807acc:	1085883a 	add	r2,r2,r2
  807ad0:	2a000504 	addi	r8,r5,20
  807ad4:	34000504 	addi	r16,r6,20
  807ad8:	4087883a 	add	r3,r8,r2
  807adc:	8085883a 	add	r2,r16,r2
  807ae0:	00000106 	br	807ae8 <__mdiff+0x54>
  807ae4:	40c0592e 	bgeu	r8,r3,807c4c <__mdiff+0x1b8>
  807ae8:	18ffff04 	addi	r3,r3,-4
  807aec:	10bfff04 	addi	r2,r2,-4
  807af0:	19c00017 	ldw	r7,0(r3)
  807af4:	11400017 	ldw	r5,0(r2)
  807af8:	397ffa26 	beq	r7,r5,807ae4 <__alt_mem_onchip_mem+0xff787ae4>
  807afc:	3940592e 	bgeu	r7,r5,807c64 <__mdiff+0x1d0>
  807b00:	9005883a 	mov	r2,r18
  807b04:	4023883a 	mov	r17,r8
  807b08:	9825883a 	mov	r18,r19
  807b0c:	05000044 	movi	r20,1
  807b10:	1027883a 	mov	r19,r2
  807b14:	00000406 	br	807b28 <__mdiff+0x94>
  807b18:	18005616 	blt	r3,zero,807c74 <__mdiff+0x1e0>
  807b1c:	34400504 	addi	r17,r6,20
  807b20:	2c000504 	addi	r16,r5,20
  807b24:	0029883a 	mov	r20,zero
  807b28:	91400117 	ldw	r5,4(r18)
  807b2c:	080716c0 	call	80716c <_Balloc>
  807b30:	92400417 	ldw	r9,16(r18)
  807b34:	9b000417 	ldw	r12,16(r19)
  807b38:	12c00504 	addi	r11,r2,20
  807b3c:	4a51883a 	add	r8,r9,r9
  807b40:	6319883a 	add	r12,r12,r12
  807b44:	4211883a 	add	r8,r8,r8
  807b48:	6319883a 	add	r12,r12,r12
  807b4c:	15000315 	stw	r20,12(r2)
  807b50:	8211883a 	add	r8,r16,r8
  807b54:	8b19883a 	add	r12,r17,r12
  807b58:	0007883a 	mov	r3,zero
  807b5c:	81400017 	ldw	r5,0(r16)
  807b60:	89c00017 	ldw	r7,0(r17)
  807b64:	59800104 	addi	r6,r11,4
  807b68:	293fffcc 	andi	r4,r5,65535
  807b6c:	20c7883a 	add	r3,r4,r3
  807b70:	393fffcc 	andi	r4,r7,65535
  807b74:	1909c83a 	sub	r4,r3,r4
  807b78:	280ad43a 	srli	r5,r5,16
  807b7c:	380ed43a 	srli	r7,r7,16
  807b80:	2007d43a 	srai	r3,r4,16
  807b84:	213fffcc 	andi	r4,r4,65535
  807b88:	29cbc83a 	sub	r5,r5,r7
  807b8c:	28c7883a 	add	r3,r5,r3
  807b90:	180a943a 	slli	r5,r3,16
  807b94:	8c400104 	addi	r17,r17,4
  807b98:	84000104 	addi	r16,r16,4
  807b9c:	2908b03a 	or	r4,r5,r4
  807ba0:	59000015 	stw	r4,0(r11)
  807ba4:	1807d43a 	srai	r3,r3,16
  807ba8:	3015883a 	mov	r10,r6
  807bac:	3017883a 	mov	r11,r6
  807bb0:	8b3fea36 	bltu	r17,r12,807b5c <__alt_mem_onchip_mem+0xff787b5c>
  807bb4:	8200162e 	bgeu	r16,r8,807c10 <__mdiff+0x17c>
  807bb8:	8017883a 	mov	r11,r16
  807bbc:	59400017 	ldw	r5,0(r11)
  807bc0:	31800104 	addi	r6,r6,4
  807bc4:	5ac00104 	addi	r11,r11,4
  807bc8:	293fffcc 	andi	r4,r5,65535
  807bcc:	20c7883a 	add	r3,r4,r3
  807bd0:	280ed43a 	srli	r7,r5,16
  807bd4:	180bd43a 	srai	r5,r3,16
  807bd8:	193fffcc 	andi	r4,r3,65535
  807bdc:	3947883a 	add	r3,r7,r5
  807be0:	180a943a 	slli	r5,r3,16
  807be4:	1807d43a 	srai	r3,r3,16
  807be8:	2908b03a 	or	r4,r5,r4
  807bec:	313fff15 	stw	r4,-4(r6)
  807bf0:	5a3ff236 	bltu	r11,r8,807bbc <__alt_mem_onchip_mem+0xff787bbc>
  807bf4:	0406303a 	nor	r3,zero,r16
  807bf8:	1a07883a 	add	r3,r3,r8
  807bfc:	1806d0ba 	srli	r3,r3,2
  807c00:	18c00044 	addi	r3,r3,1
  807c04:	18c7883a 	add	r3,r3,r3
  807c08:	18c7883a 	add	r3,r3,r3
  807c0c:	50d5883a 	add	r10,r10,r3
  807c10:	50ffff04 	addi	r3,r10,-4
  807c14:	2000041e 	bne	r4,zero,807c28 <__mdiff+0x194>
  807c18:	18ffff04 	addi	r3,r3,-4
  807c1c:	19000017 	ldw	r4,0(r3)
  807c20:	4a7fffc4 	addi	r9,r9,-1
  807c24:	203ffc26 	beq	r4,zero,807c18 <__alt_mem_onchip_mem+0xff787c18>
  807c28:	12400415 	stw	r9,16(r2)
  807c2c:	dfc00517 	ldw	ra,20(sp)
  807c30:	dd000417 	ldw	r20,16(sp)
  807c34:	dcc00317 	ldw	r19,12(sp)
  807c38:	dc800217 	ldw	r18,8(sp)
  807c3c:	dc400117 	ldw	r17,4(sp)
  807c40:	dc000017 	ldw	r16,0(sp)
  807c44:	dec00604 	addi	sp,sp,24
  807c48:	f800283a 	ret
  807c4c:	000b883a 	mov	r5,zero
  807c50:	080716c0 	call	80716c <_Balloc>
  807c54:	00c00044 	movi	r3,1
  807c58:	10c00415 	stw	r3,16(r2)
  807c5c:	10000515 	stw	zero,20(r2)
  807c60:	003ff206 	br	807c2c <__alt_mem_onchip_mem+0xff787c2c>
  807c64:	8023883a 	mov	r17,r16
  807c68:	0029883a 	mov	r20,zero
  807c6c:	4021883a 	mov	r16,r8
  807c70:	003fad06 	br	807b28 <__alt_mem_onchip_mem+0xff787b28>
  807c74:	9005883a 	mov	r2,r18
  807c78:	94400504 	addi	r17,r18,20
  807c7c:	9c000504 	addi	r16,r19,20
  807c80:	9825883a 	mov	r18,r19
  807c84:	05000044 	movi	r20,1
  807c88:	1027883a 	mov	r19,r2
  807c8c:	003fa606 	br	807b28 <__alt_mem_onchip_mem+0xff787b28>

00807c90 <__ulp>:
  807c90:	295ffc2c 	andhi	r5,r5,32752
  807c94:	00bf3034 	movhi	r2,64704
  807c98:	2887883a 	add	r3,r5,r2
  807c9c:	00c0020e 	bge	zero,r3,807ca8 <__ulp+0x18>
  807ca0:	0005883a 	mov	r2,zero
  807ca4:	f800283a 	ret
  807ca8:	00c7c83a 	sub	r3,zero,r3
  807cac:	1807d53a 	srai	r3,r3,20
  807cb0:	008004c4 	movi	r2,19
  807cb4:	10c00b0e 	bge	r2,r3,807ce4 <__ulp+0x54>
  807cb8:	18bffb04 	addi	r2,r3,-20
  807cbc:	01000784 	movi	r4,30
  807cc0:	0007883a 	mov	r3,zero
  807cc4:	20800516 	blt	r4,r2,807cdc <__ulp+0x4c>
  807cc8:	010007c4 	movi	r4,31
  807ccc:	2089c83a 	sub	r4,r4,r2
  807cd0:	00800044 	movi	r2,1
  807cd4:	1104983a 	sll	r2,r2,r4
  807cd8:	f800283a 	ret
  807cdc:	00800044 	movi	r2,1
  807ce0:	f800283a 	ret
  807ce4:	01400234 	movhi	r5,8
  807ce8:	28c7d83a 	sra	r3,r5,r3
  807cec:	0005883a 	mov	r2,zero
  807cf0:	f800283a 	ret

00807cf4 <__b2d>:
  807cf4:	defffa04 	addi	sp,sp,-24
  807cf8:	dc000015 	stw	r16,0(sp)
  807cfc:	24000417 	ldw	r16,16(r4)
  807d00:	dc400115 	stw	r17,4(sp)
  807d04:	24400504 	addi	r17,r4,20
  807d08:	8421883a 	add	r16,r16,r16
  807d0c:	8421883a 	add	r16,r16,r16
  807d10:	8c21883a 	add	r16,r17,r16
  807d14:	dc800215 	stw	r18,8(sp)
  807d18:	84bfff17 	ldw	r18,-4(r16)
  807d1c:	dd000415 	stw	r20,16(sp)
  807d20:	dcc00315 	stw	r19,12(sp)
  807d24:	9009883a 	mov	r4,r18
  807d28:	2829883a 	mov	r20,r5
  807d2c:	dfc00515 	stw	ra,20(sp)
  807d30:	08074600 	call	807460 <__hi0bits>
  807d34:	00c00804 	movi	r3,32
  807d38:	1889c83a 	sub	r4,r3,r2
  807d3c:	a1000015 	stw	r4,0(r20)
  807d40:	01000284 	movi	r4,10
  807d44:	84ffff04 	addi	r19,r16,-4
  807d48:	20801216 	blt	r4,r2,807d94 <__b2d+0xa0>
  807d4c:	018002c4 	movi	r6,11
  807d50:	308dc83a 	sub	r6,r6,r2
  807d54:	9186d83a 	srl	r3,r18,r6
  807d58:	18cffc34 	orhi	r3,r3,16368
  807d5c:	8cc0212e 	bgeu	r17,r19,807de4 <__b2d+0xf0>
  807d60:	813ffe17 	ldw	r4,-8(r16)
  807d64:	218cd83a 	srl	r6,r4,r6
  807d68:	10800544 	addi	r2,r2,21
  807d6c:	9084983a 	sll	r2,r18,r2
  807d70:	1184b03a 	or	r2,r2,r6
  807d74:	dfc00517 	ldw	ra,20(sp)
  807d78:	dd000417 	ldw	r20,16(sp)
  807d7c:	dcc00317 	ldw	r19,12(sp)
  807d80:	dc800217 	ldw	r18,8(sp)
  807d84:	dc400117 	ldw	r17,4(sp)
  807d88:	dc000017 	ldw	r16,0(sp)
  807d8c:	dec00604 	addi	sp,sp,24
  807d90:	f800283a 	ret
  807d94:	8cc00f2e 	bgeu	r17,r19,807dd4 <__b2d+0xe0>
  807d98:	117ffd44 	addi	r5,r2,-11
  807d9c:	80bffe17 	ldw	r2,-8(r16)
  807da0:	28000e26 	beq	r5,zero,807ddc <__b2d+0xe8>
  807da4:	1949c83a 	sub	r4,r3,r5
  807da8:	9164983a 	sll	r18,r18,r5
  807dac:	1106d83a 	srl	r3,r2,r4
  807db0:	81bffe04 	addi	r6,r16,-8
  807db4:	948ffc34 	orhi	r18,r18,16368
  807db8:	90c6b03a 	or	r3,r18,r3
  807dbc:	89800e2e 	bgeu	r17,r6,807df8 <__b2d+0x104>
  807dc0:	81bffd17 	ldw	r6,-12(r16)
  807dc4:	1144983a 	sll	r2,r2,r5
  807dc8:	310ad83a 	srl	r5,r6,r4
  807dcc:	2884b03a 	or	r2,r5,r2
  807dd0:	003fe806 	br	807d74 <__alt_mem_onchip_mem+0xff787d74>
  807dd4:	10bffd44 	addi	r2,r2,-11
  807dd8:	1000041e 	bne	r2,zero,807dec <__b2d+0xf8>
  807ddc:	90cffc34 	orhi	r3,r18,16368
  807de0:	003fe406 	br	807d74 <__alt_mem_onchip_mem+0xff787d74>
  807de4:	000d883a 	mov	r6,zero
  807de8:	003fdf06 	br	807d68 <__alt_mem_onchip_mem+0xff787d68>
  807dec:	90a4983a 	sll	r18,r18,r2
  807df0:	0005883a 	mov	r2,zero
  807df4:	003ff906 	br	807ddc <__alt_mem_onchip_mem+0xff787ddc>
  807df8:	1144983a 	sll	r2,r2,r5
  807dfc:	003fdd06 	br	807d74 <__alt_mem_onchip_mem+0xff787d74>

00807e00 <__d2b>:
  807e00:	defff804 	addi	sp,sp,-32
  807e04:	dc000215 	stw	r16,8(sp)
  807e08:	3021883a 	mov	r16,r6
  807e0c:	dc400315 	stw	r17,12(sp)
  807e10:	8022907a 	slli	r17,r16,1
  807e14:	dd000615 	stw	r20,24(sp)
  807e18:	2829883a 	mov	r20,r5
  807e1c:	01400044 	movi	r5,1
  807e20:	dcc00515 	stw	r19,20(sp)
  807e24:	dc800415 	stw	r18,16(sp)
  807e28:	dfc00715 	stw	ra,28(sp)
  807e2c:	3825883a 	mov	r18,r7
  807e30:	8822d57a 	srli	r17,r17,21
  807e34:	080716c0 	call	80716c <_Balloc>
  807e38:	1027883a 	mov	r19,r2
  807e3c:	00800434 	movhi	r2,16
  807e40:	10bfffc4 	addi	r2,r2,-1
  807e44:	808c703a 	and	r6,r16,r2
  807e48:	88000126 	beq	r17,zero,807e50 <__d2b+0x50>
  807e4c:	31800434 	orhi	r6,r6,16
  807e50:	d9800015 	stw	r6,0(sp)
  807e54:	a0002426 	beq	r20,zero,807ee8 <__d2b+0xe8>
  807e58:	d9000104 	addi	r4,sp,4
  807e5c:	dd000115 	stw	r20,4(sp)
  807e60:	08074c80 	call	8074c8 <__lo0bits>
  807e64:	d8c00017 	ldw	r3,0(sp)
  807e68:	10002f1e 	bne	r2,zero,807f28 <__d2b+0x128>
  807e6c:	d9000117 	ldw	r4,4(sp)
  807e70:	99000515 	stw	r4,20(r19)
  807e74:	1821003a 	cmpeq	r16,r3,zero
  807e78:	01000084 	movi	r4,2
  807e7c:	2421c83a 	sub	r16,r4,r16
  807e80:	98c00615 	stw	r3,24(r19)
  807e84:	9c000415 	stw	r16,16(r19)
  807e88:	88001f1e 	bne	r17,zero,807f08 <__d2b+0x108>
  807e8c:	10bef384 	addi	r2,r2,-1074
  807e90:	90800015 	stw	r2,0(r18)
  807e94:	00900034 	movhi	r2,16384
  807e98:	10bfffc4 	addi	r2,r2,-1
  807e9c:	8085883a 	add	r2,r16,r2
  807ea0:	1085883a 	add	r2,r2,r2
  807ea4:	1085883a 	add	r2,r2,r2
  807ea8:	9885883a 	add	r2,r19,r2
  807eac:	11000517 	ldw	r4,20(r2)
  807eb0:	8020917a 	slli	r16,r16,5
  807eb4:	08074600 	call	807460 <__hi0bits>
  807eb8:	d8c00817 	ldw	r3,32(sp)
  807ebc:	8085c83a 	sub	r2,r16,r2
  807ec0:	18800015 	stw	r2,0(r3)
  807ec4:	9805883a 	mov	r2,r19
  807ec8:	dfc00717 	ldw	ra,28(sp)
  807ecc:	dd000617 	ldw	r20,24(sp)
  807ed0:	dcc00517 	ldw	r19,20(sp)
  807ed4:	dc800417 	ldw	r18,16(sp)
  807ed8:	dc400317 	ldw	r17,12(sp)
  807edc:	dc000217 	ldw	r16,8(sp)
  807ee0:	dec00804 	addi	sp,sp,32
  807ee4:	f800283a 	ret
  807ee8:	d809883a 	mov	r4,sp
  807eec:	08074c80 	call	8074c8 <__lo0bits>
  807ef0:	d8c00017 	ldw	r3,0(sp)
  807ef4:	04000044 	movi	r16,1
  807ef8:	9c000415 	stw	r16,16(r19)
  807efc:	98c00515 	stw	r3,20(r19)
  807f00:	10800804 	addi	r2,r2,32
  807f04:	883fe126 	beq	r17,zero,807e8c <__alt_mem_onchip_mem+0xff787e8c>
  807f08:	00c00d44 	movi	r3,53
  807f0c:	8c7ef344 	addi	r17,r17,-1075
  807f10:	88a3883a 	add	r17,r17,r2
  807f14:	1885c83a 	sub	r2,r3,r2
  807f18:	d8c00817 	ldw	r3,32(sp)
  807f1c:	94400015 	stw	r17,0(r18)
  807f20:	18800015 	stw	r2,0(r3)
  807f24:	003fe706 	br	807ec4 <__alt_mem_onchip_mem+0xff787ec4>
  807f28:	01000804 	movi	r4,32
  807f2c:	2089c83a 	sub	r4,r4,r2
  807f30:	1908983a 	sll	r4,r3,r4
  807f34:	d9400117 	ldw	r5,4(sp)
  807f38:	1886d83a 	srl	r3,r3,r2
  807f3c:	2148b03a 	or	r4,r4,r5
  807f40:	99000515 	stw	r4,20(r19)
  807f44:	d8c00015 	stw	r3,0(sp)
  807f48:	003fca06 	br	807e74 <__alt_mem_onchip_mem+0xff787e74>

00807f4c <__ratio>:
  807f4c:	defff904 	addi	sp,sp,-28
  807f50:	dc400315 	stw	r17,12(sp)
  807f54:	2823883a 	mov	r17,r5
  807f58:	d9400104 	addi	r5,sp,4
  807f5c:	dfc00615 	stw	ra,24(sp)
  807f60:	dcc00515 	stw	r19,20(sp)
  807f64:	dc800415 	stw	r18,16(sp)
  807f68:	2027883a 	mov	r19,r4
  807f6c:	dc000215 	stw	r16,8(sp)
  807f70:	0807cf40 	call	807cf4 <__b2d>
  807f74:	d80b883a 	mov	r5,sp
  807f78:	8809883a 	mov	r4,r17
  807f7c:	1025883a 	mov	r18,r2
  807f80:	1821883a 	mov	r16,r3
  807f84:	0807cf40 	call	807cf4 <__b2d>
  807f88:	8a000417 	ldw	r8,16(r17)
  807f8c:	99000417 	ldw	r4,16(r19)
  807f90:	d9400117 	ldw	r5,4(sp)
  807f94:	2209c83a 	sub	r4,r4,r8
  807f98:	2010917a 	slli	r8,r4,5
  807f9c:	d9000017 	ldw	r4,0(sp)
  807fa0:	2909c83a 	sub	r4,r5,r4
  807fa4:	4109883a 	add	r4,r8,r4
  807fa8:	01000e0e 	bge	zero,r4,807fe4 <__ratio+0x98>
  807fac:	2008953a 	slli	r4,r4,20
  807fb0:	2421883a 	add	r16,r4,r16
  807fb4:	100d883a 	mov	r6,r2
  807fb8:	180f883a 	mov	r7,r3
  807fbc:	9009883a 	mov	r4,r18
  807fc0:	800b883a 	mov	r5,r16
  807fc4:	080c1940 	call	80c194 <__divdf3>
  807fc8:	dfc00617 	ldw	ra,24(sp)
  807fcc:	dcc00517 	ldw	r19,20(sp)
  807fd0:	dc800417 	ldw	r18,16(sp)
  807fd4:	dc400317 	ldw	r17,12(sp)
  807fd8:	dc000217 	ldw	r16,8(sp)
  807fdc:	dec00704 	addi	sp,sp,28
  807fe0:	f800283a 	ret
  807fe4:	2008953a 	slli	r4,r4,20
  807fe8:	1907c83a 	sub	r3,r3,r4
  807fec:	003ff106 	br	807fb4 <__alt_mem_onchip_mem+0xff787fb4>

00807ff0 <_mprec_log10>:
  807ff0:	defffe04 	addi	sp,sp,-8
  807ff4:	dc000015 	stw	r16,0(sp)
  807ff8:	dfc00115 	stw	ra,4(sp)
  807ffc:	008005c4 	movi	r2,23
  808000:	2021883a 	mov	r16,r4
  808004:	11000d0e 	bge	r2,r4,80803c <_mprec_log10+0x4c>
  808008:	0005883a 	mov	r2,zero
  80800c:	00cffc34 	movhi	r3,16368
  808010:	843fffc4 	addi	r16,r16,-1
  808014:	000d883a 	mov	r6,zero
  808018:	01d00934 	movhi	r7,16420
  80801c:	1009883a 	mov	r4,r2
  808020:	180b883a 	mov	r5,r3
  808024:	080ccd40 	call	80ccd4 <__muldf3>
  808028:	803ff91e 	bne	r16,zero,808010 <__alt_mem_onchip_mem+0xff788010>
  80802c:	dfc00117 	ldw	ra,4(sp)
  808030:	dc000017 	ldw	r16,0(sp)
  808034:	dec00204 	addi	sp,sp,8
  808038:	f800283a 	ret
  80803c:	202090fa 	slli	r16,r4,3
  808040:	00802074 	movhi	r2,129
  808044:	1088d304 	addi	r2,r2,9036
  808048:	1421883a 	add	r16,r2,r16
  80804c:	80800017 	ldw	r2,0(r16)
  808050:	80c00117 	ldw	r3,4(r16)
  808054:	dfc00117 	ldw	ra,4(sp)
  808058:	dc000017 	ldw	r16,0(sp)
  80805c:	dec00204 	addi	sp,sp,8
  808060:	f800283a 	ret

00808064 <__copybits>:
  808064:	297fffc4 	addi	r5,r5,-1
  808068:	280fd17a 	srai	r7,r5,5
  80806c:	30c00417 	ldw	r3,16(r6)
  808070:	30800504 	addi	r2,r6,20
  808074:	39c00044 	addi	r7,r7,1
  808078:	18c7883a 	add	r3,r3,r3
  80807c:	39cf883a 	add	r7,r7,r7
  808080:	18c7883a 	add	r3,r3,r3
  808084:	39cf883a 	add	r7,r7,r7
  808088:	10c7883a 	add	r3,r2,r3
  80808c:	21cf883a 	add	r7,r4,r7
  808090:	10c00d2e 	bgeu	r2,r3,8080c8 <__copybits+0x64>
  808094:	200b883a 	mov	r5,r4
  808098:	12000017 	ldw	r8,0(r2)
  80809c:	29400104 	addi	r5,r5,4
  8080a0:	10800104 	addi	r2,r2,4
  8080a4:	2a3fff15 	stw	r8,-4(r5)
  8080a8:	10fffb36 	bltu	r2,r3,808098 <__alt_mem_onchip_mem+0xff788098>
  8080ac:	1985c83a 	sub	r2,r3,r6
  8080b0:	10bffac4 	addi	r2,r2,-21
  8080b4:	1004d0ba 	srli	r2,r2,2
  8080b8:	10800044 	addi	r2,r2,1
  8080bc:	1085883a 	add	r2,r2,r2
  8080c0:	1085883a 	add	r2,r2,r2
  8080c4:	2089883a 	add	r4,r4,r2
  8080c8:	21c0032e 	bgeu	r4,r7,8080d8 <__copybits+0x74>
  8080cc:	20000015 	stw	zero,0(r4)
  8080d0:	21000104 	addi	r4,r4,4
  8080d4:	21fffd36 	bltu	r4,r7,8080cc <__alt_mem_onchip_mem+0xff7880cc>
  8080d8:	f800283a 	ret

008080dc <__any_on>:
  8080dc:	20c00417 	ldw	r3,16(r4)
  8080e0:	2805d17a 	srai	r2,r5,5
  8080e4:	21000504 	addi	r4,r4,20
  8080e8:	18800d0e 	bge	r3,r2,808120 <__any_on+0x44>
  8080ec:	18c7883a 	add	r3,r3,r3
  8080f0:	18c7883a 	add	r3,r3,r3
  8080f4:	20c7883a 	add	r3,r4,r3
  8080f8:	20c0192e 	bgeu	r4,r3,808160 <__any_on+0x84>
  8080fc:	18bfff17 	ldw	r2,-4(r3)
  808100:	18ffff04 	addi	r3,r3,-4
  808104:	1000041e 	bne	r2,zero,808118 <__any_on+0x3c>
  808108:	20c0142e 	bgeu	r4,r3,80815c <__any_on+0x80>
  80810c:	18ffff04 	addi	r3,r3,-4
  808110:	19400017 	ldw	r5,0(r3)
  808114:	283ffc26 	beq	r5,zero,808108 <__alt_mem_onchip_mem+0xff788108>
  808118:	00800044 	movi	r2,1
  80811c:	f800283a 	ret
  808120:	10c00a0e 	bge	r2,r3,80814c <__any_on+0x70>
  808124:	1085883a 	add	r2,r2,r2
  808128:	1085883a 	add	r2,r2,r2
  80812c:	294007cc 	andi	r5,r5,31
  808130:	2087883a 	add	r3,r4,r2
  808134:	283ff026 	beq	r5,zero,8080f8 <__alt_mem_onchip_mem+0xff7880f8>
  808138:	19800017 	ldw	r6,0(r3)
  80813c:	3144d83a 	srl	r2,r6,r5
  808140:	114a983a 	sll	r5,r2,r5
  808144:	317ff41e 	bne	r6,r5,808118 <__alt_mem_onchip_mem+0xff788118>
  808148:	003feb06 	br	8080f8 <__alt_mem_onchip_mem+0xff7880f8>
  80814c:	1085883a 	add	r2,r2,r2
  808150:	1085883a 	add	r2,r2,r2
  808154:	2087883a 	add	r3,r4,r2
  808158:	003fe706 	br	8080f8 <__alt_mem_onchip_mem+0xff7880f8>
  80815c:	f800283a 	ret
  808160:	0005883a 	mov	r2,zero
  808164:	f800283a 	ret

00808168 <_read_r>:
  808168:	defffd04 	addi	sp,sp,-12
  80816c:	2805883a 	mov	r2,r5
  808170:	dc000015 	stw	r16,0(sp)
  808174:	04002074 	movhi	r16,129
  808178:	dc400115 	stw	r17,4(sp)
  80817c:	300b883a 	mov	r5,r6
  808180:	84187b04 	addi	r16,r16,25068
  808184:	2023883a 	mov	r17,r4
  808188:	380d883a 	mov	r6,r7
  80818c:	1009883a 	mov	r4,r2
  808190:	dfc00215 	stw	ra,8(sp)
  808194:	80000015 	stw	zero,0(r16)
  808198:	080ea500 	call	80ea50 <read>
  80819c:	00ffffc4 	movi	r3,-1
  8081a0:	10c00526 	beq	r2,r3,8081b8 <_read_r+0x50>
  8081a4:	dfc00217 	ldw	ra,8(sp)
  8081a8:	dc400117 	ldw	r17,4(sp)
  8081ac:	dc000017 	ldw	r16,0(sp)
  8081b0:	dec00304 	addi	sp,sp,12
  8081b4:	f800283a 	ret
  8081b8:	80c00017 	ldw	r3,0(r16)
  8081bc:	183ff926 	beq	r3,zero,8081a4 <__alt_mem_onchip_mem+0xff7881a4>
  8081c0:	88c00015 	stw	r3,0(r17)
  8081c4:	003ff706 	br	8081a4 <__alt_mem_onchip_mem+0xff7881a4>

008081c8 <__fpclassifyd>:
  8081c8:	00a00034 	movhi	r2,32768
  8081cc:	10bfffc4 	addi	r2,r2,-1
  8081d0:	2884703a 	and	r2,r5,r2
  8081d4:	10000726 	beq	r2,zero,8081f4 <__fpclassifyd+0x2c>
  8081d8:	00fffc34 	movhi	r3,65520
  8081dc:	019ff834 	movhi	r6,32736
  8081e0:	28c7883a 	add	r3,r5,r3
  8081e4:	31bfffc4 	addi	r6,r6,-1
  8081e8:	30c00536 	bltu	r6,r3,808200 <__fpclassifyd+0x38>
  8081ec:	00800104 	movi	r2,4
  8081f0:	f800283a 	ret
  8081f4:	2000021e 	bne	r4,zero,808200 <__fpclassifyd+0x38>
  8081f8:	00800084 	movi	r2,2
  8081fc:	f800283a 	ret
  808200:	00dffc34 	movhi	r3,32752
  808204:	019ff834 	movhi	r6,32736
  808208:	28cb883a 	add	r5,r5,r3
  80820c:	31bfffc4 	addi	r6,r6,-1
  808210:	317ff62e 	bgeu	r6,r5,8081ec <__alt_mem_onchip_mem+0xff7881ec>
  808214:	01400434 	movhi	r5,16
  808218:	297fffc4 	addi	r5,r5,-1
  80821c:	28800236 	bltu	r5,r2,808228 <__fpclassifyd+0x60>
  808220:	008000c4 	movi	r2,3
  808224:	f800283a 	ret
  808228:	10c00226 	beq	r2,r3,808234 <__fpclassifyd+0x6c>
  80822c:	0005883a 	mov	r2,zero
  808230:	f800283a 	ret
  808234:	2005003a 	cmpeq	r2,r4,zero
  808238:	f800283a 	ret

0080823c <strcmp>:
  80823c:	2144b03a 	or	r2,r4,r5
  808240:	108000cc 	andi	r2,r2,3
  808244:	1000171e 	bne	r2,zero,8082a4 <strcmp+0x68>
  808248:	20800017 	ldw	r2,0(r4)
  80824c:	28c00017 	ldw	r3,0(r5)
  808250:	10c0141e 	bne	r2,r3,8082a4 <strcmp+0x68>
  808254:	027fbff4 	movhi	r9,65279
  808258:	4a7fbfc4 	addi	r9,r9,-257
  80825c:	0086303a 	nor	r3,zero,r2
  808260:	02202074 	movhi	r8,32897
  808264:	1245883a 	add	r2,r2,r9
  808268:	42202004 	addi	r8,r8,-32640
  80826c:	10c4703a 	and	r2,r2,r3
  808270:	1204703a 	and	r2,r2,r8
  808274:	10000226 	beq	r2,zero,808280 <strcmp+0x44>
  808278:	00002306 	br	808308 <strcmp+0xcc>
  80827c:	1000221e 	bne	r2,zero,808308 <strcmp+0xcc>
  808280:	21000104 	addi	r4,r4,4
  808284:	20c00017 	ldw	r3,0(r4)
  808288:	29400104 	addi	r5,r5,4
  80828c:	29800017 	ldw	r6,0(r5)
  808290:	1a4f883a 	add	r7,r3,r9
  808294:	00c4303a 	nor	r2,zero,r3
  808298:	3884703a 	and	r2,r7,r2
  80829c:	1204703a 	and	r2,r2,r8
  8082a0:	19bff626 	beq	r3,r6,80827c <__alt_mem_onchip_mem+0xff78827c>
  8082a4:	20800003 	ldbu	r2,0(r4)
  8082a8:	10c03fcc 	andi	r3,r2,255
  8082ac:	18c0201c 	xori	r3,r3,128
  8082b0:	18ffe004 	addi	r3,r3,-128
  8082b4:	18000c26 	beq	r3,zero,8082e8 <strcmp+0xac>
  8082b8:	29800007 	ldb	r6,0(r5)
  8082bc:	19800326 	beq	r3,r6,8082cc <strcmp+0x90>
  8082c0:	00001306 	br	808310 <strcmp+0xd4>
  8082c4:	29800007 	ldb	r6,0(r5)
  8082c8:	11800b1e 	bne	r2,r6,8082f8 <strcmp+0xbc>
  8082cc:	21000044 	addi	r4,r4,1
  8082d0:	20c00003 	ldbu	r3,0(r4)
  8082d4:	29400044 	addi	r5,r5,1
  8082d8:	18803fcc 	andi	r2,r3,255
  8082dc:	1080201c 	xori	r2,r2,128
  8082e0:	10bfe004 	addi	r2,r2,-128
  8082e4:	103ff71e 	bne	r2,zero,8082c4 <__alt_mem_onchip_mem+0xff7882c4>
  8082e8:	0007883a 	mov	r3,zero
  8082ec:	28800003 	ldbu	r2,0(r5)
  8082f0:	1885c83a 	sub	r2,r3,r2
  8082f4:	f800283a 	ret
  8082f8:	28800003 	ldbu	r2,0(r5)
  8082fc:	18c03fcc 	andi	r3,r3,255
  808300:	1885c83a 	sub	r2,r3,r2
  808304:	f800283a 	ret
  808308:	0005883a 	mov	r2,zero
  80830c:	f800283a 	ret
  808310:	10c03fcc 	andi	r3,r2,255
  808314:	003ff506 	br	8082ec <__alt_mem_onchip_mem+0xff7882ec>

00808318 <strlen>:
  808318:	208000cc 	andi	r2,r4,3
  80831c:	10002026 	beq	r2,zero,8083a0 <strlen+0x88>
  808320:	20800007 	ldb	r2,0(r4)
  808324:	10002026 	beq	r2,zero,8083a8 <strlen+0x90>
  808328:	2005883a 	mov	r2,r4
  80832c:	00000206 	br	808338 <strlen+0x20>
  808330:	10c00007 	ldb	r3,0(r2)
  808334:	18001826 	beq	r3,zero,808398 <strlen+0x80>
  808338:	10800044 	addi	r2,r2,1
  80833c:	10c000cc 	andi	r3,r2,3
  808340:	183ffb1e 	bne	r3,zero,808330 <__alt_mem_onchip_mem+0xff788330>
  808344:	10c00017 	ldw	r3,0(r2)
  808348:	01ffbff4 	movhi	r7,65279
  80834c:	39ffbfc4 	addi	r7,r7,-257
  808350:	00ca303a 	nor	r5,zero,r3
  808354:	01a02074 	movhi	r6,32897
  808358:	19c7883a 	add	r3,r3,r7
  80835c:	31a02004 	addi	r6,r6,-32640
  808360:	1946703a 	and	r3,r3,r5
  808364:	1986703a 	and	r3,r3,r6
  808368:	1800091e 	bne	r3,zero,808390 <strlen+0x78>
  80836c:	10800104 	addi	r2,r2,4
  808370:	10c00017 	ldw	r3,0(r2)
  808374:	19cb883a 	add	r5,r3,r7
  808378:	00c6303a 	nor	r3,zero,r3
  80837c:	28c6703a 	and	r3,r5,r3
  808380:	1986703a 	and	r3,r3,r6
  808384:	183ff926 	beq	r3,zero,80836c <__alt_mem_onchip_mem+0xff78836c>
  808388:	00000106 	br	808390 <strlen+0x78>
  80838c:	10800044 	addi	r2,r2,1
  808390:	10c00007 	ldb	r3,0(r2)
  808394:	183ffd1e 	bne	r3,zero,80838c <__alt_mem_onchip_mem+0xff78838c>
  808398:	1105c83a 	sub	r2,r2,r4
  80839c:	f800283a 	ret
  8083a0:	2005883a 	mov	r2,r4
  8083a4:	003fe706 	br	808344 <__alt_mem_onchip_mem+0xff788344>
  8083a8:	0005883a 	mov	r2,zero
  8083ac:	f800283a 	ret

008083b0 <__sprint_r.part.0>:
  8083b0:	28801917 	ldw	r2,100(r5)
  8083b4:	defff604 	addi	sp,sp,-40
  8083b8:	dd400515 	stw	r21,20(sp)
  8083bc:	dfc00915 	stw	ra,36(sp)
  8083c0:	df000815 	stw	fp,32(sp)
  8083c4:	ddc00715 	stw	r23,28(sp)
  8083c8:	dd800615 	stw	r22,24(sp)
  8083cc:	dd000415 	stw	r20,16(sp)
  8083d0:	dcc00315 	stw	r19,12(sp)
  8083d4:	dc800215 	stw	r18,8(sp)
  8083d8:	dc400115 	stw	r17,4(sp)
  8083dc:	dc000015 	stw	r16,0(sp)
  8083e0:	1088000c 	andi	r2,r2,8192
  8083e4:	302b883a 	mov	r21,r6
  8083e8:	10002e26 	beq	r2,zero,8084a4 <__sprint_r.part.0+0xf4>
  8083ec:	30800217 	ldw	r2,8(r6)
  8083f0:	35800017 	ldw	r22,0(r6)
  8083f4:	10002926 	beq	r2,zero,80849c <__sprint_r.part.0+0xec>
  8083f8:	2827883a 	mov	r19,r5
  8083fc:	2029883a 	mov	r20,r4
  808400:	b5c00104 	addi	r23,r22,4
  808404:	04bfffc4 	movi	r18,-1
  808408:	bc400017 	ldw	r17,0(r23)
  80840c:	b4000017 	ldw	r16,0(r22)
  808410:	0039883a 	mov	fp,zero
  808414:	8822d0ba 	srli	r17,r17,2
  808418:	8800031e 	bne	r17,zero,808428 <__sprint_r.part.0+0x78>
  80841c:	00001806 	br	808480 <__sprint_r.part.0+0xd0>
  808420:	84000104 	addi	r16,r16,4
  808424:	8f001526 	beq	r17,fp,80847c <__sprint_r.part.0+0xcc>
  808428:	81400017 	ldw	r5,0(r16)
  80842c:	980d883a 	mov	r6,r19
  808430:	a009883a 	mov	r4,r20
  808434:	0809d240 	call	809d24 <_fputwc_r>
  808438:	e7000044 	addi	fp,fp,1
  80843c:	14bff81e 	bne	r2,r18,808420 <__alt_mem_onchip_mem+0xff788420>
  808440:	9005883a 	mov	r2,r18
  808444:	a8000215 	stw	zero,8(r21)
  808448:	a8000115 	stw	zero,4(r21)
  80844c:	dfc00917 	ldw	ra,36(sp)
  808450:	df000817 	ldw	fp,32(sp)
  808454:	ddc00717 	ldw	r23,28(sp)
  808458:	dd800617 	ldw	r22,24(sp)
  80845c:	dd400517 	ldw	r21,20(sp)
  808460:	dd000417 	ldw	r20,16(sp)
  808464:	dcc00317 	ldw	r19,12(sp)
  808468:	dc800217 	ldw	r18,8(sp)
  80846c:	dc400117 	ldw	r17,4(sp)
  808470:	dc000017 	ldw	r16,0(sp)
  808474:	dec00a04 	addi	sp,sp,40
  808478:	f800283a 	ret
  80847c:	a8800217 	ldw	r2,8(r21)
  808480:	8c63883a 	add	r17,r17,r17
  808484:	8c63883a 	add	r17,r17,r17
  808488:	1445c83a 	sub	r2,r2,r17
  80848c:	a8800215 	stw	r2,8(r21)
  808490:	b5800204 	addi	r22,r22,8
  808494:	bdc00204 	addi	r23,r23,8
  808498:	103fdb1e 	bne	r2,zero,808408 <__alt_mem_onchip_mem+0xff788408>
  80849c:	0005883a 	mov	r2,zero
  8084a0:	003fe806 	br	808444 <__alt_mem_onchip_mem+0xff788444>
  8084a4:	0809dc80 	call	809dc8 <__sfvwrite_r>
  8084a8:	003fe606 	br	808444 <__alt_mem_onchip_mem+0xff788444>

008084ac <__sprint_r>:
  8084ac:	30c00217 	ldw	r3,8(r6)
  8084b0:	18000126 	beq	r3,zero,8084b8 <__sprint_r+0xc>
  8084b4:	08083b01 	jmpi	8083b0 <__sprint_r.part.0>
  8084b8:	30000115 	stw	zero,4(r6)
  8084bc:	0005883a 	mov	r2,zero
  8084c0:	f800283a 	ret

008084c4 <___vfiprintf_internal_r>:
  8084c4:	deffc904 	addi	sp,sp,-220
  8084c8:	df003515 	stw	fp,212(sp)
  8084cc:	dd003115 	stw	r20,196(sp)
  8084d0:	dfc03615 	stw	ra,216(sp)
  8084d4:	ddc03415 	stw	r23,208(sp)
  8084d8:	dd803315 	stw	r22,204(sp)
  8084dc:	dd403215 	stw	r21,200(sp)
  8084e0:	dcc03015 	stw	r19,192(sp)
  8084e4:	dc802f15 	stw	r18,188(sp)
  8084e8:	dc402e15 	stw	r17,184(sp)
  8084ec:	dc002d15 	stw	r16,180(sp)
  8084f0:	d9002015 	stw	r4,128(sp)
  8084f4:	d9c02215 	stw	r7,136(sp)
  8084f8:	2829883a 	mov	r20,r5
  8084fc:	3039883a 	mov	fp,r6
  808500:	20000226 	beq	r4,zero,80850c <___vfiprintf_internal_r+0x48>
  808504:	20800e17 	ldw	r2,56(r4)
  808508:	1000cf26 	beq	r2,zero,808848 <___vfiprintf_internal_r+0x384>
  80850c:	a080030b 	ldhu	r2,12(r20)
  808510:	10c8000c 	andi	r3,r2,8192
  808514:	1800061e 	bne	r3,zero,808530 <___vfiprintf_internal_r+0x6c>
  808518:	a1001917 	ldw	r4,100(r20)
  80851c:	00f7ffc4 	movi	r3,-8193
  808520:	10880014 	ori	r2,r2,8192
  808524:	20c6703a 	and	r3,r4,r3
  808528:	a080030d 	sth	r2,12(r20)
  80852c:	a0c01915 	stw	r3,100(r20)
  808530:	10c0020c 	andi	r3,r2,8
  808534:	1800a926 	beq	r3,zero,8087dc <___vfiprintf_internal_r+0x318>
  808538:	a0c00417 	ldw	r3,16(r20)
  80853c:	1800a726 	beq	r3,zero,8087dc <___vfiprintf_internal_r+0x318>
  808540:	1080068c 	andi	r2,r2,26
  808544:	00c00284 	movi	r3,10
  808548:	10c0ac26 	beq	r2,r3,8087fc <___vfiprintf_internal_r+0x338>
  80854c:	da801a04 	addi	r10,sp,104
  808550:	da801e15 	stw	r10,120(sp)
  808554:	d8801e17 	ldw	r2,120(sp)
  808558:	da8019c4 	addi	r10,sp,103
  80855c:	05802074 	movhi	r22,129
  808560:	05c02074 	movhi	r23,129
  808564:	da801f15 	stw	r10,124(sp)
  808568:	1295c83a 	sub	r10,r2,r10
  80856c:	b5890904 	addi	r22,r22,9252
  808570:	bdc90504 	addi	r23,r23,9236
  808574:	dec01a15 	stw	sp,104(sp)
  808578:	d8001c15 	stw	zero,112(sp)
  80857c:	d8001b15 	stw	zero,108(sp)
  808580:	d8002615 	stw	zero,152(sp)
  808584:	d8002315 	stw	zero,140(sp)
  808588:	da802715 	stw	r10,156(sp)
  80858c:	d811883a 	mov	r8,sp
  808590:	dd002115 	stw	r20,132(sp)
  808594:	e021883a 	mov	r16,fp
  808598:	80800007 	ldb	r2,0(r16)
  80859c:	1003ea26 	beq	r2,zero,809548 <___vfiprintf_internal_r+0x1084>
  8085a0:	00c00944 	movi	r3,37
  8085a4:	8025883a 	mov	r18,r16
  8085a8:	10c0021e 	bne	r2,r3,8085b4 <___vfiprintf_internal_r+0xf0>
  8085ac:	00001606 	br	808608 <___vfiprintf_internal_r+0x144>
  8085b0:	10c00326 	beq	r2,r3,8085c0 <___vfiprintf_internal_r+0xfc>
  8085b4:	94800044 	addi	r18,r18,1
  8085b8:	90800007 	ldb	r2,0(r18)
  8085bc:	103ffc1e 	bne	r2,zero,8085b0 <__alt_mem_onchip_mem+0xff7885b0>
  8085c0:	9423c83a 	sub	r17,r18,r16
  8085c4:	88001026 	beq	r17,zero,808608 <___vfiprintf_internal_r+0x144>
  8085c8:	d8c01c17 	ldw	r3,112(sp)
  8085cc:	d8801b17 	ldw	r2,108(sp)
  8085d0:	44000015 	stw	r16,0(r8)
  8085d4:	88c7883a 	add	r3,r17,r3
  8085d8:	10800044 	addi	r2,r2,1
  8085dc:	44400115 	stw	r17,4(r8)
  8085e0:	d8c01c15 	stw	r3,112(sp)
  8085e4:	d8801b15 	stw	r2,108(sp)
  8085e8:	010001c4 	movi	r4,7
  8085ec:	2080760e 	bge	r4,r2,8087c8 <___vfiprintf_internal_r+0x304>
  8085f0:	1803821e 	bne	r3,zero,8093fc <___vfiprintf_internal_r+0xf38>
  8085f4:	da802317 	ldw	r10,140(sp)
  8085f8:	d8001b15 	stw	zero,108(sp)
  8085fc:	d811883a 	mov	r8,sp
  808600:	5455883a 	add	r10,r10,r17
  808604:	da802315 	stw	r10,140(sp)
  808608:	90800007 	ldb	r2,0(r18)
  80860c:	10044626 	beq	r2,zero,809728 <___vfiprintf_internal_r+0x1264>
  808610:	90c00047 	ldb	r3,1(r18)
  808614:	94000044 	addi	r16,r18,1
  808618:	d8001d85 	stb	zero,118(sp)
  80861c:	0009883a 	mov	r4,zero
  808620:	000f883a 	mov	r7,zero
  808624:	027fffc4 	movi	r9,-1
  808628:	0023883a 	mov	r17,zero
  80862c:	0029883a 	mov	r20,zero
  808630:	01401604 	movi	r5,88
  808634:	01800244 	movi	r6,9
  808638:	03400a84 	movi	r13,42
  80863c:	03001b04 	movi	r12,108
  808640:	84000044 	addi	r16,r16,1
  808644:	18bff804 	addi	r2,r3,-32
  808648:	28827336 	bltu	r5,r2,809018 <___vfiprintf_internal_r+0xb54>
  80864c:	100490ba 	slli	r2,r2,2
  808650:	02802074 	movhi	r10,129
  808654:	52a19904 	addi	r10,r10,-31132
  808658:	1285883a 	add	r2,r2,r10
  80865c:	10800017 	ldw	r2,0(r2)
  808660:	1000683a 	jmp	r2
  808664:	00808d4c 	andi	r2,zero,565
  808668:	00809018 	cmpnei	r2,zero,576
  80866c:	00809018 	cmpnei	r2,zero,576
  808670:	00808d6c 	andhi	r2,zero,565
  808674:	00809018 	cmpnei	r2,zero,576
  808678:	00809018 	cmpnei	r2,zero,576
  80867c:	00809018 	cmpnei	r2,zero,576
  808680:	00809018 	cmpnei	r2,zero,576
  808684:	00809018 	cmpnei	r2,zero,576
  808688:	00809018 	cmpnei	r2,zero,576
  80868c:	00808f54 	movui	r2,573
  808690:	00808f70 	cmpltui	r2,zero,573
  808694:	00809018 	cmpnei	r2,zero,576
  808698:	00808858 	cmpnei	r2,zero,545
  80869c:	00808f80 	call	808f8 <__alt_mem_sdram-0x77f708>
  8086a0:	00809018 	cmpnei	r2,zero,576
  8086a4:	00808d78 	rdprs	r2,zero,565
  8086a8:	00808d84 	movi	r2,566
  8086ac:	00808d84 	movi	r2,566
  8086b0:	00808d84 	movi	r2,566
  8086b4:	00808d84 	movi	r2,566
  8086b8:	00808d84 	movi	r2,566
  8086bc:	00808d84 	movi	r2,566
  8086c0:	00808d84 	movi	r2,566
  8086c4:	00808d84 	movi	r2,566
  8086c8:	00808d84 	movi	r2,566
  8086cc:	00809018 	cmpnei	r2,zero,576
  8086d0:	00809018 	cmpnei	r2,zero,576
  8086d4:	00809018 	cmpnei	r2,zero,576
  8086d8:	00809018 	cmpnei	r2,zero,576
  8086dc:	00809018 	cmpnei	r2,zero,576
  8086e0:	00809018 	cmpnei	r2,zero,576
  8086e4:	00809018 	cmpnei	r2,zero,576
  8086e8:	00809018 	cmpnei	r2,zero,576
  8086ec:	00809018 	cmpnei	r2,zero,576
  8086f0:	00809018 	cmpnei	r2,zero,576
  8086f4:	00808db0 	cmpltui	r2,zero,566
  8086f8:	00809018 	cmpnei	r2,zero,576
  8086fc:	00809018 	cmpnei	r2,zero,576
  808700:	00809018 	cmpnei	r2,zero,576
  808704:	00809018 	cmpnei	r2,zero,576
  808708:	00809018 	cmpnei	r2,zero,576
  80870c:	00809018 	cmpnei	r2,zero,576
  808710:	00809018 	cmpnei	r2,zero,576
  808714:	00809018 	cmpnei	r2,zero,576
  808718:	00809018 	cmpnei	r2,zero,576
  80871c:	00809018 	cmpnei	r2,zero,576
  808720:	00808de8 	cmpgeui	r2,zero,567
  808724:	00809018 	cmpnei	r2,zero,576
  808728:	00809018 	cmpnei	r2,zero,576
  80872c:	00809018 	cmpnei	r2,zero,576
  808730:	00809018 	cmpnei	r2,zero,576
  808734:	00809018 	cmpnei	r2,zero,576
  808738:	00808e40 	call	808e4 <__alt_mem_sdram-0x77f71c>
  80873c:	00809018 	cmpnei	r2,zero,576
  808740:	00809018 	cmpnei	r2,zero,576
  808744:	00808eb0 	cmpltui	r2,zero,570
  808748:	00809018 	cmpnei	r2,zero,576
  80874c:	00809018 	cmpnei	r2,zero,576
  808750:	00809018 	cmpnei	r2,zero,576
  808754:	00809018 	cmpnei	r2,zero,576
  808758:	00809018 	cmpnei	r2,zero,576
  80875c:	00809018 	cmpnei	r2,zero,576
  808760:	00809018 	cmpnei	r2,zero,576
  808764:	00809018 	cmpnei	r2,zero,576
  808768:	00809018 	cmpnei	r2,zero,576
  80876c:	00809018 	cmpnei	r2,zero,576
  808770:	00808c5c 	xori	r2,zero,561
  808774:	00808c88 	cmpgei	r2,zero,562
  808778:	00809018 	cmpnei	r2,zero,576
  80877c:	00809018 	cmpnei	r2,zero,576
  808780:	00809018 	cmpnei	r2,zero,576
  808784:	00808fc0 	call	808fc <__alt_mem_sdram-0x77f704>
  808788:	00808c88 	cmpgei	r2,zero,562
  80878c:	00809018 	cmpnei	r2,zero,576
  808790:	00809018 	cmpnei	r2,zero,576
  808794:	00808b1c 	xori	r2,zero,556
  808798:	00809018 	cmpnei	r2,zero,576
  80879c:	00808b2c 	andhi	r2,zero,556
  8087a0:	00808b68 	cmpgeui	r2,zero,557
  8087a4:	00808864 	muli	r2,zero,545
  8087a8:	00808b10 	cmplti	r2,zero,556
  8087ac:	00809018 	cmpnei	r2,zero,576
  8087b0:	00808eec 	andhi	r2,zero,571
  8087b4:	00809018 	cmpnei	r2,zero,576
  8087b8:	00808f44 	movi	r2,573
  8087bc:	00809018 	cmpnei	r2,zero,576
  8087c0:	00809018 	cmpnei	r2,zero,576
  8087c4:	00808c08 	cmpgei	r2,zero,560
  8087c8:	42000204 	addi	r8,r8,8
  8087cc:	da802317 	ldw	r10,140(sp)
  8087d0:	5455883a 	add	r10,r10,r17
  8087d4:	da802315 	stw	r10,140(sp)
  8087d8:	003f8b06 	br	808608 <__alt_mem_onchip_mem+0xff788608>
  8087dc:	d9002017 	ldw	r4,128(sp)
  8087e0:	a00b883a 	mov	r5,r20
  8087e4:	08046d00 	call	8046d0 <__swsetup_r>
  8087e8:	1003b11e 	bne	r2,zero,8096b0 <___vfiprintf_internal_r+0x11ec>
  8087ec:	a080030b 	ldhu	r2,12(r20)
  8087f0:	00c00284 	movi	r3,10
  8087f4:	1080068c 	andi	r2,r2,26
  8087f8:	10ff541e 	bne	r2,r3,80854c <__alt_mem_onchip_mem+0xff78854c>
  8087fc:	a080038f 	ldh	r2,14(r20)
  808800:	103f5216 	blt	r2,zero,80854c <__alt_mem_onchip_mem+0xff78854c>
  808804:	d9c02217 	ldw	r7,136(sp)
  808808:	d9002017 	ldw	r4,128(sp)
  80880c:	e00d883a 	mov	r6,fp
  808810:	a00b883a 	mov	r5,r20
  808814:	080993c0 	call	80993c <__sbprintf>
  808818:	dfc03617 	ldw	ra,216(sp)
  80881c:	df003517 	ldw	fp,212(sp)
  808820:	ddc03417 	ldw	r23,208(sp)
  808824:	dd803317 	ldw	r22,204(sp)
  808828:	dd403217 	ldw	r21,200(sp)
  80882c:	dd003117 	ldw	r20,196(sp)
  808830:	dcc03017 	ldw	r19,192(sp)
  808834:	dc802f17 	ldw	r18,188(sp)
  808838:	dc402e17 	ldw	r17,184(sp)
  80883c:	dc002d17 	ldw	r16,180(sp)
  808840:	dec03704 	addi	sp,sp,220
  808844:	f800283a 	ret
  808848:	08066f80 	call	8066f8 <__sinit>
  80884c:	003f2f06 	br	80850c <__alt_mem_onchip_mem+0xff78850c>
  808850:	0463c83a 	sub	r17,zero,r17
  808854:	d8802215 	stw	r2,136(sp)
  808858:	a5000114 	ori	r20,r20,4
  80885c:	80c00007 	ldb	r3,0(r16)
  808860:	003f7706 	br	808640 <__alt_mem_onchip_mem+0xff788640>
  808864:	00800c04 	movi	r2,48
  808868:	da802217 	ldw	r10,136(sp)
  80886c:	d8801d05 	stb	r2,116(sp)
  808870:	00801e04 	movi	r2,120
  808874:	d8801d45 	stb	r2,117(sp)
  808878:	d8001d85 	stb	zero,118(sp)
  80887c:	50c00104 	addi	r3,r10,4
  808880:	54800017 	ldw	r18,0(r10)
  808884:	0027883a 	mov	r19,zero
  808888:	a0800094 	ori	r2,r20,2
  80888c:	48030b16 	blt	r9,zero,8094bc <___vfiprintf_internal_r+0xff8>
  808890:	00bfdfc4 	movi	r2,-129
  808894:	a096703a 	and	r11,r20,r2
  808898:	d8c02215 	stw	r3,136(sp)
  80889c:	5d000094 	ori	r20,r11,2
  8088a0:	90032b1e 	bne	r18,zero,809550 <___vfiprintf_internal_r+0x108c>
  8088a4:	00802074 	movhi	r2,129
  8088a8:	1088a504 	addi	r2,r2,8852
  8088ac:	d8802615 	stw	r2,152(sp)
  8088b0:	0039883a 	mov	fp,zero
  8088b4:	48017b1e 	bne	r9,zero,808ea4 <___vfiprintf_internal_r+0x9e0>
  8088b8:	0013883a 	mov	r9,zero
  8088bc:	0027883a 	mov	r19,zero
  8088c0:	dd401a04 	addi	r21,sp,104
  8088c4:	4825883a 	mov	r18,r9
  8088c8:	4cc0010e 	bge	r9,r19,8088d0 <___vfiprintf_internal_r+0x40c>
  8088cc:	9825883a 	mov	r18,r19
  8088d0:	e7003fcc 	andi	fp,fp,255
  8088d4:	e700201c 	xori	fp,fp,128
  8088d8:	e73fe004 	addi	fp,fp,-128
  8088dc:	e0000126 	beq	fp,zero,8088e4 <___vfiprintf_internal_r+0x420>
  8088e0:	94800044 	addi	r18,r18,1
  8088e4:	a380008c 	andi	r14,r20,2
  8088e8:	70000126 	beq	r14,zero,8088f0 <___vfiprintf_internal_r+0x42c>
  8088ec:	94800084 	addi	r18,r18,2
  8088f0:	a700210c 	andi	fp,r20,132
  8088f4:	e001df1e 	bne	fp,zero,809074 <___vfiprintf_internal_r+0xbb0>
  8088f8:	8c87c83a 	sub	r3,r17,r18
  8088fc:	00c1dd0e 	bge	zero,r3,809074 <___vfiprintf_internal_r+0xbb0>
  808900:	01c00404 	movi	r7,16
  808904:	d8801c17 	ldw	r2,112(sp)
  808908:	38c3ad0e 	bge	r7,r3,8097c0 <___vfiprintf_internal_r+0x12fc>
  80890c:	02802074 	movhi	r10,129
  808910:	52890904 	addi	r10,r10,9252
  808914:	dc002915 	stw	r16,164(sp)
  808918:	d9801b17 	ldw	r6,108(sp)
  80891c:	da802415 	stw	r10,144(sp)
  808920:	03c001c4 	movi	r15,7
  808924:	da402515 	stw	r9,148(sp)
  808928:	db802815 	stw	r14,160(sp)
  80892c:	1821883a 	mov	r16,r3
  808930:	00000506 	br	808948 <___vfiprintf_internal_r+0x484>
  808934:	31400084 	addi	r5,r6,2
  808938:	42000204 	addi	r8,r8,8
  80893c:	200d883a 	mov	r6,r4
  808940:	843ffc04 	addi	r16,r16,-16
  808944:	3c000d0e 	bge	r7,r16,80897c <___vfiprintf_internal_r+0x4b8>
  808948:	10800404 	addi	r2,r2,16
  80894c:	31000044 	addi	r4,r6,1
  808950:	45800015 	stw	r22,0(r8)
  808954:	41c00115 	stw	r7,4(r8)
  808958:	d8801c15 	stw	r2,112(sp)
  80895c:	d9001b15 	stw	r4,108(sp)
  808960:	793ff40e 	bge	r15,r4,808934 <__alt_mem_onchip_mem+0xff788934>
  808964:	1001b51e 	bne	r2,zero,80903c <___vfiprintf_internal_r+0xb78>
  808968:	843ffc04 	addi	r16,r16,-16
  80896c:	000d883a 	mov	r6,zero
  808970:	01400044 	movi	r5,1
  808974:	d811883a 	mov	r8,sp
  808978:	3c3ff316 	blt	r7,r16,808948 <__alt_mem_onchip_mem+0xff788948>
  80897c:	8007883a 	mov	r3,r16
  808980:	da402517 	ldw	r9,148(sp)
  808984:	db802817 	ldw	r14,160(sp)
  808988:	dc002917 	ldw	r16,164(sp)
  80898c:	da802417 	ldw	r10,144(sp)
  808990:	1885883a 	add	r2,r3,r2
  808994:	40c00115 	stw	r3,4(r8)
  808998:	42800015 	stw	r10,0(r8)
  80899c:	d8801c15 	stw	r2,112(sp)
  8089a0:	d9401b15 	stw	r5,108(sp)
  8089a4:	00c001c4 	movi	r3,7
  8089a8:	19426016 	blt	r3,r5,80932c <___vfiprintf_internal_r+0xe68>
  8089ac:	d8c01d87 	ldb	r3,118(sp)
  8089b0:	42000204 	addi	r8,r8,8
  8089b4:	29000044 	addi	r4,r5,1
  8089b8:	1801b31e 	bne	r3,zero,809088 <___vfiprintf_internal_r+0xbc4>
  8089bc:	7001c026 	beq	r14,zero,8090c0 <___vfiprintf_internal_r+0xbfc>
  8089c0:	d8c01d04 	addi	r3,sp,116
  8089c4:	10800084 	addi	r2,r2,2
  8089c8:	40c00015 	stw	r3,0(r8)
  8089cc:	00c00084 	movi	r3,2
  8089d0:	40c00115 	stw	r3,4(r8)
  8089d4:	d8801c15 	stw	r2,112(sp)
  8089d8:	d9001b15 	stw	r4,108(sp)
  8089dc:	00c001c4 	movi	r3,7
  8089e0:	1902650e 	bge	r3,r4,809378 <___vfiprintf_internal_r+0xeb4>
  8089e4:	10029a1e 	bne	r2,zero,809450 <___vfiprintf_internal_r+0xf8c>
  8089e8:	00c02004 	movi	r3,128
  8089ec:	01000044 	movi	r4,1
  8089f0:	000b883a 	mov	r5,zero
  8089f4:	d811883a 	mov	r8,sp
  8089f8:	e0c1b31e 	bne	fp,r3,8090c8 <___vfiprintf_internal_r+0xc04>
  8089fc:	8cb9c83a 	sub	fp,r17,r18
  808a00:	0701b10e 	bge	zero,fp,8090c8 <___vfiprintf_internal_r+0xc04>
  808a04:	01c00404 	movi	r7,16
  808a08:	3f03890e 	bge	r7,fp,809830 <___vfiprintf_internal_r+0x136c>
  808a0c:	00c02074 	movhi	r3,129
  808a10:	18c90504 	addi	r3,r3,9236
  808a14:	d8c02415 	stw	r3,144(sp)
  808a18:	8007883a 	mov	r3,r16
  808a1c:	034001c4 	movi	r13,7
  808a20:	e021883a 	mov	r16,fp
  808a24:	da402515 	stw	r9,148(sp)
  808a28:	1839883a 	mov	fp,r3
  808a2c:	00000506 	br	808a44 <___vfiprintf_internal_r+0x580>
  808a30:	29800084 	addi	r6,r5,2
  808a34:	42000204 	addi	r8,r8,8
  808a38:	180b883a 	mov	r5,r3
  808a3c:	843ffc04 	addi	r16,r16,-16
  808a40:	3c000d0e 	bge	r7,r16,808a78 <___vfiprintf_internal_r+0x5b4>
  808a44:	10800404 	addi	r2,r2,16
  808a48:	28c00044 	addi	r3,r5,1
  808a4c:	45c00015 	stw	r23,0(r8)
  808a50:	41c00115 	stw	r7,4(r8)
  808a54:	d8801c15 	stw	r2,112(sp)
  808a58:	d8c01b15 	stw	r3,108(sp)
  808a5c:	68fff40e 	bge	r13,r3,808a30 <__alt_mem_onchip_mem+0xff788a30>
  808a60:	1002241e 	bne	r2,zero,8092f4 <___vfiprintf_internal_r+0xe30>
  808a64:	843ffc04 	addi	r16,r16,-16
  808a68:	01800044 	movi	r6,1
  808a6c:	000b883a 	mov	r5,zero
  808a70:	d811883a 	mov	r8,sp
  808a74:	3c3ff316 	blt	r7,r16,808a44 <__alt_mem_onchip_mem+0xff788a44>
  808a78:	da402517 	ldw	r9,148(sp)
  808a7c:	e007883a 	mov	r3,fp
  808a80:	8039883a 	mov	fp,r16
  808a84:	1821883a 	mov	r16,r3
  808a88:	d8c02417 	ldw	r3,144(sp)
  808a8c:	1705883a 	add	r2,r2,fp
  808a90:	47000115 	stw	fp,4(r8)
  808a94:	40c00015 	stw	r3,0(r8)
  808a98:	d8801c15 	stw	r2,112(sp)
  808a9c:	d9801b15 	stw	r6,108(sp)
  808aa0:	00c001c4 	movi	r3,7
  808aa4:	19827616 	blt	r3,r6,809480 <___vfiprintf_internal_r+0xfbc>
  808aa8:	4cf9c83a 	sub	fp,r9,r19
  808aac:	42000204 	addi	r8,r8,8
  808ab0:	31000044 	addi	r4,r6,1
  808ab4:	300b883a 	mov	r5,r6
  808ab8:	07018516 	blt	zero,fp,8090d0 <___vfiprintf_internal_r+0xc0c>
  808abc:	9885883a 	add	r2,r19,r2
  808ac0:	45400015 	stw	r21,0(r8)
  808ac4:	44c00115 	stw	r19,4(r8)
  808ac8:	d8801c15 	stw	r2,112(sp)
  808acc:	d9001b15 	stw	r4,108(sp)
  808ad0:	00c001c4 	movi	r3,7
  808ad4:	1901dd0e 	bge	r3,r4,80924c <___vfiprintf_internal_r+0xd88>
  808ad8:	1002401e 	bne	r2,zero,8093dc <___vfiprintf_internal_r+0xf18>
  808adc:	d8001b15 	stw	zero,108(sp)
  808ae0:	a2c0010c 	andi	r11,r20,4
  808ae4:	58000226 	beq	r11,zero,808af0 <___vfiprintf_internal_r+0x62c>
  808ae8:	8ca7c83a 	sub	r19,r17,r18
  808aec:	04c2f216 	blt	zero,r19,8096b8 <___vfiprintf_internal_r+0x11f4>
  808af0:	8c80010e 	bge	r17,r18,808af8 <___vfiprintf_internal_r+0x634>
  808af4:	9023883a 	mov	r17,r18
  808af8:	da802317 	ldw	r10,140(sp)
  808afc:	5455883a 	add	r10,r10,r17
  808b00:	da802315 	stw	r10,140(sp)
  808b04:	d8001b15 	stw	zero,108(sp)
  808b08:	d811883a 	mov	r8,sp
  808b0c:	003ea206 	br	808598 <__alt_mem_onchip_mem+0xff788598>
  808b10:	a5000814 	ori	r20,r20,32
  808b14:	80c00007 	ldb	r3,0(r16)
  808b18:	003ec906 	br	808640 <__alt_mem_onchip_mem+0xff788640>
  808b1c:	80c00007 	ldb	r3,0(r16)
  808b20:	1b030926 	beq	r3,r12,809748 <___vfiprintf_internal_r+0x1284>
  808b24:	a5000414 	ori	r20,r20,16
  808b28:	003ec506 	br	808640 <__alt_mem_onchip_mem+0xff788640>
  808b2c:	21003fcc 	andi	r4,r4,255
  808b30:	20035e1e 	bne	r4,zero,8098ac <___vfiprintf_internal_r+0x13e8>
  808b34:	a080080c 	andi	r2,r20,32
  808b38:	1002a526 	beq	r2,zero,8095d0 <___vfiprintf_internal_r+0x110c>
  808b3c:	da802217 	ldw	r10,136(sp)
  808b40:	50800017 	ldw	r2,0(r10)
  808b44:	da802317 	ldw	r10,140(sp)
  808b48:	5007d7fa 	srai	r3,r10,31
  808b4c:	da802217 	ldw	r10,136(sp)
  808b50:	10c00115 	stw	r3,4(r2)
  808b54:	52800104 	addi	r10,r10,4
  808b58:	da802215 	stw	r10,136(sp)
  808b5c:	da802317 	ldw	r10,140(sp)
  808b60:	12800015 	stw	r10,0(r2)
  808b64:	003e8c06 	br	808598 <__alt_mem_onchip_mem+0xff788598>
  808b68:	21003fcc 	andi	r4,r4,255
  808b6c:	2003511e 	bne	r4,zero,8098b4 <___vfiprintf_internal_r+0x13f0>
  808b70:	a080080c 	andi	r2,r20,32
  808b74:	1000a126 	beq	r2,zero,808dfc <___vfiprintf_internal_r+0x938>
  808b78:	da802217 	ldw	r10,136(sp)
  808b7c:	d8001d85 	stb	zero,118(sp)
  808b80:	50800204 	addi	r2,r10,8
  808b84:	54800017 	ldw	r18,0(r10)
  808b88:	54c00117 	ldw	r19,4(r10)
  808b8c:	4802b416 	blt	r9,zero,809660 <___vfiprintf_internal_r+0x119c>
  808b90:	013fdfc4 	movi	r4,-129
  808b94:	94c6b03a 	or	r3,r18,r19
  808b98:	d8802215 	stw	r2,136(sp)
  808b9c:	a128703a 	and	r20,r20,r4
  808ba0:	1800a226 	beq	r3,zero,808e2c <___vfiprintf_internal_r+0x968>
  808ba4:	0039883a 	mov	fp,zero
  808ba8:	dd401a04 	addi	r21,sp,104
  808bac:	9006d0fa 	srli	r3,r18,3
  808bb0:	9808977a 	slli	r4,r19,29
  808bb4:	9826d0fa 	srli	r19,r19,3
  808bb8:	948001cc 	andi	r18,r18,7
  808bbc:	90800c04 	addi	r2,r18,48
  808bc0:	ad7fffc4 	addi	r21,r21,-1
  808bc4:	20e4b03a 	or	r18,r4,r3
  808bc8:	a8800005 	stb	r2,0(r21)
  808bcc:	94c6b03a 	or	r3,r18,r19
  808bd0:	183ff61e 	bne	r3,zero,808bac <__alt_mem_onchip_mem+0xff788bac>
  808bd4:	a0c0004c 	andi	r3,r20,1
  808bd8:	18005926 	beq	r3,zero,808d40 <___vfiprintf_internal_r+0x87c>
  808bdc:	10803fcc 	andi	r2,r2,255
  808be0:	1080201c 	xori	r2,r2,128
  808be4:	10bfe004 	addi	r2,r2,-128
  808be8:	00c00c04 	movi	r3,48
  808bec:	10c05426 	beq	r2,r3,808d40 <___vfiprintf_internal_r+0x87c>
  808bf0:	da801e17 	ldw	r10,120(sp)
  808bf4:	a8bfffc4 	addi	r2,r21,-1
  808bf8:	a8ffffc5 	stb	r3,-1(r21)
  808bfc:	50a7c83a 	sub	r19,r10,r2
  808c00:	102b883a 	mov	r21,r2
  808c04:	003f2f06 	br	8088c4 <__alt_mem_onchip_mem+0xff7888c4>
  808c08:	21003fcc 	andi	r4,r4,255
  808c0c:	2003421e 	bne	r4,zero,809918 <___vfiprintf_internal_r+0x1454>
  808c10:	00802074 	movhi	r2,129
  808c14:	1088a504 	addi	r2,r2,8852
  808c18:	d8802615 	stw	r2,152(sp)
  808c1c:	a080080c 	andi	r2,r20,32
  808c20:	1000aa26 	beq	r2,zero,808ecc <___vfiprintf_internal_r+0xa08>
  808c24:	da802217 	ldw	r10,136(sp)
  808c28:	54800017 	ldw	r18,0(r10)
  808c2c:	54c00117 	ldw	r19,4(r10)
  808c30:	52800204 	addi	r10,r10,8
  808c34:	da802215 	stw	r10,136(sp)
  808c38:	a080004c 	andi	r2,r20,1
  808c3c:	1001d226 	beq	r2,zero,809388 <___vfiprintf_internal_r+0xec4>
  808c40:	94c4b03a 	or	r2,r18,r19
  808c44:	1002351e 	bne	r2,zero,80951c <___vfiprintf_internal_r+0x1058>
  808c48:	d8001d85 	stb	zero,118(sp)
  808c4c:	48022216 	blt	r9,zero,8094d8 <___vfiprintf_internal_r+0x1014>
  808c50:	00bfdfc4 	movi	r2,-129
  808c54:	a0a8703a 	and	r20,r20,r2
  808c58:	003f1506 	br	8088b0 <__alt_mem_onchip_mem+0xff7888b0>
  808c5c:	da802217 	ldw	r10,136(sp)
  808c60:	04800044 	movi	r18,1
  808c64:	d8001d85 	stb	zero,118(sp)
  808c68:	50800017 	ldw	r2,0(r10)
  808c6c:	52800104 	addi	r10,r10,4
  808c70:	da802215 	stw	r10,136(sp)
  808c74:	d8801005 	stb	r2,64(sp)
  808c78:	9027883a 	mov	r19,r18
  808c7c:	dd401004 	addi	r21,sp,64
  808c80:	0013883a 	mov	r9,zero
  808c84:	003f1706 	br	8088e4 <__alt_mem_onchip_mem+0xff7888e4>
  808c88:	21003fcc 	andi	r4,r4,255
  808c8c:	2003201e 	bne	r4,zero,809910 <___vfiprintf_internal_r+0x144c>
  808c90:	a080080c 	andi	r2,r20,32
  808c94:	10004b26 	beq	r2,zero,808dc4 <___vfiprintf_internal_r+0x900>
  808c98:	da802217 	ldw	r10,136(sp)
  808c9c:	50800117 	ldw	r2,4(r10)
  808ca0:	54800017 	ldw	r18,0(r10)
  808ca4:	52800204 	addi	r10,r10,8
  808ca8:	da802215 	stw	r10,136(sp)
  808cac:	1027883a 	mov	r19,r2
  808cb0:	10022c16 	blt	r2,zero,809564 <___vfiprintf_internal_r+0x10a0>
  808cb4:	df001d83 	ldbu	fp,118(sp)
  808cb8:	48007216 	blt	r9,zero,808e84 <___vfiprintf_internal_r+0x9c0>
  808cbc:	00ffdfc4 	movi	r3,-129
  808cc0:	94c4b03a 	or	r2,r18,r19
  808cc4:	a0e8703a 	and	r20,r20,r3
  808cc8:	1000cc26 	beq	r2,zero,808ffc <___vfiprintf_internal_r+0xb38>
  808ccc:	98021026 	beq	r19,zero,809510 <___vfiprintf_internal_r+0x104c>
  808cd0:	dc402415 	stw	r17,144(sp)
  808cd4:	dc002515 	stw	r16,148(sp)
  808cd8:	9823883a 	mov	r17,r19
  808cdc:	9021883a 	mov	r16,r18
  808ce0:	dd401a04 	addi	r21,sp,104
  808ce4:	4825883a 	mov	r18,r9
  808ce8:	4027883a 	mov	r19,r8
  808cec:	8009883a 	mov	r4,r16
  808cf0:	880b883a 	mov	r5,r17
  808cf4:	01800284 	movi	r6,10
  808cf8:	000f883a 	mov	r7,zero
  808cfc:	080b1fc0 	call	80b1fc <__umoddi3>
  808d00:	10800c04 	addi	r2,r2,48
  808d04:	ad7fffc4 	addi	r21,r21,-1
  808d08:	8009883a 	mov	r4,r16
  808d0c:	880b883a 	mov	r5,r17
  808d10:	a8800005 	stb	r2,0(r21)
  808d14:	01800284 	movi	r6,10
  808d18:	000f883a 	mov	r7,zero
  808d1c:	080ac840 	call	80ac84 <__udivdi3>
  808d20:	1021883a 	mov	r16,r2
  808d24:	10c4b03a 	or	r2,r2,r3
  808d28:	1823883a 	mov	r17,r3
  808d2c:	103fef1e 	bne	r2,zero,808cec <__alt_mem_onchip_mem+0xff788cec>
  808d30:	dc402417 	ldw	r17,144(sp)
  808d34:	dc002517 	ldw	r16,148(sp)
  808d38:	9013883a 	mov	r9,r18
  808d3c:	9811883a 	mov	r8,r19
  808d40:	da801e17 	ldw	r10,120(sp)
  808d44:	5567c83a 	sub	r19,r10,r21
  808d48:	003ede06 	br	8088c4 <__alt_mem_onchip_mem+0xff7888c4>
  808d4c:	38803fcc 	andi	r2,r7,255
  808d50:	1080201c 	xori	r2,r2,128
  808d54:	10bfe004 	addi	r2,r2,-128
  808d58:	1002371e 	bne	r2,zero,809638 <___vfiprintf_internal_r+0x1174>
  808d5c:	01000044 	movi	r4,1
  808d60:	01c00804 	movi	r7,32
  808d64:	80c00007 	ldb	r3,0(r16)
  808d68:	003e3506 	br	808640 <__alt_mem_onchip_mem+0xff788640>
  808d6c:	a5000054 	ori	r20,r20,1
  808d70:	80c00007 	ldb	r3,0(r16)
  808d74:	003e3206 	br	808640 <__alt_mem_onchip_mem+0xff788640>
  808d78:	a5002014 	ori	r20,r20,128
  808d7c:	80c00007 	ldb	r3,0(r16)
  808d80:	003e2f06 	br	808640 <__alt_mem_onchip_mem+0xff788640>
  808d84:	8015883a 	mov	r10,r16
  808d88:	0023883a 	mov	r17,zero
  808d8c:	18bff404 	addi	r2,r3,-48
  808d90:	50c00007 	ldb	r3,0(r10)
  808d94:	8c4002a4 	muli	r17,r17,10
  808d98:	84000044 	addi	r16,r16,1
  808d9c:	8015883a 	mov	r10,r16
  808da0:	1463883a 	add	r17,r2,r17
  808da4:	18bff404 	addi	r2,r3,-48
  808da8:	30bff92e 	bgeu	r6,r2,808d90 <__alt_mem_onchip_mem+0xff788d90>
  808dac:	003e2506 	br	808644 <__alt_mem_onchip_mem+0xff788644>
  808db0:	21003fcc 	andi	r4,r4,255
  808db4:	2002d41e 	bne	r4,zero,809908 <___vfiprintf_internal_r+0x1444>
  808db8:	a5000414 	ori	r20,r20,16
  808dbc:	a080080c 	andi	r2,r20,32
  808dc0:	103fb51e 	bne	r2,zero,808c98 <__alt_mem_onchip_mem+0xff788c98>
  808dc4:	a080040c 	andi	r2,r20,16
  808dc8:	1001f826 	beq	r2,zero,8095ac <___vfiprintf_internal_r+0x10e8>
  808dcc:	da802217 	ldw	r10,136(sp)
  808dd0:	54800017 	ldw	r18,0(r10)
  808dd4:	52800104 	addi	r10,r10,4
  808dd8:	da802215 	stw	r10,136(sp)
  808ddc:	9027d7fa 	srai	r19,r18,31
  808de0:	9805883a 	mov	r2,r19
  808de4:	003fb206 	br	808cb0 <__alt_mem_onchip_mem+0xff788cb0>
  808de8:	21003fcc 	andi	r4,r4,255
  808dec:	2002c41e 	bne	r4,zero,809900 <___vfiprintf_internal_r+0x143c>
  808df0:	a5000414 	ori	r20,r20,16
  808df4:	a080080c 	andi	r2,r20,32
  808df8:	103f5f1e 	bne	r2,zero,808b78 <__alt_mem_onchip_mem+0xff788b78>
  808dfc:	a080040c 	andi	r2,r20,16
  808e00:	10020f26 	beq	r2,zero,809640 <___vfiprintf_internal_r+0x117c>
  808e04:	da802217 	ldw	r10,136(sp)
  808e08:	d8001d85 	stb	zero,118(sp)
  808e0c:	0027883a 	mov	r19,zero
  808e10:	50800104 	addi	r2,r10,4
  808e14:	54800017 	ldw	r18,0(r10)
  808e18:	48021116 	blt	r9,zero,809660 <___vfiprintf_internal_r+0x119c>
  808e1c:	00ffdfc4 	movi	r3,-129
  808e20:	d8802215 	stw	r2,136(sp)
  808e24:	a0e8703a 	and	r20,r20,r3
  808e28:	903f5e1e 	bne	r18,zero,808ba4 <__alt_mem_onchip_mem+0xff788ba4>
  808e2c:	0039883a 	mov	fp,zero
  808e30:	4802a626 	beq	r9,zero,8098cc <___vfiprintf_internal_r+0x1408>
  808e34:	0025883a 	mov	r18,zero
  808e38:	0027883a 	mov	r19,zero
  808e3c:	003f5a06 	br	808ba8 <__alt_mem_onchip_mem+0xff788ba8>
  808e40:	21003fcc 	andi	r4,r4,255
  808e44:	20029f1e 	bne	r4,zero,8098c4 <___vfiprintf_internal_r+0x1400>
  808e48:	a5000414 	ori	r20,r20,16
  808e4c:	a080080c 	andi	r2,r20,32
  808e50:	10005e1e 	bne	r2,zero,808fcc <___vfiprintf_internal_r+0xb08>
  808e54:	a080040c 	andi	r2,r20,16
  808e58:	1001a21e 	bne	r2,zero,8094e4 <___vfiprintf_internal_r+0x1020>
  808e5c:	a080100c 	andi	r2,r20,64
  808e60:	d8001d85 	stb	zero,118(sp)
  808e64:	da802217 	ldw	r10,136(sp)
  808e68:	1002231e 	bne	r2,zero,8096f8 <___vfiprintf_internal_r+0x1234>
  808e6c:	50800104 	addi	r2,r10,4
  808e70:	54800017 	ldw	r18,0(r10)
  808e74:	0027883a 	mov	r19,zero
  808e78:	4801a00e 	bge	r9,zero,8094fc <___vfiprintf_internal_r+0x1038>
  808e7c:	d8802215 	stw	r2,136(sp)
  808e80:	0039883a 	mov	fp,zero
  808e84:	94c4b03a 	or	r2,r18,r19
  808e88:	103f901e 	bne	r2,zero,808ccc <__alt_mem_onchip_mem+0xff788ccc>
  808e8c:	00800044 	movi	r2,1
  808e90:	10803fcc 	andi	r2,r2,255
  808e94:	00c00044 	movi	r3,1
  808e98:	10c05926 	beq	r2,r3,809000 <___vfiprintf_internal_r+0xb3c>
  808e9c:	00c00084 	movi	r3,2
  808ea0:	10ffe41e 	bne	r2,r3,808e34 <__alt_mem_onchip_mem+0xff788e34>
  808ea4:	0025883a 	mov	r18,zero
  808ea8:	0027883a 	mov	r19,zero
  808eac:	00013d06 	br	8093a4 <___vfiprintf_internal_r+0xee0>
  808eb0:	21003fcc 	andi	r4,r4,255
  808eb4:	2002811e 	bne	r4,zero,8098bc <___vfiprintf_internal_r+0x13f8>
  808eb8:	00802074 	movhi	r2,129
  808ebc:	1088a004 	addi	r2,r2,8832
  808ec0:	d8802615 	stw	r2,152(sp)
  808ec4:	a080080c 	andi	r2,r20,32
  808ec8:	103f561e 	bne	r2,zero,808c24 <__alt_mem_onchip_mem+0xff788c24>
  808ecc:	a080040c 	andi	r2,r20,16
  808ed0:	1001d126 	beq	r2,zero,809618 <___vfiprintf_internal_r+0x1154>
  808ed4:	da802217 	ldw	r10,136(sp)
  808ed8:	0027883a 	mov	r19,zero
  808edc:	54800017 	ldw	r18,0(r10)
  808ee0:	52800104 	addi	r10,r10,4
  808ee4:	da802215 	stw	r10,136(sp)
  808ee8:	003f5306 	br	808c38 <__alt_mem_onchip_mem+0xff788c38>
  808eec:	da802217 	ldw	r10,136(sp)
  808ef0:	d8001d85 	stb	zero,118(sp)
  808ef4:	55400017 	ldw	r21,0(r10)
  808ef8:	50c00104 	addi	r3,r10,4
  808efc:	a8024226 	beq	r21,zero,809808 <___vfiprintf_internal_r+0x1344>
  808f00:	48021816 	blt	r9,zero,809764 <___vfiprintf_internal_r+0x12a0>
  808f04:	480d883a 	mov	r6,r9
  808f08:	000b883a 	mov	r5,zero
  808f0c:	a809883a 	mov	r4,r21
  808f10:	d8c02a15 	stw	r3,168(sp)
  808f14:	da002b15 	stw	r8,172(sp)
  808f18:	da402c15 	stw	r9,176(sp)
  808f1c:	0806f400 	call	806f40 <memchr>
  808f20:	d8c02a17 	ldw	r3,168(sp)
  808f24:	da002b17 	ldw	r8,172(sp)
  808f28:	da402c17 	ldw	r9,176(sp)
  808f2c:	10024826 	beq	r2,zero,809850 <___vfiprintf_internal_r+0x138c>
  808f30:	1567c83a 	sub	r19,r2,r21
  808f34:	df001d83 	ldbu	fp,118(sp)
  808f38:	d8c02215 	stw	r3,136(sp)
  808f3c:	0013883a 	mov	r9,zero
  808f40:	003e6006 	br	8088c4 <__alt_mem_onchip_mem+0xff7888c4>
  808f44:	21003fcc 	andi	r4,r4,255
  808f48:	203fc026 	beq	r4,zero,808e4c <__alt_mem_onchip_mem+0xff788e4c>
  808f4c:	d9c01d85 	stb	r7,118(sp)
  808f50:	003fbe06 	br	808e4c <__alt_mem_onchip_mem+0xff788e4c>
  808f54:	da802217 	ldw	r10,136(sp)
  808f58:	54400017 	ldw	r17,0(r10)
  808f5c:	50800104 	addi	r2,r10,4
  808f60:	883e3b16 	blt	r17,zero,808850 <__alt_mem_onchip_mem+0xff788850>
  808f64:	d8802215 	stw	r2,136(sp)
  808f68:	80c00007 	ldb	r3,0(r16)
  808f6c:	003db406 	br	808640 <__alt_mem_onchip_mem+0xff788640>
  808f70:	01000044 	movi	r4,1
  808f74:	01c00ac4 	movi	r7,43
  808f78:	80c00007 	ldb	r3,0(r16)
  808f7c:	003db006 	br	808640 <__alt_mem_onchip_mem+0xff788640>
  808f80:	80c00007 	ldb	r3,0(r16)
  808f84:	82800044 	addi	r10,r16,1
  808f88:	1b423c26 	beq	r3,r13,80987c <___vfiprintf_internal_r+0x13b8>
  808f8c:	18bff404 	addi	r2,r3,-48
  808f90:	0013883a 	mov	r9,zero
  808f94:	30822b36 	bltu	r6,r2,809844 <___vfiprintf_internal_r+0x1380>
  808f98:	50c00007 	ldb	r3,0(r10)
  808f9c:	4a4002a4 	muli	r9,r9,10
  808fa0:	54000044 	addi	r16,r10,1
  808fa4:	8015883a 	mov	r10,r16
  808fa8:	4893883a 	add	r9,r9,r2
  808fac:	18bff404 	addi	r2,r3,-48
  808fb0:	30bff92e 	bgeu	r6,r2,808f98 <__alt_mem_onchip_mem+0xff788f98>
  808fb4:	483da30e 	bge	r9,zero,808644 <__alt_mem_onchip_mem+0xff788644>
  808fb8:	027fffc4 	movi	r9,-1
  808fbc:	003da106 	br	808644 <__alt_mem_onchip_mem+0xff788644>
  808fc0:	a5001014 	ori	r20,r20,64
  808fc4:	80c00007 	ldb	r3,0(r16)
  808fc8:	003d9d06 	br	808640 <__alt_mem_onchip_mem+0xff788640>
  808fcc:	da802217 	ldw	r10,136(sp)
  808fd0:	d8001d85 	stb	zero,118(sp)
  808fd4:	50c00204 	addi	r3,r10,8
  808fd8:	54800017 	ldw	r18,0(r10)
  808fdc:	54c00117 	ldw	r19,4(r10)
  808fe0:	4801ca16 	blt	r9,zero,80970c <___vfiprintf_internal_r+0x1248>
  808fe4:	013fdfc4 	movi	r4,-129
  808fe8:	94c4b03a 	or	r2,r18,r19
  808fec:	d8c02215 	stw	r3,136(sp)
  808ff0:	a128703a 	and	r20,r20,r4
  808ff4:	0039883a 	mov	fp,zero
  808ff8:	103f341e 	bne	r2,zero,808ccc <__alt_mem_onchip_mem+0xff788ccc>
  808ffc:	483e2e26 	beq	r9,zero,8088b8 <__alt_mem_onchip_mem+0xff7888b8>
  809000:	0025883a 	mov	r18,zero
  809004:	94800c04 	addi	r18,r18,48
  809008:	dc8019c5 	stb	r18,103(sp)
  80900c:	dcc02717 	ldw	r19,156(sp)
  809010:	dd4019c4 	addi	r21,sp,103
  809014:	003e2b06 	br	8088c4 <__alt_mem_onchip_mem+0xff7888c4>
  809018:	21003fcc 	andi	r4,r4,255
  80901c:	2002361e 	bne	r4,zero,8098f8 <___vfiprintf_internal_r+0x1434>
  809020:	1801c126 	beq	r3,zero,809728 <___vfiprintf_internal_r+0x1264>
  809024:	04800044 	movi	r18,1
  809028:	d8c01005 	stb	r3,64(sp)
  80902c:	d8001d85 	stb	zero,118(sp)
  809030:	9027883a 	mov	r19,r18
  809034:	dd401004 	addi	r21,sp,64
  809038:	003f1106 	br	808c80 <__alt_mem_onchip_mem+0xff788c80>
  80903c:	d9402117 	ldw	r5,132(sp)
  809040:	d9002017 	ldw	r4,128(sp)
  809044:	d9801a04 	addi	r6,sp,104
  809048:	d9c02b15 	stw	r7,172(sp)
  80904c:	dbc02a15 	stw	r15,168(sp)
  809050:	08083b00 	call	8083b0 <__sprint_r.part.0>
  809054:	d9c02b17 	ldw	r7,172(sp)
  809058:	dbc02a17 	ldw	r15,168(sp)
  80905c:	10006d1e 	bne	r2,zero,809214 <___vfiprintf_internal_r+0xd50>
  809060:	d9801b17 	ldw	r6,108(sp)
  809064:	d8801c17 	ldw	r2,112(sp)
  809068:	d811883a 	mov	r8,sp
  80906c:	31400044 	addi	r5,r6,1
  809070:	003e3306 	br	808940 <__alt_mem_onchip_mem+0xff788940>
  809074:	d9401b17 	ldw	r5,108(sp)
  809078:	d8801c17 	ldw	r2,112(sp)
  80907c:	29000044 	addi	r4,r5,1
  809080:	d8c01d87 	ldb	r3,118(sp)
  809084:	183e4d26 	beq	r3,zero,8089bc <__alt_mem_onchip_mem+0xff7889bc>
  809088:	00c00044 	movi	r3,1
  80908c:	d9401d84 	addi	r5,sp,118
  809090:	10c5883a 	add	r2,r2,r3
  809094:	41400015 	stw	r5,0(r8)
  809098:	40c00115 	stw	r3,4(r8)
  80909c:	d8801c15 	stw	r2,112(sp)
  8090a0:	d9001b15 	stw	r4,108(sp)
  8090a4:	014001c4 	movi	r5,7
  8090a8:	2900a90e 	bge	r5,r4,809350 <___vfiprintf_internal_r+0xe8c>
  8090ac:	1000da1e 	bne	r2,zero,809418 <___vfiprintf_internal_r+0xf54>
  8090b0:	7000ab1e 	bne	r14,zero,809360 <___vfiprintf_internal_r+0xe9c>
  8090b4:	000b883a 	mov	r5,zero
  8090b8:	1809883a 	mov	r4,r3
  8090bc:	d811883a 	mov	r8,sp
  8090c0:	00c02004 	movi	r3,128
  8090c4:	e0fe4d26 	beq	fp,r3,8089fc <__alt_mem_onchip_mem+0xff7889fc>
  8090c8:	4cf9c83a 	sub	fp,r9,r19
  8090cc:	073e7b0e 	bge	zero,fp,808abc <__alt_mem_onchip_mem+0xff788abc>
  8090d0:	01c00404 	movi	r7,16
  8090d4:	3f01900e 	bge	r7,fp,809718 <___vfiprintf_internal_r+0x1254>
  8090d8:	00c02074 	movhi	r3,129
  8090dc:	18c90504 	addi	r3,r3,9236
  8090e0:	d8c02415 	stw	r3,144(sp)
  8090e4:	034001c4 	movi	r13,7
  8090e8:	00000506 	br	809100 <___vfiprintf_internal_r+0xc3c>
  8090ec:	29000084 	addi	r4,r5,2
  8090f0:	42000204 	addi	r8,r8,8
  8090f4:	180b883a 	mov	r5,r3
  8090f8:	e73ffc04 	addi	fp,fp,-16
  8090fc:	3f000d0e 	bge	r7,fp,809134 <___vfiprintf_internal_r+0xc70>
  809100:	10800404 	addi	r2,r2,16
  809104:	28c00044 	addi	r3,r5,1
  809108:	45c00015 	stw	r23,0(r8)
  80910c:	41c00115 	stw	r7,4(r8)
  809110:	d8801c15 	stw	r2,112(sp)
  809114:	d8c01b15 	stw	r3,108(sp)
  809118:	68fff40e 	bge	r13,r3,8090ec <__alt_mem_onchip_mem+0xff7890ec>
  80911c:	1000101e 	bne	r2,zero,809160 <___vfiprintf_internal_r+0xc9c>
  809120:	e73ffc04 	addi	fp,fp,-16
  809124:	01000044 	movi	r4,1
  809128:	000b883a 	mov	r5,zero
  80912c:	d811883a 	mov	r8,sp
  809130:	3f3ff316 	blt	r7,fp,809100 <__alt_mem_onchip_mem+0xff789100>
  809134:	da802417 	ldw	r10,144(sp)
  809138:	1705883a 	add	r2,r2,fp
  80913c:	47000115 	stw	fp,4(r8)
  809140:	42800015 	stw	r10,0(r8)
  809144:	d8801c15 	stw	r2,112(sp)
  809148:	d9001b15 	stw	r4,108(sp)
  80914c:	00c001c4 	movi	r3,7
  809150:	19003616 	blt	r3,r4,80922c <___vfiprintf_internal_r+0xd68>
  809154:	42000204 	addi	r8,r8,8
  809158:	21000044 	addi	r4,r4,1
  80915c:	003e5706 	br	808abc <__alt_mem_onchip_mem+0xff788abc>
  809160:	d9402117 	ldw	r5,132(sp)
  809164:	d9002017 	ldw	r4,128(sp)
  809168:	d9801a04 	addi	r6,sp,104
  80916c:	d9c02b15 	stw	r7,172(sp)
  809170:	db402a15 	stw	r13,168(sp)
  809174:	08083b00 	call	8083b0 <__sprint_r.part.0>
  809178:	d9c02b17 	ldw	r7,172(sp)
  80917c:	db402a17 	ldw	r13,168(sp)
  809180:	1000241e 	bne	r2,zero,809214 <___vfiprintf_internal_r+0xd50>
  809184:	d9401b17 	ldw	r5,108(sp)
  809188:	d8801c17 	ldw	r2,112(sp)
  80918c:	d811883a 	mov	r8,sp
  809190:	29000044 	addi	r4,r5,1
  809194:	003fd806 	br	8090f8 <__alt_mem_onchip_mem+0xff7890f8>
  809198:	d9401b17 	ldw	r5,108(sp)
  80919c:	00c02074 	movhi	r3,129
  8091a0:	18c90904 	addi	r3,r3,9252
  8091a4:	d8c02415 	stw	r3,144(sp)
  8091a8:	29400044 	addi	r5,r5,1
  8091ac:	d8c02417 	ldw	r3,144(sp)
  8091b0:	14c5883a 	add	r2,r2,r19
  8091b4:	44c00115 	stw	r19,4(r8)
  8091b8:	40c00015 	stw	r3,0(r8)
  8091bc:	d8801c15 	stw	r2,112(sp)
  8091c0:	d9401b15 	stw	r5,108(sp)
  8091c4:	00c001c4 	movi	r3,7
  8091c8:	1940070e 	bge	r3,r5,8091e8 <___vfiprintf_internal_r+0xd24>
  8091cc:	103e4826 	beq	r2,zero,808af0 <__alt_mem_onchip_mem+0xff788af0>
  8091d0:	d9402117 	ldw	r5,132(sp)
  8091d4:	d9002017 	ldw	r4,128(sp)
  8091d8:	d9801a04 	addi	r6,sp,104
  8091dc:	08083b00 	call	8083b0 <__sprint_r.part.0>
  8091e0:	10000c1e 	bne	r2,zero,809214 <___vfiprintf_internal_r+0xd50>
  8091e4:	d8801c17 	ldw	r2,112(sp)
  8091e8:	8c80010e 	bge	r17,r18,8091f0 <___vfiprintf_internal_r+0xd2c>
  8091ec:	9023883a 	mov	r17,r18
  8091f0:	da802317 	ldw	r10,140(sp)
  8091f4:	5455883a 	add	r10,r10,r17
  8091f8:	da802315 	stw	r10,140(sp)
  8091fc:	103e4126 	beq	r2,zero,808b04 <__alt_mem_onchip_mem+0xff788b04>
  809200:	d9402117 	ldw	r5,132(sp)
  809204:	d9002017 	ldw	r4,128(sp)
  809208:	d9801a04 	addi	r6,sp,104
  80920c:	08083b00 	call	8083b0 <__sprint_r.part.0>
  809210:	103e3c26 	beq	r2,zero,808b04 <__alt_mem_onchip_mem+0xff788b04>
  809214:	dd002117 	ldw	r20,132(sp)
  809218:	a080030b 	ldhu	r2,12(r20)
  80921c:	1080100c 	andi	r2,r2,64
  809220:	1001231e 	bne	r2,zero,8096b0 <___vfiprintf_internal_r+0x11ec>
  809224:	d8802317 	ldw	r2,140(sp)
  809228:	003d7b06 	br	808818 <__alt_mem_onchip_mem+0xff788818>
  80922c:	1000991e 	bne	r2,zero,809494 <___vfiprintf_internal_r+0xfd0>
  809230:	00c00044 	movi	r3,1
  809234:	9805883a 	mov	r2,r19
  809238:	dd400015 	stw	r21,0(sp)
  80923c:	dcc00115 	stw	r19,4(sp)
  809240:	dcc01c15 	stw	r19,112(sp)
  809244:	d8c01b15 	stw	r3,108(sp)
  809248:	d811883a 	mov	r8,sp
  80924c:	42000204 	addi	r8,r8,8
  809250:	a2c0010c 	andi	r11,r20,4
  809254:	583fe426 	beq	r11,zero,8091e8 <__alt_mem_onchip_mem+0xff7891e8>
  809258:	8ca7c83a 	sub	r19,r17,r18
  80925c:	04ffe20e 	bge	zero,r19,8091e8 <__alt_mem_onchip_mem+0xff7891e8>
  809260:	01c00404 	movi	r7,16
  809264:	3cffcc0e 	bge	r7,r19,809198 <__alt_mem_onchip_mem+0xff789198>
  809268:	02802074 	movhi	r10,129
  80926c:	52890904 	addi	r10,r10,9252
  809270:	d9001b17 	ldw	r4,108(sp)
  809274:	da802415 	stw	r10,144(sp)
  809278:	382b883a 	mov	r21,r7
  80927c:	050001c4 	movi	r20,7
  809280:	df002017 	ldw	fp,128(sp)
  809284:	00000506 	br	80929c <___vfiprintf_internal_r+0xdd8>
  809288:	21400084 	addi	r5,r4,2
  80928c:	42000204 	addi	r8,r8,8
  809290:	1809883a 	mov	r4,r3
  809294:	9cfffc04 	addi	r19,r19,-16
  809298:	acffc40e 	bge	r21,r19,8091ac <__alt_mem_onchip_mem+0xff7891ac>
  80929c:	10800404 	addi	r2,r2,16
  8092a0:	20c00044 	addi	r3,r4,1
  8092a4:	45800015 	stw	r22,0(r8)
  8092a8:	45400115 	stw	r21,4(r8)
  8092ac:	d8801c15 	stw	r2,112(sp)
  8092b0:	d8c01b15 	stw	r3,108(sp)
  8092b4:	a0fff40e 	bge	r20,r3,809288 <__alt_mem_onchip_mem+0xff789288>
  8092b8:	1000041e 	bne	r2,zero,8092cc <___vfiprintf_internal_r+0xe08>
  8092bc:	01400044 	movi	r5,1
  8092c0:	0009883a 	mov	r4,zero
  8092c4:	d811883a 	mov	r8,sp
  8092c8:	003ff206 	br	809294 <__alt_mem_onchip_mem+0xff789294>
  8092cc:	d9402117 	ldw	r5,132(sp)
  8092d0:	d9801a04 	addi	r6,sp,104
  8092d4:	e009883a 	mov	r4,fp
  8092d8:	08083b00 	call	8083b0 <__sprint_r.part.0>
  8092dc:	103fcd1e 	bne	r2,zero,809214 <__alt_mem_onchip_mem+0xff789214>
  8092e0:	d9001b17 	ldw	r4,108(sp)
  8092e4:	d8801c17 	ldw	r2,112(sp)
  8092e8:	d811883a 	mov	r8,sp
  8092ec:	21400044 	addi	r5,r4,1
  8092f0:	003fe806 	br	809294 <__alt_mem_onchip_mem+0xff789294>
  8092f4:	d9402117 	ldw	r5,132(sp)
  8092f8:	d9002017 	ldw	r4,128(sp)
  8092fc:	d9801a04 	addi	r6,sp,104
  809300:	d9c02b15 	stw	r7,172(sp)
  809304:	db402a15 	stw	r13,168(sp)
  809308:	08083b00 	call	8083b0 <__sprint_r.part.0>
  80930c:	d9c02b17 	ldw	r7,172(sp)
  809310:	db402a17 	ldw	r13,168(sp)
  809314:	103fbf1e 	bne	r2,zero,809214 <__alt_mem_onchip_mem+0xff789214>
  809318:	d9401b17 	ldw	r5,108(sp)
  80931c:	d8801c17 	ldw	r2,112(sp)
  809320:	d811883a 	mov	r8,sp
  809324:	29800044 	addi	r6,r5,1
  809328:	003dc406 	br	808a3c <__alt_mem_onchip_mem+0xff788a3c>
  80932c:	1000d21e 	bne	r2,zero,809678 <___vfiprintf_internal_r+0x11b4>
  809330:	d8c01d87 	ldb	r3,118(sp)
  809334:	18009526 	beq	r3,zero,80958c <___vfiprintf_internal_r+0x10c8>
  809338:	00800044 	movi	r2,1
  80933c:	d8c01d84 	addi	r3,sp,118
  809340:	1009883a 	mov	r4,r2
  809344:	d8c00015 	stw	r3,0(sp)
  809348:	d8800115 	stw	r2,4(sp)
  80934c:	d811883a 	mov	r8,sp
  809350:	200b883a 	mov	r5,r4
  809354:	42000204 	addi	r8,r8,8
  809358:	21000044 	addi	r4,r4,1
  80935c:	003d9706 	br	8089bc <__alt_mem_onchip_mem+0xff7889bc>
  809360:	d9001d04 	addi	r4,sp,116
  809364:	00800084 	movi	r2,2
  809368:	d9000015 	stw	r4,0(sp)
  80936c:	d8800115 	stw	r2,4(sp)
  809370:	1809883a 	mov	r4,r3
  809374:	d811883a 	mov	r8,sp
  809378:	200b883a 	mov	r5,r4
  80937c:	42000204 	addi	r8,r8,8
  809380:	21000044 	addi	r4,r4,1
  809384:	003f4e06 	br	8090c0 <__alt_mem_onchip_mem+0xff7890c0>
  809388:	d8001d85 	stb	zero,118(sp)
  80938c:	48005016 	blt	r9,zero,8094d0 <___vfiprintf_internal_r+0x100c>
  809390:	00ffdfc4 	movi	r3,-129
  809394:	94c4b03a 	or	r2,r18,r19
  809398:	a0e8703a 	and	r20,r20,r3
  80939c:	103d4426 	beq	r2,zero,8088b0 <__alt_mem_onchip_mem+0xff7888b0>
  8093a0:	0039883a 	mov	fp,zero
  8093a4:	d9002617 	ldw	r4,152(sp)
  8093a8:	dd401a04 	addi	r21,sp,104
  8093ac:	908003cc 	andi	r2,r18,15
  8093b0:	9806973a 	slli	r3,r19,28
  8093b4:	2085883a 	add	r2,r4,r2
  8093b8:	9024d13a 	srli	r18,r18,4
  8093bc:	10800003 	ldbu	r2,0(r2)
  8093c0:	9826d13a 	srli	r19,r19,4
  8093c4:	ad7fffc4 	addi	r21,r21,-1
  8093c8:	1ca4b03a 	or	r18,r3,r18
  8093cc:	a8800005 	stb	r2,0(r21)
  8093d0:	94c4b03a 	or	r2,r18,r19
  8093d4:	103ff51e 	bne	r2,zero,8093ac <__alt_mem_onchip_mem+0xff7893ac>
  8093d8:	003e5906 	br	808d40 <__alt_mem_onchip_mem+0xff788d40>
  8093dc:	d9402117 	ldw	r5,132(sp)
  8093e0:	d9002017 	ldw	r4,128(sp)
  8093e4:	d9801a04 	addi	r6,sp,104
  8093e8:	08083b00 	call	8083b0 <__sprint_r.part.0>
  8093ec:	103f891e 	bne	r2,zero,809214 <__alt_mem_onchip_mem+0xff789214>
  8093f0:	d8801c17 	ldw	r2,112(sp)
  8093f4:	d811883a 	mov	r8,sp
  8093f8:	003f9506 	br	809250 <__alt_mem_onchip_mem+0xff789250>
  8093fc:	d9402117 	ldw	r5,132(sp)
  809400:	d9002017 	ldw	r4,128(sp)
  809404:	d9801a04 	addi	r6,sp,104
  809408:	08083b00 	call	8083b0 <__sprint_r.part.0>
  80940c:	103f811e 	bne	r2,zero,809214 <__alt_mem_onchip_mem+0xff789214>
  809410:	d811883a 	mov	r8,sp
  809414:	003ced06 	br	8087cc <__alt_mem_onchip_mem+0xff7887cc>
  809418:	d9402117 	ldw	r5,132(sp)
  80941c:	d9002017 	ldw	r4,128(sp)
  809420:	d9801a04 	addi	r6,sp,104
  809424:	da402c15 	stw	r9,176(sp)
  809428:	db802a15 	stw	r14,168(sp)
  80942c:	08083b00 	call	8083b0 <__sprint_r.part.0>
  809430:	da402c17 	ldw	r9,176(sp)
  809434:	db802a17 	ldw	r14,168(sp)
  809438:	103f761e 	bne	r2,zero,809214 <__alt_mem_onchip_mem+0xff789214>
  80943c:	d9401b17 	ldw	r5,108(sp)
  809440:	d8801c17 	ldw	r2,112(sp)
  809444:	d811883a 	mov	r8,sp
  809448:	29000044 	addi	r4,r5,1
  80944c:	003d5b06 	br	8089bc <__alt_mem_onchip_mem+0xff7889bc>
  809450:	d9402117 	ldw	r5,132(sp)
  809454:	d9002017 	ldw	r4,128(sp)
  809458:	d9801a04 	addi	r6,sp,104
  80945c:	da402c15 	stw	r9,176(sp)
  809460:	08083b00 	call	8083b0 <__sprint_r.part.0>
  809464:	da402c17 	ldw	r9,176(sp)
  809468:	103f6a1e 	bne	r2,zero,809214 <__alt_mem_onchip_mem+0xff789214>
  80946c:	d9401b17 	ldw	r5,108(sp)
  809470:	d8801c17 	ldw	r2,112(sp)
  809474:	d811883a 	mov	r8,sp
  809478:	29000044 	addi	r4,r5,1
  80947c:	003f1006 	br	8090c0 <__alt_mem_onchip_mem+0xff7890c0>
  809480:	1000c31e 	bne	r2,zero,809790 <___vfiprintf_internal_r+0x12cc>
  809484:	01000044 	movi	r4,1
  809488:	000b883a 	mov	r5,zero
  80948c:	d811883a 	mov	r8,sp
  809490:	003f0d06 	br	8090c8 <__alt_mem_onchip_mem+0xff7890c8>
  809494:	d9402117 	ldw	r5,132(sp)
  809498:	d9002017 	ldw	r4,128(sp)
  80949c:	d9801a04 	addi	r6,sp,104
  8094a0:	08083b00 	call	8083b0 <__sprint_r.part.0>
  8094a4:	103f5b1e 	bne	r2,zero,809214 <__alt_mem_onchip_mem+0xff789214>
  8094a8:	d9001b17 	ldw	r4,108(sp)
  8094ac:	d8801c17 	ldw	r2,112(sp)
  8094b0:	d811883a 	mov	r8,sp
  8094b4:	21000044 	addi	r4,r4,1
  8094b8:	003d8006 	br	808abc <__alt_mem_onchip_mem+0xff788abc>
  8094bc:	01002074 	movhi	r4,129
  8094c0:	2108a504 	addi	r4,r4,8852
  8094c4:	d9002615 	stw	r4,152(sp)
  8094c8:	d8c02215 	stw	r3,136(sp)
  8094cc:	1029883a 	mov	r20,r2
  8094d0:	94c4b03a 	or	r2,r18,r19
  8094d4:	103fb21e 	bne	r2,zero,8093a0 <__alt_mem_onchip_mem+0xff7893a0>
  8094d8:	0039883a 	mov	fp,zero
  8094dc:	00800084 	movi	r2,2
  8094e0:	003e6b06 	br	808e90 <__alt_mem_onchip_mem+0xff788e90>
  8094e4:	da802217 	ldw	r10,136(sp)
  8094e8:	d8001d85 	stb	zero,118(sp)
  8094ec:	0027883a 	mov	r19,zero
  8094f0:	50800104 	addi	r2,r10,4
  8094f4:	54800017 	ldw	r18,0(r10)
  8094f8:	483e6016 	blt	r9,zero,808e7c <__alt_mem_onchip_mem+0xff788e7c>
  8094fc:	00ffdfc4 	movi	r3,-129
  809500:	d8802215 	stw	r2,136(sp)
  809504:	a0e8703a 	and	r20,r20,r3
  809508:	0039883a 	mov	fp,zero
  80950c:	903ebb26 	beq	r18,zero,808ffc <__alt_mem_onchip_mem+0xff788ffc>
  809510:	00800244 	movi	r2,9
  809514:	14bdee36 	bltu	r2,r18,808cd0 <__alt_mem_onchip_mem+0xff788cd0>
  809518:	003eba06 	br	809004 <__alt_mem_onchip_mem+0xff789004>
  80951c:	00800c04 	movi	r2,48
  809520:	d8c01d45 	stb	r3,117(sp)
  809524:	d8801d05 	stb	r2,116(sp)
  809528:	d8001d85 	stb	zero,118(sp)
  80952c:	a0c00094 	ori	r3,r20,2
  809530:	4800a916 	blt	r9,zero,8097d8 <___vfiprintf_internal_r+0x1314>
  809534:	00bfdfc4 	movi	r2,-129
  809538:	a096703a 	and	r11,r20,r2
  80953c:	5d000094 	ori	r20,r11,2
  809540:	0039883a 	mov	fp,zero
  809544:	003f9706 	br	8093a4 <__alt_mem_onchip_mem+0xff7893a4>
  809548:	8025883a 	mov	r18,r16
  80954c:	003c2e06 	br	808608 <__alt_mem_onchip_mem+0xff788608>
  809550:	00802074 	movhi	r2,129
  809554:	1088a504 	addi	r2,r2,8852
  809558:	0039883a 	mov	fp,zero
  80955c:	d8802615 	stw	r2,152(sp)
  809560:	003f9006 	br	8093a4 <__alt_mem_onchip_mem+0xff7893a4>
  809564:	04a5c83a 	sub	r18,zero,r18
  809568:	07000b44 	movi	fp,45
  80956c:	9004c03a 	cmpne	r2,r18,zero
  809570:	04e7c83a 	sub	r19,zero,r19
  809574:	df001d85 	stb	fp,118(sp)
  809578:	98a7c83a 	sub	r19,r19,r2
  80957c:	48009f16 	blt	r9,zero,8097fc <___vfiprintf_internal_r+0x1338>
  809580:	00bfdfc4 	movi	r2,-129
  809584:	a0a8703a 	and	r20,r20,r2
  809588:	003dd006 	br	808ccc <__alt_mem_onchip_mem+0xff788ccc>
  80958c:	70004c26 	beq	r14,zero,8096c0 <___vfiprintf_internal_r+0x11fc>
  809590:	00800084 	movi	r2,2
  809594:	d8c01d04 	addi	r3,sp,116
  809598:	d8c00015 	stw	r3,0(sp)
  80959c:	d8800115 	stw	r2,4(sp)
  8095a0:	01000044 	movi	r4,1
  8095a4:	d811883a 	mov	r8,sp
  8095a8:	003f7306 	br	809378 <__alt_mem_onchip_mem+0xff789378>
  8095ac:	a080100c 	andi	r2,r20,64
  8095b0:	da802217 	ldw	r10,136(sp)
  8095b4:	103e0626 	beq	r2,zero,808dd0 <__alt_mem_onchip_mem+0xff788dd0>
  8095b8:	5480000f 	ldh	r18,0(r10)
  8095bc:	52800104 	addi	r10,r10,4
  8095c0:	da802215 	stw	r10,136(sp)
  8095c4:	9027d7fa 	srai	r19,r18,31
  8095c8:	9805883a 	mov	r2,r19
  8095cc:	003db806 	br	808cb0 <__alt_mem_onchip_mem+0xff788cb0>
  8095d0:	a080040c 	andi	r2,r20,16
  8095d4:	1000091e 	bne	r2,zero,8095fc <___vfiprintf_internal_r+0x1138>
  8095d8:	a2c0100c 	andi	r11,r20,64
  8095dc:	58000726 	beq	r11,zero,8095fc <___vfiprintf_internal_r+0x1138>
  8095e0:	da802217 	ldw	r10,136(sp)
  8095e4:	50800017 	ldw	r2,0(r10)
  8095e8:	52800104 	addi	r10,r10,4
  8095ec:	da802215 	stw	r10,136(sp)
  8095f0:	da802317 	ldw	r10,140(sp)
  8095f4:	1280000d 	sth	r10,0(r2)
  8095f8:	003be706 	br	808598 <__alt_mem_onchip_mem+0xff788598>
  8095fc:	da802217 	ldw	r10,136(sp)
  809600:	50800017 	ldw	r2,0(r10)
  809604:	52800104 	addi	r10,r10,4
  809608:	da802215 	stw	r10,136(sp)
  80960c:	da802317 	ldw	r10,140(sp)
  809610:	12800015 	stw	r10,0(r2)
  809614:	003be006 	br	808598 <__alt_mem_onchip_mem+0xff788598>
  809618:	a080100c 	andi	r2,r20,64
  80961c:	da802217 	ldw	r10,136(sp)
  809620:	10003026 	beq	r2,zero,8096e4 <___vfiprintf_internal_r+0x1220>
  809624:	5480000b 	ldhu	r18,0(r10)
  809628:	52800104 	addi	r10,r10,4
  80962c:	0027883a 	mov	r19,zero
  809630:	da802215 	stw	r10,136(sp)
  809634:	003d8006 	br	808c38 <__alt_mem_onchip_mem+0xff788c38>
  809638:	80c00007 	ldb	r3,0(r16)
  80963c:	003c0006 	br	808640 <__alt_mem_onchip_mem+0xff788640>
  809640:	a080100c 	andi	r2,r20,64
  809644:	d8001d85 	stb	zero,118(sp)
  809648:	da802217 	ldw	r10,136(sp)
  80964c:	1000201e 	bne	r2,zero,8096d0 <___vfiprintf_internal_r+0x120c>
  809650:	50800104 	addi	r2,r10,4
  809654:	54800017 	ldw	r18,0(r10)
  809658:	0027883a 	mov	r19,zero
  80965c:	483def0e 	bge	r9,zero,808e1c <__alt_mem_onchip_mem+0xff788e1c>
  809660:	94c6b03a 	or	r3,r18,r19
  809664:	d8802215 	stw	r2,136(sp)
  809668:	183d4e1e 	bne	r3,zero,808ba4 <__alt_mem_onchip_mem+0xff788ba4>
  80966c:	0039883a 	mov	fp,zero
  809670:	0005883a 	mov	r2,zero
  809674:	003e0606 	br	808e90 <__alt_mem_onchip_mem+0xff788e90>
  809678:	d9402117 	ldw	r5,132(sp)
  80967c:	d9002017 	ldw	r4,128(sp)
  809680:	d9801a04 	addi	r6,sp,104
  809684:	da402c15 	stw	r9,176(sp)
  809688:	db802a15 	stw	r14,168(sp)
  80968c:	08083b00 	call	8083b0 <__sprint_r.part.0>
  809690:	da402c17 	ldw	r9,176(sp)
  809694:	db802a17 	ldw	r14,168(sp)
  809698:	103ede1e 	bne	r2,zero,809214 <__alt_mem_onchip_mem+0xff789214>
  80969c:	d9401b17 	ldw	r5,108(sp)
  8096a0:	d8801c17 	ldw	r2,112(sp)
  8096a4:	d811883a 	mov	r8,sp
  8096a8:	29000044 	addi	r4,r5,1
  8096ac:	003e7406 	br	809080 <__alt_mem_onchip_mem+0xff789080>
  8096b0:	00bfffc4 	movi	r2,-1
  8096b4:	003c5806 	br	808818 <__alt_mem_onchip_mem+0xff788818>
  8096b8:	d811883a 	mov	r8,sp
  8096bc:	003ee806 	br	809260 <__alt_mem_onchip_mem+0xff789260>
  8096c0:	000b883a 	mov	r5,zero
  8096c4:	01000044 	movi	r4,1
  8096c8:	d811883a 	mov	r8,sp
  8096cc:	003e7c06 	br	8090c0 <__alt_mem_onchip_mem+0xff7890c0>
  8096d0:	50800104 	addi	r2,r10,4
  8096d4:	5480000b 	ldhu	r18,0(r10)
  8096d8:	0027883a 	mov	r19,zero
  8096dc:	483dcf0e 	bge	r9,zero,808e1c <__alt_mem_onchip_mem+0xff788e1c>
  8096e0:	003fdf06 	br	809660 <__alt_mem_onchip_mem+0xff789660>
  8096e4:	54800017 	ldw	r18,0(r10)
  8096e8:	52800104 	addi	r10,r10,4
  8096ec:	0027883a 	mov	r19,zero
  8096f0:	da802215 	stw	r10,136(sp)
  8096f4:	003d5006 	br	808c38 <__alt_mem_onchip_mem+0xff788c38>
  8096f8:	50800104 	addi	r2,r10,4
  8096fc:	5480000b 	ldhu	r18,0(r10)
  809700:	0027883a 	mov	r19,zero
  809704:	483f7d0e 	bge	r9,zero,8094fc <__alt_mem_onchip_mem+0xff7894fc>
  809708:	003ddc06 	br	808e7c <__alt_mem_onchip_mem+0xff788e7c>
  80970c:	d8c02215 	stw	r3,136(sp)
  809710:	0039883a 	mov	fp,zero
  809714:	003ddb06 	br	808e84 <__alt_mem_onchip_mem+0xff788e84>
  809718:	02802074 	movhi	r10,129
  80971c:	52890504 	addi	r10,r10,9236
  809720:	da802415 	stw	r10,144(sp)
  809724:	003e8306 	br	809134 <__alt_mem_onchip_mem+0xff789134>
  809728:	d8801c17 	ldw	r2,112(sp)
  80972c:	dd002117 	ldw	r20,132(sp)
  809730:	103eb926 	beq	r2,zero,809218 <__alt_mem_onchip_mem+0xff789218>
  809734:	d9002017 	ldw	r4,128(sp)
  809738:	d9801a04 	addi	r6,sp,104
  80973c:	a00b883a 	mov	r5,r20
  809740:	08083b00 	call	8083b0 <__sprint_r.part.0>
  809744:	003eb406 	br	809218 <__alt_mem_onchip_mem+0xff789218>
  809748:	80c00043 	ldbu	r3,1(r16)
  80974c:	a5000814 	ori	r20,r20,32
  809750:	84000044 	addi	r16,r16,1
  809754:	18c03fcc 	andi	r3,r3,255
  809758:	18c0201c 	xori	r3,r3,128
  80975c:	18ffe004 	addi	r3,r3,-128
  809760:	003bb706 	br	808640 <__alt_mem_onchip_mem+0xff788640>
  809764:	a809883a 	mov	r4,r21
  809768:	d8c02a15 	stw	r3,168(sp)
  80976c:	da002b15 	stw	r8,172(sp)
  809770:	08083180 	call	808318 <strlen>
  809774:	d8c02a17 	ldw	r3,168(sp)
  809778:	1027883a 	mov	r19,r2
  80977c:	df001d83 	ldbu	fp,118(sp)
  809780:	d8c02215 	stw	r3,136(sp)
  809784:	0013883a 	mov	r9,zero
  809788:	da002b17 	ldw	r8,172(sp)
  80978c:	003c4d06 	br	8088c4 <__alt_mem_onchip_mem+0xff7888c4>
  809790:	d9402117 	ldw	r5,132(sp)
  809794:	d9002017 	ldw	r4,128(sp)
  809798:	d9801a04 	addi	r6,sp,104
  80979c:	da402c15 	stw	r9,176(sp)
  8097a0:	08083b00 	call	8083b0 <__sprint_r.part.0>
  8097a4:	da402c17 	ldw	r9,176(sp)
  8097a8:	103e9a1e 	bne	r2,zero,809214 <__alt_mem_onchip_mem+0xff789214>
  8097ac:	d9401b17 	ldw	r5,108(sp)
  8097b0:	d8801c17 	ldw	r2,112(sp)
  8097b4:	d811883a 	mov	r8,sp
  8097b8:	29000044 	addi	r4,r5,1
  8097bc:	003e4206 	br	8090c8 <__alt_mem_onchip_mem+0xff7890c8>
  8097c0:	d9401b17 	ldw	r5,108(sp)
  8097c4:	01002074 	movhi	r4,129
  8097c8:	21090904 	addi	r4,r4,9252
  8097cc:	d9002415 	stw	r4,144(sp)
  8097d0:	29400044 	addi	r5,r5,1
  8097d4:	003c6d06 	br	80898c <__alt_mem_onchip_mem+0xff78898c>
  8097d8:	0039883a 	mov	fp,zero
  8097dc:	00800084 	movi	r2,2
  8097e0:	10803fcc 	andi	r2,r2,255
  8097e4:	01000044 	movi	r4,1
  8097e8:	11001e26 	beq	r2,r4,809864 <___vfiprintf_internal_r+0x13a0>
  8097ec:	01000084 	movi	r4,2
  8097f0:	11001e1e 	bne	r2,r4,80986c <___vfiprintf_internal_r+0x13a8>
  8097f4:	1829883a 	mov	r20,r3
  8097f8:	003eea06 	br	8093a4 <__alt_mem_onchip_mem+0xff7893a4>
  8097fc:	a007883a 	mov	r3,r20
  809800:	00800044 	movi	r2,1
  809804:	003ff606 	br	8097e0 <__alt_mem_onchip_mem+0xff7897e0>
  809808:	00800184 	movi	r2,6
  80980c:	1240012e 	bgeu	r2,r9,809814 <___vfiprintf_internal_r+0x1350>
  809810:	1013883a 	mov	r9,r2
  809814:	4827883a 	mov	r19,r9
  809818:	4825883a 	mov	r18,r9
  80981c:	48001516 	blt	r9,zero,809874 <___vfiprintf_internal_r+0x13b0>
  809820:	05402074 	movhi	r21,129
  809824:	d8c02215 	stw	r3,136(sp)
  809828:	ad48aa04 	addi	r21,r21,8872
  80982c:	003d1406 	br	808c80 <__alt_mem_onchip_mem+0xff788c80>
  809830:	02802074 	movhi	r10,129
  809834:	52890504 	addi	r10,r10,9236
  809838:	da802415 	stw	r10,144(sp)
  80983c:	200d883a 	mov	r6,r4
  809840:	003c9106 	br	808a88 <__alt_mem_onchip_mem+0xff788a88>
  809844:	5021883a 	mov	r16,r10
  809848:	0013883a 	mov	r9,zero
  80984c:	003b7d06 	br	808644 <__alt_mem_onchip_mem+0xff788644>
  809850:	4827883a 	mov	r19,r9
  809854:	df001d83 	ldbu	fp,118(sp)
  809858:	d8c02215 	stw	r3,136(sp)
  80985c:	0013883a 	mov	r9,zero
  809860:	003c1806 	br	8088c4 <__alt_mem_onchip_mem+0xff7888c4>
  809864:	1829883a 	mov	r20,r3
  809868:	003d1806 	br	808ccc <__alt_mem_onchip_mem+0xff788ccc>
  80986c:	1829883a 	mov	r20,r3
  809870:	003ccd06 	br	808ba8 <__alt_mem_onchip_mem+0xff788ba8>
  809874:	0025883a 	mov	r18,zero
  809878:	003fe906 	br	809820 <__alt_mem_onchip_mem+0xff789820>
  80987c:	d8802217 	ldw	r2,136(sp)
  809880:	80c00043 	ldbu	r3,1(r16)
  809884:	5021883a 	mov	r16,r10
  809888:	12400017 	ldw	r9,0(r2)
  80988c:	10800104 	addi	r2,r2,4
  809890:	d8802215 	stw	r2,136(sp)
  809894:	483faf0e 	bge	r9,zero,809754 <__alt_mem_onchip_mem+0xff789754>
  809898:	18c03fcc 	andi	r3,r3,255
  80989c:	18c0201c 	xori	r3,r3,128
  8098a0:	027fffc4 	movi	r9,-1
  8098a4:	18ffe004 	addi	r3,r3,-128
  8098a8:	003b6506 	br	808640 <__alt_mem_onchip_mem+0xff788640>
  8098ac:	d9c01d85 	stb	r7,118(sp)
  8098b0:	003ca006 	br	808b34 <__alt_mem_onchip_mem+0xff788b34>
  8098b4:	d9c01d85 	stb	r7,118(sp)
  8098b8:	003cad06 	br	808b70 <__alt_mem_onchip_mem+0xff788b70>
  8098bc:	d9c01d85 	stb	r7,118(sp)
  8098c0:	003d7d06 	br	808eb8 <__alt_mem_onchip_mem+0xff788eb8>
  8098c4:	d9c01d85 	stb	r7,118(sp)
  8098c8:	003d5f06 	br	808e48 <__alt_mem_onchip_mem+0xff788e48>
  8098cc:	a080004c 	andi	r2,r20,1
  8098d0:	0039883a 	mov	fp,zero
  8098d4:	10000526 	beq	r2,zero,8098ec <___vfiprintf_internal_r+0x1428>
  8098d8:	00800c04 	movi	r2,48
  8098dc:	d88019c5 	stb	r2,103(sp)
  8098e0:	dcc02717 	ldw	r19,156(sp)
  8098e4:	dd4019c4 	addi	r21,sp,103
  8098e8:	003bf606 	br	8088c4 <__alt_mem_onchip_mem+0xff7888c4>
  8098ec:	0027883a 	mov	r19,zero
  8098f0:	dd401a04 	addi	r21,sp,104
  8098f4:	003bf306 	br	8088c4 <__alt_mem_onchip_mem+0xff7888c4>
  8098f8:	d9c01d85 	stb	r7,118(sp)
  8098fc:	003dc806 	br	809020 <__alt_mem_onchip_mem+0xff789020>
  809900:	d9c01d85 	stb	r7,118(sp)
  809904:	003d3a06 	br	808df0 <__alt_mem_onchip_mem+0xff788df0>
  809908:	d9c01d85 	stb	r7,118(sp)
  80990c:	003d2a06 	br	808db8 <__alt_mem_onchip_mem+0xff788db8>
  809910:	d9c01d85 	stb	r7,118(sp)
  809914:	003cde06 	br	808c90 <__alt_mem_onchip_mem+0xff788c90>
  809918:	d9c01d85 	stb	r7,118(sp)
  80991c:	003cbc06 	br	808c10 <__alt_mem_onchip_mem+0xff788c10>

00809920 <__vfiprintf_internal>:
  809920:	00802074 	movhi	r2,129
  809924:	10912504 	addi	r2,r2,17556
  809928:	300f883a 	mov	r7,r6
  80992c:	280d883a 	mov	r6,r5
  809930:	200b883a 	mov	r5,r4
  809934:	11000017 	ldw	r4,0(r2)
  809938:	08084c41 	jmpi	8084c4 <___vfiprintf_internal_r>

0080993c <__sbprintf>:
  80993c:	2880030b 	ldhu	r2,12(r5)
  809940:	2ac01917 	ldw	r11,100(r5)
  809944:	2a80038b 	ldhu	r10,14(r5)
  809948:	2a400717 	ldw	r9,28(r5)
  80994c:	2a000917 	ldw	r8,36(r5)
  809950:	defee204 	addi	sp,sp,-1144
  809954:	00c10004 	movi	r3,1024
  809958:	dc011a15 	stw	r16,1128(sp)
  80995c:	10bfff4c 	andi	r2,r2,65533
  809960:	2821883a 	mov	r16,r5
  809964:	d8cb883a 	add	r5,sp,r3
  809968:	dc811c15 	stw	r18,1136(sp)
  80996c:	dc411b15 	stw	r17,1132(sp)
  809970:	dfc11d15 	stw	ra,1140(sp)
  809974:	2025883a 	mov	r18,r4
  809978:	d881030d 	sth	r2,1036(sp)
  80997c:	dac11915 	stw	r11,1124(sp)
  809980:	da81038d 	sth	r10,1038(sp)
  809984:	da410715 	stw	r9,1052(sp)
  809988:	da010915 	stw	r8,1060(sp)
  80998c:	dec10015 	stw	sp,1024(sp)
  809990:	dec10415 	stw	sp,1040(sp)
  809994:	d8c10215 	stw	r3,1032(sp)
  809998:	d8c10515 	stw	r3,1044(sp)
  80999c:	d8010615 	stw	zero,1048(sp)
  8099a0:	08084c40 	call	8084c4 <___vfiprintf_internal_r>
  8099a4:	1023883a 	mov	r17,r2
  8099a8:	10000416 	blt	r2,zero,8099bc <__sbprintf+0x80>
  8099ac:	d9410004 	addi	r5,sp,1024
  8099b0:	9009883a 	mov	r4,r18
  8099b4:	080631c0 	call	80631c <_fflush_r>
  8099b8:	10000d1e 	bne	r2,zero,8099f0 <__sbprintf+0xb4>
  8099bc:	d881030b 	ldhu	r2,1036(sp)
  8099c0:	1080100c 	andi	r2,r2,64
  8099c4:	10000326 	beq	r2,zero,8099d4 <__sbprintf+0x98>
  8099c8:	8080030b 	ldhu	r2,12(r16)
  8099cc:	10801014 	ori	r2,r2,64
  8099d0:	8080030d 	sth	r2,12(r16)
  8099d4:	8805883a 	mov	r2,r17
  8099d8:	dfc11d17 	ldw	ra,1140(sp)
  8099dc:	dc811c17 	ldw	r18,1136(sp)
  8099e0:	dc411b17 	ldw	r17,1132(sp)
  8099e4:	dc011a17 	ldw	r16,1128(sp)
  8099e8:	dec11e04 	addi	sp,sp,1144
  8099ec:	f800283a 	ret
  8099f0:	047fffc4 	movi	r17,-1
  8099f4:	003ff106 	br	8099bc <__alt_mem_onchip_mem+0xff7899bc>

008099f8 <_calloc_r>:
  8099f8:	298b383a 	mul	r5,r5,r6
  8099fc:	defffe04 	addi	sp,sp,-8
  809a00:	dfc00115 	stw	ra,4(sp)
  809a04:	dc000015 	stw	r16,0(sp)
  809a08:	08016200 	call	801620 <_malloc_r>
  809a0c:	10002926 	beq	r2,zero,809ab4 <_calloc_r+0xbc>
  809a10:	11bfff17 	ldw	r6,-4(r2)
  809a14:	1021883a 	mov	r16,r2
  809a18:	00bfff04 	movi	r2,-4
  809a1c:	308c703a 	and	r6,r6,r2
  809a20:	00c00904 	movi	r3,36
  809a24:	308d883a 	add	r6,r6,r2
  809a28:	19801636 	bltu	r3,r6,809a84 <_calloc_r+0x8c>
  809a2c:	008004c4 	movi	r2,19
  809a30:	11800b2e 	bgeu	r2,r6,809a60 <_calloc_r+0x68>
  809a34:	80000015 	stw	zero,0(r16)
  809a38:	80000115 	stw	zero,4(r16)
  809a3c:	008006c4 	movi	r2,27
  809a40:	11801a2e 	bgeu	r2,r6,809aac <_calloc_r+0xb4>
  809a44:	80000215 	stw	zero,8(r16)
  809a48:	80000315 	stw	zero,12(r16)
  809a4c:	30c0151e 	bne	r6,r3,809aa4 <_calloc_r+0xac>
  809a50:	80000415 	stw	zero,16(r16)
  809a54:	80800604 	addi	r2,r16,24
  809a58:	80000515 	stw	zero,20(r16)
  809a5c:	00000106 	br	809a64 <_calloc_r+0x6c>
  809a60:	8005883a 	mov	r2,r16
  809a64:	10000015 	stw	zero,0(r2)
  809a68:	10000115 	stw	zero,4(r2)
  809a6c:	10000215 	stw	zero,8(r2)
  809a70:	8005883a 	mov	r2,r16
  809a74:	dfc00117 	ldw	ra,4(sp)
  809a78:	dc000017 	ldw	r16,0(sp)
  809a7c:	dec00204 	addi	sp,sp,8
  809a80:	f800283a 	ret
  809a84:	000b883a 	mov	r5,zero
  809a88:	8009883a 	mov	r4,r16
  809a8c:	0801e2c0 	call	801e2c <memset>
  809a90:	8005883a 	mov	r2,r16
  809a94:	dfc00117 	ldw	ra,4(sp)
  809a98:	dc000017 	ldw	r16,0(sp)
  809a9c:	dec00204 	addi	sp,sp,8
  809aa0:	f800283a 	ret
  809aa4:	80800404 	addi	r2,r16,16
  809aa8:	003fee06 	br	809a64 <__alt_mem_onchip_mem+0xff789a64>
  809aac:	80800204 	addi	r2,r16,8
  809ab0:	003fec06 	br	809a64 <__alt_mem_onchip_mem+0xff789a64>
  809ab4:	0005883a 	mov	r2,zero
  809ab8:	003fee06 	br	809a74 <__alt_mem_onchip_mem+0xff789a74>

00809abc <_fclose_r>:
  809abc:	28003926 	beq	r5,zero,809ba4 <_fclose_r+0xe8>
  809ac0:	defffc04 	addi	sp,sp,-16
  809ac4:	dc400115 	stw	r17,4(sp)
  809ac8:	dc000015 	stw	r16,0(sp)
  809acc:	dfc00315 	stw	ra,12(sp)
  809ad0:	dc800215 	stw	r18,8(sp)
  809ad4:	2023883a 	mov	r17,r4
  809ad8:	2821883a 	mov	r16,r5
  809adc:	20000226 	beq	r4,zero,809ae8 <_fclose_r+0x2c>
  809ae0:	20800e17 	ldw	r2,56(r4)
  809ae4:	10002726 	beq	r2,zero,809b84 <_fclose_r+0xc8>
  809ae8:	8080030f 	ldh	r2,12(r16)
  809aec:	1000071e 	bne	r2,zero,809b0c <_fclose_r+0x50>
  809af0:	0005883a 	mov	r2,zero
  809af4:	dfc00317 	ldw	ra,12(sp)
  809af8:	dc800217 	ldw	r18,8(sp)
  809afc:	dc400117 	ldw	r17,4(sp)
  809b00:	dc000017 	ldw	r16,0(sp)
  809b04:	dec00404 	addi	sp,sp,16
  809b08:	f800283a 	ret
  809b0c:	800b883a 	mov	r5,r16
  809b10:	8809883a 	mov	r4,r17
  809b14:	08061000 	call	806100 <__sflush_r>
  809b18:	1025883a 	mov	r18,r2
  809b1c:	80800b17 	ldw	r2,44(r16)
  809b20:	10000426 	beq	r2,zero,809b34 <_fclose_r+0x78>
  809b24:	81400717 	ldw	r5,28(r16)
  809b28:	8809883a 	mov	r4,r17
  809b2c:	103ee83a 	callr	r2
  809b30:	10001616 	blt	r2,zero,809b8c <_fclose_r+0xd0>
  809b34:	8080030b 	ldhu	r2,12(r16)
  809b38:	1080200c 	andi	r2,r2,128
  809b3c:	1000151e 	bne	r2,zero,809b94 <_fclose_r+0xd8>
  809b40:	81400c17 	ldw	r5,48(r16)
  809b44:	28000526 	beq	r5,zero,809b5c <_fclose_r+0xa0>
  809b48:	80801004 	addi	r2,r16,64
  809b4c:	28800226 	beq	r5,r2,809b58 <_fclose_r+0x9c>
  809b50:	8809883a 	mov	r4,r17
  809b54:	08069180 	call	806918 <_free_r>
  809b58:	80000c15 	stw	zero,48(r16)
  809b5c:	81401117 	ldw	r5,68(r16)
  809b60:	28000326 	beq	r5,zero,809b70 <_fclose_r+0xb4>
  809b64:	8809883a 	mov	r4,r17
  809b68:	08069180 	call	806918 <_free_r>
  809b6c:	80001115 	stw	zero,68(r16)
  809b70:	08067080 	call	806708 <__sfp_lock_acquire>
  809b74:	8000030d 	sth	zero,12(r16)
  809b78:	080670c0 	call	80670c <__sfp_lock_release>
  809b7c:	9005883a 	mov	r2,r18
  809b80:	003fdc06 	br	809af4 <__alt_mem_onchip_mem+0xff789af4>
  809b84:	08066f80 	call	8066f8 <__sinit>
  809b88:	003fd706 	br	809ae8 <__alt_mem_onchip_mem+0xff789ae8>
  809b8c:	04bfffc4 	movi	r18,-1
  809b90:	003fe806 	br	809b34 <__alt_mem_onchip_mem+0xff789b34>
  809b94:	81400417 	ldw	r5,16(r16)
  809b98:	8809883a 	mov	r4,r17
  809b9c:	08069180 	call	806918 <_free_r>
  809ba0:	003fe706 	br	809b40 <__alt_mem_onchip_mem+0xff789b40>
  809ba4:	0005883a 	mov	r2,zero
  809ba8:	f800283a 	ret

00809bac <fclose>:
  809bac:	00802074 	movhi	r2,129
  809bb0:	10912504 	addi	r2,r2,17556
  809bb4:	200b883a 	mov	r5,r4
  809bb8:	11000017 	ldw	r4,0(r2)
  809bbc:	0809abc1 	jmpi	809abc <_fclose_r>

00809bc0 <__fputwc>:
  809bc0:	defff804 	addi	sp,sp,-32
  809bc4:	dcc00415 	stw	r19,16(sp)
  809bc8:	dc800315 	stw	r18,12(sp)
  809bcc:	dc000115 	stw	r16,4(sp)
  809bd0:	dfc00715 	stw	ra,28(sp)
  809bd4:	dd400615 	stw	r21,24(sp)
  809bd8:	dd000515 	stw	r20,20(sp)
  809bdc:	dc400215 	stw	r17,8(sp)
  809be0:	2027883a 	mov	r19,r4
  809be4:	2825883a 	mov	r18,r5
  809be8:	3021883a 	mov	r16,r6
  809bec:	0806e8c0 	call	806e8c <__locale_mb_cur_max>
  809bf0:	00c00044 	movi	r3,1
  809bf4:	10c03e26 	beq	r2,r3,809cf0 <__fputwc+0x130>
  809bf8:	81c01704 	addi	r7,r16,92
  809bfc:	900d883a 	mov	r6,r18
  809c00:	d80b883a 	mov	r5,sp
  809c04:	9809883a 	mov	r4,r19
  809c08:	080aa9c0 	call	80aa9c <_wcrtomb_r>
  809c0c:	1029883a 	mov	r20,r2
  809c10:	00bfffc4 	movi	r2,-1
  809c14:	a0802026 	beq	r20,r2,809c98 <__fputwc+0xd8>
  809c18:	d9400003 	ldbu	r5,0(sp)
  809c1c:	a0001c26 	beq	r20,zero,809c90 <__fputwc+0xd0>
  809c20:	0023883a 	mov	r17,zero
  809c24:	05400284 	movi	r21,10
  809c28:	00000906 	br	809c50 <__fputwc+0x90>
  809c2c:	80800017 	ldw	r2,0(r16)
  809c30:	11400005 	stb	r5,0(r2)
  809c34:	80c00017 	ldw	r3,0(r16)
  809c38:	18c00044 	addi	r3,r3,1
  809c3c:	80c00015 	stw	r3,0(r16)
  809c40:	8c400044 	addi	r17,r17,1
  809c44:	dc45883a 	add	r2,sp,r17
  809c48:	8d00112e 	bgeu	r17,r20,809c90 <__fputwc+0xd0>
  809c4c:	11400003 	ldbu	r5,0(r2)
  809c50:	80c00217 	ldw	r3,8(r16)
  809c54:	18ffffc4 	addi	r3,r3,-1
  809c58:	80c00215 	stw	r3,8(r16)
  809c5c:	183ff30e 	bge	r3,zero,809c2c <__alt_mem_onchip_mem+0xff789c2c>
  809c60:	80800617 	ldw	r2,24(r16)
  809c64:	18801916 	blt	r3,r2,809ccc <__fputwc+0x10c>
  809c68:	80800017 	ldw	r2,0(r16)
  809c6c:	11400005 	stb	r5,0(r2)
  809c70:	80800017 	ldw	r2,0(r16)
  809c74:	10c00003 	ldbu	r3,0(r2)
  809c78:	10800044 	addi	r2,r2,1
  809c7c:	1d402326 	beq	r3,r21,809d0c <__fputwc+0x14c>
  809c80:	80800015 	stw	r2,0(r16)
  809c84:	8c400044 	addi	r17,r17,1
  809c88:	dc45883a 	add	r2,sp,r17
  809c8c:	8d3fef36 	bltu	r17,r20,809c4c <__alt_mem_onchip_mem+0xff789c4c>
  809c90:	9005883a 	mov	r2,r18
  809c94:	00000406 	br	809ca8 <__fputwc+0xe8>
  809c98:	80c0030b 	ldhu	r3,12(r16)
  809c9c:	a005883a 	mov	r2,r20
  809ca0:	18c01014 	ori	r3,r3,64
  809ca4:	80c0030d 	sth	r3,12(r16)
  809ca8:	dfc00717 	ldw	ra,28(sp)
  809cac:	dd400617 	ldw	r21,24(sp)
  809cb0:	dd000517 	ldw	r20,20(sp)
  809cb4:	dcc00417 	ldw	r19,16(sp)
  809cb8:	dc800317 	ldw	r18,12(sp)
  809cbc:	dc400217 	ldw	r17,8(sp)
  809cc0:	dc000117 	ldw	r16,4(sp)
  809cc4:	dec00804 	addi	sp,sp,32
  809cc8:	f800283a 	ret
  809ccc:	800d883a 	mov	r6,r16
  809cd0:	29403fcc 	andi	r5,r5,255
  809cd4:	9809883a 	mov	r4,r19
  809cd8:	080a9440 	call	80a944 <__swbuf_r>
  809cdc:	10bfffe0 	cmpeqi	r2,r2,-1
  809ce0:	10803fcc 	andi	r2,r2,255
  809ce4:	103fd626 	beq	r2,zero,809c40 <__alt_mem_onchip_mem+0xff789c40>
  809ce8:	00bfffc4 	movi	r2,-1
  809cec:	003fee06 	br	809ca8 <__alt_mem_onchip_mem+0xff789ca8>
  809cf0:	90ffffc4 	addi	r3,r18,-1
  809cf4:	01003f84 	movi	r4,254
  809cf8:	20ffbf36 	bltu	r4,r3,809bf8 <__alt_mem_onchip_mem+0xff789bf8>
  809cfc:	900b883a 	mov	r5,r18
  809d00:	dc800005 	stb	r18,0(sp)
  809d04:	1029883a 	mov	r20,r2
  809d08:	003fc506 	br	809c20 <__alt_mem_onchip_mem+0xff789c20>
  809d0c:	800d883a 	mov	r6,r16
  809d10:	a80b883a 	mov	r5,r21
  809d14:	9809883a 	mov	r4,r19
  809d18:	080a9440 	call	80a944 <__swbuf_r>
  809d1c:	10bfffe0 	cmpeqi	r2,r2,-1
  809d20:	003fef06 	br	809ce0 <__alt_mem_onchip_mem+0xff789ce0>

00809d24 <_fputwc_r>:
  809d24:	3080030b 	ldhu	r2,12(r6)
  809d28:	10c8000c 	andi	r3,r2,8192
  809d2c:	1800051e 	bne	r3,zero,809d44 <_fputwc_r+0x20>
  809d30:	30c01917 	ldw	r3,100(r6)
  809d34:	10880014 	ori	r2,r2,8192
  809d38:	3080030d 	sth	r2,12(r6)
  809d3c:	18880014 	ori	r2,r3,8192
  809d40:	30801915 	stw	r2,100(r6)
  809d44:	0809bc01 	jmpi	809bc0 <__fputwc>

00809d48 <fputwc>:
  809d48:	00802074 	movhi	r2,129
  809d4c:	defffc04 	addi	sp,sp,-16
  809d50:	10912504 	addi	r2,r2,17556
  809d54:	dc000115 	stw	r16,4(sp)
  809d58:	14000017 	ldw	r16,0(r2)
  809d5c:	dc400215 	stw	r17,8(sp)
  809d60:	dfc00315 	stw	ra,12(sp)
  809d64:	2023883a 	mov	r17,r4
  809d68:	80000226 	beq	r16,zero,809d74 <fputwc+0x2c>
  809d6c:	80800e17 	ldw	r2,56(r16)
  809d70:	10001026 	beq	r2,zero,809db4 <fputwc+0x6c>
  809d74:	2880030b 	ldhu	r2,12(r5)
  809d78:	10c8000c 	andi	r3,r2,8192
  809d7c:	1800051e 	bne	r3,zero,809d94 <fputwc+0x4c>
  809d80:	28c01917 	ldw	r3,100(r5)
  809d84:	10880014 	ori	r2,r2,8192
  809d88:	2880030d 	sth	r2,12(r5)
  809d8c:	18880014 	ori	r2,r3,8192
  809d90:	28801915 	stw	r2,100(r5)
  809d94:	280d883a 	mov	r6,r5
  809d98:	8009883a 	mov	r4,r16
  809d9c:	880b883a 	mov	r5,r17
  809da0:	dfc00317 	ldw	ra,12(sp)
  809da4:	dc400217 	ldw	r17,8(sp)
  809da8:	dc000117 	ldw	r16,4(sp)
  809dac:	dec00404 	addi	sp,sp,16
  809db0:	0809bc01 	jmpi	809bc0 <__fputwc>
  809db4:	8009883a 	mov	r4,r16
  809db8:	d9400015 	stw	r5,0(sp)
  809dbc:	08066f80 	call	8066f8 <__sinit>
  809dc0:	d9400017 	ldw	r5,0(sp)
  809dc4:	003feb06 	br	809d74 <__alt_mem_onchip_mem+0xff789d74>

00809dc8 <__sfvwrite_r>:
  809dc8:	30800217 	ldw	r2,8(r6)
  809dcc:	10006726 	beq	r2,zero,809f6c <__sfvwrite_r+0x1a4>
  809dd0:	28c0030b 	ldhu	r3,12(r5)
  809dd4:	defff404 	addi	sp,sp,-48
  809dd8:	dd400715 	stw	r21,28(sp)
  809ddc:	dd000615 	stw	r20,24(sp)
  809de0:	dc000215 	stw	r16,8(sp)
  809de4:	dfc00b15 	stw	ra,44(sp)
  809de8:	df000a15 	stw	fp,40(sp)
  809dec:	ddc00915 	stw	r23,36(sp)
  809df0:	dd800815 	stw	r22,32(sp)
  809df4:	dcc00515 	stw	r19,20(sp)
  809df8:	dc800415 	stw	r18,16(sp)
  809dfc:	dc400315 	stw	r17,12(sp)
  809e00:	1880020c 	andi	r2,r3,8
  809e04:	2821883a 	mov	r16,r5
  809e08:	202b883a 	mov	r21,r4
  809e0c:	3029883a 	mov	r20,r6
  809e10:	10002726 	beq	r2,zero,809eb0 <__sfvwrite_r+0xe8>
  809e14:	28800417 	ldw	r2,16(r5)
  809e18:	10002526 	beq	r2,zero,809eb0 <__sfvwrite_r+0xe8>
  809e1c:	1880008c 	andi	r2,r3,2
  809e20:	a4400017 	ldw	r17,0(r20)
  809e24:	10002a26 	beq	r2,zero,809ed0 <__sfvwrite_r+0x108>
  809e28:	05a00034 	movhi	r22,32768
  809e2c:	0027883a 	mov	r19,zero
  809e30:	0025883a 	mov	r18,zero
  809e34:	b5bf0004 	addi	r22,r22,-1024
  809e38:	980d883a 	mov	r6,r19
  809e3c:	a809883a 	mov	r4,r21
  809e40:	90004626 	beq	r18,zero,809f5c <__sfvwrite_r+0x194>
  809e44:	900f883a 	mov	r7,r18
  809e48:	b480022e 	bgeu	r22,r18,809e54 <__sfvwrite_r+0x8c>
  809e4c:	01e00034 	movhi	r7,32768
  809e50:	39ff0004 	addi	r7,r7,-1024
  809e54:	80800917 	ldw	r2,36(r16)
  809e58:	81400717 	ldw	r5,28(r16)
  809e5c:	103ee83a 	callr	r2
  809e60:	0080570e 	bge	zero,r2,809fc0 <__sfvwrite_r+0x1f8>
  809e64:	a0c00217 	ldw	r3,8(r20)
  809e68:	98a7883a 	add	r19,r19,r2
  809e6c:	90a5c83a 	sub	r18,r18,r2
  809e70:	1885c83a 	sub	r2,r3,r2
  809e74:	a0800215 	stw	r2,8(r20)
  809e78:	103fef1e 	bne	r2,zero,809e38 <__alt_mem_onchip_mem+0xff789e38>
  809e7c:	0005883a 	mov	r2,zero
  809e80:	dfc00b17 	ldw	ra,44(sp)
  809e84:	df000a17 	ldw	fp,40(sp)
  809e88:	ddc00917 	ldw	r23,36(sp)
  809e8c:	dd800817 	ldw	r22,32(sp)
  809e90:	dd400717 	ldw	r21,28(sp)
  809e94:	dd000617 	ldw	r20,24(sp)
  809e98:	dcc00517 	ldw	r19,20(sp)
  809e9c:	dc800417 	ldw	r18,16(sp)
  809ea0:	dc400317 	ldw	r17,12(sp)
  809ea4:	dc000217 	ldw	r16,8(sp)
  809ea8:	dec00c04 	addi	sp,sp,48
  809eac:	f800283a 	ret
  809eb0:	800b883a 	mov	r5,r16
  809eb4:	a809883a 	mov	r4,r21
  809eb8:	08046d00 	call	8046d0 <__swsetup_r>
  809ebc:	1000eb1e 	bne	r2,zero,80a26c <__sfvwrite_r+0x4a4>
  809ec0:	80c0030b 	ldhu	r3,12(r16)
  809ec4:	a4400017 	ldw	r17,0(r20)
  809ec8:	1880008c 	andi	r2,r3,2
  809ecc:	103fd61e 	bne	r2,zero,809e28 <__alt_mem_onchip_mem+0xff789e28>
  809ed0:	1880004c 	andi	r2,r3,1
  809ed4:	10003f1e 	bne	r2,zero,809fd4 <__sfvwrite_r+0x20c>
  809ed8:	0039883a 	mov	fp,zero
  809edc:	0025883a 	mov	r18,zero
  809ee0:	90001a26 	beq	r18,zero,809f4c <__sfvwrite_r+0x184>
  809ee4:	1880800c 	andi	r2,r3,512
  809ee8:	84c00217 	ldw	r19,8(r16)
  809eec:	10002126 	beq	r2,zero,809f74 <__sfvwrite_r+0x1ac>
  809ef0:	982f883a 	mov	r23,r19
  809ef4:	94c09336 	bltu	r18,r19,80a144 <__sfvwrite_r+0x37c>
  809ef8:	1881200c 	andi	r2,r3,1152
  809efc:	10009e1e 	bne	r2,zero,80a178 <__sfvwrite_r+0x3b0>
  809f00:	81000017 	ldw	r4,0(r16)
  809f04:	b80d883a 	mov	r6,r23
  809f08:	e00b883a 	mov	r5,fp
  809f0c:	080a2840 	call	80a284 <memmove>
  809f10:	80c00217 	ldw	r3,8(r16)
  809f14:	81000017 	ldw	r4,0(r16)
  809f18:	9005883a 	mov	r2,r18
  809f1c:	1ce7c83a 	sub	r19,r3,r19
  809f20:	25cf883a 	add	r7,r4,r23
  809f24:	84c00215 	stw	r19,8(r16)
  809f28:	81c00015 	stw	r7,0(r16)
  809f2c:	a0c00217 	ldw	r3,8(r20)
  809f30:	e0b9883a 	add	fp,fp,r2
  809f34:	90a5c83a 	sub	r18,r18,r2
  809f38:	18a7c83a 	sub	r19,r3,r2
  809f3c:	a4c00215 	stw	r19,8(r20)
  809f40:	983fce26 	beq	r19,zero,809e7c <__alt_mem_onchip_mem+0xff789e7c>
  809f44:	80c0030b 	ldhu	r3,12(r16)
  809f48:	903fe61e 	bne	r18,zero,809ee4 <__alt_mem_onchip_mem+0xff789ee4>
  809f4c:	8f000017 	ldw	fp,0(r17)
  809f50:	8c800117 	ldw	r18,4(r17)
  809f54:	8c400204 	addi	r17,r17,8
  809f58:	003fe106 	br	809ee0 <__alt_mem_onchip_mem+0xff789ee0>
  809f5c:	8cc00017 	ldw	r19,0(r17)
  809f60:	8c800117 	ldw	r18,4(r17)
  809f64:	8c400204 	addi	r17,r17,8
  809f68:	003fb306 	br	809e38 <__alt_mem_onchip_mem+0xff789e38>
  809f6c:	0005883a 	mov	r2,zero
  809f70:	f800283a 	ret
  809f74:	81000017 	ldw	r4,0(r16)
  809f78:	80800417 	ldw	r2,16(r16)
  809f7c:	11005736 	bltu	r2,r4,80a0dc <__sfvwrite_r+0x314>
  809f80:	85c00517 	ldw	r23,20(r16)
  809f84:	95c05536 	bltu	r18,r23,80a0dc <__sfvwrite_r+0x314>
  809f88:	00a00034 	movhi	r2,32768
  809f8c:	10bfffc4 	addi	r2,r2,-1
  809f90:	9009883a 	mov	r4,r18
  809f94:	1480012e 	bgeu	r2,r18,809f9c <__sfvwrite_r+0x1d4>
  809f98:	1009883a 	mov	r4,r2
  809f9c:	b80b883a 	mov	r5,r23
  809fa0:	080b7340 	call	80b734 <__divsi3>
  809fa4:	15cf383a 	mul	r7,r2,r23
  809fa8:	81400717 	ldw	r5,28(r16)
  809fac:	80800917 	ldw	r2,36(r16)
  809fb0:	e00d883a 	mov	r6,fp
  809fb4:	a809883a 	mov	r4,r21
  809fb8:	103ee83a 	callr	r2
  809fbc:	00bfdb16 	blt	zero,r2,809f2c <__alt_mem_onchip_mem+0xff789f2c>
  809fc0:	8080030b 	ldhu	r2,12(r16)
  809fc4:	10801014 	ori	r2,r2,64
  809fc8:	8080030d 	sth	r2,12(r16)
  809fcc:	00bfffc4 	movi	r2,-1
  809fd0:	003fab06 	br	809e80 <__alt_mem_onchip_mem+0xff789e80>
  809fd4:	0027883a 	mov	r19,zero
  809fd8:	0011883a 	mov	r8,zero
  809fdc:	0039883a 	mov	fp,zero
  809fe0:	0025883a 	mov	r18,zero
  809fe4:	90001f26 	beq	r18,zero,80a064 <__sfvwrite_r+0x29c>
  809fe8:	40005a26 	beq	r8,zero,80a154 <__sfvwrite_r+0x38c>
  809fec:	982d883a 	mov	r22,r19
  809ff0:	94c0012e 	bgeu	r18,r19,809ff8 <__sfvwrite_r+0x230>
  809ff4:	902d883a 	mov	r22,r18
  809ff8:	81000017 	ldw	r4,0(r16)
  809ffc:	80800417 	ldw	r2,16(r16)
  80a000:	b02f883a 	mov	r23,r22
  80a004:	81c00517 	ldw	r7,20(r16)
  80a008:	1100032e 	bgeu	r2,r4,80a018 <__sfvwrite_r+0x250>
  80a00c:	80c00217 	ldw	r3,8(r16)
  80a010:	38c7883a 	add	r3,r7,r3
  80a014:	1d801816 	blt	r3,r22,80a078 <__sfvwrite_r+0x2b0>
  80a018:	b1c03e16 	blt	r22,r7,80a114 <__sfvwrite_r+0x34c>
  80a01c:	80800917 	ldw	r2,36(r16)
  80a020:	81400717 	ldw	r5,28(r16)
  80a024:	e00d883a 	mov	r6,fp
  80a028:	da000115 	stw	r8,4(sp)
  80a02c:	a809883a 	mov	r4,r21
  80a030:	103ee83a 	callr	r2
  80a034:	102f883a 	mov	r23,r2
  80a038:	da000117 	ldw	r8,4(sp)
  80a03c:	00bfe00e 	bge	zero,r2,809fc0 <__alt_mem_onchip_mem+0xff789fc0>
  80a040:	9de7c83a 	sub	r19,r19,r23
  80a044:	98001f26 	beq	r19,zero,80a0c4 <__sfvwrite_r+0x2fc>
  80a048:	a0800217 	ldw	r2,8(r20)
  80a04c:	e5f9883a 	add	fp,fp,r23
  80a050:	95e5c83a 	sub	r18,r18,r23
  80a054:	15efc83a 	sub	r23,r2,r23
  80a058:	a5c00215 	stw	r23,8(r20)
  80a05c:	b83f8726 	beq	r23,zero,809e7c <__alt_mem_onchip_mem+0xff789e7c>
  80a060:	903fe11e 	bne	r18,zero,809fe8 <__alt_mem_onchip_mem+0xff789fe8>
  80a064:	8f000017 	ldw	fp,0(r17)
  80a068:	8c800117 	ldw	r18,4(r17)
  80a06c:	0011883a 	mov	r8,zero
  80a070:	8c400204 	addi	r17,r17,8
  80a074:	003fdb06 	br	809fe4 <__alt_mem_onchip_mem+0xff789fe4>
  80a078:	180d883a 	mov	r6,r3
  80a07c:	e00b883a 	mov	r5,fp
  80a080:	da000115 	stw	r8,4(sp)
  80a084:	d8c00015 	stw	r3,0(sp)
  80a088:	080a2840 	call	80a284 <memmove>
  80a08c:	d8c00017 	ldw	r3,0(sp)
  80a090:	80800017 	ldw	r2,0(r16)
  80a094:	800b883a 	mov	r5,r16
  80a098:	a809883a 	mov	r4,r21
  80a09c:	10c5883a 	add	r2,r2,r3
  80a0a0:	80800015 	stw	r2,0(r16)
  80a0a4:	d8c00015 	stw	r3,0(sp)
  80a0a8:	080631c0 	call	80631c <_fflush_r>
  80a0ac:	d8c00017 	ldw	r3,0(sp)
  80a0b0:	da000117 	ldw	r8,4(sp)
  80a0b4:	103fc21e 	bne	r2,zero,809fc0 <__alt_mem_onchip_mem+0xff789fc0>
  80a0b8:	182f883a 	mov	r23,r3
  80a0bc:	9de7c83a 	sub	r19,r19,r23
  80a0c0:	983fe11e 	bne	r19,zero,80a048 <__alt_mem_onchip_mem+0xff78a048>
  80a0c4:	800b883a 	mov	r5,r16
  80a0c8:	a809883a 	mov	r4,r21
  80a0cc:	080631c0 	call	80631c <_fflush_r>
  80a0d0:	103fbb1e 	bne	r2,zero,809fc0 <__alt_mem_onchip_mem+0xff789fc0>
  80a0d4:	0011883a 	mov	r8,zero
  80a0d8:	003fdb06 	br	80a048 <__alt_mem_onchip_mem+0xff78a048>
  80a0dc:	94c0012e 	bgeu	r18,r19,80a0e4 <__sfvwrite_r+0x31c>
  80a0e0:	9027883a 	mov	r19,r18
  80a0e4:	980d883a 	mov	r6,r19
  80a0e8:	e00b883a 	mov	r5,fp
  80a0ec:	080a2840 	call	80a284 <memmove>
  80a0f0:	80800217 	ldw	r2,8(r16)
  80a0f4:	80c00017 	ldw	r3,0(r16)
  80a0f8:	14c5c83a 	sub	r2,r2,r19
  80a0fc:	1cc7883a 	add	r3,r3,r19
  80a100:	80800215 	stw	r2,8(r16)
  80a104:	80c00015 	stw	r3,0(r16)
  80a108:	10004326 	beq	r2,zero,80a218 <__sfvwrite_r+0x450>
  80a10c:	9805883a 	mov	r2,r19
  80a110:	003f8606 	br	809f2c <__alt_mem_onchip_mem+0xff789f2c>
  80a114:	b00d883a 	mov	r6,r22
  80a118:	e00b883a 	mov	r5,fp
  80a11c:	da000115 	stw	r8,4(sp)
  80a120:	080a2840 	call	80a284 <memmove>
  80a124:	80800217 	ldw	r2,8(r16)
  80a128:	80c00017 	ldw	r3,0(r16)
  80a12c:	da000117 	ldw	r8,4(sp)
  80a130:	1585c83a 	sub	r2,r2,r22
  80a134:	1dad883a 	add	r22,r3,r22
  80a138:	80800215 	stw	r2,8(r16)
  80a13c:	85800015 	stw	r22,0(r16)
  80a140:	003fbf06 	br	80a040 <__alt_mem_onchip_mem+0xff78a040>
  80a144:	81000017 	ldw	r4,0(r16)
  80a148:	9027883a 	mov	r19,r18
  80a14c:	902f883a 	mov	r23,r18
  80a150:	003f6c06 	br	809f04 <__alt_mem_onchip_mem+0xff789f04>
  80a154:	900d883a 	mov	r6,r18
  80a158:	01400284 	movi	r5,10
  80a15c:	e009883a 	mov	r4,fp
  80a160:	0806f400 	call	806f40 <memchr>
  80a164:	10003e26 	beq	r2,zero,80a260 <__sfvwrite_r+0x498>
  80a168:	10800044 	addi	r2,r2,1
  80a16c:	1727c83a 	sub	r19,r2,fp
  80a170:	02000044 	movi	r8,1
  80a174:	003f9d06 	br	809fec <__alt_mem_onchip_mem+0xff789fec>
  80a178:	80800517 	ldw	r2,20(r16)
  80a17c:	81400417 	ldw	r5,16(r16)
  80a180:	81c00017 	ldw	r7,0(r16)
  80a184:	10a7883a 	add	r19,r2,r2
  80a188:	9885883a 	add	r2,r19,r2
  80a18c:	1026d7fa 	srli	r19,r2,31
  80a190:	396dc83a 	sub	r22,r7,r5
  80a194:	b1000044 	addi	r4,r22,1
  80a198:	9885883a 	add	r2,r19,r2
  80a19c:	1027d07a 	srai	r19,r2,1
  80a1a0:	2485883a 	add	r2,r4,r18
  80a1a4:	980d883a 	mov	r6,r19
  80a1a8:	9880022e 	bgeu	r19,r2,80a1b4 <__sfvwrite_r+0x3ec>
  80a1ac:	1027883a 	mov	r19,r2
  80a1b0:	100d883a 	mov	r6,r2
  80a1b4:	18c1000c 	andi	r3,r3,1024
  80a1b8:	18001c26 	beq	r3,zero,80a22c <__sfvwrite_r+0x464>
  80a1bc:	300b883a 	mov	r5,r6
  80a1c0:	a809883a 	mov	r4,r21
  80a1c4:	08016200 	call	801620 <_malloc_r>
  80a1c8:	102f883a 	mov	r23,r2
  80a1cc:	10002926 	beq	r2,zero,80a274 <__sfvwrite_r+0x4ac>
  80a1d0:	81400417 	ldw	r5,16(r16)
  80a1d4:	b00d883a 	mov	r6,r22
  80a1d8:	1009883a 	mov	r4,r2
  80a1dc:	08070240 	call	807024 <memcpy>
  80a1e0:	8080030b 	ldhu	r2,12(r16)
  80a1e4:	00fedfc4 	movi	r3,-1153
  80a1e8:	10c4703a 	and	r2,r2,r3
  80a1ec:	10802014 	ori	r2,r2,128
  80a1f0:	8080030d 	sth	r2,12(r16)
  80a1f4:	bd89883a 	add	r4,r23,r22
  80a1f8:	9d8fc83a 	sub	r7,r19,r22
  80a1fc:	85c00415 	stw	r23,16(r16)
  80a200:	84c00515 	stw	r19,20(r16)
  80a204:	81000015 	stw	r4,0(r16)
  80a208:	9027883a 	mov	r19,r18
  80a20c:	81c00215 	stw	r7,8(r16)
  80a210:	902f883a 	mov	r23,r18
  80a214:	003f3b06 	br	809f04 <__alt_mem_onchip_mem+0xff789f04>
  80a218:	800b883a 	mov	r5,r16
  80a21c:	a809883a 	mov	r4,r21
  80a220:	080631c0 	call	80631c <_fflush_r>
  80a224:	103fb926 	beq	r2,zero,80a10c <__alt_mem_onchip_mem+0xff78a10c>
  80a228:	003f6506 	br	809fc0 <__alt_mem_onchip_mem+0xff789fc0>
  80a22c:	a809883a 	mov	r4,r21
  80a230:	080a3e00 	call	80a3e0 <_realloc_r>
  80a234:	102f883a 	mov	r23,r2
  80a238:	103fee1e 	bne	r2,zero,80a1f4 <__alt_mem_onchip_mem+0xff78a1f4>
  80a23c:	81400417 	ldw	r5,16(r16)
  80a240:	a809883a 	mov	r4,r21
  80a244:	08069180 	call	806918 <_free_r>
  80a248:	8080030b 	ldhu	r2,12(r16)
  80a24c:	00ffdfc4 	movi	r3,-129
  80a250:	1884703a 	and	r2,r3,r2
  80a254:	00c00304 	movi	r3,12
  80a258:	a8c00015 	stw	r3,0(r21)
  80a25c:	003f5906 	br	809fc4 <__alt_mem_onchip_mem+0xff789fc4>
  80a260:	94c00044 	addi	r19,r18,1
  80a264:	02000044 	movi	r8,1
  80a268:	003f6006 	br	809fec <__alt_mem_onchip_mem+0xff789fec>
  80a26c:	00bfffc4 	movi	r2,-1
  80a270:	003f0306 	br	809e80 <__alt_mem_onchip_mem+0xff789e80>
  80a274:	00800304 	movi	r2,12
  80a278:	a8800015 	stw	r2,0(r21)
  80a27c:	8080030b 	ldhu	r2,12(r16)
  80a280:	003f5006 	br	809fc4 <__alt_mem_onchip_mem+0xff789fc4>

0080a284 <memmove>:
  80a284:	2005883a 	mov	r2,r4
  80a288:	29000b2e 	bgeu	r5,r4,80a2b8 <memmove+0x34>
  80a28c:	298f883a 	add	r7,r5,r6
  80a290:	21c0092e 	bgeu	r4,r7,80a2b8 <memmove+0x34>
  80a294:	2187883a 	add	r3,r4,r6
  80a298:	198bc83a 	sub	r5,r3,r6
  80a29c:	30004826 	beq	r6,zero,80a3c0 <memmove+0x13c>
  80a2a0:	39ffffc4 	addi	r7,r7,-1
  80a2a4:	39000003 	ldbu	r4,0(r7)
  80a2a8:	18ffffc4 	addi	r3,r3,-1
  80a2ac:	19000005 	stb	r4,0(r3)
  80a2b0:	28fffb1e 	bne	r5,r3,80a2a0 <__alt_mem_onchip_mem+0xff78a2a0>
  80a2b4:	f800283a 	ret
  80a2b8:	00c003c4 	movi	r3,15
  80a2bc:	1980412e 	bgeu	r3,r6,80a3c4 <memmove+0x140>
  80a2c0:	2886b03a 	or	r3,r5,r2
  80a2c4:	18c000cc 	andi	r3,r3,3
  80a2c8:	1800401e 	bne	r3,zero,80a3cc <memmove+0x148>
  80a2cc:	33fffc04 	addi	r15,r6,-16
  80a2d0:	781ed13a 	srli	r15,r15,4
  80a2d4:	28c00104 	addi	r3,r5,4
  80a2d8:	13400104 	addi	r13,r2,4
  80a2dc:	781c913a 	slli	r14,r15,4
  80a2e0:	2b000204 	addi	r12,r5,8
  80a2e4:	12c00204 	addi	r11,r2,8
  80a2e8:	73800504 	addi	r14,r14,20
  80a2ec:	2a800304 	addi	r10,r5,12
  80a2f0:	12400304 	addi	r9,r2,12
  80a2f4:	2b9d883a 	add	r14,r5,r14
  80a2f8:	2811883a 	mov	r8,r5
  80a2fc:	100f883a 	mov	r7,r2
  80a300:	41000017 	ldw	r4,0(r8)
  80a304:	39c00404 	addi	r7,r7,16
  80a308:	18c00404 	addi	r3,r3,16
  80a30c:	393ffc15 	stw	r4,-16(r7)
  80a310:	193ffc17 	ldw	r4,-16(r3)
  80a314:	6b400404 	addi	r13,r13,16
  80a318:	5ac00404 	addi	r11,r11,16
  80a31c:	693ffc15 	stw	r4,-16(r13)
  80a320:	61000017 	ldw	r4,0(r12)
  80a324:	4a400404 	addi	r9,r9,16
  80a328:	42000404 	addi	r8,r8,16
  80a32c:	593ffc15 	stw	r4,-16(r11)
  80a330:	51000017 	ldw	r4,0(r10)
  80a334:	63000404 	addi	r12,r12,16
  80a338:	52800404 	addi	r10,r10,16
  80a33c:	493ffc15 	stw	r4,-16(r9)
  80a340:	1bbfef1e 	bne	r3,r14,80a300 <__alt_mem_onchip_mem+0xff78a300>
  80a344:	79000044 	addi	r4,r15,1
  80a348:	2008913a 	slli	r4,r4,4
  80a34c:	328003cc 	andi	r10,r6,15
  80a350:	02c000c4 	movi	r11,3
  80a354:	1107883a 	add	r3,r2,r4
  80a358:	290b883a 	add	r5,r5,r4
  80a35c:	5a801e2e 	bgeu	r11,r10,80a3d8 <memmove+0x154>
  80a360:	1813883a 	mov	r9,r3
  80a364:	2811883a 	mov	r8,r5
  80a368:	500f883a 	mov	r7,r10
  80a36c:	41000017 	ldw	r4,0(r8)
  80a370:	4a400104 	addi	r9,r9,4
  80a374:	39ffff04 	addi	r7,r7,-4
  80a378:	493fff15 	stw	r4,-4(r9)
  80a37c:	42000104 	addi	r8,r8,4
  80a380:	59fffa36 	bltu	r11,r7,80a36c <__alt_mem_onchip_mem+0xff78a36c>
  80a384:	513fff04 	addi	r4,r10,-4
  80a388:	2008d0ba 	srli	r4,r4,2
  80a38c:	318000cc 	andi	r6,r6,3
  80a390:	21000044 	addi	r4,r4,1
  80a394:	2109883a 	add	r4,r4,r4
  80a398:	2109883a 	add	r4,r4,r4
  80a39c:	1907883a 	add	r3,r3,r4
  80a3a0:	290b883a 	add	r5,r5,r4
  80a3a4:	30000b26 	beq	r6,zero,80a3d4 <memmove+0x150>
  80a3a8:	198d883a 	add	r6,r3,r6
  80a3ac:	29c00003 	ldbu	r7,0(r5)
  80a3b0:	18c00044 	addi	r3,r3,1
  80a3b4:	29400044 	addi	r5,r5,1
  80a3b8:	19ffffc5 	stb	r7,-1(r3)
  80a3bc:	19bffb1e 	bne	r3,r6,80a3ac <__alt_mem_onchip_mem+0xff78a3ac>
  80a3c0:	f800283a 	ret
  80a3c4:	1007883a 	mov	r3,r2
  80a3c8:	003ff606 	br	80a3a4 <__alt_mem_onchip_mem+0xff78a3a4>
  80a3cc:	1007883a 	mov	r3,r2
  80a3d0:	003ff506 	br	80a3a8 <__alt_mem_onchip_mem+0xff78a3a8>
  80a3d4:	f800283a 	ret
  80a3d8:	500d883a 	mov	r6,r10
  80a3dc:	003ff106 	br	80a3a4 <__alt_mem_onchip_mem+0xff78a3a4>

0080a3e0 <_realloc_r>:
  80a3e0:	defff604 	addi	sp,sp,-40
  80a3e4:	dc800215 	stw	r18,8(sp)
  80a3e8:	dfc00915 	stw	ra,36(sp)
  80a3ec:	df000815 	stw	fp,32(sp)
  80a3f0:	ddc00715 	stw	r23,28(sp)
  80a3f4:	dd800615 	stw	r22,24(sp)
  80a3f8:	dd400515 	stw	r21,20(sp)
  80a3fc:	dd000415 	stw	r20,16(sp)
  80a400:	dcc00315 	stw	r19,12(sp)
  80a404:	dc400115 	stw	r17,4(sp)
  80a408:	dc000015 	stw	r16,0(sp)
  80a40c:	3025883a 	mov	r18,r6
  80a410:	2800b726 	beq	r5,zero,80a6f0 <_realloc_r+0x310>
  80a414:	282b883a 	mov	r21,r5
  80a418:	2029883a 	mov	r20,r4
  80a41c:	080e7780 	call	80e778 <__malloc_lock>
  80a420:	a8bfff17 	ldw	r2,-4(r21)
  80a424:	043fff04 	movi	r16,-4
  80a428:	90c002c4 	addi	r3,r18,11
  80a42c:	01000584 	movi	r4,22
  80a430:	acfffe04 	addi	r19,r21,-8
  80a434:	1420703a 	and	r16,r2,r16
  80a438:	20c0332e 	bgeu	r4,r3,80a508 <_realloc_r+0x128>
  80a43c:	047ffe04 	movi	r17,-8
  80a440:	1c62703a 	and	r17,r3,r17
  80a444:	8807883a 	mov	r3,r17
  80a448:	88005816 	blt	r17,zero,80a5ac <_realloc_r+0x1cc>
  80a44c:	8c805736 	bltu	r17,r18,80a5ac <_realloc_r+0x1cc>
  80a450:	80c0300e 	bge	r16,r3,80a514 <_realloc_r+0x134>
  80a454:	07002074 	movhi	fp,129
  80a458:	e70b0704 	addi	fp,fp,11292
  80a45c:	e1c00217 	ldw	r7,8(fp)
  80a460:	9c09883a 	add	r4,r19,r16
  80a464:	22000117 	ldw	r8,4(r4)
  80a468:	21c06326 	beq	r4,r7,80a5f8 <_realloc_r+0x218>
  80a46c:	017fff84 	movi	r5,-2
  80a470:	414a703a 	and	r5,r8,r5
  80a474:	214b883a 	add	r5,r4,r5
  80a478:	29800117 	ldw	r6,4(r5)
  80a47c:	3180004c 	andi	r6,r6,1
  80a480:	30003f26 	beq	r6,zero,80a580 <_realloc_r+0x1a0>
  80a484:	1080004c 	andi	r2,r2,1
  80a488:	10008326 	beq	r2,zero,80a698 <_realloc_r+0x2b8>
  80a48c:	900b883a 	mov	r5,r18
  80a490:	a009883a 	mov	r4,r20
  80a494:	08016200 	call	801620 <_malloc_r>
  80a498:	1025883a 	mov	r18,r2
  80a49c:	10011e26 	beq	r2,zero,80a918 <_realloc_r+0x538>
  80a4a0:	a93fff17 	ldw	r4,-4(r21)
  80a4a4:	10fffe04 	addi	r3,r2,-8
  80a4a8:	00bfff84 	movi	r2,-2
  80a4ac:	2084703a 	and	r2,r4,r2
  80a4b0:	9885883a 	add	r2,r19,r2
  80a4b4:	1880ee26 	beq	r3,r2,80a870 <_realloc_r+0x490>
  80a4b8:	81bfff04 	addi	r6,r16,-4
  80a4bc:	00800904 	movi	r2,36
  80a4c0:	1180b836 	bltu	r2,r6,80a7a4 <_realloc_r+0x3c4>
  80a4c4:	00c004c4 	movi	r3,19
  80a4c8:	19809636 	bltu	r3,r6,80a724 <_realloc_r+0x344>
  80a4cc:	9005883a 	mov	r2,r18
  80a4d0:	a807883a 	mov	r3,r21
  80a4d4:	19000017 	ldw	r4,0(r3)
  80a4d8:	11000015 	stw	r4,0(r2)
  80a4dc:	19000117 	ldw	r4,4(r3)
  80a4e0:	11000115 	stw	r4,4(r2)
  80a4e4:	18c00217 	ldw	r3,8(r3)
  80a4e8:	10c00215 	stw	r3,8(r2)
  80a4ec:	a80b883a 	mov	r5,r21
  80a4f0:	a009883a 	mov	r4,r20
  80a4f4:	08069180 	call	806918 <_free_r>
  80a4f8:	a009883a 	mov	r4,r20
  80a4fc:	080e79c0 	call	80e79c <__malloc_unlock>
  80a500:	9005883a 	mov	r2,r18
  80a504:	00001206 	br	80a550 <_realloc_r+0x170>
  80a508:	00c00404 	movi	r3,16
  80a50c:	1823883a 	mov	r17,r3
  80a510:	003fce06 	br	80a44c <__alt_mem_onchip_mem+0xff78a44c>
  80a514:	a825883a 	mov	r18,r21
  80a518:	8445c83a 	sub	r2,r16,r17
  80a51c:	00c003c4 	movi	r3,15
  80a520:	18802636 	bltu	r3,r2,80a5bc <_realloc_r+0x1dc>
  80a524:	99800117 	ldw	r6,4(r19)
  80a528:	9c07883a 	add	r3,r19,r16
  80a52c:	3180004c 	andi	r6,r6,1
  80a530:	3420b03a 	or	r16,r6,r16
  80a534:	9c000115 	stw	r16,4(r19)
  80a538:	18800117 	ldw	r2,4(r3)
  80a53c:	10800054 	ori	r2,r2,1
  80a540:	18800115 	stw	r2,4(r3)
  80a544:	a009883a 	mov	r4,r20
  80a548:	080e79c0 	call	80e79c <__malloc_unlock>
  80a54c:	9005883a 	mov	r2,r18
  80a550:	dfc00917 	ldw	ra,36(sp)
  80a554:	df000817 	ldw	fp,32(sp)
  80a558:	ddc00717 	ldw	r23,28(sp)
  80a55c:	dd800617 	ldw	r22,24(sp)
  80a560:	dd400517 	ldw	r21,20(sp)
  80a564:	dd000417 	ldw	r20,16(sp)
  80a568:	dcc00317 	ldw	r19,12(sp)
  80a56c:	dc800217 	ldw	r18,8(sp)
  80a570:	dc400117 	ldw	r17,4(sp)
  80a574:	dc000017 	ldw	r16,0(sp)
  80a578:	dec00a04 	addi	sp,sp,40
  80a57c:	f800283a 	ret
  80a580:	017fff04 	movi	r5,-4
  80a584:	414a703a 	and	r5,r8,r5
  80a588:	814d883a 	add	r6,r16,r5
  80a58c:	30c01f16 	blt	r6,r3,80a60c <_realloc_r+0x22c>
  80a590:	20800317 	ldw	r2,12(r4)
  80a594:	20c00217 	ldw	r3,8(r4)
  80a598:	a825883a 	mov	r18,r21
  80a59c:	3021883a 	mov	r16,r6
  80a5a0:	18800315 	stw	r2,12(r3)
  80a5a4:	10c00215 	stw	r3,8(r2)
  80a5a8:	003fdb06 	br	80a518 <__alt_mem_onchip_mem+0xff78a518>
  80a5ac:	00800304 	movi	r2,12
  80a5b0:	a0800015 	stw	r2,0(r20)
  80a5b4:	0005883a 	mov	r2,zero
  80a5b8:	003fe506 	br	80a550 <__alt_mem_onchip_mem+0xff78a550>
  80a5bc:	98c00117 	ldw	r3,4(r19)
  80a5c0:	9c4b883a 	add	r5,r19,r17
  80a5c4:	11000054 	ori	r4,r2,1
  80a5c8:	18c0004c 	andi	r3,r3,1
  80a5cc:	1c62b03a 	or	r17,r3,r17
  80a5d0:	9c400115 	stw	r17,4(r19)
  80a5d4:	29000115 	stw	r4,4(r5)
  80a5d8:	2885883a 	add	r2,r5,r2
  80a5dc:	10c00117 	ldw	r3,4(r2)
  80a5e0:	29400204 	addi	r5,r5,8
  80a5e4:	a009883a 	mov	r4,r20
  80a5e8:	18c00054 	ori	r3,r3,1
  80a5ec:	10c00115 	stw	r3,4(r2)
  80a5f0:	08069180 	call	806918 <_free_r>
  80a5f4:	003fd306 	br	80a544 <__alt_mem_onchip_mem+0xff78a544>
  80a5f8:	017fff04 	movi	r5,-4
  80a5fc:	414a703a 	and	r5,r8,r5
  80a600:	89800404 	addi	r6,r17,16
  80a604:	8151883a 	add	r8,r16,r5
  80a608:	4180590e 	bge	r8,r6,80a770 <_realloc_r+0x390>
  80a60c:	1080004c 	andi	r2,r2,1
  80a610:	103f9e1e 	bne	r2,zero,80a48c <__alt_mem_onchip_mem+0xff78a48c>
  80a614:	adbffe17 	ldw	r22,-8(r21)
  80a618:	00bfff04 	movi	r2,-4
  80a61c:	9dadc83a 	sub	r22,r19,r22
  80a620:	b1800117 	ldw	r6,4(r22)
  80a624:	3084703a 	and	r2,r6,r2
  80a628:	20002026 	beq	r4,zero,80a6ac <_realloc_r+0x2cc>
  80a62c:	80af883a 	add	r23,r16,r2
  80a630:	b96f883a 	add	r23,r23,r5
  80a634:	21c05f26 	beq	r4,r7,80a7b4 <_realloc_r+0x3d4>
  80a638:	b8c01c16 	blt	r23,r3,80a6ac <_realloc_r+0x2cc>
  80a63c:	20800317 	ldw	r2,12(r4)
  80a640:	20c00217 	ldw	r3,8(r4)
  80a644:	81bfff04 	addi	r6,r16,-4
  80a648:	01000904 	movi	r4,36
  80a64c:	18800315 	stw	r2,12(r3)
  80a650:	10c00215 	stw	r3,8(r2)
  80a654:	b0c00217 	ldw	r3,8(r22)
  80a658:	b0800317 	ldw	r2,12(r22)
  80a65c:	b4800204 	addi	r18,r22,8
  80a660:	18800315 	stw	r2,12(r3)
  80a664:	10c00215 	stw	r3,8(r2)
  80a668:	21801b36 	bltu	r4,r6,80a6d8 <_realloc_r+0x2f8>
  80a66c:	008004c4 	movi	r2,19
  80a670:	1180352e 	bgeu	r2,r6,80a748 <_realloc_r+0x368>
  80a674:	a8800017 	ldw	r2,0(r21)
  80a678:	b0800215 	stw	r2,8(r22)
  80a67c:	a8800117 	ldw	r2,4(r21)
  80a680:	b0800315 	stw	r2,12(r22)
  80a684:	008006c4 	movi	r2,27
  80a688:	11807f36 	bltu	r2,r6,80a888 <_realloc_r+0x4a8>
  80a68c:	b0800404 	addi	r2,r22,16
  80a690:	ad400204 	addi	r21,r21,8
  80a694:	00002d06 	br	80a74c <_realloc_r+0x36c>
  80a698:	adbffe17 	ldw	r22,-8(r21)
  80a69c:	00bfff04 	movi	r2,-4
  80a6a0:	9dadc83a 	sub	r22,r19,r22
  80a6a4:	b1000117 	ldw	r4,4(r22)
  80a6a8:	2084703a 	and	r2,r4,r2
  80a6ac:	b03f7726 	beq	r22,zero,80a48c <__alt_mem_onchip_mem+0xff78a48c>
  80a6b0:	80af883a 	add	r23,r16,r2
  80a6b4:	b8ff7516 	blt	r23,r3,80a48c <__alt_mem_onchip_mem+0xff78a48c>
  80a6b8:	b0800317 	ldw	r2,12(r22)
  80a6bc:	b0c00217 	ldw	r3,8(r22)
  80a6c0:	81bfff04 	addi	r6,r16,-4
  80a6c4:	01000904 	movi	r4,36
  80a6c8:	18800315 	stw	r2,12(r3)
  80a6cc:	10c00215 	stw	r3,8(r2)
  80a6d0:	b4800204 	addi	r18,r22,8
  80a6d4:	21bfe52e 	bgeu	r4,r6,80a66c <__alt_mem_onchip_mem+0xff78a66c>
  80a6d8:	a80b883a 	mov	r5,r21
  80a6dc:	9009883a 	mov	r4,r18
  80a6e0:	080a2840 	call	80a284 <memmove>
  80a6e4:	b821883a 	mov	r16,r23
  80a6e8:	b027883a 	mov	r19,r22
  80a6ec:	003f8a06 	br	80a518 <__alt_mem_onchip_mem+0xff78a518>
  80a6f0:	300b883a 	mov	r5,r6
  80a6f4:	dfc00917 	ldw	ra,36(sp)
  80a6f8:	df000817 	ldw	fp,32(sp)
  80a6fc:	ddc00717 	ldw	r23,28(sp)
  80a700:	dd800617 	ldw	r22,24(sp)
  80a704:	dd400517 	ldw	r21,20(sp)
  80a708:	dd000417 	ldw	r20,16(sp)
  80a70c:	dcc00317 	ldw	r19,12(sp)
  80a710:	dc800217 	ldw	r18,8(sp)
  80a714:	dc400117 	ldw	r17,4(sp)
  80a718:	dc000017 	ldw	r16,0(sp)
  80a71c:	dec00a04 	addi	sp,sp,40
  80a720:	08016201 	jmpi	801620 <_malloc_r>
  80a724:	a8c00017 	ldw	r3,0(r21)
  80a728:	90c00015 	stw	r3,0(r18)
  80a72c:	a8c00117 	ldw	r3,4(r21)
  80a730:	90c00115 	stw	r3,4(r18)
  80a734:	00c006c4 	movi	r3,27
  80a738:	19804536 	bltu	r3,r6,80a850 <_realloc_r+0x470>
  80a73c:	90800204 	addi	r2,r18,8
  80a740:	a8c00204 	addi	r3,r21,8
  80a744:	003f6306 	br	80a4d4 <__alt_mem_onchip_mem+0xff78a4d4>
  80a748:	9005883a 	mov	r2,r18
  80a74c:	a8c00017 	ldw	r3,0(r21)
  80a750:	b821883a 	mov	r16,r23
  80a754:	b027883a 	mov	r19,r22
  80a758:	10c00015 	stw	r3,0(r2)
  80a75c:	a8c00117 	ldw	r3,4(r21)
  80a760:	10c00115 	stw	r3,4(r2)
  80a764:	a8c00217 	ldw	r3,8(r21)
  80a768:	10c00215 	stw	r3,8(r2)
  80a76c:	003f6a06 	br	80a518 <__alt_mem_onchip_mem+0xff78a518>
  80a770:	9c67883a 	add	r19,r19,r17
  80a774:	4445c83a 	sub	r2,r8,r17
  80a778:	e4c00215 	stw	r19,8(fp)
  80a77c:	10800054 	ori	r2,r2,1
  80a780:	98800115 	stw	r2,4(r19)
  80a784:	a8bfff17 	ldw	r2,-4(r21)
  80a788:	a009883a 	mov	r4,r20
  80a78c:	1080004c 	andi	r2,r2,1
  80a790:	1462b03a 	or	r17,r2,r17
  80a794:	ac7fff15 	stw	r17,-4(r21)
  80a798:	080e79c0 	call	80e79c <__malloc_unlock>
  80a79c:	a805883a 	mov	r2,r21
  80a7a0:	003f6b06 	br	80a550 <__alt_mem_onchip_mem+0xff78a550>
  80a7a4:	a80b883a 	mov	r5,r21
  80a7a8:	9009883a 	mov	r4,r18
  80a7ac:	080a2840 	call	80a284 <memmove>
  80a7b0:	003f4e06 	br	80a4ec <__alt_mem_onchip_mem+0xff78a4ec>
  80a7b4:	89000404 	addi	r4,r17,16
  80a7b8:	b93fbc16 	blt	r23,r4,80a6ac <__alt_mem_onchip_mem+0xff78a6ac>
  80a7bc:	b0800317 	ldw	r2,12(r22)
  80a7c0:	b0c00217 	ldw	r3,8(r22)
  80a7c4:	81bfff04 	addi	r6,r16,-4
  80a7c8:	01000904 	movi	r4,36
  80a7cc:	18800315 	stw	r2,12(r3)
  80a7d0:	10c00215 	stw	r3,8(r2)
  80a7d4:	b4800204 	addi	r18,r22,8
  80a7d8:	21804336 	bltu	r4,r6,80a8e8 <_realloc_r+0x508>
  80a7dc:	008004c4 	movi	r2,19
  80a7e0:	11803f2e 	bgeu	r2,r6,80a8e0 <_realloc_r+0x500>
  80a7e4:	a8800017 	ldw	r2,0(r21)
  80a7e8:	b0800215 	stw	r2,8(r22)
  80a7ec:	a8800117 	ldw	r2,4(r21)
  80a7f0:	b0800315 	stw	r2,12(r22)
  80a7f4:	008006c4 	movi	r2,27
  80a7f8:	11803f36 	bltu	r2,r6,80a8f8 <_realloc_r+0x518>
  80a7fc:	b0800404 	addi	r2,r22,16
  80a800:	ad400204 	addi	r21,r21,8
  80a804:	a8c00017 	ldw	r3,0(r21)
  80a808:	10c00015 	stw	r3,0(r2)
  80a80c:	a8c00117 	ldw	r3,4(r21)
  80a810:	10c00115 	stw	r3,4(r2)
  80a814:	a8c00217 	ldw	r3,8(r21)
  80a818:	10c00215 	stw	r3,8(r2)
  80a81c:	b447883a 	add	r3,r22,r17
  80a820:	bc45c83a 	sub	r2,r23,r17
  80a824:	e0c00215 	stw	r3,8(fp)
  80a828:	10800054 	ori	r2,r2,1
  80a82c:	18800115 	stw	r2,4(r3)
  80a830:	b0800117 	ldw	r2,4(r22)
  80a834:	a009883a 	mov	r4,r20
  80a838:	1080004c 	andi	r2,r2,1
  80a83c:	1462b03a 	or	r17,r2,r17
  80a840:	b4400115 	stw	r17,4(r22)
  80a844:	080e79c0 	call	80e79c <__malloc_unlock>
  80a848:	9005883a 	mov	r2,r18
  80a84c:	003f4006 	br	80a550 <__alt_mem_onchip_mem+0xff78a550>
  80a850:	a8c00217 	ldw	r3,8(r21)
  80a854:	90c00215 	stw	r3,8(r18)
  80a858:	a8c00317 	ldw	r3,12(r21)
  80a85c:	90c00315 	stw	r3,12(r18)
  80a860:	30801126 	beq	r6,r2,80a8a8 <_realloc_r+0x4c8>
  80a864:	90800404 	addi	r2,r18,16
  80a868:	a8c00404 	addi	r3,r21,16
  80a86c:	003f1906 	br	80a4d4 <__alt_mem_onchip_mem+0xff78a4d4>
  80a870:	90ffff17 	ldw	r3,-4(r18)
  80a874:	00bfff04 	movi	r2,-4
  80a878:	a825883a 	mov	r18,r21
  80a87c:	1884703a 	and	r2,r3,r2
  80a880:	80a1883a 	add	r16,r16,r2
  80a884:	003f2406 	br	80a518 <__alt_mem_onchip_mem+0xff78a518>
  80a888:	a8800217 	ldw	r2,8(r21)
  80a88c:	b0800415 	stw	r2,16(r22)
  80a890:	a8800317 	ldw	r2,12(r21)
  80a894:	b0800515 	stw	r2,20(r22)
  80a898:	31000a26 	beq	r6,r4,80a8c4 <_realloc_r+0x4e4>
  80a89c:	b0800604 	addi	r2,r22,24
  80a8a0:	ad400404 	addi	r21,r21,16
  80a8a4:	003fa906 	br	80a74c <__alt_mem_onchip_mem+0xff78a74c>
  80a8a8:	a9000417 	ldw	r4,16(r21)
  80a8ac:	90800604 	addi	r2,r18,24
  80a8b0:	a8c00604 	addi	r3,r21,24
  80a8b4:	91000415 	stw	r4,16(r18)
  80a8b8:	a9000517 	ldw	r4,20(r21)
  80a8bc:	91000515 	stw	r4,20(r18)
  80a8c0:	003f0406 	br	80a4d4 <__alt_mem_onchip_mem+0xff78a4d4>
  80a8c4:	a8c00417 	ldw	r3,16(r21)
  80a8c8:	ad400604 	addi	r21,r21,24
  80a8cc:	b0800804 	addi	r2,r22,32
  80a8d0:	b0c00615 	stw	r3,24(r22)
  80a8d4:	a8ffff17 	ldw	r3,-4(r21)
  80a8d8:	b0c00715 	stw	r3,28(r22)
  80a8dc:	003f9b06 	br	80a74c <__alt_mem_onchip_mem+0xff78a74c>
  80a8e0:	9005883a 	mov	r2,r18
  80a8e4:	003fc706 	br	80a804 <__alt_mem_onchip_mem+0xff78a804>
  80a8e8:	a80b883a 	mov	r5,r21
  80a8ec:	9009883a 	mov	r4,r18
  80a8f0:	080a2840 	call	80a284 <memmove>
  80a8f4:	003fc906 	br	80a81c <__alt_mem_onchip_mem+0xff78a81c>
  80a8f8:	a8800217 	ldw	r2,8(r21)
  80a8fc:	b0800415 	stw	r2,16(r22)
  80a900:	a8800317 	ldw	r2,12(r21)
  80a904:	b0800515 	stw	r2,20(r22)
  80a908:	31000726 	beq	r6,r4,80a928 <_realloc_r+0x548>
  80a90c:	b0800604 	addi	r2,r22,24
  80a910:	ad400404 	addi	r21,r21,16
  80a914:	003fbb06 	br	80a804 <__alt_mem_onchip_mem+0xff78a804>
  80a918:	a009883a 	mov	r4,r20
  80a91c:	080e79c0 	call	80e79c <__malloc_unlock>
  80a920:	0005883a 	mov	r2,zero
  80a924:	003f0a06 	br	80a550 <__alt_mem_onchip_mem+0xff78a550>
  80a928:	a8c00417 	ldw	r3,16(r21)
  80a92c:	ad400604 	addi	r21,r21,24
  80a930:	b0800804 	addi	r2,r22,32
  80a934:	b0c00615 	stw	r3,24(r22)
  80a938:	a8ffff17 	ldw	r3,-4(r21)
  80a93c:	b0c00715 	stw	r3,28(r22)
  80a940:	003fb006 	br	80a804 <__alt_mem_onchip_mem+0xff78a804>

0080a944 <__swbuf_r>:
  80a944:	defffb04 	addi	sp,sp,-20
  80a948:	dcc00315 	stw	r19,12(sp)
  80a94c:	dc800215 	stw	r18,8(sp)
  80a950:	dc000015 	stw	r16,0(sp)
  80a954:	dfc00415 	stw	ra,16(sp)
  80a958:	dc400115 	stw	r17,4(sp)
  80a95c:	2025883a 	mov	r18,r4
  80a960:	2827883a 	mov	r19,r5
  80a964:	3021883a 	mov	r16,r6
  80a968:	20000226 	beq	r4,zero,80a974 <__swbuf_r+0x30>
  80a96c:	20800e17 	ldw	r2,56(r4)
  80a970:	10004226 	beq	r2,zero,80aa7c <__swbuf_r+0x138>
  80a974:	80800617 	ldw	r2,24(r16)
  80a978:	8100030b 	ldhu	r4,12(r16)
  80a97c:	80800215 	stw	r2,8(r16)
  80a980:	2080020c 	andi	r2,r4,8
  80a984:	10003626 	beq	r2,zero,80aa60 <__swbuf_r+0x11c>
  80a988:	80c00417 	ldw	r3,16(r16)
  80a98c:	18003426 	beq	r3,zero,80aa60 <__swbuf_r+0x11c>
  80a990:	2088000c 	andi	r2,r4,8192
  80a994:	9c403fcc 	andi	r17,r19,255
  80a998:	10001a26 	beq	r2,zero,80aa04 <__swbuf_r+0xc0>
  80a99c:	80800017 	ldw	r2,0(r16)
  80a9a0:	81000517 	ldw	r4,20(r16)
  80a9a4:	10c7c83a 	sub	r3,r2,r3
  80a9a8:	1900200e 	bge	r3,r4,80aa2c <__swbuf_r+0xe8>
  80a9ac:	18c00044 	addi	r3,r3,1
  80a9b0:	81000217 	ldw	r4,8(r16)
  80a9b4:	11400044 	addi	r5,r2,1
  80a9b8:	81400015 	stw	r5,0(r16)
  80a9bc:	213fffc4 	addi	r4,r4,-1
  80a9c0:	81000215 	stw	r4,8(r16)
  80a9c4:	14c00005 	stb	r19,0(r2)
  80a9c8:	80800517 	ldw	r2,20(r16)
  80a9cc:	10c01e26 	beq	r2,r3,80aa48 <__swbuf_r+0x104>
  80a9d0:	8080030b 	ldhu	r2,12(r16)
  80a9d4:	1080004c 	andi	r2,r2,1
  80a9d8:	10000226 	beq	r2,zero,80a9e4 <__swbuf_r+0xa0>
  80a9dc:	00800284 	movi	r2,10
  80a9e0:	88801926 	beq	r17,r2,80aa48 <__swbuf_r+0x104>
  80a9e4:	8805883a 	mov	r2,r17
  80a9e8:	dfc00417 	ldw	ra,16(sp)
  80a9ec:	dcc00317 	ldw	r19,12(sp)
  80a9f0:	dc800217 	ldw	r18,8(sp)
  80a9f4:	dc400117 	ldw	r17,4(sp)
  80a9f8:	dc000017 	ldw	r16,0(sp)
  80a9fc:	dec00504 	addi	sp,sp,20
  80aa00:	f800283a 	ret
  80aa04:	81401917 	ldw	r5,100(r16)
  80aa08:	00b7ffc4 	movi	r2,-8193
  80aa0c:	21080014 	ori	r4,r4,8192
  80aa10:	2884703a 	and	r2,r5,r2
  80aa14:	80801915 	stw	r2,100(r16)
  80aa18:	80800017 	ldw	r2,0(r16)
  80aa1c:	8100030d 	sth	r4,12(r16)
  80aa20:	81000517 	ldw	r4,20(r16)
  80aa24:	10c7c83a 	sub	r3,r2,r3
  80aa28:	193fe016 	blt	r3,r4,80a9ac <__alt_mem_onchip_mem+0xff78a9ac>
  80aa2c:	800b883a 	mov	r5,r16
  80aa30:	9009883a 	mov	r4,r18
  80aa34:	080631c0 	call	80631c <_fflush_r>
  80aa38:	1000071e 	bne	r2,zero,80aa58 <__swbuf_r+0x114>
  80aa3c:	80800017 	ldw	r2,0(r16)
  80aa40:	00c00044 	movi	r3,1
  80aa44:	003fda06 	br	80a9b0 <__alt_mem_onchip_mem+0xff78a9b0>
  80aa48:	800b883a 	mov	r5,r16
  80aa4c:	9009883a 	mov	r4,r18
  80aa50:	080631c0 	call	80631c <_fflush_r>
  80aa54:	103fe326 	beq	r2,zero,80a9e4 <__alt_mem_onchip_mem+0xff78a9e4>
  80aa58:	00bfffc4 	movi	r2,-1
  80aa5c:	003fe206 	br	80a9e8 <__alt_mem_onchip_mem+0xff78a9e8>
  80aa60:	800b883a 	mov	r5,r16
  80aa64:	9009883a 	mov	r4,r18
  80aa68:	08046d00 	call	8046d0 <__swsetup_r>
  80aa6c:	103ffa1e 	bne	r2,zero,80aa58 <__alt_mem_onchip_mem+0xff78aa58>
  80aa70:	8100030b 	ldhu	r4,12(r16)
  80aa74:	80c00417 	ldw	r3,16(r16)
  80aa78:	003fc506 	br	80a990 <__alt_mem_onchip_mem+0xff78a990>
  80aa7c:	08066f80 	call	8066f8 <__sinit>
  80aa80:	003fbc06 	br	80a974 <__alt_mem_onchip_mem+0xff78a974>

0080aa84 <__swbuf>:
  80aa84:	00802074 	movhi	r2,129
  80aa88:	10912504 	addi	r2,r2,17556
  80aa8c:	280d883a 	mov	r6,r5
  80aa90:	200b883a 	mov	r5,r4
  80aa94:	11000017 	ldw	r4,0(r2)
  80aa98:	080a9441 	jmpi	80a944 <__swbuf_r>

0080aa9c <_wcrtomb_r>:
  80aa9c:	defff604 	addi	sp,sp,-40
  80aaa0:	00802074 	movhi	r2,129
  80aaa4:	dc800815 	stw	r18,32(sp)
  80aaa8:	dc400715 	stw	r17,28(sp)
  80aaac:	dc000615 	stw	r16,24(sp)
  80aab0:	10912904 	addi	r2,r2,17572
  80aab4:	dfc00915 	stw	ra,36(sp)
  80aab8:	2021883a 	mov	r16,r4
  80aabc:	3823883a 	mov	r17,r7
  80aac0:	14800017 	ldw	r18,0(r2)
  80aac4:	28001426 	beq	r5,zero,80ab18 <_wcrtomb_r+0x7c>
  80aac8:	d9400415 	stw	r5,16(sp)
  80aacc:	d9800515 	stw	r6,20(sp)
  80aad0:	0806e800 	call	806e80 <__locale_charset>
  80aad4:	d9800517 	ldw	r6,20(sp)
  80aad8:	d9400417 	ldw	r5,16(sp)
  80aadc:	100f883a 	mov	r7,r2
  80aae0:	dc400015 	stw	r17,0(sp)
  80aae4:	8009883a 	mov	r4,r16
  80aae8:	903ee83a 	callr	r18
  80aaec:	00ffffc4 	movi	r3,-1
  80aaf0:	10c0031e 	bne	r2,r3,80ab00 <_wcrtomb_r+0x64>
  80aaf4:	88000015 	stw	zero,0(r17)
  80aaf8:	00c02284 	movi	r3,138
  80aafc:	80c00015 	stw	r3,0(r16)
  80ab00:	dfc00917 	ldw	ra,36(sp)
  80ab04:	dc800817 	ldw	r18,32(sp)
  80ab08:	dc400717 	ldw	r17,28(sp)
  80ab0c:	dc000617 	ldw	r16,24(sp)
  80ab10:	dec00a04 	addi	sp,sp,40
  80ab14:	f800283a 	ret
  80ab18:	0806e800 	call	806e80 <__locale_charset>
  80ab1c:	100f883a 	mov	r7,r2
  80ab20:	dc400015 	stw	r17,0(sp)
  80ab24:	000d883a 	mov	r6,zero
  80ab28:	d9400104 	addi	r5,sp,4
  80ab2c:	8009883a 	mov	r4,r16
  80ab30:	903ee83a 	callr	r18
  80ab34:	003fed06 	br	80aaec <__alt_mem_onchip_mem+0xff78aaec>

0080ab38 <wcrtomb>:
  80ab38:	defff604 	addi	sp,sp,-40
  80ab3c:	00802074 	movhi	r2,129
  80ab40:	dc800615 	stw	r18,24(sp)
  80ab44:	dc400515 	stw	r17,20(sp)
  80ab48:	10912504 	addi	r2,r2,17556
  80ab4c:	dfc00915 	stw	ra,36(sp)
  80ab50:	dd000815 	stw	r20,32(sp)
  80ab54:	dcc00715 	stw	r19,28(sp)
  80ab58:	dc000415 	stw	r16,16(sp)
  80ab5c:	3025883a 	mov	r18,r6
  80ab60:	14400017 	ldw	r17,0(r2)
  80ab64:	20001926 	beq	r4,zero,80abcc <wcrtomb+0x94>
  80ab68:	00802074 	movhi	r2,129
  80ab6c:	10912904 	addi	r2,r2,17572
  80ab70:	15000017 	ldw	r20,0(r2)
  80ab74:	2021883a 	mov	r16,r4
  80ab78:	2827883a 	mov	r19,r5
  80ab7c:	0806e800 	call	806e80 <__locale_charset>
  80ab80:	100f883a 	mov	r7,r2
  80ab84:	dc800015 	stw	r18,0(sp)
  80ab88:	980d883a 	mov	r6,r19
  80ab8c:	800b883a 	mov	r5,r16
  80ab90:	8809883a 	mov	r4,r17
  80ab94:	a03ee83a 	callr	r20
  80ab98:	00ffffc4 	movi	r3,-1
  80ab9c:	10c0031e 	bne	r2,r3,80abac <wcrtomb+0x74>
  80aba0:	90000015 	stw	zero,0(r18)
  80aba4:	00c02284 	movi	r3,138
  80aba8:	88c00015 	stw	r3,0(r17)
  80abac:	dfc00917 	ldw	ra,36(sp)
  80abb0:	dd000817 	ldw	r20,32(sp)
  80abb4:	dcc00717 	ldw	r19,28(sp)
  80abb8:	dc800617 	ldw	r18,24(sp)
  80abbc:	dc400517 	ldw	r17,20(sp)
  80abc0:	dc000417 	ldw	r16,16(sp)
  80abc4:	dec00a04 	addi	sp,sp,40
  80abc8:	f800283a 	ret
  80abcc:	00802074 	movhi	r2,129
  80abd0:	10912904 	addi	r2,r2,17572
  80abd4:	14000017 	ldw	r16,0(r2)
  80abd8:	0806e800 	call	806e80 <__locale_charset>
  80abdc:	100f883a 	mov	r7,r2
  80abe0:	dc800015 	stw	r18,0(sp)
  80abe4:	000d883a 	mov	r6,zero
  80abe8:	d9400104 	addi	r5,sp,4
  80abec:	8809883a 	mov	r4,r17
  80abf0:	803ee83a 	callr	r16
  80abf4:	003fe806 	br	80ab98 <__alt_mem_onchip_mem+0xff78ab98>

0080abf8 <__ascii_wctomb>:
  80abf8:	28000526 	beq	r5,zero,80ac10 <__ascii_wctomb+0x18>
  80abfc:	00803fc4 	movi	r2,255
  80ac00:	11800536 	bltu	r2,r6,80ac18 <__ascii_wctomb+0x20>
  80ac04:	29800005 	stb	r6,0(r5)
  80ac08:	00800044 	movi	r2,1
  80ac0c:	f800283a 	ret
  80ac10:	0005883a 	mov	r2,zero
  80ac14:	f800283a 	ret
  80ac18:	00802284 	movi	r2,138
  80ac1c:	20800015 	stw	r2,0(r4)
  80ac20:	00bfffc4 	movi	r2,-1
  80ac24:	f800283a 	ret

0080ac28 <_wctomb_r>:
  80ac28:	00802074 	movhi	r2,129
  80ac2c:	defff904 	addi	sp,sp,-28
  80ac30:	10912904 	addi	r2,r2,17572
  80ac34:	dfc00615 	stw	ra,24(sp)
  80ac38:	dc400515 	stw	r17,20(sp)
  80ac3c:	dc000415 	stw	r16,16(sp)
  80ac40:	3823883a 	mov	r17,r7
  80ac44:	14000017 	ldw	r16,0(r2)
  80ac48:	d9000115 	stw	r4,4(sp)
  80ac4c:	d9400215 	stw	r5,8(sp)
  80ac50:	d9800315 	stw	r6,12(sp)
  80ac54:	0806e800 	call	806e80 <__locale_charset>
  80ac58:	d9800317 	ldw	r6,12(sp)
  80ac5c:	d9400217 	ldw	r5,8(sp)
  80ac60:	d9000117 	ldw	r4,4(sp)
  80ac64:	100f883a 	mov	r7,r2
  80ac68:	dc400015 	stw	r17,0(sp)
  80ac6c:	803ee83a 	callr	r16
  80ac70:	dfc00617 	ldw	ra,24(sp)
  80ac74:	dc400517 	ldw	r17,20(sp)
  80ac78:	dc000417 	ldw	r16,16(sp)
  80ac7c:	dec00704 	addi	sp,sp,28
  80ac80:	f800283a 	ret

0080ac84 <__udivdi3>:
  80ac84:	defff504 	addi	sp,sp,-44
  80ac88:	dcc00415 	stw	r19,16(sp)
  80ac8c:	dc000115 	stw	r16,4(sp)
  80ac90:	dfc00a15 	stw	ra,40(sp)
  80ac94:	df000915 	stw	fp,36(sp)
  80ac98:	ddc00815 	stw	r23,32(sp)
  80ac9c:	dd800715 	stw	r22,28(sp)
  80aca0:	dd400615 	stw	r21,24(sp)
  80aca4:	dd000515 	stw	r20,20(sp)
  80aca8:	dc800315 	stw	r18,12(sp)
  80acac:	dc400215 	stw	r17,8(sp)
  80acb0:	2027883a 	mov	r19,r4
  80acb4:	2821883a 	mov	r16,r5
  80acb8:	3800411e 	bne	r7,zero,80adc0 <__udivdi3+0x13c>
  80acbc:	3023883a 	mov	r17,r6
  80acc0:	2025883a 	mov	r18,r4
  80acc4:	2980522e 	bgeu	r5,r6,80ae10 <__udivdi3+0x18c>
  80acc8:	00bfffd4 	movui	r2,65535
  80accc:	282d883a 	mov	r22,r5
  80acd0:	1180a836 	bltu	r2,r6,80af74 <__udivdi3+0x2f0>
  80acd4:	00803fc4 	movi	r2,255
  80acd8:	1185803a 	cmpltu	r2,r2,r6
  80acdc:	100490fa 	slli	r2,r2,3
  80ace0:	3086d83a 	srl	r3,r6,r2
  80ace4:	01002074 	movhi	r4,129
  80ace8:	21090d04 	addi	r4,r4,9268
  80acec:	20c7883a 	add	r3,r4,r3
  80acf0:	18c00003 	ldbu	r3,0(r3)
  80acf4:	1885883a 	add	r2,r3,r2
  80acf8:	00c00804 	movi	r3,32
  80acfc:	1887c83a 	sub	r3,r3,r2
  80ad00:	18000526 	beq	r3,zero,80ad18 <__udivdi3+0x94>
  80ad04:	80e0983a 	sll	r16,r16,r3
  80ad08:	9884d83a 	srl	r2,r19,r2
  80ad0c:	30e2983a 	sll	r17,r6,r3
  80ad10:	98e4983a 	sll	r18,r19,r3
  80ad14:	142cb03a 	or	r22,r2,r16
  80ad18:	882ad43a 	srli	r21,r17,16
  80ad1c:	b009883a 	mov	r4,r22
  80ad20:	8d3fffcc 	andi	r20,r17,65535
  80ad24:	a80b883a 	mov	r5,r21
  80ad28:	080b8900 	call	80b890 <__umodsi3>
  80ad2c:	b009883a 	mov	r4,r22
  80ad30:	a80b883a 	mov	r5,r21
  80ad34:	1027883a 	mov	r19,r2
  80ad38:	080b82c0 	call	80b82c <__udivsi3>
  80ad3c:	102d883a 	mov	r22,r2
  80ad40:	9826943a 	slli	r19,r19,16
  80ad44:	9004d43a 	srli	r2,r18,16
  80ad48:	a5a1383a 	mul	r16,r20,r22
  80ad4c:	14c4b03a 	or	r2,r2,r19
  80ad50:	1400052e 	bgeu	r2,r16,80ad68 <__udivdi3+0xe4>
  80ad54:	1445883a 	add	r2,r2,r17
  80ad58:	b0ffffc4 	addi	r3,r22,-1
  80ad5c:	14400136 	bltu	r2,r17,80ad64 <__udivdi3+0xe0>
  80ad60:	14012336 	bltu	r2,r16,80b1f0 <__udivdi3+0x56c>
  80ad64:	182d883a 	mov	r22,r3
  80ad68:	1421c83a 	sub	r16,r2,r16
  80ad6c:	a80b883a 	mov	r5,r21
  80ad70:	8009883a 	mov	r4,r16
  80ad74:	080b8900 	call	80b890 <__umodsi3>
  80ad78:	1027883a 	mov	r19,r2
  80ad7c:	a80b883a 	mov	r5,r21
  80ad80:	8009883a 	mov	r4,r16
  80ad84:	080b82c0 	call	80b82c <__udivsi3>
  80ad88:	9826943a 	slli	r19,r19,16
  80ad8c:	a0a9383a 	mul	r20,r20,r2
  80ad90:	94bfffcc 	andi	r18,r18,65535
  80ad94:	94e4b03a 	or	r18,r18,r19
  80ad98:	9500052e 	bgeu	r18,r20,80adb0 <__udivdi3+0x12c>
  80ad9c:	8ca5883a 	add	r18,r17,r18
  80ada0:	10ffffc4 	addi	r3,r2,-1
  80ada4:	9440f136 	bltu	r18,r17,80b16c <__udivdi3+0x4e8>
  80ada8:	9500f02e 	bgeu	r18,r20,80b16c <__udivdi3+0x4e8>
  80adac:	10bfff84 	addi	r2,r2,-2
  80adb0:	b00c943a 	slli	r6,r22,16
  80adb4:	0007883a 	mov	r3,zero
  80adb8:	3084b03a 	or	r2,r6,r2
  80adbc:	00005906 	br	80af24 <__udivdi3+0x2a0>
  80adc0:	29c05636 	bltu	r5,r7,80af1c <__udivdi3+0x298>
  80adc4:	00bfffd4 	movui	r2,65535
  80adc8:	11c0622e 	bgeu	r2,r7,80af54 <__udivdi3+0x2d0>
  80adcc:	00804034 	movhi	r2,256
  80add0:	10bfffc4 	addi	r2,r2,-1
  80add4:	11c0ee36 	bltu	r2,r7,80b190 <__udivdi3+0x50c>
  80add8:	00800404 	movi	r2,16
  80addc:	3886d83a 	srl	r3,r7,r2
  80ade0:	01002074 	movhi	r4,129
  80ade4:	21090d04 	addi	r4,r4,9268
  80ade8:	20c7883a 	add	r3,r4,r3
  80adec:	18c00003 	ldbu	r3,0(r3)
  80adf0:	05400804 	movi	r21,32
  80adf4:	1885883a 	add	r2,r3,r2
  80adf8:	a8abc83a 	sub	r21,r21,r2
  80adfc:	a800621e 	bne	r21,zero,80af88 <__udivdi3+0x304>
  80ae00:	3c00e936 	bltu	r7,r16,80b1a8 <__udivdi3+0x524>
  80ae04:	9985403a 	cmpgeu	r2,r19,r6
  80ae08:	0007883a 	mov	r3,zero
  80ae0c:	00004506 	br	80af24 <__udivdi3+0x2a0>
  80ae10:	3000041e 	bne	r6,zero,80ae24 <__udivdi3+0x1a0>
  80ae14:	000b883a 	mov	r5,zero
  80ae18:	01000044 	movi	r4,1
  80ae1c:	080b82c0 	call	80b82c <__udivsi3>
  80ae20:	1023883a 	mov	r17,r2
  80ae24:	00bfffd4 	movui	r2,65535
  80ae28:	14404e2e 	bgeu	r2,r17,80af64 <__udivdi3+0x2e0>
  80ae2c:	00804034 	movhi	r2,256
  80ae30:	10bfffc4 	addi	r2,r2,-1
  80ae34:	1440d836 	bltu	r2,r17,80b198 <__udivdi3+0x514>
  80ae38:	00800404 	movi	r2,16
  80ae3c:	8886d83a 	srl	r3,r17,r2
  80ae40:	01002074 	movhi	r4,129
  80ae44:	21090d04 	addi	r4,r4,9268
  80ae48:	20c7883a 	add	r3,r4,r3
  80ae4c:	18c00003 	ldbu	r3,0(r3)
  80ae50:	1885883a 	add	r2,r3,r2
  80ae54:	00c00804 	movi	r3,32
  80ae58:	1887c83a 	sub	r3,r3,r2
  80ae5c:	18008f1e 	bne	r3,zero,80b09c <__udivdi3+0x418>
  80ae60:	882ad43a 	srli	r21,r17,16
  80ae64:	8461c83a 	sub	r16,r16,r17
  80ae68:	8d3fffcc 	andi	r20,r17,65535
  80ae6c:	00c00044 	movi	r3,1
  80ae70:	8009883a 	mov	r4,r16
  80ae74:	a80b883a 	mov	r5,r21
  80ae78:	d8c00015 	stw	r3,0(sp)
  80ae7c:	080b8900 	call	80b890 <__umodsi3>
  80ae80:	8009883a 	mov	r4,r16
  80ae84:	a80b883a 	mov	r5,r21
  80ae88:	1027883a 	mov	r19,r2
  80ae8c:	080b82c0 	call	80b82c <__udivsi3>
  80ae90:	9826943a 	slli	r19,r19,16
  80ae94:	9008d43a 	srli	r4,r18,16
  80ae98:	1521383a 	mul	r16,r2,r20
  80ae9c:	102d883a 	mov	r22,r2
  80aea0:	24c8b03a 	or	r4,r4,r19
  80aea4:	d8c00017 	ldw	r3,0(sp)
  80aea8:	2400052e 	bgeu	r4,r16,80aec0 <__udivdi3+0x23c>
  80aeac:	2449883a 	add	r4,r4,r17
  80aeb0:	b0bfffc4 	addi	r2,r22,-1
  80aeb4:	24400136 	bltu	r4,r17,80aebc <__udivdi3+0x238>
  80aeb8:	2400ca36 	bltu	r4,r16,80b1e4 <__udivdi3+0x560>
  80aebc:	102d883a 	mov	r22,r2
  80aec0:	2421c83a 	sub	r16,r4,r16
  80aec4:	a80b883a 	mov	r5,r21
  80aec8:	8009883a 	mov	r4,r16
  80aecc:	d8c00015 	stw	r3,0(sp)
  80aed0:	080b8900 	call	80b890 <__umodsi3>
  80aed4:	1027883a 	mov	r19,r2
  80aed8:	a80b883a 	mov	r5,r21
  80aedc:	8009883a 	mov	r4,r16
  80aee0:	080b82c0 	call	80b82c <__udivsi3>
  80aee4:	9826943a 	slli	r19,r19,16
  80aee8:	1529383a 	mul	r20,r2,r20
  80aeec:	94bfffcc 	andi	r18,r18,65535
  80aef0:	94e4b03a 	or	r18,r18,r19
  80aef4:	d8c00017 	ldw	r3,0(sp)
  80aef8:	9500052e 	bgeu	r18,r20,80af10 <__udivdi3+0x28c>
  80aefc:	8ca5883a 	add	r18,r17,r18
  80af00:	113fffc4 	addi	r4,r2,-1
  80af04:	94409736 	bltu	r18,r17,80b164 <__udivdi3+0x4e0>
  80af08:	9500962e 	bgeu	r18,r20,80b164 <__udivdi3+0x4e0>
  80af0c:	10bfff84 	addi	r2,r2,-2
  80af10:	b00c943a 	slli	r6,r22,16
  80af14:	3084b03a 	or	r2,r6,r2
  80af18:	00000206 	br	80af24 <__udivdi3+0x2a0>
  80af1c:	0007883a 	mov	r3,zero
  80af20:	0005883a 	mov	r2,zero
  80af24:	dfc00a17 	ldw	ra,40(sp)
  80af28:	df000917 	ldw	fp,36(sp)
  80af2c:	ddc00817 	ldw	r23,32(sp)
  80af30:	dd800717 	ldw	r22,28(sp)
  80af34:	dd400617 	ldw	r21,24(sp)
  80af38:	dd000517 	ldw	r20,20(sp)
  80af3c:	dcc00417 	ldw	r19,16(sp)
  80af40:	dc800317 	ldw	r18,12(sp)
  80af44:	dc400217 	ldw	r17,8(sp)
  80af48:	dc000117 	ldw	r16,4(sp)
  80af4c:	dec00b04 	addi	sp,sp,44
  80af50:	f800283a 	ret
  80af54:	00803fc4 	movi	r2,255
  80af58:	11c5803a 	cmpltu	r2,r2,r7
  80af5c:	100490fa 	slli	r2,r2,3
  80af60:	003f9e06 	br	80addc <__alt_mem_onchip_mem+0xff78addc>
  80af64:	00803fc4 	movi	r2,255
  80af68:	1445803a 	cmpltu	r2,r2,r17
  80af6c:	100490fa 	slli	r2,r2,3
  80af70:	003fb206 	br	80ae3c <__alt_mem_onchip_mem+0xff78ae3c>
  80af74:	00804034 	movhi	r2,256
  80af78:	10bfffc4 	addi	r2,r2,-1
  80af7c:	11808836 	bltu	r2,r6,80b1a0 <__udivdi3+0x51c>
  80af80:	00800404 	movi	r2,16
  80af84:	003f5606 	br	80ace0 <__alt_mem_onchip_mem+0xff78ace0>
  80af88:	30aed83a 	srl	r23,r6,r2
  80af8c:	3d4e983a 	sll	r7,r7,r21
  80af90:	80acd83a 	srl	r22,r16,r2
  80af94:	9884d83a 	srl	r2,r19,r2
  80af98:	3deeb03a 	or	r23,r7,r23
  80af9c:	b824d43a 	srli	r18,r23,16
  80afa0:	8560983a 	sll	r16,r16,r21
  80afa4:	b009883a 	mov	r4,r22
  80afa8:	900b883a 	mov	r5,r18
  80afac:	3568983a 	sll	r20,r6,r21
  80afb0:	1420b03a 	or	r16,r2,r16
  80afb4:	080b8900 	call	80b890 <__umodsi3>
  80afb8:	b009883a 	mov	r4,r22
  80afbc:	900b883a 	mov	r5,r18
  80afc0:	1023883a 	mov	r17,r2
  80afc4:	080b82c0 	call	80b82c <__udivsi3>
  80afc8:	8808943a 	slli	r4,r17,16
  80afcc:	bf3fffcc 	andi	fp,r23,65535
  80afd0:	8006d43a 	srli	r3,r16,16
  80afd4:	e0a3383a 	mul	r17,fp,r2
  80afd8:	100d883a 	mov	r6,r2
  80afdc:	1906b03a 	or	r3,r3,r4
  80afe0:	1c40042e 	bgeu	r3,r17,80aff4 <__udivdi3+0x370>
  80afe4:	1dc7883a 	add	r3,r3,r23
  80afe8:	10bfffc4 	addi	r2,r2,-1
  80afec:	1dc0752e 	bgeu	r3,r23,80b1c4 <__udivdi3+0x540>
  80aff0:	100d883a 	mov	r6,r2
  80aff4:	1c63c83a 	sub	r17,r3,r17
  80aff8:	900b883a 	mov	r5,r18
  80affc:	8809883a 	mov	r4,r17
  80b000:	d9800015 	stw	r6,0(sp)
  80b004:	080b8900 	call	80b890 <__umodsi3>
  80b008:	102d883a 	mov	r22,r2
  80b00c:	8809883a 	mov	r4,r17
  80b010:	900b883a 	mov	r5,r18
  80b014:	080b82c0 	call	80b82c <__udivsi3>
  80b018:	b02c943a 	slli	r22,r22,16
  80b01c:	e089383a 	mul	r4,fp,r2
  80b020:	843fffcc 	andi	r16,r16,65535
  80b024:	85a0b03a 	or	r16,r16,r22
  80b028:	d9800017 	ldw	r6,0(sp)
  80b02c:	8100042e 	bgeu	r16,r4,80b040 <__udivdi3+0x3bc>
  80b030:	85e1883a 	add	r16,r16,r23
  80b034:	10ffffc4 	addi	r3,r2,-1
  80b038:	85c05e2e 	bgeu	r16,r23,80b1b4 <__udivdi3+0x530>
  80b03c:	1805883a 	mov	r2,r3
  80b040:	300c943a 	slli	r6,r6,16
  80b044:	a17fffcc 	andi	r5,r20,65535
  80b048:	a028d43a 	srli	r20,r20,16
  80b04c:	3084b03a 	or	r2,r6,r2
  80b050:	10ffffcc 	andi	r3,r2,65535
  80b054:	100cd43a 	srli	r6,r2,16
  80b058:	194f383a 	mul	r7,r3,r5
  80b05c:	1d07383a 	mul	r3,r3,r20
  80b060:	314b383a 	mul	r5,r6,r5
  80b064:	3810d43a 	srli	r8,r7,16
  80b068:	8121c83a 	sub	r16,r16,r4
  80b06c:	1947883a 	add	r3,r3,r5
  80b070:	40c7883a 	add	r3,r8,r3
  80b074:	350d383a 	mul	r6,r6,r20
  80b078:	1940022e 	bgeu	r3,r5,80b084 <__udivdi3+0x400>
  80b07c:	01000074 	movhi	r4,1
  80b080:	310d883a 	add	r6,r6,r4
  80b084:	1828d43a 	srli	r20,r3,16
  80b088:	a18d883a 	add	r6,r20,r6
  80b08c:	81803e36 	bltu	r16,r6,80b188 <__udivdi3+0x504>
  80b090:	81803826 	beq	r16,r6,80b174 <__udivdi3+0x4f0>
  80b094:	0007883a 	mov	r3,zero
  80b098:	003fa206 	br	80af24 <__alt_mem_onchip_mem+0xff78af24>
  80b09c:	88e2983a 	sll	r17,r17,r3
  80b0a0:	80a8d83a 	srl	r20,r16,r2
  80b0a4:	80e0983a 	sll	r16,r16,r3
  80b0a8:	882ad43a 	srli	r21,r17,16
  80b0ac:	9884d83a 	srl	r2,r19,r2
  80b0b0:	a009883a 	mov	r4,r20
  80b0b4:	a80b883a 	mov	r5,r21
  80b0b8:	142eb03a 	or	r23,r2,r16
  80b0bc:	98e4983a 	sll	r18,r19,r3
  80b0c0:	080b8900 	call	80b890 <__umodsi3>
  80b0c4:	a009883a 	mov	r4,r20
  80b0c8:	a80b883a 	mov	r5,r21
  80b0cc:	1021883a 	mov	r16,r2
  80b0d0:	080b82c0 	call	80b82c <__udivsi3>
  80b0d4:	1039883a 	mov	fp,r2
  80b0d8:	8d3fffcc 	andi	r20,r17,65535
  80b0dc:	8020943a 	slli	r16,r16,16
  80b0e0:	b804d43a 	srli	r2,r23,16
  80b0e4:	a72d383a 	mul	r22,r20,fp
  80b0e8:	1404b03a 	or	r2,r2,r16
  80b0ec:	1580062e 	bgeu	r2,r22,80b108 <__udivdi3+0x484>
  80b0f0:	1445883a 	add	r2,r2,r17
  80b0f4:	e0ffffc4 	addi	r3,fp,-1
  80b0f8:	14403836 	bltu	r2,r17,80b1dc <__udivdi3+0x558>
  80b0fc:	1580372e 	bgeu	r2,r22,80b1dc <__udivdi3+0x558>
  80b100:	e73fff84 	addi	fp,fp,-2
  80b104:	1445883a 	add	r2,r2,r17
  80b108:	15adc83a 	sub	r22,r2,r22
  80b10c:	a80b883a 	mov	r5,r21
  80b110:	b009883a 	mov	r4,r22
  80b114:	080b8900 	call	80b890 <__umodsi3>
  80b118:	1027883a 	mov	r19,r2
  80b11c:	b009883a 	mov	r4,r22
  80b120:	a80b883a 	mov	r5,r21
  80b124:	080b82c0 	call	80b82c <__udivsi3>
  80b128:	9826943a 	slli	r19,r19,16
  80b12c:	a0a1383a 	mul	r16,r20,r2
  80b130:	b93fffcc 	andi	r4,r23,65535
  80b134:	24c8b03a 	or	r4,r4,r19
  80b138:	2400062e 	bgeu	r4,r16,80b154 <__udivdi3+0x4d0>
  80b13c:	2449883a 	add	r4,r4,r17
  80b140:	10ffffc4 	addi	r3,r2,-1
  80b144:	24402336 	bltu	r4,r17,80b1d4 <__udivdi3+0x550>
  80b148:	2400222e 	bgeu	r4,r16,80b1d4 <__udivdi3+0x550>
  80b14c:	10bfff84 	addi	r2,r2,-2
  80b150:	2449883a 	add	r4,r4,r17
  80b154:	e038943a 	slli	fp,fp,16
  80b158:	2421c83a 	sub	r16,r4,r16
  80b15c:	e086b03a 	or	r3,fp,r2
  80b160:	003f4306 	br	80ae70 <__alt_mem_onchip_mem+0xff78ae70>
  80b164:	2005883a 	mov	r2,r4
  80b168:	003f6906 	br	80af10 <__alt_mem_onchip_mem+0xff78af10>
  80b16c:	1805883a 	mov	r2,r3
  80b170:	003f0f06 	br	80adb0 <__alt_mem_onchip_mem+0xff78adb0>
  80b174:	1806943a 	slli	r3,r3,16
  80b178:	9d66983a 	sll	r19,r19,r21
  80b17c:	39ffffcc 	andi	r7,r7,65535
  80b180:	19c7883a 	add	r3,r3,r7
  80b184:	98ffc32e 	bgeu	r19,r3,80b094 <__alt_mem_onchip_mem+0xff78b094>
  80b188:	10bfffc4 	addi	r2,r2,-1
  80b18c:	003fc106 	br	80b094 <__alt_mem_onchip_mem+0xff78b094>
  80b190:	00800604 	movi	r2,24
  80b194:	003f1106 	br	80addc <__alt_mem_onchip_mem+0xff78addc>
  80b198:	00800604 	movi	r2,24
  80b19c:	003f2706 	br	80ae3c <__alt_mem_onchip_mem+0xff78ae3c>
  80b1a0:	00800604 	movi	r2,24
  80b1a4:	003ece06 	br	80ace0 <__alt_mem_onchip_mem+0xff78ace0>
  80b1a8:	0007883a 	mov	r3,zero
  80b1ac:	00800044 	movi	r2,1
  80b1b0:	003f5c06 	br	80af24 <__alt_mem_onchip_mem+0xff78af24>
  80b1b4:	813fa12e 	bgeu	r16,r4,80b03c <__alt_mem_onchip_mem+0xff78b03c>
  80b1b8:	10bfff84 	addi	r2,r2,-2
  80b1bc:	85e1883a 	add	r16,r16,r23
  80b1c0:	003f9f06 	br	80b040 <__alt_mem_onchip_mem+0xff78b040>
  80b1c4:	1c7f8a2e 	bgeu	r3,r17,80aff0 <__alt_mem_onchip_mem+0xff78aff0>
  80b1c8:	31bfff84 	addi	r6,r6,-2
  80b1cc:	1dc7883a 	add	r3,r3,r23
  80b1d0:	003f8806 	br	80aff4 <__alt_mem_onchip_mem+0xff78aff4>
  80b1d4:	1805883a 	mov	r2,r3
  80b1d8:	003fde06 	br	80b154 <__alt_mem_onchip_mem+0xff78b154>
  80b1dc:	1839883a 	mov	fp,r3
  80b1e0:	003fc906 	br	80b108 <__alt_mem_onchip_mem+0xff78b108>
  80b1e4:	b5bfff84 	addi	r22,r22,-2
  80b1e8:	2449883a 	add	r4,r4,r17
  80b1ec:	003f3406 	br	80aec0 <__alt_mem_onchip_mem+0xff78aec0>
  80b1f0:	b5bfff84 	addi	r22,r22,-2
  80b1f4:	1445883a 	add	r2,r2,r17
  80b1f8:	003edb06 	br	80ad68 <__alt_mem_onchip_mem+0xff78ad68>

0080b1fc <__umoddi3>:
  80b1fc:	defff404 	addi	sp,sp,-48
  80b200:	df000a15 	stw	fp,40(sp)
  80b204:	dc400315 	stw	r17,12(sp)
  80b208:	dc000215 	stw	r16,8(sp)
  80b20c:	dfc00b15 	stw	ra,44(sp)
  80b210:	ddc00915 	stw	r23,36(sp)
  80b214:	dd800815 	stw	r22,32(sp)
  80b218:	dd400715 	stw	r21,28(sp)
  80b21c:	dd000615 	stw	r20,24(sp)
  80b220:	dcc00515 	stw	r19,20(sp)
  80b224:	dc800415 	stw	r18,16(sp)
  80b228:	2021883a 	mov	r16,r4
  80b22c:	2823883a 	mov	r17,r5
  80b230:	2839883a 	mov	fp,r5
  80b234:	38003c1e 	bne	r7,zero,80b328 <__umoddi3+0x12c>
  80b238:	3027883a 	mov	r19,r6
  80b23c:	2029883a 	mov	r20,r4
  80b240:	2980512e 	bgeu	r5,r6,80b388 <__umoddi3+0x18c>
  80b244:	00bfffd4 	movui	r2,65535
  80b248:	11809a36 	bltu	r2,r6,80b4b4 <__umoddi3+0x2b8>
  80b24c:	01003fc4 	movi	r4,255
  80b250:	2189803a 	cmpltu	r4,r4,r6
  80b254:	200890fa 	slli	r4,r4,3
  80b258:	3104d83a 	srl	r2,r6,r4
  80b25c:	00c02074 	movhi	r3,129
  80b260:	18c90d04 	addi	r3,r3,9268
  80b264:	1885883a 	add	r2,r3,r2
  80b268:	10c00003 	ldbu	r3,0(r2)
  80b26c:	00800804 	movi	r2,32
  80b270:	1909883a 	add	r4,r3,r4
  80b274:	1125c83a 	sub	r18,r2,r4
  80b278:	90000526 	beq	r18,zero,80b290 <__umoddi3+0x94>
  80b27c:	8ca2983a 	sll	r17,r17,r18
  80b280:	8108d83a 	srl	r4,r16,r4
  80b284:	34a6983a 	sll	r19,r6,r18
  80b288:	84a8983a 	sll	r20,r16,r18
  80b28c:	2478b03a 	or	fp,r4,r17
  80b290:	982ed43a 	srli	r23,r19,16
  80b294:	e009883a 	mov	r4,fp
  80b298:	9dbfffcc 	andi	r22,r19,65535
  80b29c:	b80b883a 	mov	r5,r23
  80b2a0:	080b8900 	call	80b890 <__umodsi3>
  80b2a4:	e009883a 	mov	r4,fp
  80b2a8:	b80b883a 	mov	r5,r23
  80b2ac:	102b883a 	mov	r21,r2
  80b2b0:	080b82c0 	call	80b82c <__udivsi3>
  80b2b4:	a806943a 	slli	r3,r21,16
  80b2b8:	a008d43a 	srli	r4,r20,16
  80b2bc:	b085383a 	mul	r2,r22,r2
  80b2c0:	20c8b03a 	or	r4,r4,r3
  80b2c4:	2080032e 	bgeu	r4,r2,80b2d4 <__umoddi3+0xd8>
  80b2c8:	24c9883a 	add	r4,r4,r19
  80b2cc:	24c00136 	bltu	r4,r19,80b2d4 <__umoddi3+0xd8>
  80b2d0:	20811036 	bltu	r4,r2,80b714 <__umoddi3+0x518>
  80b2d4:	20abc83a 	sub	r21,r4,r2
  80b2d8:	b80b883a 	mov	r5,r23
  80b2dc:	a809883a 	mov	r4,r21
  80b2e0:	080b8900 	call	80b890 <__umodsi3>
  80b2e4:	1023883a 	mov	r17,r2
  80b2e8:	b80b883a 	mov	r5,r23
  80b2ec:	a809883a 	mov	r4,r21
  80b2f0:	080b82c0 	call	80b82c <__udivsi3>
  80b2f4:	8822943a 	slli	r17,r17,16
  80b2f8:	b085383a 	mul	r2,r22,r2
  80b2fc:	a0ffffcc 	andi	r3,r20,65535
  80b300:	1c46b03a 	or	r3,r3,r17
  80b304:	1880042e 	bgeu	r3,r2,80b318 <__umoddi3+0x11c>
  80b308:	1cc7883a 	add	r3,r3,r19
  80b30c:	1cc00236 	bltu	r3,r19,80b318 <__umoddi3+0x11c>
  80b310:	1880012e 	bgeu	r3,r2,80b318 <__umoddi3+0x11c>
  80b314:	1cc7883a 	add	r3,r3,r19
  80b318:	1885c83a 	sub	r2,r3,r2
  80b31c:	1484d83a 	srl	r2,r2,r18
  80b320:	0007883a 	mov	r3,zero
  80b324:	00004f06 	br	80b464 <__umoddi3+0x268>
  80b328:	29c04c36 	bltu	r5,r7,80b45c <__umoddi3+0x260>
  80b32c:	00bfffd4 	movui	r2,65535
  80b330:	11c0582e 	bgeu	r2,r7,80b494 <__umoddi3+0x298>
  80b334:	00804034 	movhi	r2,256
  80b338:	10bfffc4 	addi	r2,r2,-1
  80b33c:	11c0e736 	bltu	r2,r7,80b6dc <__umoddi3+0x4e0>
  80b340:	01000404 	movi	r4,16
  80b344:	3904d83a 	srl	r2,r7,r4
  80b348:	00c02074 	movhi	r3,129
  80b34c:	18c90d04 	addi	r3,r3,9268
  80b350:	1885883a 	add	r2,r3,r2
  80b354:	14c00003 	ldbu	r19,0(r2)
  80b358:	00c00804 	movi	r3,32
  80b35c:	9927883a 	add	r19,r19,r4
  80b360:	1ce9c83a 	sub	r20,r3,r19
  80b364:	a000581e 	bne	r20,zero,80b4c8 <__umoddi3+0x2cc>
  80b368:	3c400136 	bltu	r7,r17,80b370 <__umoddi3+0x174>
  80b36c:	8180eb36 	bltu	r16,r6,80b71c <__umoddi3+0x520>
  80b370:	8185c83a 	sub	r2,r16,r6
  80b374:	89e3c83a 	sub	r17,r17,r7
  80b378:	8089803a 	cmpltu	r4,r16,r2
  80b37c:	8939c83a 	sub	fp,r17,r4
  80b380:	e007883a 	mov	r3,fp
  80b384:	00003706 	br	80b464 <__umoddi3+0x268>
  80b388:	3000041e 	bne	r6,zero,80b39c <__umoddi3+0x1a0>
  80b38c:	000b883a 	mov	r5,zero
  80b390:	01000044 	movi	r4,1
  80b394:	080b82c0 	call	80b82c <__udivsi3>
  80b398:	1027883a 	mov	r19,r2
  80b39c:	00bfffd4 	movui	r2,65535
  80b3a0:	14c0402e 	bgeu	r2,r19,80b4a4 <__umoddi3+0x2a8>
  80b3a4:	00804034 	movhi	r2,256
  80b3a8:	10bfffc4 	addi	r2,r2,-1
  80b3ac:	14c0cd36 	bltu	r2,r19,80b6e4 <__umoddi3+0x4e8>
  80b3b0:	00800404 	movi	r2,16
  80b3b4:	9886d83a 	srl	r3,r19,r2
  80b3b8:	01002074 	movhi	r4,129
  80b3bc:	21090d04 	addi	r4,r4,9268
  80b3c0:	20c7883a 	add	r3,r4,r3
  80b3c4:	18c00003 	ldbu	r3,0(r3)
  80b3c8:	1887883a 	add	r3,r3,r2
  80b3cc:	00800804 	movi	r2,32
  80b3d0:	10e5c83a 	sub	r18,r2,r3
  80b3d4:	9000901e 	bne	r18,zero,80b618 <__umoddi3+0x41c>
  80b3d8:	982cd43a 	srli	r22,r19,16
  80b3dc:	8ce3c83a 	sub	r17,r17,r19
  80b3e0:	9d7fffcc 	andi	r21,r19,65535
  80b3e4:	b00b883a 	mov	r5,r22
  80b3e8:	8809883a 	mov	r4,r17
  80b3ec:	080b8900 	call	80b890 <__umodsi3>
  80b3f0:	8809883a 	mov	r4,r17
  80b3f4:	b00b883a 	mov	r5,r22
  80b3f8:	1021883a 	mov	r16,r2
  80b3fc:	080b82c0 	call	80b82c <__udivsi3>
  80b400:	8006943a 	slli	r3,r16,16
  80b404:	a008d43a 	srli	r4,r20,16
  80b408:	1545383a 	mul	r2,r2,r21
  80b40c:	20c8b03a 	or	r4,r4,r3
  80b410:	2080042e 	bgeu	r4,r2,80b424 <__umoddi3+0x228>
  80b414:	24c9883a 	add	r4,r4,r19
  80b418:	24c00236 	bltu	r4,r19,80b424 <__umoddi3+0x228>
  80b41c:	2080012e 	bgeu	r4,r2,80b424 <__umoddi3+0x228>
  80b420:	24c9883a 	add	r4,r4,r19
  80b424:	20a1c83a 	sub	r16,r4,r2
  80b428:	b00b883a 	mov	r5,r22
  80b42c:	8009883a 	mov	r4,r16
  80b430:	080b8900 	call	80b890 <__umodsi3>
  80b434:	1023883a 	mov	r17,r2
  80b438:	b00b883a 	mov	r5,r22
  80b43c:	8009883a 	mov	r4,r16
  80b440:	080b82c0 	call	80b82c <__udivsi3>
  80b444:	8822943a 	slli	r17,r17,16
  80b448:	1545383a 	mul	r2,r2,r21
  80b44c:	a53fffcc 	andi	r20,r20,65535
  80b450:	a446b03a 	or	r3,r20,r17
  80b454:	18bfb02e 	bgeu	r3,r2,80b318 <__alt_mem_onchip_mem+0xff78b318>
  80b458:	003fab06 	br	80b308 <__alt_mem_onchip_mem+0xff78b308>
  80b45c:	2005883a 	mov	r2,r4
  80b460:	2807883a 	mov	r3,r5
  80b464:	dfc00b17 	ldw	ra,44(sp)
  80b468:	df000a17 	ldw	fp,40(sp)
  80b46c:	ddc00917 	ldw	r23,36(sp)
  80b470:	dd800817 	ldw	r22,32(sp)
  80b474:	dd400717 	ldw	r21,28(sp)
  80b478:	dd000617 	ldw	r20,24(sp)
  80b47c:	dcc00517 	ldw	r19,20(sp)
  80b480:	dc800417 	ldw	r18,16(sp)
  80b484:	dc400317 	ldw	r17,12(sp)
  80b488:	dc000217 	ldw	r16,8(sp)
  80b48c:	dec00c04 	addi	sp,sp,48
  80b490:	f800283a 	ret
  80b494:	04c03fc4 	movi	r19,255
  80b498:	99c9803a 	cmpltu	r4,r19,r7
  80b49c:	200890fa 	slli	r4,r4,3
  80b4a0:	003fa806 	br	80b344 <__alt_mem_onchip_mem+0xff78b344>
  80b4a4:	00803fc4 	movi	r2,255
  80b4a8:	14c5803a 	cmpltu	r2,r2,r19
  80b4ac:	100490fa 	slli	r2,r2,3
  80b4b0:	003fc006 	br	80b3b4 <__alt_mem_onchip_mem+0xff78b3b4>
  80b4b4:	00804034 	movhi	r2,256
  80b4b8:	10bfffc4 	addi	r2,r2,-1
  80b4bc:	11808b36 	bltu	r2,r6,80b6ec <__umoddi3+0x4f0>
  80b4c0:	01000404 	movi	r4,16
  80b4c4:	003f6406 	br	80b258 <__alt_mem_onchip_mem+0xff78b258>
  80b4c8:	34c4d83a 	srl	r2,r6,r19
  80b4cc:	3d0e983a 	sll	r7,r7,r20
  80b4d0:	8cf8d83a 	srl	fp,r17,r19
  80b4d4:	8d10983a 	sll	r8,r17,r20
  80b4d8:	38aab03a 	or	r21,r7,r2
  80b4dc:	a82cd43a 	srli	r22,r21,16
  80b4e0:	84e2d83a 	srl	r17,r16,r19
  80b4e4:	e009883a 	mov	r4,fp
  80b4e8:	b00b883a 	mov	r5,r22
  80b4ec:	8a22b03a 	or	r17,r17,r8
  80b4f0:	3524983a 	sll	r18,r6,r20
  80b4f4:	080b8900 	call	80b890 <__umodsi3>
  80b4f8:	e009883a 	mov	r4,fp
  80b4fc:	b00b883a 	mov	r5,r22
  80b500:	102f883a 	mov	r23,r2
  80b504:	080b82c0 	call	80b82c <__udivsi3>
  80b508:	100d883a 	mov	r6,r2
  80b50c:	b808943a 	slli	r4,r23,16
  80b510:	aa3fffcc 	andi	r8,r21,65535
  80b514:	8804d43a 	srli	r2,r17,16
  80b518:	41af383a 	mul	r23,r8,r6
  80b51c:	8520983a 	sll	r16,r16,r20
  80b520:	1104b03a 	or	r2,r2,r4
  80b524:	15c0042e 	bgeu	r2,r23,80b538 <__umoddi3+0x33c>
  80b528:	1545883a 	add	r2,r2,r21
  80b52c:	30ffffc4 	addi	r3,r6,-1
  80b530:	1540742e 	bgeu	r2,r21,80b704 <__umoddi3+0x508>
  80b534:	180d883a 	mov	r6,r3
  80b538:	15efc83a 	sub	r23,r2,r23
  80b53c:	b00b883a 	mov	r5,r22
  80b540:	b809883a 	mov	r4,r23
  80b544:	d9800115 	stw	r6,4(sp)
  80b548:	da000015 	stw	r8,0(sp)
  80b54c:	080b8900 	call	80b890 <__umodsi3>
  80b550:	b00b883a 	mov	r5,r22
  80b554:	b809883a 	mov	r4,r23
  80b558:	1039883a 	mov	fp,r2
  80b55c:	080b82c0 	call	80b82c <__udivsi3>
  80b560:	da000017 	ldw	r8,0(sp)
  80b564:	e038943a 	slli	fp,fp,16
  80b568:	100b883a 	mov	r5,r2
  80b56c:	4089383a 	mul	r4,r8,r2
  80b570:	8a3fffcc 	andi	r8,r17,65535
  80b574:	4710b03a 	or	r8,r8,fp
  80b578:	d9800117 	ldw	r6,4(sp)
  80b57c:	4100042e 	bgeu	r8,r4,80b590 <__umoddi3+0x394>
  80b580:	4551883a 	add	r8,r8,r21
  80b584:	10bfffc4 	addi	r2,r2,-1
  80b588:	45405a2e 	bgeu	r8,r21,80b6f4 <__umoddi3+0x4f8>
  80b58c:	100b883a 	mov	r5,r2
  80b590:	300c943a 	slli	r6,r6,16
  80b594:	91ffffcc 	andi	r7,r18,65535
  80b598:	9004d43a 	srli	r2,r18,16
  80b59c:	314cb03a 	or	r6,r6,r5
  80b5a0:	317fffcc 	andi	r5,r6,65535
  80b5a4:	300cd43a 	srli	r6,r6,16
  80b5a8:	29d3383a 	mul	r9,r5,r7
  80b5ac:	288b383a 	mul	r5,r5,r2
  80b5b0:	31cf383a 	mul	r7,r6,r7
  80b5b4:	4806d43a 	srli	r3,r9,16
  80b5b8:	4111c83a 	sub	r8,r8,r4
  80b5bc:	29cb883a 	add	r5,r5,r7
  80b5c0:	194b883a 	add	r5,r3,r5
  80b5c4:	3085383a 	mul	r2,r6,r2
  80b5c8:	29c0022e 	bgeu	r5,r7,80b5d4 <__umoddi3+0x3d8>
  80b5cc:	00c00074 	movhi	r3,1
  80b5d0:	10c5883a 	add	r2,r2,r3
  80b5d4:	2808d43a 	srli	r4,r5,16
  80b5d8:	280a943a 	slli	r5,r5,16
  80b5dc:	4a7fffcc 	andi	r9,r9,65535
  80b5e0:	2085883a 	add	r2,r4,r2
  80b5e4:	2a4b883a 	add	r5,r5,r9
  80b5e8:	40803636 	bltu	r8,r2,80b6c4 <__umoddi3+0x4c8>
  80b5ec:	40804d26 	beq	r8,r2,80b724 <__umoddi3+0x528>
  80b5f0:	4089c83a 	sub	r4,r8,r2
  80b5f4:	280f883a 	mov	r7,r5
  80b5f8:	81cfc83a 	sub	r7,r16,r7
  80b5fc:	81c7803a 	cmpltu	r3,r16,r7
  80b600:	20c7c83a 	sub	r3,r4,r3
  80b604:	1cc4983a 	sll	r2,r3,r19
  80b608:	3d0ed83a 	srl	r7,r7,r20
  80b60c:	1d06d83a 	srl	r3,r3,r20
  80b610:	11c4b03a 	or	r2,r2,r7
  80b614:	003f9306 	br	80b464 <__alt_mem_onchip_mem+0xff78b464>
  80b618:	9ca6983a 	sll	r19,r19,r18
  80b61c:	88e8d83a 	srl	r20,r17,r3
  80b620:	80c4d83a 	srl	r2,r16,r3
  80b624:	982cd43a 	srli	r22,r19,16
  80b628:	8ca2983a 	sll	r17,r17,r18
  80b62c:	a009883a 	mov	r4,r20
  80b630:	b00b883a 	mov	r5,r22
  80b634:	1478b03a 	or	fp,r2,r17
  80b638:	080b8900 	call	80b890 <__umodsi3>
  80b63c:	a009883a 	mov	r4,r20
  80b640:	b00b883a 	mov	r5,r22
  80b644:	1023883a 	mov	r17,r2
  80b648:	080b82c0 	call	80b82c <__udivsi3>
  80b64c:	9d7fffcc 	andi	r21,r19,65535
  80b650:	880a943a 	slli	r5,r17,16
  80b654:	e008d43a 	srli	r4,fp,16
  80b658:	a885383a 	mul	r2,r21,r2
  80b65c:	84a8983a 	sll	r20,r16,r18
  80b660:	2148b03a 	or	r4,r4,r5
  80b664:	2080042e 	bgeu	r4,r2,80b678 <__umoddi3+0x47c>
  80b668:	24c9883a 	add	r4,r4,r19
  80b66c:	24c00236 	bltu	r4,r19,80b678 <__umoddi3+0x47c>
  80b670:	2080012e 	bgeu	r4,r2,80b678 <__umoddi3+0x47c>
  80b674:	24c9883a 	add	r4,r4,r19
  80b678:	20a3c83a 	sub	r17,r4,r2
  80b67c:	b00b883a 	mov	r5,r22
  80b680:	8809883a 	mov	r4,r17
  80b684:	080b8900 	call	80b890 <__umodsi3>
  80b688:	102f883a 	mov	r23,r2
  80b68c:	8809883a 	mov	r4,r17
  80b690:	b00b883a 	mov	r5,r22
  80b694:	080b82c0 	call	80b82c <__udivsi3>
  80b698:	b82e943a 	slli	r23,r23,16
  80b69c:	a885383a 	mul	r2,r21,r2
  80b6a0:	e13fffcc 	andi	r4,fp,65535
  80b6a4:	25c8b03a 	or	r4,r4,r23
  80b6a8:	2080042e 	bgeu	r4,r2,80b6bc <__umoddi3+0x4c0>
  80b6ac:	24c9883a 	add	r4,r4,r19
  80b6b0:	24c00236 	bltu	r4,r19,80b6bc <__umoddi3+0x4c0>
  80b6b4:	2080012e 	bgeu	r4,r2,80b6bc <__umoddi3+0x4c0>
  80b6b8:	24c9883a 	add	r4,r4,r19
  80b6bc:	20a3c83a 	sub	r17,r4,r2
  80b6c0:	003f4806 	br	80b3e4 <__alt_mem_onchip_mem+0xff78b3e4>
  80b6c4:	2c8fc83a 	sub	r7,r5,r18
  80b6c8:	1545c83a 	sub	r2,r2,r21
  80b6cc:	29cb803a 	cmpltu	r5,r5,r7
  80b6d0:	1145c83a 	sub	r2,r2,r5
  80b6d4:	4089c83a 	sub	r4,r8,r2
  80b6d8:	003fc706 	br	80b5f8 <__alt_mem_onchip_mem+0xff78b5f8>
  80b6dc:	01000604 	movi	r4,24
  80b6e0:	003f1806 	br	80b344 <__alt_mem_onchip_mem+0xff78b344>
  80b6e4:	00800604 	movi	r2,24
  80b6e8:	003f3206 	br	80b3b4 <__alt_mem_onchip_mem+0xff78b3b4>
  80b6ec:	01000604 	movi	r4,24
  80b6f0:	003ed906 	br	80b258 <__alt_mem_onchip_mem+0xff78b258>
  80b6f4:	413fa52e 	bgeu	r8,r4,80b58c <__alt_mem_onchip_mem+0xff78b58c>
  80b6f8:	297fff84 	addi	r5,r5,-2
  80b6fc:	4551883a 	add	r8,r8,r21
  80b700:	003fa306 	br	80b590 <__alt_mem_onchip_mem+0xff78b590>
  80b704:	15ff8b2e 	bgeu	r2,r23,80b534 <__alt_mem_onchip_mem+0xff78b534>
  80b708:	31bfff84 	addi	r6,r6,-2
  80b70c:	1545883a 	add	r2,r2,r21
  80b710:	003f8906 	br	80b538 <__alt_mem_onchip_mem+0xff78b538>
  80b714:	24c9883a 	add	r4,r4,r19
  80b718:	003eee06 	br	80b2d4 <__alt_mem_onchip_mem+0xff78b2d4>
  80b71c:	8005883a 	mov	r2,r16
  80b720:	003f1706 	br	80b380 <__alt_mem_onchip_mem+0xff78b380>
  80b724:	817fe736 	bltu	r16,r5,80b6c4 <__alt_mem_onchip_mem+0xff78b6c4>
  80b728:	280f883a 	mov	r7,r5
  80b72c:	0009883a 	mov	r4,zero
  80b730:	003fb106 	br	80b5f8 <__alt_mem_onchip_mem+0xff78b5f8>

0080b734 <__divsi3>:
  80b734:	20001b16 	blt	r4,zero,80b7a4 <__divsi3+0x70>
  80b738:	000f883a 	mov	r7,zero
  80b73c:	28001616 	blt	r5,zero,80b798 <__divsi3+0x64>
  80b740:	200d883a 	mov	r6,r4
  80b744:	29001a2e 	bgeu	r5,r4,80b7b0 <__divsi3+0x7c>
  80b748:	00800804 	movi	r2,32
  80b74c:	00c00044 	movi	r3,1
  80b750:	00000106 	br	80b758 <__divsi3+0x24>
  80b754:	10000d26 	beq	r2,zero,80b78c <__divsi3+0x58>
  80b758:	294b883a 	add	r5,r5,r5
  80b75c:	10bfffc4 	addi	r2,r2,-1
  80b760:	18c7883a 	add	r3,r3,r3
  80b764:	293ffb36 	bltu	r5,r4,80b754 <__alt_mem_onchip_mem+0xff78b754>
  80b768:	0005883a 	mov	r2,zero
  80b76c:	18000726 	beq	r3,zero,80b78c <__divsi3+0x58>
  80b770:	0005883a 	mov	r2,zero
  80b774:	31400236 	bltu	r6,r5,80b780 <__divsi3+0x4c>
  80b778:	314dc83a 	sub	r6,r6,r5
  80b77c:	10c4b03a 	or	r2,r2,r3
  80b780:	1806d07a 	srli	r3,r3,1
  80b784:	280ad07a 	srli	r5,r5,1
  80b788:	183ffa1e 	bne	r3,zero,80b774 <__alt_mem_onchip_mem+0xff78b774>
  80b78c:	38000126 	beq	r7,zero,80b794 <__divsi3+0x60>
  80b790:	0085c83a 	sub	r2,zero,r2
  80b794:	f800283a 	ret
  80b798:	014bc83a 	sub	r5,zero,r5
  80b79c:	39c0005c 	xori	r7,r7,1
  80b7a0:	003fe706 	br	80b740 <__alt_mem_onchip_mem+0xff78b740>
  80b7a4:	0109c83a 	sub	r4,zero,r4
  80b7a8:	01c00044 	movi	r7,1
  80b7ac:	003fe306 	br	80b73c <__alt_mem_onchip_mem+0xff78b73c>
  80b7b0:	00c00044 	movi	r3,1
  80b7b4:	003fee06 	br	80b770 <__alt_mem_onchip_mem+0xff78b770>

0080b7b8 <__modsi3>:
  80b7b8:	20001716 	blt	r4,zero,80b818 <__modsi3+0x60>
  80b7bc:	000f883a 	mov	r7,zero
  80b7c0:	2005883a 	mov	r2,r4
  80b7c4:	28001216 	blt	r5,zero,80b810 <__modsi3+0x58>
  80b7c8:	2900162e 	bgeu	r5,r4,80b824 <__modsi3+0x6c>
  80b7cc:	01800804 	movi	r6,32
  80b7d0:	00c00044 	movi	r3,1
  80b7d4:	00000106 	br	80b7dc <__modsi3+0x24>
  80b7d8:	30000a26 	beq	r6,zero,80b804 <__modsi3+0x4c>
  80b7dc:	294b883a 	add	r5,r5,r5
  80b7e0:	31bfffc4 	addi	r6,r6,-1
  80b7e4:	18c7883a 	add	r3,r3,r3
  80b7e8:	293ffb36 	bltu	r5,r4,80b7d8 <__alt_mem_onchip_mem+0xff78b7d8>
  80b7ec:	18000526 	beq	r3,zero,80b804 <__modsi3+0x4c>
  80b7f0:	1806d07a 	srli	r3,r3,1
  80b7f4:	11400136 	bltu	r2,r5,80b7fc <__modsi3+0x44>
  80b7f8:	1145c83a 	sub	r2,r2,r5
  80b7fc:	280ad07a 	srli	r5,r5,1
  80b800:	183ffb1e 	bne	r3,zero,80b7f0 <__alt_mem_onchip_mem+0xff78b7f0>
  80b804:	38000126 	beq	r7,zero,80b80c <__modsi3+0x54>
  80b808:	0085c83a 	sub	r2,zero,r2
  80b80c:	f800283a 	ret
  80b810:	014bc83a 	sub	r5,zero,r5
  80b814:	003fec06 	br	80b7c8 <__alt_mem_onchip_mem+0xff78b7c8>
  80b818:	0109c83a 	sub	r4,zero,r4
  80b81c:	01c00044 	movi	r7,1
  80b820:	003fe706 	br	80b7c0 <__alt_mem_onchip_mem+0xff78b7c0>
  80b824:	00c00044 	movi	r3,1
  80b828:	003ff106 	br	80b7f0 <__alt_mem_onchip_mem+0xff78b7f0>

0080b82c <__udivsi3>:
  80b82c:	200d883a 	mov	r6,r4
  80b830:	2900152e 	bgeu	r5,r4,80b888 <__udivsi3+0x5c>
  80b834:	28001416 	blt	r5,zero,80b888 <__udivsi3+0x5c>
  80b838:	00800804 	movi	r2,32
  80b83c:	00c00044 	movi	r3,1
  80b840:	00000206 	br	80b84c <__udivsi3+0x20>
  80b844:	10000e26 	beq	r2,zero,80b880 <__udivsi3+0x54>
  80b848:	28000516 	blt	r5,zero,80b860 <__udivsi3+0x34>
  80b84c:	294b883a 	add	r5,r5,r5
  80b850:	10bfffc4 	addi	r2,r2,-1
  80b854:	18c7883a 	add	r3,r3,r3
  80b858:	293ffa36 	bltu	r5,r4,80b844 <__alt_mem_onchip_mem+0xff78b844>
  80b85c:	18000826 	beq	r3,zero,80b880 <__udivsi3+0x54>
  80b860:	0005883a 	mov	r2,zero
  80b864:	31400236 	bltu	r6,r5,80b870 <__udivsi3+0x44>
  80b868:	314dc83a 	sub	r6,r6,r5
  80b86c:	10c4b03a 	or	r2,r2,r3
  80b870:	1806d07a 	srli	r3,r3,1
  80b874:	280ad07a 	srli	r5,r5,1
  80b878:	183ffa1e 	bne	r3,zero,80b864 <__alt_mem_onchip_mem+0xff78b864>
  80b87c:	f800283a 	ret
  80b880:	0005883a 	mov	r2,zero
  80b884:	f800283a 	ret
  80b888:	00c00044 	movi	r3,1
  80b88c:	003ff406 	br	80b860 <__alt_mem_onchip_mem+0xff78b860>

0080b890 <__umodsi3>:
  80b890:	2005883a 	mov	r2,r4
  80b894:	2900122e 	bgeu	r5,r4,80b8e0 <__umodsi3+0x50>
  80b898:	28001116 	blt	r5,zero,80b8e0 <__umodsi3+0x50>
  80b89c:	01800804 	movi	r6,32
  80b8a0:	00c00044 	movi	r3,1
  80b8a4:	00000206 	br	80b8b0 <__umodsi3+0x20>
  80b8a8:	30000c26 	beq	r6,zero,80b8dc <__umodsi3+0x4c>
  80b8ac:	28000516 	blt	r5,zero,80b8c4 <__umodsi3+0x34>
  80b8b0:	294b883a 	add	r5,r5,r5
  80b8b4:	31bfffc4 	addi	r6,r6,-1
  80b8b8:	18c7883a 	add	r3,r3,r3
  80b8bc:	293ffa36 	bltu	r5,r4,80b8a8 <__alt_mem_onchip_mem+0xff78b8a8>
  80b8c0:	18000626 	beq	r3,zero,80b8dc <__umodsi3+0x4c>
  80b8c4:	1806d07a 	srli	r3,r3,1
  80b8c8:	11400136 	bltu	r2,r5,80b8d0 <__umodsi3+0x40>
  80b8cc:	1145c83a 	sub	r2,r2,r5
  80b8d0:	280ad07a 	srli	r5,r5,1
  80b8d4:	183ffb1e 	bne	r3,zero,80b8c4 <__alt_mem_onchip_mem+0xff78b8c4>
  80b8d8:	f800283a 	ret
  80b8dc:	f800283a 	ret
  80b8e0:	00c00044 	movi	r3,1
  80b8e4:	003ff706 	br	80b8c4 <__alt_mem_onchip_mem+0xff78b8c4>

0080b8e8 <__adddf3>:
  80b8e8:	02c00434 	movhi	r11,16
  80b8ec:	5affffc4 	addi	r11,r11,-1
  80b8f0:	2806d7fa 	srli	r3,r5,31
  80b8f4:	2ad4703a 	and	r10,r5,r11
  80b8f8:	3ad2703a 	and	r9,r7,r11
  80b8fc:	3804d53a 	srli	r2,r7,20
  80b900:	3018d77a 	srli	r12,r6,29
  80b904:	280ad53a 	srli	r5,r5,20
  80b908:	501490fa 	slli	r10,r10,3
  80b90c:	2010d77a 	srli	r8,r4,29
  80b910:	481290fa 	slli	r9,r9,3
  80b914:	380ed7fa 	srli	r7,r7,31
  80b918:	defffb04 	addi	sp,sp,-20
  80b91c:	dc800215 	stw	r18,8(sp)
  80b920:	dc400115 	stw	r17,4(sp)
  80b924:	dc000015 	stw	r16,0(sp)
  80b928:	dfc00415 	stw	ra,16(sp)
  80b92c:	dcc00315 	stw	r19,12(sp)
  80b930:	1c803fcc 	andi	r18,r3,255
  80b934:	2c01ffcc 	andi	r16,r5,2047
  80b938:	5210b03a 	or	r8,r10,r8
  80b93c:	202290fa 	slli	r17,r4,3
  80b940:	1081ffcc 	andi	r2,r2,2047
  80b944:	4b12b03a 	or	r9,r9,r12
  80b948:	300c90fa 	slli	r6,r6,3
  80b94c:	91c07526 	beq	r18,r7,80bb24 <__adddf3+0x23c>
  80b950:	8087c83a 	sub	r3,r16,r2
  80b954:	00c0ab0e 	bge	zero,r3,80bc04 <__adddf3+0x31c>
  80b958:	10002a1e 	bne	r2,zero,80ba04 <__adddf3+0x11c>
  80b95c:	4984b03a 	or	r2,r9,r6
  80b960:	1000961e 	bne	r2,zero,80bbbc <__adddf3+0x2d4>
  80b964:	888001cc 	andi	r2,r17,7
  80b968:	10000726 	beq	r2,zero,80b988 <__adddf3+0xa0>
  80b96c:	888003cc 	andi	r2,r17,15
  80b970:	00c00104 	movi	r3,4
  80b974:	10c00426 	beq	r2,r3,80b988 <__adddf3+0xa0>
  80b978:	88c7883a 	add	r3,r17,r3
  80b97c:	1c63803a 	cmpltu	r17,r3,r17
  80b980:	4451883a 	add	r8,r8,r17
  80b984:	1823883a 	mov	r17,r3
  80b988:	4080202c 	andhi	r2,r8,128
  80b98c:	10005926 	beq	r2,zero,80baf4 <__adddf3+0x20c>
  80b990:	84000044 	addi	r16,r16,1
  80b994:	0081ffc4 	movi	r2,2047
  80b998:	8080ba26 	beq	r16,r2,80bc84 <__adddf3+0x39c>
  80b99c:	00bfe034 	movhi	r2,65408
  80b9a0:	10bfffc4 	addi	r2,r2,-1
  80b9a4:	4090703a 	and	r8,r8,r2
  80b9a8:	4004977a 	slli	r2,r8,29
  80b9ac:	4010927a 	slli	r8,r8,9
  80b9b0:	8822d0fa 	srli	r17,r17,3
  80b9b4:	8401ffcc 	andi	r16,r16,2047
  80b9b8:	4010d33a 	srli	r8,r8,12
  80b9bc:	9007883a 	mov	r3,r18
  80b9c0:	1444b03a 	or	r2,r2,r17
  80b9c4:	8401ffcc 	andi	r16,r16,2047
  80b9c8:	8020953a 	slli	r16,r16,20
  80b9cc:	18c03fcc 	andi	r3,r3,255
  80b9d0:	01000434 	movhi	r4,16
  80b9d4:	213fffc4 	addi	r4,r4,-1
  80b9d8:	180697fa 	slli	r3,r3,31
  80b9dc:	4110703a 	and	r8,r8,r4
  80b9e0:	4410b03a 	or	r8,r8,r16
  80b9e4:	40c6b03a 	or	r3,r8,r3
  80b9e8:	dfc00417 	ldw	ra,16(sp)
  80b9ec:	dcc00317 	ldw	r19,12(sp)
  80b9f0:	dc800217 	ldw	r18,8(sp)
  80b9f4:	dc400117 	ldw	r17,4(sp)
  80b9f8:	dc000017 	ldw	r16,0(sp)
  80b9fc:	dec00504 	addi	sp,sp,20
  80ba00:	f800283a 	ret
  80ba04:	0081ffc4 	movi	r2,2047
  80ba08:	80bfd626 	beq	r16,r2,80b964 <__alt_mem_onchip_mem+0xff78b964>
  80ba0c:	4a402034 	orhi	r9,r9,128
  80ba10:	00800e04 	movi	r2,56
  80ba14:	10c09f16 	blt	r2,r3,80bc94 <__adddf3+0x3ac>
  80ba18:	008007c4 	movi	r2,31
  80ba1c:	10c0c216 	blt	r2,r3,80bd28 <__adddf3+0x440>
  80ba20:	00800804 	movi	r2,32
  80ba24:	10c5c83a 	sub	r2,r2,r3
  80ba28:	488a983a 	sll	r5,r9,r2
  80ba2c:	30c8d83a 	srl	r4,r6,r3
  80ba30:	3084983a 	sll	r2,r6,r2
  80ba34:	48c6d83a 	srl	r3,r9,r3
  80ba38:	290cb03a 	or	r6,r5,r4
  80ba3c:	1004c03a 	cmpne	r2,r2,zero
  80ba40:	308cb03a 	or	r6,r6,r2
  80ba44:	898dc83a 	sub	r6,r17,r6
  80ba48:	89a3803a 	cmpltu	r17,r17,r6
  80ba4c:	40d1c83a 	sub	r8,r8,r3
  80ba50:	4451c83a 	sub	r8,r8,r17
  80ba54:	3023883a 	mov	r17,r6
  80ba58:	4080202c 	andhi	r2,r8,128
  80ba5c:	10002326 	beq	r2,zero,80baec <__adddf3+0x204>
  80ba60:	04c02034 	movhi	r19,128
  80ba64:	9cffffc4 	addi	r19,r19,-1
  80ba68:	44e6703a 	and	r19,r8,r19
  80ba6c:	98007626 	beq	r19,zero,80bc48 <__adddf3+0x360>
  80ba70:	9809883a 	mov	r4,r19
  80ba74:	080deec0 	call	80deec <__clzsi2>
  80ba78:	10fffe04 	addi	r3,r2,-8
  80ba7c:	010007c4 	movi	r4,31
  80ba80:	20c07716 	blt	r4,r3,80bc60 <__adddf3+0x378>
  80ba84:	00800804 	movi	r2,32
  80ba88:	10c5c83a 	sub	r2,r2,r3
  80ba8c:	8884d83a 	srl	r2,r17,r2
  80ba90:	98d0983a 	sll	r8,r19,r3
  80ba94:	88e2983a 	sll	r17,r17,r3
  80ba98:	1204b03a 	or	r2,r2,r8
  80ba9c:	1c007416 	blt	r3,r16,80bc70 <__adddf3+0x388>
  80baa0:	1c21c83a 	sub	r16,r3,r16
  80baa4:	82000044 	addi	r8,r16,1
  80baa8:	00c007c4 	movi	r3,31
  80baac:	1a009116 	blt	r3,r8,80bcf4 <__adddf3+0x40c>
  80bab0:	00c00804 	movi	r3,32
  80bab4:	1a07c83a 	sub	r3,r3,r8
  80bab8:	8a08d83a 	srl	r4,r17,r8
  80babc:	88e2983a 	sll	r17,r17,r3
  80bac0:	10c6983a 	sll	r3,r2,r3
  80bac4:	1210d83a 	srl	r8,r2,r8
  80bac8:	8804c03a 	cmpne	r2,r17,zero
  80bacc:	1906b03a 	or	r3,r3,r4
  80bad0:	18a2b03a 	or	r17,r3,r2
  80bad4:	0021883a 	mov	r16,zero
  80bad8:	003fa206 	br	80b964 <__alt_mem_onchip_mem+0xff78b964>
  80badc:	1890b03a 	or	r8,r3,r2
  80bae0:	40017d26 	beq	r8,zero,80c0d8 <__adddf3+0x7f0>
  80bae4:	1011883a 	mov	r8,r2
  80bae8:	1823883a 	mov	r17,r3
  80baec:	888001cc 	andi	r2,r17,7
  80baf0:	103f9e1e 	bne	r2,zero,80b96c <__alt_mem_onchip_mem+0xff78b96c>
  80baf4:	4004977a 	slli	r2,r8,29
  80baf8:	8822d0fa 	srli	r17,r17,3
  80bafc:	4010d0fa 	srli	r8,r8,3
  80bb00:	9007883a 	mov	r3,r18
  80bb04:	1444b03a 	or	r2,r2,r17
  80bb08:	0101ffc4 	movi	r4,2047
  80bb0c:	81002426 	beq	r16,r4,80bba0 <__adddf3+0x2b8>
  80bb10:	8120703a 	and	r16,r16,r4
  80bb14:	01000434 	movhi	r4,16
  80bb18:	213fffc4 	addi	r4,r4,-1
  80bb1c:	4110703a 	and	r8,r8,r4
  80bb20:	003fa806 	br	80b9c4 <__alt_mem_onchip_mem+0xff78b9c4>
  80bb24:	8089c83a 	sub	r4,r16,r2
  80bb28:	01005e0e 	bge	zero,r4,80bca4 <__adddf3+0x3bc>
  80bb2c:	10002b26 	beq	r2,zero,80bbdc <__adddf3+0x2f4>
  80bb30:	0081ffc4 	movi	r2,2047
  80bb34:	80bf8b26 	beq	r16,r2,80b964 <__alt_mem_onchip_mem+0xff78b964>
  80bb38:	4a402034 	orhi	r9,r9,128
  80bb3c:	00800e04 	movi	r2,56
  80bb40:	1100a40e 	bge	r2,r4,80bdd4 <__adddf3+0x4ec>
  80bb44:	498cb03a 	or	r6,r9,r6
  80bb48:	300ac03a 	cmpne	r5,r6,zero
  80bb4c:	0013883a 	mov	r9,zero
  80bb50:	2c4b883a 	add	r5,r5,r17
  80bb54:	2c63803a 	cmpltu	r17,r5,r17
  80bb58:	4a11883a 	add	r8,r9,r8
  80bb5c:	8a11883a 	add	r8,r17,r8
  80bb60:	2823883a 	mov	r17,r5
  80bb64:	4080202c 	andhi	r2,r8,128
  80bb68:	103fe026 	beq	r2,zero,80baec <__alt_mem_onchip_mem+0xff78baec>
  80bb6c:	84000044 	addi	r16,r16,1
  80bb70:	0081ffc4 	movi	r2,2047
  80bb74:	8080d226 	beq	r16,r2,80bec0 <__adddf3+0x5d8>
  80bb78:	00bfe034 	movhi	r2,65408
  80bb7c:	10bfffc4 	addi	r2,r2,-1
  80bb80:	4090703a 	and	r8,r8,r2
  80bb84:	880ad07a 	srli	r5,r17,1
  80bb88:	400897fa 	slli	r4,r8,31
  80bb8c:	88c0004c 	andi	r3,r17,1
  80bb90:	28e2b03a 	or	r17,r5,r3
  80bb94:	4010d07a 	srli	r8,r8,1
  80bb98:	2462b03a 	or	r17,r4,r17
  80bb9c:	003f7106 	br	80b964 <__alt_mem_onchip_mem+0xff78b964>
  80bba0:	4088b03a 	or	r4,r8,r2
  80bba4:	20014526 	beq	r4,zero,80c0bc <__adddf3+0x7d4>
  80bba8:	01000434 	movhi	r4,16
  80bbac:	42000234 	orhi	r8,r8,8
  80bbb0:	213fffc4 	addi	r4,r4,-1
  80bbb4:	4110703a 	and	r8,r8,r4
  80bbb8:	003f8206 	br	80b9c4 <__alt_mem_onchip_mem+0xff78b9c4>
  80bbbc:	18ffffc4 	addi	r3,r3,-1
  80bbc0:	1800491e 	bne	r3,zero,80bce8 <__adddf3+0x400>
  80bbc4:	898bc83a 	sub	r5,r17,r6
  80bbc8:	8963803a 	cmpltu	r17,r17,r5
  80bbcc:	4251c83a 	sub	r8,r8,r9
  80bbd0:	4451c83a 	sub	r8,r8,r17
  80bbd4:	2823883a 	mov	r17,r5
  80bbd8:	003f9f06 	br	80ba58 <__alt_mem_onchip_mem+0xff78ba58>
  80bbdc:	4984b03a 	or	r2,r9,r6
  80bbe0:	103f6026 	beq	r2,zero,80b964 <__alt_mem_onchip_mem+0xff78b964>
  80bbe4:	213fffc4 	addi	r4,r4,-1
  80bbe8:	2000931e 	bne	r4,zero,80be38 <__adddf3+0x550>
  80bbec:	898d883a 	add	r6,r17,r6
  80bbf0:	3463803a 	cmpltu	r17,r6,r17
  80bbf4:	4251883a 	add	r8,r8,r9
  80bbf8:	8a11883a 	add	r8,r17,r8
  80bbfc:	3023883a 	mov	r17,r6
  80bc00:	003fd806 	br	80bb64 <__alt_mem_onchip_mem+0xff78bb64>
  80bc04:	1800541e 	bne	r3,zero,80bd58 <__adddf3+0x470>
  80bc08:	80800044 	addi	r2,r16,1
  80bc0c:	1081ffcc 	andi	r2,r2,2047
  80bc10:	00c00044 	movi	r3,1
  80bc14:	1880a00e 	bge	r3,r2,80be98 <__adddf3+0x5b0>
  80bc18:	8989c83a 	sub	r4,r17,r6
  80bc1c:	8905803a 	cmpltu	r2,r17,r4
  80bc20:	4267c83a 	sub	r19,r8,r9
  80bc24:	98a7c83a 	sub	r19,r19,r2
  80bc28:	9880202c 	andhi	r2,r19,128
  80bc2c:	10006326 	beq	r2,zero,80bdbc <__adddf3+0x4d4>
  80bc30:	3463c83a 	sub	r17,r6,r17
  80bc34:	4a07c83a 	sub	r3,r9,r8
  80bc38:	344d803a 	cmpltu	r6,r6,r17
  80bc3c:	19a7c83a 	sub	r19,r3,r6
  80bc40:	3825883a 	mov	r18,r7
  80bc44:	983f8a1e 	bne	r19,zero,80ba70 <__alt_mem_onchip_mem+0xff78ba70>
  80bc48:	8809883a 	mov	r4,r17
  80bc4c:	080deec0 	call	80deec <__clzsi2>
  80bc50:	10800804 	addi	r2,r2,32
  80bc54:	10fffe04 	addi	r3,r2,-8
  80bc58:	010007c4 	movi	r4,31
  80bc5c:	20ff890e 	bge	r4,r3,80ba84 <__alt_mem_onchip_mem+0xff78ba84>
  80bc60:	10bff604 	addi	r2,r2,-40
  80bc64:	8884983a 	sll	r2,r17,r2
  80bc68:	0023883a 	mov	r17,zero
  80bc6c:	1c3f8c0e 	bge	r3,r16,80baa0 <__alt_mem_onchip_mem+0xff78baa0>
  80bc70:	023fe034 	movhi	r8,65408
  80bc74:	423fffc4 	addi	r8,r8,-1
  80bc78:	80e1c83a 	sub	r16,r16,r3
  80bc7c:	1210703a 	and	r8,r2,r8
  80bc80:	003f3806 	br	80b964 <__alt_mem_onchip_mem+0xff78b964>
  80bc84:	9007883a 	mov	r3,r18
  80bc88:	0011883a 	mov	r8,zero
  80bc8c:	0005883a 	mov	r2,zero
  80bc90:	003f4c06 	br	80b9c4 <__alt_mem_onchip_mem+0xff78b9c4>
  80bc94:	498cb03a 	or	r6,r9,r6
  80bc98:	300cc03a 	cmpne	r6,r6,zero
  80bc9c:	0007883a 	mov	r3,zero
  80bca0:	003f6806 	br	80ba44 <__alt_mem_onchip_mem+0xff78ba44>
  80bca4:	20009c1e 	bne	r4,zero,80bf18 <__adddf3+0x630>
  80bca8:	80800044 	addi	r2,r16,1
  80bcac:	1141ffcc 	andi	r5,r2,2047
  80bcb0:	01000044 	movi	r4,1
  80bcb4:	2140670e 	bge	r4,r5,80be54 <__adddf3+0x56c>
  80bcb8:	0101ffc4 	movi	r4,2047
  80bcbc:	11007f26 	beq	r2,r4,80bebc <__adddf3+0x5d4>
  80bcc0:	898d883a 	add	r6,r17,r6
  80bcc4:	4247883a 	add	r3,r8,r9
  80bcc8:	3451803a 	cmpltu	r8,r6,r17
  80bccc:	40d1883a 	add	r8,r8,r3
  80bcd0:	402297fa 	slli	r17,r8,31
  80bcd4:	300cd07a 	srli	r6,r6,1
  80bcd8:	4010d07a 	srli	r8,r8,1
  80bcdc:	1021883a 	mov	r16,r2
  80bce0:	89a2b03a 	or	r17,r17,r6
  80bce4:	003f1f06 	br	80b964 <__alt_mem_onchip_mem+0xff78b964>
  80bce8:	0081ffc4 	movi	r2,2047
  80bcec:	80bf481e 	bne	r16,r2,80ba10 <__alt_mem_onchip_mem+0xff78ba10>
  80bcf0:	003f1c06 	br	80b964 <__alt_mem_onchip_mem+0xff78b964>
  80bcf4:	843ff844 	addi	r16,r16,-31
  80bcf8:	01000804 	movi	r4,32
  80bcfc:	1406d83a 	srl	r3,r2,r16
  80bd00:	41005026 	beq	r8,r4,80be44 <__adddf3+0x55c>
  80bd04:	01001004 	movi	r4,64
  80bd08:	2211c83a 	sub	r8,r4,r8
  80bd0c:	1204983a 	sll	r2,r2,r8
  80bd10:	88a2b03a 	or	r17,r17,r2
  80bd14:	8822c03a 	cmpne	r17,r17,zero
  80bd18:	1c62b03a 	or	r17,r3,r17
  80bd1c:	0011883a 	mov	r8,zero
  80bd20:	0021883a 	mov	r16,zero
  80bd24:	003f7106 	br	80baec <__alt_mem_onchip_mem+0xff78baec>
  80bd28:	193ff804 	addi	r4,r3,-32
  80bd2c:	00800804 	movi	r2,32
  80bd30:	4908d83a 	srl	r4,r9,r4
  80bd34:	18804526 	beq	r3,r2,80be4c <__adddf3+0x564>
  80bd38:	00801004 	movi	r2,64
  80bd3c:	10c5c83a 	sub	r2,r2,r3
  80bd40:	4886983a 	sll	r3,r9,r2
  80bd44:	198cb03a 	or	r6,r3,r6
  80bd48:	300cc03a 	cmpne	r6,r6,zero
  80bd4c:	218cb03a 	or	r6,r4,r6
  80bd50:	0007883a 	mov	r3,zero
  80bd54:	003f3b06 	br	80ba44 <__alt_mem_onchip_mem+0xff78ba44>
  80bd58:	80002a26 	beq	r16,zero,80be04 <__adddf3+0x51c>
  80bd5c:	0101ffc4 	movi	r4,2047
  80bd60:	11006826 	beq	r2,r4,80bf04 <__adddf3+0x61c>
  80bd64:	00c7c83a 	sub	r3,zero,r3
  80bd68:	42002034 	orhi	r8,r8,128
  80bd6c:	01000e04 	movi	r4,56
  80bd70:	20c07c16 	blt	r4,r3,80bf64 <__adddf3+0x67c>
  80bd74:	010007c4 	movi	r4,31
  80bd78:	20c0da16 	blt	r4,r3,80c0e4 <__adddf3+0x7fc>
  80bd7c:	01000804 	movi	r4,32
  80bd80:	20c9c83a 	sub	r4,r4,r3
  80bd84:	4114983a 	sll	r10,r8,r4
  80bd88:	88cad83a 	srl	r5,r17,r3
  80bd8c:	8908983a 	sll	r4,r17,r4
  80bd90:	40c6d83a 	srl	r3,r8,r3
  80bd94:	5162b03a 	or	r17,r10,r5
  80bd98:	2008c03a 	cmpne	r4,r4,zero
  80bd9c:	8922b03a 	or	r17,r17,r4
  80bda0:	3463c83a 	sub	r17,r6,r17
  80bda4:	48c7c83a 	sub	r3,r9,r3
  80bda8:	344d803a 	cmpltu	r6,r6,r17
  80bdac:	1991c83a 	sub	r8,r3,r6
  80bdb0:	1021883a 	mov	r16,r2
  80bdb4:	3825883a 	mov	r18,r7
  80bdb8:	003f2706 	br	80ba58 <__alt_mem_onchip_mem+0xff78ba58>
  80bdbc:	24d0b03a 	or	r8,r4,r19
  80bdc0:	40001b1e 	bne	r8,zero,80be30 <__adddf3+0x548>
  80bdc4:	0005883a 	mov	r2,zero
  80bdc8:	0007883a 	mov	r3,zero
  80bdcc:	0021883a 	mov	r16,zero
  80bdd0:	003f4d06 	br	80bb08 <__alt_mem_onchip_mem+0xff78bb08>
  80bdd4:	008007c4 	movi	r2,31
  80bdd8:	11003c16 	blt	r2,r4,80becc <__adddf3+0x5e4>
  80bddc:	00800804 	movi	r2,32
  80bde0:	1105c83a 	sub	r2,r2,r4
  80bde4:	488e983a 	sll	r7,r9,r2
  80bde8:	310ad83a 	srl	r5,r6,r4
  80bdec:	3084983a 	sll	r2,r6,r2
  80bdf0:	4912d83a 	srl	r9,r9,r4
  80bdf4:	394ab03a 	or	r5,r7,r5
  80bdf8:	1004c03a 	cmpne	r2,r2,zero
  80bdfc:	288ab03a 	or	r5,r5,r2
  80be00:	003f5306 	br	80bb50 <__alt_mem_onchip_mem+0xff78bb50>
  80be04:	4448b03a 	or	r4,r8,r17
  80be08:	20003e26 	beq	r4,zero,80bf04 <__adddf3+0x61c>
  80be0c:	00c6303a 	nor	r3,zero,r3
  80be10:	18003a1e 	bne	r3,zero,80befc <__adddf3+0x614>
  80be14:	3463c83a 	sub	r17,r6,r17
  80be18:	4a07c83a 	sub	r3,r9,r8
  80be1c:	344d803a 	cmpltu	r6,r6,r17
  80be20:	1991c83a 	sub	r8,r3,r6
  80be24:	1021883a 	mov	r16,r2
  80be28:	3825883a 	mov	r18,r7
  80be2c:	003f0a06 	br	80ba58 <__alt_mem_onchip_mem+0xff78ba58>
  80be30:	2023883a 	mov	r17,r4
  80be34:	003f0d06 	br	80ba6c <__alt_mem_onchip_mem+0xff78ba6c>
  80be38:	0081ffc4 	movi	r2,2047
  80be3c:	80bf3f1e 	bne	r16,r2,80bb3c <__alt_mem_onchip_mem+0xff78bb3c>
  80be40:	003ec806 	br	80b964 <__alt_mem_onchip_mem+0xff78b964>
  80be44:	0005883a 	mov	r2,zero
  80be48:	003fb106 	br	80bd10 <__alt_mem_onchip_mem+0xff78bd10>
  80be4c:	0007883a 	mov	r3,zero
  80be50:	003fbc06 	br	80bd44 <__alt_mem_onchip_mem+0xff78bd44>
  80be54:	4444b03a 	or	r2,r8,r17
  80be58:	8000871e 	bne	r16,zero,80c078 <__adddf3+0x790>
  80be5c:	1000ba26 	beq	r2,zero,80c148 <__adddf3+0x860>
  80be60:	4984b03a 	or	r2,r9,r6
  80be64:	103ebf26 	beq	r2,zero,80b964 <__alt_mem_onchip_mem+0xff78b964>
  80be68:	8985883a 	add	r2,r17,r6
  80be6c:	4247883a 	add	r3,r8,r9
  80be70:	1451803a 	cmpltu	r8,r2,r17
  80be74:	40d1883a 	add	r8,r8,r3
  80be78:	40c0202c 	andhi	r3,r8,128
  80be7c:	1023883a 	mov	r17,r2
  80be80:	183f1a26 	beq	r3,zero,80baec <__alt_mem_onchip_mem+0xff78baec>
  80be84:	00bfe034 	movhi	r2,65408
  80be88:	10bfffc4 	addi	r2,r2,-1
  80be8c:	2021883a 	mov	r16,r4
  80be90:	4090703a 	and	r8,r8,r2
  80be94:	003eb306 	br	80b964 <__alt_mem_onchip_mem+0xff78b964>
  80be98:	4444b03a 	or	r2,r8,r17
  80be9c:	8000291e 	bne	r16,zero,80bf44 <__adddf3+0x65c>
  80bea0:	10004b1e 	bne	r2,zero,80bfd0 <__adddf3+0x6e8>
  80bea4:	4990b03a 	or	r8,r9,r6
  80bea8:	40008b26 	beq	r8,zero,80c0d8 <__adddf3+0x7f0>
  80beac:	4811883a 	mov	r8,r9
  80beb0:	3023883a 	mov	r17,r6
  80beb4:	3825883a 	mov	r18,r7
  80beb8:	003eaa06 	br	80b964 <__alt_mem_onchip_mem+0xff78b964>
  80bebc:	1021883a 	mov	r16,r2
  80bec0:	0011883a 	mov	r8,zero
  80bec4:	0005883a 	mov	r2,zero
  80bec8:	003f0f06 	br	80bb08 <__alt_mem_onchip_mem+0xff78bb08>
  80becc:	217ff804 	addi	r5,r4,-32
  80bed0:	00800804 	movi	r2,32
  80bed4:	494ad83a 	srl	r5,r9,r5
  80bed8:	20807d26 	beq	r4,r2,80c0d0 <__adddf3+0x7e8>
  80bedc:	00801004 	movi	r2,64
  80bee0:	1109c83a 	sub	r4,r2,r4
  80bee4:	4912983a 	sll	r9,r9,r4
  80bee8:	498cb03a 	or	r6,r9,r6
  80beec:	300cc03a 	cmpne	r6,r6,zero
  80bef0:	298ab03a 	or	r5,r5,r6
  80bef4:	0013883a 	mov	r9,zero
  80bef8:	003f1506 	br	80bb50 <__alt_mem_onchip_mem+0xff78bb50>
  80befc:	0101ffc4 	movi	r4,2047
  80bf00:	113f9a1e 	bne	r2,r4,80bd6c <__alt_mem_onchip_mem+0xff78bd6c>
  80bf04:	4811883a 	mov	r8,r9
  80bf08:	3023883a 	mov	r17,r6
  80bf0c:	1021883a 	mov	r16,r2
  80bf10:	3825883a 	mov	r18,r7
  80bf14:	003e9306 	br	80b964 <__alt_mem_onchip_mem+0xff78b964>
  80bf18:	8000161e 	bne	r16,zero,80bf74 <__adddf3+0x68c>
  80bf1c:	444ab03a 	or	r5,r8,r17
  80bf20:	28005126 	beq	r5,zero,80c068 <__adddf3+0x780>
  80bf24:	0108303a 	nor	r4,zero,r4
  80bf28:	20004d1e 	bne	r4,zero,80c060 <__adddf3+0x778>
  80bf2c:	89a3883a 	add	r17,r17,r6
  80bf30:	4253883a 	add	r9,r8,r9
  80bf34:	898d803a 	cmpltu	r6,r17,r6
  80bf38:	3251883a 	add	r8,r6,r9
  80bf3c:	1021883a 	mov	r16,r2
  80bf40:	003f0806 	br	80bb64 <__alt_mem_onchip_mem+0xff78bb64>
  80bf44:	1000301e 	bne	r2,zero,80c008 <__adddf3+0x720>
  80bf48:	4984b03a 	or	r2,r9,r6
  80bf4c:	10007126 	beq	r2,zero,80c114 <__adddf3+0x82c>
  80bf50:	4811883a 	mov	r8,r9
  80bf54:	3023883a 	mov	r17,r6
  80bf58:	3825883a 	mov	r18,r7
  80bf5c:	0401ffc4 	movi	r16,2047
  80bf60:	003e8006 	br	80b964 <__alt_mem_onchip_mem+0xff78b964>
  80bf64:	4462b03a 	or	r17,r8,r17
  80bf68:	8822c03a 	cmpne	r17,r17,zero
  80bf6c:	0007883a 	mov	r3,zero
  80bf70:	003f8b06 	br	80bda0 <__alt_mem_onchip_mem+0xff78bda0>
  80bf74:	0141ffc4 	movi	r5,2047
  80bf78:	11403b26 	beq	r2,r5,80c068 <__adddf3+0x780>
  80bf7c:	0109c83a 	sub	r4,zero,r4
  80bf80:	42002034 	orhi	r8,r8,128
  80bf84:	01400e04 	movi	r5,56
  80bf88:	29006716 	blt	r5,r4,80c128 <__adddf3+0x840>
  80bf8c:	014007c4 	movi	r5,31
  80bf90:	29007016 	blt	r5,r4,80c154 <__adddf3+0x86c>
  80bf94:	01400804 	movi	r5,32
  80bf98:	290bc83a 	sub	r5,r5,r4
  80bf9c:	4154983a 	sll	r10,r8,r5
  80bfa0:	890ed83a 	srl	r7,r17,r4
  80bfa4:	894a983a 	sll	r5,r17,r5
  80bfa8:	4108d83a 	srl	r4,r8,r4
  80bfac:	51e2b03a 	or	r17,r10,r7
  80bfb0:	280ac03a 	cmpne	r5,r5,zero
  80bfb4:	8962b03a 	or	r17,r17,r5
  80bfb8:	89a3883a 	add	r17,r17,r6
  80bfbc:	2253883a 	add	r9,r4,r9
  80bfc0:	898d803a 	cmpltu	r6,r17,r6
  80bfc4:	3251883a 	add	r8,r6,r9
  80bfc8:	1021883a 	mov	r16,r2
  80bfcc:	003ee506 	br	80bb64 <__alt_mem_onchip_mem+0xff78bb64>
  80bfd0:	4984b03a 	or	r2,r9,r6
  80bfd4:	103e6326 	beq	r2,zero,80b964 <__alt_mem_onchip_mem+0xff78b964>
  80bfd8:	8987c83a 	sub	r3,r17,r6
  80bfdc:	88c9803a 	cmpltu	r4,r17,r3
  80bfe0:	4245c83a 	sub	r2,r8,r9
  80bfe4:	1105c83a 	sub	r2,r2,r4
  80bfe8:	1100202c 	andhi	r4,r2,128
  80bfec:	203ebb26 	beq	r4,zero,80badc <__alt_mem_onchip_mem+0xff78badc>
  80bff0:	3463c83a 	sub	r17,r6,r17
  80bff4:	4a07c83a 	sub	r3,r9,r8
  80bff8:	344d803a 	cmpltu	r6,r6,r17
  80bffc:	1991c83a 	sub	r8,r3,r6
  80c000:	3825883a 	mov	r18,r7
  80c004:	003e5706 	br	80b964 <__alt_mem_onchip_mem+0xff78b964>
  80c008:	4984b03a 	or	r2,r9,r6
  80c00c:	10002e26 	beq	r2,zero,80c0c8 <__adddf3+0x7e0>
  80c010:	4004d0fa 	srli	r2,r8,3
  80c014:	8822d0fa 	srli	r17,r17,3
  80c018:	4010977a 	slli	r8,r8,29
  80c01c:	10c0022c 	andhi	r3,r2,8
  80c020:	4462b03a 	or	r17,r8,r17
  80c024:	18000826 	beq	r3,zero,80c048 <__adddf3+0x760>
  80c028:	4808d0fa 	srli	r4,r9,3
  80c02c:	20c0022c 	andhi	r3,r4,8
  80c030:	1800051e 	bne	r3,zero,80c048 <__adddf3+0x760>
  80c034:	300cd0fa 	srli	r6,r6,3
  80c038:	4806977a 	slli	r3,r9,29
  80c03c:	2005883a 	mov	r2,r4
  80c040:	3825883a 	mov	r18,r7
  80c044:	19a2b03a 	or	r17,r3,r6
  80c048:	8810d77a 	srli	r8,r17,29
  80c04c:	100490fa 	slli	r2,r2,3
  80c050:	882290fa 	slli	r17,r17,3
  80c054:	0401ffc4 	movi	r16,2047
  80c058:	4090b03a 	or	r8,r8,r2
  80c05c:	003e4106 	br	80b964 <__alt_mem_onchip_mem+0xff78b964>
  80c060:	0141ffc4 	movi	r5,2047
  80c064:	117fc71e 	bne	r2,r5,80bf84 <__alt_mem_onchip_mem+0xff78bf84>
  80c068:	4811883a 	mov	r8,r9
  80c06c:	3023883a 	mov	r17,r6
  80c070:	1021883a 	mov	r16,r2
  80c074:	003e3b06 	br	80b964 <__alt_mem_onchip_mem+0xff78b964>
  80c078:	10002f26 	beq	r2,zero,80c138 <__adddf3+0x850>
  80c07c:	4984b03a 	or	r2,r9,r6
  80c080:	10001126 	beq	r2,zero,80c0c8 <__adddf3+0x7e0>
  80c084:	4004d0fa 	srli	r2,r8,3
  80c088:	8822d0fa 	srli	r17,r17,3
  80c08c:	4010977a 	slli	r8,r8,29
  80c090:	10c0022c 	andhi	r3,r2,8
  80c094:	4462b03a 	or	r17,r8,r17
  80c098:	183feb26 	beq	r3,zero,80c048 <__alt_mem_onchip_mem+0xff78c048>
  80c09c:	4808d0fa 	srli	r4,r9,3
  80c0a0:	20c0022c 	andhi	r3,r4,8
  80c0a4:	183fe81e 	bne	r3,zero,80c048 <__alt_mem_onchip_mem+0xff78c048>
  80c0a8:	300cd0fa 	srli	r6,r6,3
  80c0ac:	4806977a 	slli	r3,r9,29
  80c0b0:	2005883a 	mov	r2,r4
  80c0b4:	19a2b03a 	or	r17,r3,r6
  80c0b8:	003fe306 	br	80c048 <__alt_mem_onchip_mem+0xff78c048>
  80c0bc:	0011883a 	mov	r8,zero
  80c0c0:	0005883a 	mov	r2,zero
  80c0c4:	003e3f06 	br	80b9c4 <__alt_mem_onchip_mem+0xff78b9c4>
  80c0c8:	0401ffc4 	movi	r16,2047
  80c0cc:	003e2506 	br	80b964 <__alt_mem_onchip_mem+0xff78b964>
  80c0d0:	0013883a 	mov	r9,zero
  80c0d4:	003f8406 	br	80bee8 <__alt_mem_onchip_mem+0xff78bee8>
  80c0d8:	0005883a 	mov	r2,zero
  80c0dc:	0007883a 	mov	r3,zero
  80c0e0:	003e8906 	br	80bb08 <__alt_mem_onchip_mem+0xff78bb08>
  80c0e4:	197ff804 	addi	r5,r3,-32
  80c0e8:	01000804 	movi	r4,32
  80c0ec:	414ad83a 	srl	r5,r8,r5
  80c0f0:	19002426 	beq	r3,r4,80c184 <__adddf3+0x89c>
  80c0f4:	01001004 	movi	r4,64
  80c0f8:	20c7c83a 	sub	r3,r4,r3
  80c0fc:	40c6983a 	sll	r3,r8,r3
  80c100:	1c46b03a 	or	r3,r3,r17
  80c104:	1806c03a 	cmpne	r3,r3,zero
  80c108:	28e2b03a 	or	r17,r5,r3
  80c10c:	0007883a 	mov	r3,zero
  80c110:	003f2306 	br	80bda0 <__alt_mem_onchip_mem+0xff78bda0>
  80c114:	0007883a 	mov	r3,zero
  80c118:	5811883a 	mov	r8,r11
  80c11c:	00bfffc4 	movi	r2,-1
  80c120:	0401ffc4 	movi	r16,2047
  80c124:	003e7806 	br	80bb08 <__alt_mem_onchip_mem+0xff78bb08>
  80c128:	4462b03a 	or	r17,r8,r17
  80c12c:	8822c03a 	cmpne	r17,r17,zero
  80c130:	0009883a 	mov	r4,zero
  80c134:	003fa006 	br	80bfb8 <__alt_mem_onchip_mem+0xff78bfb8>
  80c138:	4811883a 	mov	r8,r9
  80c13c:	3023883a 	mov	r17,r6
  80c140:	0401ffc4 	movi	r16,2047
  80c144:	003e0706 	br	80b964 <__alt_mem_onchip_mem+0xff78b964>
  80c148:	4811883a 	mov	r8,r9
  80c14c:	3023883a 	mov	r17,r6
  80c150:	003e0406 	br	80b964 <__alt_mem_onchip_mem+0xff78b964>
  80c154:	21fff804 	addi	r7,r4,-32
  80c158:	01400804 	movi	r5,32
  80c15c:	41ced83a 	srl	r7,r8,r7
  80c160:	21400a26 	beq	r4,r5,80c18c <__adddf3+0x8a4>
  80c164:	01401004 	movi	r5,64
  80c168:	2909c83a 	sub	r4,r5,r4
  80c16c:	4108983a 	sll	r4,r8,r4
  80c170:	2448b03a 	or	r4,r4,r17
  80c174:	2008c03a 	cmpne	r4,r4,zero
  80c178:	3922b03a 	or	r17,r7,r4
  80c17c:	0009883a 	mov	r4,zero
  80c180:	003f8d06 	br	80bfb8 <__alt_mem_onchip_mem+0xff78bfb8>
  80c184:	0007883a 	mov	r3,zero
  80c188:	003fdd06 	br	80c100 <__alt_mem_onchip_mem+0xff78c100>
  80c18c:	0009883a 	mov	r4,zero
  80c190:	003ff706 	br	80c170 <__alt_mem_onchip_mem+0xff78c170>

0080c194 <__divdf3>:
  80c194:	defff204 	addi	sp,sp,-56
  80c198:	dd400915 	stw	r21,36(sp)
  80c19c:	282ad53a 	srli	r21,r5,20
  80c1a0:	dd000815 	stw	r20,32(sp)
  80c1a4:	2828d7fa 	srli	r20,r5,31
  80c1a8:	dc000415 	stw	r16,16(sp)
  80c1ac:	04000434 	movhi	r16,16
  80c1b0:	df000c15 	stw	fp,48(sp)
  80c1b4:	843fffc4 	addi	r16,r16,-1
  80c1b8:	dfc00d15 	stw	ra,52(sp)
  80c1bc:	ddc00b15 	stw	r23,44(sp)
  80c1c0:	dd800a15 	stw	r22,40(sp)
  80c1c4:	dcc00715 	stw	r19,28(sp)
  80c1c8:	dc800615 	stw	r18,24(sp)
  80c1cc:	dc400515 	stw	r17,20(sp)
  80c1d0:	ad41ffcc 	andi	r21,r21,2047
  80c1d4:	2c20703a 	and	r16,r5,r16
  80c1d8:	a7003fcc 	andi	fp,r20,255
  80c1dc:	a8006126 	beq	r21,zero,80c364 <__divdf3+0x1d0>
  80c1e0:	0081ffc4 	movi	r2,2047
  80c1e4:	2025883a 	mov	r18,r4
  80c1e8:	a8803726 	beq	r21,r2,80c2c8 <__divdf3+0x134>
  80c1ec:	80800434 	orhi	r2,r16,16
  80c1f0:	100490fa 	slli	r2,r2,3
  80c1f4:	2020d77a 	srli	r16,r4,29
  80c1f8:	202490fa 	slli	r18,r4,3
  80c1fc:	ad7f0044 	addi	r21,r21,-1023
  80c200:	80a0b03a 	or	r16,r16,r2
  80c204:	0027883a 	mov	r19,zero
  80c208:	0013883a 	mov	r9,zero
  80c20c:	3804d53a 	srli	r2,r7,20
  80c210:	382cd7fa 	srli	r22,r7,31
  80c214:	04400434 	movhi	r17,16
  80c218:	8c7fffc4 	addi	r17,r17,-1
  80c21c:	1081ffcc 	andi	r2,r2,2047
  80c220:	3011883a 	mov	r8,r6
  80c224:	3c62703a 	and	r17,r7,r17
  80c228:	b5c03fcc 	andi	r23,r22,255
  80c22c:	10006c26 	beq	r2,zero,80c3e0 <__divdf3+0x24c>
  80c230:	00c1ffc4 	movi	r3,2047
  80c234:	10c06426 	beq	r2,r3,80c3c8 <__divdf3+0x234>
  80c238:	88c00434 	orhi	r3,r17,16
  80c23c:	180690fa 	slli	r3,r3,3
  80c240:	3022d77a 	srli	r17,r6,29
  80c244:	301090fa 	slli	r8,r6,3
  80c248:	10bf0044 	addi	r2,r2,-1023
  80c24c:	88e2b03a 	or	r17,r17,r3
  80c250:	000f883a 	mov	r7,zero
  80c254:	a58cf03a 	xor	r6,r20,r22
  80c258:	3cc8b03a 	or	r4,r7,r19
  80c25c:	a8abc83a 	sub	r21,r21,r2
  80c260:	008003c4 	movi	r2,15
  80c264:	3007883a 	mov	r3,r6
  80c268:	34c03fcc 	andi	r19,r6,255
  80c26c:	11009036 	bltu	r2,r4,80c4b0 <__divdf3+0x31c>
  80c270:	200890ba 	slli	r4,r4,2
  80c274:	00802074 	movhi	r2,129
  80c278:	10b0a204 	addi	r2,r2,-15736
  80c27c:	2089883a 	add	r4,r4,r2
  80c280:	20800017 	ldw	r2,0(r4)
  80c284:	1000683a 	jmp	r2
  80c288:	0080c4b0 	cmpltui	r2,zero,786
  80c28c:	0080c300 	call	80c30 <__alt_mem_sdram-0x77f3d0>
  80c290:	0080c4a0 	cmpeqi	r2,zero,786
  80c294:	0080c2f4 	movhi	r2,779
  80c298:	0080c4a0 	cmpeqi	r2,zero,786
  80c29c:	0080c474 	movhi	r2,785
  80c2a0:	0080c4a0 	cmpeqi	r2,zero,786
  80c2a4:	0080c2f4 	movhi	r2,779
  80c2a8:	0080c300 	call	80c30 <__alt_mem_sdram-0x77f3d0>
  80c2ac:	0080c300 	call	80c30 <__alt_mem_sdram-0x77f3d0>
  80c2b0:	0080c474 	movhi	r2,785
  80c2b4:	0080c2f4 	movhi	r2,779
  80c2b8:	0080c2e4 	muli	r2,zero,779
  80c2bc:	0080c2e4 	muli	r2,zero,779
  80c2c0:	0080c2e4 	muli	r2,zero,779
  80c2c4:	0080c794 	movui	r2,798
  80c2c8:	2404b03a 	or	r2,r4,r16
  80c2cc:	1000661e 	bne	r2,zero,80c468 <__divdf3+0x2d4>
  80c2d0:	04c00204 	movi	r19,8
  80c2d4:	0021883a 	mov	r16,zero
  80c2d8:	0025883a 	mov	r18,zero
  80c2dc:	02400084 	movi	r9,2
  80c2e0:	003fca06 	br	80c20c <__alt_mem_onchip_mem+0xff78c20c>
  80c2e4:	8023883a 	mov	r17,r16
  80c2e8:	9011883a 	mov	r8,r18
  80c2ec:	e02f883a 	mov	r23,fp
  80c2f0:	480f883a 	mov	r7,r9
  80c2f4:	00800084 	movi	r2,2
  80c2f8:	3881311e 	bne	r7,r2,80c7c0 <__divdf3+0x62c>
  80c2fc:	b827883a 	mov	r19,r23
  80c300:	98c0004c 	andi	r3,r19,1
  80c304:	0081ffc4 	movi	r2,2047
  80c308:	000b883a 	mov	r5,zero
  80c30c:	0025883a 	mov	r18,zero
  80c310:	1004953a 	slli	r2,r2,20
  80c314:	18c03fcc 	andi	r3,r3,255
  80c318:	04400434 	movhi	r17,16
  80c31c:	8c7fffc4 	addi	r17,r17,-1
  80c320:	180697fa 	slli	r3,r3,31
  80c324:	2c4a703a 	and	r5,r5,r17
  80c328:	288ab03a 	or	r5,r5,r2
  80c32c:	28c6b03a 	or	r3,r5,r3
  80c330:	9005883a 	mov	r2,r18
  80c334:	dfc00d17 	ldw	ra,52(sp)
  80c338:	df000c17 	ldw	fp,48(sp)
  80c33c:	ddc00b17 	ldw	r23,44(sp)
  80c340:	dd800a17 	ldw	r22,40(sp)
  80c344:	dd400917 	ldw	r21,36(sp)
  80c348:	dd000817 	ldw	r20,32(sp)
  80c34c:	dcc00717 	ldw	r19,28(sp)
  80c350:	dc800617 	ldw	r18,24(sp)
  80c354:	dc400517 	ldw	r17,20(sp)
  80c358:	dc000417 	ldw	r16,16(sp)
  80c35c:	dec00e04 	addi	sp,sp,56
  80c360:	f800283a 	ret
  80c364:	2404b03a 	or	r2,r4,r16
  80c368:	2027883a 	mov	r19,r4
  80c36c:	10003926 	beq	r2,zero,80c454 <__divdf3+0x2c0>
  80c370:	80012e26 	beq	r16,zero,80c82c <__divdf3+0x698>
  80c374:	8009883a 	mov	r4,r16
  80c378:	d9800315 	stw	r6,12(sp)
  80c37c:	d9c00215 	stw	r7,8(sp)
  80c380:	080deec0 	call	80deec <__clzsi2>
  80c384:	d9800317 	ldw	r6,12(sp)
  80c388:	d9c00217 	ldw	r7,8(sp)
  80c38c:	113ffd44 	addi	r4,r2,-11
  80c390:	00c00704 	movi	r3,28
  80c394:	19012116 	blt	r3,r4,80c81c <__divdf3+0x688>
  80c398:	00c00744 	movi	r3,29
  80c39c:	147ffe04 	addi	r17,r2,-8
  80c3a0:	1907c83a 	sub	r3,r3,r4
  80c3a4:	8460983a 	sll	r16,r16,r17
  80c3a8:	98c6d83a 	srl	r3,r19,r3
  80c3ac:	9c64983a 	sll	r18,r19,r17
  80c3b0:	1c20b03a 	or	r16,r3,r16
  80c3b4:	1080fcc4 	addi	r2,r2,1011
  80c3b8:	00abc83a 	sub	r21,zero,r2
  80c3bc:	0027883a 	mov	r19,zero
  80c3c0:	0013883a 	mov	r9,zero
  80c3c4:	003f9106 	br	80c20c <__alt_mem_onchip_mem+0xff78c20c>
  80c3c8:	3446b03a 	or	r3,r6,r17
  80c3cc:	18001f1e 	bne	r3,zero,80c44c <__divdf3+0x2b8>
  80c3d0:	0023883a 	mov	r17,zero
  80c3d4:	0011883a 	mov	r8,zero
  80c3d8:	01c00084 	movi	r7,2
  80c3dc:	003f9d06 	br	80c254 <__alt_mem_onchip_mem+0xff78c254>
  80c3e0:	3446b03a 	or	r3,r6,r17
  80c3e4:	18001526 	beq	r3,zero,80c43c <__divdf3+0x2a8>
  80c3e8:	88011b26 	beq	r17,zero,80c858 <__divdf3+0x6c4>
  80c3ec:	8809883a 	mov	r4,r17
  80c3f0:	d9800315 	stw	r6,12(sp)
  80c3f4:	da400115 	stw	r9,4(sp)
  80c3f8:	080deec0 	call	80deec <__clzsi2>
  80c3fc:	d9800317 	ldw	r6,12(sp)
  80c400:	da400117 	ldw	r9,4(sp)
  80c404:	113ffd44 	addi	r4,r2,-11
  80c408:	00c00704 	movi	r3,28
  80c40c:	19010e16 	blt	r3,r4,80c848 <__divdf3+0x6b4>
  80c410:	00c00744 	movi	r3,29
  80c414:	123ffe04 	addi	r8,r2,-8
  80c418:	1907c83a 	sub	r3,r3,r4
  80c41c:	8a22983a 	sll	r17,r17,r8
  80c420:	30c6d83a 	srl	r3,r6,r3
  80c424:	3210983a 	sll	r8,r6,r8
  80c428:	1c62b03a 	or	r17,r3,r17
  80c42c:	1080fcc4 	addi	r2,r2,1011
  80c430:	0085c83a 	sub	r2,zero,r2
  80c434:	000f883a 	mov	r7,zero
  80c438:	003f8606 	br	80c254 <__alt_mem_onchip_mem+0xff78c254>
  80c43c:	0023883a 	mov	r17,zero
  80c440:	0011883a 	mov	r8,zero
  80c444:	01c00044 	movi	r7,1
  80c448:	003f8206 	br	80c254 <__alt_mem_onchip_mem+0xff78c254>
  80c44c:	01c000c4 	movi	r7,3
  80c450:	003f8006 	br	80c254 <__alt_mem_onchip_mem+0xff78c254>
  80c454:	04c00104 	movi	r19,4
  80c458:	0021883a 	mov	r16,zero
  80c45c:	0025883a 	mov	r18,zero
  80c460:	02400044 	movi	r9,1
  80c464:	003f6906 	br	80c20c <__alt_mem_onchip_mem+0xff78c20c>
  80c468:	04c00304 	movi	r19,12
  80c46c:	024000c4 	movi	r9,3
  80c470:	003f6606 	br	80c20c <__alt_mem_onchip_mem+0xff78c20c>
  80c474:	01400434 	movhi	r5,16
  80c478:	0007883a 	mov	r3,zero
  80c47c:	297fffc4 	addi	r5,r5,-1
  80c480:	04bfffc4 	movi	r18,-1
  80c484:	0081ffc4 	movi	r2,2047
  80c488:	003fa106 	br	80c310 <__alt_mem_onchip_mem+0xff78c310>
  80c48c:	00c00044 	movi	r3,1
  80c490:	1887c83a 	sub	r3,r3,r2
  80c494:	01000e04 	movi	r4,56
  80c498:	20c1210e 	bge	r4,r3,80c920 <__divdf3+0x78c>
  80c49c:	98c0004c 	andi	r3,r19,1
  80c4a0:	0005883a 	mov	r2,zero
  80c4a4:	000b883a 	mov	r5,zero
  80c4a8:	0025883a 	mov	r18,zero
  80c4ac:	003f9806 	br	80c310 <__alt_mem_onchip_mem+0xff78c310>
  80c4b0:	8c00fd36 	bltu	r17,r16,80c8a8 <__divdf3+0x714>
  80c4b4:	8440fb26 	beq	r16,r17,80c8a4 <__divdf3+0x710>
  80c4b8:	8007883a 	mov	r3,r16
  80c4bc:	ad7fffc4 	addi	r21,r21,-1
  80c4c0:	0021883a 	mov	r16,zero
  80c4c4:	4004d63a 	srli	r2,r8,24
  80c4c8:	8822923a 	slli	r17,r17,8
  80c4cc:	1809883a 	mov	r4,r3
  80c4d0:	402c923a 	slli	r22,r8,8
  80c4d4:	88b8b03a 	or	fp,r17,r2
  80c4d8:	e028d43a 	srli	r20,fp,16
  80c4dc:	d8c00015 	stw	r3,0(sp)
  80c4e0:	e5ffffcc 	andi	r23,fp,65535
  80c4e4:	a00b883a 	mov	r5,r20
  80c4e8:	080b82c0 	call	80b82c <__udivsi3>
  80c4ec:	d8c00017 	ldw	r3,0(sp)
  80c4f0:	a00b883a 	mov	r5,r20
  80c4f4:	d8800315 	stw	r2,12(sp)
  80c4f8:	1809883a 	mov	r4,r3
  80c4fc:	080b8900 	call	80b890 <__umodsi3>
  80c500:	d9800317 	ldw	r6,12(sp)
  80c504:	1006943a 	slli	r3,r2,16
  80c508:	9004d43a 	srli	r2,r18,16
  80c50c:	b9a3383a 	mul	r17,r23,r6
  80c510:	10c4b03a 	or	r2,r2,r3
  80c514:	1440062e 	bgeu	r2,r17,80c530 <__divdf3+0x39c>
  80c518:	1705883a 	add	r2,r2,fp
  80c51c:	30ffffc4 	addi	r3,r6,-1
  80c520:	1700ee36 	bltu	r2,fp,80c8dc <__divdf3+0x748>
  80c524:	1440ed2e 	bgeu	r2,r17,80c8dc <__divdf3+0x748>
  80c528:	31bfff84 	addi	r6,r6,-2
  80c52c:	1705883a 	add	r2,r2,fp
  80c530:	1463c83a 	sub	r17,r2,r17
  80c534:	a00b883a 	mov	r5,r20
  80c538:	8809883a 	mov	r4,r17
  80c53c:	d9800315 	stw	r6,12(sp)
  80c540:	080b82c0 	call	80b82c <__udivsi3>
  80c544:	a00b883a 	mov	r5,r20
  80c548:	8809883a 	mov	r4,r17
  80c54c:	d8800215 	stw	r2,8(sp)
  80c550:	080b8900 	call	80b890 <__umodsi3>
  80c554:	d9c00217 	ldw	r7,8(sp)
  80c558:	1004943a 	slli	r2,r2,16
  80c55c:	94bfffcc 	andi	r18,r18,65535
  80c560:	b9d1383a 	mul	r8,r23,r7
  80c564:	90a4b03a 	or	r18,r18,r2
  80c568:	d9800317 	ldw	r6,12(sp)
  80c56c:	9200062e 	bgeu	r18,r8,80c588 <__divdf3+0x3f4>
  80c570:	9725883a 	add	r18,r18,fp
  80c574:	38bfffc4 	addi	r2,r7,-1
  80c578:	9700d636 	bltu	r18,fp,80c8d4 <__divdf3+0x740>
  80c57c:	9200d52e 	bgeu	r18,r8,80c8d4 <__divdf3+0x740>
  80c580:	39ffff84 	addi	r7,r7,-2
  80c584:	9725883a 	add	r18,r18,fp
  80c588:	3004943a 	slli	r2,r6,16
  80c58c:	b012d43a 	srli	r9,r22,16
  80c590:	b1bfffcc 	andi	r6,r22,65535
  80c594:	11e2b03a 	or	r17,r2,r7
  80c598:	8806d43a 	srli	r3,r17,16
  80c59c:	893fffcc 	andi	r4,r17,65535
  80c5a0:	218b383a 	mul	r5,r4,r6
  80c5a4:	30c5383a 	mul	r2,r6,r3
  80c5a8:	2249383a 	mul	r4,r4,r9
  80c5ac:	280ed43a 	srli	r7,r5,16
  80c5b0:	9225c83a 	sub	r18,r18,r8
  80c5b4:	2089883a 	add	r4,r4,r2
  80c5b8:	3909883a 	add	r4,r7,r4
  80c5bc:	1a47383a 	mul	r3,r3,r9
  80c5c0:	2080022e 	bgeu	r4,r2,80c5cc <__divdf3+0x438>
  80c5c4:	00800074 	movhi	r2,1
  80c5c8:	1887883a 	add	r3,r3,r2
  80c5cc:	2004d43a 	srli	r2,r4,16
  80c5d0:	2008943a 	slli	r4,r4,16
  80c5d4:	297fffcc 	andi	r5,r5,65535
  80c5d8:	10c7883a 	add	r3,r2,r3
  80c5dc:	2149883a 	add	r4,r4,r5
  80c5e0:	90c0a536 	bltu	r18,r3,80c878 <__divdf3+0x6e4>
  80c5e4:	90c0bf26 	beq	r18,r3,80c8e4 <__divdf3+0x750>
  80c5e8:	90c7c83a 	sub	r3,r18,r3
  80c5ec:	810fc83a 	sub	r7,r16,r4
  80c5f0:	81e5803a 	cmpltu	r18,r16,r7
  80c5f4:	1ca5c83a 	sub	r18,r3,r18
  80c5f8:	e480c126 	beq	fp,r18,80c900 <__divdf3+0x76c>
  80c5fc:	a00b883a 	mov	r5,r20
  80c600:	9009883a 	mov	r4,r18
  80c604:	d9800315 	stw	r6,12(sp)
  80c608:	d9c00215 	stw	r7,8(sp)
  80c60c:	da400115 	stw	r9,4(sp)
  80c610:	080b82c0 	call	80b82c <__udivsi3>
  80c614:	a00b883a 	mov	r5,r20
  80c618:	9009883a 	mov	r4,r18
  80c61c:	d8800015 	stw	r2,0(sp)
  80c620:	080b8900 	call	80b890 <__umodsi3>
  80c624:	d9c00217 	ldw	r7,8(sp)
  80c628:	da000017 	ldw	r8,0(sp)
  80c62c:	1006943a 	slli	r3,r2,16
  80c630:	3804d43a 	srli	r2,r7,16
  80c634:	ba21383a 	mul	r16,r23,r8
  80c638:	d9800317 	ldw	r6,12(sp)
  80c63c:	10c4b03a 	or	r2,r2,r3
  80c640:	da400117 	ldw	r9,4(sp)
  80c644:	1400062e 	bgeu	r2,r16,80c660 <__divdf3+0x4cc>
  80c648:	1705883a 	add	r2,r2,fp
  80c64c:	40ffffc4 	addi	r3,r8,-1
  80c650:	1700ad36 	bltu	r2,fp,80c908 <__divdf3+0x774>
  80c654:	1400ac2e 	bgeu	r2,r16,80c908 <__divdf3+0x774>
  80c658:	423fff84 	addi	r8,r8,-2
  80c65c:	1705883a 	add	r2,r2,fp
  80c660:	1421c83a 	sub	r16,r2,r16
  80c664:	a00b883a 	mov	r5,r20
  80c668:	8009883a 	mov	r4,r16
  80c66c:	d9800315 	stw	r6,12(sp)
  80c670:	d9c00215 	stw	r7,8(sp)
  80c674:	da000015 	stw	r8,0(sp)
  80c678:	da400115 	stw	r9,4(sp)
  80c67c:	080b82c0 	call	80b82c <__udivsi3>
  80c680:	8009883a 	mov	r4,r16
  80c684:	a00b883a 	mov	r5,r20
  80c688:	1025883a 	mov	r18,r2
  80c68c:	080b8900 	call	80b890 <__umodsi3>
  80c690:	d9c00217 	ldw	r7,8(sp)
  80c694:	1004943a 	slli	r2,r2,16
  80c698:	bcaf383a 	mul	r23,r23,r18
  80c69c:	393fffcc 	andi	r4,r7,65535
  80c6a0:	2088b03a 	or	r4,r4,r2
  80c6a4:	d9800317 	ldw	r6,12(sp)
  80c6a8:	da000017 	ldw	r8,0(sp)
  80c6ac:	da400117 	ldw	r9,4(sp)
  80c6b0:	25c0062e 	bgeu	r4,r23,80c6cc <__divdf3+0x538>
  80c6b4:	2709883a 	add	r4,r4,fp
  80c6b8:	90bfffc4 	addi	r2,r18,-1
  80c6bc:	27009436 	bltu	r4,fp,80c910 <__divdf3+0x77c>
  80c6c0:	25c0932e 	bgeu	r4,r23,80c910 <__divdf3+0x77c>
  80c6c4:	94bfff84 	addi	r18,r18,-2
  80c6c8:	2709883a 	add	r4,r4,fp
  80c6cc:	4004943a 	slli	r2,r8,16
  80c6d0:	25efc83a 	sub	r23,r4,r23
  80c6d4:	1490b03a 	or	r8,r2,r18
  80c6d8:	4008d43a 	srli	r4,r8,16
  80c6dc:	40ffffcc 	andi	r3,r8,65535
  80c6e0:	30c5383a 	mul	r2,r6,r3
  80c6e4:	1a47383a 	mul	r3,r3,r9
  80c6e8:	310d383a 	mul	r6,r6,r4
  80c6ec:	100ad43a 	srli	r5,r2,16
  80c6f0:	4913383a 	mul	r9,r9,r4
  80c6f4:	1987883a 	add	r3,r3,r6
  80c6f8:	28c7883a 	add	r3,r5,r3
  80c6fc:	1980022e 	bgeu	r3,r6,80c708 <__divdf3+0x574>
  80c700:	01000074 	movhi	r4,1
  80c704:	4913883a 	add	r9,r9,r4
  80c708:	1808d43a 	srli	r4,r3,16
  80c70c:	1806943a 	slli	r3,r3,16
  80c710:	10bfffcc 	andi	r2,r2,65535
  80c714:	2253883a 	add	r9,r4,r9
  80c718:	1887883a 	add	r3,r3,r2
  80c71c:	ba403836 	bltu	r23,r9,80c800 <__divdf3+0x66c>
  80c720:	ba403626 	beq	r23,r9,80c7fc <__divdf3+0x668>
  80c724:	42000054 	ori	r8,r8,1
  80c728:	a880ffc4 	addi	r2,r21,1023
  80c72c:	00bf570e 	bge	zero,r2,80c48c <__alt_mem_onchip_mem+0xff78c48c>
  80c730:	40c001cc 	andi	r3,r8,7
  80c734:	18000726 	beq	r3,zero,80c754 <__divdf3+0x5c0>
  80c738:	40c003cc 	andi	r3,r8,15
  80c73c:	01000104 	movi	r4,4
  80c740:	19000426 	beq	r3,r4,80c754 <__divdf3+0x5c0>
  80c744:	4107883a 	add	r3,r8,r4
  80c748:	1a11803a 	cmpltu	r8,r3,r8
  80c74c:	8a23883a 	add	r17,r17,r8
  80c750:	1811883a 	mov	r8,r3
  80c754:	88c0402c 	andhi	r3,r17,256
  80c758:	18000426 	beq	r3,zero,80c76c <__divdf3+0x5d8>
  80c75c:	00ffc034 	movhi	r3,65280
  80c760:	18ffffc4 	addi	r3,r3,-1
  80c764:	a8810004 	addi	r2,r21,1024
  80c768:	88e2703a 	and	r17,r17,r3
  80c76c:	00c1ff84 	movi	r3,2046
  80c770:	18bee316 	blt	r3,r2,80c300 <__alt_mem_onchip_mem+0xff78c300>
  80c774:	8824977a 	slli	r18,r17,29
  80c778:	4010d0fa 	srli	r8,r8,3
  80c77c:	8822927a 	slli	r17,r17,9
  80c780:	1081ffcc 	andi	r2,r2,2047
  80c784:	9224b03a 	or	r18,r18,r8
  80c788:	880ad33a 	srli	r5,r17,12
  80c78c:	98c0004c 	andi	r3,r19,1
  80c790:	003edf06 	br	80c310 <__alt_mem_onchip_mem+0xff78c310>
  80c794:	8080022c 	andhi	r2,r16,8
  80c798:	10001226 	beq	r2,zero,80c7e4 <__divdf3+0x650>
  80c79c:	8880022c 	andhi	r2,r17,8
  80c7a0:	1000101e 	bne	r2,zero,80c7e4 <__divdf3+0x650>
  80c7a4:	00800434 	movhi	r2,16
  80c7a8:	89400234 	orhi	r5,r17,8
  80c7ac:	10bfffc4 	addi	r2,r2,-1
  80c7b0:	b007883a 	mov	r3,r22
  80c7b4:	288a703a 	and	r5,r5,r2
  80c7b8:	4025883a 	mov	r18,r8
  80c7bc:	003f3106 	br	80c484 <__alt_mem_onchip_mem+0xff78c484>
  80c7c0:	008000c4 	movi	r2,3
  80c7c4:	3880a626 	beq	r7,r2,80ca60 <__divdf3+0x8cc>
  80c7c8:	00800044 	movi	r2,1
  80c7cc:	3880521e 	bne	r7,r2,80c918 <__divdf3+0x784>
  80c7d0:	b807883a 	mov	r3,r23
  80c7d4:	0005883a 	mov	r2,zero
  80c7d8:	000b883a 	mov	r5,zero
  80c7dc:	0025883a 	mov	r18,zero
  80c7e0:	003ecb06 	br	80c310 <__alt_mem_onchip_mem+0xff78c310>
  80c7e4:	00800434 	movhi	r2,16
  80c7e8:	81400234 	orhi	r5,r16,8
  80c7ec:	10bfffc4 	addi	r2,r2,-1
  80c7f0:	a007883a 	mov	r3,r20
  80c7f4:	288a703a 	and	r5,r5,r2
  80c7f8:	003f2206 	br	80c484 <__alt_mem_onchip_mem+0xff78c484>
  80c7fc:	183fca26 	beq	r3,zero,80c728 <__alt_mem_onchip_mem+0xff78c728>
  80c800:	e5ef883a 	add	r23,fp,r23
  80c804:	40bfffc4 	addi	r2,r8,-1
  80c808:	bf00392e 	bgeu	r23,fp,80c8f0 <__divdf3+0x75c>
  80c80c:	1011883a 	mov	r8,r2
  80c810:	ba7fc41e 	bne	r23,r9,80c724 <__alt_mem_onchip_mem+0xff78c724>
  80c814:	b0ffc31e 	bne	r22,r3,80c724 <__alt_mem_onchip_mem+0xff78c724>
  80c818:	003fc306 	br	80c728 <__alt_mem_onchip_mem+0xff78c728>
  80c81c:	143ff604 	addi	r16,r2,-40
  80c820:	9c20983a 	sll	r16,r19,r16
  80c824:	0025883a 	mov	r18,zero
  80c828:	003ee206 	br	80c3b4 <__alt_mem_onchip_mem+0xff78c3b4>
  80c82c:	d9800315 	stw	r6,12(sp)
  80c830:	d9c00215 	stw	r7,8(sp)
  80c834:	080deec0 	call	80deec <__clzsi2>
  80c838:	10800804 	addi	r2,r2,32
  80c83c:	d9c00217 	ldw	r7,8(sp)
  80c840:	d9800317 	ldw	r6,12(sp)
  80c844:	003ed106 	br	80c38c <__alt_mem_onchip_mem+0xff78c38c>
  80c848:	147ff604 	addi	r17,r2,-40
  80c84c:	3462983a 	sll	r17,r6,r17
  80c850:	0011883a 	mov	r8,zero
  80c854:	003ef506 	br	80c42c <__alt_mem_onchip_mem+0xff78c42c>
  80c858:	3009883a 	mov	r4,r6
  80c85c:	d9800315 	stw	r6,12(sp)
  80c860:	da400115 	stw	r9,4(sp)
  80c864:	080deec0 	call	80deec <__clzsi2>
  80c868:	10800804 	addi	r2,r2,32
  80c86c:	da400117 	ldw	r9,4(sp)
  80c870:	d9800317 	ldw	r6,12(sp)
  80c874:	003ee306 	br	80c404 <__alt_mem_onchip_mem+0xff78c404>
  80c878:	85a1883a 	add	r16,r16,r22
  80c87c:	8585803a 	cmpltu	r2,r16,r22
  80c880:	1705883a 	add	r2,r2,fp
  80c884:	14a5883a 	add	r18,r2,r18
  80c888:	88bfffc4 	addi	r2,r17,-1
  80c88c:	e4800c2e 	bgeu	fp,r18,80c8c0 <__divdf3+0x72c>
  80c890:	90c03e36 	bltu	r18,r3,80c98c <__divdf3+0x7f8>
  80c894:	1c806926 	beq	r3,r18,80ca3c <__divdf3+0x8a8>
  80c898:	90c7c83a 	sub	r3,r18,r3
  80c89c:	1023883a 	mov	r17,r2
  80c8a0:	003f5206 	br	80c5ec <__alt_mem_onchip_mem+0xff78c5ec>
  80c8a4:	923f0436 	bltu	r18,r8,80c4b8 <__alt_mem_onchip_mem+0xff78c4b8>
  80c8a8:	800897fa 	slli	r4,r16,31
  80c8ac:	9004d07a 	srli	r2,r18,1
  80c8b0:	8006d07a 	srli	r3,r16,1
  80c8b4:	902097fa 	slli	r16,r18,31
  80c8b8:	20a4b03a 	or	r18,r4,r2
  80c8bc:	003f0106 	br	80c4c4 <__alt_mem_onchip_mem+0xff78c4c4>
  80c8c0:	e4bff51e 	bne	fp,r18,80c898 <__alt_mem_onchip_mem+0xff78c898>
  80c8c4:	85bff22e 	bgeu	r16,r22,80c890 <__alt_mem_onchip_mem+0xff78c890>
  80c8c8:	e0c7c83a 	sub	r3,fp,r3
  80c8cc:	1023883a 	mov	r17,r2
  80c8d0:	003f4606 	br	80c5ec <__alt_mem_onchip_mem+0xff78c5ec>
  80c8d4:	100f883a 	mov	r7,r2
  80c8d8:	003f2b06 	br	80c588 <__alt_mem_onchip_mem+0xff78c588>
  80c8dc:	180d883a 	mov	r6,r3
  80c8e0:	003f1306 	br	80c530 <__alt_mem_onchip_mem+0xff78c530>
  80c8e4:	813fe436 	bltu	r16,r4,80c878 <__alt_mem_onchip_mem+0xff78c878>
  80c8e8:	0007883a 	mov	r3,zero
  80c8ec:	003f3f06 	br	80c5ec <__alt_mem_onchip_mem+0xff78c5ec>
  80c8f0:	ba402c36 	bltu	r23,r9,80c9a4 <__divdf3+0x810>
  80c8f4:	4dc05426 	beq	r9,r23,80ca48 <__divdf3+0x8b4>
  80c8f8:	1011883a 	mov	r8,r2
  80c8fc:	003f8906 	br	80c724 <__alt_mem_onchip_mem+0xff78c724>
  80c900:	023fffc4 	movi	r8,-1
  80c904:	003f8806 	br	80c728 <__alt_mem_onchip_mem+0xff78c728>
  80c908:	1811883a 	mov	r8,r3
  80c90c:	003f5406 	br	80c660 <__alt_mem_onchip_mem+0xff78c660>
  80c910:	1025883a 	mov	r18,r2
  80c914:	003f6d06 	br	80c6cc <__alt_mem_onchip_mem+0xff78c6cc>
  80c918:	b827883a 	mov	r19,r23
  80c91c:	003f8206 	br	80c728 <__alt_mem_onchip_mem+0xff78c728>
  80c920:	010007c4 	movi	r4,31
  80c924:	20c02616 	blt	r4,r3,80c9c0 <__divdf3+0x82c>
  80c928:	00800804 	movi	r2,32
  80c92c:	10c5c83a 	sub	r2,r2,r3
  80c930:	888a983a 	sll	r5,r17,r2
  80c934:	40c8d83a 	srl	r4,r8,r3
  80c938:	4084983a 	sll	r2,r8,r2
  80c93c:	88e2d83a 	srl	r17,r17,r3
  80c940:	2906b03a 	or	r3,r5,r4
  80c944:	1004c03a 	cmpne	r2,r2,zero
  80c948:	1886b03a 	or	r3,r3,r2
  80c94c:	188001cc 	andi	r2,r3,7
  80c950:	10000726 	beq	r2,zero,80c970 <__divdf3+0x7dc>
  80c954:	188003cc 	andi	r2,r3,15
  80c958:	01000104 	movi	r4,4
  80c95c:	11000426 	beq	r2,r4,80c970 <__divdf3+0x7dc>
  80c960:	1805883a 	mov	r2,r3
  80c964:	10c00104 	addi	r3,r2,4
  80c968:	1885803a 	cmpltu	r2,r3,r2
  80c96c:	88a3883a 	add	r17,r17,r2
  80c970:	8880202c 	andhi	r2,r17,128
  80c974:	10002726 	beq	r2,zero,80ca14 <__divdf3+0x880>
  80c978:	98c0004c 	andi	r3,r19,1
  80c97c:	00800044 	movi	r2,1
  80c980:	000b883a 	mov	r5,zero
  80c984:	0025883a 	mov	r18,zero
  80c988:	003e6106 	br	80c310 <__alt_mem_onchip_mem+0xff78c310>
  80c98c:	85a1883a 	add	r16,r16,r22
  80c990:	8585803a 	cmpltu	r2,r16,r22
  80c994:	1705883a 	add	r2,r2,fp
  80c998:	14a5883a 	add	r18,r2,r18
  80c99c:	8c7fff84 	addi	r17,r17,-2
  80c9a0:	003f1106 	br	80c5e8 <__alt_mem_onchip_mem+0xff78c5e8>
  80c9a4:	b589883a 	add	r4,r22,r22
  80c9a8:	25ad803a 	cmpltu	r22,r4,r22
  80c9ac:	b739883a 	add	fp,r22,fp
  80c9b0:	40bfff84 	addi	r2,r8,-2
  80c9b4:	bf2f883a 	add	r23,r23,fp
  80c9b8:	202d883a 	mov	r22,r4
  80c9bc:	003f9306 	br	80c80c <__alt_mem_onchip_mem+0xff78c80c>
  80c9c0:	013ff844 	movi	r4,-31
  80c9c4:	2085c83a 	sub	r2,r4,r2
  80c9c8:	8888d83a 	srl	r4,r17,r2
  80c9cc:	00800804 	movi	r2,32
  80c9d0:	18802126 	beq	r3,r2,80ca58 <__divdf3+0x8c4>
  80c9d4:	00801004 	movi	r2,64
  80c9d8:	10c5c83a 	sub	r2,r2,r3
  80c9dc:	8884983a 	sll	r2,r17,r2
  80c9e0:	1204b03a 	or	r2,r2,r8
  80c9e4:	1004c03a 	cmpne	r2,r2,zero
  80c9e8:	2084b03a 	or	r2,r4,r2
  80c9ec:	144001cc 	andi	r17,r2,7
  80c9f0:	88000d1e 	bne	r17,zero,80ca28 <__divdf3+0x894>
  80c9f4:	000b883a 	mov	r5,zero
  80c9f8:	1024d0fa 	srli	r18,r2,3
  80c9fc:	98c0004c 	andi	r3,r19,1
  80ca00:	0005883a 	mov	r2,zero
  80ca04:	9464b03a 	or	r18,r18,r17
  80ca08:	003e4106 	br	80c310 <__alt_mem_onchip_mem+0xff78c310>
  80ca0c:	1007883a 	mov	r3,r2
  80ca10:	0023883a 	mov	r17,zero
  80ca14:	880a927a 	slli	r5,r17,9
  80ca18:	1805883a 	mov	r2,r3
  80ca1c:	8822977a 	slli	r17,r17,29
  80ca20:	280ad33a 	srli	r5,r5,12
  80ca24:	003ff406 	br	80c9f8 <__alt_mem_onchip_mem+0xff78c9f8>
  80ca28:	10c003cc 	andi	r3,r2,15
  80ca2c:	01000104 	movi	r4,4
  80ca30:	193ff626 	beq	r3,r4,80ca0c <__alt_mem_onchip_mem+0xff78ca0c>
  80ca34:	0023883a 	mov	r17,zero
  80ca38:	003fca06 	br	80c964 <__alt_mem_onchip_mem+0xff78c964>
  80ca3c:	813fd336 	bltu	r16,r4,80c98c <__alt_mem_onchip_mem+0xff78c98c>
  80ca40:	1023883a 	mov	r17,r2
  80ca44:	003fa806 	br	80c8e8 <__alt_mem_onchip_mem+0xff78c8e8>
  80ca48:	b0ffd636 	bltu	r22,r3,80c9a4 <__alt_mem_onchip_mem+0xff78c9a4>
  80ca4c:	1011883a 	mov	r8,r2
  80ca50:	b0ff341e 	bne	r22,r3,80c724 <__alt_mem_onchip_mem+0xff78c724>
  80ca54:	003f3406 	br	80c728 <__alt_mem_onchip_mem+0xff78c728>
  80ca58:	0005883a 	mov	r2,zero
  80ca5c:	003fe006 	br	80c9e0 <__alt_mem_onchip_mem+0xff78c9e0>
  80ca60:	00800434 	movhi	r2,16
  80ca64:	89400234 	orhi	r5,r17,8
  80ca68:	10bfffc4 	addi	r2,r2,-1
  80ca6c:	b807883a 	mov	r3,r23
  80ca70:	288a703a 	and	r5,r5,r2
  80ca74:	4025883a 	mov	r18,r8
  80ca78:	003e8206 	br	80c484 <__alt_mem_onchip_mem+0xff78c484>

0080ca7c <__eqdf2>:
  80ca7c:	2804d53a 	srli	r2,r5,20
  80ca80:	3806d53a 	srli	r3,r7,20
  80ca84:	02000434 	movhi	r8,16
  80ca88:	423fffc4 	addi	r8,r8,-1
  80ca8c:	1081ffcc 	andi	r2,r2,2047
  80ca90:	0281ffc4 	movi	r10,2047
  80ca94:	2a12703a 	and	r9,r5,r8
  80ca98:	18c1ffcc 	andi	r3,r3,2047
  80ca9c:	3a10703a 	and	r8,r7,r8
  80caa0:	280ad7fa 	srli	r5,r5,31
  80caa4:	380ed7fa 	srli	r7,r7,31
  80caa8:	12801026 	beq	r2,r10,80caec <__eqdf2+0x70>
  80caac:	0281ffc4 	movi	r10,2047
  80cab0:	1a800a26 	beq	r3,r10,80cadc <__eqdf2+0x60>
  80cab4:	10c00226 	beq	r2,r3,80cac0 <__eqdf2+0x44>
  80cab8:	00800044 	movi	r2,1
  80cabc:	f800283a 	ret
  80cac0:	4a3ffd1e 	bne	r9,r8,80cab8 <__alt_mem_onchip_mem+0xff78cab8>
  80cac4:	21bffc1e 	bne	r4,r6,80cab8 <__alt_mem_onchip_mem+0xff78cab8>
  80cac8:	29c00c26 	beq	r5,r7,80cafc <__eqdf2+0x80>
  80cacc:	103ffa1e 	bne	r2,zero,80cab8 <__alt_mem_onchip_mem+0xff78cab8>
  80cad0:	2244b03a 	or	r2,r4,r9
  80cad4:	1004c03a 	cmpne	r2,r2,zero
  80cad8:	f800283a 	ret
  80cadc:	3214b03a 	or	r10,r6,r8
  80cae0:	503ff426 	beq	r10,zero,80cab4 <__alt_mem_onchip_mem+0xff78cab4>
  80cae4:	00800044 	movi	r2,1
  80cae8:	f800283a 	ret
  80caec:	2254b03a 	or	r10,r4,r9
  80caf0:	503fee26 	beq	r10,zero,80caac <__alt_mem_onchip_mem+0xff78caac>
  80caf4:	00800044 	movi	r2,1
  80caf8:	f800283a 	ret
  80cafc:	0005883a 	mov	r2,zero
  80cb00:	f800283a 	ret

0080cb04 <__gedf2>:
  80cb04:	2804d53a 	srli	r2,r5,20
  80cb08:	3806d53a 	srli	r3,r7,20
  80cb0c:	02000434 	movhi	r8,16
  80cb10:	423fffc4 	addi	r8,r8,-1
  80cb14:	1081ffcc 	andi	r2,r2,2047
  80cb18:	0241ffc4 	movi	r9,2047
  80cb1c:	2a14703a 	and	r10,r5,r8
  80cb20:	18c1ffcc 	andi	r3,r3,2047
  80cb24:	3a10703a 	and	r8,r7,r8
  80cb28:	280ad7fa 	srli	r5,r5,31
  80cb2c:	380ed7fa 	srli	r7,r7,31
  80cb30:	12401d26 	beq	r2,r9,80cba8 <__gedf2+0xa4>
  80cb34:	0241ffc4 	movi	r9,2047
  80cb38:	1a401226 	beq	r3,r9,80cb84 <__gedf2+0x80>
  80cb3c:	1000081e 	bne	r2,zero,80cb60 <__gedf2+0x5c>
  80cb40:	2296b03a 	or	r11,r4,r10
  80cb44:	5813003a 	cmpeq	r9,r11,zero
  80cb48:	1800091e 	bne	r3,zero,80cb70 <__gedf2+0x6c>
  80cb4c:	3218b03a 	or	r12,r6,r8
  80cb50:	6000071e 	bne	r12,zero,80cb70 <__gedf2+0x6c>
  80cb54:	0005883a 	mov	r2,zero
  80cb58:	5800101e 	bne	r11,zero,80cb9c <__gedf2+0x98>
  80cb5c:	f800283a 	ret
  80cb60:	18000c1e 	bne	r3,zero,80cb94 <__gedf2+0x90>
  80cb64:	3212b03a 	or	r9,r6,r8
  80cb68:	48000c26 	beq	r9,zero,80cb9c <__gedf2+0x98>
  80cb6c:	0013883a 	mov	r9,zero
  80cb70:	39c03fcc 	andi	r7,r7,255
  80cb74:	48000826 	beq	r9,zero,80cb98 <__gedf2+0x94>
  80cb78:	38000926 	beq	r7,zero,80cba0 <__gedf2+0x9c>
  80cb7c:	00800044 	movi	r2,1
  80cb80:	f800283a 	ret
  80cb84:	3212b03a 	or	r9,r6,r8
  80cb88:	483fec26 	beq	r9,zero,80cb3c <__alt_mem_onchip_mem+0xff78cb3c>
  80cb8c:	00bfff84 	movi	r2,-2
  80cb90:	f800283a 	ret
  80cb94:	39c03fcc 	andi	r7,r7,255
  80cb98:	29c00626 	beq	r5,r7,80cbb4 <__gedf2+0xb0>
  80cb9c:	283ff726 	beq	r5,zero,80cb7c <__alt_mem_onchip_mem+0xff78cb7c>
  80cba0:	00bfffc4 	movi	r2,-1
  80cba4:	f800283a 	ret
  80cba8:	2292b03a 	or	r9,r4,r10
  80cbac:	483fe126 	beq	r9,zero,80cb34 <__alt_mem_onchip_mem+0xff78cb34>
  80cbb0:	003ff606 	br	80cb8c <__alt_mem_onchip_mem+0xff78cb8c>
  80cbb4:	18bff916 	blt	r3,r2,80cb9c <__alt_mem_onchip_mem+0xff78cb9c>
  80cbb8:	10c00316 	blt	r2,r3,80cbc8 <__gedf2+0xc4>
  80cbbc:	42bff736 	bltu	r8,r10,80cb9c <__alt_mem_onchip_mem+0xff78cb9c>
  80cbc0:	52000326 	beq	r10,r8,80cbd0 <__gedf2+0xcc>
  80cbc4:	5200042e 	bgeu	r10,r8,80cbd8 <__gedf2+0xd4>
  80cbc8:	283fec1e 	bne	r5,zero,80cb7c <__alt_mem_onchip_mem+0xff78cb7c>
  80cbcc:	003ff406 	br	80cba0 <__alt_mem_onchip_mem+0xff78cba0>
  80cbd0:	313ff236 	bltu	r6,r4,80cb9c <__alt_mem_onchip_mem+0xff78cb9c>
  80cbd4:	21bffc36 	bltu	r4,r6,80cbc8 <__alt_mem_onchip_mem+0xff78cbc8>
  80cbd8:	0005883a 	mov	r2,zero
  80cbdc:	f800283a 	ret

0080cbe0 <__ledf2>:
  80cbe0:	2804d53a 	srli	r2,r5,20
  80cbe4:	3810d53a 	srli	r8,r7,20
  80cbe8:	00c00434 	movhi	r3,16
  80cbec:	18ffffc4 	addi	r3,r3,-1
  80cbf0:	1081ffcc 	andi	r2,r2,2047
  80cbf4:	0241ffc4 	movi	r9,2047
  80cbf8:	28d4703a 	and	r10,r5,r3
  80cbfc:	4201ffcc 	andi	r8,r8,2047
  80cc00:	38c6703a 	and	r3,r7,r3
  80cc04:	280ad7fa 	srli	r5,r5,31
  80cc08:	380ed7fa 	srli	r7,r7,31
  80cc0c:	12401f26 	beq	r2,r9,80cc8c <__ledf2+0xac>
  80cc10:	0241ffc4 	movi	r9,2047
  80cc14:	42401426 	beq	r8,r9,80cc68 <__ledf2+0x88>
  80cc18:	1000091e 	bne	r2,zero,80cc40 <__ledf2+0x60>
  80cc1c:	2296b03a 	or	r11,r4,r10
  80cc20:	5813003a 	cmpeq	r9,r11,zero
  80cc24:	29403fcc 	andi	r5,r5,255
  80cc28:	40000a1e 	bne	r8,zero,80cc54 <__ledf2+0x74>
  80cc2c:	30d8b03a 	or	r12,r6,r3
  80cc30:	6000081e 	bne	r12,zero,80cc54 <__ledf2+0x74>
  80cc34:	0005883a 	mov	r2,zero
  80cc38:	5800111e 	bne	r11,zero,80cc80 <__ledf2+0xa0>
  80cc3c:	f800283a 	ret
  80cc40:	29403fcc 	andi	r5,r5,255
  80cc44:	40000c1e 	bne	r8,zero,80cc78 <__ledf2+0x98>
  80cc48:	30d2b03a 	or	r9,r6,r3
  80cc4c:	48000c26 	beq	r9,zero,80cc80 <__ledf2+0xa0>
  80cc50:	0013883a 	mov	r9,zero
  80cc54:	39c03fcc 	andi	r7,r7,255
  80cc58:	48000826 	beq	r9,zero,80cc7c <__ledf2+0x9c>
  80cc5c:	38001126 	beq	r7,zero,80cca4 <__ledf2+0xc4>
  80cc60:	00800044 	movi	r2,1
  80cc64:	f800283a 	ret
  80cc68:	30d2b03a 	or	r9,r6,r3
  80cc6c:	483fea26 	beq	r9,zero,80cc18 <__alt_mem_onchip_mem+0xff78cc18>
  80cc70:	00800084 	movi	r2,2
  80cc74:	f800283a 	ret
  80cc78:	39c03fcc 	andi	r7,r7,255
  80cc7c:	39400726 	beq	r7,r5,80cc9c <__ledf2+0xbc>
  80cc80:	2800081e 	bne	r5,zero,80cca4 <__ledf2+0xc4>
  80cc84:	00800044 	movi	r2,1
  80cc88:	f800283a 	ret
  80cc8c:	2292b03a 	or	r9,r4,r10
  80cc90:	483fdf26 	beq	r9,zero,80cc10 <__alt_mem_onchip_mem+0xff78cc10>
  80cc94:	00800084 	movi	r2,2
  80cc98:	f800283a 	ret
  80cc9c:	4080030e 	bge	r8,r2,80ccac <__ledf2+0xcc>
  80cca0:	383fef26 	beq	r7,zero,80cc60 <__alt_mem_onchip_mem+0xff78cc60>
  80cca4:	00bfffc4 	movi	r2,-1
  80cca8:	f800283a 	ret
  80ccac:	123feb16 	blt	r2,r8,80cc5c <__alt_mem_onchip_mem+0xff78cc5c>
  80ccb0:	1abff336 	bltu	r3,r10,80cc80 <__alt_mem_onchip_mem+0xff78cc80>
  80ccb4:	50c00326 	beq	r10,r3,80ccc4 <__ledf2+0xe4>
  80ccb8:	50c0042e 	bgeu	r10,r3,80cccc <__ledf2+0xec>
  80ccbc:	283fe81e 	bne	r5,zero,80cc60 <__alt_mem_onchip_mem+0xff78cc60>
  80ccc0:	003ff806 	br	80cca4 <__alt_mem_onchip_mem+0xff78cca4>
  80ccc4:	313fee36 	bltu	r6,r4,80cc80 <__alt_mem_onchip_mem+0xff78cc80>
  80ccc8:	21bffc36 	bltu	r4,r6,80ccbc <__alt_mem_onchip_mem+0xff78ccbc>
  80cccc:	0005883a 	mov	r2,zero
  80ccd0:	f800283a 	ret

0080ccd4 <__muldf3>:
  80ccd4:	defff304 	addi	sp,sp,-52
  80ccd8:	2804d53a 	srli	r2,r5,20
  80ccdc:	dd800915 	stw	r22,36(sp)
  80cce0:	282cd7fa 	srli	r22,r5,31
  80cce4:	dc000315 	stw	r16,12(sp)
  80cce8:	04000434 	movhi	r16,16
  80ccec:	dd400815 	stw	r21,32(sp)
  80ccf0:	dc800515 	stw	r18,20(sp)
  80ccf4:	843fffc4 	addi	r16,r16,-1
  80ccf8:	dfc00c15 	stw	ra,48(sp)
  80ccfc:	df000b15 	stw	fp,44(sp)
  80cd00:	ddc00a15 	stw	r23,40(sp)
  80cd04:	dd000715 	stw	r20,28(sp)
  80cd08:	dcc00615 	stw	r19,24(sp)
  80cd0c:	dc400415 	stw	r17,16(sp)
  80cd10:	1481ffcc 	andi	r18,r2,2047
  80cd14:	2c20703a 	and	r16,r5,r16
  80cd18:	b02b883a 	mov	r21,r22
  80cd1c:	b2403fcc 	andi	r9,r22,255
  80cd20:	90006026 	beq	r18,zero,80cea4 <__muldf3+0x1d0>
  80cd24:	0081ffc4 	movi	r2,2047
  80cd28:	2029883a 	mov	r20,r4
  80cd2c:	90803626 	beq	r18,r2,80ce08 <__muldf3+0x134>
  80cd30:	80800434 	orhi	r2,r16,16
  80cd34:	100490fa 	slli	r2,r2,3
  80cd38:	2020d77a 	srli	r16,r4,29
  80cd3c:	202890fa 	slli	r20,r4,3
  80cd40:	94bf0044 	addi	r18,r18,-1023
  80cd44:	80a0b03a 	or	r16,r16,r2
  80cd48:	0027883a 	mov	r19,zero
  80cd4c:	0039883a 	mov	fp,zero
  80cd50:	3804d53a 	srli	r2,r7,20
  80cd54:	382ed7fa 	srli	r23,r7,31
  80cd58:	04400434 	movhi	r17,16
  80cd5c:	8c7fffc4 	addi	r17,r17,-1
  80cd60:	1081ffcc 	andi	r2,r2,2047
  80cd64:	3011883a 	mov	r8,r6
  80cd68:	3c62703a 	and	r17,r7,r17
  80cd6c:	ba803fcc 	andi	r10,r23,255
  80cd70:	10006d26 	beq	r2,zero,80cf28 <__muldf3+0x254>
  80cd74:	00c1ffc4 	movi	r3,2047
  80cd78:	10c06526 	beq	r2,r3,80cf10 <__muldf3+0x23c>
  80cd7c:	88c00434 	orhi	r3,r17,16
  80cd80:	180690fa 	slli	r3,r3,3
  80cd84:	3022d77a 	srli	r17,r6,29
  80cd88:	301090fa 	slli	r8,r6,3
  80cd8c:	10bf0044 	addi	r2,r2,-1023
  80cd90:	88e2b03a 	or	r17,r17,r3
  80cd94:	000b883a 	mov	r5,zero
  80cd98:	9085883a 	add	r2,r18,r2
  80cd9c:	2cc8b03a 	or	r4,r5,r19
  80cda0:	00c003c4 	movi	r3,15
  80cda4:	bdacf03a 	xor	r22,r23,r22
  80cda8:	12c00044 	addi	r11,r2,1
  80cdac:	19009936 	bltu	r3,r4,80d014 <__muldf3+0x340>
  80cdb0:	200890ba 	slli	r4,r4,2
  80cdb4:	00c02074 	movhi	r3,129
  80cdb8:	18f37204 	addi	r3,r3,-12856
  80cdbc:	20c9883a 	add	r4,r4,r3
  80cdc0:	20c00017 	ldw	r3,0(r4)
  80cdc4:	1800683a 	jmp	r3
  80cdc8:	0080d014 	movui	r2,832
  80cdcc:	0080ce28 	cmpgeui	r2,zero,824
  80cdd0:	0080ce28 	cmpgeui	r2,zero,824
  80cdd4:	0080ce24 	muli	r2,zero,824
  80cdd8:	0080cff0 	cmpltui	r2,zero,831
  80cddc:	0080cff0 	cmpltui	r2,zero,831
  80cde0:	0080cfd8 	cmpnei	r2,zero,831
  80cde4:	0080ce24 	muli	r2,zero,824
  80cde8:	0080cff0 	cmpltui	r2,zero,831
  80cdec:	0080cfd8 	cmpnei	r2,zero,831
  80cdf0:	0080cff0 	cmpltui	r2,zero,831
  80cdf4:	0080ce24 	muli	r2,zero,824
  80cdf8:	0080d000 	call	80d00 <__alt_mem_sdram-0x77f300>
  80cdfc:	0080d000 	call	80d00 <__alt_mem_sdram-0x77f300>
  80ce00:	0080d000 	call	80d00 <__alt_mem_sdram-0x77f300>
  80ce04:	0080d21c 	xori	r2,zero,840
  80ce08:	2404b03a 	or	r2,r4,r16
  80ce0c:	10006f1e 	bne	r2,zero,80cfcc <__muldf3+0x2f8>
  80ce10:	04c00204 	movi	r19,8
  80ce14:	0021883a 	mov	r16,zero
  80ce18:	0029883a 	mov	r20,zero
  80ce1c:	07000084 	movi	fp,2
  80ce20:	003fcb06 	br	80cd50 <__alt_mem_onchip_mem+0xff78cd50>
  80ce24:	502d883a 	mov	r22,r10
  80ce28:	00800084 	movi	r2,2
  80ce2c:	28805726 	beq	r5,r2,80cf8c <__muldf3+0x2b8>
  80ce30:	008000c4 	movi	r2,3
  80ce34:	28816626 	beq	r5,r2,80d3d0 <__muldf3+0x6fc>
  80ce38:	00800044 	movi	r2,1
  80ce3c:	2881411e 	bne	r5,r2,80d344 <__muldf3+0x670>
  80ce40:	b02b883a 	mov	r21,r22
  80ce44:	0005883a 	mov	r2,zero
  80ce48:	000b883a 	mov	r5,zero
  80ce4c:	0029883a 	mov	r20,zero
  80ce50:	1004953a 	slli	r2,r2,20
  80ce54:	a8c03fcc 	andi	r3,r21,255
  80ce58:	04400434 	movhi	r17,16
  80ce5c:	8c7fffc4 	addi	r17,r17,-1
  80ce60:	180697fa 	slli	r3,r3,31
  80ce64:	2c4a703a 	and	r5,r5,r17
  80ce68:	288ab03a 	or	r5,r5,r2
  80ce6c:	28c6b03a 	or	r3,r5,r3
  80ce70:	a005883a 	mov	r2,r20
  80ce74:	dfc00c17 	ldw	ra,48(sp)
  80ce78:	df000b17 	ldw	fp,44(sp)
  80ce7c:	ddc00a17 	ldw	r23,40(sp)
  80ce80:	dd800917 	ldw	r22,36(sp)
  80ce84:	dd400817 	ldw	r21,32(sp)
  80ce88:	dd000717 	ldw	r20,28(sp)
  80ce8c:	dcc00617 	ldw	r19,24(sp)
  80ce90:	dc800517 	ldw	r18,20(sp)
  80ce94:	dc400417 	ldw	r17,16(sp)
  80ce98:	dc000317 	ldw	r16,12(sp)
  80ce9c:	dec00d04 	addi	sp,sp,52
  80cea0:	f800283a 	ret
  80cea4:	2404b03a 	or	r2,r4,r16
  80cea8:	2027883a 	mov	r19,r4
  80ceac:	10004226 	beq	r2,zero,80cfb8 <__muldf3+0x2e4>
  80ceb0:	8000fc26 	beq	r16,zero,80d2a4 <__muldf3+0x5d0>
  80ceb4:	8009883a 	mov	r4,r16
  80ceb8:	d9800215 	stw	r6,8(sp)
  80cebc:	d9c00015 	stw	r7,0(sp)
  80cec0:	da400115 	stw	r9,4(sp)
  80cec4:	080deec0 	call	80deec <__clzsi2>
  80cec8:	d9800217 	ldw	r6,8(sp)
  80cecc:	d9c00017 	ldw	r7,0(sp)
  80ced0:	da400117 	ldw	r9,4(sp)
  80ced4:	113ffd44 	addi	r4,r2,-11
  80ced8:	00c00704 	movi	r3,28
  80cedc:	1900ed16 	blt	r3,r4,80d294 <__muldf3+0x5c0>
  80cee0:	00c00744 	movi	r3,29
  80cee4:	147ffe04 	addi	r17,r2,-8
  80cee8:	1907c83a 	sub	r3,r3,r4
  80ceec:	8460983a 	sll	r16,r16,r17
  80cef0:	98c6d83a 	srl	r3,r19,r3
  80cef4:	9c68983a 	sll	r20,r19,r17
  80cef8:	1c20b03a 	or	r16,r3,r16
  80cefc:	1080fcc4 	addi	r2,r2,1011
  80cf00:	00a5c83a 	sub	r18,zero,r2
  80cf04:	0027883a 	mov	r19,zero
  80cf08:	0039883a 	mov	fp,zero
  80cf0c:	003f9006 	br	80cd50 <__alt_mem_onchip_mem+0xff78cd50>
  80cf10:	3446b03a 	or	r3,r6,r17
  80cf14:	1800261e 	bne	r3,zero,80cfb0 <__muldf3+0x2dc>
  80cf18:	0023883a 	mov	r17,zero
  80cf1c:	0011883a 	mov	r8,zero
  80cf20:	01400084 	movi	r5,2
  80cf24:	003f9c06 	br	80cd98 <__alt_mem_onchip_mem+0xff78cd98>
  80cf28:	3446b03a 	or	r3,r6,r17
  80cf2c:	18001c26 	beq	r3,zero,80cfa0 <__muldf3+0x2cc>
  80cf30:	8800ce26 	beq	r17,zero,80d26c <__muldf3+0x598>
  80cf34:	8809883a 	mov	r4,r17
  80cf38:	d9800215 	stw	r6,8(sp)
  80cf3c:	da400115 	stw	r9,4(sp)
  80cf40:	da800015 	stw	r10,0(sp)
  80cf44:	080deec0 	call	80deec <__clzsi2>
  80cf48:	d9800217 	ldw	r6,8(sp)
  80cf4c:	da400117 	ldw	r9,4(sp)
  80cf50:	da800017 	ldw	r10,0(sp)
  80cf54:	113ffd44 	addi	r4,r2,-11
  80cf58:	00c00704 	movi	r3,28
  80cf5c:	1900bf16 	blt	r3,r4,80d25c <__muldf3+0x588>
  80cf60:	00c00744 	movi	r3,29
  80cf64:	123ffe04 	addi	r8,r2,-8
  80cf68:	1907c83a 	sub	r3,r3,r4
  80cf6c:	8a22983a 	sll	r17,r17,r8
  80cf70:	30c6d83a 	srl	r3,r6,r3
  80cf74:	3210983a 	sll	r8,r6,r8
  80cf78:	1c62b03a 	or	r17,r3,r17
  80cf7c:	1080fcc4 	addi	r2,r2,1011
  80cf80:	0085c83a 	sub	r2,zero,r2
  80cf84:	000b883a 	mov	r5,zero
  80cf88:	003f8306 	br	80cd98 <__alt_mem_onchip_mem+0xff78cd98>
  80cf8c:	b02b883a 	mov	r21,r22
  80cf90:	0081ffc4 	movi	r2,2047
  80cf94:	000b883a 	mov	r5,zero
  80cf98:	0029883a 	mov	r20,zero
  80cf9c:	003fac06 	br	80ce50 <__alt_mem_onchip_mem+0xff78ce50>
  80cfa0:	0023883a 	mov	r17,zero
  80cfa4:	0011883a 	mov	r8,zero
  80cfa8:	01400044 	movi	r5,1
  80cfac:	003f7a06 	br	80cd98 <__alt_mem_onchip_mem+0xff78cd98>
  80cfb0:	014000c4 	movi	r5,3
  80cfb4:	003f7806 	br	80cd98 <__alt_mem_onchip_mem+0xff78cd98>
  80cfb8:	04c00104 	movi	r19,4
  80cfbc:	0021883a 	mov	r16,zero
  80cfc0:	0029883a 	mov	r20,zero
  80cfc4:	07000044 	movi	fp,1
  80cfc8:	003f6106 	br	80cd50 <__alt_mem_onchip_mem+0xff78cd50>
  80cfcc:	04c00304 	movi	r19,12
  80cfd0:	070000c4 	movi	fp,3
  80cfd4:	003f5e06 	br	80cd50 <__alt_mem_onchip_mem+0xff78cd50>
  80cfd8:	01400434 	movhi	r5,16
  80cfdc:	002b883a 	mov	r21,zero
  80cfe0:	297fffc4 	addi	r5,r5,-1
  80cfe4:	053fffc4 	movi	r20,-1
  80cfe8:	0081ffc4 	movi	r2,2047
  80cfec:	003f9806 	br	80ce50 <__alt_mem_onchip_mem+0xff78ce50>
  80cff0:	8023883a 	mov	r17,r16
  80cff4:	a011883a 	mov	r8,r20
  80cff8:	e00b883a 	mov	r5,fp
  80cffc:	003f8a06 	br	80ce28 <__alt_mem_onchip_mem+0xff78ce28>
  80d000:	8023883a 	mov	r17,r16
  80d004:	a011883a 	mov	r8,r20
  80d008:	482d883a 	mov	r22,r9
  80d00c:	e00b883a 	mov	r5,fp
  80d010:	003f8506 	br	80ce28 <__alt_mem_onchip_mem+0xff78ce28>
  80d014:	a00ad43a 	srli	r5,r20,16
  80d018:	401ad43a 	srli	r13,r8,16
  80d01c:	a53fffcc 	andi	r20,r20,65535
  80d020:	423fffcc 	andi	r8,r8,65535
  80d024:	4519383a 	mul	r12,r8,r20
  80d028:	4147383a 	mul	r3,r8,r5
  80d02c:	6d09383a 	mul	r4,r13,r20
  80d030:	600cd43a 	srli	r6,r12,16
  80d034:	2b5d383a 	mul	r14,r5,r13
  80d038:	20c9883a 	add	r4,r4,r3
  80d03c:	310d883a 	add	r6,r6,r4
  80d040:	30c0022e 	bgeu	r6,r3,80d04c <__muldf3+0x378>
  80d044:	00c00074 	movhi	r3,1
  80d048:	70dd883a 	add	r14,r14,r3
  80d04c:	8826d43a 	srli	r19,r17,16
  80d050:	8bffffcc 	andi	r15,r17,65535
  80d054:	7d23383a 	mul	r17,r15,r20
  80d058:	7949383a 	mul	r4,r15,r5
  80d05c:	9d29383a 	mul	r20,r19,r20
  80d060:	8814d43a 	srli	r10,r17,16
  80d064:	3012943a 	slli	r9,r6,16
  80d068:	a129883a 	add	r20,r20,r4
  80d06c:	633fffcc 	andi	r12,r12,65535
  80d070:	5515883a 	add	r10,r10,r20
  80d074:	3006d43a 	srli	r3,r6,16
  80d078:	4b13883a 	add	r9,r9,r12
  80d07c:	2ccb383a 	mul	r5,r5,r19
  80d080:	5100022e 	bgeu	r10,r4,80d08c <__muldf3+0x3b8>
  80d084:	01000074 	movhi	r4,1
  80d088:	290b883a 	add	r5,r5,r4
  80d08c:	802ad43a 	srli	r21,r16,16
  80d090:	843fffcc 	andi	r16,r16,65535
  80d094:	440d383a 	mul	r6,r8,r16
  80d098:	4565383a 	mul	r18,r8,r21
  80d09c:	8349383a 	mul	r4,r16,r13
  80d0a0:	500e943a 	slli	r7,r10,16
  80d0a4:	3010d43a 	srli	r8,r6,16
  80d0a8:	5028d43a 	srli	r20,r10,16
  80d0ac:	2489883a 	add	r4,r4,r18
  80d0b0:	8abfffcc 	andi	r10,r17,65535
  80d0b4:	3a95883a 	add	r10,r7,r10
  80d0b8:	4119883a 	add	r12,r8,r4
  80d0bc:	a169883a 	add	r20,r20,r5
  80d0c0:	1a87883a 	add	r3,r3,r10
  80d0c4:	6d5b383a 	mul	r13,r13,r21
  80d0c8:	6480022e 	bgeu	r12,r18,80d0d4 <__muldf3+0x400>
  80d0cc:	01000074 	movhi	r4,1
  80d0d0:	691b883a 	add	r13,r13,r4
  80d0d4:	7c25383a 	mul	r18,r15,r16
  80d0d8:	7d4b383a 	mul	r5,r15,r21
  80d0dc:	84cf383a 	mul	r7,r16,r19
  80d0e0:	901ed43a 	srli	r15,r18,16
  80d0e4:	6008d43a 	srli	r4,r12,16
  80d0e8:	6010943a 	slli	r8,r12,16
  80d0ec:	394f883a 	add	r7,r7,r5
  80d0f0:	333fffcc 	andi	r12,r6,65535
  80d0f4:	79df883a 	add	r15,r15,r7
  80d0f8:	235b883a 	add	r13,r4,r13
  80d0fc:	9d63383a 	mul	r17,r19,r21
  80d100:	4309883a 	add	r4,r8,r12
  80d104:	7940022e 	bgeu	r15,r5,80d110 <__muldf3+0x43c>
  80d108:	01400074 	movhi	r5,1
  80d10c:	8963883a 	add	r17,r17,r5
  80d110:	780a943a 	slli	r5,r15,16
  80d114:	91bfffcc 	andi	r6,r18,65535
  80d118:	70c7883a 	add	r3,r14,r3
  80d11c:	298d883a 	add	r6,r5,r6
  80d120:	1a8f803a 	cmpltu	r7,r3,r10
  80d124:	350b883a 	add	r5,r6,r20
  80d128:	20c7883a 	add	r3,r4,r3
  80d12c:	3955883a 	add	r10,r7,r5
  80d130:	1909803a 	cmpltu	r4,r3,r4
  80d134:	6a91883a 	add	r8,r13,r10
  80d138:	780cd43a 	srli	r6,r15,16
  80d13c:	2219883a 	add	r12,r4,r8
  80d140:	2d0b803a 	cmpltu	r5,r5,r20
  80d144:	51cf803a 	cmpltu	r7,r10,r7
  80d148:	29ceb03a 	or	r7,r5,r7
  80d14c:	4351803a 	cmpltu	r8,r8,r13
  80d150:	610b803a 	cmpltu	r5,r12,r4
  80d154:	4148b03a 	or	r4,r8,r5
  80d158:	398f883a 	add	r7,r7,r6
  80d15c:	3909883a 	add	r4,r7,r4
  80d160:	1810927a 	slli	r8,r3,9
  80d164:	2449883a 	add	r4,r4,r17
  80d168:	2008927a 	slli	r4,r4,9
  80d16c:	6022d5fa 	srli	r17,r12,23
  80d170:	1806d5fa 	srli	r3,r3,23
  80d174:	4252b03a 	or	r9,r8,r9
  80d178:	600a927a 	slli	r5,r12,9
  80d17c:	4810c03a 	cmpne	r8,r9,zero
  80d180:	2462b03a 	or	r17,r4,r17
  80d184:	40c6b03a 	or	r3,r8,r3
  80d188:	8900402c 	andhi	r4,r17,256
  80d18c:	1950b03a 	or	r8,r3,r5
  80d190:	20000726 	beq	r4,zero,80d1b0 <__muldf3+0x4dc>
  80d194:	4006d07a 	srli	r3,r8,1
  80d198:	880497fa 	slli	r2,r17,31
  80d19c:	4200004c 	andi	r8,r8,1
  80d1a0:	8822d07a 	srli	r17,r17,1
  80d1a4:	1a10b03a 	or	r8,r3,r8
  80d1a8:	1210b03a 	or	r8,r2,r8
  80d1ac:	5805883a 	mov	r2,r11
  80d1b0:	1140ffc4 	addi	r5,r2,1023
  80d1b4:	0140440e 	bge	zero,r5,80d2c8 <__muldf3+0x5f4>
  80d1b8:	40c001cc 	andi	r3,r8,7
  80d1bc:	18000726 	beq	r3,zero,80d1dc <__muldf3+0x508>
  80d1c0:	40c003cc 	andi	r3,r8,15
  80d1c4:	01000104 	movi	r4,4
  80d1c8:	19000426 	beq	r3,r4,80d1dc <__muldf3+0x508>
  80d1cc:	4107883a 	add	r3,r8,r4
  80d1d0:	1a11803a 	cmpltu	r8,r3,r8
  80d1d4:	8a23883a 	add	r17,r17,r8
  80d1d8:	1811883a 	mov	r8,r3
  80d1dc:	88c0402c 	andhi	r3,r17,256
  80d1e0:	18000426 	beq	r3,zero,80d1f4 <__muldf3+0x520>
  80d1e4:	11410004 	addi	r5,r2,1024
  80d1e8:	00bfc034 	movhi	r2,65280
  80d1ec:	10bfffc4 	addi	r2,r2,-1
  80d1f0:	88a2703a 	and	r17,r17,r2
  80d1f4:	0081ff84 	movi	r2,2046
  80d1f8:	117f6416 	blt	r2,r5,80cf8c <__alt_mem_onchip_mem+0xff78cf8c>
  80d1fc:	8828977a 	slli	r20,r17,29
  80d200:	4010d0fa 	srli	r8,r8,3
  80d204:	8822927a 	slli	r17,r17,9
  80d208:	2881ffcc 	andi	r2,r5,2047
  80d20c:	a228b03a 	or	r20,r20,r8
  80d210:	880ad33a 	srli	r5,r17,12
  80d214:	b02b883a 	mov	r21,r22
  80d218:	003f0d06 	br	80ce50 <__alt_mem_onchip_mem+0xff78ce50>
  80d21c:	8080022c 	andhi	r2,r16,8
  80d220:	10000926 	beq	r2,zero,80d248 <__muldf3+0x574>
  80d224:	8880022c 	andhi	r2,r17,8
  80d228:	1000071e 	bne	r2,zero,80d248 <__muldf3+0x574>
  80d22c:	00800434 	movhi	r2,16
  80d230:	89400234 	orhi	r5,r17,8
  80d234:	10bfffc4 	addi	r2,r2,-1
  80d238:	b82b883a 	mov	r21,r23
  80d23c:	288a703a 	and	r5,r5,r2
  80d240:	4029883a 	mov	r20,r8
  80d244:	003f6806 	br	80cfe8 <__alt_mem_onchip_mem+0xff78cfe8>
  80d248:	00800434 	movhi	r2,16
  80d24c:	81400234 	orhi	r5,r16,8
  80d250:	10bfffc4 	addi	r2,r2,-1
  80d254:	288a703a 	and	r5,r5,r2
  80d258:	003f6306 	br	80cfe8 <__alt_mem_onchip_mem+0xff78cfe8>
  80d25c:	147ff604 	addi	r17,r2,-40
  80d260:	3462983a 	sll	r17,r6,r17
  80d264:	0011883a 	mov	r8,zero
  80d268:	003f4406 	br	80cf7c <__alt_mem_onchip_mem+0xff78cf7c>
  80d26c:	3009883a 	mov	r4,r6
  80d270:	d9800215 	stw	r6,8(sp)
  80d274:	da400115 	stw	r9,4(sp)
  80d278:	da800015 	stw	r10,0(sp)
  80d27c:	080deec0 	call	80deec <__clzsi2>
  80d280:	10800804 	addi	r2,r2,32
  80d284:	da800017 	ldw	r10,0(sp)
  80d288:	da400117 	ldw	r9,4(sp)
  80d28c:	d9800217 	ldw	r6,8(sp)
  80d290:	003f3006 	br	80cf54 <__alt_mem_onchip_mem+0xff78cf54>
  80d294:	143ff604 	addi	r16,r2,-40
  80d298:	9c20983a 	sll	r16,r19,r16
  80d29c:	0029883a 	mov	r20,zero
  80d2a0:	003f1606 	br	80cefc <__alt_mem_onchip_mem+0xff78cefc>
  80d2a4:	d9800215 	stw	r6,8(sp)
  80d2a8:	d9c00015 	stw	r7,0(sp)
  80d2ac:	da400115 	stw	r9,4(sp)
  80d2b0:	080deec0 	call	80deec <__clzsi2>
  80d2b4:	10800804 	addi	r2,r2,32
  80d2b8:	da400117 	ldw	r9,4(sp)
  80d2bc:	d9c00017 	ldw	r7,0(sp)
  80d2c0:	d9800217 	ldw	r6,8(sp)
  80d2c4:	003f0306 	br	80ced4 <__alt_mem_onchip_mem+0xff78ced4>
  80d2c8:	00c00044 	movi	r3,1
  80d2cc:	1947c83a 	sub	r3,r3,r5
  80d2d0:	00800e04 	movi	r2,56
  80d2d4:	10feda16 	blt	r2,r3,80ce40 <__alt_mem_onchip_mem+0xff78ce40>
  80d2d8:	008007c4 	movi	r2,31
  80d2dc:	10c01b16 	blt	r2,r3,80d34c <__muldf3+0x678>
  80d2e0:	00800804 	movi	r2,32
  80d2e4:	10c5c83a 	sub	r2,r2,r3
  80d2e8:	888a983a 	sll	r5,r17,r2
  80d2ec:	40c8d83a 	srl	r4,r8,r3
  80d2f0:	4084983a 	sll	r2,r8,r2
  80d2f4:	88e2d83a 	srl	r17,r17,r3
  80d2f8:	2906b03a 	or	r3,r5,r4
  80d2fc:	1004c03a 	cmpne	r2,r2,zero
  80d300:	1886b03a 	or	r3,r3,r2
  80d304:	188001cc 	andi	r2,r3,7
  80d308:	10000726 	beq	r2,zero,80d328 <__muldf3+0x654>
  80d30c:	188003cc 	andi	r2,r3,15
  80d310:	01000104 	movi	r4,4
  80d314:	11000426 	beq	r2,r4,80d328 <__muldf3+0x654>
  80d318:	1805883a 	mov	r2,r3
  80d31c:	10c00104 	addi	r3,r2,4
  80d320:	1885803a 	cmpltu	r2,r3,r2
  80d324:	88a3883a 	add	r17,r17,r2
  80d328:	8880202c 	andhi	r2,r17,128
  80d32c:	10001c26 	beq	r2,zero,80d3a0 <__muldf3+0x6cc>
  80d330:	b02b883a 	mov	r21,r22
  80d334:	00800044 	movi	r2,1
  80d338:	000b883a 	mov	r5,zero
  80d33c:	0029883a 	mov	r20,zero
  80d340:	003ec306 	br	80ce50 <__alt_mem_onchip_mem+0xff78ce50>
  80d344:	5805883a 	mov	r2,r11
  80d348:	003f9906 	br	80d1b0 <__alt_mem_onchip_mem+0xff78d1b0>
  80d34c:	00bff844 	movi	r2,-31
  80d350:	1145c83a 	sub	r2,r2,r5
  80d354:	8888d83a 	srl	r4,r17,r2
  80d358:	00800804 	movi	r2,32
  80d35c:	18801a26 	beq	r3,r2,80d3c8 <__muldf3+0x6f4>
  80d360:	00801004 	movi	r2,64
  80d364:	10c5c83a 	sub	r2,r2,r3
  80d368:	8884983a 	sll	r2,r17,r2
  80d36c:	1204b03a 	or	r2,r2,r8
  80d370:	1004c03a 	cmpne	r2,r2,zero
  80d374:	2084b03a 	or	r2,r4,r2
  80d378:	144001cc 	andi	r17,r2,7
  80d37c:	88000d1e 	bne	r17,zero,80d3b4 <__muldf3+0x6e0>
  80d380:	000b883a 	mov	r5,zero
  80d384:	1028d0fa 	srli	r20,r2,3
  80d388:	b02b883a 	mov	r21,r22
  80d38c:	0005883a 	mov	r2,zero
  80d390:	a468b03a 	or	r20,r20,r17
  80d394:	003eae06 	br	80ce50 <__alt_mem_onchip_mem+0xff78ce50>
  80d398:	1007883a 	mov	r3,r2
  80d39c:	0023883a 	mov	r17,zero
  80d3a0:	880a927a 	slli	r5,r17,9
  80d3a4:	1805883a 	mov	r2,r3
  80d3a8:	8822977a 	slli	r17,r17,29
  80d3ac:	280ad33a 	srli	r5,r5,12
  80d3b0:	003ff406 	br	80d384 <__alt_mem_onchip_mem+0xff78d384>
  80d3b4:	10c003cc 	andi	r3,r2,15
  80d3b8:	01000104 	movi	r4,4
  80d3bc:	193ff626 	beq	r3,r4,80d398 <__alt_mem_onchip_mem+0xff78d398>
  80d3c0:	0023883a 	mov	r17,zero
  80d3c4:	003fd506 	br	80d31c <__alt_mem_onchip_mem+0xff78d31c>
  80d3c8:	0005883a 	mov	r2,zero
  80d3cc:	003fe706 	br	80d36c <__alt_mem_onchip_mem+0xff78d36c>
  80d3d0:	00800434 	movhi	r2,16
  80d3d4:	89400234 	orhi	r5,r17,8
  80d3d8:	10bfffc4 	addi	r2,r2,-1
  80d3dc:	b02b883a 	mov	r21,r22
  80d3e0:	288a703a 	and	r5,r5,r2
  80d3e4:	4029883a 	mov	r20,r8
  80d3e8:	003eff06 	br	80cfe8 <__alt_mem_onchip_mem+0xff78cfe8>

0080d3ec <__subdf3>:
  80d3ec:	02000434 	movhi	r8,16
  80d3f0:	423fffc4 	addi	r8,r8,-1
  80d3f4:	defffb04 	addi	sp,sp,-20
  80d3f8:	2a14703a 	and	r10,r5,r8
  80d3fc:	3812d53a 	srli	r9,r7,20
  80d400:	3a10703a 	and	r8,r7,r8
  80d404:	2006d77a 	srli	r3,r4,29
  80d408:	3004d77a 	srli	r2,r6,29
  80d40c:	dc000015 	stw	r16,0(sp)
  80d410:	501490fa 	slli	r10,r10,3
  80d414:	2820d53a 	srli	r16,r5,20
  80d418:	401090fa 	slli	r8,r8,3
  80d41c:	dc800215 	stw	r18,8(sp)
  80d420:	dc400115 	stw	r17,4(sp)
  80d424:	dfc00415 	stw	ra,16(sp)
  80d428:	202290fa 	slli	r17,r4,3
  80d42c:	dcc00315 	stw	r19,12(sp)
  80d430:	4a41ffcc 	andi	r9,r9,2047
  80d434:	0101ffc4 	movi	r4,2047
  80d438:	2824d7fa 	srli	r18,r5,31
  80d43c:	8401ffcc 	andi	r16,r16,2047
  80d440:	50c6b03a 	or	r3,r10,r3
  80d444:	380ed7fa 	srli	r7,r7,31
  80d448:	408ab03a 	or	r5,r8,r2
  80d44c:	300c90fa 	slli	r6,r6,3
  80d450:	49009626 	beq	r9,r4,80d6ac <__subdf3+0x2c0>
  80d454:	39c0005c 	xori	r7,r7,1
  80d458:	8245c83a 	sub	r2,r16,r9
  80d45c:	3c807426 	beq	r7,r18,80d630 <__subdf3+0x244>
  80d460:	0080af0e 	bge	zero,r2,80d720 <__subdf3+0x334>
  80d464:	48002a1e 	bne	r9,zero,80d510 <__subdf3+0x124>
  80d468:	2988b03a 	or	r4,r5,r6
  80d46c:	20009a1e 	bne	r4,zero,80d6d8 <__subdf3+0x2ec>
  80d470:	888001cc 	andi	r2,r17,7
  80d474:	10000726 	beq	r2,zero,80d494 <__subdf3+0xa8>
  80d478:	888003cc 	andi	r2,r17,15
  80d47c:	01000104 	movi	r4,4
  80d480:	11000426 	beq	r2,r4,80d494 <__subdf3+0xa8>
  80d484:	890b883a 	add	r5,r17,r4
  80d488:	2c63803a 	cmpltu	r17,r5,r17
  80d48c:	1c47883a 	add	r3,r3,r17
  80d490:	2823883a 	mov	r17,r5
  80d494:	1880202c 	andhi	r2,r3,128
  80d498:	10005926 	beq	r2,zero,80d600 <__subdf3+0x214>
  80d49c:	84000044 	addi	r16,r16,1
  80d4a0:	0081ffc4 	movi	r2,2047
  80d4a4:	8080be26 	beq	r16,r2,80d7a0 <__subdf3+0x3b4>
  80d4a8:	017fe034 	movhi	r5,65408
  80d4ac:	297fffc4 	addi	r5,r5,-1
  80d4b0:	1946703a 	and	r3,r3,r5
  80d4b4:	1804977a 	slli	r2,r3,29
  80d4b8:	1806927a 	slli	r3,r3,9
  80d4bc:	8822d0fa 	srli	r17,r17,3
  80d4c0:	8401ffcc 	andi	r16,r16,2047
  80d4c4:	180ad33a 	srli	r5,r3,12
  80d4c8:	9100004c 	andi	r4,r18,1
  80d4cc:	1444b03a 	or	r2,r2,r17
  80d4d0:	80c1ffcc 	andi	r3,r16,2047
  80d4d4:	1820953a 	slli	r16,r3,20
  80d4d8:	20c03fcc 	andi	r3,r4,255
  80d4dc:	180897fa 	slli	r4,r3,31
  80d4e0:	00c00434 	movhi	r3,16
  80d4e4:	18ffffc4 	addi	r3,r3,-1
  80d4e8:	28c6703a 	and	r3,r5,r3
  80d4ec:	1c06b03a 	or	r3,r3,r16
  80d4f0:	1906b03a 	or	r3,r3,r4
  80d4f4:	dfc00417 	ldw	ra,16(sp)
  80d4f8:	dcc00317 	ldw	r19,12(sp)
  80d4fc:	dc800217 	ldw	r18,8(sp)
  80d500:	dc400117 	ldw	r17,4(sp)
  80d504:	dc000017 	ldw	r16,0(sp)
  80d508:	dec00504 	addi	sp,sp,20
  80d50c:	f800283a 	ret
  80d510:	0101ffc4 	movi	r4,2047
  80d514:	813fd626 	beq	r16,r4,80d470 <__alt_mem_onchip_mem+0xff78d470>
  80d518:	29402034 	orhi	r5,r5,128
  80d51c:	01000e04 	movi	r4,56
  80d520:	2080a316 	blt	r4,r2,80d7b0 <__subdf3+0x3c4>
  80d524:	010007c4 	movi	r4,31
  80d528:	2080c616 	blt	r4,r2,80d844 <__subdf3+0x458>
  80d52c:	01000804 	movi	r4,32
  80d530:	2089c83a 	sub	r4,r4,r2
  80d534:	2910983a 	sll	r8,r5,r4
  80d538:	308ed83a 	srl	r7,r6,r2
  80d53c:	3108983a 	sll	r4,r6,r4
  80d540:	2884d83a 	srl	r2,r5,r2
  80d544:	41ccb03a 	or	r6,r8,r7
  80d548:	2008c03a 	cmpne	r4,r4,zero
  80d54c:	310cb03a 	or	r6,r6,r4
  80d550:	898dc83a 	sub	r6,r17,r6
  80d554:	89a3803a 	cmpltu	r17,r17,r6
  80d558:	1887c83a 	sub	r3,r3,r2
  80d55c:	1c47c83a 	sub	r3,r3,r17
  80d560:	3023883a 	mov	r17,r6
  80d564:	1880202c 	andhi	r2,r3,128
  80d568:	10002326 	beq	r2,zero,80d5f8 <__subdf3+0x20c>
  80d56c:	04c02034 	movhi	r19,128
  80d570:	9cffffc4 	addi	r19,r19,-1
  80d574:	1ce6703a 	and	r19,r3,r19
  80d578:	98007a26 	beq	r19,zero,80d764 <__subdf3+0x378>
  80d57c:	9809883a 	mov	r4,r19
  80d580:	080deec0 	call	80deec <__clzsi2>
  80d584:	113ffe04 	addi	r4,r2,-8
  80d588:	00c007c4 	movi	r3,31
  80d58c:	19007b16 	blt	r3,r4,80d77c <__subdf3+0x390>
  80d590:	00800804 	movi	r2,32
  80d594:	1105c83a 	sub	r2,r2,r4
  80d598:	8884d83a 	srl	r2,r17,r2
  80d59c:	9906983a 	sll	r3,r19,r4
  80d5a0:	8922983a 	sll	r17,r17,r4
  80d5a4:	10c4b03a 	or	r2,r2,r3
  80d5a8:	24007816 	blt	r4,r16,80d78c <__subdf3+0x3a0>
  80d5ac:	2421c83a 	sub	r16,r4,r16
  80d5b0:	80c00044 	addi	r3,r16,1
  80d5b4:	010007c4 	movi	r4,31
  80d5b8:	20c09516 	blt	r4,r3,80d810 <__subdf3+0x424>
  80d5bc:	01400804 	movi	r5,32
  80d5c0:	28cbc83a 	sub	r5,r5,r3
  80d5c4:	88c8d83a 	srl	r4,r17,r3
  80d5c8:	8962983a 	sll	r17,r17,r5
  80d5cc:	114a983a 	sll	r5,r2,r5
  80d5d0:	10c6d83a 	srl	r3,r2,r3
  80d5d4:	8804c03a 	cmpne	r2,r17,zero
  80d5d8:	290ab03a 	or	r5,r5,r4
  80d5dc:	28a2b03a 	or	r17,r5,r2
  80d5e0:	0021883a 	mov	r16,zero
  80d5e4:	003fa206 	br	80d470 <__alt_mem_onchip_mem+0xff78d470>
  80d5e8:	2090b03a 	or	r8,r4,r2
  80d5ec:	40018e26 	beq	r8,zero,80dc28 <__subdf3+0x83c>
  80d5f0:	1007883a 	mov	r3,r2
  80d5f4:	2023883a 	mov	r17,r4
  80d5f8:	888001cc 	andi	r2,r17,7
  80d5fc:	103f9e1e 	bne	r2,zero,80d478 <__alt_mem_onchip_mem+0xff78d478>
  80d600:	1804977a 	slli	r2,r3,29
  80d604:	8822d0fa 	srli	r17,r17,3
  80d608:	1810d0fa 	srli	r8,r3,3
  80d60c:	9100004c 	andi	r4,r18,1
  80d610:	1444b03a 	or	r2,r2,r17
  80d614:	00c1ffc4 	movi	r3,2047
  80d618:	80c02826 	beq	r16,r3,80d6bc <__subdf3+0x2d0>
  80d61c:	01400434 	movhi	r5,16
  80d620:	297fffc4 	addi	r5,r5,-1
  80d624:	80e0703a 	and	r16,r16,r3
  80d628:	414a703a 	and	r5,r8,r5
  80d62c:	003fa806 	br	80d4d0 <__alt_mem_onchip_mem+0xff78d4d0>
  80d630:	0080630e 	bge	zero,r2,80d7c0 <__subdf3+0x3d4>
  80d634:	48003026 	beq	r9,zero,80d6f8 <__subdf3+0x30c>
  80d638:	0101ffc4 	movi	r4,2047
  80d63c:	813f8c26 	beq	r16,r4,80d470 <__alt_mem_onchip_mem+0xff78d470>
  80d640:	29402034 	orhi	r5,r5,128
  80d644:	01000e04 	movi	r4,56
  80d648:	2080a90e 	bge	r4,r2,80d8f0 <__subdf3+0x504>
  80d64c:	298cb03a 	or	r6,r5,r6
  80d650:	3012c03a 	cmpne	r9,r6,zero
  80d654:	0005883a 	mov	r2,zero
  80d658:	4c53883a 	add	r9,r9,r17
  80d65c:	4c63803a 	cmpltu	r17,r9,r17
  80d660:	10c7883a 	add	r3,r2,r3
  80d664:	88c7883a 	add	r3,r17,r3
  80d668:	4823883a 	mov	r17,r9
  80d66c:	1880202c 	andhi	r2,r3,128
  80d670:	1000d026 	beq	r2,zero,80d9b4 <__subdf3+0x5c8>
  80d674:	84000044 	addi	r16,r16,1
  80d678:	0081ffc4 	movi	r2,2047
  80d67c:	8080fe26 	beq	r16,r2,80da78 <__subdf3+0x68c>
  80d680:	00bfe034 	movhi	r2,65408
  80d684:	10bfffc4 	addi	r2,r2,-1
  80d688:	1886703a 	and	r3,r3,r2
  80d68c:	880ad07a 	srli	r5,r17,1
  80d690:	180497fa 	slli	r2,r3,31
  80d694:	8900004c 	andi	r4,r17,1
  80d698:	2922b03a 	or	r17,r5,r4
  80d69c:	1806d07a 	srli	r3,r3,1
  80d6a0:	1462b03a 	or	r17,r2,r17
  80d6a4:	3825883a 	mov	r18,r7
  80d6a8:	003f7106 	br	80d470 <__alt_mem_onchip_mem+0xff78d470>
  80d6ac:	2984b03a 	or	r2,r5,r6
  80d6b0:	103f6826 	beq	r2,zero,80d454 <__alt_mem_onchip_mem+0xff78d454>
  80d6b4:	39c03fcc 	andi	r7,r7,255
  80d6b8:	003f6706 	br	80d458 <__alt_mem_onchip_mem+0xff78d458>
  80d6bc:	4086b03a 	or	r3,r8,r2
  80d6c0:	18015226 	beq	r3,zero,80dc0c <__subdf3+0x820>
  80d6c4:	00c00434 	movhi	r3,16
  80d6c8:	41400234 	orhi	r5,r8,8
  80d6cc:	18ffffc4 	addi	r3,r3,-1
  80d6d0:	28ca703a 	and	r5,r5,r3
  80d6d4:	003f7e06 	br	80d4d0 <__alt_mem_onchip_mem+0xff78d4d0>
  80d6d8:	10bfffc4 	addi	r2,r2,-1
  80d6dc:	1000491e 	bne	r2,zero,80d804 <__subdf3+0x418>
  80d6e0:	898fc83a 	sub	r7,r17,r6
  80d6e4:	89e3803a 	cmpltu	r17,r17,r7
  80d6e8:	1947c83a 	sub	r3,r3,r5
  80d6ec:	1c47c83a 	sub	r3,r3,r17
  80d6f0:	3823883a 	mov	r17,r7
  80d6f4:	003f9b06 	br	80d564 <__alt_mem_onchip_mem+0xff78d564>
  80d6f8:	2988b03a 	or	r4,r5,r6
  80d6fc:	203f5c26 	beq	r4,zero,80d470 <__alt_mem_onchip_mem+0xff78d470>
  80d700:	10bfffc4 	addi	r2,r2,-1
  80d704:	1000931e 	bne	r2,zero,80d954 <__subdf3+0x568>
  80d708:	898d883a 	add	r6,r17,r6
  80d70c:	3463803a 	cmpltu	r17,r6,r17
  80d710:	1947883a 	add	r3,r3,r5
  80d714:	88c7883a 	add	r3,r17,r3
  80d718:	3023883a 	mov	r17,r6
  80d71c:	003fd306 	br	80d66c <__alt_mem_onchip_mem+0xff78d66c>
  80d720:	1000541e 	bne	r2,zero,80d874 <__subdf3+0x488>
  80d724:	80800044 	addi	r2,r16,1
  80d728:	1081ffcc 	andi	r2,r2,2047
  80d72c:	01000044 	movi	r4,1
  80d730:	2080a20e 	bge	r4,r2,80d9bc <__subdf3+0x5d0>
  80d734:	8989c83a 	sub	r4,r17,r6
  80d738:	8905803a 	cmpltu	r2,r17,r4
  80d73c:	1967c83a 	sub	r19,r3,r5
  80d740:	98a7c83a 	sub	r19,r19,r2
  80d744:	9880202c 	andhi	r2,r19,128
  80d748:	10006326 	beq	r2,zero,80d8d8 <__subdf3+0x4ec>
  80d74c:	3463c83a 	sub	r17,r6,r17
  80d750:	28c7c83a 	sub	r3,r5,r3
  80d754:	344d803a 	cmpltu	r6,r6,r17
  80d758:	19a7c83a 	sub	r19,r3,r6
  80d75c:	3825883a 	mov	r18,r7
  80d760:	983f861e 	bne	r19,zero,80d57c <__alt_mem_onchip_mem+0xff78d57c>
  80d764:	8809883a 	mov	r4,r17
  80d768:	080deec0 	call	80deec <__clzsi2>
  80d76c:	10800804 	addi	r2,r2,32
  80d770:	113ffe04 	addi	r4,r2,-8
  80d774:	00c007c4 	movi	r3,31
  80d778:	193f850e 	bge	r3,r4,80d590 <__alt_mem_onchip_mem+0xff78d590>
  80d77c:	10bff604 	addi	r2,r2,-40
  80d780:	8884983a 	sll	r2,r17,r2
  80d784:	0023883a 	mov	r17,zero
  80d788:	243f880e 	bge	r4,r16,80d5ac <__alt_mem_onchip_mem+0xff78d5ac>
  80d78c:	00ffe034 	movhi	r3,65408
  80d790:	18ffffc4 	addi	r3,r3,-1
  80d794:	8121c83a 	sub	r16,r16,r4
  80d798:	10c6703a 	and	r3,r2,r3
  80d79c:	003f3406 	br	80d470 <__alt_mem_onchip_mem+0xff78d470>
  80d7a0:	9100004c 	andi	r4,r18,1
  80d7a4:	000b883a 	mov	r5,zero
  80d7a8:	0005883a 	mov	r2,zero
  80d7ac:	003f4806 	br	80d4d0 <__alt_mem_onchip_mem+0xff78d4d0>
  80d7b0:	298cb03a 	or	r6,r5,r6
  80d7b4:	300cc03a 	cmpne	r6,r6,zero
  80d7b8:	0005883a 	mov	r2,zero
  80d7bc:	003f6406 	br	80d550 <__alt_mem_onchip_mem+0xff78d550>
  80d7c0:	10009a1e 	bne	r2,zero,80da2c <__subdf3+0x640>
  80d7c4:	82400044 	addi	r9,r16,1
  80d7c8:	4881ffcc 	andi	r2,r9,2047
  80d7cc:	02800044 	movi	r10,1
  80d7d0:	5080670e 	bge	r10,r2,80d970 <__subdf3+0x584>
  80d7d4:	0081ffc4 	movi	r2,2047
  80d7d8:	4880af26 	beq	r9,r2,80da98 <__subdf3+0x6ac>
  80d7dc:	898d883a 	add	r6,r17,r6
  80d7e0:	1945883a 	add	r2,r3,r5
  80d7e4:	3447803a 	cmpltu	r3,r6,r17
  80d7e8:	1887883a 	add	r3,r3,r2
  80d7ec:	182297fa 	slli	r17,r3,31
  80d7f0:	300cd07a 	srli	r6,r6,1
  80d7f4:	1806d07a 	srli	r3,r3,1
  80d7f8:	4821883a 	mov	r16,r9
  80d7fc:	89a2b03a 	or	r17,r17,r6
  80d800:	003f1b06 	br	80d470 <__alt_mem_onchip_mem+0xff78d470>
  80d804:	0101ffc4 	movi	r4,2047
  80d808:	813f441e 	bne	r16,r4,80d51c <__alt_mem_onchip_mem+0xff78d51c>
  80d80c:	003f1806 	br	80d470 <__alt_mem_onchip_mem+0xff78d470>
  80d810:	843ff844 	addi	r16,r16,-31
  80d814:	01400804 	movi	r5,32
  80d818:	1408d83a 	srl	r4,r2,r16
  80d81c:	19405026 	beq	r3,r5,80d960 <__subdf3+0x574>
  80d820:	01401004 	movi	r5,64
  80d824:	28c7c83a 	sub	r3,r5,r3
  80d828:	10c4983a 	sll	r2,r2,r3
  80d82c:	88a2b03a 	or	r17,r17,r2
  80d830:	8822c03a 	cmpne	r17,r17,zero
  80d834:	2462b03a 	or	r17,r4,r17
  80d838:	0007883a 	mov	r3,zero
  80d83c:	0021883a 	mov	r16,zero
  80d840:	003f6d06 	br	80d5f8 <__alt_mem_onchip_mem+0xff78d5f8>
  80d844:	11fff804 	addi	r7,r2,-32
  80d848:	01000804 	movi	r4,32
  80d84c:	29ced83a 	srl	r7,r5,r7
  80d850:	11004526 	beq	r2,r4,80d968 <__subdf3+0x57c>
  80d854:	01001004 	movi	r4,64
  80d858:	2089c83a 	sub	r4,r4,r2
  80d85c:	2904983a 	sll	r2,r5,r4
  80d860:	118cb03a 	or	r6,r2,r6
  80d864:	300cc03a 	cmpne	r6,r6,zero
  80d868:	398cb03a 	or	r6,r7,r6
  80d86c:	0005883a 	mov	r2,zero
  80d870:	003f3706 	br	80d550 <__alt_mem_onchip_mem+0xff78d550>
  80d874:	80002a26 	beq	r16,zero,80d920 <__subdf3+0x534>
  80d878:	0101ffc4 	movi	r4,2047
  80d87c:	49006626 	beq	r9,r4,80da18 <__subdf3+0x62c>
  80d880:	0085c83a 	sub	r2,zero,r2
  80d884:	18c02034 	orhi	r3,r3,128
  80d888:	01000e04 	movi	r4,56
  80d88c:	20807e16 	blt	r4,r2,80da88 <__subdf3+0x69c>
  80d890:	010007c4 	movi	r4,31
  80d894:	2080e716 	blt	r4,r2,80dc34 <__subdf3+0x848>
  80d898:	01000804 	movi	r4,32
  80d89c:	2089c83a 	sub	r4,r4,r2
  80d8a0:	1914983a 	sll	r10,r3,r4
  80d8a4:	8890d83a 	srl	r8,r17,r2
  80d8a8:	8908983a 	sll	r4,r17,r4
  80d8ac:	1884d83a 	srl	r2,r3,r2
  80d8b0:	5222b03a 	or	r17,r10,r8
  80d8b4:	2006c03a 	cmpne	r3,r4,zero
  80d8b8:	88e2b03a 	or	r17,r17,r3
  80d8bc:	3463c83a 	sub	r17,r6,r17
  80d8c0:	2885c83a 	sub	r2,r5,r2
  80d8c4:	344d803a 	cmpltu	r6,r6,r17
  80d8c8:	1187c83a 	sub	r3,r2,r6
  80d8cc:	4821883a 	mov	r16,r9
  80d8d0:	3825883a 	mov	r18,r7
  80d8d4:	003f2306 	br	80d564 <__alt_mem_onchip_mem+0xff78d564>
  80d8d8:	24d0b03a 	or	r8,r4,r19
  80d8dc:	40001b1e 	bne	r8,zero,80d94c <__subdf3+0x560>
  80d8e0:	0005883a 	mov	r2,zero
  80d8e4:	0009883a 	mov	r4,zero
  80d8e8:	0021883a 	mov	r16,zero
  80d8ec:	003f4906 	br	80d614 <__alt_mem_onchip_mem+0xff78d614>
  80d8f0:	010007c4 	movi	r4,31
  80d8f4:	20803a16 	blt	r4,r2,80d9e0 <__subdf3+0x5f4>
  80d8f8:	01000804 	movi	r4,32
  80d8fc:	2089c83a 	sub	r4,r4,r2
  80d900:	2912983a 	sll	r9,r5,r4
  80d904:	3090d83a 	srl	r8,r6,r2
  80d908:	3108983a 	sll	r4,r6,r4
  80d90c:	2884d83a 	srl	r2,r5,r2
  80d910:	4a12b03a 	or	r9,r9,r8
  80d914:	2008c03a 	cmpne	r4,r4,zero
  80d918:	4912b03a 	or	r9,r9,r4
  80d91c:	003f4e06 	br	80d658 <__alt_mem_onchip_mem+0xff78d658>
  80d920:	1c48b03a 	or	r4,r3,r17
  80d924:	20003c26 	beq	r4,zero,80da18 <__subdf3+0x62c>
  80d928:	0084303a 	nor	r2,zero,r2
  80d92c:	1000381e 	bne	r2,zero,80da10 <__subdf3+0x624>
  80d930:	3463c83a 	sub	r17,r6,r17
  80d934:	28c5c83a 	sub	r2,r5,r3
  80d938:	344d803a 	cmpltu	r6,r6,r17
  80d93c:	1187c83a 	sub	r3,r2,r6
  80d940:	4821883a 	mov	r16,r9
  80d944:	3825883a 	mov	r18,r7
  80d948:	003f0606 	br	80d564 <__alt_mem_onchip_mem+0xff78d564>
  80d94c:	2023883a 	mov	r17,r4
  80d950:	003f0906 	br	80d578 <__alt_mem_onchip_mem+0xff78d578>
  80d954:	0101ffc4 	movi	r4,2047
  80d958:	813f3a1e 	bne	r16,r4,80d644 <__alt_mem_onchip_mem+0xff78d644>
  80d95c:	003ec406 	br	80d470 <__alt_mem_onchip_mem+0xff78d470>
  80d960:	0005883a 	mov	r2,zero
  80d964:	003fb106 	br	80d82c <__alt_mem_onchip_mem+0xff78d82c>
  80d968:	0005883a 	mov	r2,zero
  80d96c:	003fbc06 	br	80d860 <__alt_mem_onchip_mem+0xff78d860>
  80d970:	1c44b03a 	or	r2,r3,r17
  80d974:	80008e1e 	bne	r16,zero,80dbb0 <__subdf3+0x7c4>
  80d978:	1000c826 	beq	r2,zero,80dc9c <__subdf3+0x8b0>
  80d97c:	2984b03a 	or	r2,r5,r6
  80d980:	103ebb26 	beq	r2,zero,80d470 <__alt_mem_onchip_mem+0xff78d470>
  80d984:	8989883a 	add	r4,r17,r6
  80d988:	1945883a 	add	r2,r3,r5
  80d98c:	2447803a 	cmpltu	r3,r4,r17
  80d990:	1887883a 	add	r3,r3,r2
  80d994:	1880202c 	andhi	r2,r3,128
  80d998:	2023883a 	mov	r17,r4
  80d99c:	103f1626 	beq	r2,zero,80d5f8 <__alt_mem_onchip_mem+0xff78d5f8>
  80d9a0:	00bfe034 	movhi	r2,65408
  80d9a4:	10bfffc4 	addi	r2,r2,-1
  80d9a8:	5021883a 	mov	r16,r10
  80d9ac:	1886703a 	and	r3,r3,r2
  80d9b0:	003eaf06 	br	80d470 <__alt_mem_onchip_mem+0xff78d470>
  80d9b4:	3825883a 	mov	r18,r7
  80d9b8:	003f0f06 	br	80d5f8 <__alt_mem_onchip_mem+0xff78d5f8>
  80d9bc:	1c44b03a 	or	r2,r3,r17
  80d9c0:	8000251e 	bne	r16,zero,80da58 <__subdf3+0x66c>
  80d9c4:	1000661e 	bne	r2,zero,80db60 <__subdf3+0x774>
  80d9c8:	2990b03a 	or	r8,r5,r6
  80d9cc:	40009626 	beq	r8,zero,80dc28 <__subdf3+0x83c>
  80d9d0:	2807883a 	mov	r3,r5
  80d9d4:	3023883a 	mov	r17,r6
  80d9d8:	3825883a 	mov	r18,r7
  80d9dc:	003ea406 	br	80d470 <__alt_mem_onchip_mem+0xff78d470>
  80d9e0:	127ff804 	addi	r9,r2,-32
  80d9e4:	01000804 	movi	r4,32
  80d9e8:	2a52d83a 	srl	r9,r5,r9
  80d9ec:	11008c26 	beq	r2,r4,80dc20 <__subdf3+0x834>
  80d9f0:	01001004 	movi	r4,64
  80d9f4:	2085c83a 	sub	r2,r4,r2
  80d9f8:	2884983a 	sll	r2,r5,r2
  80d9fc:	118cb03a 	or	r6,r2,r6
  80da00:	300cc03a 	cmpne	r6,r6,zero
  80da04:	4992b03a 	or	r9,r9,r6
  80da08:	0005883a 	mov	r2,zero
  80da0c:	003f1206 	br	80d658 <__alt_mem_onchip_mem+0xff78d658>
  80da10:	0101ffc4 	movi	r4,2047
  80da14:	493f9c1e 	bne	r9,r4,80d888 <__alt_mem_onchip_mem+0xff78d888>
  80da18:	2807883a 	mov	r3,r5
  80da1c:	3023883a 	mov	r17,r6
  80da20:	4821883a 	mov	r16,r9
  80da24:	3825883a 	mov	r18,r7
  80da28:	003e9106 	br	80d470 <__alt_mem_onchip_mem+0xff78d470>
  80da2c:	80001f1e 	bne	r16,zero,80daac <__subdf3+0x6c0>
  80da30:	1c48b03a 	or	r4,r3,r17
  80da34:	20005a26 	beq	r4,zero,80dba0 <__subdf3+0x7b4>
  80da38:	0084303a 	nor	r2,zero,r2
  80da3c:	1000561e 	bne	r2,zero,80db98 <__subdf3+0x7ac>
  80da40:	89a3883a 	add	r17,r17,r6
  80da44:	1945883a 	add	r2,r3,r5
  80da48:	898d803a 	cmpltu	r6,r17,r6
  80da4c:	3087883a 	add	r3,r6,r2
  80da50:	4821883a 	mov	r16,r9
  80da54:	003f0506 	br	80d66c <__alt_mem_onchip_mem+0xff78d66c>
  80da58:	10002b1e 	bne	r2,zero,80db08 <__subdf3+0x71c>
  80da5c:	2984b03a 	or	r2,r5,r6
  80da60:	10008026 	beq	r2,zero,80dc64 <__subdf3+0x878>
  80da64:	2807883a 	mov	r3,r5
  80da68:	3023883a 	mov	r17,r6
  80da6c:	3825883a 	mov	r18,r7
  80da70:	0401ffc4 	movi	r16,2047
  80da74:	003e7e06 	br	80d470 <__alt_mem_onchip_mem+0xff78d470>
  80da78:	3809883a 	mov	r4,r7
  80da7c:	0011883a 	mov	r8,zero
  80da80:	0005883a 	mov	r2,zero
  80da84:	003ee306 	br	80d614 <__alt_mem_onchip_mem+0xff78d614>
  80da88:	1c62b03a 	or	r17,r3,r17
  80da8c:	8822c03a 	cmpne	r17,r17,zero
  80da90:	0005883a 	mov	r2,zero
  80da94:	003f8906 	br	80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80da98:	3809883a 	mov	r4,r7
  80da9c:	4821883a 	mov	r16,r9
  80daa0:	0011883a 	mov	r8,zero
  80daa4:	0005883a 	mov	r2,zero
  80daa8:	003eda06 	br	80d614 <__alt_mem_onchip_mem+0xff78d614>
  80daac:	0101ffc4 	movi	r4,2047
  80dab0:	49003b26 	beq	r9,r4,80dba0 <__subdf3+0x7b4>
  80dab4:	0085c83a 	sub	r2,zero,r2
  80dab8:	18c02034 	orhi	r3,r3,128
  80dabc:	01000e04 	movi	r4,56
  80dac0:	20806e16 	blt	r4,r2,80dc7c <__subdf3+0x890>
  80dac4:	010007c4 	movi	r4,31
  80dac8:	20807716 	blt	r4,r2,80dca8 <__subdf3+0x8bc>
  80dacc:	01000804 	movi	r4,32
  80dad0:	2089c83a 	sub	r4,r4,r2
  80dad4:	1914983a 	sll	r10,r3,r4
  80dad8:	8890d83a 	srl	r8,r17,r2
  80dadc:	8908983a 	sll	r4,r17,r4
  80dae0:	1884d83a 	srl	r2,r3,r2
  80dae4:	5222b03a 	or	r17,r10,r8
  80dae8:	2006c03a 	cmpne	r3,r4,zero
  80daec:	88e2b03a 	or	r17,r17,r3
  80daf0:	89a3883a 	add	r17,r17,r6
  80daf4:	1145883a 	add	r2,r2,r5
  80daf8:	898d803a 	cmpltu	r6,r17,r6
  80dafc:	3087883a 	add	r3,r6,r2
  80db00:	4821883a 	mov	r16,r9
  80db04:	003ed906 	br	80d66c <__alt_mem_onchip_mem+0xff78d66c>
  80db08:	2984b03a 	or	r2,r5,r6
  80db0c:	10004226 	beq	r2,zero,80dc18 <__subdf3+0x82c>
  80db10:	1808d0fa 	srli	r4,r3,3
  80db14:	8822d0fa 	srli	r17,r17,3
  80db18:	1806977a 	slli	r3,r3,29
  80db1c:	2080022c 	andhi	r2,r4,8
  80db20:	1c62b03a 	or	r17,r3,r17
  80db24:	10000826 	beq	r2,zero,80db48 <__subdf3+0x75c>
  80db28:	2812d0fa 	srli	r9,r5,3
  80db2c:	4880022c 	andhi	r2,r9,8
  80db30:	1000051e 	bne	r2,zero,80db48 <__subdf3+0x75c>
  80db34:	300cd0fa 	srli	r6,r6,3
  80db38:	2804977a 	slli	r2,r5,29
  80db3c:	4809883a 	mov	r4,r9
  80db40:	3825883a 	mov	r18,r7
  80db44:	11a2b03a 	or	r17,r2,r6
  80db48:	8806d77a 	srli	r3,r17,29
  80db4c:	200890fa 	slli	r4,r4,3
  80db50:	882290fa 	slli	r17,r17,3
  80db54:	0401ffc4 	movi	r16,2047
  80db58:	1906b03a 	or	r3,r3,r4
  80db5c:	003e4406 	br	80d470 <__alt_mem_onchip_mem+0xff78d470>
  80db60:	2984b03a 	or	r2,r5,r6
  80db64:	103e4226 	beq	r2,zero,80d470 <__alt_mem_onchip_mem+0xff78d470>
  80db68:	8989c83a 	sub	r4,r17,r6
  80db6c:	8911803a 	cmpltu	r8,r17,r4
  80db70:	1945c83a 	sub	r2,r3,r5
  80db74:	1205c83a 	sub	r2,r2,r8
  80db78:	1200202c 	andhi	r8,r2,128
  80db7c:	403e9a26 	beq	r8,zero,80d5e8 <__alt_mem_onchip_mem+0xff78d5e8>
  80db80:	3463c83a 	sub	r17,r6,r17
  80db84:	28c5c83a 	sub	r2,r5,r3
  80db88:	344d803a 	cmpltu	r6,r6,r17
  80db8c:	1187c83a 	sub	r3,r2,r6
  80db90:	3825883a 	mov	r18,r7
  80db94:	003e3606 	br	80d470 <__alt_mem_onchip_mem+0xff78d470>
  80db98:	0101ffc4 	movi	r4,2047
  80db9c:	493fc71e 	bne	r9,r4,80dabc <__alt_mem_onchip_mem+0xff78dabc>
  80dba0:	2807883a 	mov	r3,r5
  80dba4:	3023883a 	mov	r17,r6
  80dba8:	4821883a 	mov	r16,r9
  80dbac:	003e3006 	br	80d470 <__alt_mem_onchip_mem+0xff78d470>
  80dbb0:	10003626 	beq	r2,zero,80dc8c <__subdf3+0x8a0>
  80dbb4:	2984b03a 	or	r2,r5,r6
  80dbb8:	10001726 	beq	r2,zero,80dc18 <__subdf3+0x82c>
  80dbbc:	1808d0fa 	srli	r4,r3,3
  80dbc0:	8822d0fa 	srli	r17,r17,3
  80dbc4:	1806977a 	slli	r3,r3,29
  80dbc8:	2080022c 	andhi	r2,r4,8
  80dbcc:	1c62b03a 	or	r17,r3,r17
  80dbd0:	10000726 	beq	r2,zero,80dbf0 <__subdf3+0x804>
  80dbd4:	2812d0fa 	srli	r9,r5,3
  80dbd8:	4880022c 	andhi	r2,r9,8
  80dbdc:	1000041e 	bne	r2,zero,80dbf0 <__subdf3+0x804>
  80dbe0:	300cd0fa 	srli	r6,r6,3
  80dbe4:	2804977a 	slli	r2,r5,29
  80dbe8:	4809883a 	mov	r4,r9
  80dbec:	11a2b03a 	or	r17,r2,r6
  80dbf0:	8806d77a 	srli	r3,r17,29
  80dbf4:	200890fa 	slli	r4,r4,3
  80dbf8:	882290fa 	slli	r17,r17,3
  80dbfc:	3825883a 	mov	r18,r7
  80dc00:	1906b03a 	or	r3,r3,r4
  80dc04:	0401ffc4 	movi	r16,2047
  80dc08:	003e1906 	br	80d470 <__alt_mem_onchip_mem+0xff78d470>
  80dc0c:	000b883a 	mov	r5,zero
  80dc10:	0005883a 	mov	r2,zero
  80dc14:	003e2e06 	br	80d4d0 <__alt_mem_onchip_mem+0xff78d4d0>
  80dc18:	0401ffc4 	movi	r16,2047
  80dc1c:	003e1406 	br	80d470 <__alt_mem_onchip_mem+0xff78d470>
  80dc20:	0005883a 	mov	r2,zero
  80dc24:	003f7506 	br	80d9fc <__alt_mem_onchip_mem+0xff78d9fc>
  80dc28:	0005883a 	mov	r2,zero
  80dc2c:	0009883a 	mov	r4,zero
  80dc30:	003e7806 	br	80d614 <__alt_mem_onchip_mem+0xff78d614>
  80dc34:	123ff804 	addi	r8,r2,-32
  80dc38:	01000804 	movi	r4,32
  80dc3c:	1a10d83a 	srl	r8,r3,r8
  80dc40:	11002526 	beq	r2,r4,80dcd8 <__subdf3+0x8ec>
  80dc44:	01001004 	movi	r4,64
  80dc48:	2085c83a 	sub	r2,r4,r2
  80dc4c:	1884983a 	sll	r2,r3,r2
  80dc50:	1444b03a 	or	r2,r2,r17
  80dc54:	1004c03a 	cmpne	r2,r2,zero
  80dc58:	40a2b03a 	or	r17,r8,r2
  80dc5c:	0005883a 	mov	r2,zero
  80dc60:	003f1606 	br	80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80dc64:	02000434 	movhi	r8,16
  80dc68:	0009883a 	mov	r4,zero
  80dc6c:	423fffc4 	addi	r8,r8,-1
  80dc70:	00bfffc4 	movi	r2,-1
  80dc74:	0401ffc4 	movi	r16,2047
  80dc78:	003e6606 	br	80d614 <__alt_mem_onchip_mem+0xff78d614>
  80dc7c:	1c62b03a 	or	r17,r3,r17
  80dc80:	8822c03a 	cmpne	r17,r17,zero
  80dc84:	0005883a 	mov	r2,zero
  80dc88:	003f9906 	br	80daf0 <__alt_mem_onchip_mem+0xff78daf0>
  80dc8c:	2807883a 	mov	r3,r5
  80dc90:	3023883a 	mov	r17,r6
  80dc94:	0401ffc4 	movi	r16,2047
  80dc98:	003df506 	br	80d470 <__alt_mem_onchip_mem+0xff78d470>
  80dc9c:	2807883a 	mov	r3,r5
  80dca0:	3023883a 	mov	r17,r6
  80dca4:	003df206 	br	80d470 <__alt_mem_onchip_mem+0xff78d470>
  80dca8:	123ff804 	addi	r8,r2,-32
  80dcac:	01000804 	movi	r4,32
  80dcb0:	1a10d83a 	srl	r8,r3,r8
  80dcb4:	11000a26 	beq	r2,r4,80dce0 <__subdf3+0x8f4>
  80dcb8:	01001004 	movi	r4,64
  80dcbc:	2085c83a 	sub	r2,r4,r2
  80dcc0:	1884983a 	sll	r2,r3,r2
  80dcc4:	1444b03a 	or	r2,r2,r17
  80dcc8:	1004c03a 	cmpne	r2,r2,zero
  80dccc:	40a2b03a 	or	r17,r8,r2
  80dcd0:	0005883a 	mov	r2,zero
  80dcd4:	003f8606 	br	80daf0 <__alt_mem_onchip_mem+0xff78daf0>
  80dcd8:	0005883a 	mov	r2,zero
  80dcdc:	003fdc06 	br	80dc50 <__alt_mem_onchip_mem+0xff78dc50>
  80dce0:	0005883a 	mov	r2,zero
  80dce4:	003ff706 	br	80dcc4 <__alt_mem_onchip_mem+0xff78dcc4>

0080dce8 <__fixdfsi>:
  80dce8:	280cd53a 	srli	r6,r5,20
  80dcec:	00c00434 	movhi	r3,16
  80dcf0:	18ffffc4 	addi	r3,r3,-1
  80dcf4:	3181ffcc 	andi	r6,r6,2047
  80dcf8:	01c0ff84 	movi	r7,1022
  80dcfc:	28c6703a 	and	r3,r5,r3
  80dd00:	280ad7fa 	srli	r5,r5,31
  80dd04:	3980120e 	bge	r7,r6,80dd50 <__fixdfsi+0x68>
  80dd08:	00810744 	movi	r2,1053
  80dd0c:	11800c16 	blt	r2,r6,80dd40 <__fixdfsi+0x58>
  80dd10:	00810cc4 	movi	r2,1075
  80dd14:	1185c83a 	sub	r2,r2,r6
  80dd18:	01c007c4 	movi	r7,31
  80dd1c:	18c00434 	orhi	r3,r3,16
  80dd20:	38800d16 	blt	r7,r2,80dd58 <__fixdfsi+0x70>
  80dd24:	31befb44 	addi	r6,r6,-1043
  80dd28:	2084d83a 	srl	r2,r4,r2
  80dd2c:	1986983a 	sll	r3,r3,r6
  80dd30:	1884b03a 	or	r2,r3,r2
  80dd34:	28000726 	beq	r5,zero,80dd54 <__fixdfsi+0x6c>
  80dd38:	0085c83a 	sub	r2,zero,r2
  80dd3c:	f800283a 	ret
  80dd40:	00a00034 	movhi	r2,32768
  80dd44:	10bfffc4 	addi	r2,r2,-1
  80dd48:	2885883a 	add	r2,r5,r2
  80dd4c:	f800283a 	ret
  80dd50:	0005883a 	mov	r2,zero
  80dd54:	f800283a 	ret
  80dd58:	008104c4 	movi	r2,1043
  80dd5c:	1185c83a 	sub	r2,r2,r6
  80dd60:	1884d83a 	srl	r2,r3,r2
  80dd64:	003ff306 	br	80dd34 <__alt_mem_onchip_mem+0xff78dd34>

0080dd68 <__floatsidf>:
  80dd68:	defffd04 	addi	sp,sp,-12
  80dd6c:	dfc00215 	stw	ra,8(sp)
  80dd70:	dc400115 	stw	r17,4(sp)
  80dd74:	dc000015 	stw	r16,0(sp)
  80dd78:	20002b26 	beq	r4,zero,80de28 <__floatsidf+0xc0>
  80dd7c:	2023883a 	mov	r17,r4
  80dd80:	2020d7fa 	srli	r16,r4,31
  80dd84:	20002d16 	blt	r4,zero,80de3c <__floatsidf+0xd4>
  80dd88:	8809883a 	mov	r4,r17
  80dd8c:	080deec0 	call	80deec <__clzsi2>
  80dd90:	01410784 	movi	r5,1054
  80dd94:	288bc83a 	sub	r5,r5,r2
  80dd98:	01010cc4 	movi	r4,1075
  80dd9c:	2149c83a 	sub	r4,r4,r5
  80dda0:	00c007c4 	movi	r3,31
  80dda4:	1900160e 	bge	r3,r4,80de00 <__floatsidf+0x98>
  80dda8:	00c104c4 	movi	r3,1043
  80ddac:	1947c83a 	sub	r3,r3,r5
  80ddb0:	88c6983a 	sll	r3,r17,r3
  80ddb4:	00800434 	movhi	r2,16
  80ddb8:	10bfffc4 	addi	r2,r2,-1
  80ddbc:	1886703a 	and	r3,r3,r2
  80ddc0:	2941ffcc 	andi	r5,r5,2047
  80ddc4:	800d883a 	mov	r6,r16
  80ddc8:	0005883a 	mov	r2,zero
  80ddcc:	280a953a 	slli	r5,r5,20
  80ddd0:	31803fcc 	andi	r6,r6,255
  80ddd4:	01000434 	movhi	r4,16
  80ddd8:	300c97fa 	slli	r6,r6,31
  80dddc:	213fffc4 	addi	r4,r4,-1
  80dde0:	1906703a 	and	r3,r3,r4
  80dde4:	1946b03a 	or	r3,r3,r5
  80dde8:	1986b03a 	or	r3,r3,r6
  80ddec:	dfc00217 	ldw	ra,8(sp)
  80ddf0:	dc400117 	ldw	r17,4(sp)
  80ddf4:	dc000017 	ldw	r16,0(sp)
  80ddf8:	dec00304 	addi	sp,sp,12
  80ddfc:	f800283a 	ret
  80de00:	00c002c4 	movi	r3,11
  80de04:	1887c83a 	sub	r3,r3,r2
  80de08:	88c6d83a 	srl	r3,r17,r3
  80de0c:	8904983a 	sll	r2,r17,r4
  80de10:	01000434 	movhi	r4,16
  80de14:	213fffc4 	addi	r4,r4,-1
  80de18:	2941ffcc 	andi	r5,r5,2047
  80de1c:	1906703a 	and	r3,r3,r4
  80de20:	800d883a 	mov	r6,r16
  80de24:	003fe906 	br	80ddcc <__alt_mem_onchip_mem+0xff78ddcc>
  80de28:	000d883a 	mov	r6,zero
  80de2c:	000b883a 	mov	r5,zero
  80de30:	0007883a 	mov	r3,zero
  80de34:	0005883a 	mov	r2,zero
  80de38:	003fe406 	br	80ddcc <__alt_mem_onchip_mem+0xff78ddcc>
  80de3c:	0123c83a 	sub	r17,zero,r4
  80de40:	003fd106 	br	80dd88 <__alt_mem_onchip_mem+0xff78dd88>

0080de44 <__floatunsidf>:
  80de44:	defffe04 	addi	sp,sp,-8
  80de48:	dc000015 	stw	r16,0(sp)
  80de4c:	dfc00115 	stw	ra,4(sp)
  80de50:	2021883a 	mov	r16,r4
  80de54:	20002226 	beq	r4,zero,80dee0 <__floatunsidf+0x9c>
  80de58:	080deec0 	call	80deec <__clzsi2>
  80de5c:	01010784 	movi	r4,1054
  80de60:	2089c83a 	sub	r4,r4,r2
  80de64:	01810cc4 	movi	r6,1075
  80de68:	310dc83a 	sub	r6,r6,r4
  80de6c:	00c007c4 	movi	r3,31
  80de70:	1980120e 	bge	r3,r6,80debc <__floatunsidf+0x78>
  80de74:	00c104c4 	movi	r3,1043
  80de78:	1907c83a 	sub	r3,r3,r4
  80de7c:	80ca983a 	sll	r5,r16,r3
  80de80:	00800434 	movhi	r2,16
  80de84:	10bfffc4 	addi	r2,r2,-1
  80de88:	2101ffcc 	andi	r4,r4,2047
  80de8c:	0021883a 	mov	r16,zero
  80de90:	288a703a 	and	r5,r5,r2
  80de94:	2008953a 	slli	r4,r4,20
  80de98:	00c00434 	movhi	r3,16
  80de9c:	18ffffc4 	addi	r3,r3,-1
  80dea0:	28c6703a 	and	r3,r5,r3
  80dea4:	8005883a 	mov	r2,r16
  80dea8:	1906b03a 	or	r3,r3,r4
  80deac:	dfc00117 	ldw	ra,4(sp)
  80deb0:	dc000017 	ldw	r16,0(sp)
  80deb4:	dec00204 	addi	sp,sp,8
  80deb8:	f800283a 	ret
  80debc:	00c002c4 	movi	r3,11
  80dec0:	188bc83a 	sub	r5,r3,r2
  80dec4:	814ad83a 	srl	r5,r16,r5
  80dec8:	00c00434 	movhi	r3,16
  80decc:	18ffffc4 	addi	r3,r3,-1
  80ded0:	81a0983a 	sll	r16,r16,r6
  80ded4:	2101ffcc 	andi	r4,r4,2047
  80ded8:	28ca703a 	and	r5,r5,r3
  80dedc:	003fed06 	br	80de94 <__alt_mem_onchip_mem+0xff78de94>
  80dee0:	0009883a 	mov	r4,zero
  80dee4:	000b883a 	mov	r5,zero
  80dee8:	003fea06 	br	80de94 <__alt_mem_onchip_mem+0xff78de94>

0080deec <__clzsi2>:
  80deec:	00bfffd4 	movui	r2,65535
  80def0:	11000536 	bltu	r2,r4,80df08 <__clzsi2+0x1c>
  80def4:	00803fc4 	movi	r2,255
  80def8:	11000f36 	bltu	r2,r4,80df38 <__clzsi2+0x4c>
  80defc:	00800804 	movi	r2,32
  80df00:	0007883a 	mov	r3,zero
  80df04:	00000506 	br	80df1c <__clzsi2+0x30>
  80df08:	00804034 	movhi	r2,256
  80df0c:	10bfffc4 	addi	r2,r2,-1
  80df10:	11000c2e 	bgeu	r2,r4,80df44 <__clzsi2+0x58>
  80df14:	00800204 	movi	r2,8
  80df18:	00c00604 	movi	r3,24
  80df1c:	20c8d83a 	srl	r4,r4,r3
  80df20:	00c02074 	movhi	r3,129
  80df24:	18c90d04 	addi	r3,r3,9268
  80df28:	1909883a 	add	r4,r3,r4
  80df2c:	20c00003 	ldbu	r3,0(r4)
  80df30:	10c5c83a 	sub	r2,r2,r3
  80df34:	f800283a 	ret
  80df38:	00800604 	movi	r2,24
  80df3c:	00c00204 	movi	r3,8
  80df40:	003ff606 	br	80df1c <__alt_mem_onchip_mem+0xff78df1c>
  80df44:	00800404 	movi	r2,16
  80df48:	1007883a 	mov	r3,r2
  80df4c:	003ff306 	br	80df1c <__alt_mem_onchip_mem+0xff78df1c>

0080df50 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80df50:	defff504 	addi	sp,sp,-44
  80df54:	df000a15 	stw	fp,40(sp)
  80df58:	df000a04 	addi	fp,sp,40
  80df5c:	e13ffc15 	stw	r4,-16(fp)
  80df60:	e17ffd15 	stw	r5,-12(fp)
  80df64:	e1bffe15 	stw	r6,-8(fp)
  80df68:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80df6c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80df70:	d0a76417 	ldw	r2,-25200(gp)
  
  if (alt_ticks_per_second ())
  80df74:	10003c26 	beq	r2,zero,80e068 <alt_alarm_start+0x118>
  {
    if (alarm)
  80df78:	e0bffc17 	ldw	r2,-16(fp)
  80df7c:	10003826 	beq	r2,zero,80e060 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80df80:	e0bffc17 	ldw	r2,-16(fp)
  80df84:	e0fffe17 	ldw	r3,-8(fp)
  80df88:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80df8c:	e0bffc17 	ldw	r2,-16(fp)
  80df90:	e0ffff17 	ldw	r3,-4(fp)
  80df94:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80df98:	0005303a 	rdctl	r2,status
  80df9c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dfa0:	e0fff917 	ldw	r3,-28(fp)
  80dfa4:	00bfff84 	movi	r2,-2
  80dfa8:	1884703a 	and	r2,r3,r2
  80dfac:	1001703a 	wrctl	status,r2
  
  return context;
  80dfb0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80dfb4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80dfb8:	d0a76517 	ldw	r2,-25196(gp)
      
      current_nticks = alt_nticks();
  80dfbc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80dfc0:	e0fffd17 	ldw	r3,-12(fp)
  80dfc4:	e0bff617 	ldw	r2,-40(fp)
  80dfc8:	1885883a 	add	r2,r3,r2
  80dfcc:	10c00044 	addi	r3,r2,1
  80dfd0:	e0bffc17 	ldw	r2,-16(fp)
  80dfd4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80dfd8:	e0bffc17 	ldw	r2,-16(fp)
  80dfdc:	10c00217 	ldw	r3,8(r2)
  80dfe0:	e0bff617 	ldw	r2,-40(fp)
  80dfe4:	1880042e 	bgeu	r3,r2,80dff8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80dfe8:	e0bffc17 	ldw	r2,-16(fp)
  80dfec:	00c00044 	movi	r3,1
  80dff0:	10c00405 	stb	r3,16(r2)
  80dff4:	00000206 	br	80e000 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80dff8:	e0bffc17 	ldw	r2,-16(fp)
  80dffc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80e000:	e0bffc17 	ldw	r2,-16(fp)
  80e004:	d0e01004 	addi	r3,gp,-32704
  80e008:	e0fffa15 	stw	r3,-24(fp)
  80e00c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80e010:	e0bffb17 	ldw	r2,-20(fp)
  80e014:	e0fffa17 	ldw	r3,-24(fp)
  80e018:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80e01c:	e0bffa17 	ldw	r2,-24(fp)
  80e020:	10c00017 	ldw	r3,0(r2)
  80e024:	e0bffb17 	ldw	r2,-20(fp)
  80e028:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80e02c:	e0bffa17 	ldw	r2,-24(fp)
  80e030:	10800017 	ldw	r2,0(r2)
  80e034:	e0fffb17 	ldw	r3,-20(fp)
  80e038:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80e03c:	e0bffa17 	ldw	r2,-24(fp)
  80e040:	e0fffb17 	ldw	r3,-20(fp)
  80e044:	10c00015 	stw	r3,0(r2)
  80e048:	e0bff817 	ldw	r2,-32(fp)
  80e04c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e050:	e0bff717 	ldw	r2,-36(fp)
  80e054:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80e058:	0005883a 	mov	r2,zero
  80e05c:	00000306 	br	80e06c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80e060:	00bffa84 	movi	r2,-22
  80e064:	00000106 	br	80e06c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80e068:	00bfde84 	movi	r2,-134
  }
}
  80e06c:	e037883a 	mov	sp,fp
  80e070:	df000017 	ldw	fp,0(sp)
  80e074:	dec00104 	addi	sp,sp,4
  80e078:	f800283a 	ret

0080e07c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e07c:	defffe04 	addi	sp,sp,-8
  80e080:	dfc00115 	stw	ra,4(sp)
  80e084:	df000015 	stw	fp,0(sp)
  80e088:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e08c:	d0a00d17 	ldw	r2,-32716(gp)
  80e090:	10000326 	beq	r2,zero,80e0a0 <alt_get_errno+0x24>
  80e094:	d0a00d17 	ldw	r2,-32716(gp)
  80e098:	103ee83a 	callr	r2
  80e09c:	00000106 	br	80e0a4 <alt_get_errno+0x28>
  80e0a0:	d0a75904 	addi	r2,gp,-25244
}
  80e0a4:	e037883a 	mov	sp,fp
  80e0a8:	dfc00117 	ldw	ra,4(sp)
  80e0ac:	df000017 	ldw	fp,0(sp)
  80e0b0:	dec00204 	addi	sp,sp,8
  80e0b4:	f800283a 	ret

0080e0b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80e0b8:	defffb04 	addi	sp,sp,-20
  80e0bc:	dfc00415 	stw	ra,16(sp)
  80e0c0:	df000315 	stw	fp,12(sp)
  80e0c4:	df000304 	addi	fp,sp,12
  80e0c8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80e0cc:	e0bfff17 	ldw	r2,-4(fp)
  80e0d0:	10000616 	blt	r2,zero,80e0ec <close+0x34>
  80e0d4:	e0bfff17 	ldw	r2,-4(fp)
  80e0d8:	10c00324 	muli	r3,r2,12
  80e0dc:	00802074 	movhi	r2,129
  80e0e0:	108c3104 	addi	r2,r2,12484
  80e0e4:	1885883a 	add	r2,r3,r2
  80e0e8:	00000106 	br	80e0f0 <close+0x38>
  80e0ec:	0005883a 	mov	r2,zero
  80e0f0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80e0f4:	e0bffd17 	ldw	r2,-12(fp)
  80e0f8:	10001926 	beq	r2,zero,80e160 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80e0fc:	e0bffd17 	ldw	r2,-12(fp)
  80e100:	10800017 	ldw	r2,0(r2)
  80e104:	10800417 	ldw	r2,16(r2)
  80e108:	10000626 	beq	r2,zero,80e124 <close+0x6c>
  80e10c:	e0bffd17 	ldw	r2,-12(fp)
  80e110:	10800017 	ldw	r2,0(r2)
  80e114:	10800417 	ldw	r2,16(r2)
  80e118:	e13ffd17 	ldw	r4,-12(fp)
  80e11c:	103ee83a 	callr	r2
  80e120:	00000106 	br	80e128 <close+0x70>
  80e124:	0005883a 	mov	r2,zero
  80e128:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80e12c:	e13fff17 	ldw	r4,-4(fp)
  80e130:	080eb4c0 	call	80eb4c <alt_release_fd>
    if (rval < 0)
  80e134:	e0bffe17 	ldw	r2,-8(fp)
  80e138:	1000070e 	bge	r2,zero,80e158 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80e13c:	080e07c0 	call	80e07c <alt_get_errno>
  80e140:	1007883a 	mov	r3,r2
  80e144:	e0bffe17 	ldw	r2,-8(fp)
  80e148:	0085c83a 	sub	r2,zero,r2
  80e14c:	18800015 	stw	r2,0(r3)
      return -1;
  80e150:	00bfffc4 	movi	r2,-1
  80e154:	00000706 	br	80e174 <close+0xbc>
    }
    return 0;
  80e158:	0005883a 	mov	r2,zero
  80e15c:	00000506 	br	80e174 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e160:	080e07c0 	call	80e07c <alt_get_errno>
  80e164:	1007883a 	mov	r3,r2
  80e168:	00801444 	movi	r2,81
  80e16c:	18800015 	stw	r2,0(r3)
    return -1;
  80e170:	00bfffc4 	movi	r2,-1
  }
}
  80e174:	e037883a 	mov	sp,fp
  80e178:	dfc00117 	ldw	ra,4(sp)
  80e17c:	df000017 	ldw	fp,0(sp)
  80e180:	dec00204 	addi	sp,sp,8
  80e184:	f800283a 	ret

0080e188 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80e188:	defffc04 	addi	sp,sp,-16
  80e18c:	df000315 	stw	fp,12(sp)
  80e190:	df000304 	addi	fp,sp,12
  80e194:	e13ffd15 	stw	r4,-12(fp)
  80e198:	e17ffe15 	stw	r5,-8(fp)
  80e19c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80e1a0:	e0bfff17 	ldw	r2,-4(fp)
}
  80e1a4:	e037883a 	mov	sp,fp
  80e1a8:	df000017 	ldw	fp,0(sp)
  80e1ac:	dec00104 	addi	sp,sp,4
  80e1b0:	f800283a 	ret

0080e1b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e1b4:	defffe04 	addi	sp,sp,-8
  80e1b8:	dfc00115 	stw	ra,4(sp)
  80e1bc:	df000015 	stw	fp,0(sp)
  80e1c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e1c4:	d0a00d17 	ldw	r2,-32716(gp)
  80e1c8:	10000326 	beq	r2,zero,80e1d8 <alt_get_errno+0x24>
  80e1cc:	d0a00d17 	ldw	r2,-32716(gp)
  80e1d0:	103ee83a 	callr	r2
  80e1d4:	00000106 	br	80e1dc <alt_get_errno+0x28>
  80e1d8:	d0a75904 	addi	r2,gp,-25244
}
  80e1dc:	e037883a 	mov	sp,fp
  80e1e0:	dfc00117 	ldw	ra,4(sp)
  80e1e4:	df000017 	ldw	fp,0(sp)
  80e1e8:	dec00204 	addi	sp,sp,8
  80e1ec:	f800283a 	ret

0080e1f0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80e1f0:	defffb04 	addi	sp,sp,-20
  80e1f4:	dfc00415 	stw	ra,16(sp)
  80e1f8:	df000315 	stw	fp,12(sp)
  80e1fc:	df000304 	addi	fp,sp,12
  80e200:	e13ffe15 	stw	r4,-8(fp)
  80e204:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e208:	e0bffe17 	ldw	r2,-8(fp)
  80e20c:	10000616 	blt	r2,zero,80e228 <fstat+0x38>
  80e210:	e0bffe17 	ldw	r2,-8(fp)
  80e214:	10c00324 	muli	r3,r2,12
  80e218:	00802074 	movhi	r2,129
  80e21c:	108c3104 	addi	r2,r2,12484
  80e220:	1885883a 	add	r2,r3,r2
  80e224:	00000106 	br	80e22c <fstat+0x3c>
  80e228:	0005883a 	mov	r2,zero
  80e22c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80e230:	e0bffd17 	ldw	r2,-12(fp)
  80e234:	10001026 	beq	r2,zero,80e278 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80e238:	e0bffd17 	ldw	r2,-12(fp)
  80e23c:	10800017 	ldw	r2,0(r2)
  80e240:	10800817 	ldw	r2,32(r2)
  80e244:	10000726 	beq	r2,zero,80e264 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80e248:	e0bffd17 	ldw	r2,-12(fp)
  80e24c:	10800017 	ldw	r2,0(r2)
  80e250:	10800817 	ldw	r2,32(r2)
  80e254:	e17fff17 	ldw	r5,-4(fp)
  80e258:	e13ffd17 	ldw	r4,-12(fp)
  80e25c:	103ee83a 	callr	r2
  80e260:	00000a06 	br	80e28c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80e264:	e0bfff17 	ldw	r2,-4(fp)
  80e268:	00c80004 	movi	r3,8192
  80e26c:	10c00115 	stw	r3,4(r2)
      return 0;
  80e270:	0005883a 	mov	r2,zero
  80e274:	00000506 	br	80e28c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e278:	080e1b40 	call	80e1b4 <alt_get_errno>
  80e27c:	1007883a 	mov	r3,r2
  80e280:	00801444 	movi	r2,81
  80e284:	18800015 	stw	r2,0(r3)
    return -1;
  80e288:	00bfffc4 	movi	r2,-1
  }
}
  80e28c:	e037883a 	mov	sp,fp
  80e290:	dfc00117 	ldw	ra,4(sp)
  80e294:	df000017 	ldw	fp,0(sp)
  80e298:	dec00204 	addi	sp,sp,8
  80e29c:	f800283a 	ret

0080e2a0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80e2a0:	defff004 	addi	sp,sp,-64
  80e2a4:	df000f15 	stw	fp,60(sp)
  80e2a8:	df000f04 	addi	fp,sp,60
  80e2ac:	e13ffd15 	stw	r4,-12(fp)
  80e2b0:	e17ffe15 	stw	r5,-8(fp)
  80e2b4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  80e2b8:	00bffa84 	movi	r2,-22
  80e2bc:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80e2c0:	e0bffd17 	ldw	r2,-12(fp)
  80e2c4:	10800828 	cmpgeui	r2,r2,32
  80e2c8:	1000501e 	bne	r2,zero,80e40c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e2cc:	0005303a 	rdctl	r2,status
  80e2d0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e2d4:	e0fff617 	ldw	r3,-40(fp)
  80e2d8:	00bfff84 	movi	r2,-2
  80e2dc:	1884703a 	and	r2,r3,r2
  80e2e0:	1001703a 	wrctl	status,r2
  
  return context;
  80e2e4:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80e2e8:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  80e2ec:	00802074 	movhi	r2,129
  80e2f0:	10989904 	addi	r2,r2,25188
  80e2f4:	e0fffd17 	ldw	r3,-12(fp)
  80e2f8:	180690fa 	slli	r3,r3,3
  80e2fc:	10c5883a 	add	r2,r2,r3
  80e300:	e0ffff17 	ldw	r3,-4(fp)
  80e304:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  80e308:	00802074 	movhi	r2,129
  80e30c:	10989904 	addi	r2,r2,25188
  80e310:	e0fffd17 	ldw	r3,-12(fp)
  80e314:	180690fa 	slli	r3,r3,3
  80e318:	10c5883a 	add	r2,r2,r3
  80e31c:	10800104 	addi	r2,r2,4
  80e320:	e0fffe17 	ldw	r3,-8(fp)
  80e324:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80e328:	e0bfff17 	ldw	r2,-4(fp)
  80e32c:	10001926 	beq	r2,zero,80e394 <alt_irq_register+0xf4>
  80e330:	e0bffd17 	ldw	r2,-12(fp)
  80e334:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e338:	0005303a 	rdctl	r2,status
  80e33c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e340:	e0fff717 	ldw	r3,-36(fp)
  80e344:	00bfff84 	movi	r2,-2
  80e348:	1884703a 	and	r2,r3,r2
  80e34c:	1001703a 	wrctl	status,r2
  
  return context;
  80e350:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e354:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80e358:	00c00044 	movi	r3,1
  80e35c:	e0bff217 	ldw	r2,-56(fp)
  80e360:	1884983a 	sll	r2,r3,r2
  80e364:	1007883a 	mov	r3,r2
  80e368:	d0a76017 	ldw	r2,-25216(gp)
  80e36c:	1884b03a 	or	r2,r3,r2
  80e370:	d0a76015 	stw	r2,-25216(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e374:	d0a76017 	ldw	r2,-25216(gp)
  80e378:	100170fa 	wrctl	ienable,r2
  80e37c:	e0bff817 	ldw	r2,-32(fp)
  80e380:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e384:	e0bff917 	ldw	r2,-28(fp)
  80e388:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e38c:	0005883a 	mov	r2,zero
  80e390:	00001906 	br	80e3f8 <alt_irq_register+0x158>
  80e394:	e0bffd17 	ldw	r2,-12(fp)
  80e398:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e39c:	0005303a 	rdctl	r2,status
  80e3a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e3a4:	e0fffa17 	ldw	r3,-24(fp)
  80e3a8:	00bfff84 	movi	r2,-2
  80e3ac:	1884703a 	and	r2,r3,r2
  80e3b0:	1001703a 	wrctl	status,r2
  
  return context;
  80e3b4:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e3b8:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  80e3bc:	00c00044 	movi	r3,1
  80e3c0:	e0bff417 	ldw	r2,-48(fp)
  80e3c4:	1884983a 	sll	r2,r3,r2
  80e3c8:	0084303a 	nor	r2,zero,r2
  80e3cc:	1007883a 	mov	r3,r2
  80e3d0:	d0a76017 	ldw	r2,-25216(gp)
  80e3d4:	1884703a 	and	r2,r3,r2
  80e3d8:	d0a76015 	stw	r2,-25216(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e3dc:	d0a76017 	ldw	r2,-25216(gp)
  80e3e0:	100170fa 	wrctl	ienable,r2
  80e3e4:	e0bffb17 	ldw	r2,-20(fp)
  80e3e8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e3ec:	e0bffc17 	ldw	r2,-16(fp)
  80e3f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e3f4:	0005883a 	mov	r2,zero
  80e3f8:	e0bff115 	stw	r2,-60(fp)
  80e3fc:	e0bff317 	ldw	r2,-52(fp)
  80e400:	e0bff515 	stw	r2,-44(fp)
  80e404:	e0bff517 	ldw	r2,-44(fp)
  80e408:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80e40c:	e0bff117 	ldw	r2,-60(fp)
}
  80e410:	e037883a 	mov	sp,fp
  80e414:	df000017 	ldw	fp,0(sp)
  80e418:	dec00104 	addi	sp,sp,4
  80e41c:	f800283a 	ret

0080e420 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e420:	defffe04 	addi	sp,sp,-8
  80e424:	dfc00115 	stw	ra,4(sp)
  80e428:	df000015 	stw	fp,0(sp)
  80e42c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e430:	d0a00d17 	ldw	r2,-32716(gp)
  80e434:	10000326 	beq	r2,zero,80e444 <alt_get_errno+0x24>
  80e438:	d0a00d17 	ldw	r2,-32716(gp)
  80e43c:	103ee83a 	callr	r2
  80e440:	00000106 	br	80e448 <alt_get_errno+0x28>
  80e444:	d0a75904 	addi	r2,gp,-25244
}
  80e448:	e037883a 	mov	sp,fp
  80e44c:	dfc00117 	ldw	ra,4(sp)
  80e450:	df000017 	ldw	fp,0(sp)
  80e454:	dec00204 	addi	sp,sp,8
  80e458:	f800283a 	ret

0080e45c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80e45c:	deffed04 	addi	sp,sp,-76
  80e460:	dfc01215 	stw	ra,72(sp)
  80e464:	df001115 	stw	fp,68(sp)
  80e468:	df001104 	addi	fp,sp,68
  80e46c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e470:	e0bfff17 	ldw	r2,-4(fp)
  80e474:	10000616 	blt	r2,zero,80e490 <isatty+0x34>
  80e478:	e0bfff17 	ldw	r2,-4(fp)
  80e47c:	10c00324 	muli	r3,r2,12
  80e480:	00802074 	movhi	r2,129
  80e484:	108c3104 	addi	r2,r2,12484
  80e488:	1885883a 	add	r2,r3,r2
  80e48c:	00000106 	br	80e494 <isatty+0x38>
  80e490:	0005883a 	mov	r2,zero
  80e494:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80e498:	e0bfef17 	ldw	r2,-68(fp)
  80e49c:	10000e26 	beq	r2,zero,80e4d8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80e4a0:	e0bfef17 	ldw	r2,-68(fp)
  80e4a4:	10800017 	ldw	r2,0(r2)
  80e4a8:	10800817 	ldw	r2,32(r2)
  80e4ac:	1000021e 	bne	r2,zero,80e4b8 <isatty+0x5c>
    {
      return 1;
  80e4b0:	00800044 	movi	r2,1
  80e4b4:	00000d06 	br	80e4ec <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80e4b8:	e0bff004 	addi	r2,fp,-64
  80e4bc:	100b883a 	mov	r5,r2
  80e4c0:	e13fff17 	ldw	r4,-4(fp)
  80e4c4:	080e1f00 	call	80e1f0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80e4c8:	e0bff117 	ldw	r2,-60(fp)
  80e4cc:	10880020 	cmpeqi	r2,r2,8192
  80e4d0:	10803fcc 	andi	r2,r2,255
  80e4d4:	00000506 	br	80e4ec <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e4d8:	080e4200 	call	80e420 <alt_get_errno>
  80e4dc:	1007883a 	mov	r3,r2
  80e4e0:	00801444 	movi	r2,81
  80e4e4:	18800015 	stw	r2,0(r3)
    return 0;
  80e4e8:	0005883a 	mov	r2,zero
  }
}
  80e4ec:	e037883a 	mov	sp,fp
  80e4f0:	dfc00117 	ldw	ra,4(sp)
  80e4f4:	df000017 	ldw	fp,0(sp)
  80e4f8:	dec00204 	addi	sp,sp,8
  80e4fc:	f800283a 	ret

0080e500 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80e500:	defffc04 	addi	sp,sp,-16
  80e504:	df000315 	stw	fp,12(sp)
  80e508:	df000304 	addi	fp,sp,12
  80e50c:	e13ffd15 	stw	r4,-12(fp)
  80e510:	e17ffe15 	stw	r5,-8(fp)
  80e514:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80e518:	e0fffe17 	ldw	r3,-8(fp)
  80e51c:	e0bffd17 	ldw	r2,-12(fp)
  80e520:	18800c26 	beq	r3,r2,80e554 <alt_load_section+0x54>
  {
    while( to != end )
  80e524:	00000806 	br	80e548 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80e528:	e0bffe17 	ldw	r2,-8(fp)
  80e52c:	10c00104 	addi	r3,r2,4
  80e530:	e0fffe15 	stw	r3,-8(fp)
  80e534:	e0fffd17 	ldw	r3,-12(fp)
  80e538:	19000104 	addi	r4,r3,4
  80e53c:	e13ffd15 	stw	r4,-12(fp)
  80e540:	18c00017 	ldw	r3,0(r3)
  80e544:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80e548:	e0fffe17 	ldw	r3,-8(fp)
  80e54c:	e0bfff17 	ldw	r2,-4(fp)
  80e550:	18bff51e 	bne	r3,r2,80e528 <__alt_mem_onchip_mem+0xff78e528>
    {
      *to++ = *from++;
    }
  }
}
  80e554:	0001883a 	nop
  80e558:	e037883a 	mov	sp,fp
  80e55c:	df000017 	ldw	fp,0(sp)
  80e560:	dec00104 	addi	sp,sp,4
  80e564:	f800283a 	ret

0080e568 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80e568:	defffe04 	addi	sp,sp,-8
  80e56c:	dfc00115 	stw	ra,4(sp)
  80e570:	df000015 	stw	fp,0(sp)
  80e574:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80e578:	01802074 	movhi	r6,129
  80e57c:	31913604 	addi	r6,r6,17624
  80e580:	01402074 	movhi	r5,129
  80e584:	2949fe04 	addi	r5,r5,10232
  80e588:	01002074 	movhi	r4,129
  80e58c:	21113604 	addi	r4,r4,17624
  80e590:	080e5000 	call	80e500 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80e594:	01802034 	movhi	r6,128
  80e598:	31809104 	addi	r6,r6,580
  80e59c:	01402034 	movhi	r5,128
  80e5a0:	29400804 	addi	r5,r5,32
  80e5a4:	01002034 	movhi	r4,128
  80e5a8:	21000804 	addi	r4,r4,32
  80e5ac:	080e5000 	call	80e500 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80e5b0:	01802074 	movhi	r6,129
  80e5b4:	3189fe04 	addi	r6,r6,10232
  80e5b8:	01402074 	movhi	r5,129
  80e5bc:	29487d04 	addi	r5,r5,8692
  80e5c0:	01002074 	movhi	r4,129
  80e5c4:	21087d04 	addi	r4,r4,8692
  80e5c8:	080e5000 	call	80e500 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80e5cc:	08113500 	call	811350 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80e5d0:	08117740 	call	811774 <alt_icache_flush_all>
}
  80e5d4:	0001883a 	nop
  80e5d8:	e037883a 	mov	sp,fp
  80e5dc:	dfc00117 	ldw	ra,4(sp)
  80e5e0:	df000017 	ldw	fp,0(sp)
  80e5e4:	dec00204 	addi	sp,sp,8
  80e5e8:	f800283a 	ret

0080e5ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e5ec:	defffe04 	addi	sp,sp,-8
  80e5f0:	dfc00115 	stw	ra,4(sp)
  80e5f4:	df000015 	stw	fp,0(sp)
  80e5f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e5fc:	d0a00d17 	ldw	r2,-32716(gp)
  80e600:	10000326 	beq	r2,zero,80e610 <alt_get_errno+0x24>
  80e604:	d0a00d17 	ldw	r2,-32716(gp)
  80e608:	103ee83a 	callr	r2
  80e60c:	00000106 	br	80e614 <alt_get_errno+0x28>
  80e610:	d0a75904 	addi	r2,gp,-25244
}
  80e614:	e037883a 	mov	sp,fp
  80e618:	dfc00117 	ldw	ra,4(sp)
  80e61c:	df000017 	ldw	fp,0(sp)
  80e620:	dec00204 	addi	sp,sp,8
  80e624:	f800283a 	ret

0080e628 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80e628:	defff904 	addi	sp,sp,-28
  80e62c:	dfc00615 	stw	ra,24(sp)
  80e630:	df000515 	stw	fp,20(sp)
  80e634:	df000504 	addi	fp,sp,20
  80e638:	e13ffd15 	stw	r4,-12(fp)
  80e63c:	e17ffe15 	stw	r5,-8(fp)
  80e640:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80e644:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e648:	e0bffd17 	ldw	r2,-12(fp)
  80e64c:	10000616 	blt	r2,zero,80e668 <lseek+0x40>
  80e650:	e0bffd17 	ldw	r2,-12(fp)
  80e654:	10c00324 	muli	r3,r2,12
  80e658:	00802074 	movhi	r2,129
  80e65c:	108c3104 	addi	r2,r2,12484
  80e660:	1885883a 	add	r2,r3,r2
  80e664:	00000106 	br	80e66c <lseek+0x44>
  80e668:	0005883a 	mov	r2,zero
  80e66c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80e670:	e0bffc17 	ldw	r2,-16(fp)
  80e674:	10001026 	beq	r2,zero,80e6b8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80e678:	e0bffc17 	ldw	r2,-16(fp)
  80e67c:	10800017 	ldw	r2,0(r2)
  80e680:	10800717 	ldw	r2,28(r2)
  80e684:	10000926 	beq	r2,zero,80e6ac <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80e688:	e0bffc17 	ldw	r2,-16(fp)
  80e68c:	10800017 	ldw	r2,0(r2)
  80e690:	10800717 	ldw	r2,28(r2)
  80e694:	e1bfff17 	ldw	r6,-4(fp)
  80e698:	e17ffe17 	ldw	r5,-8(fp)
  80e69c:	e13ffc17 	ldw	r4,-16(fp)
  80e6a0:	103ee83a 	callr	r2
  80e6a4:	e0bffb15 	stw	r2,-20(fp)
  80e6a8:	00000506 	br	80e6c0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80e6ac:	00bfde84 	movi	r2,-134
  80e6b0:	e0bffb15 	stw	r2,-20(fp)
  80e6b4:	00000206 	br	80e6c0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80e6b8:	00bfebc4 	movi	r2,-81
  80e6bc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80e6c0:	e0bffb17 	ldw	r2,-20(fp)
  80e6c4:	1000070e 	bge	r2,zero,80e6e4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80e6c8:	080e5ec0 	call	80e5ec <alt_get_errno>
  80e6cc:	1007883a 	mov	r3,r2
  80e6d0:	e0bffb17 	ldw	r2,-20(fp)
  80e6d4:	0085c83a 	sub	r2,zero,r2
  80e6d8:	18800015 	stw	r2,0(r3)
    rc = -1;
  80e6dc:	00bfffc4 	movi	r2,-1
  80e6e0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80e6e4:	e0bffb17 	ldw	r2,-20(fp)
}
  80e6e8:	e037883a 	mov	sp,fp
  80e6ec:	dfc00117 	ldw	ra,4(sp)
  80e6f0:	df000017 	ldw	fp,0(sp)
  80e6f4:	dec00204 	addi	sp,sp,8
  80e6f8:	f800283a 	ret

0080e6fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80e6fc:	defffd04 	addi	sp,sp,-12
  80e700:	dfc00215 	stw	ra,8(sp)
  80e704:	df000115 	stw	fp,4(sp)
  80e708:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80e70c:	0009883a 	mov	r4,zero
  80e710:	080ef6c0 	call	80ef6c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80e714:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80e718:	080efa40 	call	80efa4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80e71c:	01802074 	movhi	r6,129
  80e720:	31895004 	addi	r6,r6,9536
  80e724:	01402074 	movhi	r5,129
  80e728:	29495004 	addi	r5,r5,9536
  80e72c:	01002074 	movhi	r4,129
  80e730:	21095004 	addi	r4,r4,9536
  80e734:	0811b0c0 	call	811b0c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80e738:	08114780 	call	811478 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80e73c:	01002074 	movhi	r4,129
  80e740:	21053604 	addi	r4,r4,5336
  80e744:	0811e600 	call	811e60 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80e748:	d0a76117 	ldw	r2,-25212(gp)
  80e74c:	d0e76217 	ldw	r3,-25208(gp)
  80e750:	d1276317 	ldw	r4,-25204(gp)
  80e754:	200d883a 	mov	r6,r4
  80e758:	180b883a 	mov	r5,r3
  80e75c:	1009883a 	mov	r4,r2
  80e760:	0800b180 	call	800b18 <main>
  80e764:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80e768:	01000044 	movi	r4,1
  80e76c:	080e0b80 	call	80e0b8 <close>
  exit (result);
  80e770:	e13fff17 	ldw	r4,-4(fp)
  80e774:	0811e740 	call	811e74 <exit>

0080e778 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80e778:	defffe04 	addi	sp,sp,-8
  80e77c:	df000115 	stw	fp,4(sp)
  80e780:	df000104 	addi	fp,sp,4
  80e784:	e13fff15 	stw	r4,-4(fp)
}
  80e788:	0001883a 	nop
  80e78c:	e037883a 	mov	sp,fp
  80e790:	df000017 	ldw	fp,0(sp)
  80e794:	dec00104 	addi	sp,sp,4
  80e798:	f800283a 	ret

0080e79c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80e79c:	defffe04 	addi	sp,sp,-8
  80e7a0:	df000115 	stw	fp,4(sp)
  80e7a4:	df000104 	addi	fp,sp,4
  80e7a8:	e13fff15 	stw	r4,-4(fp)
}
  80e7ac:	0001883a 	nop
  80e7b0:	e037883a 	mov	sp,fp
  80e7b4:	df000017 	ldw	fp,0(sp)
  80e7b8:	dec00104 	addi	sp,sp,4
  80e7bc:	f800283a 	ret

0080e7c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e7c0:	defffe04 	addi	sp,sp,-8
  80e7c4:	dfc00115 	stw	ra,4(sp)
  80e7c8:	df000015 	stw	fp,0(sp)
  80e7cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e7d0:	d0a00d17 	ldw	r2,-32716(gp)
  80e7d4:	10000326 	beq	r2,zero,80e7e4 <alt_get_errno+0x24>
  80e7d8:	d0a00d17 	ldw	r2,-32716(gp)
  80e7dc:	103ee83a 	callr	r2
  80e7e0:	00000106 	br	80e7e8 <alt_get_errno+0x28>
  80e7e4:	d0a75904 	addi	r2,gp,-25244
}
  80e7e8:	e037883a 	mov	sp,fp
  80e7ec:	dfc00117 	ldw	ra,4(sp)
  80e7f0:	df000017 	ldw	fp,0(sp)
  80e7f4:	dec00204 	addi	sp,sp,8
  80e7f8:	f800283a 	ret

0080e7fc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80e7fc:	defffd04 	addi	sp,sp,-12
  80e800:	df000215 	stw	fp,8(sp)
  80e804:	df000204 	addi	fp,sp,8
  80e808:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80e80c:	e0bfff17 	ldw	r2,-4(fp)
  80e810:	10800217 	ldw	r2,8(r2)
  80e814:	10d00034 	orhi	r3,r2,16384
  80e818:	e0bfff17 	ldw	r2,-4(fp)
  80e81c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80e820:	e03ffe15 	stw	zero,-8(fp)
  80e824:	00001d06 	br	80e89c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80e828:	00802074 	movhi	r2,129
  80e82c:	108c3104 	addi	r2,r2,12484
  80e830:	e0fffe17 	ldw	r3,-8(fp)
  80e834:	18c00324 	muli	r3,r3,12
  80e838:	10c5883a 	add	r2,r2,r3
  80e83c:	10c00017 	ldw	r3,0(r2)
  80e840:	e0bfff17 	ldw	r2,-4(fp)
  80e844:	10800017 	ldw	r2,0(r2)
  80e848:	1880111e 	bne	r3,r2,80e890 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80e84c:	00802074 	movhi	r2,129
  80e850:	108c3104 	addi	r2,r2,12484
  80e854:	e0fffe17 	ldw	r3,-8(fp)
  80e858:	18c00324 	muli	r3,r3,12
  80e85c:	10c5883a 	add	r2,r2,r3
  80e860:	10800204 	addi	r2,r2,8
  80e864:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80e868:	1000090e 	bge	r2,zero,80e890 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80e86c:	e0bffe17 	ldw	r2,-8(fp)
  80e870:	10c00324 	muli	r3,r2,12
  80e874:	00802074 	movhi	r2,129
  80e878:	108c3104 	addi	r2,r2,12484
  80e87c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80e880:	e0bfff17 	ldw	r2,-4(fp)
  80e884:	18800226 	beq	r3,r2,80e890 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80e888:	00bffcc4 	movi	r2,-13
  80e88c:	00000806 	br	80e8b0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80e890:	e0bffe17 	ldw	r2,-8(fp)
  80e894:	10800044 	addi	r2,r2,1
  80e898:	e0bffe15 	stw	r2,-8(fp)
  80e89c:	d0a00c17 	ldw	r2,-32720(gp)
  80e8a0:	1007883a 	mov	r3,r2
  80e8a4:	e0bffe17 	ldw	r2,-8(fp)
  80e8a8:	18bfdf2e 	bgeu	r3,r2,80e828 <__alt_mem_onchip_mem+0xff78e828>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80e8ac:	0005883a 	mov	r2,zero
}
  80e8b0:	e037883a 	mov	sp,fp
  80e8b4:	df000017 	ldw	fp,0(sp)
  80e8b8:	dec00104 	addi	sp,sp,4
  80e8bc:	f800283a 	ret

0080e8c0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80e8c0:	defff604 	addi	sp,sp,-40
  80e8c4:	dfc00915 	stw	ra,36(sp)
  80e8c8:	df000815 	stw	fp,32(sp)
  80e8cc:	df000804 	addi	fp,sp,32
  80e8d0:	e13ffd15 	stw	r4,-12(fp)
  80e8d4:	e17ffe15 	stw	r5,-8(fp)
  80e8d8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80e8dc:	00bfffc4 	movi	r2,-1
  80e8e0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80e8e4:	00bffb44 	movi	r2,-19
  80e8e8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80e8ec:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80e8f0:	d1600a04 	addi	r5,gp,-32728
  80e8f4:	e13ffd17 	ldw	r4,-12(fp)
  80e8f8:	08115380 	call	811538 <alt_find_dev>
  80e8fc:	e0bff815 	stw	r2,-32(fp)
  80e900:	e0bff817 	ldw	r2,-32(fp)
  80e904:	1000051e 	bne	r2,zero,80e91c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80e908:	e13ffd17 	ldw	r4,-12(fp)
  80e90c:	08115c80 	call	8115c8 <alt_find_file>
  80e910:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80e914:	00800044 	movi	r2,1
  80e918:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80e91c:	e0bff817 	ldw	r2,-32(fp)
  80e920:	10002926 	beq	r2,zero,80e9c8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80e924:	e13ff817 	ldw	r4,-32(fp)
  80e928:	08116d00 	call	8116d0 <alt_get_fd>
  80e92c:	e0bff915 	stw	r2,-28(fp)
  80e930:	e0bff917 	ldw	r2,-28(fp)
  80e934:	1000030e 	bge	r2,zero,80e944 <open+0x84>
    {
      status = index;
  80e938:	e0bff917 	ldw	r2,-28(fp)
  80e93c:	e0bffa15 	stw	r2,-24(fp)
  80e940:	00002306 	br	80e9d0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  80e944:	e0bff917 	ldw	r2,-28(fp)
  80e948:	10c00324 	muli	r3,r2,12
  80e94c:	00802074 	movhi	r2,129
  80e950:	108c3104 	addi	r2,r2,12484
  80e954:	1885883a 	add	r2,r3,r2
  80e958:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80e95c:	e0fffe17 	ldw	r3,-8(fp)
  80e960:	00900034 	movhi	r2,16384
  80e964:	10bfffc4 	addi	r2,r2,-1
  80e968:	1886703a 	and	r3,r3,r2
  80e96c:	e0bffc17 	ldw	r2,-16(fp)
  80e970:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80e974:	e0bffb17 	ldw	r2,-20(fp)
  80e978:	1000051e 	bne	r2,zero,80e990 <open+0xd0>
  80e97c:	e13ffc17 	ldw	r4,-16(fp)
  80e980:	080e7fc0 	call	80e7fc <alt_file_locked>
  80e984:	e0bffa15 	stw	r2,-24(fp)
  80e988:	e0bffa17 	ldw	r2,-24(fp)
  80e98c:	10001016 	blt	r2,zero,80e9d0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80e990:	e0bff817 	ldw	r2,-32(fp)
  80e994:	10800317 	ldw	r2,12(r2)
  80e998:	10000826 	beq	r2,zero,80e9bc <open+0xfc>
  80e99c:	e0bff817 	ldw	r2,-32(fp)
  80e9a0:	10800317 	ldw	r2,12(r2)
  80e9a4:	e1ffff17 	ldw	r7,-4(fp)
  80e9a8:	e1bffe17 	ldw	r6,-8(fp)
  80e9ac:	e17ffd17 	ldw	r5,-12(fp)
  80e9b0:	e13ffc17 	ldw	r4,-16(fp)
  80e9b4:	103ee83a 	callr	r2
  80e9b8:	00000106 	br	80e9c0 <open+0x100>
  80e9bc:	0005883a 	mov	r2,zero
  80e9c0:	e0bffa15 	stw	r2,-24(fp)
  80e9c4:	00000206 	br	80e9d0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80e9c8:	00bffb44 	movi	r2,-19
  80e9cc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80e9d0:	e0bffa17 	ldw	r2,-24(fp)
  80e9d4:	1000090e 	bge	r2,zero,80e9fc <open+0x13c>
  {
    alt_release_fd (index);  
  80e9d8:	e13ff917 	ldw	r4,-28(fp)
  80e9dc:	080eb4c0 	call	80eb4c <alt_release_fd>
    ALT_ERRNO = -status;
  80e9e0:	080e7c00 	call	80e7c0 <alt_get_errno>
  80e9e4:	1007883a 	mov	r3,r2
  80e9e8:	e0bffa17 	ldw	r2,-24(fp)
  80e9ec:	0085c83a 	sub	r2,zero,r2
  80e9f0:	18800015 	stw	r2,0(r3)
    return -1;
  80e9f4:	00bfffc4 	movi	r2,-1
  80e9f8:	00000106 	br	80ea00 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  80e9fc:	e0bff917 	ldw	r2,-28(fp)
}
  80ea00:	e037883a 	mov	sp,fp
  80ea04:	dfc00117 	ldw	ra,4(sp)
  80ea08:	df000017 	ldw	fp,0(sp)
  80ea0c:	dec00204 	addi	sp,sp,8
  80ea10:	f800283a 	ret

0080ea14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ea14:	defffe04 	addi	sp,sp,-8
  80ea18:	dfc00115 	stw	ra,4(sp)
  80ea1c:	df000015 	stw	fp,0(sp)
  80ea20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ea24:	d0a00d17 	ldw	r2,-32716(gp)
  80ea28:	10000326 	beq	r2,zero,80ea38 <alt_get_errno+0x24>
  80ea2c:	d0a00d17 	ldw	r2,-32716(gp)
  80ea30:	103ee83a 	callr	r2
  80ea34:	00000106 	br	80ea3c <alt_get_errno+0x28>
  80ea38:	d0a75904 	addi	r2,gp,-25244
}
  80ea3c:	e037883a 	mov	sp,fp
  80ea40:	dfc00117 	ldw	ra,4(sp)
  80ea44:	df000017 	ldw	fp,0(sp)
  80ea48:	dec00204 	addi	sp,sp,8
  80ea4c:	f800283a 	ret

0080ea50 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80ea50:	defff904 	addi	sp,sp,-28
  80ea54:	dfc00615 	stw	ra,24(sp)
  80ea58:	df000515 	stw	fp,20(sp)
  80ea5c:	df000504 	addi	fp,sp,20
  80ea60:	e13ffd15 	stw	r4,-12(fp)
  80ea64:	e17ffe15 	stw	r5,-8(fp)
  80ea68:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ea6c:	e0bffd17 	ldw	r2,-12(fp)
  80ea70:	10000616 	blt	r2,zero,80ea8c <read+0x3c>
  80ea74:	e0bffd17 	ldw	r2,-12(fp)
  80ea78:	10c00324 	muli	r3,r2,12
  80ea7c:	00802074 	movhi	r2,129
  80ea80:	108c3104 	addi	r2,r2,12484
  80ea84:	1885883a 	add	r2,r3,r2
  80ea88:	00000106 	br	80ea90 <read+0x40>
  80ea8c:	0005883a 	mov	r2,zero
  80ea90:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80ea94:	e0bffb17 	ldw	r2,-20(fp)
  80ea98:	10002226 	beq	r2,zero,80eb24 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80ea9c:	e0bffb17 	ldw	r2,-20(fp)
  80eaa0:	10800217 	ldw	r2,8(r2)
  80eaa4:	108000cc 	andi	r2,r2,3
  80eaa8:	10800060 	cmpeqi	r2,r2,1
  80eaac:	1000181e 	bne	r2,zero,80eb10 <read+0xc0>
        (fd->dev->read))
  80eab0:	e0bffb17 	ldw	r2,-20(fp)
  80eab4:	10800017 	ldw	r2,0(r2)
  80eab8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80eabc:	10001426 	beq	r2,zero,80eb10 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80eac0:	e0bffb17 	ldw	r2,-20(fp)
  80eac4:	10800017 	ldw	r2,0(r2)
  80eac8:	10800517 	ldw	r2,20(r2)
  80eacc:	e0ffff17 	ldw	r3,-4(fp)
  80ead0:	180d883a 	mov	r6,r3
  80ead4:	e17ffe17 	ldw	r5,-8(fp)
  80ead8:	e13ffb17 	ldw	r4,-20(fp)
  80eadc:	103ee83a 	callr	r2
  80eae0:	e0bffc15 	stw	r2,-16(fp)
  80eae4:	e0bffc17 	ldw	r2,-16(fp)
  80eae8:	1000070e 	bge	r2,zero,80eb08 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80eaec:	080ea140 	call	80ea14 <alt_get_errno>
  80eaf0:	1007883a 	mov	r3,r2
  80eaf4:	e0bffc17 	ldw	r2,-16(fp)
  80eaf8:	0085c83a 	sub	r2,zero,r2
  80eafc:	18800015 	stw	r2,0(r3)
          return -1;
  80eb00:	00bfffc4 	movi	r2,-1
  80eb04:	00000c06 	br	80eb38 <read+0xe8>
        }
        return rval;
  80eb08:	e0bffc17 	ldw	r2,-16(fp)
  80eb0c:	00000a06 	br	80eb38 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80eb10:	080ea140 	call	80ea14 <alt_get_errno>
  80eb14:	1007883a 	mov	r3,r2
  80eb18:	00800344 	movi	r2,13
  80eb1c:	18800015 	stw	r2,0(r3)
  80eb20:	00000406 	br	80eb34 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80eb24:	080ea140 	call	80ea14 <alt_get_errno>
  80eb28:	1007883a 	mov	r3,r2
  80eb2c:	00801444 	movi	r2,81
  80eb30:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80eb34:	00bfffc4 	movi	r2,-1
}
  80eb38:	e037883a 	mov	sp,fp
  80eb3c:	dfc00117 	ldw	ra,4(sp)
  80eb40:	df000017 	ldw	fp,0(sp)
  80eb44:	dec00204 	addi	sp,sp,8
  80eb48:	f800283a 	ret

0080eb4c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80eb4c:	defffe04 	addi	sp,sp,-8
  80eb50:	df000115 	stw	fp,4(sp)
  80eb54:	df000104 	addi	fp,sp,4
  80eb58:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80eb5c:	e0bfff17 	ldw	r2,-4(fp)
  80eb60:	108000d0 	cmplti	r2,r2,3
  80eb64:	10000d1e 	bne	r2,zero,80eb9c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80eb68:	00802074 	movhi	r2,129
  80eb6c:	108c3104 	addi	r2,r2,12484
  80eb70:	e0ffff17 	ldw	r3,-4(fp)
  80eb74:	18c00324 	muli	r3,r3,12
  80eb78:	10c5883a 	add	r2,r2,r3
  80eb7c:	10800204 	addi	r2,r2,8
  80eb80:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80eb84:	00802074 	movhi	r2,129
  80eb88:	108c3104 	addi	r2,r2,12484
  80eb8c:	e0ffff17 	ldw	r3,-4(fp)
  80eb90:	18c00324 	muli	r3,r3,12
  80eb94:	10c5883a 	add	r2,r2,r3
  80eb98:	10000015 	stw	zero,0(r2)
  }
}
  80eb9c:	0001883a 	nop
  80eba0:	e037883a 	mov	sp,fp
  80eba4:	df000017 	ldw	fp,0(sp)
  80eba8:	dec00104 	addi	sp,sp,4
  80ebac:	f800283a 	ret

0080ebb0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80ebb0:	defff904 	addi	sp,sp,-28
  80ebb4:	df000615 	stw	fp,24(sp)
  80ebb8:	df000604 	addi	fp,sp,24
  80ebbc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ebc0:	0005303a 	rdctl	r2,status
  80ebc4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ebc8:	e0fffe17 	ldw	r3,-8(fp)
  80ebcc:	00bfff84 	movi	r2,-2
  80ebd0:	1884703a 	and	r2,r3,r2
  80ebd4:	1001703a 	wrctl	status,r2
  
  return context;
  80ebd8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80ebdc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80ebe0:	d0a00f17 	ldw	r2,-32708(gp)
  80ebe4:	10c000c4 	addi	r3,r2,3
  80ebe8:	00bfff04 	movi	r2,-4
  80ebec:	1884703a 	and	r2,r3,r2
  80ebf0:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80ebf4:	d0e00f17 	ldw	r3,-32708(gp)
  80ebf8:	e0bfff17 	ldw	r2,-4(fp)
  80ebfc:	1887883a 	add	r3,r3,r2
  80ec00:	00804034 	movhi	r2,256
  80ec04:	10800004 	addi	r2,r2,0
  80ec08:	10c0062e 	bgeu	r2,r3,80ec24 <sbrk+0x74>
  80ec0c:	e0bffb17 	ldw	r2,-20(fp)
  80ec10:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ec14:	e0bffa17 	ldw	r2,-24(fp)
  80ec18:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80ec1c:	00bfffc4 	movi	r2,-1
  80ec20:	00000b06 	br	80ec50 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80ec24:	d0a00f17 	ldw	r2,-32708(gp)
  80ec28:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80ec2c:	d0e00f17 	ldw	r3,-32708(gp)
  80ec30:	e0bfff17 	ldw	r2,-4(fp)
  80ec34:	1885883a 	add	r2,r3,r2
  80ec38:	d0a00f15 	stw	r2,-32708(gp)
  80ec3c:	e0bffb17 	ldw	r2,-20(fp)
  80ec40:	e0bffc15 	stw	r2,-16(fp)
  80ec44:	e0bffc17 	ldw	r2,-16(fp)
  80ec48:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80ec4c:	e0bffd17 	ldw	r2,-12(fp)
} 
  80ec50:	e037883a 	mov	sp,fp
  80ec54:	df000017 	ldw	fp,0(sp)
  80ec58:	dec00104 	addi	sp,sp,4
  80ec5c:	f800283a 	ret

0080ec60 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80ec60:	defffa04 	addi	sp,sp,-24
  80ec64:	df000515 	stw	fp,20(sp)
  80ec68:	df000504 	addi	fp,sp,20
  80ec6c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ec70:	0005303a 	rdctl	r2,status
  80ec74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ec78:	e0fffc17 	ldw	r3,-16(fp)
  80ec7c:	00bfff84 	movi	r2,-2
  80ec80:	1884703a 	and	r2,r3,r2
  80ec84:	1001703a 	wrctl	status,r2
  
  return context;
  80ec88:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80ec8c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80ec90:	e0bfff17 	ldw	r2,-4(fp)
  80ec94:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80ec98:	e0bffd17 	ldw	r2,-12(fp)
  80ec9c:	10800017 	ldw	r2,0(r2)
  80eca0:	e0fffd17 	ldw	r3,-12(fp)
  80eca4:	18c00117 	ldw	r3,4(r3)
  80eca8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80ecac:	e0bffd17 	ldw	r2,-12(fp)
  80ecb0:	10800117 	ldw	r2,4(r2)
  80ecb4:	e0fffd17 	ldw	r3,-12(fp)
  80ecb8:	18c00017 	ldw	r3,0(r3)
  80ecbc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80ecc0:	e0bffd17 	ldw	r2,-12(fp)
  80ecc4:	e0fffd17 	ldw	r3,-12(fp)
  80ecc8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80eccc:	e0bffd17 	ldw	r2,-12(fp)
  80ecd0:	e0fffd17 	ldw	r3,-12(fp)
  80ecd4:	10c00015 	stw	r3,0(r2)
  80ecd8:	e0bffb17 	ldw	r2,-20(fp)
  80ecdc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ece0:	e0bffe17 	ldw	r2,-8(fp)
  80ece4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80ece8:	0001883a 	nop
  80ecec:	e037883a 	mov	sp,fp
  80ecf0:	df000017 	ldw	fp,0(sp)
  80ecf4:	dec00104 	addi	sp,sp,4
  80ecf8:	f800283a 	ret

0080ecfc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80ecfc:	defffb04 	addi	sp,sp,-20
  80ed00:	dfc00415 	stw	ra,16(sp)
  80ed04:	df000315 	stw	fp,12(sp)
  80ed08:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80ed0c:	d0a01017 	ldw	r2,-32704(gp)
  80ed10:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80ed14:	d0a76517 	ldw	r2,-25196(gp)
  80ed18:	10800044 	addi	r2,r2,1
  80ed1c:	d0a76515 	stw	r2,-25196(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80ed20:	00002e06 	br	80eddc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80ed24:	e0bffd17 	ldw	r2,-12(fp)
  80ed28:	10800017 	ldw	r2,0(r2)
  80ed2c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80ed30:	e0bffd17 	ldw	r2,-12(fp)
  80ed34:	10800403 	ldbu	r2,16(r2)
  80ed38:	10803fcc 	andi	r2,r2,255
  80ed3c:	10000426 	beq	r2,zero,80ed50 <alt_tick+0x54>
  80ed40:	d0a76517 	ldw	r2,-25196(gp)
  80ed44:	1000021e 	bne	r2,zero,80ed50 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80ed48:	e0bffd17 	ldw	r2,-12(fp)
  80ed4c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80ed50:	e0bffd17 	ldw	r2,-12(fp)
  80ed54:	10800217 	ldw	r2,8(r2)
  80ed58:	d0e76517 	ldw	r3,-25196(gp)
  80ed5c:	18801d36 	bltu	r3,r2,80edd4 <alt_tick+0xd8>
  80ed60:	e0bffd17 	ldw	r2,-12(fp)
  80ed64:	10800403 	ldbu	r2,16(r2)
  80ed68:	10803fcc 	andi	r2,r2,255
  80ed6c:	1000191e 	bne	r2,zero,80edd4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80ed70:	e0bffd17 	ldw	r2,-12(fp)
  80ed74:	10800317 	ldw	r2,12(r2)
  80ed78:	e0fffd17 	ldw	r3,-12(fp)
  80ed7c:	18c00517 	ldw	r3,20(r3)
  80ed80:	1809883a 	mov	r4,r3
  80ed84:	103ee83a 	callr	r2
  80ed88:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80ed8c:	e0bfff17 	ldw	r2,-4(fp)
  80ed90:	1000031e 	bne	r2,zero,80eda0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80ed94:	e13ffd17 	ldw	r4,-12(fp)
  80ed98:	080ec600 	call	80ec60 <alt_alarm_stop>
  80ed9c:	00000d06 	br	80edd4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80eda0:	e0bffd17 	ldw	r2,-12(fp)
  80eda4:	10c00217 	ldw	r3,8(r2)
  80eda8:	e0bfff17 	ldw	r2,-4(fp)
  80edac:	1887883a 	add	r3,r3,r2
  80edb0:	e0bffd17 	ldw	r2,-12(fp)
  80edb4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80edb8:	e0bffd17 	ldw	r2,-12(fp)
  80edbc:	10c00217 	ldw	r3,8(r2)
  80edc0:	d0a76517 	ldw	r2,-25196(gp)
  80edc4:	1880032e 	bgeu	r3,r2,80edd4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80edc8:	e0bffd17 	ldw	r2,-12(fp)
  80edcc:	00c00044 	movi	r3,1
  80edd0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80edd4:	e0bffe17 	ldw	r2,-8(fp)
  80edd8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80eddc:	e0fffd17 	ldw	r3,-12(fp)
  80ede0:	d0a01004 	addi	r2,gp,-32704
  80ede4:	18bfcf1e 	bne	r3,r2,80ed24 <__alt_mem_onchip_mem+0xff78ed24>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80ede8:	0001883a 	nop
}
  80edec:	0001883a 	nop
  80edf0:	e037883a 	mov	sp,fp
  80edf4:	dfc00117 	ldw	ra,4(sp)
  80edf8:	df000017 	ldw	fp,0(sp)
  80edfc:	dec00204 	addi	sp,sp,8
  80ee00:	f800283a 	ret

0080ee04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ee04:	defffe04 	addi	sp,sp,-8
  80ee08:	dfc00115 	stw	ra,4(sp)
  80ee0c:	df000015 	stw	fp,0(sp)
  80ee10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ee14:	d0a00d17 	ldw	r2,-32716(gp)
  80ee18:	10000326 	beq	r2,zero,80ee28 <alt_get_errno+0x24>
  80ee1c:	d0a00d17 	ldw	r2,-32716(gp)
  80ee20:	103ee83a 	callr	r2
  80ee24:	00000106 	br	80ee2c <alt_get_errno+0x28>
  80ee28:	d0a75904 	addi	r2,gp,-25244
}
  80ee2c:	e037883a 	mov	sp,fp
  80ee30:	dfc00117 	ldw	ra,4(sp)
  80ee34:	df000017 	ldw	fp,0(sp)
  80ee38:	dec00204 	addi	sp,sp,8
  80ee3c:	f800283a 	ret

0080ee40 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80ee40:	defff904 	addi	sp,sp,-28
  80ee44:	dfc00615 	stw	ra,24(sp)
  80ee48:	df000515 	stw	fp,20(sp)
  80ee4c:	df000504 	addi	fp,sp,20
  80ee50:	e13ffd15 	stw	r4,-12(fp)
  80ee54:	e17ffe15 	stw	r5,-8(fp)
  80ee58:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ee5c:	e0bffd17 	ldw	r2,-12(fp)
  80ee60:	10000616 	blt	r2,zero,80ee7c <write+0x3c>
  80ee64:	e0bffd17 	ldw	r2,-12(fp)
  80ee68:	10c00324 	muli	r3,r2,12
  80ee6c:	00802074 	movhi	r2,129
  80ee70:	108c3104 	addi	r2,r2,12484
  80ee74:	1885883a 	add	r2,r3,r2
  80ee78:	00000106 	br	80ee80 <write+0x40>
  80ee7c:	0005883a 	mov	r2,zero
  80ee80:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80ee84:	e0bffb17 	ldw	r2,-20(fp)
  80ee88:	10002126 	beq	r2,zero,80ef10 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80ee8c:	e0bffb17 	ldw	r2,-20(fp)
  80ee90:	10800217 	ldw	r2,8(r2)
  80ee94:	108000cc 	andi	r2,r2,3
  80ee98:	10001826 	beq	r2,zero,80eefc <write+0xbc>
  80ee9c:	e0bffb17 	ldw	r2,-20(fp)
  80eea0:	10800017 	ldw	r2,0(r2)
  80eea4:	10800617 	ldw	r2,24(r2)
  80eea8:	10001426 	beq	r2,zero,80eefc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80eeac:	e0bffb17 	ldw	r2,-20(fp)
  80eeb0:	10800017 	ldw	r2,0(r2)
  80eeb4:	10800617 	ldw	r2,24(r2)
  80eeb8:	e0ffff17 	ldw	r3,-4(fp)
  80eebc:	180d883a 	mov	r6,r3
  80eec0:	e17ffe17 	ldw	r5,-8(fp)
  80eec4:	e13ffb17 	ldw	r4,-20(fp)
  80eec8:	103ee83a 	callr	r2
  80eecc:	e0bffc15 	stw	r2,-16(fp)
  80eed0:	e0bffc17 	ldw	r2,-16(fp)
  80eed4:	1000070e 	bge	r2,zero,80eef4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80eed8:	080ee040 	call	80ee04 <alt_get_errno>
  80eedc:	1007883a 	mov	r3,r2
  80eee0:	e0bffc17 	ldw	r2,-16(fp)
  80eee4:	0085c83a 	sub	r2,zero,r2
  80eee8:	18800015 	stw	r2,0(r3)
        return -1;
  80eeec:	00bfffc4 	movi	r2,-1
  80eef0:	00000c06 	br	80ef24 <write+0xe4>
      }
      return rval;
  80eef4:	e0bffc17 	ldw	r2,-16(fp)
  80eef8:	00000a06 	br	80ef24 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80eefc:	080ee040 	call	80ee04 <alt_get_errno>
  80ef00:	1007883a 	mov	r3,r2
  80ef04:	00800344 	movi	r2,13
  80ef08:	18800015 	stw	r2,0(r3)
  80ef0c:	00000406 	br	80ef20 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80ef10:	080ee040 	call	80ee04 <alt_get_errno>
  80ef14:	1007883a 	mov	r3,r2
  80ef18:	00801444 	movi	r2,81
  80ef1c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80ef20:	00bfffc4 	movi	r2,-1
}
  80ef24:	e037883a 	mov	sp,fp
  80ef28:	dfc00117 	ldw	ra,4(sp)
  80ef2c:	df000017 	ldw	fp,0(sp)
  80ef30:	dec00204 	addi	sp,sp,8
  80ef34:	f800283a 	ret

0080ef38 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80ef38:	defffd04 	addi	sp,sp,-12
  80ef3c:	dfc00215 	stw	ra,8(sp)
  80ef40:	df000115 	stw	fp,4(sp)
  80ef44:	df000104 	addi	fp,sp,4
  80ef48:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80ef4c:	d1600a04 	addi	r5,gp,-32728
  80ef50:	e13fff17 	ldw	r4,-4(fp)
  80ef54:	08113d40 	call	8113d4 <alt_dev_llist_insert>
}
  80ef58:	e037883a 	mov	sp,fp
  80ef5c:	dfc00117 	ldw	ra,4(sp)
  80ef60:	df000017 	ldw	fp,0(sp)
  80ef64:	dec00204 	addi	sp,sp,8
  80ef68:	f800283a 	ret

0080ef6c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80ef6c:	defffd04 	addi	sp,sp,-12
  80ef70:	dfc00215 	stw	ra,8(sp)
  80ef74:	df000115 	stw	fp,4(sp)
  80ef78:	df000104 	addi	fp,sp,4
  80ef7c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80ef80:	0811bb80 	call	811bb8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80ef84:	00800044 	movi	r2,1
  80ef88:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80ef8c:	0001883a 	nop
  80ef90:	e037883a 	mov	sp,fp
  80ef94:	dfc00117 	ldw	ra,4(sp)
  80ef98:	df000017 	ldw	fp,0(sp)
  80ef9c:	dec00204 	addi	sp,sp,8
  80efa0:	f800283a 	ret

0080efa4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80efa4:	defffe04 	addi	sp,sp,-8
  80efa8:	dfc00115 	stw	ra,4(sp)
  80efac:	df000015 	stw	fp,0(sp)
  80efb0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
  80efb4:	01c0fa04 	movi	r7,1000
  80efb8:	01800084 	movi	r6,2
  80efbc:	000b883a 	mov	r5,zero
  80efc0:	01004434 	movhi	r4,272
  80efc4:	21040804 	addi	r4,r4,4128
  80efc8:	08109fc0 	call	8109fc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80efcc:	01800044 	movi	r6,1
  80efd0:	000b883a 	mov	r5,zero
  80efd4:	01002074 	movhi	r4,129
  80efd8:	210c9b04 	addi	r4,r4,12908
  80efdc:	080f1a40 	call	80f1a4 <altera_avalon_jtag_uart_init>
  80efe0:	01002074 	movhi	r4,129
  80efe4:	210c9104 	addi	r4,r4,12868
  80efe8:	080ef380 	call	80ef38 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80efec:	01002074 	movhi	r4,129
  80eff0:	2110b304 	addi	r4,r4,17100
  80eff4:	08107f00 	call	8107f0 <altera_avalon_lcd_16207_init>
  80eff8:	01002074 	movhi	r4,129
  80effc:	2110a904 	addi	r4,r4,17060
  80f000:	080ef380 	call	80ef38 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( CPU_SYSID, cpu_sysid);
  80f004:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80f008:	000d883a 	mov	r6,zero
  80f00c:	000b883a 	mov	r5,zero
  80f010:	01002074 	movhi	r4,129
  80f014:	2110fb04 	addi	r4,r4,17388
  80f018:	0810b880 	call	810b88 <altera_avalon_uart_init>
  80f01c:	01002074 	movhi	r4,129
  80f020:	2110f104 	addi	r4,r4,17348
  80f024:	080ef380 	call	80ef38 <alt_dev_reg>
}
  80f028:	0001883a 	nop
  80f02c:	e037883a 	mov	sp,fp
  80f030:	dfc00117 	ldw	ra,4(sp)
  80f034:	df000017 	ldw	fp,0(sp)
  80f038:	dec00204 	addi	sp,sp,8
  80f03c:	f800283a 	ret

0080f040 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80f040:	defffa04 	addi	sp,sp,-24
  80f044:	dfc00515 	stw	ra,20(sp)
  80f048:	df000415 	stw	fp,16(sp)
  80f04c:	df000404 	addi	fp,sp,16
  80f050:	e13ffd15 	stw	r4,-12(fp)
  80f054:	e17ffe15 	stw	r5,-8(fp)
  80f058:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80f05c:	e0bffd17 	ldw	r2,-12(fp)
  80f060:	10800017 	ldw	r2,0(r2)
  80f064:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80f068:	e0bffc17 	ldw	r2,-16(fp)
  80f06c:	10c00a04 	addi	r3,r2,40
  80f070:	e0bffd17 	ldw	r2,-12(fp)
  80f074:	10800217 	ldw	r2,8(r2)
  80f078:	100f883a 	mov	r7,r2
  80f07c:	e1bfff17 	ldw	r6,-4(fp)
  80f080:	e17ffe17 	ldw	r5,-8(fp)
  80f084:	1809883a 	mov	r4,r3
  80f088:	080f6680 	call	80f668 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80f08c:	e037883a 	mov	sp,fp
  80f090:	dfc00117 	ldw	ra,4(sp)
  80f094:	df000017 	ldw	fp,0(sp)
  80f098:	dec00204 	addi	sp,sp,8
  80f09c:	f800283a 	ret

0080f0a0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80f0a0:	defffa04 	addi	sp,sp,-24
  80f0a4:	dfc00515 	stw	ra,20(sp)
  80f0a8:	df000415 	stw	fp,16(sp)
  80f0ac:	df000404 	addi	fp,sp,16
  80f0b0:	e13ffd15 	stw	r4,-12(fp)
  80f0b4:	e17ffe15 	stw	r5,-8(fp)
  80f0b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80f0bc:	e0bffd17 	ldw	r2,-12(fp)
  80f0c0:	10800017 	ldw	r2,0(r2)
  80f0c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80f0c8:	e0bffc17 	ldw	r2,-16(fp)
  80f0cc:	10c00a04 	addi	r3,r2,40
  80f0d0:	e0bffd17 	ldw	r2,-12(fp)
  80f0d4:	10800217 	ldw	r2,8(r2)
  80f0d8:	100f883a 	mov	r7,r2
  80f0dc:	e1bfff17 	ldw	r6,-4(fp)
  80f0e0:	e17ffe17 	ldw	r5,-8(fp)
  80f0e4:	1809883a 	mov	r4,r3
  80f0e8:	080f8840 	call	80f884 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80f0ec:	e037883a 	mov	sp,fp
  80f0f0:	dfc00117 	ldw	ra,4(sp)
  80f0f4:	df000017 	ldw	fp,0(sp)
  80f0f8:	dec00204 	addi	sp,sp,8
  80f0fc:	f800283a 	ret

0080f100 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80f100:	defffc04 	addi	sp,sp,-16
  80f104:	dfc00315 	stw	ra,12(sp)
  80f108:	df000215 	stw	fp,8(sp)
  80f10c:	df000204 	addi	fp,sp,8
  80f110:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80f114:	e0bfff17 	ldw	r2,-4(fp)
  80f118:	10800017 	ldw	r2,0(r2)
  80f11c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80f120:	e0bffe17 	ldw	r2,-8(fp)
  80f124:	10c00a04 	addi	r3,r2,40
  80f128:	e0bfff17 	ldw	r2,-4(fp)
  80f12c:	10800217 	ldw	r2,8(r2)
  80f130:	100b883a 	mov	r5,r2
  80f134:	1809883a 	mov	r4,r3
  80f138:	080f5100 	call	80f510 <altera_avalon_jtag_uart_close>
}
  80f13c:	e037883a 	mov	sp,fp
  80f140:	dfc00117 	ldw	ra,4(sp)
  80f144:	df000017 	ldw	fp,0(sp)
  80f148:	dec00204 	addi	sp,sp,8
  80f14c:	f800283a 	ret

0080f150 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80f150:	defffa04 	addi	sp,sp,-24
  80f154:	dfc00515 	stw	ra,20(sp)
  80f158:	df000415 	stw	fp,16(sp)
  80f15c:	df000404 	addi	fp,sp,16
  80f160:	e13ffd15 	stw	r4,-12(fp)
  80f164:	e17ffe15 	stw	r5,-8(fp)
  80f168:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80f16c:	e0bffd17 	ldw	r2,-12(fp)
  80f170:	10800017 	ldw	r2,0(r2)
  80f174:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80f178:	e0bffc17 	ldw	r2,-16(fp)
  80f17c:	10800a04 	addi	r2,r2,40
  80f180:	e1bfff17 	ldw	r6,-4(fp)
  80f184:	e17ffe17 	ldw	r5,-8(fp)
  80f188:	1009883a 	mov	r4,r2
  80f18c:	080f5780 	call	80f578 <altera_avalon_jtag_uart_ioctl>
}
  80f190:	e037883a 	mov	sp,fp
  80f194:	dfc00117 	ldw	ra,4(sp)
  80f198:	df000017 	ldw	fp,0(sp)
  80f19c:	dec00204 	addi	sp,sp,8
  80f1a0:	f800283a 	ret

0080f1a4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80f1a4:	defffa04 	addi	sp,sp,-24
  80f1a8:	dfc00515 	stw	ra,20(sp)
  80f1ac:	df000415 	stw	fp,16(sp)
  80f1b0:	df000404 	addi	fp,sp,16
  80f1b4:	e13ffd15 	stw	r4,-12(fp)
  80f1b8:	e17ffe15 	stw	r5,-8(fp)
  80f1bc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80f1c0:	e0bffd17 	ldw	r2,-12(fp)
  80f1c4:	00c00044 	movi	r3,1
  80f1c8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80f1cc:	e0bffd17 	ldw	r2,-12(fp)
  80f1d0:	10800017 	ldw	r2,0(r2)
  80f1d4:	10800104 	addi	r2,r2,4
  80f1d8:	1007883a 	mov	r3,r2
  80f1dc:	e0bffd17 	ldw	r2,-12(fp)
  80f1e0:	10800817 	ldw	r2,32(r2)
  80f1e4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80f1e8:	e0bffe17 	ldw	r2,-8(fp)
  80f1ec:	e0ffff17 	ldw	r3,-4(fp)
  80f1f0:	d8000015 	stw	zero,0(sp)
  80f1f4:	e1fffd17 	ldw	r7,-12(fp)
  80f1f8:	01802074 	movhi	r6,129
  80f1fc:	31bc9904 	addi	r6,r6,-3484
  80f200:	180b883a 	mov	r5,r3
  80f204:	1009883a 	mov	r4,r2
  80f208:	08117a80 	call	8117a8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80f20c:	e0bffd17 	ldw	r2,-12(fp)
  80f210:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80f214:	e0bffd17 	ldw	r2,-12(fp)
  80f218:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80f21c:	d0e76417 	ldw	r3,-25200(gp)
  80f220:	e1fffd17 	ldw	r7,-12(fp)
  80f224:	01802074 	movhi	r6,129
  80f228:	31bd1c04 	addi	r6,r6,-2960
  80f22c:	180b883a 	mov	r5,r3
  80f230:	1009883a 	mov	r4,r2
  80f234:	080df500 	call	80df50 <alt_alarm_start>
  80f238:	1000040e 	bge	r2,zero,80f24c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80f23c:	e0fffd17 	ldw	r3,-12(fp)
  80f240:	00a00034 	movhi	r2,32768
  80f244:	10bfffc4 	addi	r2,r2,-1
  80f248:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80f24c:	0001883a 	nop
  80f250:	e037883a 	mov	sp,fp
  80f254:	dfc00117 	ldw	ra,4(sp)
  80f258:	df000017 	ldw	fp,0(sp)
  80f25c:	dec00204 	addi	sp,sp,8
  80f260:	f800283a 	ret

0080f264 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80f264:	defff804 	addi	sp,sp,-32
  80f268:	df000715 	stw	fp,28(sp)
  80f26c:	df000704 	addi	fp,sp,28
  80f270:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80f274:	e0bfff17 	ldw	r2,-4(fp)
  80f278:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80f27c:	e0bffb17 	ldw	r2,-20(fp)
  80f280:	10800017 	ldw	r2,0(r2)
  80f284:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80f288:	e0bffc17 	ldw	r2,-16(fp)
  80f28c:	10800104 	addi	r2,r2,4
  80f290:	10800037 	ldwio	r2,0(r2)
  80f294:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80f298:	e0bffd17 	ldw	r2,-12(fp)
  80f29c:	1080c00c 	andi	r2,r2,768
  80f2a0:	10006d26 	beq	r2,zero,80f458 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80f2a4:	e0bffd17 	ldw	r2,-12(fp)
  80f2a8:	1080400c 	andi	r2,r2,256
  80f2ac:	10003526 	beq	r2,zero,80f384 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80f2b0:	00800074 	movhi	r2,1
  80f2b4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f2b8:	e0bffb17 	ldw	r2,-20(fp)
  80f2bc:	10800a17 	ldw	r2,40(r2)
  80f2c0:	10800044 	addi	r2,r2,1
  80f2c4:	1081ffcc 	andi	r2,r2,2047
  80f2c8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80f2cc:	e0bffb17 	ldw	r2,-20(fp)
  80f2d0:	10c00b17 	ldw	r3,44(r2)
  80f2d4:	e0bffe17 	ldw	r2,-8(fp)
  80f2d8:	18801526 	beq	r3,r2,80f330 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80f2dc:	e0bffc17 	ldw	r2,-16(fp)
  80f2e0:	10800037 	ldwio	r2,0(r2)
  80f2e4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80f2e8:	e0bff917 	ldw	r2,-28(fp)
  80f2ec:	10a0000c 	andi	r2,r2,32768
  80f2f0:	10001126 	beq	r2,zero,80f338 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80f2f4:	e0bffb17 	ldw	r2,-20(fp)
  80f2f8:	10800a17 	ldw	r2,40(r2)
  80f2fc:	e0fff917 	ldw	r3,-28(fp)
  80f300:	1809883a 	mov	r4,r3
  80f304:	e0fffb17 	ldw	r3,-20(fp)
  80f308:	1885883a 	add	r2,r3,r2
  80f30c:	10800e04 	addi	r2,r2,56
  80f310:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f314:	e0bffb17 	ldw	r2,-20(fp)
  80f318:	10800a17 	ldw	r2,40(r2)
  80f31c:	10800044 	addi	r2,r2,1
  80f320:	10c1ffcc 	andi	r3,r2,2047
  80f324:	e0bffb17 	ldw	r2,-20(fp)
  80f328:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80f32c:	003fe206 	br	80f2b8 <__alt_mem_onchip_mem+0xff78f2b8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80f330:	0001883a 	nop
  80f334:	00000106 	br	80f33c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80f338:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80f33c:	e0bff917 	ldw	r2,-28(fp)
  80f340:	10bfffec 	andhi	r2,r2,65535
  80f344:	10000f26 	beq	r2,zero,80f384 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80f348:	e0bffb17 	ldw	r2,-20(fp)
  80f34c:	10c00817 	ldw	r3,32(r2)
  80f350:	00bfff84 	movi	r2,-2
  80f354:	1886703a 	and	r3,r3,r2
  80f358:	e0bffb17 	ldw	r2,-20(fp)
  80f35c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80f360:	e0bffc17 	ldw	r2,-16(fp)
  80f364:	10800104 	addi	r2,r2,4
  80f368:	1007883a 	mov	r3,r2
  80f36c:	e0bffb17 	ldw	r2,-20(fp)
  80f370:	10800817 	ldw	r2,32(r2)
  80f374:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80f378:	e0bffc17 	ldw	r2,-16(fp)
  80f37c:	10800104 	addi	r2,r2,4
  80f380:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80f384:	e0bffd17 	ldw	r2,-12(fp)
  80f388:	1080800c 	andi	r2,r2,512
  80f38c:	103fbe26 	beq	r2,zero,80f288 <__alt_mem_onchip_mem+0xff78f288>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80f390:	e0bffd17 	ldw	r2,-12(fp)
  80f394:	1004d43a 	srli	r2,r2,16
  80f398:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80f39c:	00001406 	br	80f3f0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80f3a0:	e0bffc17 	ldw	r2,-16(fp)
  80f3a4:	e0fffb17 	ldw	r3,-20(fp)
  80f3a8:	18c00d17 	ldw	r3,52(r3)
  80f3ac:	e13ffb17 	ldw	r4,-20(fp)
  80f3b0:	20c7883a 	add	r3,r4,r3
  80f3b4:	18c20e04 	addi	r3,r3,2104
  80f3b8:	18c00003 	ldbu	r3,0(r3)
  80f3bc:	18c03fcc 	andi	r3,r3,255
  80f3c0:	18c0201c 	xori	r3,r3,128
  80f3c4:	18ffe004 	addi	r3,r3,-128
  80f3c8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f3cc:	e0bffb17 	ldw	r2,-20(fp)
  80f3d0:	10800d17 	ldw	r2,52(r2)
  80f3d4:	10800044 	addi	r2,r2,1
  80f3d8:	10c1ffcc 	andi	r3,r2,2047
  80f3dc:	e0bffb17 	ldw	r2,-20(fp)
  80f3e0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80f3e4:	e0bffa17 	ldw	r2,-24(fp)
  80f3e8:	10bfffc4 	addi	r2,r2,-1
  80f3ec:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80f3f0:	e0bffa17 	ldw	r2,-24(fp)
  80f3f4:	10000526 	beq	r2,zero,80f40c <altera_avalon_jtag_uart_irq+0x1a8>
  80f3f8:	e0bffb17 	ldw	r2,-20(fp)
  80f3fc:	10c00d17 	ldw	r3,52(r2)
  80f400:	e0bffb17 	ldw	r2,-20(fp)
  80f404:	10800c17 	ldw	r2,48(r2)
  80f408:	18bfe51e 	bne	r3,r2,80f3a0 <__alt_mem_onchip_mem+0xff78f3a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80f40c:	e0bffa17 	ldw	r2,-24(fp)
  80f410:	103f9d26 	beq	r2,zero,80f288 <__alt_mem_onchip_mem+0xff78f288>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80f414:	e0bffb17 	ldw	r2,-20(fp)
  80f418:	10c00817 	ldw	r3,32(r2)
  80f41c:	00bfff44 	movi	r2,-3
  80f420:	1886703a 	and	r3,r3,r2
  80f424:	e0bffb17 	ldw	r2,-20(fp)
  80f428:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f42c:	e0bffb17 	ldw	r2,-20(fp)
  80f430:	10800017 	ldw	r2,0(r2)
  80f434:	10800104 	addi	r2,r2,4
  80f438:	1007883a 	mov	r3,r2
  80f43c:	e0bffb17 	ldw	r2,-20(fp)
  80f440:	10800817 	ldw	r2,32(r2)
  80f444:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80f448:	e0bffc17 	ldw	r2,-16(fp)
  80f44c:	10800104 	addi	r2,r2,4
  80f450:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80f454:	003f8c06 	br	80f288 <__alt_mem_onchip_mem+0xff78f288>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80f458:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80f45c:	0001883a 	nop
  80f460:	e037883a 	mov	sp,fp
  80f464:	df000017 	ldw	fp,0(sp)
  80f468:	dec00104 	addi	sp,sp,4
  80f46c:	f800283a 	ret

0080f470 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80f470:	defff804 	addi	sp,sp,-32
  80f474:	df000715 	stw	fp,28(sp)
  80f478:	df000704 	addi	fp,sp,28
  80f47c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80f480:	e0bffb17 	ldw	r2,-20(fp)
  80f484:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80f488:	e0bff917 	ldw	r2,-28(fp)
  80f48c:	10800017 	ldw	r2,0(r2)
  80f490:	10800104 	addi	r2,r2,4
  80f494:	10800037 	ldwio	r2,0(r2)
  80f498:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80f49c:	e0bffa17 	ldw	r2,-24(fp)
  80f4a0:	1081000c 	andi	r2,r2,1024
  80f4a4:	10000b26 	beq	r2,zero,80f4d4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80f4a8:	e0bff917 	ldw	r2,-28(fp)
  80f4ac:	10800017 	ldw	r2,0(r2)
  80f4b0:	10800104 	addi	r2,r2,4
  80f4b4:	1007883a 	mov	r3,r2
  80f4b8:	e0bff917 	ldw	r2,-28(fp)
  80f4bc:	10800817 	ldw	r2,32(r2)
  80f4c0:	10810014 	ori	r2,r2,1024
  80f4c4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80f4c8:	e0bff917 	ldw	r2,-28(fp)
  80f4cc:	10000915 	stw	zero,36(r2)
  80f4d0:	00000a06 	br	80f4fc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80f4d4:	e0bff917 	ldw	r2,-28(fp)
  80f4d8:	10c00917 	ldw	r3,36(r2)
  80f4dc:	00a00034 	movhi	r2,32768
  80f4e0:	10bfff04 	addi	r2,r2,-4
  80f4e4:	10c00536 	bltu	r2,r3,80f4fc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80f4e8:	e0bff917 	ldw	r2,-28(fp)
  80f4ec:	10800917 	ldw	r2,36(r2)
  80f4f0:	10c00044 	addi	r3,r2,1
  80f4f4:	e0bff917 	ldw	r2,-28(fp)
  80f4f8:	10c00915 	stw	r3,36(r2)
  80f4fc:	d0a76417 	ldw	r2,-25200(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80f500:	e037883a 	mov	sp,fp
  80f504:	df000017 	ldw	fp,0(sp)
  80f508:	dec00104 	addi	sp,sp,4
  80f50c:	f800283a 	ret

0080f510 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80f510:	defffd04 	addi	sp,sp,-12
  80f514:	df000215 	stw	fp,8(sp)
  80f518:	df000204 	addi	fp,sp,8
  80f51c:	e13ffe15 	stw	r4,-8(fp)
  80f520:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80f524:	00000506 	br	80f53c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80f528:	e0bfff17 	ldw	r2,-4(fp)
  80f52c:	1090000c 	andi	r2,r2,16384
  80f530:	10000226 	beq	r2,zero,80f53c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80f534:	00bffd44 	movi	r2,-11
  80f538:	00000b06 	br	80f568 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80f53c:	e0bffe17 	ldw	r2,-8(fp)
  80f540:	10c00d17 	ldw	r3,52(r2)
  80f544:	e0bffe17 	ldw	r2,-8(fp)
  80f548:	10800c17 	ldw	r2,48(r2)
  80f54c:	18800526 	beq	r3,r2,80f564 <altera_avalon_jtag_uart_close+0x54>
  80f550:	e0bffe17 	ldw	r2,-8(fp)
  80f554:	10c00917 	ldw	r3,36(r2)
  80f558:	e0bffe17 	ldw	r2,-8(fp)
  80f55c:	10800117 	ldw	r2,4(r2)
  80f560:	18bff136 	bltu	r3,r2,80f528 <__alt_mem_onchip_mem+0xff78f528>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80f564:	0005883a 	mov	r2,zero
}
  80f568:	e037883a 	mov	sp,fp
  80f56c:	df000017 	ldw	fp,0(sp)
  80f570:	dec00104 	addi	sp,sp,4
  80f574:	f800283a 	ret

0080f578 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80f578:	defffa04 	addi	sp,sp,-24
  80f57c:	df000515 	stw	fp,20(sp)
  80f580:	df000504 	addi	fp,sp,20
  80f584:	e13ffd15 	stw	r4,-12(fp)
  80f588:	e17ffe15 	stw	r5,-8(fp)
  80f58c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80f590:	00bff9c4 	movi	r2,-25
  80f594:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80f598:	e0bffe17 	ldw	r2,-8(fp)
  80f59c:	10da8060 	cmpeqi	r3,r2,27137
  80f5a0:	1800031e 	bne	r3,zero,80f5b0 <altera_avalon_jtag_uart_ioctl+0x38>
  80f5a4:	109a80a0 	cmpeqi	r2,r2,27138
  80f5a8:	1000181e 	bne	r2,zero,80f60c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80f5ac:	00002906 	br	80f654 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80f5b0:	e0bffd17 	ldw	r2,-12(fp)
  80f5b4:	10c00117 	ldw	r3,4(r2)
  80f5b8:	00a00034 	movhi	r2,32768
  80f5bc:	10bfffc4 	addi	r2,r2,-1
  80f5c0:	18802126 	beq	r3,r2,80f648 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  80f5c4:	e0bfff17 	ldw	r2,-4(fp)
  80f5c8:	10800017 	ldw	r2,0(r2)
  80f5cc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80f5d0:	e0bffc17 	ldw	r2,-16(fp)
  80f5d4:	10800090 	cmplti	r2,r2,2
  80f5d8:	1000061e 	bne	r2,zero,80f5f4 <altera_avalon_jtag_uart_ioctl+0x7c>
  80f5dc:	e0fffc17 	ldw	r3,-16(fp)
  80f5e0:	00a00034 	movhi	r2,32768
  80f5e4:	10bfffc4 	addi	r2,r2,-1
  80f5e8:	18800226 	beq	r3,r2,80f5f4 <altera_avalon_jtag_uart_ioctl+0x7c>
  80f5ec:	e0bffc17 	ldw	r2,-16(fp)
  80f5f0:	00000206 	br	80f5fc <altera_avalon_jtag_uart_ioctl+0x84>
  80f5f4:	00a00034 	movhi	r2,32768
  80f5f8:	10bfff84 	addi	r2,r2,-2
  80f5fc:	e0fffd17 	ldw	r3,-12(fp)
  80f600:	18800115 	stw	r2,4(r3)
      rc = 0;
  80f604:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80f608:	00000f06 	br	80f648 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80f60c:	e0bffd17 	ldw	r2,-12(fp)
  80f610:	10c00117 	ldw	r3,4(r2)
  80f614:	00a00034 	movhi	r2,32768
  80f618:	10bfffc4 	addi	r2,r2,-1
  80f61c:	18800c26 	beq	r3,r2,80f650 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80f620:	e0bffd17 	ldw	r2,-12(fp)
  80f624:	10c00917 	ldw	r3,36(r2)
  80f628:	e0bffd17 	ldw	r2,-12(fp)
  80f62c:	10800117 	ldw	r2,4(r2)
  80f630:	1885803a 	cmpltu	r2,r3,r2
  80f634:	10c03fcc 	andi	r3,r2,255
  80f638:	e0bfff17 	ldw	r2,-4(fp)
  80f63c:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80f640:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80f644:	00000206 	br	80f650 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80f648:	0001883a 	nop
  80f64c:	00000106 	br	80f654 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80f650:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80f654:	e0bffb17 	ldw	r2,-20(fp)
}
  80f658:	e037883a 	mov	sp,fp
  80f65c:	df000017 	ldw	fp,0(sp)
  80f660:	dec00104 	addi	sp,sp,4
  80f664:	f800283a 	ret

0080f668 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80f668:	defff304 	addi	sp,sp,-52
  80f66c:	dfc00c15 	stw	ra,48(sp)
  80f670:	df000b15 	stw	fp,44(sp)
  80f674:	df000b04 	addi	fp,sp,44
  80f678:	e13ffc15 	stw	r4,-16(fp)
  80f67c:	e17ffd15 	stw	r5,-12(fp)
  80f680:	e1bffe15 	stw	r6,-8(fp)
  80f684:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80f688:	e0bffd17 	ldw	r2,-12(fp)
  80f68c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80f690:	00004706 	br	80f7b0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80f694:	e0bffc17 	ldw	r2,-16(fp)
  80f698:	10800a17 	ldw	r2,40(r2)
  80f69c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80f6a0:	e0bffc17 	ldw	r2,-16(fp)
  80f6a4:	10800b17 	ldw	r2,44(r2)
  80f6a8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80f6ac:	e0fff717 	ldw	r3,-36(fp)
  80f6b0:	e0bff817 	ldw	r2,-32(fp)
  80f6b4:	18800536 	bltu	r3,r2,80f6cc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80f6b8:	e0fff717 	ldw	r3,-36(fp)
  80f6bc:	e0bff817 	ldw	r2,-32(fp)
  80f6c0:	1885c83a 	sub	r2,r3,r2
  80f6c4:	e0bff615 	stw	r2,-40(fp)
  80f6c8:	00000406 	br	80f6dc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80f6cc:	00c20004 	movi	r3,2048
  80f6d0:	e0bff817 	ldw	r2,-32(fp)
  80f6d4:	1885c83a 	sub	r2,r3,r2
  80f6d8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80f6dc:	e0bff617 	ldw	r2,-40(fp)
  80f6e0:	10001e26 	beq	r2,zero,80f75c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  80f6e4:	e0fffe17 	ldw	r3,-8(fp)
  80f6e8:	e0bff617 	ldw	r2,-40(fp)
  80f6ec:	1880022e 	bgeu	r3,r2,80f6f8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80f6f0:	e0bffe17 	ldw	r2,-8(fp)
  80f6f4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80f6f8:	e0bffc17 	ldw	r2,-16(fp)
  80f6fc:	10c00e04 	addi	r3,r2,56
  80f700:	e0bff817 	ldw	r2,-32(fp)
  80f704:	1885883a 	add	r2,r3,r2
  80f708:	e1bff617 	ldw	r6,-40(fp)
  80f70c:	100b883a 	mov	r5,r2
  80f710:	e13ff517 	ldw	r4,-44(fp)
  80f714:	08070240 	call	807024 <memcpy>
      ptr   += n;
  80f718:	e0fff517 	ldw	r3,-44(fp)
  80f71c:	e0bff617 	ldw	r2,-40(fp)
  80f720:	1885883a 	add	r2,r3,r2
  80f724:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  80f728:	e0fffe17 	ldw	r3,-8(fp)
  80f72c:	e0bff617 	ldw	r2,-40(fp)
  80f730:	1885c83a 	sub	r2,r3,r2
  80f734:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f738:	e0fff817 	ldw	r3,-32(fp)
  80f73c:	e0bff617 	ldw	r2,-40(fp)
  80f740:	1885883a 	add	r2,r3,r2
  80f744:	10c1ffcc 	andi	r3,r2,2047
  80f748:	e0bffc17 	ldw	r2,-16(fp)
  80f74c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80f750:	e0bffe17 	ldw	r2,-8(fp)
  80f754:	00bfcf16 	blt	zero,r2,80f694 <__alt_mem_onchip_mem+0xff78f694>
  80f758:	00000106 	br	80f760 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80f75c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80f760:	e0fff517 	ldw	r3,-44(fp)
  80f764:	e0bffd17 	ldw	r2,-12(fp)
  80f768:	1880141e 	bne	r3,r2,80f7bc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80f76c:	e0bfff17 	ldw	r2,-4(fp)
  80f770:	1090000c 	andi	r2,r2,16384
  80f774:	1000131e 	bne	r2,zero,80f7c4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80f778:	0001883a 	nop
  80f77c:	e0bffc17 	ldw	r2,-16(fp)
  80f780:	10c00a17 	ldw	r3,40(r2)
  80f784:	e0bff717 	ldw	r2,-36(fp)
  80f788:	1880051e 	bne	r3,r2,80f7a0 <altera_avalon_jtag_uart_read+0x138>
  80f78c:	e0bffc17 	ldw	r2,-16(fp)
  80f790:	10c00917 	ldw	r3,36(r2)
  80f794:	e0bffc17 	ldw	r2,-16(fp)
  80f798:	10800117 	ldw	r2,4(r2)
  80f79c:	18bff736 	bltu	r3,r2,80f77c <__alt_mem_onchip_mem+0xff78f77c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80f7a0:	e0bffc17 	ldw	r2,-16(fp)
  80f7a4:	10c00a17 	ldw	r3,40(r2)
  80f7a8:	e0bff717 	ldw	r2,-36(fp)
  80f7ac:	18800726 	beq	r3,r2,80f7cc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80f7b0:	e0bffe17 	ldw	r2,-8(fp)
  80f7b4:	00bfb716 	blt	zero,r2,80f694 <__alt_mem_onchip_mem+0xff78f694>
  80f7b8:	00000506 	br	80f7d0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80f7bc:	0001883a 	nop
  80f7c0:	00000306 	br	80f7d0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  80f7c4:	0001883a 	nop
  80f7c8:	00000106 	br	80f7d0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80f7cc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80f7d0:	e0fff517 	ldw	r3,-44(fp)
  80f7d4:	e0bffd17 	ldw	r2,-12(fp)
  80f7d8:	18801826 	beq	r3,r2,80f83c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f7dc:	0005303a 	rdctl	r2,status
  80f7e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f7e4:	e0fffb17 	ldw	r3,-20(fp)
  80f7e8:	00bfff84 	movi	r2,-2
  80f7ec:	1884703a 	and	r2,r3,r2
  80f7f0:	1001703a 	wrctl	status,r2
  
  return context;
  80f7f4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80f7f8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80f7fc:	e0bffc17 	ldw	r2,-16(fp)
  80f800:	10800817 	ldw	r2,32(r2)
  80f804:	10c00054 	ori	r3,r2,1
  80f808:	e0bffc17 	ldw	r2,-16(fp)
  80f80c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f810:	e0bffc17 	ldw	r2,-16(fp)
  80f814:	10800017 	ldw	r2,0(r2)
  80f818:	10800104 	addi	r2,r2,4
  80f81c:	1007883a 	mov	r3,r2
  80f820:	e0bffc17 	ldw	r2,-16(fp)
  80f824:	10800817 	ldw	r2,32(r2)
  80f828:	18800035 	stwio	r2,0(r3)
  80f82c:	e0bffa17 	ldw	r2,-24(fp)
  80f830:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f834:	e0bff917 	ldw	r2,-28(fp)
  80f838:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80f83c:	e0fff517 	ldw	r3,-44(fp)
  80f840:	e0bffd17 	ldw	r2,-12(fp)
  80f844:	18800426 	beq	r3,r2,80f858 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  80f848:	e0fff517 	ldw	r3,-44(fp)
  80f84c:	e0bffd17 	ldw	r2,-12(fp)
  80f850:	1885c83a 	sub	r2,r3,r2
  80f854:	00000606 	br	80f870 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  80f858:	e0bfff17 	ldw	r2,-4(fp)
  80f85c:	1090000c 	andi	r2,r2,16384
  80f860:	10000226 	beq	r2,zero,80f86c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80f864:	00bffd44 	movi	r2,-11
  80f868:	00000106 	br	80f870 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  80f86c:	00bffec4 	movi	r2,-5
}
  80f870:	e037883a 	mov	sp,fp
  80f874:	dfc00117 	ldw	ra,4(sp)
  80f878:	df000017 	ldw	fp,0(sp)
  80f87c:	dec00204 	addi	sp,sp,8
  80f880:	f800283a 	ret

0080f884 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80f884:	defff304 	addi	sp,sp,-52
  80f888:	dfc00c15 	stw	ra,48(sp)
  80f88c:	df000b15 	stw	fp,44(sp)
  80f890:	df000b04 	addi	fp,sp,44
  80f894:	e13ffc15 	stw	r4,-16(fp)
  80f898:	e17ffd15 	stw	r5,-12(fp)
  80f89c:	e1bffe15 	stw	r6,-8(fp)
  80f8a0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80f8a4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80f8a8:	e0bffd17 	ldw	r2,-12(fp)
  80f8ac:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80f8b0:	00003706 	br	80f990 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80f8b4:	e0bffc17 	ldw	r2,-16(fp)
  80f8b8:	10800c17 	ldw	r2,48(r2)
  80f8bc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80f8c0:	e0bffc17 	ldw	r2,-16(fp)
  80f8c4:	10800d17 	ldw	r2,52(r2)
  80f8c8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80f8cc:	e0fff917 	ldw	r3,-28(fp)
  80f8d0:	e0bff517 	ldw	r2,-44(fp)
  80f8d4:	1880062e 	bgeu	r3,r2,80f8f0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80f8d8:	e0fff517 	ldw	r3,-44(fp)
  80f8dc:	e0bff917 	ldw	r2,-28(fp)
  80f8e0:	1885c83a 	sub	r2,r3,r2
  80f8e4:	10bfffc4 	addi	r2,r2,-1
  80f8e8:	e0bff615 	stw	r2,-40(fp)
  80f8ec:	00000b06 	br	80f91c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  80f8f0:	e0bff517 	ldw	r2,-44(fp)
  80f8f4:	10000526 	beq	r2,zero,80f90c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80f8f8:	00c20004 	movi	r3,2048
  80f8fc:	e0bff917 	ldw	r2,-28(fp)
  80f900:	1885c83a 	sub	r2,r3,r2
  80f904:	e0bff615 	stw	r2,-40(fp)
  80f908:	00000406 	br	80f91c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80f90c:	00c1ffc4 	movi	r3,2047
  80f910:	e0bff917 	ldw	r2,-28(fp)
  80f914:	1885c83a 	sub	r2,r3,r2
  80f918:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80f91c:	e0bff617 	ldw	r2,-40(fp)
  80f920:	10001e26 	beq	r2,zero,80f99c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  80f924:	e0fffe17 	ldw	r3,-8(fp)
  80f928:	e0bff617 	ldw	r2,-40(fp)
  80f92c:	1880022e 	bgeu	r3,r2,80f938 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  80f930:	e0bffe17 	ldw	r2,-8(fp)
  80f934:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80f938:	e0bffc17 	ldw	r2,-16(fp)
  80f93c:	10c20e04 	addi	r3,r2,2104
  80f940:	e0bff917 	ldw	r2,-28(fp)
  80f944:	1885883a 	add	r2,r3,r2
  80f948:	e1bff617 	ldw	r6,-40(fp)
  80f94c:	e17ffd17 	ldw	r5,-12(fp)
  80f950:	1009883a 	mov	r4,r2
  80f954:	08070240 	call	807024 <memcpy>
      ptr   += n;
  80f958:	e0fffd17 	ldw	r3,-12(fp)
  80f95c:	e0bff617 	ldw	r2,-40(fp)
  80f960:	1885883a 	add	r2,r3,r2
  80f964:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80f968:	e0fffe17 	ldw	r3,-8(fp)
  80f96c:	e0bff617 	ldw	r2,-40(fp)
  80f970:	1885c83a 	sub	r2,r3,r2
  80f974:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f978:	e0fff917 	ldw	r3,-28(fp)
  80f97c:	e0bff617 	ldw	r2,-40(fp)
  80f980:	1885883a 	add	r2,r3,r2
  80f984:	10c1ffcc 	andi	r3,r2,2047
  80f988:	e0bffc17 	ldw	r2,-16(fp)
  80f98c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80f990:	e0bffe17 	ldw	r2,-8(fp)
  80f994:	00bfc716 	blt	zero,r2,80f8b4 <__alt_mem_onchip_mem+0xff78f8b4>
  80f998:	00000106 	br	80f9a0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80f99c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f9a0:	0005303a 	rdctl	r2,status
  80f9a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f9a8:	e0fffb17 	ldw	r3,-20(fp)
  80f9ac:	00bfff84 	movi	r2,-2
  80f9b0:	1884703a 	and	r2,r3,r2
  80f9b4:	1001703a 	wrctl	status,r2
  
  return context;
  80f9b8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80f9bc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80f9c0:	e0bffc17 	ldw	r2,-16(fp)
  80f9c4:	10800817 	ldw	r2,32(r2)
  80f9c8:	10c00094 	ori	r3,r2,2
  80f9cc:	e0bffc17 	ldw	r2,-16(fp)
  80f9d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f9d4:	e0bffc17 	ldw	r2,-16(fp)
  80f9d8:	10800017 	ldw	r2,0(r2)
  80f9dc:	10800104 	addi	r2,r2,4
  80f9e0:	1007883a 	mov	r3,r2
  80f9e4:	e0bffc17 	ldw	r2,-16(fp)
  80f9e8:	10800817 	ldw	r2,32(r2)
  80f9ec:	18800035 	stwio	r2,0(r3)
  80f9f0:	e0bffa17 	ldw	r2,-24(fp)
  80f9f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f9f8:	e0bff817 	ldw	r2,-32(fp)
  80f9fc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80fa00:	e0bffe17 	ldw	r2,-8(fp)
  80fa04:	0080100e 	bge	zero,r2,80fa48 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  80fa08:	e0bfff17 	ldw	r2,-4(fp)
  80fa0c:	1090000c 	andi	r2,r2,16384
  80fa10:	1000101e 	bne	r2,zero,80fa54 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80fa14:	0001883a 	nop
  80fa18:	e0bffc17 	ldw	r2,-16(fp)
  80fa1c:	10c00d17 	ldw	r3,52(r2)
  80fa20:	e0bff517 	ldw	r2,-44(fp)
  80fa24:	1880051e 	bne	r3,r2,80fa3c <altera_avalon_jtag_uart_write+0x1b8>
  80fa28:	e0bffc17 	ldw	r2,-16(fp)
  80fa2c:	10c00917 	ldw	r3,36(r2)
  80fa30:	e0bffc17 	ldw	r2,-16(fp)
  80fa34:	10800117 	ldw	r2,4(r2)
  80fa38:	18bff736 	bltu	r3,r2,80fa18 <__alt_mem_onchip_mem+0xff78fa18>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80fa3c:	e0bffc17 	ldw	r2,-16(fp)
  80fa40:	10800917 	ldw	r2,36(r2)
  80fa44:	1000051e 	bne	r2,zero,80fa5c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  80fa48:	e0bffe17 	ldw	r2,-8(fp)
  80fa4c:	00bfd016 	blt	zero,r2,80f990 <__alt_mem_onchip_mem+0xff78f990>
  80fa50:	00000306 	br	80fa60 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80fa54:	0001883a 	nop
  80fa58:	00000106 	br	80fa60 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80fa5c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80fa60:	e0fffd17 	ldw	r3,-12(fp)
  80fa64:	e0bff717 	ldw	r2,-36(fp)
  80fa68:	18800426 	beq	r3,r2,80fa7c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  80fa6c:	e0fffd17 	ldw	r3,-12(fp)
  80fa70:	e0bff717 	ldw	r2,-36(fp)
  80fa74:	1885c83a 	sub	r2,r3,r2
  80fa78:	00000606 	br	80fa94 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  80fa7c:	e0bfff17 	ldw	r2,-4(fp)
  80fa80:	1090000c 	andi	r2,r2,16384
  80fa84:	10000226 	beq	r2,zero,80fa90 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  80fa88:	00bffd44 	movi	r2,-11
  80fa8c:	00000106 	br	80fa94 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80fa90:	00bffec4 	movi	r2,-5
}
  80fa94:	e037883a 	mov	sp,fp
  80fa98:	dfc00117 	ldw	ra,4(sp)
  80fa9c:	df000017 	ldw	fp,0(sp)
  80faa0:	dec00204 	addi	sp,sp,8
  80faa4:	f800283a 	ret

0080faa8 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80faa8:	defffa04 	addi	sp,sp,-24
  80faac:	dfc00515 	stw	ra,20(sp)
  80fab0:	df000415 	stw	fp,16(sp)
  80fab4:	df000404 	addi	fp,sp,16
  80fab8:	e13ffe15 	stw	r4,-8(fp)
  80fabc:	2805883a 	mov	r2,r5
  80fac0:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80fac4:	e0bffe17 	ldw	r2,-8(fp)
  80fac8:	10800017 	ldw	r2,0(r2)
  80facc:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80fad0:	008003f4 	movhi	r2,15
  80fad4:	10909004 	addi	r2,r2,16960
  80fad8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80fadc:	e0bffe17 	ldw	r2,-8(fp)
  80fae0:	10800803 	ldbu	r2,32(r2)
  80fae4:	10803fcc 	andi	r2,r2,255
  80fae8:	1080201c 	xori	r2,r2,128
  80faec:	10bfe004 	addi	r2,r2,-128
  80faf0:	1000151e 	bne	r2,zero,80fb48 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80faf4:	00000906 	br	80fb1c <lcd_write_command+0x74>
    if (--i == 0)
  80faf8:	e0bffc17 	ldw	r2,-16(fp)
  80fafc:	10bfffc4 	addi	r2,r2,-1
  80fb00:	e0bffc15 	stw	r2,-16(fp)
  80fb04:	e0bffc17 	ldw	r2,-16(fp)
  80fb08:	1000041e 	bne	r2,zero,80fb1c <lcd_write_command+0x74>
    {
      sp->broken = 1;
  80fb0c:	e0bffe17 	ldw	r2,-8(fp)
  80fb10:	00c00044 	movi	r3,1
  80fb14:	10c00805 	stb	r3,32(r2)
      return;
  80fb18:	00000c06 	br	80fb4c <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80fb1c:	e0bffd17 	ldw	r2,-12(fp)
  80fb20:	10800104 	addi	r2,r2,4
  80fb24:	10800037 	ldwio	r2,0(r2)
  80fb28:	1080200c 	andi	r2,r2,128
  80fb2c:	103ff21e 	bne	r2,zero,80faf8 <__alt_mem_onchip_mem+0xff78faf8>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80fb30:	01001904 	movi	r4,100
  80fb34:	0811b880 	call	811b88 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80fb38:	e0bffd17 	ldw	r2,-12(fp)
  80fb3c:	e0ffff03 	ldbu	r3,-4(fp)
  80fb40:	10c00035 	stwio	r3,0(r2)
  80fb44:	00000106 	br	80fb4c <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80fb48:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  80fb4c:	e037883a 	mov	sp,fp
  80fb50:	dfc00117 	ldw	ra,4(sp)
  80fb54:	df000017 	ldw	fp,0(sp)
  80fb58:	dec00204 	addi	sp,sp,8
  80fb5c:	f800283a 	ret

0080fb60 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80fb60:	defffa04 	addi	sp,sp,-24
  80fb64:	dfc00515 	stw	ra,20(sp)
  80fb68:	df000415 	stw	fp,16(sp)
  80fb6c:	df000404 	addi	fp,sp,16
  80fb70:	e13ffe15 	stw	r4,-8(fp)
  80fb74:	2805883a 	mov	r2,r5
  80fb78:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80fb7c:	e0bffe17 	ldw	r2,-8(fp)
  80fb80:	10800017 	ldw	r2,0(r2)
  80fb84:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80fb88:	008003f4 	movhi	r2,15
  80fb8c:	10909004 	addi	r2,r2,16960
  80fb90:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80fb94:	e0bffe17 	ldw	r2,-8(fp)
  80fb98:	10800803 	ldbu	r2,32(r2)
  80fb9c:	10803fcc 	andi	r2,r2,255
  80fba0:	1080201c 	xori	r2,r2,128
  80fba4:	10bfe004 	addi	r2,r2,-128
  80fba8:	10001d1e 	bne	r2,zero,80fc20 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80fbac:	00000906 	br	80fbd4 <lcd_write_data+0x74>
    if (--i == 0)
  80fbb0:	e0bffc17 	ldw	r2,-16(fp)
  80fbb4:	10bfffc4 	addi	r2,r2,-1
  80fbb8:	e0bffc15 	stw	r2,-16(fp)
  80fbbc:	e0bffc17 	ldw	r2,-16(fp)
  80fbc0:	1000041e 	bne	r2,zero,80fbd4 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  80fbc4:	e0bffe17 	ldw	r2,-8(fp)
  80fbc8:	00c00044 	movi	r3,1
  80fbcc:	10c00805 	stb	r3,32(r2)
      return;
  80fbd0:	00001406 	br	80fc24 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80fbd4:	e0bffd17 	ldw	r2,-12(fp)
  80fbd8:	10800104 	addi	r2,r2,4
  80fbdc:	10800037 	ldwio	r2,0(r2)
  80fbe0:	1080200c 	andi	r2,r2,128
  80fbe4:	103ff21e 	bne	r2,zero,80fbb0 <__alt_mem_onchip_mem+0xff78fbb0>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80fbe8:	01001904 	movi	r4,100
  80fbec:	0811b880 	call	811b88 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80fbf0:	e0bffd17 	ldw	r2,-12(fp)
  80fbf4:	10800204 	addi	r2,r2,8
  80fbf8:	1007883a 	mov	r3,r2
  80fbfc:	e0bfff03 	ldbu	r2,-4(fp)
  80fc00:	18800035 	stwio	r2,0(r3)

  sp->address++;
  80fc04:	e0bffe17 	ldw	r2,-8(fp)
  80fc08:	108008c3 	ldbu	r2,35(r2)
  80fc0c:	10800044 	addi	r2,r2,1
  80fc10:	1007883a 	mov	r3,r2
  80fc14:	e0bffe17 	ldw	r2,-8(fp)
  80fc18:	10c008c5 	stb	r3,35(r2)
  80fc1c:	00000106 	br	80fc24 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80fc20:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  80fc24:	e037883a 	mov	sp,fp
  80fc28:	dfc00117 	ldw	ra,4(sp)
  80fc2c:	df000017 	ldw	fp,0(sp)
  80fc30:	dec00204 	addi	sp,sp,8
  80fc34:	f800283a 	ret

0080fc38 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80fc38:	defffc04 	addi	sp,sp,-16
  80fc3c:	dfc00315 	stw	ra,12(sp)
  80fc40:	df000215 	stw	fp,8(sp)
  80fc44:	df000204 	addi	fp,sp,8
  80fc48:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80fc4c:	01400044 	movi	r5,1
  80fc50:	e13fff17 	ldw	r4,-4(fp)
  80fc54:	080faa80 	call	80faa8 <lcd_write_command>

  sp->x = 0;
  80fc58:	e0bfff17 	ldw	r2,-4(fp)
  80fc5c:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80fc60:	e0bfff17 	ldw	r2,-4(fp)
  80fc64:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80fc68:	e0bfff17 	ldw	r2,-4(fp)
  80fc6c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fc70:	e03ffe15 	stw	zero,-8(fp)
  80fc74:	00001b06 	br	80fce4 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80fc78:	e0bffe17 	ldw	r2,-8(fp)
  80fc7c:	108018e4 	muli	r2,r2,99
  80fc80:	10801004 	addi	r2,r2,64
  80fc84:	e0ffff17 	ldw	r3,-4(fp)
  80fc88:	1885883a 	add	r2,r3,r2
  80fc8c:	01801444 	movi	r6,81
  80fc90:	01400804 	movi	r5,32
  80fc94:	1009883a 	mov	r4,r2
  80fc98:	0801e2c0 	call	801e2c <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80fc9c:	e0bffe17 	ldw	r2,-8(fp)
  80fca0:	108018e4 	muli	r2,r2,99
  80fca4:	10800c04 	addi	r2,r2,48
  80fca8:	e0ffff17 	ldw	r3,-4(fp)
  80fcac:	1885883a 	add	r2,r3,r2
  80fcb0:	01800404 	movi	r6,16
  80fcb4:	01400804 	movi	r5,32
  80fcb8:	1009883a 	mov	r4,r2
  80fcbc:	0801e2c0 	call	801e2c <memset>
    sp->line[y].width = 0;
  80fcc0:	e0ffff17 	ldw	r3,-4(fp)
  80fcc4:	e0bffe17 	ldw	r2,-8(fp)
  80fcc8:	108018e4 	muli	r2,r2,99
  80fccc:	1885883a 	add	r2,r3,r2
  80fcd0:	10802444 	addi	r2,r2,145
  80fcd4:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fcd8:	e0bffe17 	ldw	r2,-8(fp)
  80fcdc:	10800044 	addi	r2,r2,1
  80fce0:	e0bffe15 	stw	r2,-8(fp)
  80fce4:	e0bffe17 	ldw	r2,-8(fp)
  80fce8:	10800090 	cmplti	r2,r2,2
  80fcec:	103fe21e 	bne	r2,zero,80fc78 <__alt_mem_onchip_mem+0xff78fc78>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80fcf0:	0001883a 	nop
  80fcf4:	e037883a 	mov	sp,fp
  80fcf8:	dfc00117 	ldw	ra,4(sp)
  80fcfc:	df000017 	ldw	fp,0(sp)
  80fd00:	dec00204 	addi	sp,sp,8
  80fd04:	f800283a 	ret

0080fd08 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80fd08:	defff704 	addi	sp,sp,-36
  80fd0c:	dfc00815 	stw	ra,32(sp)
  80fd10:	df000715 	stw	fp,28(sp)
  80fd14:	df000704 	addi	fp,sp,28
  80fd18:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80fd1c:	e0bfff17 	ldw	r2,-4(fp)
  80fd20:	10800943 	ldbu	r2,37(r2)
  80fd24:	10803fcc 	andi	r2,r2,255
  80fd28:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fd2c:	e03ff915 	stw	zero,-28(fp)
  80fd30:	00006706 	br	80fed0 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80fd34:	e0ffff17 	ldw	r3,-4(fp)
  80fd38:	e0bff917 	ldw	r2,-28(fp)
  80fd3c:	108018e4 	muli	r2,r2,99
  80fd40:	1885883a 	add	r2,r3,r2
  80fd44:	10802444 	addi	r2,r2,145
  80fd48:	10800003 	ldbu	r2,0(r2)
  80fd4c:	10803fcc 	andi	r2,r2,255
  80fd50:	1080201c 	xori	r2,r2,128
  80fd54:	10bfe004 	addi	r2,r2,-128
  80fd58:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80fd5c:	e0ffff17 	ldw	r3,-4(fp)
  80fd60:	e0bff917 	ldw	r2,-28(fp)
  80fd64:	108018e4 	muli	r2,r2,99
  80fd68:	1885883a 	add	r2,r3,r2
  80fd6c:	10802484 	addi	r2,r2,146
  80fd70:	10800003 	ldbu	r2,0(r2)
  80fd74:	10c03fcc 	andi	r3,r2,255
  80fd78:	e0bffc17 	ldw	r2,-16(fp)
  80fd7c:	1885383a 	mul	r2,r3,r2
  80fd80:	1005d23a 	srai	r2,r2,8
  80fd84:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  80fd88:	e0fffb17 	ldw	r3,-20(fp)
  80fd8c:	e0bffd17 	ldw	r2,-12(fp)
  80fd90:	18800116 	blt	r3,r2,80fd98 <lcd_repaint_screen+0x90>
      offset = 0;
  80fd94:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80fd98:	e03ffa15 	stw	zero,-24(fp)
  80fd9c:	00004606 	br	80feb8 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80fda0:	e0fffa17 	ldw	r3,-24(fp)
  80fda4:	e0bffb17 	ldw	r2,-20(fp)
  80fda8:	1885883a 	add	r2,r3,r2
  80fdac:	e17ffd17 	ldw	r5,-12(fp)
  80fdb0:	1009883a 	mov	r4,r2
  80fdb4:	080b7b80 	call	80b7b8 <__modsi3>
  80fdb8:	1009883a 	mov	r4,r2
  80fdbc:	e0ffff17 	ldw	r3,-4(fp)
  80fdc0:	e0bff917 	ldw	r2,-28(fp)
  80fdc4:	108018e4 	muli	r2,r2,99
  80fdc8:	1885883a 	add	r2,r3,r2
  80fdcc:	1105883a 	add	r2,r2,r4
  80fdd0:	10801004 	addi	r2,r2,64
  80fdd4:	10800003 	ldbu	r2,0(r2)
  80fdd8:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80fddc:	e0ffff17 	ldw	r3,-4(fp)
  80fde0:	e0bff917 	ldw	r2,-28(fp)
  80fde4:	108018e4 	muli	r2,r2,99
  80fde8:	1887883a 	add	r3,r3,r2
  80fdec:	e0bffa17 	ldw	r2,-24(fp)
  80fdf0:	1885883a 	add	r2,r3,r2
  80fdf4:	10800c04 	addi	r2,r2,48
  80fdf8:	10800003 	ldbu	r2,0(r2)
  80fdfc:	10c03fcc 	andi	r3,r2,255
  80fe00:	18c0201c 	xori	r3,r3,128
  80fe04:	18ffe004 	addi	r3,r3,-128
  80fe08:	e0bffe07 	ldb	r2,-8(fp)
  80fe0c:	18802726 	beq	r3,r2,80feac <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80fe10:	e0fff917 	ldw	r3,-28(fp)
  80fe14:	d0a01204 	addi	r2,gp,-32696
  80fe18:	1885883a 	add	r2,r3,r2
  80fe1c:	10800003 	ldbu	r2,0(r2)
  80fe20:	1007883a 	mov	r3,r2
  80fe24:	e0bffa17 	ldw	r2,-24(fp)
  80fe28:	1885883a 	add	r2,r3,r2
  80fe2c:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  80fe30:	e0fffe43 	ldbu	r3,-7(fp)
  80fe34:	e0bfff17 	ldw	r2,-4(fp)
  80fe38:	108008c3 	ldbu	r2,35(r2)
  80fe3c:	10803fcc 	andi	r2,r2,255
  80fe40:	1080201c 	xori	r2,r2,128
  80fe44:	10bfe004 	addi	r2,r2,-128
  80fe48:	18800a26 	beq	r3,r2,80fe74 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80fe4c:	e0fffe43 	ldbu	r3,-7(fp)
  80fe50:	00bfe004 	movi	r2,-128
  80fe54:	1884b03a 	or	r2,r3,r2
  80fe58:	10803fcc 	andi	r2,r2,255
  80fe5c:	100b883a 	mov	r5,r2
  80fe60:	e13fff17 	ldw	r4,-4(fp)
  80fe64:	080faa80 	call	80faa8 <lcd_write_command>
          sp->address = address;
  80fe68:	e0fffe43 	ldbu	r3,-7(fp)
  80fe6c:	e0bfff17 	ldw	r2,-4(fp)
  80fe70:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80fe74:	e0bffe03 	ldbu	r2,-8(fp)
  80fe78:	10803fcc 	andi	r2,r2,255
  80fe7c:	100b883a 	mov	r5,r2
  80fe80:	e13fff17 	ldw	r4,-4(fp)
  80fe84:	080fb600 	call	80fb60 <lcd_write_data>
        sp->line[y].visible[x] = c;
  80fe88:	e0ffff17 	ldw	r3,-4(fp)
  80fe8c:	e0bff917 	ldw	r2,-28(fp)
  80fe90:	108018e4 	muli	r2,r2,99
  80fe94:	1887883a 	add	r3,r3,r2
  80fe98:	e0bffa17 	ldw	r2,-24(fp)
  80fe9c:	1885883a 	add	r2,r3,r2
  80fea0:	10800c04 	addi	r2,r2,48
  80fea4:	e0fffe03 	ldbu	r3,-8(fp)
  80fea8:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80feac:	e0bffa17 	ldw	r2,-24(fp)
  80feb0:	10800044 	addi	r2,r2,1
  80feb4:	e0bffa15 	stw	r2,-24(fp)
  80feb8:	e0bffa17 	ldw	r2,-24(fp)
  80febc:	10800410 	cmplti	r2,r2,16
  80fec0:	103fb71e 	bne	r2,zero,80fda0 <__alt_mem_onchip_mem+0xff78fda0>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fec4:	e0bff917 	ldw	r2,-28(fp)
  80fec8:	10800044 	addi	r2,r2,1
  80fecc:	e0bff915 	stw	r2,-28(fp)
  80fed0:	e0bff917 	ldw	r2,-28(fp)
  80fed4:	10800090 	cmplti	r2,r2,2
  80fed8:	103f961e 	bne	r2,zero,80fd34 <__alt_mem_onchip_mem+0xff78fd34>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80fedc:	0001883a 	nop
  80fee0:	e037883a 	mov	sp,fp
  80fee4:	dfc00117 	ldw	ra,4(sp)
  80fee8:	df000017 	ldw	fp,0(sp)
  80feec:	dec00204 	addi	sp,sp,8
  80fef0:	f800283a 	ret

0080fef4 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80fef4:	defffc04 	addi	sp,sp,-16
  80fef8:	dfc00315 	stw	ra,12(sp)
  80fefc:	df000215 	stw	fp,8(sp)
  80ff00:	df000204 	addi	fp,sp,8
  80ff04:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80ff08:	e03ffe15 	stw	zero,-8(fp)
  80ff0c:	00001d06 	br	80ff84 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80ff10:	e0bffe17 	ldw	r2,-8(fp)
  80ff14:	00800f16 	blt	zero,r2,80ff54 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80ff18:	e0bffe17 	ldw	r2,-8(fp)
  80ff1c:	108018e4 	muli	r2,r2,99
  80ff20:	10801004 	addi	r2,r2,64
  80ff24:	e0ffff17 	ldw	r3,-4(fp)
  80ff28:	1889883a 	add	r4,r3,r2
  80ff2c:	e0bffe17 	ldw	r2,-8(fp)
  80ff30:	10800044 	addi	r2,r2,1
  80ff34:	108018e4 	muli	r2,r2,99
  80ff38:	10801004 	addi	r2,r2,64
  80ff3c:	e0ffff17 	ldw	r3,-4(fp)
  80ff40:	1885883a 	add	r2,r3,r2
  80ff44:	01801404 	movi	r6,80
  80ff48:	100b883a 	mov	r5,r2
  80ff4c:	08070240 	call	807024 <memcpy>
  80ff50:	00000906 	br	80ff78 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80ff54:	e0bffe17 	ldw	r2,-8(fp)
  80ff58:	108018e4 	muli	r2,r2,99
  80ff5c:	10801004 	addi	r2,r2,64
  80ff60:	e0ffff17 	ldw	r3,-4(fp)
  80ff64:	1885883a 	add	r2,r3,r2
  80ff68:	01801404 	movi	r6,80
  80ff6c:	01400804 	movi	r5,32
  80ff70:	1009883a 	mov	r4,r2
  80ff74:	0801e2c0 	call	801e2c <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80ff78:	e0bffe17 	ldw	r2,-8(fp)
  80ff7c:	10800044 	addi	r2,r2,1
  80ff80:	e0bffe15 	stw	r2,-8(fp)
  80ff84:	e0bffe17 	ldw	r2,-8(fp)
  80ff88:	10800090 	cmplti	r2,r2,2
  80ff8c:	103fe01e 	bne	r2,zero,80ff10 <__alt_mem_onchip_mem+0xff78ff10>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80ff90:	e0bfff17 	ldw	r2,-4(fp)
  80ff94:	10800883 	ldbu	r2,34(r2)
  80ff98:	10bfffc4 	addi	r2,r2,-1
  80ff9c:	1007883a 	mov	r3,r2
  80ffa0:	e0bfff17 	ldw	r2,-4(fp)
  80ffa4:	10c00885 	stb	r3,34(r2)
}
  80ffa8:	0001883a 	nop
  80ffac:	e037883a 	mov	sp,fp
  80ffb0:	dfc00117 	ldw	ra,4(sp)
  80ffb4:	df000017 	ldw	fp,0(sp)
  80ffb8:	dec00204 	addi	sp,sp,8
  80ffbc:	f800283a 	ret

0080ffc0 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80ffc0:	defff904 	addi	sp,sp,-28
  80ffc4:	dfc00615 	stw	ra,24(sp)
  80ffc8:	df000515 	stw	fp,20(sp)
  80ffcc:	df000504 	addi	fp,sp,20
  80ffd0:	e13ffe15 	stw	r4,-8(fp)
  80ffd4:	2805883a 	mov	r2,r5
  80ffd8:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  80ffdc:	e03ffb15 	stw	zero,-20(fp)
  80ffe0:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  80ffe4:	e0bffe17 	ldw	r2,-8(fp)
  80ffe8:	10800a03 	ldbu	r2,40(r2)
  80ffec:	10803fcc 	andi	r2,r2,255
  80fff0:	1080201c 	xori	r2,r2,128
  80fff4:	10bfe004 	addi	r2,r2,-128
  80fff8:	108016d8 	cmpnei	r2,r2,91
  80fffc:	1000411e 	bne	r2,zero,810104 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  810000:	e0bffe17 	ldw	r2,-8(fp)
  810004:	10800a04 	addi	r2,r2,40
  810008:	10800044 	addi	r2,r2,1
  81000c:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  810010:	00000c06 	br	810044 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  810014:	e0bffb17 	ldw	r2,-20(fp)
  810018:	10c002a4 	muli	r3,r2,10
  81001c:	e0bffd17 	ldw	r2,-12(fp)
  810020:	11000044 	addi	r4,r2,1
  810024:	e13ffd15 	stw	r4,-12(fp)
  810028:	10800003 	ldbu	r2,0(r2)
  81002c:	10803fcc 	andi	r2,r2,255
  810030:	1080201c 	xori	r2,r2,128
  810034:	10bfe004 	addi	r2,r2,-128
  810038:	10bff404 	addi	r2,r2,-48
  81003c:	1885883a 	add	r2,r3,r2
  810040:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  810044:	d0e01317 	ldw	r3,-32692(gp)
  810048:	e0bffd17 	ldw	r2,-12(fp)
  81004c:	10800003 	ldbu	r2,0(r2)
  810050:	10803fcc 	andi	r2,r2,255
  810054:	1080201c 	xori	r2,r2,128
  810058:	10bfe004 	addi	r2,r2,-128
  81005c:	10800044 	addi	r2,r2,1
  810060:	1885883a 	add	r2,r3,r2
  810064:	10800003 	ldbu	r2,0(r2)
  810068:	10803fcc 	andi	r2,r2,255
  81006c:	1080010c 	andi	r2,r2,4
  810070:	103fe81e 	bne	r2,zero,810014 <__alt_mem_onchip_mem+0xff790014>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  810074:	e0bffd17 	ldw	r2,-12(fp)
  810078:	10800003 	ldbu	r2,0(r2)
  81007c:	10803fcc 	andi	r2,r2,255
  810080:	1080201c 	xori	r2,r2,128
  810084:	10bfe004 	addi	r2,r2,-128
  810088:	10800ed8 	cmpnei	r2,r2,59
  81008c:	10001f1e 	bne	r2,zero,81010c <lcd_handle_escape+0x14c>
    {
      ptr++;
  810090:	e0bffd17 	ldw	r2,-12(fp)
  810094:	10800044 	addi	r2,r2,1
  810098:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  81009c:	00000c06 	br	8100d0 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  8100a0:	e0bffc17 	ldw	r2,-16(fp)
  8100a4:	10c002a4 	muli	r3,r2,10
  8100a8:	e0bffd17 	ldw	r2,-12(fp)
  8100ac:	11000044 	addi	r4,r2,1
  8100b0:	e13ffd15 	stw	r4,-12(fp)
  8100b4:	10800003 	ldbu	r2,0(r2)
  8100b8:	10803fcc 	andi	r2,r2,255
  8100bc:	1080201c 	xori	r2,r2,128
  8100c0:	10bfe004 	addi	r2,r2,-128
  8100c4:	10bff404 	addi	r2,r2,-48
  8100c8:	1885883a 	add	r2,r3,r2
  8100cc:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  8100d0:	d0e01317 	ldw	r3,-32692(gp)
  8100d4:	e0bffd17 	ldw	r2,-12(fp)
  8100d8:	10800003 	ldbu	r2,0(r2)
  8100dc:	10803fcc 	andi	r2,r2,255
  8100e0:	1080201c 	xori	r2,r2,128
  8100e4:	10bfe004 	addi	r2,r2,-128
  8100e8:	10800044 	addi	r2,r2,1
  8100ec:	1885883a 	add	r2,r3,r2
  8100f0:	10800003 	ldbu	r2,0(r2)
  8100f4:	10803fcc 	andi	r2,r2,255
  8100f8:	1080010c 	andi	r2,r2,4
  8100fc:	103fe81e 	bne	r2,zero,8100a0 <__alt_mem_onchip_mem+0xff7900a0>
  810100:	00000206 	br	81010c <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  810104:	00bfffc4 	movi	r2,-1
  810108:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  81010c:	e0bfff07 	ldb	r2,-4(fp)
  810110:	10c012a0 	cmpeqi	r3,r2,74
  810114:	1800291e 	bne	r3,zero,8101bc <lcd_handle_escape+0x1fc>
  810118:	10c012c8 	cmpgei	r3,r2,75
  81011c:	1800031e 	bne	r3,zero,81012c <lcd_handle_escape+0x16c>
  810120:	10801220 	cmpeqi	r2,r2,72
  810124:	1000061e 	bne	r2,zero,810140 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  810128:	00004a06 	br	810254 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  81012c:	10c012e0 	cmpeqi	r3,r2,75
  810130:	1800281e 	bne	r3,zero,8101d4 <lcd_handle_escape+0x214>
  810134:	108019a0 	cmpeqi	r2,r2,102
  810138:	1000011e 	bne	r2,zero,810140 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  81013c:	00004506 	br	810254 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  810140:	e0bffc17 	ldw	r2,-16(fp)
  810144:	0080050e 	bge	zero,r2,81015c <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  810148:	e0bffc17 	ldw	r2,-16(fp)
  81014c:	10bfffc4 	addi	r2,r2,-1
  810150:	1007883a 	mov	r3,r2
  810154:	e0bffe17 	ldw	r2,-8(fp)
  810158:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  81015c:	e0bffb17 	ldw	r2,-20(fp)
  810160:	0080370e 	bge	zero,r2,810240 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  810164:	e0bffb17 	ldw	r2,-20(fp)
  810168:	10bfffc4 	addi	r2,r2,-1
  81016c:	1007883a 	mov	r3,r2
  810170:	e0bffe17 	ldw	r2,-8(fp)
  810174:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  810178:	e0bffe17 	ldw	r2,-8(fp)
  81017c:	10800883 	ldbu	r2,34(r2)
  810180:	10803fcc 	andi	r2,r2,255
  810184:	10800170 	cmpltui	r2,r2,5
  810188:	1000061e 	bne	r2,zero,8101a4 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  81018c:	e0bffe17 	ldw	r2,-8(fp)
  810190:	00c00104 	movi	r3,4
  810194:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  810198:	00000206 	br	8101a4 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  81019c:	e13ffe17 	ldw	r4,-8(fp)
  8101a0:	080fef40 	call	80fef4 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  8101a4:	e0bffe17 	ldw	r2,-8(fp)
  8101a8:	10800883 	ldbu	r2,34(r2)
  8101ac:	10803fcc 	andi	r2,r2,255
  8101b0:	108000e8 	cmpgeui	r2,r2,3
  8101b4:	103ff91e 	bne	r2,zero,81019c <__alt_mem_onchip_mem+0xff79019c>
        lcd_scroll_up(sp);
    }
    break;
  8101b8:	00002106 	br	810240 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  8101bc:	e0bffb17 	ldw	r2,-20(fp)
  8101c0:	10800098 	cmpnei	r2,r2,2
  8101c4:	1000201e 	bne	r2,zero,810248 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  8101c8:	e13ffe17 	ldw	r4,-8(fp)
  8101cc:	080fc380 	call	80fc38 <lcd_clear_screen>
    break;
  8101d0:	00001d06 	br	810248 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  8101d4:	e0bffb17 	ldw	r2,-20(fp)
  8101d8:	00801d16 	blt	zero,r2,810250 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8101dc:	e0bffe17 	ldw	r2,-8(fp)
  8101e0:	10800843 	ldbu	r2,33(r2)
  8101e4:	10803fcc 	andi	r2,r2,255
  8101e8:	10801428 	cmpgeui	r2,r2,80
  8101ec:	1000181e 	bne	r2,zero,810250 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  8101f0:	e0bffe17 	ldw	r2,-8(fp)
  8101f4:	10800883 	ldbu	r2,34(r2)
  8101f8:	10803fcc 	andi	r2,r2,255
  8101fc:	108018e4 	muli	r2,r2,99
  810200:	10801004 	addi	r2,r2,64
  810204:	e0fffe17 	ldw	r3,-8(fp)
  810208:	1887883a 	add	r3,r3,r2
  81020c:	e0bffe17 	ldw	r2,-8(fp)
  810210:	10800843 	ldbu	r2,33(r2)
  810214:	10803fcc 	andi	r2,r2,255
  810218:	1889883a 	add	r4,r3,r2
  81021c:	e0bffe17 	ldw	r2,-8(fp)
  810220:	10800843 	ldbu	r2,33(r2)
  810224:	10803fcc 	andi	r2,r2,255
  810228:	00c01404 	movi	r3,80
  81022c:	1885c83a 	sub	r2,r3,r2
  810230:	100d883a 	mov	r6,r2
  810234:	01400804 	movi	r5,32
  810238:	0801e2c0 	call	801e2c <memset>
    }
    break;
  81023c:	00000406 	br	810250 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  810240:	0001883a 	nop
  810244:	00000306 	br	810254 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  810248:	0001883a 	nop
  81024c:	00000106 	br	810254 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  810250:	0001883a 	nop
  }
}
  810254:	0001883a 	nop
  810258:	e037883a 	mov	sp,fp
  81025c:	dfc00117 	ldw	ra,4(sp)
  810260:	df000017 	ldw	fp,0(sp)
  810264:	dec00204 	addi	sp,sp,8
  810268:	f800283a 	ret

0081026c <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  81026c:	defff304 	addi	sp,sp,-52
  810270:	dfc00c15 	stw	ra,48(sp)
  810274:	df000b15 	stw	fp,44(sp)
  810278:	df000b04 	addi	fp,sp,44
  81027c:	e13ffc15 	stw	r4,-16(fp)
  810280:	e17ffd15 	stw	r5,-12(fp)
  810284:	e1bffe15 	stw	r6,-8(fp)
  810288:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  81028c:	e0bffe17 	ldw	r2,-8(fp)
  810290:	e0fffd17 	ldw	r3,-12(fp)
  810294:	1885883a 	add	r2,r3,r2
  810298:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  81029c:	e0bffc17 	ldw	r2,-16(fp)
  8102a0:	00c00044 	movi	r3,1
  8102a4:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  8102a8:	00009906 	br	810510 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  8102ac:	e0bffd17 	ldw	r2,-12(fp)
  8102b0:	10800003 	ldbu	r2,0(r2)
  8102b4:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  8102b8:	e0bffc17 	ldw	r2,-16(fp)
  8102bc:	10800903 	ldbu	r2,36(r2)
  8102c0:	10803fcc 	andi	r2,r2,255
  8102c4:	1080201c 	xori	r2,r2,128
  8102c8:	10bfe004 	addi	r2,r2,-128
  8102cc:	10003716 	blt	r2,zero,8103ac <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  8102d0:	e0bffc17 	ldw	r2,-16(fp)
  8102d4:	10800903 	ldbu	r2,36(r2)
  8102d8:	10803fcc 	andi	r2,r2,255
  8102dc:	1080201c 	xori	r2,r2,128
  8102e0:	10bfe004 	addi	r2,r2,-128
  8102e4:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  8102e8:	e0bffa17 	ldw	r2,-24(fp)
  8102ec:	1000031e 	bne	r2,zero,8102fc <altera_avalon_lcd_16207_write+0x90>
  8102f0:	e0bff907 	ldb	r2,-28(fp)
  8102f4:	108016d8 	cmpnei	r2,r2,91
  8102f8:	10000d1e 	bne	r2,zero,810330 <altera_avalon_lcd_16207_write+0xc4>
  8102fc:	e0bffa17 	ldw	r2,-24(fp)
  810300:	10001826 	beq	r2,zero,810364 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  810304:	d0e01317 	ldw	r3,-32692(gp)
  810308:	e0bff907 	ldb	r2,-28(fp)
  81030c:	10800044 	addi	r2,r2,1
  810310:	1885883a 	add	r2,r3,r2
  810314:	10800003 	ldbu	r2,0(r2)
  810318:	10803fcc 	andi	r2,r2,255
  81031c:	1080010c 	andi	r2,r2,4
  810320:	1000101e 	bne	r2,zero,810364 <altera_avalon_lcd_16207_write+0xf8>
  810324:	e0bff907 	ldb	r2,-28(fp)
  810328:	10800ee0 	cmpeqi	r2,r2,59
  81032c:	10000d1e 	bne	r2,zero,810364 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  810330:	e0fffc17 	ldw	r3,-16(fp)
  810334:	e0bffa17 	ldw	r2,-24(fp)
  810338:	1885883a 	add	r2,r3,r2
  81033c:	10800a04 	addi	r2,r2,40
  810340:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  810344:	e0bff907 	ldb	r2,-28(fp)
  810348:	100b883a 	mov	r5,r2
  81034c:	e13ffc17 	ldw	r4,-16(fp)
  810350:	080ffc00 	call	80ffc0 <lcd_handle_escape>

        sp->esccount = -1;
  810354:	e0bffc17 	ldw	r2,-16(fp)
  810358:	00ffffc4 	movi	r3,-1
  81035c:	10c00905 	stb	r3,36(r2)
  810360:	00006806 	br	810504 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  810364:	e0bffc17 	ldw	r2,-16(fp)
  810368:	10800903 	ldbu	r2,36(r2)
  81036c:	10803fcc 	andi	r2,r2,255
  810370:	108001e8 	cmpgeui	r2,r2,7
  810374:	1000631e 	bne	r2,zero,810504 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  810378:	e0fffc17 	ldw	r3,-16(fp)
  81037c:	e0bffa17 	ldw	r2,-24(fp)
  810380:	1885883a 	add	r2,r3,r2
  810384:	10800a04 	addi	r2,r2,40
  810388:	e0fff903 	ldbu	r3,-28(fp)
  81038c:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  810390:	e0bffc17 	ldw	r2,-16(fp)
  810394:	10800903 	ldbu	r2,36(r2)
  810398:	10800044 	addi	r2,r2,1
  81039c:	1007883a 	mov	r3,r2
  8103a0:	e0bffc17 	ldw	r2,-16(fp)
  8103a4:	10c00905 	stb	r3,36(r2)
  8103a8:	00005606 	br	810504 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  8103ac:	e0bff907 	ldb	r2,-28(fp)
  8103b0:	108006d8 	cmpnei	r2,r2,27
  8103b4:	1000031e 	bne	r2,zero,8103c4 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  8103b8:	e0bffc17 	ldw	r2,-16(fp)
  8103bc:	10000905 	stb	zero,36(r2)
  8103c0:	00005006 	br	810504 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  8103c4:	e0bff907 	ldb	r2,-28(fp)
  8103c8:	10800358 	cmpnei	r2,r2,13
  8103cc:	1000031e 	bne	r2,zero,8103dc <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  8103d0:	e0bffc17 	ldw	r2,-16(fp)
  8103d4:	10000845 	stb	zero,33(r2)
  8103d8:	00004a06 	br	810504 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  8103dc:	e0bff907 	ldb	r2,-28(fp)
  8103e0:	10800298 	cmpnei	r2,r2,10
  8103e4:	1000101e 	bne	r2,zero,810428 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  8103e8:	e0bffc17 	ldw	r2,-16(fp)
  8103ec:	10000845 	stb	zero,33(r2)
      sp->y++;
  8103f0:	e0bffc17 	ldw	r2,-16(fp)
  8103f4:	10800883 	ldbu	r2,34(r2)
  8103f8:	10800044 	addi	r2,r2,1
  8103fc:	1007883a 	mov	r3,r2
  810400:	e0bffc17 	ldw	r2,-16(fp)
  810404:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  810408:	e0bffc17 	ldw	r2,-16(fp)
  81040c:	10800883 	ldbu	r2,34(r2)
  810410:	10803fcc 	andi	r2,r2,255
  810414:	108000f0 	cmpltui	r2,r2,3
  810418:	10003a1e 	bne	r2,zero,810504 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  81041c:	e13ffc17 	ldw	r4,-16(fp)
  810420:	080fef40 	call	80fef4 <lcd_scroll_up>
  810424:	00003706 	br	810504 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  810428:	e0bff907 	ldb	r2,-28(fp)
  81042c:	10800218 	cmpnei	r2,r2,8
  810430:	10000b1e 	bne	r2,zero,810460 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  810434:	e0bffc17 	ldw	r2,-16(fp)
  810438:	10800843 	ldbu	r2,33(r2)
  81043c:	10803fcc 	andi	r2,r2,255
  810440:	10003026 	beq	r2,zero,810504 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  810444:	e0bffc17 	ldw	r2,-16(fp)
  810448:	10800843 	ldbu	r2,33(r2)
  81044c:	10bfffc4 	addi	r2,r2,-1
  810450:	1007883a 	mov	r3,r2
  810454:	e0bffc17 	ldw	r2,-16(fp)
  810458:	10c00845 	stb	r3,33(r2)
  81045c:	00002906 	br	810504 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  810460:	d0e01317 	ldw	r3,-32692(gp)
  810464:	e0bff907 	ldb	r2,-28(fp)
  810468:	10800044 	addi	r2,r2,1
  81046c:	1885883a 	add	r2,r3,r2
  810470:	10800003 	ldbu	r2,0(r2)
  810474:	10803fcc 	andi	r2,r2,255
  810478:	1080201c 	xori	r2,r2,128
  81047c:	10bfe004 	addi	r2,r2,-128
  810480:	108025cc 	andi	r2,r2,151
  810484:	10001f26 	beq	r2,zero,810504 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  810488:	e0bffc17 	ldw	r2,-16(fp)
  81048c:	10800883 	ldbu	r2,34(r2)
  810490:	10803fcc 	andi	r2,r2,255
  810494:	108000b0 	cmpltui	r2,r2,2
  810498:	1000021e 	bne	r2,zero,8104a4 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  81049c:	e13ffc17 	ldw	r4,-16(fp)
  8104a0:	080fef40 	call	80fef4 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8104a4:	e0bffc17 	ldw	r2,-16(fp)
  8104a8:	10800843 	ldbu	r2,33(r2)
  8104ac:	10803fcc 	andi	r2,r2,255
  8104b0:	10801428 	cmpgeui	r2,r2,80
  8104b4:	10000d1e 	bne	r2,zero,8104ec <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  8104b8:	e0bffc17 	ldw	r2,-16(fp)
  8104bc:	10800883 	ldbu	r2,34(r2)
  8104c0:	10c03fcc 	andi	r3,r2,255
  8104c4:	e0bffc17 	ldw	r2,-16(fp)
  8104c8:	10800843 	ldbu	r2,33(r2)
  8104cc:	10803fcc 	andi	r2,r2,255
  8104d0:	e13ffc17 	ldw	r4,-16(fp)
  8104d4:	18c018e4 	muli	r3,r3,99
  8104d8:	20c7883a 	add	r3,r4,r3
  8104dc:	1885883a 	add	r2,r3,r2
  8104e0:	10801004 	addi	r2,r2,64
  8104e4:	e0fff903 	ldbu	r3,-28(fp)
  8104e8:	10c00005 	stb	r3,0(r2)

      sp->x++;
  8104ec:	e0bffc17 	ldw	r2,-16(fp)
  8104f0:	10800843 	ldbu	r2,33(r2)
  8104f4:	10800044 	addi	r2,r2,1
  8104f8:	1007883a 	mov	r3,r2
  8104fc:	e0bffc17 	ldw	r2,-16(fp)
  810500:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  810504:	e0bffd17 	ldw	r2,-12(fp)
  810508:	10800044 	addi	r2,r2,1
  81050c:	e0bffd15 	stw	r2,-12(fp)
  810510:	e0fffd17 	ldw	r3,-12(fp)
  810514:	e0bff817 	ldw	r2,-32(fp)
  810518:	18bf6436 	bltu	r3,r2,8102ac <__alt_mem_onchip_mem+0xff7902ac>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  81051c:	00800404 	movi	r2,16
  810520:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810524:	e03ff515 	stw	zero,-44(fp)
  810528:	00003706 	br	810608 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  81052c:	00801404 	movi	r2,80
  810530:	e0bff715 	stw	r2,-36(fp)
  810534:	00001106 	br	81057c <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  810538:	e0bff717 	ldw	r2,-36(fp)
  81053c:	10bfffc4 	addi	r2,r2,-1
  810540:	e13ffc17 	ldw	r4,-16(fp)
  810544:	e0fff517 	ldw	r3,-44(fp)
  810548:	18c018e4 	muli	r3,r3,99
  81054c:	20c7883a 	add	r3,r4,r3
  810550:	1885883a 	add	r2,r3,r2
  810554:	10801004 	addi	r2,r2,64
  810558:	10800003 	ldbu	r2,0(r2)
  81055c:	10803fcc 	andi	r2,r2,255
  810560:	1080201c 	xori	r2,r2,128
  810564:	10bfe004 	addi	r2,r2,-128
  810568:	10800820 	cmpeqi	r2,r2,32
  81056c:	10000626 	beq	r2,zero,810588 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  810570:	e0bff717 	ldw	r2,-36(fp)
  810574:	10bfffc4 	addi	r2,r2,-1
  810578:	e0bff715 	stw	r2,-36(fp)
  81057c:	e0bff717 	ldw	r2,-36(fp)
  810580:	00bfed16 	blt	zero,r2,810538 <__alt_mem_onchip_mem+0xff790538>
  810584:	00000106 	br	81058c <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  810588:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  81058c:	e0bff717 	ldw	r2,-36(fp)
  810590:	10800448 	cmpgei	r2,r2,17
  810594:	1000031e 	bne	r2,zero,8105a4 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  810598:	00800404 	movi	r2,16
  81059c:	e0bff715 	stw	r2,-36(fp)
  8105a0:	00000306 	br	8105b0 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  8105a4:	e0bff717 	ldw	r2,-36(fp)
  8105a8:	10800044 	addi	r2,r2,1
  8105ac:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  8105b0:	e0bff717 	ldw	r2,-36(fp)
  8105b4:	1009883a 	mov	r4,r2
  8105b8:	e0fffc17 	ldw	r3,-16(fp)
  8105bc:	e0bff517 	ldw	r2,-44(fp)
  8105c0:	108018e4 	muli	r2,r2,99
  8105c4:	1885883a 	add	r2,r3,r2
  8105c8:	10802444 	addi	r2,r2,145
  8105cc:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  8105d0:	e0fff617 	ldw	r3,-40(fp)
  8105d4:	e0bff717 	ldw	r2,-36(fp)
  8105d8:	1880020e 	bge	r3,r2,8105e4 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  8105dc:	e0bff717 	ldw	r2,-36(fp)
  8105e0:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  8105e4:	e0fffc17 	ldw	r3,-16(fp)
  8105e8:	e0bff517 	ldw	r2,-44(fp)
  8105ec:	108018e4 	muli	r2,r2,99
  8105f0:	1885883a 	add	r2,r3,r2
  8105f4:	10802484 	addi	r2,r2,146
  8105f8:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8105fc:	e0bff517 	ldw	r2,-44(fp)
  810600:	10800044 	addi	r2,r2,1
  810604:	e0bff515 	stw	r2,-44(fp)
  810608:	e0bff517 	ldw	r2,-44(fp)
  81060c:	10800090 	cmplti	r2,r2,2
  810610:	103fc61e 	bne	r2,zero,81052c <__alt_mem_onchip_mem+0xff79052c>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  810614:	e0bff617 	ldw	r2,-40(fp)
  810618:	10800448 	cmpgei	r2,r2,17
  81061c:	1000031e 	bne	r2,zero,81062c <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  810620:	e0bffc17 	ldw	r2,-16(fp)
  810624:	10000985 	stb	zero,38(r2)
  810628:	00002e06 	br	8106e4 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  81062c:	e0bff617 	ldw	r2,-40(fp)
  810630:	1085883a 	add	r2,r2,r2
  810634:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  810638:	e0bff617 	ldw	r2,-40(fp)
  81063c:	1007883a 	mov	r3,r2
  810640:	e0bffc17 	ldw	r2,-16(fp)
  810644:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810648:	e03ff515 	stw	zero,-44(fp)
  81064c:	00002206 	br	8106d8 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  810650:	e0fffc17 	ldw	r3,-16(fp)
  810654:	e0bff517 	ldw	r2,-44(fp)
  810658:	108018e4 	muli	r2,r2,99
  81065c:	1885883a 	add	r2,r3,r2
  810660:	10802444 	addi	r2,r2,145
  810664:	10800003 	ldbu	r2,0(r2)
  810668:	10803fcc 	andi	r2,r2,255
  81066c:	1080201c 	xori	r2,r2,128
  810670:	10bfe004 	addi	r2,r2,-128
  810674:	10800450 	cmplti	r2,r2,17
  810678:	1000141e 	bne	r2,zero,8106cc <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  81067c:	e0fffc17 	ldw	r3,-16(fp)
  810680:	e0bff517 	ldw	r2,-44(fp)
  810684:	108018e4 	muli	r2,r2,99
  810688:	1885883a 	add	r2,r3,r2
  81068c:	10802444 	addi	r2,r2,145
  810690:	10800003 	ldbu	r2,0(r2)
  810694:	10803fcc 	andi	r2,r2,255
  810698:	1080201c 	xori	r2,r2,128
  81069c:	10bfe004 	addi	r2,r2,-128
  8106a0:	1004923a 	slli	r2,r2,8
  8106a4:	e17ff617 	ldw	r5,-40(fp)
  8106a8:	1009883a 	mov	r4,r2
  8106ac:	080b7340 	call	80b734 <__divsi3>
  8106b0:	1009883a 	mov	r4,r2
  8106b4:	e0fffc17 	ldw	r3,-16(fp)
  8106b8:	e0bff517 	ldw	r2,-44(fp)
  8106bc:	108018e4 	muli	r2,r2,99
  8106c0:	1885883a 	add	r2,r3,r2
  8106c4:	10802484 	addi	r2,r2,146
  8106c8:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8106cc:	e0bff517 	ldw	r2,-44(fp)
  8106d0:	10800044 	addi	r2,r2,1
  8106d4:	e0bff515 	stw	r2,-44(fp)
  8106d8:	e0bff517 	ldw	r2,-44(fp)
  8106dc:	10800090 	cmplti	r2,r2,2
  8106e0:	103fdb1e 	bne	r2,zero,810650 <__alt_mem_onchip_mem+0xff790650>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  8106e4:	e0bffc17 	ldw	r2,-16(fp)
  8106e8:	10800943 	ldbu	r2,37(r2)
  8106ec:	10803fcc 	andi	r2,r2,255
  8106f0:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  8106f4:	e13ffc17 	ldw	r4,-16(fp)
  8106f8:	080fd080 	call	80fd08 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  8106fc:	e0bffc17 	ldw	r2,-16(fp)
  810700:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  810704:	e0bffc17 	ldw	r2,-16(fp)
  810708:	10800943 	ldbu	r2,37(r2)
  81070c:	10c03fcc 	andi	r3,r2,255
  810710:	e0bffb17 	ldw	r2,-20(fp)
  810714:	18800426 	beq	r3,r2,810728 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  810718:	e0bffc17 	ldw	r2,-16(fp)
  81071c:	00c00044 	movi	r3,1
  810720:	10c009c5 	stb	r3,39(r2)
  }
  810724:	003fef06 	br	8106e4 <__alt_mem_onchip_mem+0xff7906e4>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  810728:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  81072c:	e0bffe17 	ldw	r2,-8(fp)
}
  810730:	e037883a 	mov	sp,fp
  810734:	dfc00117 	ldw	ra,4(sp)
  810738:	df000017 	ldw	fp,0(sp)
  81073c:	dec00204 	addi	sp,sp,8
  810740:	f800283a 	ret

00810744 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  810744:	defffc04 	addi	sp,sp,-16
  810748:	dfc00315 	stw	ra,12(sp)
  81074c:	df000215 	stw	fp,8(sp)
  810750:	df000204 	addi	fp,sp,8
  810754:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  810758:	e0bfff17 	ldw	r2,-4(fp)
  81075c:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  810760:	e0bffe17 	ldw	r2,-8(fp)
  810764:	10800943 	ldbu	r2,37(r2)
  810768:	10803fcc 	andi	r2,r2,255
  81076c:	10c00044 	addi	r3,r2,1
  810770:	e0bffe17 	ldw	r2,-8(fp)
  810774:	10800983 	ldbu	r2,38(r2)
  810778:	10803fcc 	andi	r2,r2,255
  81077c:	18800316 	blt	r3,r2,81078c <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  810780:	e0bffe17 	ldw	r2,-8(fp)
  810784:	10000945 	stb	zero,37(r2)
  810788:	00000606 	br	8107a4 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  81078c:	e0bffe17 	ldw	r2,-8(fp)
  810790:	10800943 	ldbu	r2,37(r2)
  810794:	10800044 	addi	r2,r2,1
  810798:	1007883a 	mov	r3,r2
  81079c:	e0bffe17 	ldw	r2,-8(fp)
  8107a0:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  8107a4:	e0bffe17 	ldw	r2,-8(fp)
  8107a8:	10800983 	ldbu	r2,38(r2)
  8107ac:	10803fcc 	andi	r2,r2,255
  8107b0:	10000826 	beq	r2,zero,8107d4 <alt_lcd_16207_timeout+0x90>
  8107b4:	e0bffe17 	ldw	r2,-8(fp)
  8107b8:	108009c3 	ldbu	r2,39(r2)
  8107bc:	10803fcc 	andi	r2,r2,255
  8107c0:	1080201c 	xori	r2,r2,128
  8107c4:	10bfe004 	addi	r2,r2,-128
  8107c8:	1000021e 	bne	r2,zero,8107d4 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  8107cc:	e13ffe17 	ldw	r4,-8(fp)
  8107d0:	080fd080 	call	80fd08 <lcd_repaint_screen>

  return sp->period;
  8107d4:	e0bffe17 	ldw	r2,-8(fp)
  8107d8:	10800717 	ldw	r2,28(r2)
}
  8107dc:	e037883a 	mov	sp,fp
  8107e0:	dfc00117 	ldw	ra,4(sp)
  8107e4:	df000017 	ldw	fp,0(sp)
  8107e8:	dec00204 	addi	sp,sp,8
  8107ec:	f800283a 	ret

008107f0 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  8107f0:	defffc04 	addi	sp,sp,-16
  8107f4:	dfc00315 	stw	ra,12(sp)
  8107f8:	df000215 	stw	fp,8(sp)
  8107fc:	df000204 	addi	fp,sp,8
  810800:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  810804:	e0bfff17 	ldw	r2,-4(fp)
  810808:	10800017 	ldw	r2,0(r2)
  81080c:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  810810:	e0bfff17 	ldw	r2,-4(fp)
  810814:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  810818:	010ea604 	movi	r4,15000
  81081c:	0811b880 	call	811b88 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  810820:	e0bffe17 	ldw	r2,-8(fp)
  810824:	00c00c04 	movi	r3,48
  810828:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  81082c:	01040104 	movi	r4,4100
  810830:	0811b880 	call	811b88 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  810834:	e0bffe17 	ldw	r2,-8(fp)
  810838:	00c00c04 	movi	r3,48
  81083c:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  810840:	0100fa04 	movi	r4,1000
  810844:	0811b880 	call	811b88 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  810848:	e0bffe17 	ldw	r2,-8(fp)
  81084c:	00c00c04 	movi	r3,48
  810850:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  810854:	01400e04 	movi	r5,56
  810858:	e13fff17 	ldw	r4,-4(fp)
  81085c:	080faa80 	call	80faa8 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  810860:	01400204 	movi	r5,8
  810864:	e13fff17 	ldw	r4,-4(fp)
  810868:	080faa80 	call	80faa8 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  81086c:	e13fff17 	ldw	r4,-4(fp)
  810870:	080fc380 	call	80fc38 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  810874:	01400184 	movi	r5,6
  810878:	e13fff17 	ldw	r4,-4(fp)
  81087c:	080faa80 	call	80faa8 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  810880:	01400304 	movi	r5,12
  810884:	e13fff17 	ldw	r4,-4(fp)
  810888:	080faa80 	call	80faa8 <lcd_write_command>

  sp->esccount = -1;
  81088c:	e0bfff17 	ldw	r2,-4(fp)
  810890:	00ffffc4 	movi	r3,-1
  810894:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  810898:	e0bfff17 	ldw	r2,-4(fp)
  81089c:	10800a04 	addi	r2,r2,40
  8108a0:	01800204 	movi	r6,8
  8108a4:	000b883a 	mov	r5,zero
  8108a8:	1009883a 	mov	r4,r2
  8108ac:	0801e2c0 	call	801e2c <memset>

  sp->scrollpos = 0;
  8108b0:	e0bfff17 	ldw	r2,-4(fp)
  8108b4:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  8108b8:	e0bfff17 	ldw	r2,-4(fp)
  8108bc:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  8108c0:	e0bfff17 	ldw	r2,-4(fp)
  8108c4:	100009c5 	stb	zero,39(r2)
  8108c8:	d0a76417 	ldw	r2,-25200(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  8108cc:	01400284 	movi	r5,10
  8108d0:	1009883a 	mov	r4,r2
  8108d4:	080b82c0 	call	80b82c <__udivsi3>
  8108d8:	1007883a 	mov	r3,r2
  8108dc:	e0bfff17 	ldw	r2,-4(fp)
  8108e0:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  8108e4:	e0bfff17 	ldw	r2,-4(fp)
  8108e8:	10c00104 	addi	r3,r2,4
  8108ec:	e0bfff17 	ldw	r2,-4(fp)
  8108f0:	10800717 	ldw	r2,28(r2)
  8108f4:	e1ffff17 	ldw	r7,-4(fp)
  8108f8:	01802074 	movhi	r6,129
  8108fc:	3181d104 	addi	r6,r6,1860
  810900:	100b883a 	mov	r5,r2
  810904:	1809883a 	mov	r4,r3
  810908:	080df500 	call	80df50 <alt_alarm_start>
}
  81090c:	0001883a 	nop
  810910:	e037883a 	mov	sp,fp
  810914:	dfc00117 	ldw	ra,4(sp)
  810918:	df000017 	ldw	fp,0(sp)
  81091c:	dec00204 	addi	sp,sp,8
  810920:	f800283a 	ret

00810924 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  810924:	defffa04 	addi	sp,sp,-24
  810928:	dfc00515 	stw	ra,20(sp)
  81092c:	df000415 	stw	fp,16(sp)
  810930:	df000404 	addi	fp,sp,16
  810934:	e13ffd15 	stw	r4,-12(fp)
  810938:	e17ffe15 	stw	r5,-8(fp)
  81093c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  810940:	e0bffd17 	ldw	r2,-12(fp)
  810944:	10800017 	ldw	r2,0(r2)
  810948:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  81094c:	e0bffc17 	ldw	r2,-16(fp)
  810950:	10c00a04 	addi	r3,r2,40
  810954:	e0bffd17 	ldw	r2,-12(fp)
  810958:	10800217 	ldw	r2,8(r2)
  81095c:	100f883a 	mov	r7,r2
  810960:	e1bfff17 	ldw	r6,-4(fp)
  810964:	e17ffe17 	ldw	r5,-8(fp)
  810968:	1809883a 	mov	r4,r3
  81096c:	081026c0 	call	81026c <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  810970:	e037883a 	mov	sp,fp
  810974:	dfc00117 	ldw	ra,4(sp)
  810978:	df000017 	ldw	fp,0(sp)
  81097c:	dec00204 	addi	sp,sp,8
  810980:	f800283a 	ret

00810984 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  810984:	defffa04 	addi	sp,sp,-24
  810988:	dfc00515 	stw	ra,20(sp)
  81098c:	df000415 	stw	fp,16(sp)
  810990:	df000404 	addi	fp,sp,16
  810994:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  810998:	0007883a 	mov	r3,zero
  81099c:	e0bfff17 	ldw	r2,-4(fp)
  8109a0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8109a4:	e0bfff17 	ldw	r2,-4(fp)
  8109a8:	10800104 	addi	r2,r2,4
  8109ac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8109b0:	0005303a 	rdctl	r2,status
  8109b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8109b8:	e0fffd17 	ldw	r3,-12(fp)
  8109bc:	00bfff84 	movi	r2,-2
  8109c0:	1884703a 	and	r2,r3,r2
  8109c4:	1001703a 	wrctl	status,r2
  
  return context;
  8109c8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8109cc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  8109d0:	080ecfc0 	call	80ecfc <alt_tick>
  8109d4:	e0bffc17 	ldw	r2,-16(fp)
  8109d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8109dc:	e0bffe17 	ldw	r2,-8(fp)
  8109e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8109e4:	0001883a 	nop
  8109e8:	e037883a 	mov	sp,fp
  8109ec:	dfc00117 	ldw	ra,4(sp)
  8109f0:	df000017 	ldw	fp,0(sp)
  8109f4:	dec00204 	addi	sp,sp,8
  8109f8:	f800283a 	ret

008109fc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8109fc:	defff804 	addi	sp,sp,-32
  810a00:	dfc00715 	stw	ra,28(sp)
  810a04:	df000615 	stw	fp,24(sp)
  810a08:	df000604 	addi	fp,sp,24
  810a0c:	e13ffc15 	stw	r4,-16(fp)
  810a10:	e17ffd15 	stw	r5,-12(fp)
  810a14:	e1bffe15 	stw	r6,-8(fp)
  810a18:	e1ffff15 	stw	r7,-4(fp)
  810a1c:	e0bfff17 	ldw	r2,-4(fp)
  810a20:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  810a24:	d0a76417 	ldw	r2,-25200(gp)
  810a28:	1000021e 	bne	r2,zero,810a34 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  810a2c:	e0bffb17 	ldw	r2,-20(fp)
  810a30:	d0a76415 	stw	r2,-25200(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  810a34:	e0bffc17 	ldw	r2,-16(fp)
  810a38:	10800104 	addi	r2,r2,4
  810a3c:	00c001c4 	movi	r3,7
  810a40:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  810a44:	d8000015 	stw	zero,0(sp)
  810a48:	e1fffc17 	ldw	r7,-16(fp)
  810a4c:	01802074 	movhi	r6,129
  810a50:	31826104 	addi	r6,r6,2436
  810a54:	e17ffe17 	ldw	r5,-8(fp)
  810a58:	e13ffd17 	ldw	r4,-12(fp)
  810a5c:	08117a80 	call	8117a8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  810a60:	0001883a 	nop
  810a64:	e037883a 	mov	sp,fp
  810a68:	dfc00117 	ldw	ra,4(sp)
  810a6c:	df000017 	ldw	fp,0(sp)
  810a70:	dec00204 	addi	sp,sp,8
  810a74:	f800283a 	ret

00810a78 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  810a78:	defffa04 	addi	sp,sp,-24
  810a7c:	dfc00515 	stw	ra,20(sp)
  810a80:	df000415 	stw	fp,16(sp)
  810a84:	df000404 	addi	fp,sp,16
  810a88:	e13ffd15 	stw	r4,-12(fp)
  810a8c:	e17ffe15 	stw	r5,-8(fp)
  810a90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  810a94:	e0bffd17 	ldw	r2,-12(fp)
  810a98:	10800017 	ldw	r2,0(r2)
  810a9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  810aa0:	e0bffc17 	ldw	r2,-16(fp)
  810aa4:	10c00a04 	addi	r3,r2,40
  810aa8:	e0bffd17 	ldw	r2,-12(fp)
  810aac:	10800217 	ldw	r2,8(r2)
  810ab0:	100f883a 	mov	r7,r2
  810ab4:	e1bfff17 	ldw	r6,-4(fp)
  810ab8:	e17ffe17 	ldw	r5,-8(fp)
  810abc:	1809883a 	mov	r4,r3
  810ac0:	0810f8c0 	call	810f8c <altera_avalon_uart_read>
      fd->fd_flags);
}
  810ac4:	e037883a 	mov	sp,fp
  810ac8:	dfc00117 	ldw	ra,4(sp)
  810acc:	df000017 	ldw	fp,0(sp)
  810ad0:	dec00204 	addi	sp,sp,8
  810ad4:	f800283a 	ret

00810ad8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  810ad8:	defffa04 	addi	sp,sp,-24
  810adc:	dfc00515 	stw	ra,20(sp)
  810ae0:	df000415 	stw	fp,16(sp)
  810ae4:	df000404 	addi	fp,sp,16
  810ae8:	e13ffd15 	stw	r4,-12(fp)
  810aec:	e17ffe15 	stw	r5,-8(fp)
  810af0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  810af4:	e0bffd17 	ldw	r2,-12(fp)
  810af8:	10800017 	ldw	r2,0(r2)
  810afc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  810b00:	e0bffc17 	ldw	r2,-16(fp)
  810b04:	10c00a04 	addi	r3,r2,40
  810b08:	e0bffd17 	ldw	r2,-12(fp)
  810b0c:	10800217 	ldw	r2,8(r2)
  810b10:	100f883a 	mov	r7,r2
  810b14:	e1bfff17 	ldw	r6,-4(fp)
  810b18:	e17ffe17 	ldw	r5,-8(fp)
  810b1c:	1809883a 	mov	r4,r3
  810b20:	08111a40 	call	8111a4 <altera_avalon_uart_write>
      fd->fd_flags);
}
  810b24:	e037883a 	mov	sp,fp
  810b28:	dfc00117 	ldw	ra,4(sp)
  810b2c:	df000017 	ldw	fp,0(sp)
  810b30:	dec00204 	addi	sp,sp,8
  810b34:	f800283a 	ret

00810b38 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  810b38:	defffc04 	addi	sp,sp,-16
  810b3c:	dfc00315 	stw	ra,12(sp)
  810b40:	df000215 	stw	fp,8(sp)
  810b44:	df000204 	addi	fp,sp,8
  810b48:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  810b4c:	e0bfff17 	ldw	r2,-4(fp)
  810b50:	10800017 	ldw	r2,0(r2)
  810b54:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  810b58:	e0bffe17 	ldw	r2,-8(fp)
  810b5c:	10c00a04 	addi	r3,r2,40
  810b60:	e0bfff17 	ldw	r2,-4(fp)
  810b64:	10800217 	ldw	r2,8(r2)
  810b68:	100b883a 	mov	r5,r2
  810b6c:	1809883a 	mov	r4,r3
  810b70:	0810efc0 	call	810efc <altera_avalon_uart_close>
}
  810b74:	e037883a 	mov	sp,fp
  810b78:	dfc00117 	ldw	ra,4(sp)
  810b7c:	df000017 	ldw	fp,0(sp)
  810b80:	dec00204 	addi	sp,sp,8
  810b84:	f800283a 	ret

00810b88 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  810b88:	defff804 	addi	sp,sp,-32
  810b8c:	dfc00715 	stw	ra,28(sp)
  810b90:	df000615 	stw	fp,24(sp)
  810b94:	df000604 	addi	fp,sp,24
  810b98:	e13ffd15 	stw	r4,-12(fp)
  810b9c:	e17ffe15 	stw	r5,-8(fp)
  810ba0:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  810ba4:	e0bffd17 	ldw	r2,-12(fp)
  810ba8:	10800017 	ldw	r2,0(r2)
  810bac:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  810bb0:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  810bb4:	1000041e 	bne	r2,zero,810bc8 <altera_avalon_uart_init+0x40>
  810bb8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  810bbc:	1000021e 	bne	r2,zero,810bc8 <altera_avalon_uart_init+0x40>
  810bc0:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  810bc4:	10000226 	beq	r2,zero,810bd0 <altera_avalon_uart_init+0x48>
  810bc8:	00800044 	movi	r2,1
  810bcc:	00000106 	br	810bd4 <altera_avalon_uart_init+0x4c>
  810bd0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  810bd4:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  810bd8:	e0bffc17 	ldw	r2,-16(fp)
  810bdc:	10000f1e 	bne	r2,zero,810c1c <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  810be0:	e0bffd17 	ldw	r2,-12(fp)
  810be4:	00c32004 	movi	r3,3200
  810be8:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  810bec:	e0bffb17 	ldw	r2,-20(fp)
  810bf0:	10800304 	addi	r2,r2,12
  810bf4:	e0fffd17 	ldw	r3,-12(fp)
  810bf8:	18c00117 	ldw	r3,4(r3)
  810bfc:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  810c00:	d8000015 	stw	zero,0(sp)
  810c04:	e1fffd17 	ldw	r7,-12(fp)
  810c08:	01802074 	movhi	r6,129
  810c0c:	31830d04 	addi	r6,r6,3124
  810c10:	e17fff17 	ldw	r5,-4(fp)
  810c14:	e13ffe17 	ldw	r4,-8(fp)
  810c18:	08117a80 	call	8117a8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  810c1c:	0001883a 	nop
  810c20:	e037883a 	mov	sp,fp
  810c24:	dfc00117 	ldw	ra,4(sp)
  810c28:	df000017 	ldw	fp,0(sp)
  810c2c:	dec00204 	addi	sp,sp,8
  810c30:	f800283a 	ret

00810c34 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  810c34:	defffa04 	addi	sp,sp,-24
  810c38:	dfc00515 	stw	ra,20(sp)
  810c3c:	df000415 	stw	fp,16(sp)
  810c40:	df000404 	addi	fp,sp,16
  810c44:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  810c48:	e0bfff17 	ldw	r2,-4(fp)
  810c4c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  810c50:	e0bffc17 	ldw	r2,-16(fp)
  810c54:	10800017 	ldw	r2,0(r2)
  810c58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  810c5c:	e0bffd17 	ldw	r2,-12(fp)
  810c60:	10800204 	addi	r2,r2,8
  810c64:	10800037 	ldwio	r2,0(r2)
  810c68:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  810c6c:	e0bffd17 	ldw	r2,-12(fp)
  810c70:	10800204 	addi	r2,r2,8
  810c74:	0007883a 	mov	r3,zero
  810c78:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  810c7c:	e0bffd17 	ldw	r2,-12(fp)
  810c80:	10800204 	addi	r2,r2,8
  810c84:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  810c88:	e0bffe17 	ldw	r2,-8(fp)
  810c8c:	1080200c 	andi	r2,r2,128
  810c90:	10000326 	beq	r2,zero,810ca0 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  810c94:	e17ffe17 	ldw	r5,-8(fp)
  810c98:	e13ffc17 	ldw	r4,-16(fp)
  810c9c:	0810cd00 	call	810cd0 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  810ca0:	e0bffe17 	ldw	r2,-8(fp)
  810ca4:	1081100c 	andi	r2,r2,1088
  810ca8:	10000326 	beq	r2,zero,810cb8 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  810cac:	e17ffe17 	ldw	r5,-8(fp)
  810cb0:	e13ffc17 	ldw	r4,-16(fp)
  810cb4:	0810db40 	call	810db4 <altera_avalon_uart_txirq>
  }
  

}
  810cb8:	0001883a 	nop
  810cbc:	e037883a 	mov	sp,fp
  810cc0:	dfc00117 	ldw	ra,4(sp)
  810cc4:	df000017 	ldw	fp,0(sp)
  810cc8:	dec00204 	addi	sp,sp,8
  810ccc:	f800283a 	ret

00810cd0 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  810cd0:	defffc04 	addi	sp,sp,-16
  810cd4:	df000315 	stw	fp,12(sp)
  810cd8:	df000304 	addi	fp,sp,12
  810cdc:	e13ffe15 	stw	r4,-8(fp)
  810ce0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  810ce4:	e0bfff17 	ldw	r2,-4(fp)
  810ce8:	108000cc 	andi	r2,r2,3
  810cec:	10002c1e 	bne	r2,zero,810da0 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  810cf0:	e0bffe17 	ldw	r2,-8(fp)
  810cf4:	10800317 	ldw	r2,12(r2)
  810cf8:	e0bffe17 	ldw	r2,-8(fp)
  810cfc:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  810d00:	e0bffe17 	ldw	r2,-8(fp)
  810d04:	10800317 	ldw	r2,12(r2)
  810d08:	10800044 	addi	r2,r2,1
  810d0c:	10800fcc 	andi	r2,r2,63
  810d10:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  810d14:	e0bffe17 	ldw	r2,-8(fp)
  810d18:	10800317 	ldw	r2,12(r2)
  810d1c:	e0fffe17 	ldw	r3,-8(fp)
  810d20:	18c00017 	ldw	r3,0(r3)
  810d24:	18c00037 	ldwio	r3,0(r3)
  810d28:	1809883a 	mov	r4,r3
  810d2c:	e0fffe17 	ldw	r3,-8(fp)
  810d30:	1885883a 	add	r2,r3,r2
  810d34:	10800704 	addi	r2,r2,28
  810d38:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  810d3c:	e0bffe17 	ldw	r2,-8(fp)
  810d40:	e0fffd17 	ldw	r3,-12(fp)
  810d44:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  810d48:	e0bffe17 	ldw	r2,-8(fp)
  810d4c:	10800317 	ldw	r2,12(r2)
  810d50:	10800044 	addi	r2,r2,1
  810d54:	10800fcc 	andi	r2,r2,63
  810d58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  810d5c:	e0bffe17 	ldw	r2,-8(fp)
  810d60:	10c00217 	ldw	r3,8(r2)
  810d64:	e0bffd17 	ldw	r2,-12(fp)
  810d68:	18800e1e 	bne	r3,r2,810da4 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  810d6c:	e0bffe17 	ldw	r2,-8(fp)
  810d70:	10c00117 	ldw	r3,4(r2)
  810d74:	00bfdfc4 	movi	r2,-129
  810d78:	1886703a 	and	r3,r3,r2
  810d7c:	e0bffe17 	ldw	r2,-8(fp)
  810d80:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  810d84:	e0bffe17 	ldw	r2,-8(fp)
  810d88:	10800017 	ldw	r2,0(r2)
  810d8c:	10800304 	addi	r2,r2,12
  810d90:	e0fffe17 	ldw	r3,-8(fp)
  810d94:	18c00117 	ldw	r3,4(r3)
  810d98:	10c00035 	stwio	r3,0(r2)
  810d9c:	00000106 	br	810da4 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  810da0:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  810da4:	e037883a 	mov	sp,fp
  810da8:	df000017 	ldw	fp,0(sp)
  810dac:	dec00104 	addi	sp,sp,4
  810db0:	f800283a 	ret

00810db4 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  810db4:	defffb04 	addi	sp,sp,-20
  810db8:	df000415 	stw	fp,16(sp)
  810dbc:	df000404 	addi	fp,sp,16
  810dc0:	e13ffc15 	stw	r4,-16(fp)
  810dc4:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  810dc8:	e0bffc17 	ldw	r2,-16(fp)
  810dcc:	10c00417 	ldw	r3,16(r2)
  810dd0:	e0bffc17 	ldw	r2,-16(fp)
  810dd4:	10800517 	ldw	r2,20(r2)
  810dd8:	18803226 	beq	r3,r2,810ea4 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  810ddc:	e0bffc17 	ldw	r2,-16(fp)
  810de0:	10800617 	ldw	r2,24(r2)
  810de4:	1080008c 	andi	r2,r2,2
  810de8:	10000326 	beq	r2,zero,810df8 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  810dec:	e0bffd17 	ldw	r2,-12(fp)
  810df0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  810df4:	10001d26 	beq	r2,zero,810e6c <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  810df8:	e0bffc17 	ldw	r2,-16(fp)
  810dfc:	10800417 	ldw	r2,16(r2)
  810e00:	e0bffc17 	ldw	r2,-16(fp)
  810e04:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  810e08:	e0bffc17 	ldw	r2,-16(fp)
  810e0c:	10800017 	ldw	r2,0(r2)
  810e10:	10800104 	addi	r2,r2,4
  810e14:	e0fffc17 	ldw	r3,-16(fp)
  810e18:	18c00417 	ldw	r3,16(r3)
  810e1c:	e13ffc17 	ldw	r4,-16(fp)
  810e20:	20c7883a 	add	r3,r4,r3
  810e24:	18c01704 	addi	r3,r3,92
  810e28:	18c00003 	ldbu	r3,0(r3)
  810e2c:	18c03fcc 	andi	r3,r3,255
  810e30:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  810e34:	e0bffc17 	ldw	r2,-16(fp)
  810e38:	10800417 	ldw	r2,16(r2)
  810e3c:	10800044 	addi	r2,r2,1
  810e40:	e0fffc17 	ldw	r3,-16(fp)
  810e44:	18800415 	stw	r2,16(r3)
  810e48:	10c00fcc 	andi	r3,r2,63
  810e4c:	e0bffc17 	ldw	r2,-16(fp)
  810e50:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  810e54:	e0bffc17 	ldw	r2,-16(fp)
  810e58:	10800117 	ldw	r2,4(r2)
  810e5c:	10c01014 	ori	r3,r2,64
  810e60:	e0bffc17 	ldw	r2,-16(fp)
  810e64:	10c00115 	stw	r3,4(r2)
  810e68:	00000e06 	br	810ea4 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  810e6c:	e0bffc17 	ldw	r2,-16(fp)
  810e70:	10800017 	ldw	r2,0(r2)
  810e74:	10800204 	addi	r2,r2,8
  810e78:	10800037 	ldwio	r2,0(r2)
  810e7c:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  810e80:	e0bffd17 	ldw	r2,-12(fp)
  810e84:	1082000c 	andi	r2,r2,2048
  810e88:	1000061e 	bne	r2,zero,810ea4 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  810e8c:	e0bffc17 	ldw	r2,-16(fp)
  810e90:	10c00117 	ldw	r3,4(r2)
  810e94:	00bfefc4 	movi	r2,-65
  810e98:	1886703a 	and	r3,r3,r2
  810e9c:	e0bffc17 	ldw	r2,-16(fp)
  810ea0:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  810ea4:	e0bffc17 	ldw	r2,-16(fp)
  810ea8:	10c00417 	ldw	r3,16(r2)
  810eac:	e0bffc17 	ldw	r2,-16(fp)
  810eb0:	10800517 	ldw	r2,20(r2)
  810eb4:	1880061e 	bne	r3,r2,810ed0 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  810eb8:	e0bffc17 	ldw	r2,-16(fp)
  810ebc:	10c00117 	ldw	r3,4(r2)
  810ec0:	00beefc4 	movi	r2,-1089
  810ec4:	1886703a 	and	r3,r3,r2
  810ec8:	e0bffc17 	ldw	r2,-16(fp)
  810ecc:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  810ed0:	e0bffc17 	ldw	r2,-16(fp)
  810ed4:	10800017 	ldw	r2,0(r2)
  810ed8:	10800304 	addi	r2,r2,12
  810edc:	e0fffc17 	ldw	r3,-16(fp)
  810ee0:	18c00117 	ldw	r3,4(r3)
  810ee4:	10c00035 	stwio	r3,0(r2)
}
  810ee8:	0001883a 	nop
  810eec:	e037883a 	mov	sp,fp
  810ef0:	df000017 	ldw	fp,0(sp)
  810ef4:	dec00104 	addi	sp,sp,4
  810ef8:	f800283a 	ret

00810efc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  810efc:	defffd04 	addi	sp,sp,-12
  810f00:	df000215 	stw	fp,8(sp)
  810f04:	df000204 	addi	fp,sp,8
  810f08:	e13ffe15 	stw	r4,-8(fp)
  810f0c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  810f10:	00000506 	br	810f28 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  810f14:	e0bfff17 	ldw	r2,-4(fp)
  810f18:	1090000c 	andi	r2,r2,16384
  810f1c:	10000226 	beq	r2,zero,810f28 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  810f20:	00bffd44 	movi	r2,-11
  810f24:	00000606 	br	810f40 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  810f28:	e0bffe17 	ldw	r2,-8(fp)
  810f2c:	10c00417 	ldw	r3,16(r2)
  810f30:	e0bffe17 	ldw	r2,-8(fp)
  810f34:	10800517 	ldw	r2,20(r2)
  810f38:	18bff61e 	bne	r3,r2,810f14 <__alt_mem_onchip_mem+0xff790f14>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  810f3c:	0005883a 	mov	r2,zero
}
  810f40:	e037883a 	mov	sp,fp
  810f44:	df000017 	ldw	fp,0(sp)
  810f48:	dec00104 	addi	sp,sp,4
  810f4c:	f800283a 	ret

00810f50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810f50:	defffe04 	addi	sp,sp,-8
  810f54:	dfc00115 	stw	ra,4(sp)
  810f58:	df000015 	stw	fp,0(sp)
  810f5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810f60:	d0a00d17 	ldw	r2,-32716(gp)
  810f64:	10000326 	beq	r2,zero,810f74 <alt_get_errno+0x24>
  810f68:	d0a00d17 	ldw	r2,-32716(gp)
  810f6c:	103ee83a 	callr	r2
  810f70:	00000106 	br	810f78 <alt_get_errno+0x28>
  810f74:	d0a75904 	addi	r2,gp,-25244
}
  810f78:	e037883a 	mov	sp,fp
  810f7c:	dfc00117 	ldw	ra,4(sp)
  810f80:	df000017 	ldw	fp,0(sp)
  810f84:	dec00204 	addi	sp,sp,8
  810f88:	f800283a 	ret

00810f8c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  810f8c:	defff204 	addi	sp,sp,-56
  810f90:	dfc00d15 	stw	ra,52(sp)
  810f94:	df000c15 	stw	fp,48(sp)
  810f98:	df000c04 	addi	fp,sp,48
  810f9c:	e13ffc15 	stw	r4,-16(fp)
  810fa0:	e17ffd15 	stw	r5,-12(fp)
  810fa4:	e1bffe15 	stw	r6,-8(fp)
  810fa8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  810fac:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  810fb0:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  810fb4:	e0bfff17 	ldw	r2,-4(fp)
  810fb8:	1090000c 	andi	r2,r2,16384
  810fbc:	1005003a 	cmpeq	r2,r2,zero
  810fc0:	10803fcc 	andi	r2,r2,255
  810fc4:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  810fc8:	00001306 	br	811018 <altera_avalon_uart_read+0x8c>
    {
      count++;
  810fcc:	e0bff517 	ldw	r2,-44(fp)
  810fd0:	10800044 	addi	r2,r2,1
  810fd4:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  810fd8:	e0bffd17 	ldw	r2,-12(fp)
  810fdc:	10c00044 	addi	r3,r2,1
  810fe0:	e0fffd15 	stw	r3,-12(fp)
  810fe4:	e0fffc17 	ldw	r3,-16(fp)
  810fe8:	18c00217 	ldw	r3,8(r3)
  810fec:	e13ffc17 	ldw	r4,-16(fp)
  810ff0:	20c7883a 	add	r3,r4,r3
  810ff4:	18c00704 	addi	r3,r3,28
  810ff8:	18c00003 	ldbu	r3,0(r3)
  810ffc:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  811000:	e0bffc17 	ldw	r2,-16(fp)
  811004:	10800217 	ldw	r2,8(r2)
  811008:	10800044 	addi	r2,r2,1
  81100c:	10c00fcc 	andi	r3,r2,63
  811010:	e0bffc17 	ldw	r2,-16(fp)
  811014:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  811018:	e0fff517 	ldw	r3,-44(fp)
  81101c:	e0bffe17 	ldw	r2,-8(fp)
  811020:	1880050e 	bge	r3,r2,811038 <altera_avalon_uart_read+0xac>
  811024:	e0bffc17 	ldw	r2,-16(fp)
  811028:	10c00217 	ldw	r3,8(r2)
  81102c:	e0bffc17 	ldw	r2,-16(fp)
  811030:	10800317 	ldw	r2,12(r2)
  811034:	18bfe51e 	bne	r3,r2,810fcc <__alt_mem_onchip_mem+0xff790fcc>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  811038:	e0bff517 	ldw	r2,-44(fp)
  81103c:	1000251e 	bne	r2,zero,8110d4 <altera_avalon_uart_read+0x148>
  811040:	e0bffc17 	ldw	r2,-16(fp)
  811044:	10c00217 	ldw	r3,8(r2)
  811048:	e0bffc17 	ldw	r2,-16(fp)
  81104c:	10800317 	ldw	r2,12(r2)
  811050:	1880201e 	bne	r3,r2,8110d4 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  811054:	e0bff617 	ldw	r2,-40(fp)
  811058:	1000071e 	bne	r2,zero,811078 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  81105c:	0810f500 	call	810f50 <alt_get_errno>
  811060:	1007883a 	mov	r3,r2
  811064:	008002c4 	movi	r2,11
  811068:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  81106c:	00800044 	movi	r2,1
  811070:	e0bff405 	stb	r2,-48(fp)
        break;
  811074:	00001b06 	br	8110e4 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811078:	0005303a 	rdctl	r2,status
  81107c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811080:	e0fff917 	ldw	r3,-28(fp)
  811084:	00bfff84 	movi	r2,-2
  811088:	1884703a 	and	r2,r3,r2
  81108c:	1001703a 	wrctl	status,r2
  
  return context;
  811090:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  811094:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  811098:	e0bffc17 	ldw	r2,-16(fp)
  81109c:	10800117 	ldw	r2,4(r2)
  8110a0:	10c02014 	ori	r3,r2,128
  8110a4:	e0bffc17 	ldw	r2,-16(fp)
  8110a8:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8110ac:	e0bffc17 	ldw	r2,-16(fp)
  8110b0:	10800017 	ldw	r2,0(r2)
  8110b4:	10800304 	addi	r2,r2,12
  8110b8:	e0fffc17 	ldw	r3,-16(fp)
  8110bc:	18c00117 	ldw	r3,4(r3)
  8110c0:	10c00035 	stwio	r3,0(r2)
  8110c4:	e0bff817 	ldw	r2,-32(fp)
  8110c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8110cc:	e0bffa17 	ldw	r2,-24(fp)
  8110d0:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  8110d4:	e0bff517 	ldw	r2,-44(fp)
  8110d8:	1000021e 	bne	r2,zero,8110e4 <altera_avalon_uart_read+0x158>
  8110dc:	e0bffe17 	ldw	r2,-8(fp)
  8110e0:	103fcd1e 	bne	r2,zero,811018 <__alt_mem_onchip_mem+0xff791018>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8110e4:	0005303a 	rdctl	r2,status
  8110e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8110ec:	e0fffb17 	ldw	r3,-20(fp)
  8110f0:	00bfff84 	movi	r2,-2
  8110f4:	1884703a 	and	r2,r3,r2
  8110f8:	1001703a 	wrctl	status,r2
  
  return context;
  8110fc:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  811100:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  811104:	e0bffc17 	ldw	r2,-16(fp)
  811108:	10800117 	ldw	r2,4(r2)
  81110c:	10c02014 	ori	r3,r2,128
  811110:	e0bffc17 	ldw	r2,-16(fp)
  811114:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811118:	e0bffc17 	ldw	r2,-16(fp)
  81111c:	10800017 	ldw	r2,0(r2)
  811120:	10800304 	addi	r2,r2,12
  811124:	e0fffc17 	ldw	r3,-16(fp)
  811128:	18c00117 	ldw	r3,4(r3)
  81112c:	10c00035 	stwio	r3,0(r2)
  811130:	e0bff817 	ldw	r2,-32(fp)
  811134:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811138:	e0bff717 	ldw	r2,-36(fp)
  81113c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  811140:	e0bff403 	ldbu	r2,-48(fp)
  811144:	10000226 	beq	r2,zero,811150 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  811148:	00bffd44 	movi	r2,-11
  81114c:	00000106 	br	811154 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  811150:	e0bff517 	ldw	r2,-44(fp)
  }
}
  811154:	e037883a 	mov	sp,fp
  811158:	dfc00117 	ldw	ra,4(sp)
  81115c:	df000017 	ldw	fp,0(sp)
  811160:	dec00204 	addi	sp,sp,8
  811164:	f800283a 	ret

00811168 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811168:	defffe04 	addi	sp,sp,-8
  81116c:	dfc00115 	stw	ra,4(sp)
  811170:	df000015 	stw	fp,0(sp)
  811174:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811178:	d0a00d17 	ldw	r2,-32716(gp)
  81117c:	10000326 	beq	r2,zero,81118c <alt_get_errno+0x24>
  811180:	d0a00d17 	ldw	r2,-32716(gp)
  811184:	103ee83a 	callr	r2
  811188:	00000106 	br	811190 <alt_get_errno+0x28>
  81118c:	d0a75904 	addi	r2,gp,-25244
}
  811190:	e037883a 	mov	sp,fp
  811194:	dfc00117 	ldw	ra,4(sp)
  811198:	df000017 	ldw	fp,0(sp)
  81119c:	dec00204 	addi	sp,sp,8
  8111a0:	f800283a 	ret

008111a4 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  8111a4:	defff204 	addi	sp,sp,-56
  8111a8:	dfc00d15 	stw	ra,52(sp)
  8111ac:	df000c15 	stw	fp,48(sp)
  8111b0:	df000c04 	addi	fp,sp,48
  8111b4:	e13ffc15 	stw	r4,-16(fp)
  8111b8:	e17ffd15 	stw	r5,-12(fp)
  8111bc:	e1bffe15 	stw	r6,-8(fp)
  8111c0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  8111c4:	e0bffe17 	ldw	r2,-8(fp)
  8111c8:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  8111cc:	e0bfff17 	ldw	r2,-4(fp)
  8111d0:	1090000c 	andi	r2,r2,16384
  8111d4:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8111d8:	00003c06 	br	8112cc <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8111dc:	e0bffc17 	ldw	r2,-16(fp)
  8111e0:	10800517 	ldw	r2,20(r2)
  8111e4:	10800044 	addi	r2,r2,1
  8111e8:	10800fcc 	andi	r2,r2,63
  8111ec:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  8111f0:	e0bffc17 	ldw	r2,-16(fp)
  8111f4:	10c00417 	ldw	r3,16(r2)
  8111f8:	e0bff717 	ldw	r2,-36(fp)
  8111fc:	1880221e 	bne	r3,r2,811288 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  811200:	e0bff517 	ldw	r2,-44(fp)
  811204:	10000526 	beq	r2,zero,81121c <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  811208:	08111680 	call	811168 <alt_get_errno>
  81120c:	1007883a 	mov	r3,r2
  811210:	008002c4 	movi	r2,11
  811214:	18800015 	stw	r2,0(r3)
        break;
  811218:	00002e06 	br	8112d4 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81121c:	0005303a 	rdctl	r2,status
  811220:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811224:	e0fff917 	ldw	r3,-28(fp)
  811228:	00bfff84 	movi	r2,-2
  81122c:	1884703a 	and	r2,r3,r2
  811230:	1001703a 	wrctl	status,r2
  
  return context;
  811234:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  811238:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  81123c:	e0bffc17 	ldw	r2,-16(fp)
  811240:	10800117 	ldw	r2,4(r2)
  811244:	10c11014 	ori	r3,r2,1088
  811248:	e0bffc17 	ldw	r2,-16(fp)
  81124c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811250:	e0bffc17 	ldw	r2,-16(fp)
  811254:	10800017 	ldw	r2,0(r2)
  811258:	10800304 	addi	r2,r2,12
  81125c:	e0fffc17 	ldw	r3,-16(fp)
  811260:	18c00117 	ldw	r3,4(r3)
  811264:	10c00035 	stwio	r3,0(r2)
  811268:	e0bff817 	ldw	r2,-32(fp)
  81126c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811270:	e0bff617 	ldw	r2,-40(fp)
  811274:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  811278:	e0bffc17 	ldw	r2,-16(fp)
  81127c:	10c00417 	ldw	r3,16(r2)
  811280:	e0bff717 	ldw	r2,-36(fp)
  811284:	18bffc26 	beq	r3,r2,811278 <__alt_mem_onchip_mem+0xff791278>
      }
    }

    count--;
  811288:	e0bff417 	ldw	r2,-48(fp)
  81128c:	10bfffc4 	addi	r2,r2,-1
  811290:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  811294:	e0bffc17 	ldw	r2,-16(fp)
  811298:	10c00517 	ldw	r3,20(r2)
  81129c:	e0bffd17 	ldw	r2,-12(fp)
  8112a0:	11000044 	addi	r4,r2,1
  8112a4:	e13ffd15 	stw	r4,-12(fp)
  8112a8:	10800003 	ldbu	r2,0(r2)
  8112ac:	1009883a 	mov	r4,r2
  8112b0:	e0bffc17 	ldw	r2,-16(fp)
  8112b4:	10c5883a 	add	r2,r2,r3
  8112b8:	10801704 	addi	r2,r2,92
  8112bc:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  8112c0:	e0bffc17 	ldw	r2,-16(fp)
  8112c4:	e0fff717 	ldw	r3,-36(fp)
  8112c8:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8112cc:	e0bff417 	ldw	r2,-48(fp)
  8112d0:	103fc21e 	bne	r2,zero,8111dc <__alt_mem_onchip_mem+0xff7911dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8112d4:	0005303a 	rdctl	r2,status
  8112d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8112dc:	e0fffb17 	ldw	r3,-20(fp)
  8112e0:	00bfff84 	movi	r2,-2
  8112e4:	1884703a 	and	r2,r3,r2
  8112e8:	1001703a 	wrctl	status,r2
  
  return context;
  8112ec:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  8112f0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8112f4:	e0bffc17 	ldw	r2,-16(fp)
  8112f8:	10800117 	ldw	r2,4(r2)
  8112fc:	10c11014 	ori	r3,r2,1088
  811300:	e0bffc17 	ldw	r2,-16(fp)
  811304:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811308:	e0bffc17 	ldw	r2,-16(fp)
  81130c:	10800017 	ldw	r2,0(r2)
  811310:	10800304 	addi	r2,r2,12
  811314:	e0fffc17 	ldw	r3,-16(fp)
  811318:	18c00117 	ldw	r3,4(r3)
  81131c:	10c00035 	stwio	r3,0(r2)
  811320:	e0bff817 	ldw	r2,-32(fp)
  811324:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811328:	e0bffa17 	ldw	r2,-24(fp)
  81132c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  811330:	e0fffe17 	ldw	r3,-8(fp)
  811334:	e0bff417 	ldw	r2,-48(fp)
  811338:	1885c83a 	sub	r2,r3,r2
}
  81133c:	e037883a 	mov	sp,fp
  811340:	dfc00117 	ldw	ra,4(sp)
  811344:	df000017 	ldw	fp,0(sp)
  811348:	dec00204 	addi	sp,sp,8
  81134c:	f800283a 	ret

00811350 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  811350:	defffe04 	addi	sp,sp,-8
  811354:	df000115 	stw	fp,4(sp)
  811358:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81135c:	e03fff15 	stw	zero,-4(fp)
  811360:	00000506 	br	811378 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  811364:	e0bfff17 	ldw	r2,-4(fp)
  811368:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81136c:	e0bfff17 	ldw	r2,-4(fp)
  811370:	10800804 	addi	r2,r2,32
  811374:	e0bfff15 	stw	r2,-4(fp)
  811378:	e0bfff17 	ldw	r2,-4(fp)
  81137c:	10820030 	cmpltui	r2,r2,2048
  811380:	103ff81e 	bne	r2,zero,811364 <__alt_mem_onchip_mem+0xff791364>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  811384:	0001883a 	nop
  811388:	e037883a 	mov	sp,fp
  81138c:	df000017 	ldw	fp,0(sp)
  811390:	dec00104 	addi	sp,sp,4
  811394:	f800283a 	ret

00811398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811398:	defffe04 	addi	sp,sp,-8
  81139c:	dfc00115 	stw	ra,4(sp)
  8113a0:	df000015 	stw	fp,0(sp)
  8113a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8113a8:	d0a00d17 	ldw	r2,-32716(gp)
  8113ac:	10000326 	beq	r2,zero,8113bc <alt_get_errno+0x24>
  8113b0:	d0a00d17 	ldw	r2,-32716(gp)
  8113b4:	103ee83a 	callr	r2
  8113b8:	00000106 	br	8113c0 <alt_get_errno+0x28>
  8113bc:	d0a75904 	addi	r2,gp,-25244
}
  8113c0:	e037883a 	mov	sp,fp
  8113c4:	dfc00117 	ldw	ra,4(sp)
  8113c8:	df000017 	ldw	fp,0(sp)
  8113cc:	dec00204 	addi	sp,sp,8
  8113d0:	f800283a 	ret

008113d4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8113d4:	defffa04 	addi	sp,sp,-24
  8113d8:	dfc00515 	stw	ra,20(sp)
  8113dc:	df000415 	stw	fp,16(sp)
  8113e0:	df000404 	addi	fp,sp,16
  8113e4:	e13ffe15 	stw	r4,-8(fp)
  8113e8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8113ec:	e0bffe17 	ldw	r2,-8(fp)
  8113f0:	10000326 	beq	r2,zero,811400 <alt_dev_llist_insert+0x2c>
  8113f4:	e0bffe17 	ldw	r2,-8(fp)
  8113f8:	10800217 	ldw	r2,8(r2)
  8113fc:	1000061e 	bne	r2,zero,811418 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  811400:	08113980 	call	811398 <alt_get_errno>
  811404:	1007883a 	mov	r3,r2
  811408:	00800584 	movi	r2,22
  81140c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  811410:	00bffa84 	movi	r2,-22
  811414:	00001306 	br	811464 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  811418:	e0bffe17 	ldw	r2,-8(fp)
  81141c:	e0ffff17 	ldw	r3,-4(fp)
  811420:	e0fffc15 	stw	r3,-16(fp)
  811424:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  811428:	e0bffd17 	ldw	r2,-12(fp)
  81142c:	e0fffc17 	ldw	r3,-16(fp)
  811430:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  811434:	e0bffc17 	ldw	r2,-16(fp)
  811438:	10c00017 	ldw	r3,0(r2)
  81143c:	e0bffd17 	ldw	r2,-12(fp)
  811440:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  811444:	e0bffc17 	ldw	r2,-16(fp)
  811448:	10800017 	ldw	r2,0(r2)
  81144c:	e0fffd17 	ldw	r3,-12(fp)
  811450:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  811454:	e0bffc17 	ldw	r2,-16(fp)
  811458:	e0fffd17 	ldw	r3,-12(fp)
  81145c:	10c00015 	stw	r3,0(r2)

  return 0;  
  811460:	0005883a 	mov	r2,zero
}
  811464:	e037883a 	mov	sp,fp
  811468:	dfc00117 	ldw	ra,4(sp)
  81146c:	df000017 	ldw	fp,0(sp)
  811470:	dec00204 	addi	sp,sp,8
  811474:	f800283a 	ret

00811478 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  811478:	defffd04 	addi	sp,sp,-12
  81147c:	dfc00215 	stw	ra,8(sp)
  811480:	df000115 	stw	fp,4(sp)
  811484:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  811488:	00802074 	movhi	r2,129
  81148c:	10887c04 	addi	r2,r2,8688
  811490:	e0bfff15 	stw	r2,-4(fp)
  811494:	00000606 	br	8114b0 <_do_ctors+0x38>
        (*ctor) (); 
  811498:	e0bfff17 	ldw	r2,-4(fp)
  81149c:	10800017 	ldw	r2,0(r2)
  8114a0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8114a4:	e0bfff17 	ldw	r2,-4(fp)
  8114a8:	10bfff04 	addi	r2,r2,-4
  8114ac:	e0bfff15 	stw	r2,-4(fp)
  8114b0:	e0ffff17 	ldw	r3,-4(fp)
  8114b4:	00802074 	movhi	r2,129
  8114b8:	10887d04 	addi	r2,r2,8692
  8114bc:	18bff62e 	bgeu	r3,r2,811498 <__alt_mem_onchip_mem+0xff791498>
        (*ctor) (); 
}
  8114c0:	0001883a 	nop
  8114c4:	e037883a 	mov	sp,fp
  8114c8:	dfc00117 	ldw	ra,4(sp)
  8114cc:	df000017 	ldw	fp,0(sp)
  8114d0:	dec00204 	addi	sp,sp,8
  8114d4:	f800283a 	ret

008114d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8114d8:	defffd04 	addi	sp,sp,-12
  8114dc:	dfc00215 	stw	ra,8(sp)
  8114e0:	df000115 	stw	fp,4(sp)
  8114e4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8114e8:	00802074 	movhi	r2,129
  8114ec:	10887c04 	addi	r2,r2,8688
  8114f0:	e0bfff15 	stw	r2,-4(fp)
  8114f4:	00000606 	br	811510 <_do_dtors+0x38>
        (*dtor) (); 
  8114f8:	e0bfff17 	ldw	r2,-4(fp)
  8114fc:	10800017 	ldw	r2,0(r2)
  811500:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  811504:	e0bfff17 	ldw	r2,-4(fp)
  811508:	10bfff04 	addi	r2,r2,-4
  81150c:	e0bfff15 	stw	r2,-4(fp)
  811510:	e0ffff17 	ldw	r3,-4(fp)
  811514:	00802074 	movhi	r2,129
  811518:	10887d04 	addi	r2,r2,8692
  81151c:	18bff62e 	bgeu	r3,r2,8114f8 <__alt_mem_onchip_mem+0xff7914f8>
        (*dtor) (); 
}
  811520:	0001883a 	nop
  811524:	e037883a 	mov	sp,fp
  811528:	dfc00117 	ldw	ra,4(sp)
  81152c:	df000017 	ldw	fp,0(sp)
  811530:	dec00204 	addi	sp,sp,8
  811534:	f800283a 	ret

00811538 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  811538:	defffa04 	addi	sp,sp,-24
  81153c:	dfc00515 	stw	ra,20(sp)
  811540:	df000415 	stw	fp,16(sp)
  811544:	df000404 	addi	fp,sp,16
  811548:	e13ffe15 	stw	r4,-8(fp)
  81154c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  811550:	e0bfff17 	ldw	r2,-4(fp)
  811554:	10800017 	ldw	r2,0(r2)
  811558:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81155c:	e13ffe17 	ldw	r4,-8(fp)
  811560:	08083180 	call	808318 <strlen>
  811564:	10800044 	addi	r2,r2,1
  811568:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81156c:	00000d06 	br	8115a4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  811570:	e0bffc17 	ldw	r2,-16(fp)
  811574:	10800217 	ldw	r2,8(r2)
  811578:	e0fffd17 	ldw	r3,-12(fp)
  81157c:	180d883a 	mov	r6,r3
  811580:	e17ffe17 	ldw	r5,-8(fp)
  811584:	1009883a 	mov	r4,r2
  811588:	0811eac0 	call	811eac <memcmp>
  81158c:	1000021e 	bne	r2,zero,811598 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  811590:	e0bffc17 	ldw	r2,-16(fp)
  811594:	00000706 	br	8115b4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  811598:	e0bffc17 	ldw	r2,-16(fp)
  81159c:	10800017 	ldw	r2,0(r2)
  8115a0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8115a4:	e0fffc17 	ldw	r3,-16(fp)
  8115a8:	e0bfff17 	ldw	r2,-4(fp)
  8115ac:	18bff01e 	bne	r3,r2,811570 <__alt_mem_onchip_mem+0xff791570>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8115b0:	0005883a 	mov	r2,zero
}
  8115b4:	e037883a 	mov	sp,fp
  8115b8:	dfc00117 	ldw	ra,4(sp)
  8115bc:	df000017 	ldw	fp,0(sp)
  8115c0:	dec00204 	addi	sp,sp,8
  8115c4:	f800283a 	ret

008115c8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8115c8:	defffb04 	addi	sp,sp,-20
  8115cc:	dfc00415 	stw	ra,16(sp)
  8115d0:	df000315 	stw	fp,12(sp)
  8115d4:	df000304 	addi	fp,sp,12
  8115d8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8115dc:	d0a00817 	ldw	r2,-32736(gp)
  8115e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8115e4:	00003106 	br	8116ac <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  8115e8:	e0bffd17 	ldw	r2,-12(fp)
  8115ec:	10800217 	ldw	r2,8(r2)
  8115f0:	1009883a 	mov	r4,r2
  8115f4:	08083180 	call	808318 <strlen>
  8115f8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  8115fc:	e0bffd17 	ldw	r2,-12(fp)
  811600:	10c00217 	ldw	r3,8(r2)
  811604:	e0bffe17 	ldw	r2,-8(fp)
  811608:	10bfffc4 	addi	r2,r2,-1
  81160c:	1885883a 	add	r2,r3,r2
  811610:	10800003 	ldbu	r2,0(r2)
  811614:	10803fcc 	andi	r2,r2,255
  811618:	1080201c 	xori	r2,r2,128
  81161c:	10bfe004 	addi	r2,r2,-128
  811620:	10800bd8 	cmpnei	r2,r2,47
  811624:	1000031e 	bne	r2,zero,811634 <alt_find_file+0x6c>
    {
      len -= 1;
  811628:	e0bffe17 	ldw	r2,-8(fp)
  81162c:	10bfffc4 	addi	r2,r2,-1
  811630:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  811634:	e0bffe17 	ldw	r2,-8(fp)
  811638:	e0ffff17 	ldw	r3,-4(fp)
  81163c:	1885883a 	add	r2,r3,r2
  811640:	10800003 	ldbu	r2,0(r2)
  811644:	10803fcc 	andi	r2,r2,255
  811648:	1080201c 	xori	r2,r2,128
  81164c:	10bfe004 	addi	r2,r2,-128
  811650:	10800be0 	cmpeqi	r2,r2,47
  811654:	1000081e 	bne	r2,zero,811678 <alt_find_file+0xb0>
  811658:	e0bffe17 	ldw	r2,-8(fp)
  81165c:	e0ffff17 	ldw	r3,-4(fp)
  811660:	1885883a 	add	r2,r3,r2
  811664:	10800003 	ldbu	r2,0(r2)
  811668:	10803fcc 	andi	r2,r2,255
  81166c:	1080201c 	xori	r2,r2,128
  811670:	10bfe004 	addi	r2,r2,-128
  811674:	10000a1e 	bne	r2,zero,8116a0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  811678:	e0bffd17 	ldw	r2,-12(fp)
  81167c:	10800217 	ldw	r2,8(r2)
  811680:	e0fffe17 	ldw	r3,-8(fp)
  811684:	180d883a 	mov	r6,r3
  811688:	e17fff17 	ldw	r5,-4(fp)
  81168c:	1009883a 	mov	r4,r2
  811690:	0811eac0 	call	811eac <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  811694:	1000021e 	bne	r2,zero,8116a0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  811698:	e0bffd17 	ldw	r2,-12(fp)
  81169c:	00000706 	br	8116bc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  8116a0:	e0bffd17 	ldw	r2,-12(fp)
  8116a4:	10800017 	ldw	r2,0(r2)
  8116a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8116ac:	e0fffd17 	ldw	r3,-12(fp)
  8116b0:	d0a00804 	addi	r2,gp,-32736
  8116b4:	18bfcc1e 	bne	r3,r2,8115e8 <__alt_mem_onchip_mem+0xff7915e8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8116b8:	0005883a 	mov	r2,zero
}
  8116bc:	e037883a 	mov	sp,fp
  8116c0:	dfc00117 	ldw	ra,4(sp)
  8116c4:	df000017 	ldw	fp,0(sp)
  8116c8:	dec00204 	addi	sp,sp,8
  8116cc:	f800283a 	ret

008116d0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8116d0:	defffc04 	addi	sp,sp,-16
  8116d4:	df000315 	stw	fp,12(sp)
  8116d8:	df000304 	addi	fp,sp,12
  8116dc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8116e0:	00bffa04 	movi	r2,-24
  8116e4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8116e8:	e03ffd15 	stw	zero,-12(fp)
  8116ec:	00001906 	br	811754 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  8116f0:	00802074 	movhi	r2,129
  8116f4:	108c3104 	addi	r2,r2,12484
  8116f8:	e0fffd17 	ldw	r3,-12(fp)
  8116fc:	18c00324 	muli	r3,r3,12
  811700:	10c5883a 	add	r2,r2,r3
  811704:	10800017 	ldw	r2,0(r2)
  811708:	10000f1e 	bne	r2,zero,811748 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  81170c:	00802074 	movhi	r2,129
  811710:	108c3104 	addi	r2,r2,12484
  811714:	e0fffd17 	ldw	r3,-12(fp)
  811718:	18c00324 	muli	r3,r3,12
  81171c:	10c5883a 	add	r2,r2,r3
  811720:	e0ffff17 	ldw	r3,-4(fp)
  811724:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  811728:	d0e00c17 	ldw	r3,-32720(gp)
  81172c:	e0bffd17 	ldw	r2,-12(fp)
  811730:	1880020e 	bge	r3,r2,81173c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  811734:	e0bffd17 	ldw	r2,-12(fp)
  811738:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
  81173c:	e0bffd17 	ldw	r2,-12(fp)
  811740:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  811744:	00000606 	br	811760 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  811748:	e0bffd17 	ldw	r2,-12(fp)
  81174c:	10800044 	addi	r2,r2,1
  811750:	e0bffd15 	stw	r2,-12(fp)
  811754:	e0bffd17 	ldw	r2,-12(fp)
  811758:	10800810 	cmplti	r2,r2,32
  81175c:	103fe41e 	bne	r2,zero,8116f0 <__alt_mem_onchip_mem+0xff7916f0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  811760:	e0bffe17 	ldw	r2,-8(fp)
}
  811764:	e037883a 	mov	sp,fp
  811768:	df000017 	ldw	fp,0(sp)
  81176c:	dec00104 	addi	sp,sp,4
  811770:	f800283a 	ret

00811774 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  811774:	defffe04 	addi	sp,sp,-8
  811778:	dfc00115 	stw	ra,4(sp)
  81177c:	df000015 	stw	fp,0(sp)
  811780:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  811784:	01440004 	movi	r5,4096
  811788:	0009883a 	mov	r4,zero
  81178c:	0811d340 	call	811d34 <alt_icache_flush>
#endif
}
  811790:	0001883a 	nop
  811794:	e037883a 	mov	sp,fp
  811798:	dfc00117 	ldw	ra,4(sp)
  81179c:	df000017 	ldw	fp,0(sp)
  8117a0:	dec00204 	addi	sp,sp,8
  8117a4:	f800283a 	ret

008117a8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8117a8:	defff904 	addi	sp,sp,-28
  8117ac:	dfc00615 	stw	ra,24(sp)
  8117b0:	df000515 	stw	fp,20(sp)
  8117b4:	df000504 	addi	fp,sp,20
  8117b8:	e13ffc15 	stw	r4,-16(fp)
  8117bc:	e17ffd15 	stw	r5,-12(fp)
  8117c0:	e1bffe15 	stw	r6,-8(fp)
  8117c4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  8117c8:	e0800217 	ldw	r2,8(fp)
  8117cc:	d8800015 	stw	r2,0(sp)
  8117d0:	e1ffff17 	ldw	r7,-4(fp)
  8117d4:	e1bffe17 	ldw	r6,-8(fp)
  8117d8:	e17ffd17 	ldw	r5,-12(fp)
  8117dc:	e13ffc17 	ldw	r4,-16(fp)
  8117e0:	08119580 	call	811958 <alt_iic_isr_register>
}  
  8117e4:	e037883a 	mov	sp,fp
  8117e8:	dfc00117 	ldw	ra,4(sp)
  8117ec:	df000017 	ldw	fp,0(sp)
  8117f0:	dec00204 	addi	sp,sp,8
  8117f4:	f800283a 	ret

008117f8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8117f8:	defff904 	addi	sp,sp,-28
  8117fc:	df000615 	stw	fp,24(sp)
  811800:	df000604 	addi	fp,sp,24
  811804:	e13ffe15 	stw	r4,-8(fp)
  811808:	e17fff15 	stw	r5,-4(fp)
  81180c:	e0bfff17 	ldw	r2,-4(fp)
  811810:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811814:	0005303a 	rdctl	r2,status
  811818:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81181c:	e0fffb17 	ldw	r3,-20(fp)
  811820:	00bfff84 	movi	r2,-2
  811824:	1884703a 	and	r2,r3,r2
  811828:	1001703a 	wrctl	status,r2
  
  return context;
  81182c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  811830:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  811834:	00c00044 	movi	r3,1
  811838:	e0bffa17 	ldw	r2,-24(fp)
  81183c:	1884983a 	sll	r2,r3,r2
  811840:	1007883a 	mov	r3,r2
  811844:	d0a76017 	ldw	r2,-25216(gp)
  811848:	1884b03a 	or	r2,r3,r2
  81184c:	d0a76015 	stw	r2,-25216(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  811850:	d0a76017 	ldw	r2,-25216(gp)
  811854:	100170fa 	wrctl	ienable,r2
  811858:	e0bffc17 	ldw	r2,-16(fp)
  81185c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811860:	e0bffd17 	ldw	r2,-12(fp)
  811864:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  811868:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  81186c:	0001883a 	nop
}
  811870:	e037883a 	mov	sp,fp
  811874:	df000017 	ldw	fp,0(sp)
  811878:	dec00104 	addi	sp,sp,4
  81187c:	f800283a 	ret

00811880 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  811880:	defff904 	addi	sp,sp,-28
  811884:	df000615 	stw	fp,24(sp)
  811888:	df000604 	addi	fp,sp,24
  81188c:	e13ffe15 	stw	r4,-8(fp)
  811890:	e17fff15 	stw	r5,-4(fp)
  811894:	e0bfff17 	ldw	r2,-4(fp)
  811898:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81189c:	0005303a 	rdctl	r2,status
  8118a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8118a4:	e0fffb17 	ldw	r3,-20(fp)
  8118a8:	00bfff84 	movi	r2,-2
  8118ac:	1884703a 	and	r2,r3,r2
  8118b0:	1001703a 	wrctl	status,r2
  
  return context;
  8118b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8118b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  8118bc:	00c00044 	movi	r3,1
  8118c0:	e0bffa17 	ldw	r2,-24(fp)
  8118c4:	1884983a 	sll	r2,r3,r2
  8118c8:	0084303a 	nor	r2,zero,r2
  8118cc:	1007883a 	mov	r3,r2
  8118d0:	d0a76017 	ldw	r2,-25216(gp)
  8118d4:	1884703a 	and	r2,r3,r2
  8118d8:	d0a76015 	stw	r2,-25216(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8118dc:	d0a76017 	ldw	r2,-25216(gp)
  8118e0:	100170fa 	wrctl	ienable,r2
  8118e4:	e0bffc17 	ldw	r2,-16(fp)
  8118e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8118ec:	e0bffd17 	ldw	r2,-12(fp)
  8118f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8118f4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  8118f8:	0001883a 	nop
}
  8118fc:	e037883a 	mov	sp,fp
  811900:	df000017 	ldw	fp,0(sp)
  811904:	dec00104 	addi	sp,sp,4
  811908:	f800283a 	ret

0081190c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  81190c:	defffc04 	addi	sp,sp,-16
  811910:	df000315 	stw	fp,12(sp)
  811914:	df000304 	addi	fp,sp,12
  811918:	e13ffe15 	stw	r4,-8(fp)
  81191c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  811920:	000530fa 	rdctl	r2,ienable
  811924:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  811928:	00c00044 	movi	r3,1
  81192c:	e0bfff17 	ldw	r2,-4(fp)
  811930:	1884983a 	sll	r2,r3,r2
  811934:	1007883a 	mov	r3,r2
  811938:	e0bffd17 	ldw	r2,-12(fp)
  81193c:	1884703a 	and	r2,r3,r2
  811940:	1004c03a 	cmpne	r2,r2,zero
  811944:	10803fcc 	andi	r2,r2,255
}
  811948:	e037883a 	mov	sp,fp
  81194c:	df000017 	ldw	fp,0(sp)
  811950:	dec00104 	addi	sp,sp,4
  811954:	f800283a 	ret

00811958 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  811958:	defff504 	addi	sp,sp,-44
  81195c:	dfc00a15 	stw	ra,40(sp)
  811960:	df000915 	stw	fp,36(sp)
  811964:	df000904 	addi	fp,sp,36
  811968:	e13ffc15 	stw	r4,-16(fp)
  81196c:	e17ffd15 	stw	r5,-12(fp)
  811970:	e1bffe15 	stw	r6,-8(fp)
  811974:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  811978:	00bffa84 	movi	r2,-22
  81197c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  811980:	e0bffd17 	ldw	r2,-12(fp)
  811984:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  811988:	e0bff817 	ldw	r2,-32(fp)
  81198c:	10800808 	cmpgei	r2,r2,32
  811990:	1000271e 	bne	r2,zero,811a30 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811994:	0005303a 	rdctl	r2,status
  811998:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81199c:	e0fffb17 	ldw	r3,-20(fp)
  8119a0:	00bfff84 	movi	r2,-2
  8119a4:	1884703a 	and	r2,r3,r2
  8119a8:	1001703a 	wrctl	status,r2
  
  return context;
  8119ac:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  8119b0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  8119b4:	00802074 	movhi	r2,129
  8119b8:	10989904 	addi	r2,r2,25188
  8119bc:	e0fff817 	ldw	r3,-32(fp)
  8119c0:	180690fa 	slli	r3,r3,3
  8119c4:	10c5883a 	add	r2,r2,r3
  8119c8:	e0fffe17 	ldw	r3,-8(fp)
  8119cc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  8119d0:	00802074 	movhi	r2,129
  8119d4:	10989904 	addi	r2,r2,25188
  8119d8:	e0fff817 	ldw	r3,-32(fp)
  8119dc:	180690fa 	slli	r3,r3,3
  8119e0:	10c5883a 	add	r2,r2,r3
  8119e4:	10800104 	addi	r2,r2,4
  8119e8:	e0ffff17 	ldw	r3,-4(fp)
  8119ec:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8119f0:	e0bffe17 	ldw	r2,-8(fp)
  8119f4:	10000526 	beq	r2,zero,811a0c <alt_iic_isr_register+0xb4>
  8119f8:	e0bff817 	ldw	r2,-32(fp)
  8119fc:	100b883a 	mov	r5,r2
  811a00:	e13ffc17 	ldw	r4,-16(fp)
  811a04:	08117f80 	call	8117f8 <alt_ic_irq_enable>
  811a08:	00000406 	br	811a1c <alt_iic_isr_register+0xc4>
  811a0c:	e0bff817 	ldw	r2,-32(fp)
  811a10:	100b883a 	mov	r5,r2
  811a14:	e13ffc17 	ldw	r4,-16(fp)
  811a18:	08118800 	call	811880 <alt_ic_irq_disable>
  811a1c:	e0bff715 	stw	r2,-36(fp)
  811a20:	e0bffa17 	ldw	r2,-24(fp)
  811a24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811a28:	e0bff917 	ldw	r2,-28(fp)
  811a2c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  811a30:	e0bff717 	ldw	r2,-36(fp)
}
  811a34:	e037883a 	mov	sp,fp
  811a38:	dfc00117 	ldw	ra,4(sp)
  811a3c:	df000017 	ldw	fp,0(sp)
  811a40:	dec00204 	addi	sp,sp,8
  811a44:	f800283a 	ret

00811a48 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  811a48:	defff904 	addi	sp,sp,-28
  811a4c:	dfc00615 	stw	ra,24(sp)
  811a50:	df000515 	stw	fp,20(sp)
  811a54:	df000504 	addi	fp,sp,20
  811a58:	e13ffc15 	stw	r4,-16(fp)
  811a5c:	e17ffd15 	stw	r5,-12(fp)
  811a60:	e1bffe15 	stw	r6,-8(fp)
  811a64:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  811a68:	e1bfff17 	ldw	r6,-4(fp)
  811a6c:	e17ffe17 	ldw	r5,-8(fp)
  811a70:	e13ffd17 	ldw	r4,-12(fp)
  811a74:	080e8c00 	call	80e8c0 <open>
  811a78:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  811a7c:	e0bffb17 	ldw	r2,-20(fp)
  811a80:	10001c16 	blt	r2,zero,811af4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  811a84:	00802074 	movhi	r2,129
  811a88:	108c3104 	addi	r2,r2,12484
  811a8c:	e0fffb17 	ldw	r3,-20(fp)
  811a90:	18c00324 	muli	r3,r3,12
  811a94:	10c5883a 	add	r2,r2,r3
  811a98:	10c00017 	ldw	r3,0(r2)
  811a9c:	e0bffc17 	ldw	r2,-16(fp)
  811aa0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  811aa4:	00802074 	movhi	r2,129
  811aa8:	108c3104 	addi	r2,r2,12484
  811aac:	e0fffb17 	ldw	r3,-20(fp)
  811ab0:	18c00324 	muli	r3,r3,12
  811ab4:	10c5883a 	add	r2,r2,r3
  811ab8:	10800104 	addi	r2,r2,4
  811abc:	10c00017 	ldw	r3,0(r2)
  811ac0:	e0bffc17 	ldw	r2,-16(fp)
  811ac4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  811ac8:	00802074 	movhi	r2,129
  811acc:	108c3104 	addi	r2,r2,12484
  811ad0:	e0fffb17 	ldw	r3,-20(fp)
  811ad4:	18c00324 	muli	r3,r3,12
  811ad8:	10c5883a 	add	r2,r2,r3
  811adc:	10800204 	addi	r2,r2,8
  811ae0:	10c00017 	ldw	r3,0(r2)
  811ae4:	e0bffc17 	ldw	r2,-16(fp)
  811ae8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  811aec:	e13ffb17 	ldw	r4,-20(fp)
  811af0:	080eb4c0 	call	80eb4c <alt_release_fd>
  }
} 
  811af4:	0001883a 	nop
  811af8:	e037883a 	mov	sp,fp
  811afc:	dfc00117 	ldw	ra,4(sp)
  811b00:	df000017 	ldw	fp,0(sp)
  811b04:	dec00204 	addi	sp,sp,8
  811b08:	f800283a 	ret

00811b0c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  811b0c:	defffb04 	addi	sp,sp,-20
  811b10:	dfc00415 	stw	ra,16(sp)
  811b14:	df000315 	stw	fp,12(sp)
  811b18:	df000304 	addi	fp,sp,12
  811b1c:	e13ffd15 	stw	r4,-12(fp)
  811b20:	e17ffe15 	stw	r5,-8(fp)
  811b24:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  811b28:	01c07fc4 	movi	r7,511
  811b2c:	01800044 	movi	r6,1
  811b30:	e17ffd17 	ldw	r5,-12(fp)
  811b34:	01002074 	movhi	r4,129
  811b38:	210c3404 	addi	r4,r4,12496
  811b3c:	0811a480 	call	811a48 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  811b40:	01c07fc4 	movi	r7,511
  811b44:	000d883a 	mov	r6,zero
  811b48:	e17ffe17 	ldw	r5,-8(fp)
  811b4c:	01002074 	movhi	r4,129
  811b50:	210c3104 	addi	r4,r4,12484
  811b54:	0811a480 	call	811a48 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  811b58:	01c07fc4 	movi	r7,511
  811b5c:	01800044 	movi	r6,1
  811b60:	e17fff17 	ldw	r5,-4(fp)
  811b64:	01002074 	movhi	r4,129
  811b68:	210c3704 	addi	r4,r4,12508
  811b6c:	0811a480 	call	811a48 <alt_open_fd>
}  
  811b70:	0001883a 	nop
  811b74:	e037883a 	mov	sp,fp
  811b78:	dfc00117 	ldw	ra,4(sp)
  811b7c:	df000017 	ldw	fp,0(sp)
  811b80:	dec00204 	addi	sp,sp,8
  811b84:	f800283a 	ret

00811b88 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  811b88:	defffd04 	addi	sp,sp,-12
  811b8c:	dfc00215 	stw	ra,8(sp)
  811b90:	df000115 	stw	fp,4(sp)
  811b94:	df000104 	addi	fp,sp,4
  811b98:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  811b9c:	e13fff17 	ldw	r4,-4(fp)
  811ba0:	0811bdc0 	call	811bdc <alt_busy_sleep>
}
  811ba4:	e037883a 	mov	sp,fp
  811ba8:	dfc00117 	ldw	ra,4(sp)
  811bac:	df000017 	ldw	fp,0(sp)
  811bb0:	dec00204 	addi	sp,sp,8
  811bb4:	f800283a 	ret

00811bb8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  811bb8:	deffff04 	addi	sp,sp,-4
  811bbc:	df000015 	stw	fp,0(sp)
  811bc0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  811bc4:	000170fa 	wrctl	ienable,zero
}
  811bc8:	0001883a 	nop
  811bcc:	e037883a 	mov	sp,fp
  811bd0:	df000017 	ldw	fp,0(sp)
  811bd4:	dec00104 	addi	sp,sp,4
  811bd8:	f800283a 	ret

00811bdc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  811bdc:	defffa04 	addi	sp,sp,-24
  811be0:	dfc00515 	stw	ra,20(sp)
  811be4:	df000415 	stw	fp,16(sp)
  811be8:	df000404 	addi	fp,sp,16
  811bec:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  811bf0:	008000c4 	movi	r2,3
  811bf4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  811bf8:	e0fffd17 	ldw	r3,-12(fp)
  811bfc:	008003f4 	movhi	r2,15
  811c00:	10909004 	addi	r2,r2,16960
  811c04:	1885383a 	mul	r2,r3,r2
  811c08:	100b883a 	mov	r5,r2
  811c0c:	0100bef4 	movhi	r4,763
  811c10:	213c2004 	addi	r4,r4,-3968
  811c14:	080b82c0 	call	80b82c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  811c18:	100b883a 	mov	r5,r2
  811c1c:	01200034 	movhi	r4,32768
  811c20:	213fffc4 	addi	r4,r4,-1
  811c24:	080b82c0 	call	80b82c <__udivsi3>
  811c28:	100b883a 	mov	r5,r2
  811c2c:	e13fff17 	ldw	r4,-4(fp)
  811c30:	080b82c0 	call	80b82c <__udivsi3>
  811c34:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  811c38:	e0bffe17 	ldw	r2,-8(fp)
  811c3c:	10002a26 	beq	r2,zero,811ce8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  811c40:	e03ffc15 	stw	zero,-16(fp)
  811c44:	00001706 	br	811ca4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  811c48:	00a00034 	movhi	r2,32768
  811c4c:	10bfffc4 	addi	r2,r2,-1
  811c50:	10bfffc4 	addi	r2,r2,-1
  811c54:	103ffe1e 	bne	r2,zero,811c50 <__alt_mem_onchip_mem+0xff791c50>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  811c58:	e0fffd17 	ldw	r3,-12(fp)
  811c5c:	008003f4 	movhi	r2,15
  811c60:	10909004 	addi	r2,r2,16960
  811c64:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  811c68:	100b883a 	mov	r5,r2
  811c6c:	0100bef4 	movhi	r4,763
  811c70:	213c2004 	addi	r4,r4,-3968
  811c74:	080b82c0 	call	80b82c <__udivsi3>
  811c78:	100b883a 	mov	r5,r2
  811c7c:	01200034 	movhi	r4,32768
  811c80:	213fffc4 	addi	r4,r4,-1
  811c84:	080b82c0 	call	80b82c <__udivsi3>
  811c88:	1007883a 	mov	r3,r2
  811c8c:	e0bfff17 	ldw	r2,-4(fp)
  811c90:	10c5c83a 	sub	r2,r2,r3
  811c94:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  811c98:	e0bffc17 	ldw	r2,-16(fp)
  811c9c:	10800044 	addi	r2,r2,1
  811ca0:	e0bffc15 	stw	r2,-16(fp)
  811ca4:	e0fffc17 	ldw	r3,-16(fp)
  811ca8:	e0bffe17 	ldw	r2,-8(fp)
  811cac:	18bfe616 	blt	r3,r2,811c48 <__alt_mem_onchip_mem+0xff791c48>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  811cb0:	e0fffd17 	ldw	r3,-12(fp)
  811cb4:	008003f4 	movhi	r2,15
  811cb8:	10909004 	addi	r2,r2,16960
  811cbc:	1885383a 	mul	r2,r3,r2
  811cc0:	100b883a 	mov	r5,r2
  811cc4:	0100bef4 	movhi	r4,763
  811cc8:	213c2004 	addi	r4,r4,-3968
  811ccc:	080b82c0 	call	80b82c <__udivsi3>
  811cd0:	1007883a 	mov	r3,r2
  811cd4:	e0bfff17 	ldw	r2,-4(fp)
  811cd8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  811cdc:	10bfffc4 	addi	r2,r2,-1
  811ce0:	103ffe1e 	bne	r2,zero,811cdc <__alt_mem_onchip_mem+0xff791cdc>
  811ce4:	00000d06 	br	811d1c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  811ce8:	e0fffd17 	ldw	r3,-12(fp)
  811cec:	008003f4 	movhi	r2,15
  811cf0:	10909004 	addi	r2,r2,16960
  811cf4:	1885383a 	mul	r2,r3,r2
  811cf8:	100b883a 	mov	r5,r2
  811cfc:	0100bef4 	movhi	r4,763
  811d00:	213c2004 	addi	r4,r4,-3968
  811d04:	080b82c0 	call	80b82c <__udivsi3>
  811d08:	1007883a 	mov	r3,r2
  811d0c:	e0bfff17 	ldw	r2,-4(fp)
  811d10:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  811d14:	10bfffc4 	addi	r2,r2,-1
  811d18:	00bffe16 	blt	zero,r2,811d14 <__alt_mem_onchip_mem+0xff791d14>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  811d1c:	0005883a 	mov	r2,zero
}
  811d20:	e037883a 	mov	sp,fp
  811d24:	dfc00117 	ldw	ra,4(sp)
  811d28:	df000017 	ldw	fp,0(sp)
  811d2c:	dec00204 	addi	sp,sp,8
  811d30:	f800283a 	ret

00811d34 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  811d34:	defffb04 	addi	sp,sp,-20
  811d38:	df000415 	stw	fp,16(sp)
  811d3c:	df000404 	addi	fp,sp,16
  811d40:	e13ffe15 	stw	r4,-8(fp)
  811d44:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  811d48:	e0bfff17 	ldw	r2,-4(fp)
  811d4c:	10840070 	cmpltui	r2,r2,4097
  811d50:	1000021e 	bne	r2,zero,811d5c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  811d54:	00840004 	movi	r2,4096
  811d58:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  811d5c:	e0fffe17 	ldw	r3,-8(fp)
  811d60:	e0bfff17 	ldw	r2,-4(fp)
  811d64:	1885883a 	add	r2,r3,r2
  811d68:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  811d6c:	e0bffe17 	ldw	r2,-8(fp)
  811d70:	e0bffc15 	stw	r2,-16(fp)
  811d74:	00000506 	br	811d8c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  811d78:	e0bffc17 	ldw	r2,-16(fp)
  811d7c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  811d80:	e0bffc17 	ldw	r2,-16(fp)
  811d84:	10800804 	addi	r2,r2,32
  811d88:	e0bffc15 	stw	r2,-16(fp)
  811d8c:	e0fffc17 	ldw	r3,-16(fp)
  811d90:	e0bffd17 	ldw	r2,-12(fp)
  811d94:	18bff836 	bltu	r3,r2,811d78 <__alt_mem_onchip_mem+0xff791d78>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  811d98:	e0bffe17 	ldw	r2,-8(fp)
  811d9c:	108007cc 	andi	r2,r2,31
  811da0:	10000226 	beq	r2,zero,811dac <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  811da4:	e0bffc17 	ldw	r2,-16(fp)
  811da8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  811dac:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  811db0:	0001883a 	nop
  811db4:	e037883a 	mov	sp,fp
  811db8:	df000017 	ldw	fp,0(sp)
  811dbc:	dec00104 	addi	sp,sp,4
  811dc0:	f800283a 	ret

00811dc4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  811dc4:	defffe04 	addi	sp,sp,-8
  811dc8:	df000115 	stw	fp,4(sp)
  811dcc:	df000104 	addi	fp,sp,4
  811dd0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  811dd4:	e0bfff17 	ldw	r2,-4(fp)
  811dd8:	10bffe84 	addi	r2,r2,-6
  811ddc:	10c00428 	cmpgeui	r3,r2,16
  811de0:	18001a1e 	bne	r3,zero,811e4c <alt_exception_cause_generated_bad_addr+0x88>
  811de4:	100690ba 	slli	r3,r2,2
  811de8:	00802074 	movhi	r2,129
  811dec:	10877f04 	addi	r2,r2,7676
  811df0:	1885883a 	add	r2,r3,r2
  811df4:	10800017 	ldw	r2,0(r2)
  811df8:	1000683a 	jmp	r2
  811dfc:	00811e3c 	xorhi	r2,zero,1144
  811e00:	00811e3c 	xorhi	r2,zero,1144
  811e04:	00811e4c 	andi	r2,zero,1145
  811e08:	00811e4c 	andi	r2,zero,1145
  811e0c:	00811e4c 	andi	r2,zero,1145
  811e10:	00811e3c 	xorhi	r2,zero,1144
  811e14:	00811e44 	movi	r2,1145
  811e18:	00811e4c 	andi	r2,zero,1145
  811e1c:	00811e3c 	xorhi	r2,zero,1144
  811e20:	00811e3c 	xorhi	r2,zero,1144
  811e24:	00811e4c 	andi	r2,zero,1145
  811e28:	00811e3c 	xorhi	r2,zero,1144
  811e2c:	00811e44 	movi	r2,1145
  811e30:	00811e4c 	andi	r2,zero,1145
  811e34:	00811e4c 	andi	r2,zero,1145
  811e38:	00811e3c 	xorhi	r2,zero,1144
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  811e3c:	00800044 	movi	r2,1
  811e40:	00000306 	br	811e50 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  811e44:	0005883a 	mov	r2,zero
  811e48:	00000106 	br	811e50 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  811e4c:	0005883a 	mov	r2,zero
  }
}
  811e50:	e037883a 	mov	sp,fp
  811e54:	df000017 	ldw	fp,0(sp)
  811e58:	dec00104 	addi	sp,sp,4
  811e5c:	f800283a 	ret

00811e60 <atexit>:
  811e60:	200b883a 	mov	r5,r4
  811e64:	000f883a 	mov	r7,zero
  811e68:	000d883a 	mov	r6,zero
  811e6c:	0009883a 	mov	r4,zero
  811e70:	0811f281 	jmpi	811f28 <__register_exitproc>

00811e74 <exit>:
  811e74:	defffe04 	addi	sp,sp,-8
  811e78:	000b883a 	mov	r5,zero
  811e7c:	dc000015 	stw	r16,0(sp)
  811e80:	dfc00115 	stw	ra,4(sp)
  811e84:	2021883a 	mov	r16,r4
  811e88:	08120400 	call	812040 <__call_exitprocs>
  811e8c:	00802074 	movhi	r2,129
  811e90:	10912404 	addi	r2,r2,17552
  811e94:	11000017 	ldw	r4,0(r2)
  811e98:	20800f17 	ldw	r2,60(r4)
  811e9c:	10000126 	beq	r2,zero,811ea4 <exit+0x30>
  811ea0:	103ee83a 	callr	r2
  811ea4:	8009883a 	mov	r4,r16
  811ea8:	08121c00 	call	8121c0 <_exit>

00811eac <memcmp>:
  811eac:	01c000c4 	movi	r7,3
  811eb0:	3980192e 	bgeu	r7,r6,811f18 <memcmp+0x6c>
  811eb4:	2144b03a 	or	r2,r4,r5
  811eb8:	11c4703a 	and	r2,r2,r7
  811ebc:	10000f26 	beq	r2,zero,811efc <memcmp+0x50>
  811ec0:	20800003 	ldbu	r2,0(r4)
  811ec4:	28c00003 	ldbu	r3,0(r5)
  811ec8:	10c0151e 	bne	r2,r3,811f20 <memcmp+0x74>
  811ecc:	31bfff84 	addi	r6,r6,-2
  811ed0:	01ffffc4 	movi	r7,-1
  811ed4:	00000406 	br	811ee8 <memcmp+0x3c>
  811ed8:	20800003 	ldbu	r2,0(r4)
  811edc:	28c00003 	ldbu	r3,0(r5)
  811ee0:	31bfffc4 	addi	r6,r6,-1
  811ee4:	10c00e1e 	bne	r2,r3,811f20 <memcmp+0x74>
  811ee8:	21000044 	addi	r4,r4,1
  811eec:	29400044 	addi	r5,r5,1
  811ef0:	31fff91e 	bne	r6,r7,811ed8 <__alt_mem_onchip_mem+0xff791ed8>
  811ef4:	0005883a 	mov	r2,zero
  811ef8:	f800283a 	ret
  811efc:	20c00017 	ldw	r3,0(r4)
  811f00:	28800017 	ldw	r2,0(r5)
  811f04:	18bfee1e 	bne	r3,r2,811ec0 <__alt_mem_onchip_mem+0xff791ec0>
  811f08:	31bfff04 	addi	r6,r6,-4
  811f0c:	21000104 	addi	r4,r4,4
  811f10:	29400104 	addi	r5,r5,4
  811f14:	39bff936 	bltu	r7,r6,811efc <__alt_mem_onchip_mem+0xff791efc>
  811f18:	303fe91e 	bne	r6,zero,811ec0 <__alt_mem_onchip_mem+0xff791ec0>
  811f1c:	003ff506 	br	811ef4 <__alt_mem_onchip_mem+0xff791ef4>
  811f20:	10c5c83a 	sub	r2,r2,r3
  811f24:	f800283a 	ret

00811f28 <__register_exitproc>:
  811f28:	defffa04 	addi	sp,sp,-24
  811f2c:	dc000315 	stw	r16,12(sp)
  811f30:	04002074 	movhi	r16,129
  811f34:	84112404 	addi	r16,r16,17552
  811f38:	80c00017 	ldw	r3,0(r16)
  811f3c:	dc400415 	stw	r17,16(sp)
  811f40:	dfc00515 	stw	ra,20(sp)
  811f44:	18805217 	ldw	r2,328(r3)
  811f48:	2023883a 	mov	r17,r4
  811f4c:	10003726 	beq	r2,zero,81202c <__register_exitproc+0x104>
  811f50:	10c00117 	ldw	r3,4(r2)
  811f54:	010007c4 	movi	r4,31
  811f58:	20c00e16 	blt	r4,r3,811f94 <__register_exitproc+0x6c>
  811f5c:	1a000044 	addi	r8,r3,1
  811f60:	8800221e 	bne	r17,zero,811fec <__register_exitproc+0xc4>
  811f64:	18c00084 	addi	r3,r3,2
  811f68:	18c7883a 	add	r3,r3,r3
  811f6c:	18c7883a 	add	r3,r3,r3
  811f70:	12000115 	stw	r8,4(r2)
  811f74:	10c7883a 	add	r3,r2,r3
  811f78:	19400015 	stw	r5,0(r3)
  811f7c:	0005883a 	mov	r2,zero
  811f80:	dfc00517 	ldw	ra,20(sp)
  811f84:	dc400417 	ldw	r17,16(sp)
  811f88:	dc000317 	ldw	r16,12(sp)
  811f8c:	dec00604 	addi	sp,sp,24
  811f90:	f800283a 	ret
  811f94:	00800034 	movhi	r2,0
  811f98:	10800004 	addi	r2,r2,0
  811f9c:	10002626 	beq	r2,zero,812038 <__register_exitproc+0x110>
  811fa0:	01006404 	movi	r4,400
  811fa4:	d9400015 	stw	r5,0(sp)
  811fa8:	d9800115 	stw	r6,4(sp)
  811fac:	d9c00215 	stw	r7,8(sp)
  811fb0:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  811fb4:	d9400017 	ldw	r5,0(sp)
  811fb8:	d9800117 	ldw	r6,4(sp)
  811fbc:	d9c00217 	ldw	r7,8(sp)
  811fc0:	10001d26 	beq	r2,zero,812038 <__register_exitproc+0x110>
  811fc4:	81000017 	ldw	r4,0(r16)
  811fc8:	10000115 	stw	zero,4(r2)
  811fcc:	02000044 	movi	r8,1
  811fd0:	22405217 	ldw	r9,328(r4)
  811fd4:	0007883a 	mov	r3,zero
  811fd8:	12400015 	stw	r9,0(r2)
  811fdc:	20805215 	stw	r2,328(r4)
  811fe0:	10006215 	stw	zero,392(r2)
  811fe4:	10006315 	stw	zero,396(r2)
  811fe8:	883fde26 	beq	r17,zero,811f64 <__alt_mem_onchip_mem+0xff791f64>
  811fec:	18c9883a 	add	r4,r3,r3
  811ff0:	2109883a 	add	r4,r4,r4
  811ff4:	1109883a 	add	r4,r2,r4
  811ff8:	21802215 	stw	r6,136(r4)
  811ffc:	01800044 	movi	r6,1
  812000:	12406217 	ldw	r9,392(r2)
  812004:	30cc983a 	sll	r6,r6,r3
  812008:	4992b03a 	or	r9,r9,r6
  81200c:	12406215 	stw	r9,392(r2)
  812010:	21c04215 	stw	r7,264(r4)
  812014:	01000084 	movi	r4,2
  812018:	893fd21e 	bne	r17,r4,811f64 <__alt_mem_onchip_mem+0xff791f64>
  81201c:	11006317 	ldw	r4,396(r2)
  812020:	218cb03a 	or	r6,r4,r6
  812024:	11806315 	stw	r6,396(r2)
  812028:	003fce06 	br	811f64 <__alt_mem_onchip_mem+0xff791f64>
  81202c:	18805304 	addi	r2,r3,332
  812030:	18805215 	stw	r2,328(r3)
  812034:	003fc606 	br	811f50 <__alt_mem_onchip_mem+0xff791f50>
  812038:	00bfffc4 	movi	r2,-1
  81203c:	003fd006 	br	811f80 <__alt_mem_onchip_mem+0xff791f80>

00812040 <__call_exitprocs>:
  812040:	defff504 	addi	sp,sp,-44
  812044:	df000915 	stw	fp,36(sp)
  812048:	dd400615 	stw	r21,24(sp)
  81204c:	dc800315 	stw	r18,12(sp)
  812050:	dfc00a15 	stw	ra,40(sp)
  812054:	ddc00815 	stw	r23,32(sp)
  812058:	dd800715 	stw	r22,28(sp)
  81205c:	dd000515 	stw	r20,20(sp)
  812060:	dcc00415 	stw	r19,16(sp)
  812064:	dc400215 	stw	r17,8(sp)
  812068:	dc000115 	stw	r16,4(sp)
  81206c:	d9000015 	stw	r4,0(sp)
  812070:	2839883a 	mov	fp,r5
  812074:	04800044 	movi	r18,1
  812078:	057fffc4 	movi	r21,-1
  81207c:	00802074 	movhi	r2,129
  812080:	10912404 	addi	r2,r2,17552
  812084:	12000017 	ldw	r8,0(r2)
  812088:	45005217 	ldw	r20,328(r8)
  81208c:	44c05204 	addi	r19,r8,328
  812090:	a0001c26 	beq	r20,zero,812104 <__call_exitprocs+0xc4>
  812094:	a0800117 	ldw	r2,4(r20)
  812098:	15ffffc4 	addi	r23,r2,-1
  81209c:	b8000d16 	blt	r23,zero,8120d4 <__call_exitprocs+0x94>
  8120a0:	14000044 	addi	r16,r2,1
  8120a4:	8421883a 	add	r16,r16,r16
  8120a8:	8421883a 	add	r16,r16,r16
  8120ac:	84402004 	addi	r17,r16,128
  8120b0:	a463883a 	add	r17,r20,r17
  8120b4:	a421883a 	add	r16,r20,r16
  8120b8:	e0001e26 	beq	fp,zero,812134 <__call_exitprocs+0xf4>
  8120bc:	80804017 	ldw	r2,256(r16)
  8120c0:	e0801c26 	beq	fp,r2,812134 <__call_exitprocs+0xf4>
  8120c4:	bdffffc4 	addi	r23,r23,-1
  8120c8:	843fff04 	addi	r16,r16,-4
  8120cc:	8c7fff04 	addi	r17,r17,-4
  8120d0:	bd7ff91e 	bne	r23,r21,8120b8 <__alt_mem_onchip_mem+0xff7920b8>
  8120d4:	00800034 	movhi	r2,0
  8120d8:	10800004 	addi	r2,r2,0
  8120dc:	10000926 	beq	r2,zero,812104 <__call_exitprocs+0xc4>
  8120e0:	a0800117 	ldw	r2,4(r20)
  8120e4:	1000301e 	bne	r2,zero,8121a8 <__call_exitprocs+0x168>
  8120e8:	a0800017 	ldw	r2,0(r20)
  8120ec:	10003226 	beq	r2,zero,8121b8 <__call_exitprocs+0x178>
  8120f0:	a009883a 	mov	r4,r20
  8120f4:	98800015 	stw	r2,0(r19)
  8120f8:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  8120fc:	9d000017 	ldw	r20,0(r19)
  812100:	a03fe41e 	bne	r20,zero,812094 <__alt_mem_onchip_mem+0xff792094>
  812104:	dfc00a17 	ldw	ra,40(sp)
  812108:	df000917 	ldw	fp,36(sp)
  81210c:	ddc00817 	ldw	r23,32(sp)
  812110:	dd800717 	ldw	r22,28(sp)
  812114:	dd400617 	ldw	r21,24(sp)
  812118:	dd000517 	ldw	r20,20(sp)
  81211c:	dcc00417 	ldw	r19,16(sp)
  812120:	dc800317 	ldw	r18,12(sp)
  812124:	dc400217 	ldw	r17,8(sp)
  812128:	dc000117 	ldw	r16,4(sp)
  81212c:	dec00b04 	addi	sp,sp,44
  812130:	f800283a 	ret
  812134:	a0800117 	ldw	r2,4(r20)
  812138:	80c00017 	ldw	r3,0(r16)
  81213c:	10bfffc4 	addi	r2,r2,-1
  812140:	15c01426 	beq	r2,r23,812194 <__call_exitprocs+0x154>
  812144:	80000015 	stw	zero,0(r16)
  812148:	183fde26 	beq	r3,zero,8120c4 <__alt_mem_onchip_mem+0xff7920c4>
  81214c:	95c8983a 	sll	r4,r18,r23
  812150:	a0806217 	ldw	r2,392(r20)
  812154:	a5800117 	ldw	r22,4(r20)
  812158:	2084703a 	and	r2,r4,r2
  81215c:	10000b26 	beq	r2,zero,81218c <__call_exitprocs+0x14c>
  812160:	a0806317 	ldw	r2,396(r20)
  812164:	2088703a 	and	r4,r4,r2
  812168:	20000c1e 	bne	r4,zero,81219c <__call_exitprocs+0x15c>
  81216c:	89400017 	ldw	r5,0(r17)
  812170:	d9000017 	ldw	r4,0(sp)
  812174:	183ee83a 	callr	r3
  812178:	a0800117 	ldw	r2,4(r20)
  81217c:	15bfbf1e 	bne	r2,r22,81207c <__alt_mem_onchip_mem+0xff79207c>
  812180:	98800017 	ldw	r2,0(r19)
  812184:	153fcf26 	beq	r2,r20,8120c4 <__alt_mem_onchip_mem+0xff7920c4>
  812188:	003fbc06 	br	81207c <__alt_mem_onchip_mem+0xff79207c>
  81218c:	183ee83a 	callr	r3
  812190:	003ff906 	br	812178 <__alt_mem_onchip_mem+0xff792178>
  812194:	a5c00115 	stw	r23,4(r20)
  812198:	003feb06 	br	812148 <__alt_mem_onchip_mem+0xff792148>
  81219c:	89000017 	ldw	r4,0(r17)
  8121a0:	183ee83a 	callr	r3
  8121a4:	003ff406 	br	812178 <__alt_mem_onchip_mem+0xff792178>
  8121a8:	a0800017 	ldw	r2,0(r20)
  8121ac:	a027883a 	mov	r19,r20
  8121b0:	1029883a 	mov	r20,r2
  8121b4:	003fb606 	br	812090 <__alt_mem_onchip_mem+0xff792090>
  8121b8:	0005883a 	mov	r2,zero
  8121bc:	003ffb06 	br	8121ac <__alt_mem_onchip_mem+0xff7921ac>

008121c0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8121c0:	defffd04 	addi	sp,sp,-12
  8121c4:	df000215 	stw	fp,8(sp)
  8121c8:	df000204 	addi	fp,sp,8
  8121cc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  8121d0:	0001883a 	nop
  8121d4:	e0bfff17 	ldw	r2,-4(fp)
  8121d8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  8121dc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8121e0:	10000226 	beq	r2,zero,8121ec <_exit+0x2c>
    ALT_SIM_FAIL();
  8121e4:	002af070 	cmpltui	zero,zero,43969
  8121e8:	00000106 	br	8121f0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  8121ec:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8121f0:	003fff06 	br	8121f0 <__alt_mem_onchip_mem+0xff7921f0>
