#include <stdio.h>
#include "sys/alt_alarm.h"
#include <system.h>
#include <altera_avalon_pio_regs.h>
#include <math.h>

//instantiating multiple timers to handle different timer modes
//without crashes
volatile alt_alarm timer_simple;
volatile FILE *lcd;
volatile int timer_has_started = 0;
volatile int current_mode = 50;
volatile int mode_request = 0;
volatile enum simple_state current_state;
volatile enum simple_state previous_state;

enum simple_state{rr1,gr,yr,rr2,rg,ry,buffer};

alt_u32 tlc_timer_isr(void* context){
	enum simple_state *something = (enum simple_state*) context;
	current_state++; //move to the next state
	if (current_state == buffer) //if at final state, loop back to initial state
		current_state = rr1;
	printf("current state %d\n", current_state);
	timer_has_started = 0; //reset timer_started flag
	return 0;
}

//LCD writing function, pass in the current mode
int lcd_set_mode(int mode){
	/*if (current_state != previous_state){
		if(lcd != NULL){
				#define ESC 27
				#define CLEAR_LCD_STRING "[2J"
				fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
				fprintf(lcd, "CURRENT MODE: %d\n", mode);
				previous_state = current_state;
		}
	}*/
	if (current_mode != mode) {
		if(lcd != NULL){
			#define ESC 27
			#define CLEAR_LCD_STRING "[2J"
			fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
			fprintf(lcd, "CURRENT MODE: %d\n", mode);
			current_mode = mode;
		}
	}
	return 0;
}

// Mode 1
// Simple controller with automatic lights
int simple_tlc(){
	void* timerContext = 0;
	//loop through all states, starting timer on current state and setting outputs
	if (current_state == rr1){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100100); //turn RED-RED on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, 500, tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state == gr){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100001); //turn GREEN-RED on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, 6000, tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state == yr){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100010); //turn YELLOW-RED on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, 2000, tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state == rr2){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100100); //turn RED-RED on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, 500, tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state == rg){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b001100); //turn RED-GREEN on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, 6000, tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state == ry){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b010100); //turn RED-YELLOW on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, 2000, tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	//lcd_set_mode((unsigned int)current_state);
	return 0;
}

// Mode 2

//Initializes the interrupts for the NS and EW pedestrian buttons
int pedestrian_tlc() {

}

int configurable_tlc(){}
int camera_tlc(){}
/*alt_u32 timer_isr_function(void* context) {
	unsigned int *timeCount = (unsigned int*) context;
	printf("timer value %d\n", *timeCount);

	unsigned int uiButtonsValue = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);

	if (!(uiButtonsValue & 1<<1)) {
		(*timeCount)++;
	} else {
		timer_has_started = 0;
		return 0;
	}
	return 500;
}*/

/*void button_interrupts_function(void* context, alt_u32 id) {
	unsigned int uiButtonsValue = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
	unsigned int *timeCount = (unsigned int*) context;

	void* timerContext = (void*) timeCount;

	if (!(uiButtonsValue & 1<<0)) {
		(*timeCount)++;
		printf("Button 0\n");
	} else if (!(uiButtonsValue & 1<<1)) {
		// start the timer, with timeout of 1000 milli-seconds
		if (!timer_has_started) {
			alt_alarm_start(&timer, 500, timer_isr_function, timerContext);
			timer_has_started = 1;
		}
		printf("Button 1\n");

	} else {
		printf("Didn't work");
	}
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
}*/

int main() {
	unsigned int switch_value = 0;
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
	// enable interrupts for all buttons
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x3);
	//alt_irq_register(KEYS_IRQ,context_going_to_be_passed, button_interrupts_function);
	lcd = fopen(LCD_NAME, "w");

	//EW BUTTON = 1
	int ew_pressed = 0;
	ew_pressed = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
	while(1) {
		//read switch value and bitmask to check specific switches (descending priority)
		switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
		if ((1<<3 & switch_value)) {
			camera_tlc();
			lcd_set_mode(4);
		}
		else if ((1<<2 & switch_value)) {
			configurable_tlc();
			lcd_set_mode(3);
		}
		else if ((1<<1 & switch_value)) {
			pedestrian_tlc();
			lcd_set_mode(2);
			if (ew_pressed & 1<<0) {
				printf("LUL \n");
			}
		}
		else if ((1<<0 & switch_value)) {
			simple_tlc();
			lcd_set_mode(1);
		}
		else
			lcd_set_mode(0); //debug state (prints 7 to screen)
//			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b111111);
	}
	return 0;
}
