#include <stdio.h>
#include "sys/alt_alarm.h"
#include <system.h>
#include <altera_avalon_pio_regs.h>
#include <math.h>
#include <alt_types.h> //alt_u32 is a kind of alt_type
#include <sys/alt_irq.h> //to register interrupts

//define timer timeout values for mode1/2/4
#define rrrr 500
#define grrg 6000
#define yrry 2000

//Mode 1 states
enum simple_state{rr1_1,gr_1,yr_1,rr2_1,rg_1,ry_1,buffer_1};

//Mode 2 states
enum pedestrian_state{rr1_2,gr_2,grp1_2,yr_2,rr2_2,rg_2,rgp2_2,ry_2,buffer_2};

//Mode 3 states
enum configurable_state{rr1_3,gr_3,grp1_3,yr_3,rr2_3,rg_3,rgp2_3,ry_3,buffer_3};

//Mode 4 states
enum camera_state{rr1_4,gr_4,grp1_4,yr_4,rr2_4,rg_4,rgp2_4,ry_4,buffer_4};

//global variable section for peripheral streams, states, and flags
volatile alt_alarm timer_simple;
volatile FILE *lcd;
volatile FILE *uart;
volatile int timer_has_started = 0;
volatile int current_mode = 50;
volatile int mode_request = 0;
volatile int mode_display = 50;
volatile enum simple_state current_state1 = rr1_1;
volatile enum simple_state previous_state1 = rr1_1;
volatile enum pedestrian_state current_state2 = rr1_2;
volatile enum pedestrian_state previous_state2 = rr1_2;
volatile enum configurable_state current_state3 = rr1_3;
volatile enum configurable_state previous_state3 = rr1_3;
volatile enum camera_state current_state4 = rr1_4;
volatile enum camera_state previous_state4 = rr1_4;
volatile int pedNS = 0;
volatile int pedEW = 0;

//create timer variables for mode 3, and initialise them to the default preset values
volatile unsigned int t1 = rrrr;
volatile unsigned int t2 = grrg;
volatile unsigned int t3 = yrry;
volatile unsigned int t4 = rrrr;
volatile unsigned int t5 = grrg;
volatile unsigned int t6 = yrry;

alt_u32 simple_tlc_timer_isr(void* context){
		//enum simple_state *something = (enum simple_state*) context;
		//if there is a pending mode request and we are in a safe state, do not run any output logic and kill the timer
		if (mode_request != current_mode){
			if ((current_state1 == rr1_1) || (current_state1 == rr2_1))
				return 0;
		}

		previous_state1 = current_state1; //save previous state for output transition logic
		current_state1++; //move to the next state
		if (current_state1 == buffer_1) //if at final state, loop back to initial state using a buffer state
			current_state1 = rr1_1;
		printf("current state simple_timer %d\n", current_state1);
		timer_has_started = 0; //reset timer_started flag
	return 0;
}

alt_u32 pedestrian_tlc_timer_isr(void* context){
		//enum simple_state *something = (enum simple_state*) context;

		//if there is a pending mode request and we are in a safe state, do not run any output logic and kill the timer
		if (mode_request != current_mode){
			if ((current_state2 == rr1_2) || (current_state2 == rr2_2))
				return 0;
		}

		previous_state2 = current_state2; //save previous state for output transition logic
		if (pedNS){
			//we are at state RED-RED (1), handle NS pedestrians
			if (current_state2 == rr1_2)
				current_state2 += 2;
			//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
			else if (current_state2 == gr_2)
				current_state2 += 2;
			//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
			else if (current_state2 == rg_2)
				current_state2 += 2;
			else
				current_state2++;
		}
		else if (pedEW){
			//we are at state RED-RED (2), handle EW pedestrians
			if (current_state2 == rr2_2)
				current_state2 += 2;
			//we are at state RED-GREEN, too late to handle EW pedestrians so skip past PED state
			else if (current_state2 == rg_2)
				current_state2 += 2;
			//we are at state GREEN-RED, cannot handle EW pedestrians here so skip past PED state
			else if (current_state2 == gr_2)
				current_state2 += 2;
			else
				current_state2++;
		}
		else if ((pedEW) && (pedNS)){
			//handle pedestrians at either of the RED-RED states because
			if ((current_state2 == rr1_2) || (current_state2 == rr2_2))
				current_state2 += 2;
			//we are at state GREEN-RED, too late to handle NS pedestrians so skip past PED state
			else if (current_state2 == gr_2)
				current_state2 += 2;
			//we are at state RED-GREEN, cannot handle NS pedestrians here so skip past PED state
			else if (current_state2 == rg_2)
				current_state2 += 2;
			else
				current_state2++;
		}
		//if no PED interrupt flags, skip past PED states from GREEN-RED and RED-GREEN
		else if (current_state2 == gr_2)
			current_state2 += 2;
		else if (current_state2 == rg_2)
			current_state2 += 2;
		else
			current_state2++; //move to the next state if no

		//reset the NS/EW pedestrian button interrupt flag when we have changed state (NS/EWHandled = 1)
		if (previous_state2 == grp1_2)
			pedNS = 0;
		else if (previous_state2 == rgp2_2)
			pedEW = 0;

		if (current_state2 == buffer_2) //if at final state, loop back to initial state using buffer state
			current_state2 = rr1_2;
		printf("current state ped_timer %d\n", current_state2);

		timer_has_started = 0; //reset timer_started flag
	return 0;
}

void pedestrian_button_interrupt(void* context, alt_u32 id) {
	unsigned int uiButtonsValue = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
	//unsigned int *somethingelse = (unsigned int*) context;

	if (!(uiButtonsValue & 1<<0)) {
		pedNS = 1;
	}
	else if (!(uiButtonsValue & 1<<1)) {
		pedEW = 1;
	}
	else {
		printf("Didn't work");
	}
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
}

//LCD writing function, pass in the current mode
int lcd_set_mode(int mode){
	if (mode != mode_display) {
		if(lcd != NULL){
			#define ESC 27
			#define CLEAR_LCD_STRING "[2J"
			fprintf(lcd, "%c%s", ESC, CLEAR_LCD_STRING);
			fprintf(lcd, "CURRENT MODE: %d\n", mode);
			mode_display = mode; //set mode display state to prevent LCD flickering
		}
	}
	return 0;
}

// Mode 1
// Simple controller with automatic lights
int simple_tlc(){
	void* timerContext = 0;
	//loop through all states, starting timer on current state and setting outputs
	if (current_state1 == rr1_1){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100100); //turn RED-RED on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, rrrr, simple_tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state1 == gr_1){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100001); //turn GREEN-RED on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, grrg, simple_tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state1 == yr_1){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100010); //turn YELLOW-RED on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, yrry, simple_tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state1 == rr2_1){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b100100); //turn RED-RED on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, rrrr, simple_tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state1 == rg_1){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b001100); //turn RED-GREEN on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, grrg, simple_tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state1 == ry_1){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b010100); //turn RED-YELLOW on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, yrry, simple_tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	return 0;
}

// Mode 2
int pedestrian_tlc() {
	void* timerContext = 0;
	//loop through all states, starting timer on current state and setting outputs
	if (current_state2 == rr1_2){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, rrrr, pedestrian_tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state2 == gr_2){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100001); //turn GREEN-RED on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, grrg, pedestrian_tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state2 == grp1_2){
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b01100001); //turn GREEN-RED and PEDNS on
			if (!(timer_has_started)){
				alt_alarm_start(&timer_simple, grrg, pedestrian_tlc_timer_isr, timerContext);
				timer_has_started = 1;
			}
	}
	else if (current_state2 == yr_2){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100010); //turn YELLOW-RED on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, yrry, pedestrian_tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state2 == rr2_2){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, rrrr, pedestrian_tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state2 == rg_2){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00001100); //turn RED-GREEN on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, grrg, pedestrian_tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state2 == rgp2_2){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b10001100); //turn RED-GREEN and PEDEW on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, grrg, pedestrian_tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state2 == ry_2){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00010100); //turn RED-YELLOW on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, yrry, pedestrian_tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}

	return 0;
}

// Mode 3
int configurable_tlc(){
	void* timerContext = 0;
	unsigned int switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
	unsigned int strcomplete = 0;
	//loop through all states, starting timer on current state and setting outputs
	if (current_state3 == rr1_3){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
		//check switch value to see if there are new timer values
		switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);

		if (switch_value & (1<<17)){
			//if switch indicates configuration mode, block until complete valid string is received
			while (fgetc != '\n'){

			}
		}
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, rrrr, pedestrian_tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state3 == gr_3){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100001); //turn GREEN-RED on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, grrg, pedestrian_tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state3 == grp1_3){
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b01100001); //turn GREEN-RED and PEDNS on
			if (!(timer_has_started)){
				alt_alarm_start(&timer_simple, grrg, pedestrian_tlc_timer_isr, timerContext);
				timer_has_started = 1;
			}
	}
	else if (current_state3 == yr_3){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100010); //turn YELLOW-RED on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, yrry, pedestrian_tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state3 == rr2_3){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00100100); //turn RED-RED on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, rrrr, pedestrian_tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state3 == rg_3){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00001100); //turn RED-GREEN on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, grrg, pedestrian_tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state3 == rgp2_3){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b10001100); //turn RED-GREEN and PEDEW on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, grrg, pedestrian_tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	else if (current_state3 == ry_3){
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00010100); //turn RED-YELLOW on
		if (!(timer_has_started)){
			alt_alarm_start(&timer_simple, yrry, pedestrian_tlc_timer_isr, timerContext);
			timer_has_started = 1;
		}
	}
	return 0;
}
int camera_tlc(){}
/*alt_u32 timer_isr_function(void* context) {
	unsigned int *timeCount = (unsigned int*) context;
	printf("timer value %d\n", *timeCount);

	unsigned int uiButtonsValue = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);

	if (!(uiButtonsValue & 1<<1)) {
		(*timeCount)++;
	} else {
		timer_has_started = 0;
		return 0;
	}
	return 500;
}*/

/*void button_interrupts_function(void* context, alt_u32 id) {
	unsigned int uiButtonsValue = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
	unsigned int *timeCount = (unsigned int*) context;

	void* timerContext = (void*) timeCount;

	if (!(uiButtonsValue & 1<<0)) {
		(*timeCount)++;
		printf("Button 0\n");
	} else if (!(uiButtonsValue & 1<<1)) {
		// start the timer, with timeout of 1000 milli-seconds
		if (!timer_has_started) {
			alt_alarm_start(&timer, 500, timer_isr_function, timerContext);
			timer_has_started = 1;
		}
		printf("Button 1\n");

	} else {
		printf("Didn't work");
	}
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
}*/

int main() {
	unsigned int switch_value = 0;
	void* context_going_to_be_passed = 0;
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
	//enable interrupts for all buttons
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0x3);
	//register the button interrupt ISR
	alt_irq_register(BUTTONS_IRQ, context_going_to_be_passed, pedestrian_button_interrupt);
	//turn on the LCD
	lcd = fopen(LCD_NAME, "w");
	uart = fopen(UART_NAME, "r");

	while(1) {
		//read switch value and bitmask to check specific switches (descending priority)
		switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
		//set mode request depending on switch configuration
		//priority encoded (descending order, i.e. mode 4 is highest and mode 1 is lowest)
		if ((1<<3 & switch_value)) {
			mode_request = 4;
		}
		else if ((1<<2 & switch_value)) {
			mode_request = 3;
		}
		else if ((1<<1 & switch_value)) {
			mode_request = 2;
		}
		else if ((1<<0 & switch_value)) {
			mode_request = 1;
		}
		else
			mode_request = 0;

		//if there is a new mode request:
		//check if we are at a safe state (corresponding to the mode we are in)
		//if safe, then change mode (and make sure to reset all states and interrupt flags)
		if (current_mode != mode_request) {
			switch(current_mode){
			case 1:
				if ((current_state1 == rr1_1) || (current_state1 == rr2_1)){
					current_mode = mode_request;
					current_state1 = 0;
					current_state2 = 0;
					current_state3 = 0;
					current_state4 = 0;
					previous_state1 = 0;
					previous_state2 = 0;
					previous_state3 = 0;
					previous_state4 = 0;
					pedNS = 0;
					pedEW = 0;
				}
				break;
			case 2:
				if ((current_state2 == rr1_2) || (current_state2 == rr2_2)){
					current_mode = mode_request;
					current_state1 = 0;
					current_state2 = 0;
					current_state3 = 0;
					current_state4 = 0;
					previous_state1 = 0;
					previous_state2 = 0;
					previous_state3 = 0;
					previous_state4 = 0;
					pedNS = 0;
					pedEW = 0;
				}
				break;
			case 3:
				if ((current_state3 == rr1_3) || (current_state3 == rr2_3)){
					current_mode = mode_request;
					current_state1 = 0;
					current_state2 = 0;
					current_state3 = 0;
					current_state4 = 0;
					previous_state1 = 0;
					previous_state2 = 0;
					previous_state3 = 0;
					previous_state4 = 0;
					pedNS = 0;
					pedEW = 0;
				}
				break;
			case 4:
				if ((current_state4 == rr1_4) || (current_state4 == rr2_4)){
					current_mode = mode_request;
					current_state1 = 0;
					current_state2 = 0;
					current_state3 = 0;
					current_state4 = 0;
					previous_state1 = 0;
					previous_state2 = 0;
					previous_state3 = 0;
					previous_state4 = 0;
					pedNS = 0;
					pedEW = 0;
				}
				break;
			default: //starting state
				current_mode = mode_request;
				current_state1 = 0;
				current_state2 = 0;
				current_state3 = 0;
				current_state4 = 0;
				previous_state1 = 0;
				previous_state2 = 0;
				previous_state3 = 0;
				previous_state4 = 0;
				pedNS = 0;
				pedEW = 0;
			}
		}


		switch(current_mode){
		case 1:
			simple_tlc();
			lcd_set_mode(1);
			break;
		case 2:
			pedestrian_tlc();
			lcd_set_mode(2);
			break;
		case 3:
			configurable_tlc();
			lcd_set_mode(3);
			break;
		case 4:
			camera_tlc();
			lcd_set_mode(4);
			break;
		default:
			lcd_set_mode(0);
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b111111); //all LEDeez on
		}
	}
	return 0;
}
